00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios-cirrus-debug_.c"
00003                                           ! 1 # 7
00004                                           ! 7 typedef unsigned char Bit8u;
00005                                           !BCC_EOS
00006                                           ! 8 typedef unsigned short Bit16u;
00007                                           !BCC_EOS
00008                                           ! 9 typedef unsigned long Bit32u;
00009                                           !BCC_EOS
00010                                           ! 10 typedef unsigned short Boolean;
00011                                           !BCC_EOS
00012                                           ! 11 static Bit8u read_byte();
00013                                           !BCC_EOS
00014                                           ! 12 static Bit16u read_word();
00015                                           !BCC_EOS
00016                                           ! 13 static void write_byte();
00017                                           !BCC_EOS
00018                                           ! 14 static void write_word();
00019                                           !BCC_EOS
00020                                           ! 15 static Bit8u inb();
00021                                           !BCC_EOS
00022                                           ! 16 static Bit16u inw();
00023                                           !BCC_EOS
00024                                           ! 17 static void outb();
00025                                           !BCC_EOS
00026                                           ! 18 static void outw();
00027                                           !BCC_EOS
00028                                           ! 19 static Bit16u get_SS();
00029                                           !BCC_EOS
00030                                           ! 20 static void printf();
00031                                           !BCC_EOS
00032                                           ! 21 static void unimplemented();
00033                                           !BCC_EOS
00034                                           ! 22 static void unknown();
00035                                           !BCC_EOS
00036                                           ! 23 static Bit8u find_vga_entry();
00037                                           !BCC_EOS
00038                                           ! 24 static void memsetb();
00039                                           !BCC_EOS
00040                                           ! 25 static void memsetw();
00041                                           !BCC_EOS
00042                                           ! 26 static void memcpyb();
00043                                           !BCC_EOS
00044                                           ! 27 static void memcpyw();
00045                                           !BCC_EOS
00046                                           ! 28 static void biosfn_set_video_mode();
00047                                           !BCC_EOS
00048                                           ! 29 static void biosfn_set_cursor_shape();
00049                                           !BCC_EOS
00050                                           ! 30 static void biosfn_set_cursor_pos();
00051                                           !BCC_EOS
00052                                           ! 31 static void biosfn_get_cursor_pos();
00053                                           !BCC_EOS
00054                                           ! 32 static void biosfn_set_active_page();
00055                                           !BCC_EOS
00056                                           ! 33 static void biosfn_scroll();
00057                                           !BCC_EOS
00058                                           ! 34 static void biosfn_read_char_attr();
00059                                           !BCC_EOS
00060                                           ! 35 static void biosfn_write_char_attr();
00061                                           !BCC_EOS
00062                                           ! 36 static void biosfn_write_char_only();
00063                                           !BCC_EOS
00064                                           ! 37 static void biosfn_write_pixel();
00065                                           !BCC_EOS
00066                                           ! 38 static void biosfn_read_pixel();
00067                                           !BCC_EOS
00068                                           ! 39 static void biosfn_write_teletype();
00069                                           !BCC_EOS
00070                                           ! 40 static void biosfn_perform_gray_scale_summing();
00071                                           !BCC_EOS
00072                                           ! 41 static void biosfn_load_text_user_pat();
00073                                           !BCC_EOS
00074                                           ! 42 static void biosfn_load_text_8_14_pat();
00075                                           !BCC_EOS
00076                                           ! 43 static void biosfn_load_text_8_8_pat();
00077                                           !BCC_EOS
00078                                           ! 44 static void biosfn_load_text_8_16_pat();
00079                                           !BCC_EOS
00080                                           ! 45 static void biosfn_load_gfx_8_8_chars();
00081                                           !BCC_EOS
00082                                           ! 46 static void biosfn_load_gfx_user_chars();
00083                                           !BCC_EOS
00084                                           ! 47 static void biosfn_load_gfx_8_14_chars();
00085                                           !BCC_EOS
00086                                           ! 48 static void biosfn_load_gfx_8_8_dd_chars();
00087                                           !BCC_EOS
00088                                           ! 49 static void biosfn_load_gfx_8_16_chars();
00089                                           !BCC_EOS
00090                                           ! 50 static void biosfn_get_font_info();
00091                                           !BCC_EOS
00092                                           ! 51 static void biosfn_alternate_prtsc();
00093                                           !BCC_EOS
00094                                           ! 52 static void biosfn_switch_video_interface();
00095                                           !BCC_EOS
00096                                           ! 53 static void biosfn_enable_video_refresh_control();
00097                                           !BCC_EOS
00098                                           ! 54 static void biosfn_write_string();
00099                                           !BCC_EOS
00100                                           ! 55 static void biosfn_read_state_info();
00101                                           !BCC_EOS
00102                                           ! 56 static void biosfn_read_video_state_size();
00103                                           !BCC_EOS
00104                                           ! 57 static Bit16u biosfn_save_video_state();
00105                                           !BCC_EOS
00106                                           ! 58 static Bit16u biosfn_restore_video_state();
00107                                           !BCC_EOS
00108                                           ! 59 extern Bit8u video_save_pointer_table[];
00109                                           !BCC_EOS
00110                                           ! 60 #asm
00111                                           !BCC_ASM
00112                                           MACRO SET_INT_VECTOR
00113                                             push ds
00114                                             xor ax, ax
00115                                             mov ds, ax
00116                                             mov ax, ?3
00117                                             mov ?1*4, ax
00118                                             mov ax, ?2
00119                                             mov ?1*4+2, ax
00120                                             pop ds
00121                                           MEND
00122                                           ! 71 endasm
00123                                           !BCC_ENDASM
00124                                           ! 72 #asm
00125                                           !BCC_ASM
00126                                           
00127 0000                                      .rom
00128 0000                                      .org 0
00129                                           use16 386
00130                       00000000            vgabios_start:
00131 0000                        55            .byte 0x55, 0xaa
00132 0002                        40            .byte 0x40
00133                       00000003            vgabios_entry_point:
00134 0003           E9         011A              jmp vgabios_init_func
00135 0018                                      .org 0x18
00136 0018                      0108            .word vgabios_pci_data
00137 001E                                      .org 0x1e
00138 001E                        49            .ascii "IBM"
00139 0021                        00            .byte 0x00
00140                       00000022            vgabios_name:
00141 0022                        50            .ascii "Plex86/Bochs VGABios"
00142 0036                        20            .ascii " (PCI)"
00143 003C                        20            .ascii " "
00144 003D                        00            .byte 0x00
00145                       0000003E            vgabios_version:
00146 003E                        30            .ascii "0.6c"
00147 0042                        20            .ascii " "
00148                       00000043            vgabios_date:
00149 0043                        30            .ascii "08 Apr 2009"
00150 004E                        0A            .byte 0x0a,0x0d
00151 0050                        00            .byte 0x00
00152                       00000051            vgabios_copyright:
00153 0051                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00154 007A                        0A            .byte 0x0a,0x0d
00155 007C                        00            .byte 0x00
00156                       0000007D            vgabios_license:
00157 007D                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00158 00AD                        0A            .byte 0x0a,0x0d
00159 00AF                        0A            .byte 0x0a,0x0d
00160 00B1                        00            .byte 0x00
00161                       000000B2            vgabios_website:
00162 00B2                        50            .ascii "Please visit :"
00163 00C0                        0A            .byte 0x0a,0x0d
00164                                           ;;.ascii " . http://www.plex86.org"
00165                                           ;;.byte 0x0a,0x0d
00166 00C2                        20            .ascii " . http://bochs.sourceforge.net"
00167 00E1                        0A            .byte 0x0a,0x0d
00168 00E3                        20            .ascii " . http://www.nongnu.org/vgabios"
00169 0103                        0A            .byte 0x0a,0x0d
00170 0105                        0A            .byte 0x0a,0x0d
00171 0107                        00            .byte 0x00
00172                       00000108            vgabios_pci_data:
00173 0108                        50            .ascii "PCIR"
00174 010C                      1013            .word 0x1013
00175 010E                      00B8            .word 0x00b8
00176 0110                      0000            .word 0
00177 0112                      0018            .word 0x18
00178 0114                        00            .byte 0
00179 0115                        00            .byte 0x0
00180 0116                      0300            .word 0x300
00181 0118                      0040            .word 0x40
00182 011A                      0001            .word 1
00183 011C                        00            .byte 0
00184 011D                        80            .byte 0x80
00185 011E                      0000            .word 0
00186                                           ;; ============================================================================================
00187                                           ;;
00188                                           ;; Init Entry point
00189                                           ;;
00190                                           ;; ============================================================================================
00191                       00000120            vgabios_init_func:
00192                                           ;; init vga card
00193 0120           E8         3416              call init_vga_card
00194                                           ;; init basic bios vars
00195 0123           E8         3472              call init_bios_area
00196                                           ;; set int10 vect
00197                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0126           1E                           push ds
 +a   0127           31C0                         xor ax, ax
 +a   0129           8ED8                         mov ds, ax
 +a   012B           B8                   014A    mov ax,  #vgabios_int10_handler
 +a   012E           A3         0040              mov 0x10*4, ax
 +a   0131           B8                   C000    mov ax,  #0xC000
 +a   0134           A3         0042              mov 0x10*4+2, ax
 +a   0137           1F                           pop ds
00198 0138           E8         8285              call cirrus_init
00199                                           ;; display splash screen
00200 013B           E8         34AE              call _display_splash_screen
00201                                           ;; init video mode and clear the screen
00202 013E           B8                   0003    mov ax,#0x0003
00203 0141           CD                     10    int #0x10
00204                                           ;; show info
00205 0143           E8         34A7              call _display_info
00206                                           ;; show cirrus info
00207 0146           E8         82AE              call cirrus_display_info
00208 0149           CB                           retf
00209                                           ! 156 endasm
00210                                           !BCC_ENDASM
00211                                           ! 157 #asm
00212                                           !BCC_ASM
00213                       0000014A            vgabios_int10_handler:
00214 014A           9C                           pushf
00215 014B           80FC                   0F    cmp ah, #0x0f
00216 014E           75           05              jne int10_test_1A
00217 0150           E8         600B              call biosfn_get_video_mode
00218 0153           EB           7C              jmp int10_end
00219                       00000155            int10_test_1A:
00220 0155           80FC                   1A    cmp ah, #0x1a
00221 0158           75           05              jne int10_test_0B
00222 015A           E8         6B2E              call biosfn_group_1A
00223 015D           EB           72              jmp int10_end
00224                       0000015F            int10_test_0B:
00225 015F           80FC                   0B    cmp ah, #0x0b
00226 0162           75           05              jne int10_test_1103
00227 0164           E8         571C              call biosfn_group_0B
00228 0167           EB           68              jmp int10_end
00229                       00000169            int10_test_1103:
00230 0169           3D                   1103    cmp ax, #0x1103
00231 016C           75           05              jne int10_test_12
00232 016E           E8         66E8              call biosfn_set_text_block_specifier
00233 0171           EB           5E              jmp int10_end
00234                       00000173            int10_test_12:
00235 0173           80FC                   12    cmp ah, #0x12
00236 0176           75           3C              jne int10_test_101B
00237 0178           80FB                   10    cmp bl, #0x10
00238 017B           75           05              jne int10_test_BL30
00239 017D           E8         6933              call biosfn_get_ega_info
00240 0180           EB           4F              jmp int10_end
00241                       00000182            int10_test_BL30:
00242 0182           80FB                   30    cmp bl, #0x30
00243 0185           75           05              jne int10_test_BL31
00244 0187           E8         694D              call biosfn_select_vert_res
00245 018A           EB           45              jmp int10_end
00246                       0000018C            int10_test_BL31:
00247 018C           80FB                   31    cmp bl, #0x31
00248 018F           75           05              jne int10_test_BL32
00249 0191           E8         6996              call biosfn_enable_default_palette_loading
00250 0194           EB           3B              jmp int10_end
00251                       00000196            int10_test_BL32:
00252 0196           80FB                   32    cmp bl, #0x32
00253 0199           75           05              jne int10_test_BL33
00254 019B           E8         69AE              call biosfn_enable_video_addressing
00255 019E           EB           31              jmp int10_end
00256                       000001A0            int10_test_BL33:
00257 01A0           80FB                   33    cmp bl, #0x33
00258 01A3           75           05              jne int10_test_BL34
00259 01A5           E8         69C2              call biosfn_enable_grayscale_summing
00260 01A8           EB           27              jmp int10_end
00261                       000001AA            int10_test_BL34:
00262 01AA           80FB                   34    cmp bl, #0x34
00263 01AD           75           14              jne int10_normal
00264 01AF           E8         69DC              call biosfn_enable_cursor_emulation
00265 01B2           EB           1D              jmp int10_end
00266                       000001B4            int10_test_101B:
00267 01B4           3D                   101B    cmp ax, #0x101b
00268 01B7           74           0A              je int10_normal
00269 01B9           80FC                   10    cmp ah, #0x10
00270 01BC           75           05              jne int10_normal
00271 01BE           E8         5FC4              call biosfn_group_10
00272 01C1           EB           0E              jmp int10_end
00273                       000001C3            int10_normal:
00274 01C3           06                           push es
00275 01C4           1E                           push ds
00276 01C5           60                           pusha
00277                                           ;; We have to set ds to access the right data segment
00278 01C6           BB                   C000    mov bx, #0xc000
00279 01C9           8EDB                         mov ds, bx
00280 01CB           E8         3464              call _int10_func
00281 01CE           61                           popa
00282 01CF           1F                           pop ds
00283 01D0           07                           pop es
00284                       000001D1            int10_end:
00285 01D1           9D                           popf
00286 01D2           CF                           iret
00287                                           ! 232 endasm
00288                                           !BCC_ENDASM
00289                                           ! 233 typedef struct
00290                                           ! 234 {Bit8u svgamode;
00291                                           !BCC_EOS
00292                                           ! 235  Bit8u class;
00293                                           !BCC_EOS
00294                                           ! 236  Bit8u memmodel;
00295                                           !BCC_EOS
00296                                           ! 237  Bit8u pixbits;
00297                                           !BCC_EOS
00298                                           ! 238  Bit16u sstart;
00299                                           !BCC_EOS
00300                                           ! 239  Bit8u pelmask;
00301                                           !BCC_EOS
00302                                           ! 240  Bit8u dacmodel;
00303                                           !BCC_EOS
00304                                           ! 241 } VGAMODES;
00305                                           !BCC_EOS
00306                                           ! 242 static VGAMODES vga_modes[15 +1]=
00307                                           ! 243 {
00308                                           
00309                       000001D3            _vga_modes:
00310                                           ! 244  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00311 01D3                        00            .byte	0
00312 01D4                        00            .byte	0
00313 01D5                        00            .byte	0
00314 01D6                        04            .byte	4
00315 01D7                      B800            .word	$B800
00316 01D9                        FF            .byte	$FF
00317 01DA                        02            .byte	2
00318                                           ! 245  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00319 01DB                        01            .byte	1
00320 01DC                        00            .byte	0
00321 01DD                        00            .byte	0
00322 01DE                        04            .byte	4
00323 01DF                      B800            .word	$B800
00324 01E1                        FF            .byte	$FF
00325 01E2                        02            .byte	2
00326                                           ! 246  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00327 01E3                        02            .byte	2
00328 01E4                        00            .byte	0
00329 01E5                        00            .byte	0
00330 01E6                        04            .byte	4
00331 01E7                      B800            .word	$B800
00332 01E9                        FF            .byte	$FF
00333 01EA                        02            .byte	2
00334                                           ! 247  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00335 01EB                        03            .byte	3
00336 01EC                        00            .byte	0
00337 01ED                        00            .byte	0
00338 01EE                        04            .byte	4
00339 01EF                      B800            .word	$B800
00340 01F1                        FF            .byte	$FF
00341 01F2                        02            .byte	2
00342                                           ! 248  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00343 01F3                        04            .byte	4
00344 01F4                        01            .byte	1
00345 01F5                        02            .byte	2
00346 01F6                        02            .byte	2
00347 01F7                      B800            .word	$B800
00348 01F9                        FF            .byte	$FF
00349 01FA                        01            .byte	1
00350                                           ! 249  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00351 01FB                        05            .byte	5
00352 01FC                        01            .byte	1
00353 01FD                        02            .byte	2
00354 01FE                        02            .byte	2
00355 01FF                      B800            .word	$B800
00356 0201                        FF            .byte	$FF
00357 0202                        01            .byte	1
00358                                           ! 250  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00359 0203                        06            .byte	6
00360 0204                        01            .byte	1
00361 0205                        02            .byte	2
00362 0206                        01            .byte	1
00363 0207                      B800            .word	$B800
00364 0209                        FF            .byte	$FF
00365 020A                        01            .byte	1
00366                                           ! 251  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00367 020B                        07            .byte	7
00368 020C                        00            .byte	0
00369 020D                        01            .byte	1
00370 020E                        04            .byte	4
00371 020F                      B000            .word	$B000
00372 0211                        FF            .byte	$FF
00373 0212                        00            .byte	0
00374                                           ! 252  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00375 0213                        0D            .byte	$D
00376 0214                        01            .byte	1
00377 0215                        04            .byte	4
00378 0216                        04            .byte	4
00379 0217                      A000            .word	$A000
00380 0219                        FF            .byte	$FF
00381 021A                        01            .byte	1
00382                                           ! 253  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00383 021B                        0E            .byte	$E
00384 021C                        01            .byte	1
00385 021D                        04            .byte	4
00386 021E                        04            .byte	4
00387 021F                      A000            .word	$A000
00388 0221                        FF            .byte	$FF
00389 0222                        01            .byte	1
00390                                           ! 254  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00391 0223                        0F            .byte	$F
00392 0224                        01            .byte	1
00393 0225                        03            .byte	3
00394 0226                        01            .byte	1
00395 0227                      A000            .word	$A000
00396 0229                        FF            .byte	$FF
00397 022A                        00            .byte	0
00398                                           ! 255  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00399 022B                        10            .byte	$10
00400 022C                        01            .byte	1
00401 022D                        04            .byte	4
00402 022E                        04            .byte	4
00403 022F                      A000            .word	$A000
00404 0231                        FF            .byte	$FF
00405 0232                        02            .byte	2
00406                                           ! 256  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00407 0233                        11            .byte	$11
00408 0234                        01            .byte	1
00409 0235                        03            .byte	3
00410 0236                        01            .byte	1
00411 0237                      A000            .word	$A000
00412 0239                        FF            .byte	$FF
00413 023A                        02            .byte	2
00414                                           ! 257  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00415 023B                        12            .byte	$12
00416 023C                        01            .byte	1
00417 023D                        04            .byte	4
00418 023E                        04            .byte	4
00419 023F                      A000            .word	$A000
00420 0241                        FF            .byte	$FF
00421 0242                        02            .byte	2
00422                                           ! 258  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00423 0243                        13            .byte	$13
00424 0244                        01            .byte	1
00425 0245                        05            .byte	5
00426 0246                        08            .byte	8
00427 0247                      A000            .word	$A000
00428 0249                        FF            .byte	$FF
00429 024A                        03            .byte	3
00430                                           ! 259  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00431 024B                        6A            .byte	$6A
00432 024C                        01            .byte	1
00433 024D                        04            .byte	4
00434 024E                        04            .byte	4
00435 024F                      A000            .word	$A000
00436 0251                        FF            .byte	$FF
00437 0252                        02            .byte	2
00438                                           ! 260 };
00439                                           !BCC_EOS
00440                                           ! 261 static Bit8u line_to_vpti[15 +1]={
00441                       00000253            _line_to_vpti:
00442                                           ! 262     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00443 0253                        17            .byte	$17
00444 0254                        17            .byte	$17
00445 0255                        18            .byte	$18
00446 0256                        18            .byte	$18
00447 0257                        04            .byte	4
00448 0258                        05            .byte	5
00449 0259                        06            .byte	6
00450 025A                        07            .byte	7
00451                                           ! 263     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00452 025B                        0D            .byte	$D
00453 025C                        0E            .byte	$E
00454 025D                        11            .byte	$11
00455 025E                        12            .byte	$12
00456 025F                        1A            .byte	$1A
00457 0260                        1B            .byte	$1B
00458 0261                        1C            .byte	$1C
00459 0262                        1D            .byte	$1D
00460                                           ! 264 };
00461                                           !BCC_EOS
00462                                           ! 265 static Bit8u dac_regs[3 +1]=
00463                                           ! 266 {0x3f,0x3f,0x3f,0xff};
00464                       00000263            _dac_regs:
00465 0263                        3F            .byte	$3F
00466 0264                        3F            .byte	$3F
00467 0265                        3F            .byte	$3F
00468 0266                        FF            .byte	$FF
00469                                           !BCC_EOS
00470                                           ! 267 typedef struct {
00471                                           ! 268     Bit8u twidth;
00472                                           !BCC_EOS
00473                                           ! 269     Bit8u th
00474                                           ! 269 eightm1;
00475                                           !BCC_EOS
00476                                           ! 270     Bit8u cheight;
00477                                           !BCC_EOS
00478                                           ! 271     Bit8u slength_l;
00479                                           !BCC_EOS
00480                                           ! 272     Bit8u slength_h;
00481                                           !BCC_EOS
00482                                           ! 273     Bit8u sequ_regs[4];
00483                                           !BCC_EOS
00484                                           ! 274     Bit8u miscreg;
00485                                           !BCC_EOS
00486                                           ! 275     Bit8u crtc_regs[25];
00487                                           !BCC_EOS
00488                                           ! 276     Bit8u actl_regs[20];
00489                                           !BCC_EOS
00490                                           ! 277     Bit8u grdc_regs[9];
00491                                           !BCC_EOS
00492                                           ! 278 } VideoParamTableEntry;
00493                                           !BCC_EOS
00494                                           ! 279 static VideoParamTableEntry video_param_table[30] = {
00495                       00000267            _video_param_table:
00496                                           ! 280 {
00497                                           ! 281  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00498 0267                        00            .byte	0
00499 0268                        00            .byte	0
00500 0269                        00            .byte	0
00501 026A                        00            .byte	0
00502 026B                        00            .byte	0
00503 026C                        00            .byte	0
00504 026D                        00            .byte	0
00505 026E                        00            .byte	0
00506                                           ! 282  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00507 026F                        00            .byte	0
00508 0270                        00            .byte	0
00509 0271                        00            .byte	0
00510 0272                        00            .byte	0
00511 0273                        00            .byte	0
00512 0274                        00            .byte	0
00513 0275                        00            .byte	0
00514 0276                        00            .byte	0
00515                                           ! 283  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00516 0277                        00            .byte	0
00517 0278                        00            .byte	0
00518 0279                        00            .byte	0
00519 027A                        00            .byte	0
00520 027B                        00            .byte	0
00521 027C                        00            .byte	0
00522 027D                        00            .byte	0
00523 027E                        00            .byte	0
00524                                           ! 284  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00525 027F                        00            .byte	0
00526 0280                        00            .byte	0
00527 0281                        00            .byte	0
00528 0282                        00            .byte	0
00529 0283                        00            .byte	0
00530 0284                        00            .byte	0
00531 0285                        00            .byte	0
00532 0286                        00            .byte	0
00533                                           ! 285  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00534 0287                        00            .byte	0
00535 0288                        00            .byte	0
00536 0289                        00            .byte	0
00537 028A                        00            .byte	0
00538 028B                        00            .byte	0
00539 028C                        00            .byte	0
00540 028D                        00            .byte	0
00541 028E                        00            .byte	0
00542                                           ! 286  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00543 028F                        00            .byte	0
00544 0290                        00            .byte	0
00545 0291                        00            .byte	0
00546 0292                        00            .byte	0
00547 0293                        00            .byte	0
00548 0294                        00            .byte	0
00549 0295                        00            .byte	0
00550 0296                        00            .byte	0
00551                                           ! 287  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00552 0297                        00            .byte	0
00553 0298                        00            .byte	0
00554 0299                        00            .byte	0
00555 029A                        00            .byte	0
00556 029B                        00            .byte	0
00557 029C                        00            .byte	0
00558 029D                        00            .byte	0
00559 029E                        00            .byte	0
00560                                           ! 288  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00561 029F                        00            .byte	0
00562 02A0                        00            .byte	0
00563 02A1                        00            .byte	0
00564 02A2                        00            .byte	0
00565 02A3                        00            .byte	0
00566 02A4                        00            .byte	0
00567 02A5                        00            .byte	0
00568 02A6                        00            .byte	0
00569                                           ! 289 },
00570                                           ! 290 {
00571                                           ! 291  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00572 02A7                        00            .byte	0
00573 02A8                        00            .byte	0
00574 02A9                        00            .byte	0
00575 02AA                        00            .byte	0
00576 02AB                        00            .byte	0
00577 02AC                        00            .byte	0
00578 02AD                        00            .byte	0
00579 02AE                        00            .byte	0
00580                                           ! 292  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00581 02AF                        00            .byte	0
00582 02B0                        00            .byte	0
00583 02B1                        00            .byte	0
00584 02B2                        00            .byte	0
00585 02B3                        00            .byte	0
00586 02B4                        00            .byte	0
00587 02B5                        00            .byte	0
00588 02B6                        00            .byte	0
00589                                           ! 293  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00590 02B7                        00            .byte	0
00591 02B8                        00            .byte	0
00592 02B9                        00            .byte	0
00593 02BA                        00            .byte	0
00594 02BB                        00            .byte	0
00595 02BC                        00            .byte	0
00596 02BD                        00            .byte	0
00597 02BE                        00            .byte	0
00598                                           ! 294  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00599 02BF                        00            .byte	0
00600 02C0                        00            .byte	0
00601 02C1                        00            .byte	0
00602 02C2                        00            .byte	0
00603 02C3                        00            .byte	0
00604 02C4                        00            .byte	0
00605 02C5                        00            .byte	0
00606 02C6                        00            .byte	0
00607                                           ! 295  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00608 02C7                        00            .byte	0
00609 02C8                        00            .byte	0
00610 02C9                        00            .byte	0
00611 02CA                        00            .byte	0
00612 02CB                        00            .byte	0
00613 02CC                        00            .byte	0
00614 02CD                        00            .byte	0
00615 02CE                        00            .byte	0
00616                                           ! 296  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00617 02CF                        00            .byte	0
00618 02D0                        00            .byte	0
00619 02D1                        00            .byte	0
00620 02D2                        00            .byte	0
00621 02D3                        00            .byte	0
00622 02D4                        00            .byte	0
00623 02D5                        00            .byte	0
00624 02D6                        00            .byte	0
00625                                           ! 297  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00626 02D7                        00            .byte	0
00627 02D8                        00            .byte	0
00628 02D9                        00            .byte	0
00629 02DA                        00            .byte	0
00630 02DB                        00            .byte	0
00631 02DC                        00            .byte	0
00632 02DD                        00            .byte	0
00633 02DE                        00            .byte	0
00634                                           ! 298  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00635 02DF                        00            .byte	0
00636 02E0                        00            .byte	0
00637 02E1                        00            .byte	0
00638 02E2                        00            .byte	0
00639 02E3                        00            .byte	0
00640 02E4                        00            .byte	0
00641 02E5                        00            .byte	0
00642 02E6                        00            .byte	0
00643                                           ! 299 },
00644                                           ! 300 {
00645                                           ! 301  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00646 02E7                        00            .byte	0
00647 02E8                        00            .byte	0
00648 02E9                        00            .byte	0
00649 02EA                        00            .byte	0
00650 02EB                        00            .byte	0
00651 02EC                        00            .byte	0
00652 02ED                        00            .byte	0
00653 02EE                        00            .byte	0
00654                                           ! 302  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00655 02EF                        00            .byte	0
00656 02F0                        00            .byte	0
00657 02F1                        00            .byte	0
00658 02F2                        00            .byte	0
00659 02F3                        00            .byte	0
00660 02F4                        00            .byte	0
00661 02F5                        00            .byte	0
00662 02F6                        00            .byte	0
00663                                           ! 303  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00664 02F7                        00            .byte	0
00665 02F8                        00            .byte	0
00666 02F9                        00            .byte	0
00667 02FA                        00            .byte	0
00668 02FB                        00            .byte	0
00669 02FC                        00            .byte	0
00670 02FD                        00            .byte	0
00671 02FE                        00            .byte	0
00672                                           ! 304  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00673 02FF                        00            .byte	0
00674 0300                        00            .byte	0
00675 0301                        00            .byte	0
00676 0302                        00            .byte	0
00677 0303                        00            .byte	0
00678 0304                        00            .byte	0
00679 0305                        00            .byte	0
00680 0306                        00            .byte	0
00681                                           ! 305  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00682 0307                        00            .byte	0
00683 0308                        00            .byte	0
00684 0309                        00            .byte	0
00685 030A                        00            .byte	0
00686 030B                        00            .byte	0
00687 030C                        00            .byte	0
00688 030D                        00            .byte	0
00689 030E                        00            .byte	0
00690                                           ! 306  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00691 030F                        00            .byte	0
00692 0310                        00            .byte	0
00693 0311                        00            .byte	0
00694 0312                        00            .byte	0
00695 0313                        00            .byte	0
00696 0314                        00            .byte	0
00697 0315                        00            .byte	0
00698 0316                        00            .byte	0
00699                                           ! 307  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00700 0317                        00            .byte	0
00701 0318                        00            .byte	0
00702 0319                        00            .byte	0
00703 031A                        00            .byte	0
00704 031B                        00            .byte	0
00705 031C                        00            .byte	0
00706 031D                        00            .byte	0
00707 031E                        00            .byte	0
00708                                           ! 308  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00709 031F                        00            .byte	0
00710 0320                        00            .byte	0
00711 0321                        00            .byte	0
00712 0322                        00            .byte	0
00713 0323                        00            .byte	0
00714 0324                        00            .byte	0
00715 0325                        00            .byte	0
00716 0326                        00            .byte	0
00717                                           ! 309 },
00718                                           ! 310 {
00719                                           ! 311  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00720 0327                        00            .byte	0
00721 0328                        00            .byte	0
00722 0329                        00            .byte	0
00723 032A                        00            .byte	0
00724 032B                        00            .byte	0
00725 032C                        00            .byte	0
00726 032D                        00            .byte	0
00727 032E                        00            .byte	0
00728                                           ! 312  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00729 032F                        00            .byte	0
00730 0330                        00            .byte	0
00731 0331                        00            .byte	0
00732 0332                        00            .byte	0
00733 0333                        00            .byte	0
00734 0334                        00            .byte	0
00735 0335                        00            .byte	0
00736 0336                        00            .byte	0
00737                                           ! 313  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00738 0337                        00            .byte	0
00739 0338                        00            .byte	0
00740 0339                        00            .byte	0
00741 033A                        00            .byte	0
00742 033B                        00            .byte	0
00743 033C                        00            .byte	0
00744 033D                        00            .byte	0
00745 033E                        00            .byte	0
00746                                           ! 314  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00747 033F                        00            .byte	0
00748 0340                        00            .byte	0
00749 0341                        00            .byte	0
00750 0342                        00            .byte	0
00751 0343                        00            .byte	0
00752 0344                        00            .byte	0
00753 0345                        00            .byte	0
00754 0346                        00            .byte	0
00755                                           ! 315  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00756 0347                        00            .byte	0
00757 0348                        00            .byte	0
00758 0349                        00            .byte	0
00759 034A                        00            .byte	0
00760 034B                        00            .byte	0
00761 034C                        00            .byte	0
00762 034D                        00            .byte	0
00763 034E                        00            .byte	0
00764                                           ! 316  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00765 034F                        00            .byte	0
00766 0350                        00            .byte	0
00767 0351                        00            .byte	0
00768 0352                        00            .byte	0
00769 0353                        00            .byte	0
00770 0354                        00            .byte	0
00771 0355                        00            .byte	0
00772 0356                        00            .byte	0
00773                                           ! 317  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00774 0357                        00            .byte	0
00775 0358                        00            .byte	0
00776 0359                        00            .byte	0
00777 035A                        00            .byte	0
00778 035B                        00            .byte	0
00779 035C                        00            .byte	0
00780 035D                        00            .byte	0
00781 035E                        00            .byte	0
00782                                           ! 318  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00783 035F                        00            .byte	0
00784 0360                        00            .byte	0
00785 0361                        00            .byte	0
00786 0362                        00            .byte	0
00787 0363                        00            .byte	0
00788 0364                        00            .byte	0
00789 0365                        00            .byte	0
00790 0366                        00            .byte	0
00791                                           ! 319 },
00792                                           ! 320 {
00793                                           ! 321  40, 24, 8, 0x00, 0x08,
00794 0367                        28            .byte	$28
00795 0368                        18            .byte	$18
00796 0369                        08            .byte	8
00797 036A                        00            .byte	0
00798 036B                        08            .byte	8
00799                                           ! 322  0x09, 0x03, 0x00, 0x02,
00800 036C                        09            .byte	9
00801 036D                        03            .byte	3
00802 036E                        00            .byte	0
00803 036F                        02            .byte	2
00804                                           ! 323  0x63,
00805 0370                        63            .byte	$63
00806                                           ! 324  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00807 0371                        2D            .byte	$2D
00808 0372                        27            .byte	$27
00809 0373                        28            .byte	$28
00810 0374                        90            .byte	$90
00811 0375                        2B            .byte	$2B
00812 0376                        80            .byte	$80
00813 0377                        BF            .byte	$BF
00814 0378                        1F            .byte	$1F
00815                                           ! 325  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00816 0379                        00            .byte	0
00817 037A                        C1            .byte	$C1
00818 037B                        00            .byte	0
00819 037C                        00            .byte	0
00820 037D                        00            .byte	0
00821 037E                        00            .byte	0
00822 037F                        00            .byte	0
00823 0380                        00            .byte	0
00824                                           ! 326  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0x
00825 0381                        9C            .byte	$9C
00826 0382                        8E            .byte	$8E
00827 0383                        8F            .byte	$8F
00828 0384                        14            .byte	$14
00829 0385                        00            .byte	0
00830 0386                        96            .byte	$96
00831                                           ! 326 b9, 0xa2,
00832 0387                        B9            .byte	$B9
00833 0388                        A2            .byte	$A2
00834                                           ! 327  0xff,
00835 0389                        FF            .byte	$FF
00836                                           ! 328  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00837 038A                        00            .byte	0
00838 038B                        13            .byte	$13
00839 038C                        15            .byte	$15
00840 038D                        17            .byte	$17
00841 038E                        02            .byte	2
00842 038F                        04            .byte	4
00843 0390                        06            .byte	6
00844 0391                        07            .byte	7
00845                                           ! 329  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00846 0392                        10            .byte	$10
00847 0393                        11            .byte	$11
00848 0394                        12            .byte	$12
00849 0395                        13            .byte	$13
00850 0396                        14            .byte	$14
00851 0397                        15            .byte	$15
00852 0398                        16            .byte	$16
00853 0399                        17            .byte	$17
00854                                           ! 330  0x01, 0x00, 0x03, 0x00,
00855 039A                        01            .byte	1
00856 039B                        00            .byte	0
00857 039C                        03            .byte	3
00858 039D                        00            .byte	0
00859                                           ! 331  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00860 039E                        00            .byte	0
00861 039F                        00            .byte	0
00862 03A0                        00            .byte	0
00863 03A1                        00            .byte	0
00864 03A2                        00            .byte	0
00865 03A3                        30            .byte	$30
00866 03A4                        0F            .byte	$F
00867 03A5                        0F            .byte	$F
00868 03A6                        FF            .byte	$FF
00869                                           ! 332 },
00870                                           ! 333 {
00871                                           ! 334  40, 24, 8, 0x00, 0x08,
00872 03A7                        28            .byte	$28
00873 03A8                        18            .byte	$18
00874 03A9                        08            .byte	8
00875 03AA                        00            .byte	0
00876 03AB                        08            .byte	8
00877                                           ! 335  0x09, 0x03, 0x00, 0x02,
00878 03AC                        09            .byte	9
00879 03AD                        03            .byte	3
00880 03AE                        00            .byte	0
00881 03AF                        02            .byte	2
00882                                           ! 336  0x63,
00883 03B0                        63            .byte	$63
00884                                           ! 337  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00885 03B1                        2D            .byte	$2D
00886 03B2                        27            .byte	$27
00887 03B3                        28            .byte	$28
00888 03B4                        90            .byte	$90
00889 03B5                        2B            .byte	$2B
00890 03B6                        80            .byte	$80
00891 03B7                        BF            .byte	$BF
00892 03B8                        1F            .byte	$1F
00893                                           ! 338  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00894 03B9                        00            .byte	0
00895 03BA                        C1            .byte	$C1
00896 03BB                        00            .byte	0
00897 03BC                        00            .byte	0
00898 03BD                        00            .byte	0
00899 03BE                        00            .byte	0
00900 03BF                        00            .byte	0
00901 03C0                        00            .byte	0
00902                                           ! 339  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00903 03C1                        9C            .byte	$9C
00904 03C2                        8E            .byte	$8E
00905 03C3                        8F            .byte	$8F
00906 03C4                        14            .byte	$14
00907 03C5                        00            .byte	0
00908 03C6                        96            .byte	$96
00909 03C7                        B9            .byte	$B9
00910 03C8                        A2            .byte	$A2
00911                                           ! 340  0xff,
00912 03C9                        FF            .byte	$FF
00913                                           ! 341  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00914 03CA                        00            .byte	0
00915 03CB                        13            .byte	$13
00916 03CC                        15            .byte	$15
00917 03CD                        17            .byte	$17
00918 03CE                        02            .byte	2
00919 03CF                        04            .byte	4
00920 03D0                        06            .byte	6
00921 03D1                        07            .byte	7
00922                                           ! 342  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00923 03D2                        10            .byte	$10
00924 03D3                        11            .byte	$11
00925 03D4                        12            .byte	$12
00926 03D5                        13            .byte	$13
00927 03D6                        14            .byte	$14
00928 03D7                        15            .byte	$15
00929 03D8                        16            .byte	$16
00930 03D9                        17            .byte	$17
00931                                           ! 343  0x01, 0x00, 0x03, 0x00,
00932 03DA                        01            .byte	1
00933 03DB                        00            .byte	0
00934 03DC                        03            .byte	3
00935 03DD                        00            .byte	0
00936                                           ! 344  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00937 03DE                        00            .byte	0
00938 03DF                        00            .byte	0
00939 03E0                        00            .byte	0
00940 03E1                        00            .byte	0
00941 03E2                        00            .byte	0
00942 03E3                        30            .byte	$30
00943 03E4                        0F            .byte	$F
00944 03E5                        0F            .byte	$F
00945 03E6                        FF            .byte	$FF
00946                                           ! 345 },
00947                                           ! 346 {
00948                                           ! 347  80, 24, 8, 0x00, 0x10,
00949 03E7                        50            .byte	$50
00950 03E8                        18            .byte	$18
00951 03E9                        08            .byte	8
00952 03EA                        00            .byte	0
00953 03EB                        10            .byte	$10
00954                                           ! 348  0x01, 0x01, 0x00, 0x06,
00955 03EC                        01            .byte	1
00956 03ED                        01            .byte	1
00957 03EE                        00            .byte	0
00958 03EF                        06            .byte	6
00959                                           ! 349  0x63,
00960 03F0                        63            .byte	$63
00961                                           ! 350  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
00962 03F1                        5F            .byte	$5F
00963 03F2                        4F            .byte	$4F
00964 03F3                        50            .byte	$50
00965 03F4                        82            .byte	$82
00966 03F5                        54            .byte	$54
00967 03F6                        80            .byte	$80
00968 03F7                        BF            .byte	$BF
00969 03F8                        1F            .byte	$1F
00970                                           ! 351  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00971 03F9                        00            .byte	0
00972 03FA                        C1            .byte	$C1
00973 03FB                        00            .byte	0
00974 03FC                        00            .byte	0
00975 03FD                        00            .byte	0
00976 03FE                        00            .byte	0
00977 03FF                        00            .byte	0
00978 0400                        00            .byte	0
00979                                           ! 352  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
00980 0401                        9C            .byte	$9C
00981 0402                        8E            .byte	$8E
00982 0403                        8F            .byte	$8F
00983 0404                        28            .byte	$28
00984 0405                        00            .byte	0
00985 0406                        96            .byte	$96
00986 0407                        B9            .byte	$B9
00987 0408                        C2            .byte	$C2
00988                                           ! 353  0xff,
00989 0409                        FF            .byte	$FF
00990                                           ! 354  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00991 040A                        00            .byte	0
00992 040B                        17            .byte	$17
00993 040C                        17            .byte	$17
00994 040D                        17            .byte	$17
00995 040E                        17            .byte	$17
00996 040F                        17            .byte	$17
00997 0410                        17            .byte	$17
00998 0411                        17            .byte	$17
00999                                           ! 355  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01000 0412                        17            .byte	$17
01001 0413                        17            .byte	$17
01002 0414                        17            .byte	$17
01003 0415                        17            .byte	$17
01004 0416                        17            .byte	$17
01005 0417                        17            .byte	$17
01006 0418                        17            .byte	$17
01007 0419                        17            .byte	$17
01008                                           ! 356  0x01, 0x00, 0x01, 0x00,
01009 041A                        01            .byte	1
01010 041B                        00            .byte	0
01011 041C                        01            .byte	1
01012 041D                        00            .byte	0
01013                                           ! 357  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01014 041E                        00            .byte	0
01015 041F                        00            .byte	0
01016 0420                        00            .byte	0
01017 0421                        00            .byte	0
01018 0422                        00            .byte	0
01019 0423                        00            .byte	0
01020 0424                        0D            .byte	$D
01021 0425                        0F            .byte	$F
01022 0426                        FF            .byte	$FF
01023                                           ! 358 },
01024                                           ! 359 {
01025                                           ! 360  80, 24, 16, 0x00, 0x10,
01026 0427                        50            .byte	$50
01027 0428                        18            .byte	$18
01028 0429                        10            .byte	$10
01029 042A                        00            .byte	0
01030 042B                        10            .byte	$10
01031                                           ! 361  0x00, 0x03, 0x00, 0x02,
01032 042C                        00            .byte	0
01033 042D                        03            .byte	3
01034 042E                        00            .byte	0
01035 042F                        02            .byte	2
01036                                           ! 362  0x66,
01037 0430                        66            .byte	$66
01038                                           ! 363  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01039 0431                        5F            .byte	$5F
01040 0432                        4F            .byte	$4F
01041 0433                        50            .byte	$50
01042 0434                        82            .byte	$82
01043 0435                        55            .byte	$55
01044 0436                        81            .byte	$81
01045 0437                        BF            .byte	$BF
01046 0438                        1F            .byte	$1F
01047                                           ! 364  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01048 0439                        00            .byte	0
01049 043A                        4F            .byte	$4F
01050 043B                        0D            .byte	$D
01051 043C                        0E            .byte	$E
01052 043D                        00            .byte	0
01053 043E                        00            .byte	0
01054 043F                        00            .byte	0
01055 0440                        00            .byte	0
01056                                           ! 365  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01057 0441                        9C            .byte	$9C
01058 0442                        8E            .byte	$8E
01059 0443                        8F            .byte	$8F
01060 0444                        28            .byte	$28
01061 0445                        0F            .byte	$F
01062 0446                        96            .byte	$96
01063 0447                        B9            .byte	$B9
01064 0448                        A3            .byte	$A3
01065                                           ! 366  0xff,
01066 0449                        FF            .byte	$FF
01067                                           ! 367  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01068 044A                        00            .byte	0
01069 044B                        08            .byte	8
01070 044C                        08            .byte	8
01071 044D                        08            .byte	8
01072 044E                        08            .byte	8
01073 044F                        08            .byte	8
01074 0450                        08            .byte	8
01075 0451                        08            .byte	8
01076                                           ! 368  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01077 0452                        10            .byte	$10
01078 0453                        18            .byte	$18
01079 0454                        18            .byte	$18
01080 0455                        18            .byte	$18
01081 0456                        18            .byte	$18
01082 0457                        18            .byte	$18
01083 0458                        18            .byte	$18
01084 0459                        18            .byte	$18
01085                                           ! 369  0x0e, 0x00, 0x0f, 0x08,
01086 045A                        0E            .byte	$E
01087 045B                        00            .byte	0
01088 045C                        0F            .byte	$F
01089 045D                        08            .byte	8
01090                                           ! 370  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01091 045E                        00            .byte	0
01092 045F                        00            .byte	0
01093 0460                        00            .byte	0
01094 0461                        00            .byte	0
01095 0462                        00            .byte	0
01096 0463                        10            .byte	$10
01097 0464                        0A            .byte	$A
01098 0465                        0F            .byte	$F
01099 0466                        FF            .byte	$FF
01100                                           ! 371 },
01101                                           ! 372 {
01102                                           ! 373  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01103 0467                        00            .byte	0
01104 0468                        00            .byte	0
01105 0469                        00            .byte	0
01106 046A                        00            .byte	0
01107 046B                        00            .byte	0
01108 046C                        00            .byte	0
01109 046D                        00            .byte	0
01110 046E                        00            .byte	0
01111                                           ! 374  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01112 046F                        00            .byte	0
01113 0470                        00            .byte	0
01114 0471                        00            .byte	0
01115 0472                        00            .byte	0
01116 0473                        00            .byte	0
01117 0474                        00            .byte	0
01118 0475                        00            .byte	0
01119 0476                        00            .byte	0
01120                                           ! 375  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01121 0477                        00            .byte	0
01122 0478                        00            .byte	0
01123 0479                        00            .byte	0
01124 047A                        00            .byte	0
01125 047B                        00            .byte	0
01126 047C                        00            .byte	0
01127 047D                        00            .byte	0
01128 047E                        00            .byte	0
01129                                           ! 376  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01130 047F                        00            .byte	0
01131 0480                        00            .byte	0
01132 0481                        00            .byte	0
01133 0482                        00            .byte	0
01134 0483                        00            .byte	0
01135 0484                        00            .byte	0
01136 0485                        00            .byte	0
01137 0486                        00            .byte	0
01138                                           ! 377  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01139 0487                        00            .byte	0
01140 0488                        00            .byte	0
01141 0489                        00            .byte	0
01142 048A                        00            .byte	0
01143 048B                        00            .byte	0
01144 048C                        00            .byte	0
01145 048D                        00            .byte	0
01146 048E                        00            .byte	0
01147                                           ! 378  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01148 048F                        00            .byte	0
01149 0490                        00            .byte	0
01150 0491                        00            .byte	0
01151 0492                        00            .byte	0
01152 0493                        00            .byte	0
01153 0494                        00            .byte	0
01154 0495                        00            .byte	0
01155 0496                        00            .byte	0
01156                                           ! 379  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01157 0497                        00            .byte	0
01158 0498                        00            .byte	0
01159 0499                        00            .byte	0
01160 049A                        00            .byte	0
01161 049B                        00            .byte	0
01162 049C                        00            .byte	0
01163 049D                        00            .byte	0
01164 049E                        00            .byte	0
01165                                           ! 380  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01166 049F                        00            .byte	0
01167 04A0                        00            .byte	0
01168 04A1                        00            .byte	0
01169 04A2                        00            .byte	0
01170 04A3                        00            .byte	0
01171 04A4                        00            .byte	0
01172 04A5                        00            .byte	0
01173 04A6                        00            .byte	0
01174                                           ! 381 },
01175                                           ! 382 {
01176                                           ! 383  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01177 04A7                        00            .byte	0
01178 04A8                        00            .byte	0
01179 04A9                        00            .byte	0
01180 04AA                        00            .byte	0
01181 04AB                        00            .byte	0
01182 04AC                        00            .byte	0
01183 04AD                        00            .byte	0
01184 04AE                        00            .byte	0
01185                                           ! 384  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01186 04AF                        00            .byte	0
01187 04B0                        00            .byte	0
01188 04B1                        00            .byte	0
01189 04B2                        00            .byte	0
01190 04B3                        00            .byte	0
01191 04B4                        00            .byte	0
01192 04B5                        00            .byte	0
01193 04B6                        00            .byte	0
01194                                           ! 385  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01195 04B7                        00            .byte	0
01196 04B8                        00            .byte	0
01197 04B9                        00            .byte	0
01198 04BA                        00            .byte	0
01199 04BB                        00            .byte	0
01200 04BC                        00            .byte	0
01201 04BD                        00            .byte	0
01202 04BE                        00            .byte	0
01203                                           ! 386  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01204 04BF                        00            .byte	0
01205 04C0                        00            .byte	0
01206 04C1                        00            .byte	0
01207 04C2                        00            .byte	0
01208 04C3                        00            .byte	0
01209 04C4                        00            .byte	0
01210 04C5                        00            .byte	0
01211 04C6                        00            .byte	0
01212                                           ! 387  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01213 04C7                        00            .byte	0
01214 04C8                        00            .byte	0
01215 04C9                        00            .byte	0
01216 04CA                        00            .byte	0
01217 04CB                        00            .byte	0
01218 04CC                        00            .byte	0
01219 04CD                        00            .byte	0
01220 04CE                        00            .byte	0
01221                                           ! 388  0x00, 0x00, 0x00, 0x00, 0
01222 04CF                        00            .byte	0
01223 04D0                        00            .byte	0
01224 04D1                        00            .byte	0
01225 04D2                        00            .byte	0
01226                                           ! 388 x00, 0x00, 0x00, 0x00,
01227 04D3                        00            .byte	0
01228 04D4                        00            .byte	0
01229 04D5                        00            .byte	0
01230 04D6                        00            .byte	0
01231                                           ! 389  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01232 04D7                        00            .byte	0
01233 04D8                        00            .byte	0
01234 04D9                        00            .byte	0
01235 04DA                        00            .byte	0
01236 04DB                        00            .byte	0
01237 04DC                        00            .byte	0
01238 04DD                        00            .byte	0
01239 04DE                        00            .byte	0
01240                                           ! 390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01241 04DF                        00            .byte	0
01242 04E0                        00            .byte	0
01243 04E1                        00            .byte	0
01244 04E2                        00            .byte	0
01245 04E3                        00            .byte	0
01246 04E4                        00            .byte	0
01247 04E5                        00            .byte	0
01248 04E6                        00            .byte	0
01249                                           ! 391 },
01250                                           ! 392 {
01251                                           ! 393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01252 04E7                        00            .byte	0
01253 04E8                        00            .byte	0
01254 04E9                        00            .byte	0
01255 04EA                        00            .byte	0
01256 04EB                        00            .byte	0
01257 04EC                        00            .byte	0
01258 04ED                        00            .byte	0
01259 04EE                        00            .byte	0
01260                                           ! 394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01261 04EF                        00            .byte	0
01262 04F0                        00            .byte	0
01263 04F1                        00            .byte	0
01264 04F2                        00            .byte	0
01265 04F3                        00            .byte	0
01266 04F4                        00            .byte	0
01267 04F5                        00            .byte	0
01268 04F6                        00            .byte	0
01269                                           ! 395  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01270 04F7                        00            .byte	0
01271 04F8                        00            .byte	0
01272 04F9                        00            .byte	0
01273 04FA                        00            .byte	0
01274 04FB                        00            .byte	0
01275 04FC                        00            .byte	0
01276 04FD                        00            .byte	0
01277 04FE                        00            .byte	0
01278                                           ! 396  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01279 04FF                        00            .byte	0
01280 0500                        00            .byte	0
01281 0501                        00            .byte	0
01282 0502                        00            .byte	0
01283 0503                        00            .byte	0
01284 0504                        00            .byte	0
01285 0505                        00            .byte	0
01286 0506                        00            .byte	0
01287                                           ! 397  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01288 0507                        00            .byte	0
01289 0508                        00            .byte	0
01290 0509                        00            .byte	0
01291 050A                        00            .byte	0
01292 050B                        00            .byte	0
01293 050C                        00            .byte	0
01294 050D                        00            .byte	0
01295 050E                        00            .byte	0
01296                                           ! 398  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01297 050F                        00            .byte	0
01298 0510                        00            .byte	0
01299 0511                        00            .byte	0
01300 0512                        00            .byte	0
01301 0513                        00            .byte	0
01302 0514                        00            .byte	0
01303 0515                        00            .byte	0
01304 0516                        00            .byte	0
01305                                           ! 399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01306 0517                        00            .byte	0
01307 0518                        00            .byte	0
01308 0519                        00            .byte	0
01309 051A                        00            .byte	0
01310 051B                        00            .byte	0
01311 051C                        00            .byte	0
01312 051D                        00            .byte	0
01313 051E                        00            .byte	0
01314                                           ! 400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01315 051F                        00            .byte	0
01316 0520                        00            .byte	0
01317 0521                        00            .byte	0
01318 0522                        00            .byte	0
01319 0523                        00            .byte	0
01320 0524                        00            .byte	0
01321 0525                        00            .byte	0
01322 0526                        00            .byte	0
01323                                           ! 401 },
01324                                           ! 402 {
01325                                           ! 403  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01326 0527                        00            .byte	0
01327 0528                        00            .byte	0
01328 0529                        00            .byte	0
01329 052A                        00            .byte	0
01330 052B                        00            .byte	0
01331 052C                        00            .byte	0
01332 052D                        00            .byte	0
01333 052E                        00            .byte	0
01334                                           ! 404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01335 052F                        00            .byte	0
01336 0530                        00            .byte	0
01337 0531                        00            .byte	0
01338 0532                        00            .byte	0
01339 0533                        00            .byte	0
01340 0534                        00            .byte	0
01341 0535                        00            .byte	0
01342 0536                        00            .byte	0
01343                                           ! 405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01344 0537                        00            .byte	0
01345 0538                        00            .byte	0
01346 0539                        00            .byte	0
01347 053A                        00            .byte	0
01348 053B                        00            .byte	0
01349 053C                        00            .byte	0
01350 053D                        00            .byte	0
01351 053E                        00            .byte	0
01352                                           ! 406  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01353 053F                        00            .byte	0
01354 0540                        00            .byte	0
01355 0541                        00            .byte	0
01356 0542                        00            .byte	0
01357 0543                        00            .byte	0
01358 0544                        00            .byte	0
01359 0545                        00            .byte	0
01360 0546                        00            .byte	0
01361                                           ! 407  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01362 0547                        00            .byte	0
01363 0548                        00            .byte	0
01364 0549                        00            .byte	0
01365 054A                        00            .byte	0
01366 054B                        00            .byte	0
01367 054C                        00            .byte	0
01368 054D                        00            .byte	0
01369 054E                        00            .byte	0
01370                                           ! 408  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01371 054F                        00            .byte	0
01372 0550                        00            .byte	0
01373 0551                        00            .byte	0
01374 0552                        00            .byte	0
01375 0553                        00            .byte	0
01376 0554                        00            .byte	0
01377 0555                        00            .byte	0
01378 0556                        00            .byte	0
01379                                           ! 409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01380 0557                        00            .byte	0
01381 0558                        00            .byte	0
01382 0559                        00            .byte	0
01383 055A                        00            .byte	0
01384 055B                        00            .byte	0
01385 055C                        00            .byte	0
01386 055D                        00            .byte	0
01387 055E                        00            .byte	0
01388                                           ! 410  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01389 055F                        00            .byte	0
01390 0560                        00            .byte	0
01391 0561                        00            .byte	0
01392 0562                        00            .byte	0
01393 0563                        00            .byte	0
01394 0564                        00            .byte	0
01395 0565                        00            .byte	0
01396 0566                        00            .byte	0
01397                                           ! 411 },
01398                                           ! 412 {
01399                                           ! 413  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01400 0567                        00            .byte	0
01401 0568                        00            .byte	0
01402 0569                        00            .byte	0
01403 056A                        00            .byte	0
01404 056B                        00            .byte	0
01405 056C                        00            .byte	0
01406 056D                        00            .byte	0
01407 056E                        00            .byte	0
01408                                           ! 414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01409 056F                        00            .byte	0
01410 0570                        00            .byte	0
01411 0571                        00            .byte	0
01412 0572                        00            .byte	0
01413 0573                        00            .byte	0
01414 0574                        00            .byte	0
01415 0575                        00            .byte	0
01416 0576                        00            .byte	0
01417                                           ! 415  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01418 0577                        00            .byte	0
01419 0578                        00            .byte	0
01420 0579                        00            .byte	0
01421 057A                        00            .byte	0
01422 057B                        00            .byte	0
01423 057C                        00            .byte	0
01424 057D                        00            .byte	0
01425 057E                        00            .byte	0
01426                                           ! 416  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01427 057F                        00            .byte	0
01428 0580                        00            .byte	0
01429 0581                        00            .byte	0
01430 0582                        00            .byte	0
01431 0583                        00            .byte	0
01432 0584                        00            .byte	0
01433 0585                        00            .byte	0
01434 0586                        00            .byte	0
01435                                           ! 417  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01436 0587                        00            .byte	0
01437 0588                        00            .byte	0
01438 0589                        00            .byte	0
01439 058A                        00            .byte	0
01440 058B                        00            .byte	0
01441 058C                        00            .byte	0
01442 058D                        00            .byte	0
01443 058E                        00            .byte	0
01444                                           ! 418  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01445 058F                        00            .byte	0
01446 0590                        00            .byte	0
01447 0591                        00            .byte	0
01448 0592                        00            .byte	0
01449 0593                        00            .byte	0
01450 0594                        00            .byte	0
01451 0595                        00            .byte	0
01452 0596                        00            .byte	0
01453                                           ! 419  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01454 0597                        00            .byte	0
01455 0598                        00            .byte	0
01456 0599                        00            .byte	0
01457 059A                        00            .byte	0
01458 059B                        00            .byte	0
01459 059C                        00            .byte	0
01460 059D                        00            .byte	0
01461 059E                        00            .byte	0
01462                                           ! 420  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01463 059F                        00            .byte	0
01464 05A0                        00            .byte	0
01465 05A1                        00            .byte	0
01466 05A2                        00            .byte	0
01467 05A3                        00            .byte	0
01468 05A4                        00            .byte	0
01469 05A5                        00            .byte	0
01470 05A6                        00            .byte	0
01471                                           ! 421 },
01472                                           ! 422 {
01473                                           ! 423  40, 24, 8, 0x00, 0x20,
01474 05A7                        28            .byte	$28
01475 05A8                        18            .byte	$18
01476 05A9                        08            .byte	8
01477 05AA                        00            .byte	0
01478 05AB                        20            .byte	$20
01479                                           ! 424  0x09, 0x0f, 0x00, 0x06,
01480 05AC                        09            .byte	9
01481 05AD                        0F            .byte	$F
01482 05AE                        00            .byte	0
01483 05AF                        06            .byte	6
01484                                           ! 425  0x63,
01485 05B0                        63            .byte	$63
01486                                           ! 426  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01487 05B1                        2D            .byte	$2D
01488 05B2                        27            .byte	$27
01489 05B3                        28            .byte	$28
01490 05B4                        90            .byte	$90
01491 05B5                        2B            .byte	$2B
01492 05B6                        80            .byte	$80
01493 05B7                        BF            .byte	$BF
01494 05B8                        1F            .byte	$1F
01495                                           ! 427  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01496 05B9                        00            .byte	0
01497 05BA                        C0            .byte	$C0
01498 05BB                        00            .byte	0
01499 05BC                        00            .byte	0
01500 05BD                        00            .byte	0
01501 05BE                        00            .byte	0
01502 05BF                        00            .byte	0
01503 05C0                        00            .byte	0
01504                                           ! 428  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01505 05C1                        9C            .byte	$9C
01506 05C2                        8E            .byte	$8E
01507 05C3                        8F            .byte	$8F
01508 05C4                        14            .byte	$14
01509 05C5                        00            .byte	0
01510 05C6                        96            .byte	$96
01511 05C7                        B9            .byte	$B9
01512 05C8                        E3            .byte	$E3
01513                                           ! 429  0xff,
01514 05C9                        FF            .byte	$FF
01515                                           ! 430  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01516 05CA                        00            .byte	0
01517 05CB                        01            .byte	1
01518 05CC                        02            .byte	2
01519 05CD                        03            .byte	3
01520 05CE                        04            .byte	4
01521 05CF                        05            .byte	5
01522 05D0                        06            .byte	6
01523 05D1                        07            .byte	7
01524                                           ! 431  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01525 05D2                        10            .byte	$10
01526 05D3                        11            .byte	$11
01527 05D4                        12            .byte	$12
01528 05D5                        13            .byte	$13
01529 05D6                        14            .byte	$14
01530 05D7                        15            .byte	$15
01531 05D8                        16            .byte	$16
01532 05D9                        17            .byte	$17
01533                                           ! 432  0x01, 0x00, 0x0f, 0x00,
01534 05DA                        01            .byte	1
01535 05DB                        00            .byte	0
01536 05DC                        0F            .byte	$F
01537 05DD                        00            .byte	0
01538                                           ! 433  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01539 05DE                        00            .byte	0
01540 05DF                        00            .byte	0
01541 05E0                        00            .byte	0
01542 05E1                        00            .byte	0
01543 05E2                        00            .byte	0
01544 05E3                        00            .byte	0
01545 05E4                        05            .byte	5
01546 05E5                        0F            .byte	$F
01547 05E6                        FF            .byte	$FF
01548                                           ! 434 },
01549                                           ! 435 {
01550                                           ! 436  80, 24, 8, 0x00, 0x40,
01551 05E7                        50            .byte	$50
01552 05E8                        18            .byte	$18
01553 05E9                        08            .byte	8
01554 05EA                        00            .byte	0
01555 05EB                        40            .byte	$40
01556                                           ! 437  0x01, 0x0f, 0x00, 0x06,
01557 05EC                        01            .byte	1
01558 05ED                        0F            .byte	$F
01559 05EE                        00            .byte	0
01560 05EF                        06            .byte	6
01561                                           ! 438  0x63,
01562 05F0                        63            .byte	$63
01563                                           ! 439  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01564 05F1                        5F            .byte	$5F
01565 05F2                        4F            .byte	$4F
01566 05F3                        50            .byte	$50
01567 05F4                        82            .byte	$82
01568 05F5                        54            .byte	$54
01569 05F6                        80            .byte	$80
01570 05F7                        BF            .byte	$BF
01571 05F8                        1F            .byte	$1F
01572                                           ! 440  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01573 05F9                        00            .byte	0
01574 05FA                        C0            .byte	$C0
01575 05FB                        00            .byte	0
01576 05FC                        00            .byte	0
01577 05FD                        00            .byte	0
01578 05FE                        00            .byte	0
01579 05FF                        00            .byte	0
01580 0600                        00            .byte	0
01581                                           ! 441  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01582 0601                        9C            .byte	$9C
01583 0602                        8E            .byte	$8E
01584 0603                        8F            .byte	$8F
01585 0604                        28            .byte	$28
01586 0605                        00            .byte	0
01587 0606                        96            .byte	$96
01588 0607                        B9            .byte	$B9
01589 0608                        E3            .byte	$E3
01590                                           ! 442  0xff,
01591 0609                        FF            .byte	$FF
01592                                           ! 443  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01593 060A                        00            .byte	0
01594 060B                        01            .byte	1
01595 060C                        02            .byte	2
01596 060D                        03            .byte	3
01597 060E                        04            .byte	4
01598 060F                        05            .byte	5
01599 0610                        06            .byte	6
01600 0611                        07            .byte	7
01601                                           ! 444  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01602 0612                        10            .byte	$10
01603 0613                        11            .byte	$11
01604 0614                        12            .byte	$12
01605 0615                        13            .byte	$13
01606 0616                        14            .byte	$14
01607 0617                        15            .byte	$15
01608 0618                        16            .byte	$16
01609 0619                        17            .byte	$17
01610                                           ! 445  0x01, 0x00, 0x0f, 0x00,
01611 061A                        01            .byte	1
01612 061B                        00            .byte	0
01613 061C                        0F            .byte	$F
01614 061D                        00            .byte	0
01615                                           ! 446  0x00
01616                                           ! 446 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01617 061E                        00            .byte	0
01618 061F                        00            .byte	0
01619 0620                        00            .byte	0
01620 0621                        00            .byte	0
01621 0622                        00            .byte	0
01622 0623                        00            .byte	0
01623 0624                        05            .byte	5
01624 0625                        0F            .byte	$F
01625 0626                        FF            .byte	$FF
01626                                           ! 447 },
01627                                           ! 448 {
01628                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01629 0627                        00            .byte	0
01630 0628                        00            .byte	0
01631 0629                        00            .byte	0
01632 062A                        00            .byte	0
01633 062B                        00            .byte	0
01634 062C                        00            .byte	0
01635 062D                        00            .byte	0
01636 062E                        00            .byte	0
01637                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01638 062F                        00            .byte	0
01639 0630                        00            .byte	0
01640 0631                        00            .byte	0
01641 0632                        00            .byte	0
01642 0633                        00            .byte	0
01643 0634                        00            .byte	0
01644 0635                        00            .byte	0
01645 0636                        00            .byte	0
01646                                           ! 451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01647 0637                        00            .byte	0
01648 0638                        00            .byte	0
01649 0639                        00            .byte	0
01650 063A                        00            .byte	0
01651 063B                        00            .byte	0
01652 063C                        00            .byte	0
01653 063D                        00            .byte	0
01654 063E                        00            .byte	0
01655                                           ! 452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01656 063F                        00            .byte	0
01657 0640                        00            .byte	0
01658 0641                        00            .byte	0
01659 0642                        00            .byte	0
01660 0643                        00            .byte	0
01661 0644                        00            .byte	0
01662 0645                        00            .byte	0
01663 0646                        00            .byte	0
01664                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01665 0647                        00            .byte	0
01666 0648                        00            .byte	0
01667 0649                        00            .byte	0
01668 064A                        00            .byte	0
01669 064B                        00            .byte	0
01670 064C                        00            .byte	0
01671 064D                        00            .byte	0
01672 064E                        00            .byte	0
01673                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01674 064F                        00            .byte	0
01675 0650                        00            .byte	0
01676 0651                        00            .byte	0
01677 0652                        00            .byte	0
01678 0653                        00            .byte	0
01679 0654                        00            .byte	0
01680 0655                        00            .byte	0
01681 0656                        00            .byte	0
01682                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01683 0657                        00            .byte	0
01684 0658                        00            .byte	0
01685 0659                        00            .byte	0
01686 065A                        00            .byte	0
01687 065B                        00            .byte	0
01688 065C                        00            .byte	0
01689 065D                        00            .byte	0
01690 065E                        00            .byte	0
01691                                           ! 456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01692 065F                        00            .byte	0
01693 0660                        00            .byte	0
01694 0661                        00            .byte	0
01695 0662                        00            .byte	0
01696 0663                        00            .byte	0
01697 0664                        00            .byte	0
01698 0665                        00            .byte	0
01699 0666                        00            .byte	0
01700                                           ! 457 },
01701                                           ! 458 {
01702                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01703 0667                        00            .byte	0
01704 0668                        00            .byte	0
01705 0669                        00            .byte	0
01706 066A                        00            .byte	0
01707 066B                        00            .byte	0
01708 066C                        00            .byte	0
01709 066D                        00            .byte	0
01710 066E                        00            .byte	0
01711                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01712 066F                        00            .byte	0
01713 0670                        00            .byte	0
01714 0671                        00            .byte	0
01715 0672                        00            .byte	0
01716 0673                        00            .byte	0
01717 0674                        00            .byte	0
01718 0675                        00            .byte	0
01719 0676                        00            .byte	0
01720                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01721 0677                        00            .byte	0
01722 0678                        00            .byte	0
01723 0679                        00            .byte	0
01724 067A                        00            .byte	0
01725 067B                        00            .byte	0
01726 067C                        00            .byte	0
01727 067D                        00            .byte	0
01728 067E                        00            .byte	0
01729                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01730 067F                        00            .byte	0
01731 0680                        00            .byte	0
01732 0681                        00            .byte	0
01733 0682                        00            .byte	0
01734 0683                        00            .byte	0
01735 0684                        00            .byte	0
01736 0685                        00            .byte	0
01737 0686                        00            .byte	0
01738                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01739 0687                        00            .byte	0
01740 0688                        00            .byte	0
01741 0689                        00            .byte	0
01742 068A                        00            .byte	0
01743 068B                        00            .byte	0
01744 068C                        00            .byte	0
01745 068D                        00            .byte	0
01746 068E                        00            .byte	0
01747                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01748 068F                        00            .byte	0
01749 0690                        00            .byte	0
01750 0691                        00            .byte	0
01751 0692                        00            .byte	0
01752 0693                        00            .byte	0
01753 0694                        00            .byte	0
01754 0695                        00            .byte	0
01755 0696                        00            .byte	0
01756                                           ! 465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01757 0697                        00            .byte	0
01758 0698                        00            .byte	0
01759 0699                        00            .byte	0
01760 069A                        00            .byte	0
01761 069B                        00            .byte	0
01762 069C                        00            .byte	0
01763 069D                        00            .byte	0
01764 069E                        00            .byte	0
01765                                           ! 466  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01766 069F                        00            .byte	0
01767 06A0                        00            .byte	0
01768 06A1                        00            .byte	0
01769 06A2                        00            .byte	0
01770 06A3                        00            .byte	0
01771 06A4                        00            .byte	0
01772 06A5                        00            .byte	0
01773 06A6                        00            .byte	0
01774                                           ! 467 },
01775                                           ! 468 {
01776                                           ! 469  80, 24, 14, 0x00, 0x80,
01777 06A7                        50            .byte	$50
01778 06A8                        18            .byte	$18
01779 06A9                        0E            .byte	$E
01780 06AA                        00            .byte	0
01781 06AB                        80            .byte	$80
01782                                           ! 470  0x01, 0x0f, 0x00, 0x06,
01783 06AC                        01            .byte	1
01784 06AD                        0F            .byte	$F
01785 06AE                        00            .byte	0
01786 06AF                        06            .byte	6
01787                                           ! 471  0xa3,
01788 06B0                        A3            .byte	$A3
01789                                           ! 472  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01790 06B1                        5F            .byte	$5F
01791 06B2                        4F            .byte	$4F
01792 06B3                        50            .byte	$50
01793 06B4                        82            .byte	$82
01794 06B5                        54            .byte	$54
01795 06B6                        80            .byte	$80
01796 06B7                        BF            .byte	$BF
01797 06B8                        1F            .byte	$1F
01798                                           ! 473  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01799 06B9                        00            .byte	0
01800 06BA                        40            .byte	$40
01801 06BB                        00            .byte	0
01802 06BC                        00            .byte	0
01803 06BD                        00            .byte	0
01804 06BE                        00            .byte	0
01805 06BF                        00            .byte	0
01806 06C0                        00            .byte	0
01807                                           ! 474  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01808 06C1                        83            .byte	$83
01809 06C2                        85            .byte	$85
01810 06C3                        5D            .byte	$5D
01811 06C4                        28            .byte	$28
01812 06C5                        0F            .byte	$F
01813 06C6                        63            .byte	$63
01814 06C7                        BA            .byte	$BA
01815 06C8                        E3            .byte	$E3
01816                                           ! 475  0xff,
01817 06C9                        FF            .byte	$FF
01818                                           ! 476  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
01819 06CA                        00            .byte	0
01820 06CB                        08            .byte	8
01821 06CC                        00            .byte	0
01822 06CD                        00            .byte	0
01823 06CE                        18            .byte	$18
01824 06CF                        18            .byte	$18
01825 06D0                        00            .byte	0
01826 06D1                        00            .byte	0
01827                                           ! 477  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
01828 06D2                        00            .byte	0
01829 06D3                        08            .byte	8
01830 06D4                        00            .byte	0
01831 06D5                        00            .byte	0
01832 06D6                        00            .byte	0
01833 06D7                        18            .byte	$18
01834 06D8                        00            .byte	0
01835 06D9                        00            .byte	0
01836                                           ! 478  0x01, 0x00, 0x01, 0x00,
01837 06DA                        01            .byte	1
01838 06DB                        00            .byte	0
01839 06DC                        01            .byte	1
01840 06DD                        00            .byte	0
01841                                           ! 479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01842 06DE                        00            .byte	0
01843 06DF                        00            .byte	0
01844 06E0                        00            .byte	0
01845 06E1                        00            .byte	0
01846 06E2                        00            .byte	0
01847 06E3                        00            .byte	0
01848 06E4                        05            .byte	5
01849 06E5                        0F            .byte	$F
01850 06E6                        FF            .byte	$FF
01851                                           ! 480 },
01852                                           ! 481 {
01853                                           ! 482  80, 24, 14, 0x00, 0x80,
01854 06E7                        50            .byte	$50
01855 06E8                        18            .byte	$18
01856 06E9                        0E            .byte	$E
01857 06EA                        00            .byte	0
01858 06EB                        80            .byte	$80
01859                                           ! 483  0x01, 0x0f, 0x00, 0x06,
01860 06EC                        01            .byte	1
01861 06ED                        0F            .byte	$F
01862 06EE                        00            .byte	0
01863 06EF                        06            .byte	6
01864                                           ! 484  0xa3,
01865 06F0                        A3            .byte	$A3
01866                                           ! 485  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01867 06F1                        5F            .byte	$5F
01868 06F2                        4F            .byte	$4F
01869 06F3                        50            .byte	$50
01870 06F4                        82            .byte	$82
01871 06F5                        54            .byte	$54
01872 06F6                        80            .byte	$80
01873 06F7                        BF            .byte	$BF
01874 06F8                        1F            .byte	$1F
01875                                           ! 486  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01876 06F9                        00            .byte	0
01877 06FA                        40            .byte	$40
01878 06FB                        00            .byte	0
01879 06FC                        00            .byte	0
01880 06FD                        00            .byte	0
01881 06FE                        00            .byte	0
01882 06FF                        00            .byte	0
01883 0700                        00            .byte	0
01884                                           ! 487  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01885 0701                        83            .byte	$83
01886 0702                        85            .byte	$85
01887 0703                        5D            .byte	$5D
01888 0704                        28            .byte	$28
01889 0705                        0F            .byte	$F
01890 0706                        63            .byte	$63
01891 0707                        BA            .byte	$BA
01892 0708                        E3            .byte	$E3
01893                                           ! 488  0xff,
01894 0709                        FF            .byte	$FF
01895                                           ! 489  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
01896 070A                        00            .byte	0
01897 070B                        01            .byte	1
01898 070C                        02            .byte	2
01899 070D                        03            .byte	3
01900 070E                        04            .byte	4
01901 070F                        05            .byte	5
01902 0710                        14            .byte	$14
01903 0711                        07            .byte	7
01904                                           ! 490  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
01905 0712                        38            .byte	$38
01906 0713                        39            .byte	$39
01907 0714                        3A            .byte	$3A
01908 0715                        3B            .byte	$3B
01909 0716                        3C            .byte	$3C
01910 0717                        3D            .byte	$3D
01911 0718                        3E            .byte	$3E
01912 0719                        3F            .byte	$3F
01913                                           ! 491  0x01, 0x00, 0x0f, 0x00,
01914 071A                        01            .byte	1
01915 071B                        00            .byte	0
01916 071C                        0F            .byte	$F
01917 071D                        00            .byte	0
01918                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01919 071E                        00            .byte	0
01920 071F                        00            .byte	0
01921 0720                        00            .byte	0
01922 0721                        00            .byte	0
01923 0722                        00            .byte	0
01924 0723                        00            .byte	0
01925 0724                        05            .byte	5
01926 0725                        0F            .byte	$F
01927 0726                        FF            .byte	$FF
01928                                           ! 493 },
01929                                           ! 494 {
01930                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01931 0727                        00            .byte	0
01932 0728                        00            .byte	0
01933 0729                        00            .byte	0
01934 072A                        00            .byte	0
01935 072B                        00            .byte	0
01936 072C                        00            .byte	0
01937 072D                        00            .byte	0
01938 072E                        00            .byte	0
01939                                           ! 496  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01940 072F                        00            .byte	0
01941 0730                        00            .byte	0
01942 0731                        00            .byte	0
01943 0732                        00            .byte	0
01944 0733                        00            .byte	0
01945 0734                        00            .byte	0
01946 0735                        00            .byte	0
01947 0736                        00            .byte	0
01948                                           ! 497  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01949 0737                        00            .byte	0
01950 0738                        00            .byte	0
01951 0739                        00            .byte	0
01952 073A                        00            .byte	0
01953 073B                        00            .byte	0
01954 073C                        00            .byte	0
01955 073D                        00            .byte	0
01956 073E                        00            .byte	0
01957                                           ! 498  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01958 073F                        00            .byte	0
01959 0740                        00            .byte	0
01960 0741                        00            .byte	0
01961 0742                        00            .byte	0
01962 0743                        00            .byte	0
01963 0744                        00            .byte	0
01964 0745                        00            .byte	0
01965 0746                        00            .byte	0
01966                                           ! 499  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01967 0747                        00            .byte	0
01968 0748                        00            .byte	0
01969 0749                        00            .byte	0
01970 074A                        00            .byte	0
01971 074B                        00            .byte	0
01972 074C                        00            .byte	0
01973 074D                        00            .byte	0
01974 074E                        00            .byte	0
01975                                           ! 500  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01976 074F                        00            .byte	0
01977 0750                        00            .byte	0
01978 0751                        00            .byte	0
01979 0752                        00            .byte	0
01980 0753                        00            .byte	0
01981 0754                        00            .byte	0
01982 0755                        00            .byte	0
01983 0756                        00            .byte	0
01984                                           ! 501  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01985 0757                        00            .byte	0
01986 0758                        00            .byte	0
01987 0759                        00            .byte	0
01988 075A                        00            .byte	0
01989 075B                        00            .byte	0
01990 075C                        00            .byte	0
01991 075D                        00            .byte	0
01992 075E                        00            .byte	0
01993                                           ! 502  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01994 075F                        00            .byte	0
01995 0760                        00            .byte	0
01996 0761                        00            .byte	0
01997 0762                        00            .byte	0
01998 0763                        00            .byte	0
01999 0764                        00            .byte	0
02000 0765                        00            .byte	0
02001 0766                        00            .byte	0
02002                                           ! 503 },
02003                                           ! 504 {
02004                                           ! 505  0x00, 0x00, 0
02005 0767                        00            .byte	0
02006 0768                        00            .byte	0
02007                                           ! 505 x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02008 0769                        00            .byte	0
02009 076A                        00            .byte	0
02010 076B                        00            .byte	0
02011 076C                        00            .byte	0
02012 076D                        00            .byte	0
02013 076E                        00            .byte	0
02014                                           ! 506  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02015 076F                        00            .byte	0
02016 0770                        00            .byte	0
02017 0771                        00            .byte	0
02018 0772                        00            .byte	0
02019 0773                        00            .byte	0
02020 0774                        00            .byte	0
02021 0775                        00            .byte	0
02022 0776                        00            .byte	0
02023                                           ! 507  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02024 0777                        00            .byte	0
02025 0778                        00            .byte	0
02026 0779                        00            .byte	0
02027 077A                        00            .byte	0
02028 077B                        00            .byte	0
02029 077C                        00            .byte	0
02030 077D                        00            .byte	0
02031 077E                        00            .byte	0
02032                                           ! 508  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02033 077F                        00            .byte	0
02034 0780                        00            .byte	0
02035 0781                        00            .byte	0
02036 0782                        00            .byte	0
02037 0783                        00            .byte	0
02038 0784                        00            .byte	0
02039 0785                        00            .byte	0
02040 0786                        00            .byte	0
02041                                           ! 509  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02042 0787                        00            .byte	0
02043 0788                        00            .byte	0
02044 0789                        00            .byte	0
02045 078A                        00            .byte	0
02046 078B                        00            .byte	0
02047 078C                        00            .byte	0
02048 078D                        00            .byte	0
02049 078E                        00            .byte	0
02050                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02051 078F                        00            .byte	0
02052 0790                        00            .byte	0
02053 0791                        00            .byte	0
02054 0792                        00            .byte	0
02055 0793                        00            .byte	0
02056 0794                        00            .byte	0
02057 0795                        00            .byte	0
02058 0796                        00            .byte	0
02059                                           ! 511  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02060 0797                        00            .byte	0
02061 0798                        00            .byte	0
02062 0799                        00            .byte	0
02063 079A                        00            .byte	0
02064 079B                        00            .byte	0
02065 079C                        00            .byte	0
02066 079D                        00            .byte	0
02067 079E                        00            .byte	0
02068                                           ! 512  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02069 079F                        00            .byte	0
02070 07A0                        00            .byte	0
02071 07A1                        00            .byte	0
02072 07A2                        00            .byte	0
02073 07A3                        00            .byte	0
02074 07A4                        00            .byte	0
02075 07A5                        00            .byte	0
02076 07A6                        00            .byte	0
02077                                           ! 513 },
02078                                           ! 514 {
02079                                           ! 515  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02080 07A7                        00            .byte	0
02081 07A8                        00            .byte	0
02082 07A9                        00            .byte	0
02083 07AA                        00            .byte	0
02084 07AB                        00            .byte	0
02085 07AC                        00            .byte	0
02086 07AD                        00            .byte	0
02087 07AE                        00            .byte	0
02088                                           ! 516  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02089 07AF                        00            .byte	0
02090 07B0                        00            .byte	0
02091 07B1                        00            .byte	0
02092 07B2                        00            .byte	0
02093 07B3                        00            .byte	0
02094 07B4                        00            .byte	0
02095 07B5                        00            .byte	0
02096 07B6                        00            .byte	0
02097                                           ! 517  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02098 07B7                        00            .byte	0
02099 07B8                        00            .byte	0
02100 07B9                        00            .byte	0
02101 07BA                        00            .byte	0
02102 07BB                        00            .byte	0
02103 07BC                        00            .byte	0
02104 07BD                        00            .byte	0
02105 07BE                        00            .byte	0
02106                                           ! 518  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02107 07BF                        00            .byte	0
02108 07C0                        00            .byte	0
02109 07C1                        00            .byte	0
02110 07C2                        00            .byte	0
02111 07C3                        00            .byte	0
02112 07C4                        00            .byte	0
02113 07C5                        00            .byte	0
02114 07C6                        00            .byte	0
02115                                           ! 519  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02116 07C7                        00            .byte	0
02117 07C8                        00            .byte	0
02118 07C9                        00            .byte	0
02119 07CA                        00            .byte	0
02120 07CB                        00            .byte	0
02121 07CC                        00            .byte	0
02122 07CD                        00            .byte	0
02123 07CE                        00            .byte	0
02124                                           ! 520  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02125 07CF                        00            .byte	0
02126 07D0                        00            .byte	0
02127 07D1                        00            .byte	0
02128 07D2                        00            .byte	0
02129 07D3                        00            .byte	0
02130 07D4                        00            .byte	0
02131 07D5                        00            .byte	0
02132 07D6                        00            .byte	0
02133                                           ! 521  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02134 07D7                        00            .byte	0
02135 07D8                        00            .byte	0
02136 07D9                        00            .byte	0
02137 07DA                        00            .byte	0
02138 07DB                        00            .byte	0
02139 07DC                        00            .byte	0
02140 07DD                        00            .byte	0
02141 07DE                        00            .byte	0
02142                                           ! 522  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02143 07DF                        00            .byte	0
02144 07E0                        00            .byte	0
02145 07E1                        00            .byte	0
02146 07E2                        00            .byte	0
02147 07E3                        00            .byte	0
02148 07E4                        00            .byte	0
02149 07E5                        00            .byte	0
02150 07E6                        00            .byte	0
02151                                           ! 523 },
02152                                           ! 524 {
02153                                           ! 525  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02154 07E7                        00            .byte	0
02155 07E8                        00            .byte	0
02156 07E9                        00            .byte	0
02157 07EA                        00            .byte	0
02158 07EB                        00            .byte	0
02159 07EC                        00            .byte	0
02160 07ED                        00            .byte	0
02161 07EE                        00            .byte	0
02162                                           ! 526  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02163 07EF                        00            .byte	0
02164 07F0                        00            .byte	0
02165 07F1                        00            .byte	0
02166 07F2                        00            .byte	0
02167 07F3                        00            .byte	0
02168 07F4                        00            .byte	0
02169 07F5                        00            .byte	0
02170 07F6                        00            .byte	0
02171                                           ! 527  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02172 07F7                        00            .byte	0
02173 07F8                        00            .byte	0
02174 07F9                        00            .byte	0
02175 07FA                        00            .byte	0
02176 07FB                        00            .byte	0
02177 07FC                        00            .byte	0
02178 07FD                        00            .byte	0
02179 07FE                        00            .byte	0
02180                                           ! 528  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02181 07FF                        00            .byte	0
02182 0800                        00            .byte	0
02183 0801                        00            .byte	0
02184 0802                        00            .byte	0
02185 0803                        00            .byte	0
02186 0804                        00            .byte	0
02187 0805                        00            .byte	0
02188 0806                        00            .byte	0
02189                                           ! 529  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02190 0807                        00            .byte	0
02191 0808                        00            .byte	0
02192 0809                        00            .byte	0
02193 080A                        00            .byte	0
02194 080B                        00            .byte	0
02195 080C                        00            .byte	0
02196 080D                        00            .byte	0
02197 080E                        00            .byte	0
02198                                           ! 530  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02199 080F                        00            .byte	0
02200 0810                        00            .byte	0
02201 0811                        00            .byte	0
02202 0812                        00            .byte	0
02203 0813                        00            .byte	0
02204 0814                        00            .byte	0
02205 0815                        00            .byte	0
02206 0816                        00            .byte	0
02207                                           ! 531  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02208 0817                        00            .byte	0
02209 0818                        00            .byte	0
02210 0819                        00            .byte	0
02211 081A                        00            .byte	0
02212 081B                        00            .byte	0
02213 081C                        00            .byte	0
02214 081D                        00            .byte	0
02215 081E                        00            .byte	0
02216                                           ! 532  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02217 081F                        00            .byte	0
02218 0820                        00            .byte	0
02219 0821                        00            .byte	0
02220 0822                        00            .byte	0
02221 0823                        00            .byte	0
02222 0824                        00            .byte	0
02223 0825                        00            .byte	0
02224 0826                        00            .byte	0
02225                                           ! 533 },
02226                                           ! 534 {
02227                                           ! 535  40, 24, 16, 0x00, 0x08,
02228 0827                        28            .byte	$28
02229 0828                        18            .byte	$18
02230 0829                        10            .byte	$10
02231 082A                        00            .byte	0
02232 082B                        08            .byte	8
02233                                           ! 536  0x08, 0x03, 0x00, 0x02,
02234 082C                        08            .byte	8
02235 082D                        03            .byte	3
02236 082E                        00            .byte	0
02237 082F                        02            .byte	2
02238                                           ! 537  0x67,
02239 0830                        67            .byte	$67
02240                                           ! 538  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02241 0831                        2D            .byte	$2D
02242 0832                        27            .byte	$27
02243 0833                        28            .byte	$28
02244 0834                        90            .byte	$90
02245 0835                        2B            .byte	$2B
02246 0836                        A0            .byte	$A0
02247 0837                        BF            .byte	$BF
02248 0838                        1F            .byte	$1F
02249                                           ! 539  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02250 0839                        00            .byte	0
02251 083A                        4F            .byte	$4F
02252 083B                        0D            .byte	$D
02253 083C                        0E            .byte	$E
02254 083D                        00            .byte	0
02255 083E                        00            .byte	0
02256 083F                        00            .byte	0
02257 0840                        00            .byte	0
02258                                           ! 540  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02259 0841                        9C            .byte	$9C
02260 0842                        8E            .byte	$8E
02261 0843                        8F            .byte	$8F
02262 0844                        14            .byte	$14
02263 0845                        1F            .byte	$1F
02264 0846                        96            .byte	$96
02265 0847                        B9            .byte	$B9
02266 0848                        A3            .byte	$A3
02267                                           ! 541  0xff,
02268 0849                        FF            .byte	$FF
02269                                           ! 542  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02270 084A                        00            .byte	0
02271 084B                        01            .byte	1
02272 084C                        02            .byte	2
02273 084D                        03            .byte	3
02274 084E                        04            .byte	4
02275 084F                        05            .byte	5
02276 0850                        14            .byte	$14
02277 0851                        07            .byte	7
02278                                           ! 543  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02279 0852                        38            .byte	$38
02280 0853                        39            .byte	$39
02281 0854                        3A            .byte	$3A
02282 0855                        3B            .byte	$3B
02283 0856                        3C            .byte	$3C
02284 0857                        3D            .byte	$3D
02285 0858                        3E            .byte	$3E
02286 0859                        3F            .byte	$3F
02287                                           ! 544  0x0c, 0x00, 0x0f, 0x08,
02288 085A                        0C            .byte	$C
02289 085B                        00            .byte	0
02290 085C                        0F            .byte	$F
02291 085D                        08            .byte	8
02292                                           ! 545  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02293 085E                        00            .byte	0
02294 085F                        00            .byte	0
02295 0860                        00            .byte	0
02296 0861                        00            .byte	0
02297 0862                        00            .byte	0
02298 0863                        10            .byte	$10
02299 0864                        0E            .byte	$E
02300 0865                        0F            .byte	$F
02301 0866                        FF            .byte	$FF
02302                                           ! 546 },
02303                                           ! 547 {
02304                                           ! 548  80, 24, 16, 0x00, 0x10,
02305 0867                        50            .byte	$50
02306 0868                        18            .byte	$18
02307 0869                        10            .byte	$10
02308 086A                        00            .byte	0
02309 086B                        10            .byte	$10
02310                                           ! 549  0x00, 0x03, 0x00, 0x02,
02311 086C                        00            .byte	0
02312 086D                        03            .byte	3
02313 086E                        00            .byte	0
02314 086F                        02            .byte	2
02315                                           ! 550  0x67,
02316 0870                        67            .byte	$67
02317                                           ! 551  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02318 0871                        5F            .byte	$5F
02319 0872                        4F            .byte	$4F
02320 0873                        50            .byte	$50
02321 0874                        82            .byte	$82
02322 0875                        55            .byte	$55
02323 0876                        81            .byte	$81
02324 0877                        BF            .byte	$BF
02325 0878                        1F            .byte	$1F
02326                                           ! 552  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02327 0879                        00            .byte	0
02328 087A                        4F            .byte	$4F
02329 087B                        0D            .byte	$D
02330 087C                        0E            .byte	$E
02331 087D                        00            .byte	0
02332 087E                        00            .byte	0
02333 087F                        00            .byte	0
02334 0880                        00            .byte	0
02335                                           ! 553  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02336 0881                        9C            .byte	$9C
02337 0882                        8E            .byte	$8E
02338 0883                        8F            .byte	$8F
02339 0884                        28            .byte	$28
02340 0885                        1F            .byte	$1F
02341 0886                        96            .byte	$96
02342 0887                        B9            .byte	$B9
02343 0888                        A3            .byte	$A3
02344                                           ! 554  0xff,
02345 0889                        FF            .byte	$FF
02346                                           ! 555  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02347 088A                        00            .byte	0
02348 088B                        01            .byte	1
02349 088C                        02            .byte	2
02350 088D                        03            .byte	3
02351 088E                        04            .byte	4
02352 088F                        05            .byte	5
02353 0890                        14            .byte	$14
02354 0891                        07            .byte	7
02355                                           ! 556  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02356 0892                        38            .byte	$38
02357 0893                        39            .byte	$39
02358 0894                        3A            .byte	$3A
02359 0895                        3B            .byte	$3B
02360 0896                        3C            .byte	$3C
02361 0897                        3D            .byte	$3D
02362 0898                        3E            .byte	$3E
02363 0899                        3F            .byte	$3F
02364                                           ! 557  0x0c, 0x00, 0x0f, 0x08,
02365 089A                        0C            .byte	$C
02366 089B                        00            .byte	0
02367 089C                        0F            .byte	$F
02368 089D                        08            .byte	8
02369                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02370 089E                        00            .byte	0
02371 089F                        00            .byte	0
02372 08A0                        00            .byte	0
02373 08A1                        00            .byte	0
02374 08A2                        00            .byte	0
02375 08A3                        10            .byte	$10
02376 08A4                        0E            .byte	$E
02377 08A5                        0F            .byte	$F
02378 08A6                        FF            .byte	$FF
02379                                           ! 559 },
02380                                           ! 560 {
02381                                           ! 561  80, 24, 16, 0x00, 0x10,
02382 08A7                        50            .byte	$50
02383 08A8                        18            .byte	$18
02384 08A9                        10            .byte	$10
02385 08AA                        00            .byte	0
02386 08AB                        10            .byte	$10
02387                                           ! 562  0x00, 0x03, 0x00, 0x02,
02388 08AC                        00            .byte	0
02389 08AD                        03            .byte	3
02390 08AE                        00            .byte	0
02391 08AF                        02            .byte	2
02392                                           ! 563  0x66,
02393 08B0                        66            .byte	$66
02394                                           ! 564  0x5f, 0x4f, 0x50, 0x82, 0
02395 08B1                        5F            .byte	$5F
02396 08B2                        4F            .byte	$4F
02397 08B3                        50            .byte	$50
02398 08B4                        82            .byte	$82
02399                                           ! 564 x55, 0x81, 0xbf, 0x1f,
02400 08B5                        55            .byte	$55
02401 08B6                        81            .byte	$81
02402 08B7                        BF            .byte	$BF
02403 08B8                        1F            .byte	$1F
02404                                           ! 565  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02405 08B9                        00            .byte	0
02406 08BA                        4F            .byte	$4F
02407 08BB                        0D            .byte	$D
02408 08BC                        0E            .byte	$E
02409 08BD                        00            .byte	0
02410 08BE                        00            .byte	0
02411 08BF                        00            .byte	0
02412 08C0                        00            .byte	0
02413                                           ! 566  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02414 08C1                        9C            .byte	$9C
02415 08C2                        8E            .byte	$8E
02416 08C3                        8F            .byte	$8F
02417 08C4                        28            .byte	$28
02418 08C5                        0F            .byte	$F
02419 08C6                        96            .byte	$96
02420 08C7                        B9            .byte	$B9
02421 08C8                        A3            .byte	$A3
02422                                           ! 567  0xff,
02423 08C9                        FF            .byte	$FF
02424                                           ! 568  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02425 08CA                        00            .byte	0
02426 08CB                        08            .byte	8
02427 08CC                        08            .byte	8
02428 08CD                        08            .byte	8
02429 08CE                        08            .byte	8
02430 08CF                        08            .byte	8
02431 08D0                        08            .byte	8
02432 08D1                        08            .byte	8
02433                                           ! 569  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02434 08D2                        10            .byte	$10
02435 08D3                        18            .byte	$18
02436 08D4                        18            .byte	$18
02437 08D5                        18            .byte	$18
02438 08D6                        18            .byte	$18
02439 08D7                        18            .byte	$18
02440 08D8                        18            .byte	$18
02441 08D9                        18            .byte	$18
02442                                           ! 570  0x0e, 0x00, 0x0f, 0x08,
02443 08DA                        0E            .byte	$E
02444 08DB                        00            .byte	0
02445 08DC                        0F            .byte	$F
02446 08DD                        08            .byte	8
02447                                           ! 571  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02448 08DE                        00            .byte	0
02449 08DF                        00            .byte	0
02450 08E0                        00            .byte	0
02451 08E1                        00            .byte	0
02452 08E2                        00            .byte	0
02453 08E3                        10            .byte	$10
02454 08E4                        0A            .byte	$A
02455 08E5                        0F            .byte	$F
02456 08E6                        FF            .byte	$FF
02457                                           ! 572 },
02458                                           ! 573 {
02459                                           ! 574  80, 29, 16, 0x00, 0x00,
02460 08E7                        50            .byte	$50
02461 08E8                        1D            .byte	$1D
02462 08E9                        10            .byte	$10
02463 08EA                        00            .byte	0
02464 08EB                        00            .byte	0
02465                                           ! 575  0x01, 0x0f, 0x00, 0x06,
02466 08EC                        01            .byte	1
02467 08ED                        0F            .byte	$F
02468 08EE                        00            .byte	0
02469 08EF                        06            .byte	6
02470                                           ! 576  0xe3,
02471 08F0                        E3            .byte	$E3
02472                                           ! 577  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02473 08F1                        5F            .byte	$5F
02474 08F2                        4F            .byte	$4F
02475 08F3                        50            .byte	$50
02476 08F4                        82            .byte	$82
02477 08F5                        54            .byte	$54
02478 08F6                        80            .byte	$80
02479 08F7                        0B            .byte	$B
02480 08F8                        3E            .byte	$3E
02481                                           ! 578  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02482 08F9                        00            .byte	0
02483 08FA                        40            .byte	$40
02484 08FB                        00            .byte	0
02485 08FC                        00            .byte	0
02486 08FD                        00            .byte	0
02487 08FE                        00            .byte	0
02488 08FF                        00            .byte	0
02489 0900                        00            .byte	0
02490                                           ! 579  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02491 0901                        EA            .byte	$EA
02492 0902                        8C            .byte	$8C
02493 0903                        DF            .byte	$DF
02494 0904                        28            .byte	$28
02495 0905                        00            .byte	0
02496 0906                        E7            .byte	$E7
02497 0907                        04            .byte	4
02498 0908                        E3            .byte	$E3
02499                                           ! 580  0xff,
02500 0909                        FF            .byte	$FF
02501                                           ! 581  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02502 090A                        00            .byte	0
02503 090B                        3F            .byte	$3F
02504 090C                        00            .byte	0
02505 090D                        3F            .byte	$3F
02506 090E                        00            .byte	0
02507 090F                        3F            .byte	$3F
02508 0910                        00            .byte	0
02509 0911                        3F            .byte	$3F
02510                                           ! 582  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02511 0912                        00            .byte	0
02512 0913                        3F            .byte	$3F
02513 0914                        00            .byte	0
02514 0915                        3F            .byte	$3F
02515 0916                        00            .byte	0
02516 0917                        3F            .byte	$3F
02517 0918                        00            .byte	0
02518 0919                        3F            .byte	$3F
02519                                           ! 583  0x01, 0x00, 0x0f, 0x00,
02520 091A                        01            .byte	1
02521 091B                        00            .byte	0
02522 091C                        0F            .byte	$F
02523 091D                        00            .byte	0
02524                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02525 091E                        00            .byte	0
02526 091F                        00            .byte	0
02527 0920                        00            .byte	0
02528 0921                        00            .byte	0
02529 0922                        00            .byte	0
02530 0923                        00            .byte	0
02531 0924                        05            .byte	5
02532 0925                        0F            .byte	$F
02533 0926                        FF            .byte	$FF
02534                                           ! 585 },
02535                                           ! 586 {
02536                                           ! 587  80, 29, 16, 0x00, 0x00,
02537 0927                        50            .byte	$50
02538 0928                        1D            .byte	$1D
02539 0929                        10            .byte	$10
02540 092A                        00            .byte	0
02541 092B                        00            .byte	0
02542                                           ! 588  0x01, 0x0f, 0x00, 0x06,
02543 092C                        01            .byte	1
02544 092D                        0F            .byte	$F
02545 092E                        00            .byte	0
02546 092F                        06            .byte	6
02547                                           ! 589  0xe3,
02548 0930                        E3            .byte	$E3
02549                                           ! 590  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02550 0931                        5F            .byte	$5F
02551 0932                        4F            .byte	$4F
02552 0933                        50            .byte	$50
02553 0934                        82            .byte	$82
02554 0935                        54            .byte	$54
02555 0936                        80            .byte	$80
02556 0937                        0B            .byte	$B
02557 0938                        3E            .byte	$3E
02558                                           ! 591  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02559 0939                        00            .byte	0
02560 093A                        40            .byte	$40
02561 093B                        00            .byte	0
02562 093C                        00            .byte	0
02563 093D                        00            .byte	0
02564 093E                        00            .byte	0
02565 093F                        00            .byte	0
02566 0940                        00            .byte	0
02567                                           ! 592  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02568 0941                        EA            .byte	$EA
02569 0942                        8C            .byte	$8C
02570 0943                        DF            .byte	$DF
02571 0944                        28            .byte	$28
02572 0945                        00            .byte	0
02573 0946                        E7            .byte	$E7
02574 0947                        04            .byte	4
02575 0948                        E3            .byte	$E3
02576                                           ! 593  0xff,
02577 0949                        FF            .byte	$FF
02578                                           ! 594  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02579 094A                        00            .byte	0
02580 094B                        01            .byte	1
02581 094C                        02            .byte	2
02582 094D                        03            .byte	3
02583 094E                        04            .byte	4
02584 094F                        05            .byte	5
02585 0950                        14            .byte	$14
02586 0951                        07            .byte	7
02587                                           ! 595  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02588 0952                        38            .byte	$38
02589 0953                        39            .byte	$39
02590 0954                        3A            .byte	$3A
02591 0955                        3B            .byte	$3B
02592 0956                        3C            .byte	$3C
02593 0957                        3D            .byte	$3D
02594 0958                        3E            .byte	$3E
02595 0959                        3F            .byte	$3F
02596                                           ! 596  0x01, 0x00, 0x0f, 0x00,
02597 095A                        01            .byte	1
02598 095B                        00            .byte	0
02599 095C                        0F            .byte	$F
02600 095D                        00            .byte	0
02601                                           ! 597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02602 095E                        00            .byte	0
02603 095F                        00            .byte	0
02604 0960                        00            .byte	0
02605 0961                        00            .byte	0
02606 0962                        00            .byte	0
02607 0963                        00            .byte	0
02608 0964                        05            .byte	5
02609 0965                        0F            .byte	$F
02610 0966                        FF            .byte	$FF
02611                                           ! 598 },
02612                                           ! 599 {
02613                                           ! 600  40, 24, 8, 0x00, 0x00,
02614 0967                        28            .byte	$28
02615 0968                        18            .byte	$18
02616 0969                        08            .byte	8
02617 096A                        00            .byte	0
02618 096B                        00            .byte	0
02619                                           ! 601  0x01, 0x0f, 0x00, 0x0e,
02620 096C                        01            .byte	1
02621 096D                        0F            .byte	$F
02622 096E                        00            .byte	0
02623 096F                        0E            .byte	$E
02624                                           ! 602  0x63,
02625 0970                        63            .byte	$63
02626                                           ! 603  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02627 0971                        5F            .byte	$5F
02628 0972                        4F            .byte	$4F
02629 0973                        50            .byte	$50
02630 0974                        82            .byte	$82
02631 0975                        54            .byte	$54
02632 0976                        80            .byte	$80
02633 0977                        BF            .byte	$BF
02634 0978                        1F            .byte	$1F
02635                                           ! 604  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02636 0979                        00            .byte	0
02637 097A                        41            .byte	$41
02638 097B                        00            .byte	0
02639 097C                        00            .byte	0
02640 097D                        00            .byte	0
02641 097E                        00            .byte	0
02642 097F                        00            .byte	0
02643 0980                        00            .byte	0
02644                                           ! 605  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02645 0981                        9C            .byte	$9C
02646 0982                        8E            .byte	$8E
02647 0983                        8F            .byte	$8F
02648 0984                        28            .byte	$28
02649 0985                        40            .byte	$40
02650 0986                        96            .byte	$96
02651 0987                        B9            .byte	$B9
02652 0988                        A3            .byte	$A3
02653                                           ! 606  0xff,
02654 0989                        FF            .byte	$FF
02655                                           ! 607  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02656 098A                        00            .byte	0
02657 098B                        01            .byte	1
02658 098C                        02            .byte	2
02659 098D                        03            .byte	3
02660 098E                        04            .byte	4
02661 098F                        05            .byte	5
02662 0990                        06            .byte	6
02663 0991                        07            .byte	7
02664                                           ! 608  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02665 0992                        08            .byte	8
02666 0993                        09            .byte	9
02667 0994                        0A            .byte	$A
02668 0995                        0B            .byte	$B
02669 0996                        0C            .byte	$C
02670 0997                        0D            .byte	$D
02671 0998                        0E            .byte	$E
02672 0999                        0F            .byte	$F
02673                                           ! 609  0x41, 0x00, 0x0f, 0x00,
02674 099A                        41            .byte	$41
02675 099B                        00            .byte	0
02676 099C                        0F            .byte	$F
02677 099D                        00            .byte	0
02678                                           ! 610  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02679 099E                        00            .byte	0
02680 099F                        00            .byte	0
02681 09A0                        00            .byte	0
02682 09A1                        00            .byte	0
02683 09A2                        00            .byte	0
02684 09A3                        40            .byte	$40
02685 09A4                        05            .byte	5
02686 09A5                        0F            .byte	$F
02687 09A6                        FF            .byte	$FF
02688                                           ! 611 },
02689                                           ! 612 {
02690                                           ! 613  100, 36, 16, 0x00, 0x00,
02691 09A7                        64            .byte	$64
02692 09A8                        24            .byte	$24
02693 09A9                        10            .byte	$10
02694 09AA                        00            .byte	0
02695 09AB                        00            .byte	0
02696                                           ! 614  0x01, 0x0f, 0x00, 0x06,
02697 09AC                        01            .byte	1
02698 09AD                        0F            .byte	$F
02699 09AE                        00            .byte	0
02700 09AF                        06            .byte	6
02701                                           ! 615  0xe3,
02702 09B0                        E3            .byte	$E3
02703                                           ! 616  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02704 09B1                        7F            .byte	$7F
02705 09B2                        63            .byte	$63
02706 09B3                        63            .byte	$63
02707 09B4                        83            .byte	$83
02708 09B5                        6B            .byte	$6B
02709 09B6                        1B            .byte	$1B
02710 09B7                        72            .byte	$72
02711 09B8                        F0            .byte	$F0
02712                                           ! 617  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02713 09B9                        00            .byte	0
02714 09BA                        60            .byte	$60
02715 09BB                        00            .byte	0
02716 09BC                        00            .byte	0
02717 09BD                        00            .byte	0
02718 09BE                        00            .byte	0
02719 09BF                        00            .byte	0
02720 09C0                        00            .byte	0
02721                                           ! 618  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02722 09C1                        59            .byte	$59
02723 09C2                        8D            .byte	$8D
02724 09C3                        57            .byte	$57
02725 09C4                        32            .byte	$32
02726 09C5                        00            .byte	0
02727 09C6                        57            .byte	$57
02728 09C7                        73            .byte	$73
02729 09C8                        E3            .byte	$E3
02730                                           ! 619  0xff,
02731 09C9                        FF            .byte	$FF
02732                                           ! 620  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02733 09CA                        00            .byte	0
02734 09CB                        01            .byte	1
02735 09CC                        02            .byte	2
02736 09CD                        03            .byte	3
02737 09CE                        04            .byte	4
02738 09CF                        05            .byte	5
02739 09D0                        14            .byte	$14
02740 09D1                        07            .byte	7
02741                                           ! 621  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02742 09D2                        38            .byte	$38
02743 09D3                        39            .byte	$39
02744 09D4                        3A            .byte	$3A
02745 09D5                        3B            .byte	$3B
02746 09D6                        3C            .byte	$3C
02747 09D7                        3D            .byte	$3D
02748 09D8                        3E            .byte	$3E
02749 09D9                        3F            .byte	$3F
02750                                           ! 622  0x01, 0x00, 0x0f, 0x00,
02751 09DA                        01            .byte	1
02752 09DB                        00            .byte	0
02753 09DC                        0F            .byte	$F
02754 09DD                        00            .byte	0
02755                                           ! 623  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02756 09DE                        00            .byte	0
02757 09DF                        00            .byte	0
02758 09E0                        00            .byte	0
02759 09E1                        00            .byte	0
02760 09E2                        00            .byte	0
02761 09E3                        00            .byte	0
02762 09E4                        05            .byte	5
02763 09E5                        0F            .byte	$F
02764 09E6                        FF            .byte	$FF
02765                                           ! 624 },
02766                                           ! 625 };
02767                                           !BCC_EOS
02768                                           ! 626 static Bit8u palette0[63+1][3]=
02769                                           ! 627 {
02770                       000009E7            _palette0:
02771                                           ! 628   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x
02772 09E7                        00            .byte	0
02773 09E8                        00            .byte	0
02774 09E9                        00            .byte	0
02775 09EA                        00            .byte	0
02776 09EB                        00            .byte	0
02777 09EC                        00            .byte	0
02778 09ED                        00            .byte	0
02779 09EE                        00            .byte	0
02780 09EF                        00            .byte	0
02781 09F0                        00            .byte	0
02782 09F1                        00            .byte	0
02783 09F2                        00            .byte	0
02784 09F3                        00            .byte	0
02785 09F4                        00            .byte	0
02786 09F5                        00            .byte	0
02787 09F6                        00            .byte	0
02788 09F7                        00            .byte	0
02789 09F8                        00            .byte	0
02790 09F9                        00            .byte	0
02791 09FA                        00            .byte	0
02792 09FB                        00            .byte	0
02793 09FC                        00            .byte	0
02794 09FD                        00            .byte	0
02795                                           ! 628 00,
02796 09FE                        00            .byte	0
02797                                           ! 629   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02798 09FF                        2A            .byte	$2A
02799 0A00                        2A            .byte	$2A
02800 0A01                        2A            .byte	$2A
02801 0A02                        2A            .byte	$2A
02802 0A03                        2A            .byte	$2A
02803 0A04                        2A            .byte	$2A
02804 0A05                        2A            .byte	$2A
02805 0A06                        2A            .byte	$2A
02806 0A07                        2A            .byte	$2A
02807 0A08                        2A            .byte	$2A
02808 0A09                        2A            .byte	$2A
02809 0A0A                        2A            .byte	$2A
02810 0A0B                        2A            .byte	$2A
02811 0A0C                        2A            .byte	$2A
02812 0A0D                        2A            .byte	$2A
02813 0A0E                        2A            .byte	$2A
02814 0A0F                        2A            .byte	$2A
02815 0A10                        2A            .byte	$2A
02816 0A11                        2A            .byte	$2A
02817 0A12                        2A            .byte	$2A
02818 0A13                        2A            .byte	$2A
02819 0A14                        2A            .byte	$2A
02820 0A15                        2A            .byte	$2A
02821 0A16                        2A            .byte	$2A
02822                                           ! 630   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02823 0A17                        2A            .byte	$2A
02824 0A18                        2A            .byte	$2A
02825 0A19                        2A            .byte	$2A
02826 0A1A                        2A            .byte	$2A
02827 0A1B                        2A            .byte	$2A
02828 0A1C                        2A            .byte	$2A
02829 0A1D                        2A            .byte	$2A
02830 0A1E                        2A            .byte	$2A
02831 0A1F                        2A            .byte	$2A
02832 0A20                        2A            .byte	$2A
02833 0A21                        2A            .byte	$2A
02834 0A22                        2A            .byte	$2A
02835 0A23                        2A            .byte	$2A
02836 0A24                        2A            .byte	$2A
02837 0A25                        2A            .byte	$2A
02838 0A26                        2A            .byte	$2A
02839 0A27                        2A            .byte	$2A
02840 0A28                        2A            .byte	$2A
02841 0A29                        2A            .byte	$2A
02842 0A2A                        2A            .byte	$2A
02843 0A2B                        2A            .byte	$2A
02844 0A2C                        2A            .byte	$2A
02845 0A2D                        2A            .byte	$2A
02846 0A2E                        2A            .byte	$2A
02847                                           ! 631   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
02848 0A2F                        3F            .byte	$3F
02849 0A30                        3F            .byte	$3F
02850 0A31                        3F            .byte	$3F
02851 0A32                        3F            .byte	$3F
02852 0A33                        3F            .byte	$3F
02853 0A34                        3F            .byte	$3F
02854 0A35                        3F            .byte	$3F
02855 0A36                        3F            .byte	$3F
02856 0A37                        3F            .byte	$3F
02857 0A38                        3F            .byte	$3F
02858 0A39                        3F            .byte	$3F
02859 0A3A                        3F            .byte	$3F
02860 0A3B                        3F            .byte	$3F
02861 0A3C                        3F            .byte	$3F
02862 0A3D                        3F            .byte	$3F
02863 0A3E                        3F            .byte	$3F
02864 0A3F                        3F            .byte	$3F
02865 0A40                        3F            .byte	$3F
02866 0A41                        3F            .byte	$3F
02867 0A42                        3F            .byte	$3F
02868 0A43                        3F            .byte	$3F
02869 0A44                        3F            .byte	$3F
02870 0A45                        3F            .byte	$3F
02871 0A46                        3F            .byte	$3F
02872                                           ! 632   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02873 0A47                        00            .byte	0
02874 0A48                        00            .byte	0
02875 0A49                        00            .byte	0
02876 0A4A                        00            .byte	0
02877 0A4B                        00            .byte	0
02878 0A4C                        00            .byte	0
02879 0A4D                        00            .byte	0
02880 0A4E                        00            .byte	0
02881 0A4F                        00            .byte	0
02882 0A50                        00            .byte	0
02883 0A51                        00            .byte	0
02884 0A52                        00            .byte	0
02885 0A53                        00            .byte	0
02886 0A54                        00            .byte	0
02887 0A55                        00            .byte	0
02888 0A56                        00            .byte	0
02889 0A57                        00            .byte	0
02890 0A58                        00            .byte	0
02891 0A59                        00            .byte	0
02892 0A5A                        00            .byte	0
02893 0A5B                        00            .byte	0
02894 0A5C                        00            .byte	0
02895 0A5D                        00            .byte	0
02896 0A5E                        00            .byte	0
02897                                           ! 633   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02898 0A5F                        2A            .byte	$2A
02899 0A60                        2A            .byte	$2A
02900 0A61                        2A            .byte	$2A
02901 0A62                        2A            .byte	$2A
02902 0A63                        2A            .byte	$2A
02903 0A64                        2A            .byte	$2A
02904 0A65                        2A            .byte	$2A
02905 0A66                        2A            .byte	$2A
02906 0A67                        2A            .byte	$2A
02907 0A68                        2A            .byte	$2A
02908 0A69                        2A            .byte	$2A
02909 0A6A                        2A            .byte	$2A
02910 0A6B                        2A            .byte	$2A
02911 0A6C                        2A            .byte	$2A
02912 0A6D                        2A            .byte	$2A
02913 0A6E                        2A            .byte	$2A
02914 0A6F                        2A            .byte	$2A
02915 0A70                        2A            .byte	$2A
02916 0A71                        2A            .byte	$2A
02917 0A72                        2A            .byte	$2A
02918 0A73                        2A            .byte	$2A
02919 0A74                        2A            .byte	$2A
02920 0A75                        2A            .byte	$2A
02921 0A76                        2A            .byte	$2A
02922                                           ! 634   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02923 0A77                        2A            .byte	$2A
02924 0A78                        2A            .byte	$2A
02925 0A79                        2A            .byte	$2A
02926 0A7A                        2A            .byte	$2A
02927 0A7B                        2A            .byte	$2A
02928 0A7C                        2A            .byte	$2A
02929 0A7D                        2A            .byte	$2A
02930 0A7E                        2A            .byte	$2A
02931 0A7F                        2A            .byte	$2A
02932 0A80                        2A            .byte	$2A
02933 0A81                        2A            .byte	$2A
02934 0A82                        2A            .byte	$2A
02935 0A83                        2A            .byte	$2A
02936 0A84                        2A            .byte	$2A
02937 0A85                        2A            .byte	$2A
02938 0A86                        2A            .byte	$2A
02939 0A87                        2A            .byte	$2A
02940 0A88                        2A            .byte	$2A
02941 0A89                        2A            .byte	$2A
02942 0A8A                        2A            .byte	$2A
02943 0A8B                        2A            .byte	$2A
02944 0A8C                        2A            .byte	$2A
02945 0A8D                        2A            .byte	$2A
02946 0A8E                        2A            .byte	$2A
02947                                           ! 635   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
02948 0A8F                        3F            .byte	$3F
02949 0A90                        3F            .byte	$3F
02950 0A91                        3F            .byte	$3F
02951 0A92                        3F            .byte	$3F
02952 0A93                        3F            .byte	$3F
02953 0A94                        3F            .byte	$3F
02954 0A95                        3F            .byte	$3F
02955 0A96                        3F            .byte	$3F
02956 0A97                        3F            .byte	$3F
02957 0A98                        3F            .byte	$3F
02958 0A99                        3F            .byte	$3F
02959 0A9A                        3F            .byte	$3F
02960 0A9B                        3F            .byte	$3F
02961 0A9C                        3F            .byte	$3F
02962 0A9D                        3F            .byte	$3F
02963 0A9E                        3F            .byte	$3F
02964 0A9F                        3F            .byte	$3F
02965 0AA0                        3F            .byte	$3F
02966 0AA1                        3F            .byte	$3F
02967 0AA2                        3F            .byte	$3F
02968 0AA3                        3F            .byte	$3F
02969 0AA4                        3F            .byte	$3F
02970 0AA5                        3F            .byte	$3F
02971                                           ! 636 };
02972 0AA6                        3F            .byte	$3F
02973                                           !BCC_EOS
02974                                           ! 637 static Bit8u palette1[63+1][3]=
02975                                           ! 638 {
02976                       00000AA7            _palette1:
02977                                           ! 639   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02978 0AA7                        00            .byte	0
02979 0AA8                        00            .byte	0
02980 0AA9                        00            .byte	0
02981 0AAA                        00            .byte	0
02982 0AAB                        00            .byte	0
02983 0AAC                        2A            .byte	$2A
02984 0AAD                        00            .byte	0
02985 0AAE                        2A            .byte	$2A
02986 0AAF                        00            .byte	0
02987 0AB0                        00            .byte	0
02988 0AB1                        2A            .byte	$2A
02989 0AB2                        2A            .byte	$2A
02990 0AB3                        2A            .byte	$2A
02991 0AB4                        00            .byte	0
02992 0AB5                        00            .byte	0
02993 0AB6                        2A            .byte	$2A
02994 0AB7                        00            .byte	0
02995 0AB8                        2A            .byte	$2A
02996 0AB9                        2A            .byte	$2A
02997 0ABA                        15            .byte	$15
02998 0ABB                        00            .byte	0
02999 0ABC                        2A            .byte	$2A
03000 0ABD                        2A            .byte	$2A
03001 0ABE                        2A            .byte	$2A
03002                                           ! 640   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03003 0ABF                        00            .byte	0
03004 0AC0                        00            .byte	0
03005 0AC1                        00            .byte	0
03006 0AC2                        00            .byte	0
03007 0AC3                        00            .byte	0
03008 0AC4                        2A            .byte	$2A
03009 0AC5                        00            .byte	0
03010 0AC6                        2A            .byte	$2A
03011 0AC7                        00            .byte	0
03012 0AC8                        00            .byte	0
03013 0AC9                        2A            .byte	$2A
03014 0ACA                        2A            .byte	$2A
03015 0ACB                        2A            .byte	$2A
03016 0ACC                        00            .byte	0
03017 0ACD                        00            .byte	0
03018 0ACE                        2A            .byte	$2A
03019 0ACF                        00            .byte	0
03020 0AD0                        2A            .byte	$2A
03021 0AD1                        2A            .byte	$2A
03022 0AD2                        15            .byte	$15
03023 0AD3                        00            .byte	0
03024 0AD4                        2A            .byte	$2A
03025 0AD5                        2A            .byte	$2A
03026 0AD6                        2A            .byte	$2A
03027                                           ! 641   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03028 0AD7                        15            .byte	$15
03029 0AD8                        15            .byte	$15
03030 0AD9                        15            .byte	$15
03031 0ADA                        15            .byte	$15
03032 0ADB                        15            .byte	$15
03033 0ADC                        3F            .byte	$3F
03034 0ADD                        15            .byte	$15
03035 0ADE                        3F            .byte	$3F
03036 0ADF                        15            .byte	$15
03037 0AE0                        15            .byte	$15
03038 0AE1                        3F            .byte	$3F
03039 0AE2                        3F            .byte	$3F
03040 0AE3                        3F            .byte	$3F
03041 0AE4                        15            .byte	$15
03042 0AE5                        15            .byte	$15
03043 0AE6                        3F            .byte	$3F
03044 0AE7                        15            .byte	$15
03045 0AE8                        3F            .byte	$3F
03046 0AE9                        3F            .byte	$3F
03047 0AEA                        3F            .byte	$3F
03048 0AEB                        15            .byte	$15
03049 0AEC                        3F            .byte	$3F
03050 0AED                        3F            .byte	$3F
03051 0AEE                        3F            .byte	$3F
03052                                           ! 642   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03053 0AEF                        15            .byte	$15
03054 0AF0                        15            .byte	$15
03055 0AF1                        15            .byte	$15
03056 0AF2                        15            .byte	$15
03057 0AF3                        15            .byte	$15
03058 0AF4                        3F            .byte	$3F
03059 0AF5                        15            .byte	$15
03060 0AF6                        3F            .byte	$3F
03061 0AF7                        15            .byte	$15
03062 0AF8                        15            .byte	$15
03063 0AF9                        3F            .byte	$3F
03064 0AFA                        3F            .byte	$3F
03065 0AFB                        3F            .byte	$3F
03066 0AFC                        15            .byte	$15
03067 0AFD                        15            .byte	$15
03068 0AFE                        3F            .byte	$3F
03069 0AFF                        15            .byte	$15
03070 0B00                        3F            .byte	$3F
03071 0B01                        3F            .byte	$3F
03072 0B02                        3F            .byte	$3F
03073 0B03                        15            .byte	$15
03074 0B04                        3F            .byte	$3F
03075 0B05                        3F            .byte	$3F
03076 0B06                        3F            .byte	$3F
03077                                           ! 643   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03078 0B07                        00            .byte	0
03079 0B08                        00            .byte	0
03080 0B09                        00            .byte	0
03081 0B0A                        00            .byte	0
03082 0B0B                        00            .byte	0
03083 0B0C                        2A            .byte	$2A
03084 0B0D                        00            .byte	0
03085 0B0E                        2A            .byte	$2A
03086 0B0F                        00            .byte	0
03087 0B10                        00            .byte	0
03088 0B11                        2A            .byte	$2A
03089 0B12                        2A            .byte	$2A
03090 0B13                        2A            .byte	$2A
03091 0B14                        00            .byte	0
03092 0B15                        00            .byte	0
03093 0B16                        2A            .byte	$2A
03094 0B17                        00            .byte	0
03095 0B18                        2A            .byte	$2A
03096 0B19                        2A            .byte	$2A
03097 0B1A                        15            .byte	$15
03098 0B1B                        00            .byte	0
03099 0B1C                        2A            .byte	$2A
03100 0B1D                        2A            .byte	$2A
03101 0B1E                        2A            .byte	$2A
03102                                           ! 644   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03103 0B1F                        00            .byte	0
03104 0B20                        00            .byte	0
03105 0B21                        00            .byte	0
03106 0B22                        00            .byte	0
03107 0B23                        00            .byte	0
03108 0B24                        2A            .byte	$2A
03109 0B25                        00            .byte	0
03110 0B26                        2A            .byte	$2A
03111 0B27                        00            .byte	0
03112 0B28                        00            .byte	0
03113 0B29                        2A            .byte	$2A
03114 0B2A                        2A            .byte	$2A
03115 0B2B                        2A            .byte	$2A
03116 0B2C                        00            .byte	0
03117 0B2D                        00            .byte	0
03118 0B2E                        2A            .byte	$2A
03119 0B2F                        00            .byte	0
03120 0B30                        2A            .byte	$2A
03121 0B31                        2A            .byte	$2A
03122 0B32                        15            .byte	$15
03123 0B33                        00            .byte	0
03124 0B34                        2A            .byte	$2A
03125 0B35                        2A            .byte	$2A
03126 0B36                        2A            .byte	$2A
03127                                           ! 645   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03128 0B37                        15            .byte	$15
03129 0B38                        15            .byte	$15
03130 0B39                        15            .byte	$15
03131 0B3A                        15            .byte	$15
03132 0B3B                        15            .byte	$15
03133 0B3C                        3F            .byte	$3F
03134 0B3D                        15            .byte	$15
03135 0B3E                        3F            .byte	$3F
03136 0B3F                        15            .byte	$15
03137 0B40                        15            .byte	$15
03138 0B41                        3F            .byte	$3F
03139 0B42                        3F            .byte	$3F
03140 0B43                        3F            .byte	$3F
03141 0B44                        15            .byte	$15
03142 0B45                        15            .byte	$15
03143 0B46                        3F            .byte	$3F
03144 0B47                        15            .byte	$15
03145 0B48                        3F            .byte	$3F
03146 0B49                        3F            .byte	$3F
03147 0B4A                        3F            .byte	$3F
03148 0B4B                        15            .byte	$15
03149 0B4C                        3F            .byte	$3F
03150 0B4D                        3F            .byte	$3F
03151 0B4E                        3F            .byte	$3F
03152                                           ! 646   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03153 0B4F                        15            .byte	$15
03154 0B50                        15            .byte	$15
03155 0B51                        15            .byte	$15
03156 0B52                        15            .byte	$15
03157 0B53                        15            .byte	$15
03158 0B54                        3F            .byte	$3F
03159 0B55                        15            .byte	$15
03160 0B56                        3F            .byte	$3F
03161 0B57                        15            .byte	$15
03162 0B58                        15            .byte	$15
03163 0B59                        3F            .byte	$3F
03164 0B5A                        3F            .byte	$3F
03165 0B5B                        3F            .byte	$3F
03166 0B5C                        15            .byte	$15
03167 0B5D                        15            .byte	$15
03168 0B5E                        3F            .byte	$3F
03169 0B5F                        15            .byte	$15
03170 0B60                        3F            .byte	$3F
03171 0B61                        3F            .byte	$3F
03172 0B62                        3F            .byte	$3F
03173 0B63                        15            .byte	$15
03174 0B64                        3F            .byte	$3F
03175 0B65                        3F            .byte	$3F
03176                                           ! 647 };
03177 0B66                        3F            .byte	$3F
03178                                           !BCC_EOS
03179                                           ! 648 static Bit8u palette2[63+1][3]=
03180                                           ! 649 {
03181                       00000B67            _palette2:
03182                                           ! 650   0x00,0x00,0x00, 0x00
03183 0B67                        00            .byte	0
03184 0B68                        00            .byte	0
03185 0B69                        00            .byte	0
03186                                           ! 650 ,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03187 0B6A                        00            .byte	0
03188 0B6B                        00            .byte	0
03189 0B6C                        2A            .byte	$2A
03190 0B6D                        00            .byte	0
03191 0B6E                        2A            .byte	$2A
03192 0B6F                        00            .byte	0
03193 0B70                        00            .byte	0
03194 0B71                        2A            .byte	$2A
03195 0B72                        2A            .byte	$2A
03196 0B73                        2A            .byte	$2A
03197 0B74                        00            .byte	0
03198 0B75                        00            .byte	0
03199 0B76                        2A            .byte	$2A
03200 0B77                        00            .byte	0
03201 0B78                        2A            .byte	$2A
03202 0B79                        2A            .byte	$2A
03203 0B7A                        2A            .byte	$2A
03204 0B7B                        00            .byte	0
03205 0B7C                        2A            .byte	$2A
03206 0B7D                        2A            .byte	$2A
03207 0B7E                        2A            .byte	$2A
03208                                           ! 651   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03209 0B7F                        00            .byte	0
03210 0B80                        00            .byte	0
03211 0B81                        15            .byte	$15
03212 0B82                        00            .byte	0
03213 0B83                        00            .byte	0
03214 0B84                        3F            .byte	$3F
03215 0B85                        00            .byte	0
03216 0B86                        2A            .byte	$2A
03217 0B87                        15            .byte	$15
03218 0B88                        00            .byte	0
03219 0B89                        2A            .byte	$2A
03220 0B8A                        3F            .byte	$3F
03221 0B8B                        2A            .byte	$2A
03222 0B8C                        00            .byte	0
03223 0B8D                        15            .byte	$15
03224 0B8E                        2A            .byte	$2A
03225 0B8F                        00            .byte	0
03226 0B90                        3F            .byte	$3F
03227 0B91                        2A            .byte	$2A
03228 0B92                        2A            .byte	$2A
03229 0B93                        15            .byte	$15
03230 0B94                        2A            .byte	$2A
03231 0B95                        2A            .byte	$2A
03232 0B96                        3F            .byte	$3F
03233                                           ! 652   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03234 0B97                        00            .byte	0
03235 0B98                        15            .byte	$15
03236 0B99                        00            .byte	0
03237 0B9A                        00            .byte	0
03238 0B9B                        15            .byte	$15
03239 0B9C                        2A            .byte	$2A
03240 0B9D                        00            .byte	0
03241 0B9E                        3F            .byte	$3F
03242 0B9F                        00            .byte	0
03243 0BA0                        00            .byte	0
03244 0BA1                        3F            .byte	$3F
03245 0BA2                        2A            .byte	$2A
03246 0BA3                        2A            .byte	$2A
03247 0BA4                        15            .byte	$15
03248 0BA5                        00            .byte	0
03249 0BA6                        2A            .byte	$2A
03250 0BA7                        15            .byte	$15
03251 0BA8                        2A            .byte	$2A
03252 0BA9                        2A            .byte	$2A
03253 0BAA                        3F            .byte	$3F
03254 0BAB                        00            .byte	0
03255 0BAC                        2A            .byte	$2A
03256 0BAD                        3F            .byte	$3F
03257 0BAE                        2A            .byte	$2A
03258                                           ! 653   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03259 0BAF                        00            .byte	0
03260 0BB0                        15            .byte	$15
03261 0BB1                        15            .byte	$15
03262 0BB2                        00            .byte	0
03263 0BB3                        15            .byte	$15
03264 0BB4                        3F            .byte	$3F
03265 0BB5                        00            .byte	0
03266 0BB6                        3F            .byte	$3F
03267 0BB7                        15            .byte	$15
03268 0BB8                        00            .byte	0
03269 0BB9                        3F            .byte	$3F
03270 0BBA                        3F            .byte	$3F
03271 0BBB                        2A            .byte	$2A
03272 0BBC                        15            .byte	$15
03273 0BBD                        15            .byte	$15
03274 0BBE                        2A            .byte	$2A
03275 0BBF                        15            .byte	$15
03276 0BC0                        3F            .byte	$3F
03277 0BC1                        2A            .byte	$2A
03278 0BC2                        3F            .byte	$3F
03279 0BC3                        15            .byte	$15
03280 0BC4                        2A            .byte	$2A
03281 0BC5                        3F            .byte	$3F
03282 0BC6                        3F            .byte	$3F
03283                                           ! 654   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03284 0BC7                        15            .byte	$15
03285 0BC8                        00            .byte	0
03286 0BC9                        00            .byte	0
03287 0BCA                        15            .byte	$15
03288 0BCB                        00            .byte	0
03289 0BCC                        2A            .byte	$2A
03290 0BCD                        15            .byte	$15
03291 0BCE                        2A            .byte	$2A
03292 0BCF                        00            .byte	0
03293 0BD0                        15            .byte	$15
03294 0BD1                        2A            .byte	$2A
03295 0BD2                        2A            .byte	$2A
03296 0BD3                        3F            .byte	$3F
03297 0BD4                        00            .byte	0
03298 0BD5                        00            .byte	0
03299 0BD6                        3F            .byte	$3F
03300 0BD7                        00            .byte	0
03301 0BD8                        2A            .byte	$2A
03302 0BD9                        3F            .byte	$3F
03303 0BDA                        2A            .byte	$2A
03304 0BDB                        00            .byte	0
03305 0BDC                        3F            .byte	$3F
03306 0BDD                        2A            .byte	$2A
03307 0BDE                        2A            .byte	$2A
03308                                           ! 655   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03309 0BDF                        15            .byte	$15
03310 0BE0                        00            .byte	0
03311 0BE1                        15            .byte	$15
03312 0BE2                        15            .byte	$15
03313 0BE3                        00            .byte	0
03314 0BE4                        3F            .byte	$3F
03315 0BE5                        15            .byte	$15
03316 0BE6                        2A            .byte	$2A
03317 0BE7                        15            .byte	$15
03318 0BE8                        15            .byte	$15
03319 0BE9                        2A            .byte	$2A
03320 0BEA                        3F            .byte	$3F
03321 0BEB                        3F            .byte	$3F
03322 0BEC                        00            .byte	0
03323 0BED                        15            .byte	$15
03324 0BEE                        3F            .byte	$3F
03325 0BEF                        00            .byte	0
03326 0BF0                        3F            .byte	$3F
03327 0BF1                        3F            .byte	$3F
03328 0BF2                        2A            .byte	$2A
03329 0BF3                        15            .byte	$15
03330 0BF4                        3F            .byte	$3F
03331 0BF5                        2A            .byte	$2A
03332 0BF6                        3F            .byte	$3F
03333                                           ! 656   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03334 0BF7                        15            .byte	$15
03335 0BF8                        15            .byte	$15
03336 0BF9                        00            .byte	0
03337 0BFA                        15            .byte	$15
03338 0BFB                        15            .byte	$15
03339 0BFC                        2A            .byte	$2A
03340 0BFD                        15            .byte	$15
03341 0BFE                        3F            .byte	$3F
03342 0BFF                        00            .byte	0
03343 0C00                        15            .byte	$15
03344 0C01                        3F            .byte	$3F
03345 0C02                        2A            .byte	$2A
03346 0C03                        3F            .byte	$3F
03347 0C04                        15            .byte	$15
03348 0C05                        00            .byte	0
03349 0C06                        3F            .byte	$3F
03350 0C07                        15            .byte	$15
03351 0C08                        2A            .byte	$2A
03352 0C09                        3F            .byte	$3F
03353 0C0A                        3F            .byte	$3F
03354 0C0B                        00            .byte	0
03355 0C0C                        3F            .byte	$3F
03356 0C0D                        3F            .byte	$3F
03357 0C0E                        2A            .byte	$2A
03358                                           ! 657   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03359 0C0F                        15            .byte	$15
03360 0C10                        15            .byte	$15
03361 0C11                        15            .byte	$15
03362 0C12                        15            .byte	$15
03363 0C13                        15            .byte	$15
03364 0C14                        3F            .byte	$3F
03365 0C15                        15            .byte	$15
03366 0C16                        3F            .byte	$3F
03367 0C17                        15            .byte	$15
03368 0C18                        15            .byte	$15
03369 0C19                        3F            .byte	$3F
03370 0C1A                        3F            .byte	$3F
03371 0C1B                        3F            .byte	$3F
03372 0C1C                        15            .byte	$15
03373 0C1D                        15            .byte	$15
03374 0C1E                        3F            .byte	$3F
03375 0C1F                        15            .byte	$15
03376 0C20                        3F            .byte	$3F
03377 0C21                        3F            .byte	$3F
03378 0C22                        3F            .byte	$3F
03379 0C23                        15            .byte	$15
03380 0C24                        3F            .byte	$3F
03381 0C25                        3F            .byte	$3F
03382                                           ! 658 };
03383 0C26                        3F            .byte	$3F
03384                                           !BCC_EOS
03385                                           ! 659 static Bit8u palette3[256][3]=
03386                                           ! 660 {
03387                       00000C27            _palette3:
03388                                           ! 661   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03389 0C27                        00            .byte	0
03390 0C28                        00            .byte	0
03391 0C29                        00            .byte	0
03392 0C2A                        00            .byte	0
03393 0C2B                        00            .byte	0
03394 0C2C                        2A            .byte	$2A
03395 0C2D                        00            .byte	0
03396 0C2E                        2A            .byte	$2A
03397 0C2F                        00            .byte	0
03398 0C30                        00            .byte	0
03399 0C31                        2A            .byte	$2A
03400 0C32                        2A            .byte	$2A
03401 0C33                        2A            .byte	$2A
03402 0C34                        00            .byte	0
03403 0C35                        00            .byte	0
03404 0C36                        2A            .byte	$2A
03405 0C37                        00            .byte	0
03406 0C38                        2A            .byte	$2A
03407 0C39                        2A            .byte	$2A
03408 0C3A                        15            .byte	$15
03409 0C3B                        00            .byte	0
03410 0C3C                        2A            .byte	$2A
03411 0C3D                        2A            .byte	$2A
03412 0C3E                        2A            .byte	$2A
03413                                           ! 662   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03414 0C3F                        15            .byte	$15
03415 0C40                        15            .byte	$15
03416 0C41                        15            .byte	$15
03417 0C42                        15            .byte	$15
03418 0C43                        15            .byte	$15
03419 0C44                        3F            .byte	$3F
03420 0C45                        15            .byte	$15
03421 0C46                        3F            .byte	$3F
03422 0C47                        15            .byte	$15
03423 0C48                        15            .byte	$15
03424 0C49                        3F            .byte	$3F
03425 0C4A                        3F            .byte	$3F
03426 0C4B                        3F            .byte	$3F
03427 0C4C                        15            .byte	$15
03428 0C4D                        15            .byte	$15
03429 0C4E                        3F            .byte	$3F
03430 0C4F                        15            .byte	$15
03431 0C50                        3F            .byte	$3F
03432 0C51                        3F            .byte	$3F
03433 0C52                        3F            .byte	$3F
03434 0C53                        15            .byte	$15
03435 0C54                        3F            .byte	$3F
03436 0C55                        3F            .byte	$3F
03437 0C56                        3F            .byte	$3F
03438                                           ! 663   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03439 0C57                        00            .byte	0
03440 0C58                        00            .byte	0
03441 0C59                        00            .byte	0
03442 0C5A                        05            .byte	5
03443 0C5B                        05            .byte	5
03444 0C5C                        05            .byte	5
03445 0C5D                        08            .byte	8
03446 0C5E                        08            .byte	8
03447 0C5F                        08            .byte	8
03448 0C60                        0B            .byte	$B
03449 0C61                        0B            .byte	$B
03450 0C62                        0B            .byte	$B
03451 0C63                        0E            .byte	$E
03452 0C64                        0E            .byte	$E
03453 0C65                        0E            .byte	$E
03454 0C66                        11            .byte	$11
03455 0C67                        11            .byte	$11
03456 0C68                        11            .byte	$11
03457 0C69                        14            .byte	$14
03458 0C6A                        14            .byte	$14
03459 0C6B                        14            .byte	$14
03460 0C6C                        18            .byte	$18
03461 0C6D                        18            .byte	$18
03462 0C6E                        18            .byte	$18
03463                                           ! 664   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03464 0C6F                        1C            .byte	$1C
03465 0C70                        1C            .byte	$1C
03466 0C71                        1C            .byte	$1C
03467 0C72                        20            .byte	$20
03468 0C73                        20            .byte	$20
03469 0C74                        20            .byte	$20
03470 0C75                        24            .byte	$24
03471 0C76                        24            .byte	$24
03472 0C77                        24            .byte	$24
03473 0C78                        28            .byte	$28
03474 0C79                        28            .byte	$28
03475 0C7A                        28            .byte	$28
03476 0C7B                        2D            .byte	$2D
03477 0C7C                        2D            .byte	$2D
03478 0C7D                        2D            .byte	$2D
03479 0C7E                        32            .byte	$32
03480 0C7F                        32            .byte	$32
03481 0C80                        32            .byte	$32
03482 0C81                        38            .byte	$38
03483 0C82                        38            .byte	$38
03484 0C83                        38            .byte	$38
03485 0C84                        3F            .byte	$3F
03486 0C85                        3F            .byte	$3F
03487 0C86                        3F            .byte	$3F
03488                                           ! 665   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03489 0C87                        00            .byte	0
03490 0C88                        00            .byte	0
03491 0C89                        3F            .byte	$3F
03492 0C8A                        10            .byte	$10
03493 0C8B                        00            .byte	0
03494 0C8C                        3F            .byte	$3F
03495 0C8D                        1F            .byte	$1F
03496 0C8E                        00            .byte	0
03497 0C8F                        3F            .byte	$3F
03498 0C90                        2F            .byte	$2F
03499 0C91                        00            .byte	0
03500 0C92                        3F            .byte	$3F
03501 0C93                        3F            .byte	$3F
03502 0C94                        00            .byte	0
03503 0C95                        3F            .byte	$3F
03504 0C96                        3F            .byte	$3F
03505 0C97                        00            .byte	0
03506 0C98                        2F            .byte	$2F
03507 0C99                        3F            .byte	$3F
03508 0C9A                        00            .byte	0
03509 0C9B                        1F            .byte	$1F
03510 0C9C                        3F            .byte	$3F
03511 0C9D                        00            .byte	0
03512 0C9E                        10            .byte	$10
03513                                           ! 666   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03514 0C9F                        3F            .byte	$3F
03515 0CA0                        00            .byte	0
03516 0CA1                        00            .byte	0
03517 0CA2                        3F            .byte	$3F
03518 0CA3                        10            .byte	$10
03519 0CA4                        00            .byte	0
03520 0CA5                        3F            .byte	$3F
03521 0CA6                        1F            .byte	$1F
03522 0CA7                        00            .byte	0
03523 0CA8                        3F            .byte	$3F
03524 0CA9                        2F            .byte	$2F
03525 0CAA                        00            .byte	0
03526 0CAB                        3F            .byte	$3F
03527 0CAC                        3F            .byte	$3F
03528 0CAD                        00            .byte	0
03529 0CAE                        2F            .byte	$2F
03530 0CAF                        3F            .byte	$3F
03531 0CB0                        00            .byte	0
03532 0CB1                        1F            .byte	$1F
03533 0CB2                        3F            .byte	$3F
03534 0CB3                        00            .byte	0
03535 0CB4                        10            .byte	$10
03536 0CB5                        3F            .byte	$3F
03537 0CB6                        00            .byte	0
03538                                           ! 667   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03539 0CB7                        00            .byte	0
03540 0CB8                        3F            .byte	$3F
03541 0CB9                        00            .byte	0
03542 0CBA                        00            .byte	0
03543 0CBB                        3F            .byte	$3F
03544 0CBC                        10            .byte	$10
03545 0CBD                        00            .byte	0
03546 0CBE                        3F            .byte	$3F
03547 0CBF                        1F            .byte	$1F
03548 0CC0                        00            .byte	0
03549 0CC1                        3F            .byte	$3F
03550 0CC2                        2F            .byte	$2F
03551 0CC3                        00            .byte	0
03552 0CC4                        3F            .byte	$3F
03553 0CC5                        3F            .byte	$3F
03554 0CC6                        00            .byte	0
03555 0CC7                        2F            .byte	$2F
03556 0CC8                        3F            .byte	$3F
03557 0CC9                        00            .byte	0
03558 0CCA                        1F            .byte	$1F
03559 0CCB                        3F            .byte	$3F
03560 0CCC                        00            .byte	0
03561 0CCD                        10            .byte	$10
03562 0CCE                        3F            .byte	$3F
03563                                           ! 668   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3
03564 0CCF                        1F            .byte	$1F
03565 0CD0                        1F            .byte	$1F
03566 0CD1                        3F            .byte	$3F
03567 0CD2                        27            .byte	$27
03568 0CD3                        1F            .byte	$1F
03569 0CD4                        3F            .byte	$3F
03570 0CD5                        2F            .byte	$2F
03571 0CD6                        1F            .byte	$1F
03572 0CD7                        3F            .byte	$3F
03573 0CD8                        37            .byte	$37
03574 0CD9                        1F            .byte	$1F
03575 0CDA                        3F            .byte	$3F
03576 0CDB                        3F            .byte	$3F
03577 0CDC                        1F            .byte	$1F
03578 0CDD                        3F            .byte	$3F
03579                                           ! 668 f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03580 0CDE                        3F            .byte	$3F
03581 0CDF                        1F            .byte	$1F
03582 0CE0                        37            .byte	$37
03583 0CE1                        3F            .byte	$3F
03584 0CE2                        1F            .byte	$1F
03585 0CE3                        2F            .byte	$2F
03586 0CE4                        3F            .byte	$3F
03587 0CE5                        1F            .byte	$1F
03588 0CE6                        27            .byte	$27
03589                                           ! 669   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03590 0CE7                        3F            .byte	$3F
03591 0CE8                        1F            .byte	$1F
03592 0CE9                        1F            .byte	$1F
03593 0CEA                        3F            .byte	$3F
03594 0CEB                        27            .byte	$27
03595 0CEC                        1F            .byte	$1F
03596 0CED                        3F            .byte	$3F
03597 0CEE                        2F            .byte	$2F
03598 0CEF                        1F            .byte	$1F
03599 0CF0                        3F            .byte	$3F
03600 0CF1                        37            .byte	$37
03601 0CF2                        1F            .byte	$1F
03602 0CF3                        3F            .byte	$3F
03603 0CF4                        3F            .byte	$3F
03604 0CF5                        1F            .byte	$1F
03605 0CF6                        37            .byte	$37
03606 0CF7                        3F            .byte	$3F
03607 0CF8                        1F            .byte	$1F
03608 0CF9                        2F            .byte	$2F
03609 0CFA                        3F            .byte	$3F
03610 0CFB                        1F            .byte	$1F
03611 0CFC                        27            .byte	$27
03612 0CFD                        3F            .byte	$3F
03613 0CFE                        1F            .byte	$1F
03614                                           ! 670   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03615 0CFF                        1F            .byte	$1F
03616 0D00                        3F            .byte	$3F
03617 0D01                        1F            .byte	$1F
03618 0D02                        1F            .byte	$1F
03619 0D03                        3F            .byte	$3F
03620 0D04                        27            .byte	$27
03621 0D05                        1F            .byte	$1F
03622 0D06                        3F            .byte	$3F
03623 0D07                        2F            .byte	$2F
03624 0D08                        1F            .byte	$1F
03625 0D09                        3F            .byte	$3F
03626 0D0A                        37            .byte	$37
03627 0D0B                        1F            .byte	$1F
03628 0D0C                        3F            .byte	$3F
03629 0D0D                        3F            .byte	$3F
03630 0D0E                        1F            .byte	$1F
03631 0D0F                        37            .byte	$37
03632 0D10                        3F            .byte	$3F
03633 0D11                        1F            .byte	$1F
03634 0D12                        2F            .byte	$2F
03635 0D13                        3F            .byte	$3F
03636 0D14                        1F            .byte	$1F
03637 0D15                        27            .byte	$27
03638 0D16                        3F            .byte	$3F
03639                                           ! 671   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03640 0D17                        2D            .byte	$2D
03641 0D18                        2D            .byte	$2D
03642 0D19                        3F            .byte	$3F
03643 0D1A                        31            .byte	$31
03644 0D1B                        2D            .byte	$2D
03645 0D1C                        3F            .byte	$3F
03646 0D1D                        36            .byte	$36
03647 0D1E                        2D            .byte	$2D
03648 0D1F                        3F            .byte	$3F
03649 0D20                        3A            .byte	$3A
03650 0D21                        2D            .byte	$2D
03651 0D22                        3F            .byte	$3F
03652 0D23                        3F            .byte	$3F
03653 0D24                        2D            .byte	$2D
03654 0D25                        3F            .byte	$3F
03655 0D26                        3F            .byte	$3F
03656 0D27                        2D            .byte	$2D
03657 0D28                        3A            .byte	$3A
03658 0D29                        3F            .byte	$3F
03659 0D2A                        2D            .byte	$2D
03660 0D2B                        36            .byte	$36
03661 0D2C                        3F            .byte	$3F
03662 0D2D                        2D            .byte	$2D
03663 0D2E                        31            .byte	$31
03664                                           ! 672   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03665 0D2F                        3F            .byte	$3F
03666 0D30                        2D            .byte	$2D
03667 0D31                        2D            .byte	$2D
03668 0D32                        3F            .byte	$3F
03669 0D33                        31            .byte	$31
03670 0D34                        2D            .byte	$2D
03671 0D35                        3F            .byte	$3F
03672 0D36                        36            .byte	$36
03673 0D37                        2D            .byte	$2D
03674 0D38                        3F            .byte	$3F
03675 0D39                        3A            .byte	$3A
03676 0D3A                        2D            .byte	$2D
03677 0D3B                        3F            .byte	$3F
03678 0D3C                        3F            .byte	$3F
03679 0D3D                        2D            .byte	$2D
03680 0D3E                        3A            .byte	$3A
03681 0D3F                        3F            .byte	$3F
03682 0D40                        2D            .byte	$2D
03683 0D41                        36            .byte	$36
03684 0D42                        3F            .byte	$3F
03685 0D43                        2D            .byte	$2D
03686 0D44                        31            .byte	$31
03687 0D45                        3F            .byte	$3F
03688 0D46                        2D            .byte	$2D
03689                                           ! 673   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03690 0D47                        2D            .byte	$2D
03691 0D48                        3F            .byte	$3F
03692 0D49                        2D            .byte	$2D
03693 0D4A                        2D            .byte	$2D
03694 0D4B                        3F            .byte	$3F
03695 0D4C                        31            .byte	$31
03696 0D4D                        2D            .byte	$2D
03697 0D4E                        3F            .byte	$3F
03698 0D4F                        36            .byte	$36
03699 0D50                        2D            .byte	$2D
03700 0D51                        3F            .byte	$3F
03701 0D52                        3A            .byte	$3A
03702 0D53                        2D            .byte	$2D
03703 0D54                        3F            .byte	$3F
03704 0D55                        3F            .byte	$3F
03705 0D56                        2D            .byte	$2D
03706 0D57                        3A            .byte	$3A
03707 0D58                        3F            .byte	$3F
03708 0D59                        2D            .byte	$2D
03709 0D5A                        36            .byte	$36
03710 0D5B                        3F            .byte	$3F
03711 0D5C                        2D            .byte	$2D
03712 0D5D                        31            .byte	$31
03713 0D5E                        3F            .byte	$3F
03714                                           ! 674   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03715 0D5F                        00            .byte	0
03716 0D60                        00            .byte	0
03717 0D61                        1C            .byte	$1C
03718 0D62                        07            .byte	7
03719 0D63                        00            .byte	0
03720 0D64                        1C            .byte	$1C
03721 0D65                        0E            .byte	$E
03722 0D66                        00            .byte	0
03723 0D67                        1C            .byte	$1C
03724 0D68                        15            .byte	$15
03725 0D69                        00            .byte	0
03726 0D6A                        1C            .byte	$1C
03727 0D6B                        1C            .byte	$1C
03728 0D6C                        00            .byte	0
03729 0D6D                        1C            .byte	$1C
03730 0D6E                        1C            .byte	$1C
03731 0D6F                        00            .byte	0
03732 0D70                        15            .byte	$15
03733 0D71                        1C            .byte	$1C
03734 0D72                        00            .byte	0
03735 0D73                        0E            .byte	$E
03736 0D74                        1C            .byte	$1C
03737 0D75                        00            .byte	0
03738 0D76                        07            .byte	7
03739                                           ! 675   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
03740 0D77                        1C            .byte	$1C
03741 0D78                        00            .byte	0
03742 0D79                        00            .byte	0
03743 0D7A                        1C            .byte	$1C
03744 0D7B                        07            .byte	7
03745 0D7C                        00            .byte	0
03746 0D7D                        1C            .byte	$1C
03747 0D7E                        0E            .byte	$E
03748 0D7F                        00            .byte	0
03749 0D80                        1C            .byte	$1C
03750 0D81                        15            .byte	$15
03751 0D82                        00            .byte	0
03752 0D83                        1C            .byte	$1C
03753 0D84                        1C            .byte	$1C
03754 0D85                        00            .byte	0
03755 0D86                        15            .byte	$15
03756 0D87                        1C            .byte	$1C
03757 0D88                        00            .byte	0
03758 0D89                        0E            .byte	$E
03759 0D8A                        1C            .byte	$1C
03760 0D8B                        00            .byte	0
03761 0D8C                        07            .byte	7
03762 0D8D                        1C            .byte	$1C
03763 0D8E                        00            .byte	0
03764                                           ! 676   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
03765 0D8F                        00            .byte	0
03766 0D90                        1C            .byte	$1C
03767 0D91                        00            .byte	0
03768 0D92                        00            .byte	0
03769 0D93                        1C            .byte	$1C
03770 0D94                        07            .byte	7
03771 0D95                        00            .byte	0
03772 0D96                        1C            .byte	$1C
03773 0D97                        0E            .byte	$E
03774 0D98                        00            .byte	0
03775 0D99                        1C            .byte	$1C
03776 0D9A                        15            .byte	$15
03777 0D9B                        00            .byte	0
03778 0D9C                        1C            .byte	$1C
03779 0D9D                        1C            .byte	$1C
03780 0D9E                        00            .byte	0
03781 0D9F                        15            .byte	$15
03782 0DA0                        1C            .byte	$1C
03783 0DA1                        00            .byte	0
03784 0DA2                        0E            .byte	$E
03785 0DA3                        1C            .byte	$1C
03786 0DA4                        00            .byte	0
03787 0DA5                        07            .byte	7
03788 0DA6                        1C            .byte	$1C
03789                                           ! 677   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
03790 0DA7                        0E            .byte	$E
03791 0DA8                        0E            .byte	$E
03792 0DA9                        1C            .byte	$1C
03793 0DAA                        11            .byte	$11
03794 0DAB                        0E            .byte	$E
03795 0DAC                        1C            .byte	$1C
03796 0DAD                        15            .byte	$15
03797 0DAE                        0E            .byte	$E
03798 0DAF                        1C            .byte	$1C
03799 0DB0                        18            .byte	$18
03800 0DB1                        0E            .byte	$E
03801 0DB2                        1C            .byte	$1C
03802 0DB3                        1C            .byte	$1C
03803 0DB4                        0E            .byte	$E
03804 0DB5                        1C            .byte	$1C
03805 0DB6                        1C            .byte	$1C
03806 0DB7                        0E            .byte	$E
03807 0DB8                        18            .byte	$18
03808 0DB9                        1C            .byte	$1C
03809 0DBA                        0E            .byte	$E
03810 0DBB                        15            .byte	$15
03811 0DBC                        1C            .byte	$1C
03812 0DBD                        0E            .byte	$E
03813 0DBE                        11            .byte	$11
03814                                           ! 678   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
03815 0DBF                        1C            .byte	$1C
03816 0DC0                        0E            .byte	$E
03817 0DC1                        0E            .byte	$E
03818 0DC2                        1C            .byte	$1C
03819 0DC3                        11            .byte	$11
03820 0DC4                        0E            .byte	$E
03821 0DC5                        1C            .byte	$1C
03822 0DC6                        15            .byte	$15
03823 0DC7                        0E            .byte	$E
03824 0DC8                        1C            .byte	$1C
03825 0DC9                        18            .byte	$18
03826 0DCA                        0E            .byte	$E
03827 0DCB                        1C            .byte	$1C
03828 0DCC                        1C            .byte	$1C
03829 0DCD                        0E            .byte	$E
03830 0DCE                        18            .byte	$18
03831 0DCF                        1C            .byte	$1C
03832 0DD0                        0E            .byte	$E
03833 0DD1                        15            .byte	$15
03834 0DD2                        1C            .byte	$1C
03835 0DD3                        0E            .byte	$E
03836 0DD4                        11            .byte	$11
03837 0DD5                        1C            .byte	$1C
03838 0DD6                        0E            .byte	$E
03839                                           ! 679   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
03840 0DD7                        0E            .byte	$E
03841 0DD8                        1C            .byte	$1C
03842 0DD9                        0E            .byte	$E
03843 0DDA                        0E            .byte	$E
03844 0DDB                        1C            .byte	$1C
03845 0DDC                        11            .byte	$11
03846 0DDD                        0E            .byte	$E
03847 0DDE                        1C            .byte	$1C
03848 0DDF                        15            .byte	$15
03849 0DE0                        0E            .byte	$E
03850 0DE1                        1C            .byte	$1C
03851 0DE2                        18            .byte	$18
03852 0DE3                        0E            .byte	$E
03853 0DE4                        1C            .byte	$1C
03854 0DE5                        1C            .byte	$1C
03855 0DE6                        0E            .byte	$E
03856 0DE7                        18            .byte	$18
03857 0DE8                        1C            .byte	$1C
03858 0DE9                        0E            .byte	$E
03859 0DEA                        15            .byte	$15
03860 0DEB                        1C            .byte	$1C
03861 0DEC                        0E            .byte	$E
03862 0DED                        11            .byte	$11
03863 0DEE                        1C            .byte	$1C
03864                                           ! 680   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
03865 0DEF                        14            .byte	$14
03866 0DF0                        14            .byte	$14
03867 0DF1                        1C            .byte	$1C
03868 0DF2                        16            .byte	$16
03869 0DF3                        14            .byte	$14
03870 0DF4                        1C            .byte	$1C
03871 0DF5                        18            .byte	$18
03872 0DF6                        14            .byte	$14
03873 0DF7                        1C            .byte	$1C
03874 0DF8                        1A            .byte	$1A
03875 0DF9                        14            .byte	$14
03876 0DFA                        1C            .byte	$1C
03877 0DFB                        1C            .byte	$1C
03878 0DFC                        14            .byte	$14
03879 0DFD                        1C            .byte	$1C
03880 0DFE                        1C            .byte	$1C
03881 0DFF                        14            .byte	$14
03882 0E00                        1A            .byte	$1A
03883 0E01                        1C            .byte	$1C
03884 0E02                        14            .byte	$14
03885 0E03                        18            .byte	$18
03886 0E04                        1C            .byte	$1C
03887 0E05                        14            .byte	$14
03888 0E06                        16            .byte	$16
03889                                           ! 681   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
03890 0E07                        1C            .byte	$1C
03891 0E08                        14            .byte	$14
03892 0E09                        14            .byte	$14
03893 0E0A                        1C            .byte	$1C
03894 0E0B                        16            .byte	$16
03895 0E0C                        14            .byte	$14
03896 0E0D                        1C            .byte	$1C
03897 0E0E                        18            .byte	$18
03898 0E0F                        14            .byte	$14
03899 0E10                        1C            .byte	$1C
03900 0E11                        1A            .byte	$1A
03901 0E12                        14            .byte	$14
03902 0E13                        1C            .byte	$1C
03903 0E14                        1C            .byte	$1C
03904 0E15                        14            .byte	$14
03905 0E16                        1A            .byte	$1A
03906 0E17                        1C            .byte	$1C
03907 0E18                        14            .byte	$14
03908 0E19                        18            .byte	$18
03909 0E1A                        1C            .byte	$1C
03910 0E1B                        14            .byte	$14
03911 0E1C                        16            .byte	$16
03912 0E1D                        1C            .byte	$1C
03913 0E1E                        14            .byte	$14
03914                                           ! 682   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
03915 0E1F                        14            .byte	$14
03916 0E20                        1C            .byte	$1C
03917 0E21                        14            .byte	$14
03918 0E22                        14            .byte	$14
03919 0E23                        1C            .byte	$1C
03920 0E24                        16            .byte	$16
03921 0E25                        14            .byte	$14
03922 0E26                        1C            .byte	$1C
03923 0E27                        18            .byte	$18
03924 0E28                        14            .byte	$14
03925 0E29                        1C            .byte	$1C
03926 0E2A                        1A            .byte	$1A
03927 0E2B                        14            .byte	$14
03928 0E2C                        1C            .byte	$1C
03929 0E2D                        1C            .byte	$1C
03930 0E2E                        14            .byte	$14
03931 0E2F                        1A            .byte	$1A
03932 0E30                        1C            .byte	$1C
03933 0E31                        14            .byte	$14
03934 0E32                        18            .byte	$18
03935 0E33                        1C            .byte	$1C
03936 0E34                        14            .byte	$14
03937 0E35                        16            .byte	$16
03938 0E36                        1C            .byte	$1C
03939                                           ! 683   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
03940 0E37                        00            .byte	0
03941 0E38                        00            .byte	0
03942 0E39                        10            .byte	$10
03943 0E3A                        04            .byte	4
03944 0E3B                        00            .byte	0
03945 0E3C                        10            .byte	$10
03946 0E3D                        08            .byte	8
03947 0E3E                        00            .byte	0
03948 0E3F                        10            .byte	$10
03949 0E40                        0C            .byte	$C
03950 0E41                        00            .byte	0
03951 0E42                        10            .byte	$10
03952 0E43                        10            .byte	$10
03953 0E44                        00            .byte	0
03954 0E45                        10            .byte	$10
03955 0E46                        10            .byte	$10
03956 0E47                        00            .byte	0
03957 0E48                        0C            .byte	$C
03958 0E49                        10            .byte	$10
03959 0E4A                        00            .byte	0
03960 0E4B                        08            .byte	8
03961 0E4C                        10            .byte	$10
03962 0E4D                        00            .byte	0
03963 0E4E                        04            .byte	4
03964                                           ! 684   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x1
03965 0E4F                        10            .byte	$10
03966 0E50                        00            .byte	0
03967 0E51                        00            .byte	0
03968 0E52                        10            .byte	$10
03969 0E53                        04            .byte	4
03970 0E54                        00            .byte	0
03971 0E55                        10            .byte	$10
03972 0E56                        08            .byte	8
03973 0E57                        00            .byte	0
03974                                           ! 684 0,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
03975 0E58                        10            .byte	$10
03976 0E59                        0C            .byte	$C
03977 0E5A                        00            .byte	0
03978 0E5B                        10            .byte	$10
03979 0E5C                        10            .byte	$10
03980 0E5D                        00            .byte	0
03981 0E5E                        0C            .byte	$C
03982 0E5F                        10            .byte	$10
03983 0E60                        00            .byte	0
03984 0E61                        08            .byte	8
03985 0E62                        10            .byte	$10
03986 0E63                        00            .byte	0
03987 0E64                        04            .byte	4
03988 0E65                        10            .byte	$10
03989 0E66                        00            .byte	0
03990                                           ! 685   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
03991 0E67                        00            .byte	0
03992 0E68                        10            .byte	$10
03993 0E69                        00            .byte	0
03994 0E6A                        00            .byte	0
03995 0E6B                        10            .byte	$10
03996 0E6C                        04            .byte	4
03997 0E6D                        00            .byte	0
03998 0E6E                        10            .byte	$10
03999 0E6F                        08            .byte	8
04000 0E70                        00            .byte	0
04001 0E71                        10            .byte	$10
04002 0E72                        0C            .byte	$C
04003 0E73                        00            .byte	0
04004 0E74                        10            .byte	$10
04005 0E75                        10            .byte	$10
04006 0E76                        00            .byte	0
04007 0E77                        0C            .byte	$C
04008 0E78                        10            .byte	$10
04009 0E79                        00            .byte	0
04010 0E7A                        08            .byte	8
04011 0E7B                        10            .byte	$10
04012 0E7C                        00            .byte	0
04013 0E7D                        04            .byte	4
04014 0E7E                        10            .byte	$10
04015                                           ! 686   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04016 0E7F                        08            .byte	8
04017 0E80                        08            .byte	8
04018 0E81                        10            .byte	$10
04019 0E82                        0A            .byte	$A
04020 0E83                        08            .byte	8
04021 0E84                        10            .byte	$10
04022 0E85                        0C            .byte	$C
04023 0E86                        08            .byte	8
04024 0E87                        10            .byte	$10
04025 0E88                        0E            .byte	$E
04026 0E89                        08            .byte	8
04027 0E8A                        10            .byte	$10
04028 0E8B                        10            .byte	$10
04029 0E8C                        08            .byte	8
04030 0E8D                        10            .byte	$10
04031 0E8E                        10            .byte	$10
04032 0E8F                        08            .byte	8
04033 0E90                        0E            .byte	$E
04034 0E91                        10            .byte	$10
04035 0E92                        08            .byte	8
04036 0E93                        0C            .byte	$C
04037 0E94                        10            .byte	$10
04038 0E95                        08            .byte	8
04039 0E96                        0A            .byte	$A
04040                                           ! 687   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04041 0E97                        10            .byte	$10
04042 0E98                        08            .byte	8
04043 0E99                        08            .byte	8
04044 0E9A                        10            .byte	$10
04045 0E9B                        0A            .byte	$A
04046 0E9C                        08            .byte	8
04047 0E9D                        10            .byte	$10
04048 0E9E                        0C            .byte	$C
04049 0E9F                        08            .byte	8
04050 0EA0                        10            .byte	$10
04051 0EA1                        0E            .byte	$E
04052 0EA2                        08            .byte	8
04053 0EA3                        10            .byte	$10
04054 0EA4                        10            .byte	$10
04055 0EA5                        08            .byte	8
04056 0EA6                        0E            .byte	$E
04057 0EA7                        10            .byte	$10
04058 0EA8                        08            .byte	8
04059 0EA9                        0C            .byte	$C
04060 0EAA                        10            .byte	$10
04061 0EAB                        08            .byte	8
04062 0EAC                        0A            .byte	$A
04063 0EAD                        10            .byte	$10
04064 0EAE                        08            .byte	8
04065                                           ! 688   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04066 0EAF                        08            .byte	8
04067 0EB0                        10            .byte	$10
04068 0EB1                        08            .byte	8
04069 0EB2                        08            .byte	8
04070 0EB3                        10            .byte	$10
04071 0EB4                        0A            .byte	$A
04072 0EB5                        08            .byte	8
04073 0EB6                        10            .byte	$10
04074 0EB7                        0C            .byte	$C
04075 0EB8                        08            .byte	8
04076 0EB9                        10            .byte	$10
04077 0EBA                        0E            .byte	$E
04078 0EBB                        08            .byte	8
04079 0EBC                        10            .byte	$10
04080 0EBD                        10            .byte	$10
04081 0EBE                        08            .byte	8
04082 0EBF                        0E            .byte	$E
04083 0EC0                        10            .byte	$10
04084 0EC1                        08            .byte	8
04085 0EC2                        0C            .byte	$C
04086 0EC3                        10            .byte	$10
04087 0EC4                        08            .byte	8
04088 0EC5                        0A            .byte	$A
04089 0EC6                        10            .byte	$10
04090                                           ! 689   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04091 0EC7                        0B            .byte	$B
04092 0EC8                        0B            .byte	$B
04093 0EC9                        10            .byte	$10
04094 0ECA                        0C            .byte	$C
04095 0ECB                        0B            .byte	$B
04096 0ECC                        10            .byte	$10
04097 0ECD                        0D            .byte	$D
04098 0ECE                        0B            .byte	$B
04099 0ECF                        10            .byte	$10
04100 0ED0                        0F            .byte	$F
04101 0ED1                        0B            .byte	$B
04102 0ED2                        10            .byte	$10
04103 0ED3                        10            .byte	$10
04104 0ED4                        0B            .byte	$B
04105 0ED5                        10            .byte	$10
04106 0ED6                        10            .byte	$10
04107 0ED7                        0B            .byte	$B
04108 0ED8                        0F            .byte	$F
04109 0ED9                        10            .byte	$10
04110 0EDA                        0B            .byte	$B
04111 0EDB                        0D            .byte	$D
04112 0EDC                        10            .byte	$10
04113 0EDD                        0B            .byte	$B
04114 0EDE                        0C            .byte	$C
04115                                           ! 690   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04116 0EDF                        10            .byte	$10
04117 0EE0                        0B            .byte	$B
04118 0EE1                        0B            .byte	$B
04119 0EE2                        10            .byte	$10
04120 0EE3                        0C            .byte	$C
04121 0EE4                        0B            .byte	$B
04122 0EE5                        10            .byte	$10
04123 0EE6                        0D            .byte	$D
04124 0EE7                        0B            .byte	$B
04125 0EE8                        10            .byte	$10
04126 0EE9                        0F            .byte	$F
04127 0EEA                        0B            .byte	$B
04128 0EEB                        10            .byte	$10
04129 0EEC                        10            .byte	$10
04130 0EED                        0B            .byte	$B
04131 0EEE                        0F            .byte	$F
04132 0EEF                        10            .byte	$10
04133 0EF0                        0B            .byte	$B
04134 0EF1                        0D            .byte	$D
04135 0EF2                        10            .byte	$10
04136 0EF3                        0B            .byte	$B
04137 0EF4                        0C            .byte	$C
04138 0EF5                        10            .byte	$10
04139 0EF6                        0B            .byte	$B
04140                                           ! 691   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04141 0EF7                        0B            .byte	$B
04142 0EF8                        10            .byte	$10
04143 0EF9                        0B            .byte	$B
04144 0EFA                        0B            .byte	$B
04145 0EFB                        10            .byte	$10
04146 0EFC                        0C            .byte	$C
04147 0EFD                        0B            .byte	$B
04148 0EFE                        10            .byte	$10
04149 0EFF                        0D            .byte	$D
04150 0F00                        0B            .byte	$B
04151 0F01                        10            .byte	$10
04152 0F02                        0F            .byte	$F
04153 0F03                        0B            .byte	$B
04154 0F04                        10            .byte	$10
04155 0F05                        10            .byte	$10
04156 0F06                        0B            .byte	$B
04157 0F07                        0F            .byte	$F
04158 0F08                        10            .byte	$10
04159 0F09                        0B            .byte	$B
04160 0F0A                        0D            .byte	$D
04161 0F0B                        10            .byte	$10
04162 0F0C                        0B            .byte	$B
04163 0F0D                        0C            .byte	$C
04164 0F0E                        10            .byte	$10
04165                                           ! 692   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04166 0F0F                        00            .byte	0
04167 0F10                        00            .byte	0
04168 0F11                        00            .byte	0
04169 0F12                        00            .byte	0
04170 0F13                        00            .byte	0
04171 0F14                        00            .byte	0
04172 0F15                        00            .byte	0
04173 0F16                        00            .byte	0
04174 0F17                        00            .byte	0
04175 0F18                        00            .byte	0
04176 0F19                        00            .byte	0
04177 0F1A                        00            .byte	0
04178 0F1B                        00            .byte	0
04179 0F1C                        00            .byte	0
04180 0F1D                        00            .byte	0
04181 0F1E                        00            .byte	0
04182 0F1F                        00            .byte	0
04183 0F20                        00            .byte	0
04184 0F21                        00            .byte	0
04185 0F22                        00            .byte	0
04186 0F23                        00            .byte	0
04187 0F24                        00            .byte	0
04188 0F25                        00            .byte	0
04189                                           ! 693 };
04190 0F26                        00            .byte	0
04191                                           !BCC_EOS
04192                                           ! 694 static Bit8u static_functionality[0x10]=
04193                                           ! 695 {
04194                       00000F27            _static_functionality:
04195                                           ! 696          0xff,
04196 0F27                        FF            .byte	$FF
04197                                           ! 697          0xe0,
04198 0F28                        E0            .byte	$E0
04199                                           ! 698          0x0f,
04200 0F29                        0F            .byte	$F
04201                                           ! 699          0x00, 0x00, 0x00, 0x00,
04202 0F2A                        00            .byte	0
04203 0F2B                        00            .byte	0
04204 0F2C                        00            .byte	0
04205 0F2D                        00            .byte	0
04206                                           ! 700          0x07,
04207 0F2E                        07            .byte	7
04208                                           ! 701          0x02,
04209 0F2F                        02            .byte	2
04210                                           ! 702          0x08,
04211 0F30                        08            .byte	8
04212                                           ! 703          0xe7,
04213 0F31                        E7            .byte	$E7
04214                                           ! 704          0x0c,
04215 0F32                        0C            .byte	$C
04216                                           ! 705          0x00,
04217 0F33                        00            .byte	0
04218                                           ! 706          0x00,
04219 0F34                        00            .byte	0
04220                                           ! 707          0x00,
04221 0F35                        00            .byte	0
04222                                           ! 708          0x00
04223                                           ! 709 };
04224 0F36                        00            .byte	0
04225                                           !BCC_EOS
04226                                           ! 710 static Bit8u vgafont8[256*8]=
04227                                           ! 711 {
04228                       00000F37            _vgafont8:
04229                                           ! 712  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04230 0F37                        00            .byte	0
04231 0F38                        00            .byte	0
04232 0F39                        00            .byte	0
04233 0F3A                        00            .byte	0
04234 0F3B                        00            .byte	0
04235 0F3C                        00            .byte	0
04236 0F3D                        00            .byte	0
04237 0F3E                        00            .byte	0
04238                                           ! 713  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04239 0F3F                        7E            .byte	$7E
04240 0F40                        81            .byte	$81
04241 0F41                        A5            .byte	$A5
04242 0F42                        81            .byte	$81
04243 0F43                        BD            .byte	$BD
04244 0F44                        99            .byte	$99
04245 0F45                        81            .byte	$81
04246 0F46                        7E            .byte	$7E
04247                                           ! 714  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04248 0F47                        7E            .byte	$7E
04249 0F48                        FF            .byte	$FF
04250 0F49                        DB            .byte	$DB
04251 0F4A                        FF            .byte	$FF
04252 0F4B                        C3            .byte	$C3
04253 0F4C                        E7            .byte	$E7
04254 0F4D                        FF            .byte	$FF
04255 0F4E                        7E            .byte	$7E
04256                                           ! 715  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04257 0F4F                        6C            .byte	$6C
04258 0F50                        FE            .byte	$FE
04259 0F51                        FE            .byte	$FE
04260 0F52                        FE            .byte	$FE
04261 0F53                        7C            .byte	$7C
04262 0F54                        38            .byte	$38
04263 0F55                        10            .byte	$10
04264 0F56                        00            .byte	0
04265                                           ! 716  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04266 0F57                        10            .byte	$10
04267 0F58                        38            .byte	$38
04268 0F59                        7C            .byte	$7C
04269 0F5A                        FE            .byte	$FE
04270 0F5B                        7C            .byte	$7C
04271 0F5C                        38            .byte	$38
04272 0F5D                        10            .byte	$10
04273 0F5E                        00            .byte	0
04274                                           ! 717  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04275 0F5F                        38            .byte	$38
04276 0F60                        7C            .byte	$7C
04277 0F61                        38            .byte	$38
04278 0F62                        FE            .byte	$FE
04279 0F63                        FE            .byte	$FE
04280 0F64                        7C            .byte	$7C
04281 0F65                        38            .byte	$38
04282 0F66                        7C            .byte	$7C
04283                                           ! 718  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04284 0F67                        10            .byte	$10
04285 0F68                        10            .byte	$10
04286 0F69                        38            .byte	$38
04287 0F6A                        7C            .byte	$7C
04288 0F6B                        FE            .byte	$FE
04289 0F6C                        7C            .byte	$7C
04290 0F6D                        38            .byte	$38
04291 0F6E                        7C            .byte	$7C
04292                                           ! 719  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04293 0F6F                        00            .byte	0
04294 0F70                        00            .byte	0
04295 0F71                        18            .byte	$18
04296 0F72                        3C            .byte	$3C
04297 0F73                        3C            .byte	$3C
04298 0F74                        18            .byte	$18
04299 0F75                        00            .byte	0
04300 0F76                        00            .byte	0
04301                                           ! 720  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04302 0F77                        FF            .byte	$FF
04303 0F78                        FF            .byte	$FF
04304 0F79                        E7            .byte	$E7
04305 0F7A                        C3            .byte	$C3
04306 0F7B                        C3            .byte	$C3
04307 0F7C                        E7            .byte	$E7
04308 0F7D                        FF            .byte	$FF
04309 0F7E                        FF            .byte	$FF
04310                                           ! 721  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04311 0F7F                        00            .byte	0
04312 0F80                        3C            .byte	$3C
04313 0F81                        66            .byte	$66
04314 0F82                        42            .byte	$42
04315 0F83                        42            .byte	$42
04316 0F84                        66            .byte	$66
04317 0F85                        3C            .byte	$3C
04318 0F86                        00            .byte	0
04319                                           ! 722  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04320 0F87                        FF            .byte	$FF
04321 0F88                        C3            .byte	$C3
04322 0F89                        99            .byte	$99
04323 0F8A                        BD            .byte	$BD
04324 0F8B                        BD            .byte	$BD
04325 0F8C                        99            .byte	$99
04326 0F8D                        C3            .byte	$C3
04327 0F8E                        FF            .byte	$FF
04328                                           ! 723  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04329 0F8F                        0F            .byte	$F
04330 0F90                        07            .byte	7
04331 0F91                        0F            .byte	$F
04332 0F92                        7D            .byte	$7D
04333 0F93                        CC            .byte	$CC
04334 0F94                        CC            .byte	$CC
04335 0F95                        CC            .byte	$CC
04336 0F96                        78            .byte	$78
04337                                           ! 724  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04338 0F97                        3C            .byte	$3C
04339 0F98                        66            .byte	$66
04340 0F99                        66            .byte	$66
04341 0F9A                        66            .byte	$66
04342 0F9B                        3C            .byte	$3C
04343 0F9C                        18            .byte	$18
04344 0F9D                        7E            .byte	$7E
04345 0F9E                        18            .byte	$18
04346                                           ! 725  0
04347                                           ! 725 x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04348 0F9F                        3F            .byte	$3F
04349 0FA0                        33            .byte	$33
04350 0FA1                        3F            .byte	$3F
04351 0FA2                        30            .byte	$30
04352 0FA3                        30            .byte	$30
04353 0FA4                        70            .byte	$70
04354 0FA5                        F0            .byte	$F0
04355 0FA6                        E0            .byte	$E0
04356                                           ! 726  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04357 0FA7                        7F            .byte	$7F
04358 0FA8                        63            .byte	$63
04359 0FA9                        7F            .byte	$7F
04360 0FAA                        63            .byte	$63
04361 0FAB                        63            .byte	$63
04362 0FAC                        67            .byte	$67
04363 0FAD                        E6            .byte	$E6
04364 0FAE                        C0            .byte	$C0
04365                                           ! 727  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04366 0FAF                        99            .byte	$99
04367 0FB0                        5A            .byte	$5A
04368 0FB1                        3C            .byte	$3C
04369 0FB2                        E7            .byte	$E7
04370 0FB3                        E7            .byte	$E7
04371 0FB4                        3C            .byte	$3C
04372 0FB5                        5A            .byte	$5A
04373 0FB6                        99            .byte	$99
04374                                           ! 728  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04375 0FB7                        80            .byte	$80
04376 0FB8                        E0            .byte	$E0
04377 0FB9                        F8            .byte	$F8
04378 0FBA                        FE            .byte	$FE
04379 0FBB                        F8            .byte	$F8
04380 0FBC                        E0            .byte	$E0
04381 0FBD                        80            .byte	$80
04382 0FBE                        00            .byte	0
04383                                           ! 729  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04384 0FBF                        02            .byte	2
04385 0FC0                        0E            .byte	$E
04386 0FC1                        3E            .byte	$3E
04387 0FC2                        FE            .byte	$FE
04388 0FC3                        3E            .byte	$3E
04389 0FC4                        0E            .byte	$E
04390 0FC5                        02            .byte	2
04391 0FC6                        00            .byte	0
04392                                           ! 730  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04393 0FC7                        18            .byte	$18
04394 0FC8                        3C            .byte	$3C
04395 0FC9                        7E            .byte	$7E
04396 0FCA                        18            .byte	$18
04397 0FCB                        18            .byte	$18
04398 0FCC                        7E            .byte	$7E
04399 0FCD                        3C            .byte	$3C
04400 0FCE                        18            .byte	$18
04401                                           ! 731  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04402 0FCF                        66            .byte	$66
04403 0FD0                        66            .byte	$66
04404 0FD1                        66            .byte	$66
04405 0FD2                        66            .byte	$66
04406 0FD3                        66            .byte	$66
04407 0FD4                        00            .byte	0
04408 0FD5                        66            .byte	$66
04409 0FD6                        00            .byte	0
04410                                           ! 732  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04411 0FD7                        7F            .byte	$7F
04412 0FD8                        DB            .byte	$DB
04413 0FD9                        DB            .byte	$DB
04414 0FDA                        7B            .byte	$7B
04415 0FDB                        1B            .byte	$1B
04416 0FDC                        1B            .byte	$1B
04417 0FDD                        1B            .byte	$1B
04418 0FDE                        00            .byte	0
04419                                           ! 733  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04420 0FDF                        3E            .byte	$3E
04421 0FE0                        63            .byte	$63
04422 0FE1                        38            .byte	$38
04423 0FE2                        6C            .byte	$6C
04424 0FE3                        6C            .byte	$6C
04425 0FE4                        38            .byte	$38
04426 0FE5                        CC            .byte	$CC
04427 0FE6                        78            .byte	$78
04428                                           ! 734  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04429 0FE7                        00            .byte	0
04430 0FE8                        00            .byte	0
04431 0FE9                        00            .byte	0
04432 0FEA                        00            .byte	0
04433 0FEB                        7E            .byte	$7E
04434 0FEC                        7E            .byte	$7E
04435 0FED                        7E            .byte	$7E
04436 0FEE                        00            .byte	0
04437                                           ! 735  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04438 0FEF                        18            .byte	$18
04439 0FF0                        3C            .byte	$3C
04440 0FF1                        7E            .byte	$7E
04441 0FF2                        18            .byte	$18
04442 0FF3                        7E            .byte	$7E
04443 0FF4                        3C            .byte	$3C
04444 0FF5                        18            .byte	$18
04445 0FF6                        FF            .byte	$FF
04446                                           ! 736  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04447 0FF7                        18            .byte	$18
04448 0FF8                        3C            .byte	$3C
04449 0FF9                        7E            .byte	$7E
04450 0FFA                        18            .byte	$18
04451 0FFB                        18            .byte	$18
04452 0FFC                        18            .byte	$18
04453 0FFD                        18            .byte	$18
04454 0FFE                        00            .byte	0
04455                                           ! 737  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04456 0FFF                        18            .byte	$18
04457 1000                        18            .byte	$18
04458 1001                        18            .byte	$18
04459 1002                        18            .byte	$18
04460 1003                        7E            .byte	$7E
04461 1004                        3C            .byte	$3C
04462 1005                        18            .byte	$18
04463 1006                        00            .byte	0
04464                                           ! 738  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04465 1007                        00            .byte	0
04466 1008                        18            .byte	$18
04467 1009                        0C            .byte	$C
04468 100A                        FE            .byte	$FE
04469 100B                        0C            .byte	$C
04470 100C                        18            .byte	$18
04471 100D                        00            .byte	0
04472 100E                        00            .byte	0
04473                                           ! 739  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04474 100F                        00            .byte	0
04475 1010                        30            .byte	$30
04476 1011                        60            .byte	$60
04477 1012                        FE            .byte	$FE
04478 1013                        60            .byte	$60
04479 1014                        30            .byte	$30
04480 1015                        00            .byte	0
04481 1016                        00            .byte	0
04482                                           ! 740  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04483 1017                        00            .byte	0
04484 1018                        00            .byte	0
04485 1019                        C0            .byte	$C0
04486 101A                        C0            .byte	$C0
04487 101B                        C0            .byte	$C0
04488 101C                        FE            .byte	$FE
04489 101D                        00            .byte	0
04490 101E                        00            .byte	0
04491                                           ! 741  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04492 101F                        00            .byte	0
04493 1020                        24            .byte	$24
04494 1021                        66            .byte	$66
04495 1022                        FF            .byte	$FF
04496 1023                        66            .byte	$66
04497 1024                        24            .byte	$24
04498 1025                        00            .byte	0
04499 1026                        00            .byte	0
04500                                           ! 742  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04501 1027                        00            .byte	0
04502 1028                        18            .byte	$18
04503 1029                        3C            .byte	$3C
04504 102A                        7E            .byte	$7E
04505 102B                        FF            .byte	$FF
04506 102C                        FF            .byte	$FF
04507 102D                        00            .byte	0
04508 102E                        00            .byte	0
04509                                           ! 743  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04510 102F                        00            .byte	0
04511 1030                        FF            .byte	$FF
04512 1031                        FF            .byte	$FF
04513 1032                        7E            .byte	$7E
04514 1033                        3C            .byte	$3C
04515 1034                        18            .byte	$18
04516 1035                        00            .byte	0
04517 1036                        00            .byte	0
04518                                           ! 744  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04519 1037                        00            .byte	0
04520 1038                        00            .byte	0
04521 1039                        00            .byte	0
04522 103A                        00            .byte	0
04523 103B                        00            .byte	0
04524 103C                        00            .byte	0
04525 103D                        00            .byte	0
04526 103E                        00            .byte	0
04527                                           ! 745  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04528 103F                        30            .byte	$30
04529 1040                        78            .byte	$78
04530 1041                        78            .byte	$78
04531 1042                        30            .byte	$30
04532 1043                        30            .byte	$30
04533 1044                        00            .byte	0
04534 1045                        30            .byte	$30
04535 1046                        00            .byte	0
04536                                           ! 746  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04537 1047                        6C            .byte	$6C
04538 1048                        6C            .byte	$6C
04539 1049                        6C            .byte	$6C
04540 104A                        00            .byte	0
04541 104B                        00            .byte	0
04542 104C                        00            .byte	0
04543 104D                        00            .byte	0
04544 104E                        00            .byte	0
04545                                           ! 747  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04546 104F                        6C            .byte	$6C
04547 1050                        6C            .byte	$6C
04548 1051                        FE            .byte	$FE
04549 1052                        6C            .byte	$6C
04550 1053                        FE            .byte	$FE
04551 1054                        6C            .byte	$6C
04552 1055                        6C            .byte	$6C
04553 1056                        00            .byte	0
04554                                           ! 748  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04555 1057                        30            .byte	$30
04556 1058                        7C            .byte	$7C
04557 1059                        C0            .byte	$C0
04558 105A                        78            .byte	$78
04559 105B                        0C            .byte	$C
04560 105C                        F8            .byte	$F8
04561 105D                        30            .byte	$30
04562 105E                        00            .byte	0
04563                                           ! 749  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04564 105F                        00            .byte	0
04565 1060                        C6            .byte	$C6
04566 1061                        CC            .byte	$CC
04567 1062                        18            .byte	$18
04568 1063                        30            .byte	$30
04569 1064                        66            .byte	$66
04570 1065                        C6            .byte	$C6
04571 1066                        00            .byte	0
04572                                           ! 750  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04573 1067                        38            .byte	$38
04574 1068                        6C            .byte	$6C
04575 1069                        38            .byte	$38
04576 106A                        76            .byte	$76
04577 106B                        DC            .byte	$DC
04578 106C                        CC            .byte	$CC
04579 106D                        76            .byte	$76
04580 106E                        00            .byte	0
04581                                           ! 751  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04582 106F                        60            .byte	$60
04583 1070                        60            .byte	$60
04584 1071                        C0            .byte	$C0
04585 1072                        00            .byte	0
04586 1073                        00            .byte	0
04587 1074                        00            .byte	0
04588 1075                        00            .byte	0
04589 1076                        00            .byte	0
04590                                           ! 752  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04591 1077                        18            .byte	$18
04592 1078                        30            .byte	$30
04593 1079                        60            .byte	$60
04594 107A                        60            .byte	$60
04595 107B                        60            .byte	$60
04596 107C                        30            .byte	$30
04597 107D                        18            .byte	$18
04598 107E                        00            .byte	0
04599                                           ! 753  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04600 107F                        60            .byte	$60
04601 1080                        30            .byte	$30
04602 1081                        18            .byte	$18
04603 1082                        18            .byte	$18
04604 1083                        18            .byte	$18
04605 1084                        30            .byte	$30
04606 1085                        60            .byte	$60
04607 1086                        00            .byte	0
04608                                           ! 754  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04609 1087                        00            .byte	0
04610 1088                        66            .byte	$66
04611 1089                        3C            .byte	$3C
04612 108A                        FF            .byte	$FF
04613 108B                        3C            .byte	$3C
04614 108C                        66            .byte	$66
04615 108D                        00            .byte	0
04616 108E                        00            .byte	0
04617                                           ! 755  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04618 108F                        00            .byte	0
04619 1090                        30            .byte	$30
04620 1091                        30            .byte	$30
04621 1092                        FC            .byte	$FC
04622 1093                        30            .byte	$30
04623 1094                        30            .byte	$30
04624 1095                        00            .byte	0
04625 1096                        00            .byte	0
04626                                           ! 756  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04627 1097                        00            .byte	0
04628 1098                        00            .byte	0
04629 1099                        00            .byte	0
04630 109A                        00            .byte	0
04631 109B                        00            .byte	0
04632 109C                        30            .byte	$30
04633 109D                        30            .byte	$30
04634 109E                        60            .byte	$60
04635                                           ! 757  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04636 109F                        00            .byte	0
04637 10A0                        00            .byte	0
04638 10A1                        00            .byte	0
04639 10A2                        FC            .byte	$FC
04640 10A3                        00            .byte	0
04641 10A4                        00            .byte	0
04642 10A5                        00            .byte	0
04643 10A6                        00            .byte	0
04644                                           ! 758  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04645 10A7                        00            .byte	0
04646 10A8                        00            .byte	0
04647 10A9                        00            .byte	0
04648 10AA                        00            .byte	0
04649 10AB                        00            .byte	0
04650 10AC                        30            .byte	$30
04651 10AD                        30            .byte	$30
04652 10AE                        00            .byte	0
04653                                           ! 759  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04654 10AF                        06            .byte	6
04655 10B0                        0C            .byte	$C
04656 10B1                        18            .byte	$18
04657 10B2                        30            .byte	$30
04658 10B3                        60            .byte	$60
04659 10B4                        C0            .byte	$C0
04660 10B5                        80            .byte	$80
04661 10B6                        00            .byte	0
04662                                           ! 760  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04663 10B7                        7C            .byte	$7C
04664 10B8                        C6            .byte	$C6
04665 10B9                        CE            .byte	$CE
04666 10BA                        DE            .byte	$DE
04667 10BB                        F6            .byte	$F6
04668 10BC                        E6            .byte	$E6
04669 10BD                        7C            .byte	$7C
04670 10BE                        00            .byte	0
04671                                           ! 761  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04672 10BF                        30            .byte	$30
04673 10C0                        70            .byte	$70
04674 10C1                        30            .byte	$30
04675 10C2                        30            .byte	$30
04676 10C3                        30            .byte	$30
04677 10C4                        30            .byte	$30
04678 10C5                        FC            .byte	$FC
04679 10C6                        00            .byte	0
04680                                           ! 762  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04681 10C7                        78            .byte	$78
04682 10C8                        CC            .byte	$CC
04683 10C9                        0C            .byte	$C
04684 10CA                        38            .byte	$38
04685 10CB                        60            .byte	$60
04686 10CC                        CC            .byte	$CC
04687 10CD                        FC            .byte	$FC
04688 10CE                        00            .byte	0
04689                                           ! 763  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04690 10CF                        78            .byte	$78
04691 10D0                        CC            .byte	$CC
04692 10D1                        0C            .byte	$C
04693 10D2                        38            .byte	$38
04694 10D3                        0C            .byte	$C
04695 10D4                        CC            .byte	$CC
04696 10D5                        78            .byte	$78
04697 10D6                        00            .byte	0
04698                                           ! 764  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04699 10D7                        1C            .byte	$1C
04700 10D8                        3C            .byte	$3C
04701 10D9                        6C            .byte	$6C
04702 10DA                        CC            .byte	$CC
04703 10DB                        FE            .byte	$FE
04704 10DC                        0C            .byte	$C
04705 10DD                        1E            .byte	$1E
04706 10DE                        00            .byte	0
04707                                           ! 765  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04708 10DF                        FC            .byte	$FC
04709 10E0                        C0            .byte	$C0
04710 10E1                        F8            .byte	$F8
04711 10E2                        0C            .byte	$C
04712 10E3                        0C            .byte	$C
04713 10E4                        CC            .byte	$CC
04714 10E5                        78            .byte	$78
04715 10E6                        00            .byte	0
04716                                           ! 766  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78
04717 10E7                        38            .byte	$38
04718 10E8                        60            .byte	$60
04719 10E9                        C0            .byte	$C0
04720 10EA                        F8            .byte	$F8
04721 10EB                        CC            .byte	$CC
04722 10EC                        CC            .byte	$CC
04723                                           ! 766 , 0x00,
04724 10ED                        78            .byte	$78
04725 10EE                        00            .byte	0
04726                                           ! 767  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
04727 10EF                        FC            .byte	$FC
04728 10F0                        CC            .byte	$CC
04729 10F1                        0C            .byte	$C
04730 10F2                        18            .byte	$18
04731 10F3                        30            .byte	$30
04732 10F4                        30            .byte	$30
04733 10F5                        30            .byte	$30
04734 10F6                        00            .byte	0
04735                                           ! 768  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
04736 10F7                        78            .byte	$78
04737 10F8                        CC            .byte	$CC
04738 10F9                        CC            .byte	$CC
04739 10FA                        78            .byte	$78
04740 10FB                        CC            .byte	$CC
04741 10FC                        CC            .byte	$CC
04742 10FD                        78            .byte	$78
04743 10FE                        00            .byte	0
04744                                           ! 769  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
04745 10FF                        78            .byte	$78
04746 1100                        CC            .byte	$CC
04747 1101                        CC            .byte	$CC
04748 1102                        7C            .byte	$7C
04749 1103                        0C            .byte	$C
04750 1104                        18            .byte	$18
04751 1105                        70            .byte	$70
04752 1106                        00            .byte	0
04753                                           ! 770  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
04754 1107                        00            .byte	0
04755 1108                        30            .byte	$30
04756 1109                        30            .byte	$30
04757 110A                        00            .byte	0
04758 110B                        00            .byte	0
04759 110C                        30            .byte	$30
04760 110D                        30            .byte	$30
04761 110E                        00            .byte	0
04762                                           ! 771  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
04763 110F                        00            .byte	0
04764 1110                        30            .byte	$30
04765 1111                        30            .byte	$30
04766 1112                        00            .byte	0
04767 1113                        00            .byte	0
04768 1114                        30            .byte	$30
04769 1115                        30            .byte	$30
04770 1116                        60            .byte	$60
04771                                           ! 772  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
04772 1117                        18            .byte	$18
04773 1118                        30            .byte	$30
04774 1119                        60            .byte	$60
04775 111A                        C0            .byte	$C0
04776 111B                        60            .byte	$60
04777 111C                        30            .byte	$30
04778 111D                        18            .byte	$18
04779 111E                        00            .byte	0
04780                                           ! 773  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
04781 111F                        00            .byte	0
04782 1120                        00            .byte	0
04783 1121                        FC            .byte	$FC
04784 1122                        00            .byte	0
04785 1123                        00            .byte	0
04786 1124                        FC            .byte	$FC
04787 1125                        00            .byte	0
04788 1126                        00            .byte	0
04789                                           ! 774  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
04790 1127                        60            .byte	$60
04791 1128                        30            .byte	$30
04792 1129                        18            .byte	$18
04793 112A                        0C            .byte	$C
04794 112B                        18            .byte	$18
04795 112C                        30            .byte	$30
04796 112D                        60            .byte	$60
04797 112E                        00            .byte	0
04798                                           ! 775  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
04799 112F                        78            .byte	$78
04800 1130                        CC            .byte	$CC
04801 1131                        0C            .byte	$C
04802 1132                        18            .byte	$18
04803 1133                        30            .byte	$30
04804 1134                        00            .byte	0
04805 1135                        30            .byte	$30
04806 1136                        00            .byte	0
04807                                           ! 776  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
04808 1137                        7C            .byte	$7C
04809 1138                        C6            .byte	$C6
04810 1139                        DE            .byte	$DE
04811 113A                        DE            .byte	$DE
04812 113B                        DE            .byte	$DE
04813 113C                        C0            .byte	$C0
04814 113D                        78            .byte	$78
04815 113E                        00            .byte	0
04816                                           ! 777  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
04817 113F                        30            .byte	$30
04818 1140                        78            .byte	$78
04819 1141                        CC            .byte	$CC
04820 1142                        CC            .byte	$CC
04821 1143                        FC            .byte	$FC
04822 1144                        CC            .byte	$CC
04823 1145                        CC            .byte	$CC
04824 1146                        00            .byte	0
04825                                           ! 778  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
04826 1147                        FC            .byte	$FC
04827 1148                        66            .byte	$66
04828 1149                        66            .byte	$66
04829 114A                        7C            .byte	$7C
04830 114B                        66            .byte	$66
04831 114C                        66            .byte	$66
04832 114D                        FC            .byte	$FC
04833 114E                        00            .byte	0
04834                                           ! 779  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
04835 114F                        3C            .byte	$3C
04836 1150                        66            .byte	$66
04837 1151                        C0            .byte	$C0
04838 1152                        C0            .byte	$C0
04839 1153                        C0            .byte	$C0
04840 1154                        66            .byte	$66
04841 1155                        3C            .byte	$3C
04842 1156                        00            .byte	0
04843                                           ! 780  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
04844 1157                        F8            .byte	$F8
04845 1158                        6C            .byte	$6C
04846 1159                        66            .byte	$66
04847 115A                        66            .byte	$66
04848 115B                        66            .byte	$66
04849 115C                        6C            .byte	$6C
04850 115D                        F8            .byte	$F8
04851 115E                        00            .byte	0
04852                                           ! 781  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
04853 115F                        FE            .byte	$FE
04854 1160                        62            .byte	$62
04855 1161                        68            .byte	$68
04856 1162                        78            .byte	$78
04857 1163                        68            .byte	$68
04858 1164                        62            .byte	$62
04859 1165                        FE            .byte	$FE
04860 1166                        00            .byte	0
04861                                           ! 782  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
04862 1167                        FE            .byte	$FE
04863 1168                        62            .byte	$62
04864 1169                        68            .byte	$68
04865 116A                        78            .byte	$78
04866 116B                        68            .byte	$68
04867 116C                        60            .byte	$60
04868 116D                        F0            .byte	$F0
04869 116E                        00            .byte	0
04870                                           ! 783  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
04871 116F                        3C            .byte	$3C
04872 1170                        66            .byte	$66
04873 1171                        C0            .byte	$C0
04874 1172                        C0            .byte	$C0
04875 1173                        CE            .byte	$CE
04876 1174                        66            .byte	$66
04877 1175                        3E            .byte	$3E
04878 1176                        00            .byte	0
04879                                           ! 784  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
04880 1177                        CC            .byte	$CC
04881 1178                        CC            .byte	$CC
04882 1179                        CC            .byte	$CC
04883 117A                        FC            .byte	$FC
04884 117B                        CC            .byte	$CC
04885 117C                        CC            .byte	$CC
04886 117D                        CC            .byte	$CC
04887 117E                        00            .byte	0
04888                                           ! 785  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04889 117F                        78            .byte	$78
04890 1180                        30            .byte	$30
04891 1181                        30            .byte	$30
04892 1182                        30            .byte	$30
04893 1183                        30            .byte	$30
04894 1184                        30            .byte	$30
04895 1185                        78            .byte	$78
04896 1186                        00            .byte	0
04897                                           ! 786  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
04898 1187                        1E            .byte	$1E
04899 1188                        0C            .byte	$C
04900 1189                        0C            .byte	$C
04901 118A                        0C            .byte	$C
04902 118B                        CC            .byte	$CC
04903 118C                        CC            .byte	$CC
04904 118D                        78            .byte	$78
04905 118E                        00            .byte	0
04906                                           ! 787  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
04907 118F                        E6            .byte	$E6
04908 1190                        66            .byte	$66
04909 1191                        6C            .byte	$6C
04910 1192                        78            .byte	$78
04911 1193                        6C            .byte	$6C
04912 1194                        66            .byte	$66
04913 1195                        E6            .byte	$E6
04914 1196                        00            .byte	0
04915                                           ! 788  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
04916 1197                        F0            .byte	$F0
04917 1198                        60            .byte	$60
04918 1199                        60            .byte	$60
04919 119A                        60            .byte	$60
04920 119B                        62            .byte	$62
04921 119C                        66            .byte	$66
04922 119D                        FE            .byte	$FE
04923 119E                        00            .byte	0
04924                                           ! 789  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
04925 119F                        C6            .byte	$C6
04926 11A0                        EE            .byte	$EE
04927 11A1                        FE            .byte	$FE
04928 11A2                        FE            .byte	$FE
04929 11A3                        D6            .byte	$D6
04930 11A4                        C6            .byte	$C6
04931 11A5                        C6            .byte	$C6
04932 11A6                        00            .byte	0
04933                                           ! 790  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
04934 11A7                        C6            .byte	$C6
04935 11A8                        E6            .byte	$E6
04936 11A9                        F6            .byte	$F6
04937 11AA                        DE            .byte	$DE
04938 11AB                        CE            .byte	$CE
04939 11AC                        C6            .byte	$C6
04940 11AD                        C6            .byte	$C6
04941 11AE                        00            .byte	0
04942                                           ! 791  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
04943 11AF                        38            .byte	$38
04944 11B0                        6C            .byte	$6C
04945 11B1                        C6            .byte	$C6
04946 11B2                        C6            .byte	$C6
04947 11B3                        C6            .byte	$C6
04948 11B4                        6C            .byte	$6C
04949 11B5                        38            .byte	$38
04950 11B6                        00            .byte	0
04951                                           ! 792  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
04952 11B7                        FC            .byte	$FC
04953 11B8                        66            .byte	$66
04954 11B9                        66            .byte	$66
04955 11BA                        7C            .byte	$7C
04956 11BB                        60            .byte	$60
04957 11BC                        60            .byte	$60
04958 11BD                        F0            .byte	$F0
04959 11BE                        00            .byte	0
04960                                           ! 793  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
04961 11BF                        78            .byte	$78
04962 11C0                        CC            .byte	$CC
04963 11C1                        CC            .byte	$CC
04964 11C2                        CC            .byte	$CC
04965 11C3                        DC            .byte	$DC
04966 11C4                        78            .byte	$78
04967 11C5                        1C            .byte	$1C
04968 11C6                        00            .byte	0
04969                                           ! 794  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
04970 11C7                        FC            .byte	$FC
04971 11C8                        66            .byte	$66
04972 11C9                        66            .byte	$66
04973 11CA                        7C            .byte	$7C
04974 11CB                        6C            .byte	$6C
04975 11CC                        66            .byte	$66
04976 11CD                        E6            .byte	$E6
04977 11CE                        00            .byte	0
04978                                           ! 795  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
04979 11CF                        78            .byte	$78
04980 11D0                        CC            .byte	$CC
04981 11D1                        E0            .byte	$E0
04982 11D2                        70            .byte	$70
04983 11D3                        1C            .byte	$1C
04984 11D4                        CC            .byte	$CC
04985 11D5                        78            .byte	$78
04986 11D6                        00            .byte	0
04987                                           ! 796  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04988 11D7                        FC            .byte	$FC
04989 11D8                        B4            .byte	$B4
04990 11D9                        30            .byte	$30
04991 11DA                        30            .byte	$30
04992 11DB                        30            .byte	$30
04993 11DC                        30            .byte	$30
04994 11DD                        78            .byte	$78
04995 11DE                        00            .byte	0
04996                                           ! 797  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
04997 11DF                        CC            .byte	$CC
04998 11E0                        CC            .byte	$CC
04999 11E1                        CC            .byte	$CC
05000 11E2                        CC            .byte	$CC
05001 11E3                        CC            .byte	$CC
05002 11E4                        CC            .byte	$CC
05003 11E5                        FC            .byte	$FC
05004 11E6                        00            .byte	0
05005                                           ! 798  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05006 11E7                        CC            .byte	$CC
05007 11E8                        CC            .byte	$CC
05008 11E9                        CC            .byte	$CC
05009 11EA                        CC            .byte	$CC
05010 11EB                        CC            .byte	$CC
05011 11EC                        78            .byte	$78
05012 11ED                        30            .byte	$30
05013 11EE                        00            .byte	0
05014                                           ! 799  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05015 11EF                        C6            .byte	$C6
05016 11F0                        C6            .byte	$C6
05017 11F1                        C6            .byte	$C6
05018 11F2                        D6            .byte	$D6
05019 11F3                        FE            .byte	$FE
05020 11F4                        EE            .byte	$EE
05021 11F5                        C6            .byte	$C6
05022 11F6                        00            .byte	0
05023                                           ! 800  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05024 11F7                        C6            .byte	$C6
05025 11F8                        C6            .byte	$C6
05026 11F9                        6C            .byte	$6C
05027 11FA                        38            .byte	$38
05028 11FB                        38            .byte	$38
05029 11FC                        6C            .byte	$6C
05030 11FD                        C6            .byte	$C6
05031 11FE                        00            .byte	0
05032                                           ! 801  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05033 11FF                        CC            .byte	$CC
05034 1200                        CC            .byte	$CC
05035 1201                        CC            .byte	$CC
05036 1202                        78            .byte	$78
05037 1203                        30            .byte	$30
05038 1204                        30            .byte	$30
05039 1205                        78            .byte	$78
05040 1206                        00            .byte	0
05041                                           ! 802  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05042 1207                        FE            .byte	$FE
05043 1208                        C6            .byte	$C6
05044 1209                        8C            .byte	$8C
05045 120A                        18            .byte	$18
05046 120B                        32            .byte	$32
05047 120C                        66            .byte	$66
05048 120D                        FE            .byte	$FE
05049 120E                        00            .byte	0
05050                                           ! 803  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05051 120F                        78            .byte	$78
05052 1210                        60            .byte	$60
05053 1211                        60            .byte	$60
05054 1212                        60            .byte	$60
05055 1213                        60            .byte	$60
05056 1214                        60            .byte	$60
05057 1215                        78            .byte	$78
05058 1216                        00            .byte	0
05059                                           ! 804  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05060 1217                        C0            .byte	$C0
05061 1218                        60            .byte	$60
05062 1219                        30            .byte	$30
05063 121A                        18            .byte	$18
05064 121B                        0C            .byte	$C
05065 121C                        06            .byte	6
05066 121D                        02            .byte	2
05067 121E                        00            .byte	0
05068                                           ! 805  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05069 121F                        78            .byte	$78
05070 1220                        18            .byte	$18
05071 1221                        18            .byte	$18
05072 1222                        18            .byte	$18
05073 1223                        18            .byte	$18
05074 1224                        18            .byte	$18
05075 1225                        78            .byte	$78
05076 1226                        00            .byte	0
05077                                           ! 806  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05078 1227                        10            .byte	$10
05079 1228                        38            .byte	$38
05080 1229                        6C            .byte	$6C
05081 122A                        C6            .byte	$C6
05082 122B                        00            .byte	0
05083 122C                        00            .byte	0
05084 122D                        00            .byte	0
05085 122E                        00            .byte	0
05086                                           ! 807  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05087 122F                        00            .byte	0
05088 1230                        00            .byte	0
05089 1231                        00            .byte	0
05090 1232                        00            .byte	0
05091 1233                        00            .byte	0
05092 1234                        00            .byte	0
05093 1235                        00            .byte	0
05094 1236                        FF            .byte	$FF
05095                                           ! 808  0x30, 0x30, 0x18, 0x00, 0x00, 
05096 1237                        30            .byte	$30
05097 1238                        30            .byte	$30
05098 1239                        18            .byte	$18
05099 123A                        00            .byte	0
05100 123B                        00            .byte	0
05101                                           ! 808 0x00, 0x00, 0x00,
05102 123C                        00            .byte	0
05103 123D                        00            .byte	0
05104 123E                        00            .byte	0
05105                                           ! 809  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05106 123F                        00            .byte	0
05107 1240                        00            .byte	0
05108 1241                        78            .byte	$78
05109 1242                        0C            .byte	$C
05110 1243                        7C            .byte	$7C
05111 1244                        CC            .byte	$CC
05112 1245                        76            .byte	$76
05113 1246                        00            .byte	0
05114                                           ! 810  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05115 1247                        E0            .byte	$E0
05116 1248                        60            .byte	$60
05117 1249                        60            .byte	$60
05118 124A                        7C            .byte	$7C
05119 124B                        66            .byte	$66
05120 124C                        66            .byte	$66
05121 124D                        DC            .byte	$DC
05122 124E                        00            .byte	0
05123                                           ! 811  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05124 124F                        00            .byte	0
05125 1250                        00            .byte	0
05126 1251                        78            .byte	$78
05127 1252                        CC            .byte	$CC
05128 1253                        C0            .byte	$C0
05129 1254                        CC            .byte	$CC
05130 1255                        78            .byte	$78
05131 1256                        00            .byte	0
05132                                           ! 812  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05133 1257                        1C            .byte	$1C
05134 1258                        0C            .byte	$C
05135 1259                        0C            .byte	$C
05136 125A                        7C            .byte	$7C
05137 125B                        CC            .byte	$CC
05138 125C                        CC            .byte	$CC
05139 125D                        76            .byte	$76
05140 125E                        00            .byte	0
05141                                           ! 813  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05142 125F                        00            .byte	0
05143 1260                        00            .byte	0
05144 1261                        78            .byte	$78
05145 1262                        CC            .byte	$CC
05146 1263                        FC            .byte	$FC
05147 1264                        C0            .byte	$C0
05148 1265                        78            .byte	$78
05149 1266                        00            .byte	0
05150                                           ! 814  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05151 1267                        38            .byte	$38
05152 1268                        6C            .byte	$6C
05153 1269                        60            .byte	$60
05154 126A                        F0            .byte	$F0
05155 126B                        60            .byte	$60
05156 126C                        60            .byte	$60
05157 126D                        F0            .byte	$F0
05158 126E                        00            .byte	0
05159                                           ! 815  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05160 126F                        00            .byte	0
05161 1270                        00            .byte	0
05162 1271                        76            .byte	$76
05163 1272                        CC            .byte	$CC
05164 1273                        CC            .byte	$CC
05165 1274                        7C            .byte	$7C
05166 1275                        0C            .byte	$C
05167 1276                        F8            .byte	$F8
05168                                           ! 816  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05169 1277                        E0            .byte	$E0
05170 1278                        60            .byte	$60
05171 1279                        6C            .byte	$6C
05172 127A                        76            .byte	$76
05173 127B                        66            .byte	$66
05174 127C                        66            .byte	$66
05175 127D                        E6            .byte	$E6
05176 127E                        00            .byte	0
05177                                           ! 817  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05178 127F                        30            .byte	$30
05179 1280                        00            .byte	0
05180 1281                        70            .byte	$70
05181 1282                        30            .byte	$30
05182 1283                        30            .byte	$30
05183 1284                        30            .byte	$30
05184 1285                        78            .byte	$78
05185 1286                        00            .byte	0
05186                                           ! 818  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05187 1287                        0C            .byte	$C
05188 1288                        00            .byte	0
05189 1289                        0C            .byte	$C
05190 128A                        0C            .byte	$C
05191 128B                        0C            .byte	$C
05192 128C                        CC            .byte	$CC
05193 128D                        CC            .byte	$CC
05194 128E                        78            .byte	$78
05195                                           ! 819  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05196 128F                        E0            .byte	$E0
05197 1290                        60            .byte	$60
05198 1291                        66            .byte	$66
05199 1292                        6C            .byte	$6C
05200 1293                        78            .byte	$78
05201 1294                        6C            .byte	$6C
05202 1295                        E6            .byte	$E6
05203 1296                        00            .byte	0
05204                                           ! 820  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05205 1297                        70            .byte	$70
05206 1298                        30            .byte	$30
05207 1299                        30            .byte	$30
05208 129A                        30            .byte	$30
05209 129B                        30            .byte	$30
05210 129C                        30            .byte	$30
05211 129D                        78            .byte	$78
05212 129E                        00            .byte	0
05213                                           ! 821  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05214 129F                        00            .byte	0
05215 12A0                        00            .byte	0
05216 12A1                        CC            .byte	$CC
05217 12A2                        FE            .byte	$FE
05218 12A3                        FE            .byte	$FE
05219 12A4                        D6            .byte	$D6
05220 12A5                        C6            .byte	$C6
05221 12A6                        00            .byte	0
05222                                           ! 822  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05223 12A7                        00            .byte	0
05224 12A8                        00            .byte	0
05225 12A9                        F8            .byte	$F8
05226 12AA                        CC            .byte	$CC
05227 12AB                        CC            .byte	$CC
05228 12AC                        CC            .byte	$CC
05229 12AD                        CC            .byte	$CC
05230 12AE                        00            .byte	0
05231                                           ! 823  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05232 12AF                        00            .byte	0
05233 12B0                        00            .byte	0
05234 12B1                        78            .byte	$78
05235 12B2                        CC            .byte	$CC
05236 12B3                        CC            .byte	$CC
05237 12B4                        CC            .byte	$CC
05238 12B5                        78            .byte	$78
05239 12B6                        00            .byte	0
05240                                           ! 824  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05241 12B7                        00            .byte	0
05242 12B8                        00            .byte	0
05243 12B9                        DC            .byte	$DC
05244 12BA                        66            .byte	$66
05245 12BB                        66            .byte	$66
05246 12BC                        7C            .byte	$7C
05247 12BD                        60            .byte	$60
05248 12BE                        F0            .byte	$F0
05249                                           ! 825  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05250 12BF                        00            .byte	0
05251 12C0                        00            .byte	0
05252 12C1                        76            .byte	$76
05253 12C2                        CC            .byte	$CC
05254 12C3                        CC            .byte	$CC
05255 12C4                        7C            .byte	$7C
05256 12C5                        0C            .byte	$C
05257 12C6                        1E            .byte	$1E
05258                                           ! 826  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05259 12C7                        00            .byte	0
05260 12C8                        00            .byte	0
05261 12C9                        DC            .byte	$DC
05262 12CA                        76            .byte	$76
05263 12CB                        66            .byte	$66
05264 12CC                        60            .byte	$60
05265 12CD                        F0            .byte	$F0
05266 12CE                        00            .byte	0
05267                                           ! 827  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05268 12CF                        00            .byte	0
05269 12D0                        00            .byte	0
05270 12D1                        7C            .byte	$7C
05271 12D2                        C0            .byte	$C0
05272 12D3                        78            .byte	$78
05273 12D4                        0C            .byte	$C
05274 12D5                        F8            .byte	$F8
05275 12D6                        00            .byte	0
05276                                           ! 828  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05277 12D7                        10            .byte	$10
05278 12D8                        30            .byte	$30
05279 12D9                        7C            .byte	$7C
05280 12DA                        30            .byte	$30
05281 12DB                        30            .byte	$30
05282 12DC                        34            .byte	$34
05283 12DD                        18            .byte	$18
05284 12DE                        00            .byte	0
05285                                           ! 829  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05286 12DF                        00            .byte	0
05287 12E0                        00            .byte	0
05288 12E1                        CC            .byte	$CC
05289 12E2                        CC            .byte	$CC
05290 12E3                        CC            .byte	$CC
05291 12E4                        CC            .byte	$CC
05292 12E5                        76            .byte	$76
05293 12E6                        00            .byte	0
05294                                           ! 830  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05295 12E7                        00            .byte	0
05296 12E8                        00            .byte	0
05297 12E9                        CC            .byte	$CC
05298 12EA                        CC            .byte	$CC
05299 12EB                        CC            .byte	$CC
05300 12EC                        78            .byte	$78
05301 12ED                        30            .byte	$30
05302 12EE                        00            .byte	0
05303                                           ! 831  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05304 12EF                        00            .byte	0
05305 12F0                        00            .byte	0
05306 12F1                        C6            .byte	$C6
05307 12F2                        D6            .byte	$D6
05308 12F3                        FE            .byte	$FE
05309 12F4                        FE            .byte	$FE
05310 12F5                        6C            .byte	$6C
05311 12F6                        00            .byte	0
05312                                           ! 832  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05313 12F7                        00            .byte	0
05314 12F8                        00            .byte	0
05315 12F9                        C6            .byte	$C6
05316 12FA                        6C            .byte	$6C
05317 12FB                        38            .byte	$38
05318 12FC                        6C            .byte	$6C
05319 12FD                        C6            .byte	$C6
05320 12FE                        00            .byte	0
05321                                           ! 833  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05322 12FF                        00            .byte	0
05323 1300                        00            .byte	0
05324 1301                        CC            .byte	$CC
05325 1302                        CC            .byte	$CC
05326 1303                        CC            .byte	$CC
05327 1304                        7C            .byte	$7C
05328 1305                        0C            .byte	$C
05329 1306                        F8            .byte	$F8
05330                                           ! 834  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05331 1307                        00            .byte	0
05332 1308                        00            .byte	0
05333 1309                        FC            .byte	$FC
05334 130A                        98            .byte	$98
05335 130B                        30            .byte	$30
05336 130C                        64            .byte	$64
05337 130D                        FC            .byte	$FC
05338 130E                        00            .byte	0
05339                                           ! 835  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05340 130F                        1C            .byte	$1C
05341 1310                        30            .byte	$30
05342 1311                        30            .byte	$30
05343 1312                        E0            .byte	$E0
05344 1313                        30            .byte	$30
05345 1314                        30            .byte	$30
05346 1315                        1C            .byte	$1C
05347 1316                        00            .byte	0
05348                                           ! 836  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05349 1317                        18            .byte	$18
05350 1318                        18            .byte	$18
05351 1319                        18            .byte	$18
05352 131A                        00            .byte	0
05353 131B                        18            .byte	$18
05354 131C                        18            .byte	$18
05355 131D                        18            .byte	$18
05356 131E                        00            .byte	0
05357                                           ! 837  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05358 131F                        E0            .byte	$E0
05359 1320                        30            .byte	$30
05360 1321                        30            .byte	$30
05361 1322                        1C            .byte	$1C
05362 1323                        30            .byte	$30
05363 1324                        30            .byte	$30
05364 1325                        E0            .byte	$E0
05365 1326                        00            .byte	0
05366                                           ! 838  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05367 1327                        76            .byte	$76
05368 1328                        DC            .byte	$DC
05369 1329                        00            .byte	0
05370 132A                        00            .byte	0
05371 132B                        00            .byte	0
05372 132C                        00            .byte	0
05373 132D                        00            .byte	0
05374 132E                        00            .byte	0
05375                                           ! 839  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05376 132F                        00            .byte	0
05377 1330                        10            .byte	$10
05378 1331                        38            .byte	$38
05379 1332                        6C            .byte	$6C
05380 1333                        C6            .byte	$C6
05381 1334                        C6            .byte	$C6
05382 1335                        FE            .byte	$FE
05383 1336                        00            .byte	0
05384                                           ! 840  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05385 1337                        78            .byte	$78
05386 1338                        CC            .byte	$CC
05387 1339                        C0            .byte	$C0
05388 133A                        CC            .byte	$CC
05389 133B                        78            .byte	$78
05390 133C                        18            .byte	$18
05391 133D                        0C            .byte	$C
05392 133E                        78            .byte	$78
05393                                           ! 841  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05394 133F                        00            .byte	0
05395 1340                        CC            .byte	$CC
05396 1341                        00            .byte	0
05397 1342                        CC            .byte	$CC
05398 1343                        CC            .byte	$CC
05399 1344                        CC            .byte	$CC
05400 1345                        7E            .byte	$7E
05401 1346                        00            .byte	0
05402                                           ! 842  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05403 1347                        1C            .byte	$1C
05404 1348                        00            .byte	0
05405 1349                        78            .byte	$78
05406 134A                        CC            .byte	$CC
05407 134B                        FC            .byte	$FC
05408 134C                        C0            .byte	$C0
05409 134D                        78            .byte	$78
05410 134E                        00            .byte	0
05411                                           ! 843  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05412 134F                        7E            .byte	$7E
05413 1350                        C3            .byte	$C3
05414 1351                        3C            .byte	$3C
05415 1352                        06            .byte	6
05416 1353                        3E            .byte	$3E
05417 1354                        66            .byte	$66
05418 1355                        3F            .byte	$3F
05419 1356                        00            .byte	0
05420                                           ! 844  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05421 1357                        CC            .byte	$CC
05422 1358                        00            .byte	0
05423 1359                        78            .byte	$78
05424 135A                        0C            .byte	$C
05425 135B                        7C            .byte	$7C
05426 135C                        CC            .byte	$CC
05427 135D                        7E            .byte	$7E
05428 135E                        00            .byte	0
05429                                           ! 845  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05430 135F                        E0            .byte	$E0
05431 1360                        00            .byte	0
05432 1361                        78            .byte	$78
05433 1362                        0C            .byte	$C
05434 1363                        7C            .byte	$7C
05435 1364                        CC            .byte	$CC
05436 1365                        7E            .byte	$7E
05437 1366                        00            .byte	0
05438                                           ! 846  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05439 1367                        30            .byte	$30
05440 1368                        30            .byte	$30
05441 1369                        78            .byte	$78
05442 136A                        0C            .byte	$C
05443 136B                        7C            .byte	$7C
05444 136C                        CC            .byte	$CC
05445 136D                        7E            .byte	$7E
05446 136E                        00            .byte	0
05447                                           ! 847  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05448 136F                        00            .byte	0
05449 1370                        00            .byte	0
05450 1371                        78            .byte	$78
05451 1372                        C0            .byte	$C0
05452 1373                        C0            .byte	$C0
05453 1374                        78            .byte	$78
05454 1375                        0C            .byte	$C
05455 1376                        38            .byte	$38
05456                                           ! 848  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05457 1377                        7E            .byte	$7E
05458 1378                        C3            .byte	$C3
05459 1379                        3C            .byte	$3C
05460 137A                        66            .byte	$66
05461 137B                        7E            .byte	$7E
05462 137C                        60            .byte	$60
05463 137D                        3C            .byte	$3C
05464 137E                        00            .byte	0
05465                                           ! 849  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05466 137F                        CC            .byte	$CC
05467 1380                        00            .byte	0
05468 1381                        78            .byte	$78
05469 1382                        CC            .byte	$CC
05470 1383                        FC            .byte	$FC
05471 1384                        C0            .byte	$C0
05472 1385                        78            .byte	$78
05473 1386                        00            .byte	0
05474                                           ! 850  0xe0, 0x00, 0x78, 0x
05475 1387                        E0            .byte	$E0
05476 1388                        00            .byte	0
05477 1389                        78            .byte	$78
05478                                           ! 850 cc, 0xfc, 0xc0, 0x78, 0x00,
05479 138A                        CC            .byte	$CC
05480 138B                        FC            .byte	$FC
05481 138C                        C0            .byte	$C0
05482 138D                        78            .byte	$78
05483 138E                        00            .byte	0
05484                                           ! 851  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05485 138F                        CC            .byte	$CC
05486 1390                        00            .byte	0
05487 1391                        70            .byte	$70
05488 1392                        30            .byte	$30
05489 1393                        30            .byte	$30
05490 1394                        30            .byte	$30
05491 1395                        78            .byte	$78
05492 1396                        00            .byte	0
05493                                           ! 852  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05494 1397                        7C            .byte	$7C
05495 1398                        C6            .byte	$C6
05496 1399                        38            .byte	$38
05497 139A                        18            .byte	$18
05498 139B                        18            .byte	$18
05499 139C                        18            .byte	$18
05500 139D                        3C            .byte	$3C
05501 139E                        00            .byte	0
05502                                           ! 853  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05503 139F                        E0            .byte	$E0
05504 13A0                        00            .byte	0
05505 13A1                        70            .byte	$70
05506 13A2                        30            .byte	$30
05507 13A3                        30            .byte	$30
05508 13A4                        30            .byte	$30
05509 13A5                        78            .byte	$78
05510 13A6                        00            .byte	0
05511                                           ! 854  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05512 13A7                        C6            .byte	$C6
05513 13A8                        38            .byte	$38
05514 13A9                        6C            .byte	$6C
05515 13AA                        C6            .byte	$C6
05516 13AB                        FE            .byte	$FE
05517 13AC                        C6            .byte	$C6
05518 13AD                        C6            .byte	$C6
05519 13AE                        00            .byte	0
05520                                           ! 855  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05521 13AF                        30            .byte	$30
05522 13B0                        30            .byte	$30
05523 13B1                        00            .byte	0
05524 13B2                        78            .byte	$78
05525 13B3                        CC            .byte	$CC
05526 13B4                        FC            .byte	$FC
05527 13B5                        CC            .byte	$CC
05528 13B6                        00            .byte	0
05529                                           ! 856  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05530 13B7                        1C            .byte	$1C
05531 13B8                        00            .byte	0
05532 13B9                        FC            .byte	$FC
05533 13BA                        60            .byte	$60
05534 13BB                        78            .byte	$78
05535 13BC                        60            .byte	$60
05536 13BD                        FC            .byte	$FC
05537 13BE                        00            .byte	0
05538                                           ! 857  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05539 13BF                        00            .byte	0
05540 13C0                        00            .byte	0
05541 13C1                        7F            .byte	$7F
05542 13C2                        0C            .byte	$C
05543 13C3                        7F            .byte	$7F
05544 13C4                        CC            .byte	$CC
05545 13C5                        7F            .byte	$7F
05546 13C6                        00            .byte	0
05547                                           ! 858  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05548 13C7                        3E            .byte	$3E
05549 13C8                        6C            .byte	$6C
05550 13C9                        CC            .byte	$CC
05551 13CA                        FE            .byte	$FE
05552 13CB                        CC            .byte	$CC
05553 13CC                        CC            .byte	$CC
05554 13CD                        CE            .byte	$CE
05555 13CE                        00            .byte	0
05556                                           ! 859  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05557 13CF                        78            .byte	$78
05558 13D0                        CC            .byte	$CC
05559 13D1                        00            .byte	0
05560 13D2                        78            .byte	$78
05561 13D3                        CC            .byte	$CC
05562 13D4                        CC            .byte	$CC
05563 13D5                        78            .byte	$78
05564 13D6                        00            .byte	0
05565                                           ! 860  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05566 13D7                        00            .byte	0
05567 13D8                        CC            .byte	$CC
05568 13D9                        00            .byte	0
05569 13DA                        78            .byte	$78
05570 13DB                        CC            .byte	$CC
05571 13DC                        CC            .byte	$CC
05572 13DD                        78            .byte	$78
05573 13DE                        00            .byte	0
05574                                           ! 861  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05575 13DF                        00            .byte	0
05576 13E0                        E0            .byte	$E0
05577 13E1                        00            .byte	0
05578 13E2                        78            .byte	$78
05579 13E3                        CC            .byte	$CC
05580 13E4                        CC            .byte	$CC
05581 13E5                        78            .byte	$78
05582 13E6                        00            .byte	0
05583                                           ! 862  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05584 13E7                        78            .byte	$78
05585 13E8                        CC            .byte	$CC
05586 13E9                        00            .byte	0
05587 13EA                        CC            .byte	$CC
05588 13EB                        CC            .byte	$CC
05589 13EC                        CC            .byte	$CC
05590 13ED                        7E            .byte	$7E
05591 13EE                        00            .byte	0
05592                                           ! 863  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05593 13EF                        00            .byte	0
05594 13F0                        E0            .byte	$E0
05595 13F1                        00            .byte	0
05596 13F2                        CC            .byte	$CC
05597 13F3                        CC            .byte	$CC
05598 13F4                        CC            .byte	$CC
05599 13F5                        7E            .byte	$7E
05600 13F6                        00            .byte	0
05601                                           ! 864  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05602 13F7                        00            .byte	0
05603 13F8                        CC            .byte	$CC
05604 13F9                        00            .byte	0
05605 13FA                        CC            .byte	$CC
05606 13FB                        CC            .byte	$CC
05607 13FC                        7C            .byte	$7C
05608 13FD                        0C            .byte	$C
05609 13FE                        F8            .byte	$F8
05610                                           ! 865  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05611 13FF                        C3            .byte	$C3
05612 1400                        18            .byte	$18
05613 1401                        3C            .byte	$3C
05614 1402                        66            .byte	$66
05615 1403                        66            .byte	$66
05616 1404                        3C            .byte	$3C
05617 1405                        18            .byte	$18
05618 1406                        00            .byte	0
05619                                           ! 866  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05620 1407                        CC            .byte	$CC
05621 1408                        00            .byte	0
05622 1409                        CC            .byte	$CC
05623 140A                        CC            .byte	$CC
05624 140B                        CC            .byte	$CC
05625 140C                        CC            .byte	$CC
05626 140D                        78            .byte	$78
05627 140E                        00            .byte	0
05628                                           ! 867  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05629 140F                        18            .byte	$18
05630 1410                        18            .byte	$18
05631 1411                        7E            .byte	$7E
05632 1412                        C0            .byte	$C0
05633 1413                        C0            .byte	$C0
05634 1414                        7E            .byte	$7E
05635 1415                        18            .byte	$18
05636 1416                        18            .byte	$18
05637                                           ! 868  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05638 1417                        38            .byte	$38
05639 1418                        6C            .byte	$6C
05640 1419                        64            .byte	$64
05641 141A                        F0            .byte	$F0
05642 141B                        60            .byte	$60
05643 141C                        E6            .byte	$E6
05644 141D                        FC            .byte	$FC
05645 141E                        00            .byte	0
05646                                           ! 869  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05647 141F                        CC            .byte	$CC
05648 1420                        CC            .byte	$CC
05649 1421                        78            .byte	$78
05650 1422                        FC            .byte	$FC
05651 1423                        30            .byte	$30
05652 1424                        FC            .byte	$FC
05653 1425                        30            .byte	$30
05654 1426                        30            .byte	$30
05655                                           ! 870  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05656 1427                        F8            .byte	$F8
05657 1428                        CC            .byte	$CC
05658 1429                        CC            .byte	$CC
05659 142A                        FA            .byte	$FA
05660 142B                        C6            .byte	$C6
05661 142C                        CF            .byte	$CF
05662 142D                        C6            .byte	$C6
05663 142E                        C7            .byte	$C7
05664                                           ! 871  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05665 142F                        0E            .byte	$E
05666 1430                        1B            .byte	$1B
05667 1431                        18            .byte	$18
05668 1432                        3C            .byte	$3C
05669 1433                        18            .byte	$18
05670 1434                        18            .byte	$18
05671 1435                        D8            .byte	$D8
05672 1436                        70            .byte	$70
05673                                           ! 872  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05674 1437                        1C            .byte	$1C
05675 1438                        00            .byte	0
05676 1439                        78            .byte	$78
05677 143A                        0C            .byte	$C
05678 143B                        7C            .byte	$7C
05679 143C                        CC            .byte	$CC
05680 143D                        7E            .byte	$7E
05681 143E                        00            .byte	0
05682                                           ! 873  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05683 143F                        38            .byte	$38
05684 1440                        00            .byte	0
05685 1441                        70            .byte	$70
05686 1442                        30            .byte	$30
05687 1443                        30            .byte	$30
05688 1444                        30            .byte	$30
05689 1445                        78            .byte	$78
05690 1446                        00            .byte	0
05691                                           ! 874  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05692 1447                        00            .byte	0
05693 1448                        1C            .byte	$1C
05694 1449                        00            .byte	0
05695 144A                        78            .byte	$78
05696 144B                        CC            .byte	$CC
05697 144C                        CC            .byte	$CC
05698 144D                        78            .byte	$78
05699 144E                        00            .byte	0
05700                                           ! 875  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05701 144F                        00            .byte	0
05702 1450                        1C            .byte	$1C
05703 1451                        00            .byte	0
05704 1452                        CC            .byte	$CC
05705 1453                        CC            .byte	$CC
05706 1454                        CC            .byte	$CC
05707 1455                        7E            .byte	$7E
05708 1456                        00            .byte	0
05709                                           ! 876  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05710 1457                        00            .byte	0
05711 1458                        F8            .byte	$F8
05712 1459                        00            .byte	0
05713 145A                        F8            .byte	$F8
05714 145B                        CC            .byte	$CC
05715 145C                        CC            .byte	$CC
05716 145D                        CC            .byte	$CC
05717 145E                        00            .byte	0
05718                                           ! 877  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05719 145F                        FC            .byte	$FC
05720 1460                        00            .byte	0
05721 1461                        CC            .byte	$CC
05722 1462                        EC            .byte	$EC
05723 1463                        FC            .byte	$FC
05724 1464                        DC            .byte	$DC
05725 1465                        CC            .byte	$CC
05726 1466                        00            .byte	0
05727                                           ! 878  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05728 1467                        3C            .byte	$3C
05729 1468                        6C            .byte	$6C
05730 1469                        6C            .byte	$6C
05731 146A                        3E            .byte	$3E
05732 146B                        00            .byte	0
05733 146C                        7E            .byte	$7E
05734 146D                        00            .byte	0
05735 146E                        00            .byte	0
05736                                           ! 879  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
05737 146F                        38            .byte	$38
05738 1470                        6C            .byte	$6C
05739 1471                        6C            .byte	$6C
05740 1472                        38            .byte	$38
05741 1473                        00            .byte	0
05742 1474                        7C            .byte	$7C
05743 1475                        00            .byte	0
05744 1476                        00            .byte	0
05745                                           ! 880  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
05746 1477                        30            .byte	$30
05747 1478                        00            .byte	0
05748 1479                        30            .byte	$30
05749 147A                        60            .byte	$60
05750 147B                        C0            .byte	$C0
05751 147C                        CC            .byte	$CC
05752 147D                        78            .byte	$78
05753 147E                        00            .byte	0
05754                                           ! 881  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
05755 147F                        00            .byte	0
05756 1480                        00            .byte	0
05757 1481                        00            .byte	0
05758 1482                        FC            .byte	$FC
05759 1483                        C0            .byte	$C0
05760 1484                        C0            .byte	$C0
05761 1485                        00            .byte	0
05762 1486                        00            .byte	0
05763                                           ! 882  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
05764 1487                        00            .byte	0
05765 1488                        00            .byte	0
05766 1489                        00            .byte	0
05767 148A                        FC            .byte	$FC
05768 148B                        0C            .byte	$C
05769 148C                        0C            .byte	$C
05770 148D                        00            .byte	0
05771 148E                        00            .byte	0
05772                                           ! 883  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
05773 148F                        C3            .byte	$C3
05774 1490                        C6            .byte	$C6
05775 1491                        CC            .byte	$CC
05776 1492                        DE            .byte	$DE
05777 1493                        33            .byte	$33
05778 1494                        66            .byte	$66
05779 1495                        CC            .byte	$CC
05780 1496                        0F            .byte	$F
05781                                           ! 884  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
05782 1497                        C3            .byte	$C3
05783 1498                        C6            .byte	$C6
05784 1499                        CC            .byte	$CC
05785 149A                        DB            .byte	$DB
05786 149B                        37            .byte	$37
05787 149C                        6F            .byte	$6F
05788 149D                        CF            .byte	$CF
05789 149E                        03            .byte	3
05790                                           ! 885  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
05791 149F                        18            .byte	$18
05792 14A0                        18            .byte	$18
05793 14A1                        00            .byte	0
05794 14A2                        18            .byte	$18
05795 14A3                        18            .byte	$18
05796 14A4                        18            .byte	$18
05797 14A5                        18            .byte	$18
05798 14A6                        00            .byte	0
05799                                           ! 886  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
05800 14A7                        00            .byte	0
05801 14A8                        33            .byte	$33
05802 14A9                        66            .byte	$66
05803 14AA                        CC            .byte	$CC
05804 14AB                        66            .byte	$66
05805 14AC                        33            .byte	$33
05806 14AD                        00            .byte	0
05807 14AE                        00            .byte	0
05808                                           ! 887  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
05809 14AF                        00            .byte	0
05810 14B0                        CC            .byte	$CC
05811 14B1                        66            .byte	$66
05812 14B2                        33            .byte	$33
05813 14B3                        66            .byte	$66
05814 14B4                        CC            .byte	$CC
05815 14B5                        00            .byte	0
05816 14B6                        00            .byte	0
05817                                           ! 888  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
05818 14B7                        22            .byte	$22
05819 14B8                        88            .byte	$88
05820 14B9                        22            .byte	$22
05821 14BA                        88            .byte	$88
05822 14BB                        22            .byte	$22
05823 14BC                        88            .byte	$88
05824 14BD                        22            .byte	$22
05825 14BE                        88            .byte	$88
05826                                           ! 889  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
05827 14BF                        55            .byte	$55
05828 14C0                        AA            .byte	$AA
05829 14C1                        55            .byte	$55
05830 14C2                        AA            .byte	$AA
05831 14C3                        55            .byte	$55
05832 14C4                        AA            .byte	$AA
05833 14C5                        55            .byte	$55
05834 14C6                        AA            .byte	$AA
05835                                           ! 890  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
05836 14C7                        DB            .byte	$DB
05837 14C8                        77            .byte	$77
05838 14C9                        DB            .byte	$DB
05839 14CA                        EE            .byte	$EE
05840 14CB                        DB            .byte	$DB
05841 14CC                        77            .byte	$77
05842 14CD                        DB            .byte	$DB
05843 14CE                        EE            .byte	$EE
05844                                           ! 891  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
05845 14CF                        18            .byte	$18
05846 14D0                        18            .byte	$18
05847 14D1                        18            .byte	$18
05848 14D2                        18            .byte	$18
05849 14D3                        18            .byte	$18
05850 14D4                        18            .byte	$18
05851 14D5                        18            .byte	$18
05852 14D6                        18            .byte	$18
05853                                           ! 892  0x18, 0x18
05854 14D7                        18            .byte	$18
05855                                           ! 892 , 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
05856 14D8                        18            .byte	$18
05857 14D9                        18            .byte	$18
05858 14DA                        18            .byte	$18
05859 14DB                        F8            .byte	$F8
05860 14DC                        18            .byte	$18
05861 14DD                        18            .byte	$18
05862 14DE                        18            .byte	$18
05863                                           ! 893  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05864 14DF                        18            .byte	$18
05865 14E0                        18            .byte	$18
05866 14E1                        F8            .byte	$F8
05867 14E2                        18            .byte	$18
05868 14E3                        F8            .byte	$F8
05869 14E4                        18            .byte	$18
05870 14E5                        18            .byte	$18
05871 14E6                        18            .byte	$18
05872                                           ! 894  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
05873 14E7                        36            .byte	$36
05874 14E8                        36            .byte	$36
05875 14E9                        36            .byte	$36
05876 14EA                        36            .byte	$36
05877 14EB                        F6            .byte	$F6
05878 14EC                        36            .byte	$36
05879 14ED                        36            .byte	$36
05880 14EE                        36            .byte	$36
05881                                           ! 895  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
05882 14EF                        00            .byte	0
05883 14F0                        00            .byte	0
05884 14F1                        00            .byte	0
05885 14F2                        00            .byte	0
05886 14F3                        FE            .byte	$FE
05887 14F4                        36            .byte	$36
05888 14F5                        36            .byte	$36
05889 14F6                        36            .byte	$36
05890                                           ! 896  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05891 14F7                        00            .byte	0
05892 14F8                        00            .byte	0
05893 14F9                        F8            .byte	$F8
05894 14FA                        18            .byte	$18
05895 14FB                        F8            .byte	$F8
05896 14FC                        18            .byte	$18
05897 14FD                        18            .byte	$18
05898 14FE                        18            .byte	$18
05899                                           ! 897  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
05900 14FF                        36            .byte	$36
05901 1500                        36            .byte	$36
05902 1501                        F6            .byte	$F6
05903 1502                        06            .byte	6
05904 1503                        F6            .byte	$F6
05905 1504                        36            .byte	$36
05906 1505                        36            .byte	$36
05907 1506                        36            .byte	$36
05908                                           ! 898  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
05909 1507                        36            .byte	$36
05910 1508                        36            .byte	$36
05911 1509                        36            .byte	$36
05912 150A                        36            .byte	$36
05913 150B                        36            .byte	$36
05914 150C                        36            .byte	$36
05915 150D                        36            .byte	$36
05916 150E                        36            .byte	$36
05917                                           ! 899  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
05918 150F                        00            .byte	0
05919 1510                        00            .byte	0
05920 1511                        FE            .byte	$FE
05921 1512                        06            .byte	6
05922 1513                        F6            .byte	$F6
05923 1514                        36            .byte	$36
05924 1515                        36            .byte	$36
05925 1516                        36            .byte	$36
05926                                           ! 900  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
05927 1517                        36            .byte	$36
05928 1518                        36            .byte	$36
05929 1519                        F6            .byte	$F6
05930 151A                        06            .byte	6
05931 151B                        FE            .byte	$FE
05932 151C                        00            .byte	0
05933 151D                        00            .byte	0
05934 151E                        00            .byte	0
05935                                           ! 901  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
05936 151F                        36            .byte	$36
05937 1520                        36            .byte	$36
05938 1521                        36            .byte	$36
05939 1522                        36            .byte	$36
05940 1523                        FE            .byte	$FE
05941 1524                        00            .byte	0
05942 1525                        00            .byte	0
05943 1526                        00            .byte	0
05944                                           ! 902  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
05945 1527                        18            .byte	$18
05946 1528                        18            .byte	$18
05947 1529                        F8            .byte	$F8
05948 152A                        18            .byte	$18
05949 152B                        F8            .byte	$F8
05950 152C                        00            .byte	0
05951 152D                        00            .byte	0
05952 152E                        00            .byte	0
05953                                           ! 903  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
05954 152F                        00            .byte	0
05955 1530                        00            .byte	0
05956 1531                        00            .byte	0
05957 1532                        00            .byte	0
05958 1533                        F8            .byte	$F8
05959 1534                        18            .byte	$18
05960 1535                        18            .byte	$18
05961 1536                        18            .byte	$18
05962                                           ! 904  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
05963 1537                        18            .byte	$18
05964 1538                        18            .byte	$18
05965 1539                        18            .byte	$18
05966 153A                        18            .byte	$18
05967 153B                        1F            .byte	$1F
05968 153C                        00            .byte	0
05969 153D                        00            .byte	0
05970 153E                        00            .byte	0
05971                                           ! 905  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
05972 153F                        18            .byte	$18
05973 1540                        18            .byte	$18
05974 1541                        18            .byte	$18
05975 1542                        18            .byte	$18
05976 1543                        FF            .byte	$FF
05977 1544                        00            .byte	0
05978 1545                        00            .byte	0
05979 1546                        00            .byte	0
05980                                           ! 906  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
05981 1547                        00            .byte	0
05982 1548                        00            .byte	0
05983 1549                        00            .byte	0
05984 154A                        00            .byte	0
05985 154B                        FF            .byte	$FF
05986 154C                        18            .byte	$18
05987 154D                        18            .byte	$18
05988 154E                        18            .byte	$18
05989                                           ! 907  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
05990 154F                        18            .byte	$18
05991 1550                        18            .byte	$18
05992 1551                        18            .byte	$18
05993 1552                        18            .byte	$18
05994 1553                        1F            .byte	$1F
05995 1554                        18            .byte	$18
05996 1555                        18            .byte	$18
05997 1556                        18            .byte	$18
05998                                           ! 908  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
05999 1557                        00            .byte	0
06000 1558                        00            .byte	0
06001 1559                        00            .byte	0
06002 155A                        00            .byte	0
06003 155B                        FF            .byte	$FF
06004 155C                        00            .byte	0
06005 155D                        00            .byte	0
06006 155E                        00            .byte	0
06007                                           ! 909  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06008 155F                        18            .byte	$18
06009 1560                        18            .byte	$18
06010 1561                        18            .byte	$18
06011 1562                        18            .byte	$18
06012 1563                        FF            .byte	$FF
06013 1564                        18            .byte	$18
06014 1565                        18            .byte	$18
06015 1566                        18            .byte	$18
06016                                           ! 910  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06017 1567                        18            .byte	$18
06018 1568                        18            .byte	$18
06019 1569                        1F            .byte	$1F
06020 156A                        18            .byte	$18
06021 156B                        1F            .byte	$1F
06022 156C                        18            .byte	$18
06023 156D                        18            .byte	$18
06024 156E                        18            .byte	$18
06025                                           ! 911  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06026 156F                        36            .byte	$36
06027 1570                        36            .byte	$36
06028 1571                        36            .byte	$36
06029 1572                        36            .byte	$36
06030 1573                        37            .byte	$37
06031 1574                        36            .byte	$36
06032 1575                        36            .byte	$36
06033 1576                        36            .byte	$36
06034                                           ! 912  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06035 1577                        36            .byte	$36
06036 1578                        36            .byte	$36
06037 1579                        37            .byte	$37
06038 157A                        30            .byte	$30
06039 157B                        3F            .byte	$3F
06040 157C                        00            .byte	0
06041 157D                        00            .byte	0
06042 157E                        00            .byte	0
06043                                           ! 913  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06044 157F                        00            .byte	0
06045 1580                        00            .byte	0
06046 1581                        3F            .byte	$3F
06047 1582                        30            .byte	$30
06048 1583                        37            .byte	$37
06049 1584                        36            .byte	$36
06050 1585                        36            .byte	$36
06051 1586                        36            .byte	$36
06052                                           ! 914  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06053 1587                        36            .byte	$36
06054 1588                        36            .byte	$36
06055 1589                        F7            .byte	$F7
06056 158A                        00            .byte	0
06057 158B                        FF            .byte	$FF
06058 158C                        00            .byte	0
06059 158D                        00            .byte	0
06060 158E                        00            .byte	0
06061                                           ! 915  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06062 158F                        00            .byte	0
06063 1590                        00            .byte	0
06064 1591                        FF            .byte	$FF
06065 1592                        00            .byte	0
06066 1593                        F7            .byte	$F7
06067 1594                        36            .byte	$36
06068 1595                        36            .byte	$36
06069 1596                        36            .byte	$36
06070                                           ! 916  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06071 1597                        36            .byte	$36
06072 1598                        36            .byte	$36
06073 1599                        37            .byte	$37
06074 159A                        30            .byte	$30
06075 159B                        37            .byte	$37
06076 159C                        36            .byte	$36
06077 159D                        36            .byte	$36
06078 159E                        36            .byte	$36
06079                                           ! 917  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06080 159F                        00            .byte	0
06081 15A0                        00            .byte	0
06082 15A1                        FF            .byte	$FF
06083 15A2                        00            .byte	0
06084 15A3                        FF            .byte	$FF
06085 15A4                        00            .byte	0
06086 15A5                        00            .byte	0
06087 15A6                        00            .byte	0
06088                                           ! 918  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06089 15A7                        36            .byte	$36
06090 15A8                        36            .byte	$36
06091 15A9                        F7            .byte	$F7
06092 15AA                        00            .byte	0
06093 15AB                        F7            .byte	$F7
06094 15AC                        36            .byte	$36
06095 15AD                        36            .byte	$36
06096 15AE                        36            .byte	$36
06097                                           ! 919  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06098 15AF                        18            .byte	$18
06099 15B0                        18            .byte	$18
06100 15B1                        FF            .byte	$FF
06101 15B2                        00            .byte	0
06102 15B3                        FF            .byte	$FF
06103 15B4                        00            .byte	0
06104 15B5                        00            .byte	0
06105 15B6                        00            .byte	0
06106                                           ! 920  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06107 15B7                        36            .byte	$36
06108 15B8                        36            .byte	$36
06109 15B9                        36            .byte	$36
06110 15BA                        36            .byte	$36
06111 15BB                        FF            .byte	$FF
06112 15BC                        00            .byte	0
06113 15BD                        00            .byte	0
06114 15BE                        00            .byte	0
06115                                           ! 921  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06116 15BF                        00            .byte	0
06117 15C0                        00            .byte	0
06118 15C1                        FF            .byte	$FF
06119 15C2                        00            .byte	0
06120 15C3                        FF            .byte	$FF
06121 15C4                        18            .byte	$18
06122 15C5                        18            .byte	$18
06123 15C6                        18            .byte	$18
06124                                           ! 922  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06125 15C7                        00            .byte	0
06126 15C8                        00            .byte	0
06127 15C9                        00            .byte	0
06128 15CA                        00            .byte	0
06129 15CB                        FF            .byte	$FF
06130 15CC                        36            .byte	$36
06131 15CD                        36            .byte	$36
06132 15CE                        36            .byte	$36
06133                                           ! 923  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06134 15CF                        36            .byte	$36
06135 15D0                        36            .byte	$36
06136 15D1                        36            .byte	$36
06137 15D2                        36            .byte	$36
06138 15D3                        3F            .byte	$3F
06139 15D4                        00            .byte	0
06140 15D5                        00            .byte	0
06141 15D6                        00            .byte	0
06142                                           ! 924  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06143 15D7                        18            .byte	$18
06144 15D8                        18            .byte	$18
06145 15D9                        1F            .byte	$1F
06146 15DA                        18            .byte	$18
06147 15DB                        1F            .byte	$1F
06148 15DC                        00            .byte	0
06149 15DD                        00            .byte	0
06150 15DE                        00            .byte	0
06151                                           ! 925  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06152 15DF                        00            .byte	0
06153 15E0                        00            .byte	0
06154 15E1                        1F            .byte	$1F
06155 15E2                        18            .byte	$18
06156 15E3                        1F            .byte	$1F
06157 15E4                        18            .byte	$18
06158 15E5                        18            .byte	$18
06159 15E6                        18            .byte	$18
06160                                           ! 926  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06161 15E7                        00            .byte	0
06162 15E8                        00            .byte	0
06163 15E9                        00            .byte	0
06164 15EA                        00            .byte	0
06165 15EB                        3F            .byte	$3F
06166 15EC                        36            .byte	$36
06167 15ED                        36            .byte	$36
06168 15EE                        36            .byte	$36
06169                                           ! 927  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06170 15EF                        36            .byte	$36
06171 15F0                        36            .byte	$36
06172 15F1                        36            .byte	$36
06173 15F2                        36            .byte	$36
06174 15F3                        FF            .byte	$FF
06175 15F4                        36            .byte	$36
06176 15F5                        36            .byte	$36
06177 15F6                        36            .byte	$36
06178                                           ! 928  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06179 15F7                        18            .byte	$18
06180 15F8                        18            .byte	$18
06181 15F9                        FF            .byte	$FF
06182 15FA                        18            .byte	$18
06183 15FB                        FF            .byte	$FF
06184 15FC                        18            .byte	$18
06185 15FD                        18            .byte	$18
06186 15FE                        18            .byte	$18
06187                                           ! 929  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06188 15FF                        18            .byte	$18
06189 1600                        18            .byte	$18
06190 1601                        18            .byte	$18
06191 1602                        18            .byte	$18
06192 1603                        F8            .byte	$F8
06193 1604                        00            .byte	0
06194 1605                        00            .byte	0
06195 1606                        00            .byte	0
06196                                           ! 930  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06197 1607                        00            .byte	0
06198 1608                        00            .byte	0
06199 1609                        00            .byte	0
06200 160A                        00            .byte	0
06201 160B                        1F            .byte	$1F
06202 160C                        18            .byte	$18
06203 160D                        18            .byte	$18
06204 160E                        18            .byte	$18
06205                                           ! 931  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06206 160F                        FF            .byte	$FF
06207 1610                        FF            .byte	$FF
06208 1611                        FF            .byte	$FF
06209 1612                        FF            .byte	$FF
06210 1613                        FF            .byte	$FF
06211 1614                        FF            .byte	$FF
06212 1615                        FF            .byte	$FF
06213 1616                        FF            .byte	$FF
06214                                           ! 932  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06215 1617                        00            .byte	0
06216 1618                        00            .byte	0
06217 1619                        00            .byte	0
06218 161A                        00            .byte	0
06219 161B                        FF            .byte	$FF
06220 161C                        FF            .byte	$FF
06221 161D                        FF            .byte	$FF
06222 161E                        FF            .byte	$FF
06223                                           ! 933  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06224 161F                        F0            .byte	$F0
06225 1620                        F0            .byte	$F0
06226 1621                        F0            .byte	$F0
06227 1622                        F0            .byte	$F0
06228 1623                        F0            .byte	$F0
06229 1624                        F0            .byte	$F0
06230 1625                        F0            .byte	$F0
06231 1626                        F0            .byte	$F0
06232                                           ! 934  
06233                                           ! 934 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06234 1627                        0F            .byte	$F
06235 1628                        0F            .byte	$F
06236 1629                        0F            .byte	$F
06237 162A                        0F            .byte	$F
06238 162B                        0F            .byte	$F
06239 162C                        0F            .byte	$F
06240 162D                        0F            .byte	$F
06241 162E                        0F            .byte	$F
06242                                           ! 935  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06243 162F                        FF            .byte	$FF
06244 1630                        FF            .byte	$FF
06245 1631                        FF            .byte	$FF
06246 1632                        FF            .byte	$FF
06247 1633                        00            .byte	0
06248 1634                        00            .byte	0
06249 1635                        00            .byte	0
06250 1636                        00            .byte	0
06251                                           ! 936  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06252 1637                        00            .byte	0
06253 1638                        00            .byte	0
06254 1639                        76            .byte	$76
06255 163A                        DC            .byte	$DC
06256 163B                        C8            .byte	$C8
06257 163C                        DC            .byte	$DC
06258 163D                        76            .byte	$76
06259 163E                        00            .byte	0
06260                                           ! 937  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06261 163F                        00            .byte	0
06262 1640                        78            .byte	$78
06263 1641                        CC            .byte	$CC
06264 1642                        F8            .byte	$F8
06265 1643                        CC            .byte	$CC
06266 1644                        F8            .byte	$F8
06267 1645                        C0            .byte	$C0
06268 1646                        C0            .byte	$C0
06269                                           ! 938  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06270 1647                        00            .byte	0
06271 1648                        FC            .byte	$FC
06272 1649                        CC            .byte	$CC
06273 164A                        C0            .byte	$C0
06274 164B                        C0            .byte	$C0
06275 164C                        C0            .byte	$C0
06276 164D                        C0            .byte	$C0
06277 164E                        00            .byte	0
06278                                           ! 939  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06279 164F                        00            .byte	0
06280 1650                        FE            .byte	$FE
06281 1651                        6C            .byte	$6C
06282 1652                        6C            .byte	$6C
06283 1653                        6C            .byte	$6C
06284 1654                        6C            .byte	$6C
06285 1655                        6C            .byte	$6C
06286 1656                        00            .byte	0
06287                                           ! 940  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06288 1657                        FC            .byte	$FC
06289 1658                        CC            .byte	$CC
06290 1659                        60            .byte	$60
06291 165A                        30            .byte	$30
06292 165B                        60            .byte	$60
06293 165C                        CC            .byte	$CC
06294 165D                        FC            .byte	$FC
06295 165E                        00            .byte	0
06296                                           ! 941  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06297 165F                        00            .byte	0
06298 1660                        00            .byte	0
06299 1661                        7E            .byte	$7E
06300 1662                        D8            .byte	$D8
06301 1663                        D8            .byte	$D8
06302 1664                        D8            .byte	$D8
06303 1665                        70            .byte	$70
06304 1666                        00            .byte	0
06305                                           ! 942  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06306 1667                        00            .byte	0
06307 1668                        66            .byte	$66
06308 1669                        66            .byte	$66
06309 166A                        66            .byte	$66
06310 166B                        66            .byte	$66
06311 166C                        7C            .byte	$7C
06312 166D                        60            .byte	$60
06313 166E                        C0            .byte	$C0
06314                                           ! 943  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06315 166F                        00            .byte	0
06316 1670                        76            .byte	$76
06317 1671                        DC            .byte	$DC
06318 1672                        18            .byte	$18
06319 1673                        18            .byte	$18
06320 1674                        18            .byte	$18
06321 1675                        18            .byte	$18
06322 1676                        00            .byte	0
06323                                           ! 944  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06324 1677                        FC            .byte	$FC
06325 1678                        30            .byte	$30
06326 1679                        78            .byte	$78
06327 167A                        CC            .byte	$CC
06328 167B                        CC            .byte	$CC
06329 167C                        78            .byte	$78
06330 167D                        30            .byte	$30
06331 167E                        FC            .byte	$FC
06332                                           ! 945  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06333 167F                        38            .byte	$38
06334 1680                        6C            .byte	$6C
06335 1681                        C6            .byte	$C6
06336 1682                        FE            .byte	$FE
06337 1683                        C6            .byte	$C6
06338 1684                        6C            .byte	$6C
06339 1685                        38            .byte	$38
06340 1686                        00            .byte	0
06341                                           ! 946  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06342 1687                        38            .byte	$38
06343 1688                        6C            .byte	$6C
06344 1689                        C6            .byte	$C6
06345 168A                        C6            .byte	$C6
06346 168B                        6C            .byte	$6C
06347 168C                        6C            .byte	$6C
06348 168D                        EE            .byte	$EE
06349 168E                        00            .byte	0
06350                                           ! 947  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06351 168F                        1C            .byte	$1C
06352 1690                        30            .byte	$30
06353 1691                        18            .byte	$18
06354 1692                        7C            .byte	$7C
06355 1693                        CC            .byte	$CC
06356 1694                        CC            .byte	$CC
06357 1695                        78            .byte	$78
06358 1696                        00            .byte	0
06359                                           ! 948  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06360 1697                        00            .byte	0
06361 1698                        00            .byte	0
06362 1699                        7E            .byte	$7E
06363 169A                        DB            .byte	$DB
06364 169B                        DB            .byte	$DB
06365 169C                        7E            .byte	$7E
06366 169D                        00            .byte	0
06367 169E                        00            .byte	0
06368                                           ! 949  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06369 169F                        06            .byte	6
06370 16A0                        0C            .byte	$C
06371 16A1                        7E            .byte	$7E
06372 16A2                        DB            .byte	$DB
06373 16A3                        DB            .byte	$DB
06374 16A4                        7E            .byte	$7E
06375 16A5                        60            .byte	$60
06376 16A6                        C0            .byte	$C0
06377                                           ! 950  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06378 16A7                        38            .byte	$38
06379 16A8                        60            .byte	$60
06380 16A9                        C0            .byte	$C0
06381 16AA                        F8            .byte	$F8
06382 16AB                        C0            .byte	$C0
06383 16AC                        60            .byte	$60
06384 16AD                        38            .byte	$38
06385 16AE                        00            .byte	0
06386                                           ! 951  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06387 16AF                        78            .byte	$78
06388 16B0                        CC            .byte	$CC
06389 16B1                        CC            .byte	$CC
06390 16B2                        CC            .byte	$CC
06391 16B3                        CC            .byte	$CC
06392 16B4                        CC            .byte	$CC
06393 16B5                        CC            .byte	$CC
06394 16B6                        00            .byte	0
06395                                           ! 952  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06396 16B7                        00            .byte	0
06397 16B8                        FC            .byte	$FC
06398 16B9                        00            .byte	0
06399 16BA                        FC            .byte	$FC
06400 16BB                        00            .byte	0
06401 16BC                        FC            .byte	$FC
06402 16BD                        00            .byte	0
06403 16BE                        00            .byte	0
06404                                           ! 953  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06405 16BF                        30            .byte	$30
06406 16C0                        30            .byte	$30
06407 16C1                        FC            .byte	$FC
06408 16C2                        30            .byte	$30
06409 16C3                        30            .byte	$30
06410 16C4                        00            .byte	0
06411 16C5                        FC            .byte	$FC
06412 16C6                        00            .byte	0
06413                                           ! 954  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06414 16C7                        60            .byte	$60
06415 16C8                        30            .byte	$30
06416 16C9                        18            .byte	$18
06417 16CA                        30            .byte	$30
06418 16CB                        60            .byte	$60
06419 16CC                        00            .byte	0
06420 16CD                        FC            .byte	$FC
06421 16CE                        00            .byte	0
06422                                           ! 955  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06423 16CF                        18            .byte	$18
06424 16D0                        30            .byte	$30
06425 16D1                        60            .byte	$60
06426 16D2                        30            .byte	$30
06427 16D3                        18            .byte	$18
06428 16D4                        00            .byte	0
06429 16D5                        FC            .byte	$FC
06430 16D6                        00            .byte	0
06431                                           ! 956  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06432 16D7                        0E            .byte	$E
06433 16D8                        1B            .byte	$1B
06434 16D9                        1B            .byte	$1B
06435 16DA                        18            .byte	$18
06436 16DB                        18            .byte	$18
06437 16DC                        18            .byte	$18
06438 16DD                        18            .byte	$18
06439 16DE                        18            .byte	$18
06440                                           ! 957  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06441 16DF                        18            .byte	$18
06442 16E0                        18            .byte	$18
06443 16E1                        18            .byte	$18
06444 16E2                        18            .byte	$18
06445 16E3                        18            .byte	$18
06446 16E4                        D8            .byte	$D8
06447 16E5                        D8            .byte	$D8
06448 16E6                        70            .byte	$70
06449                                           ! 958  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06450 16E7                        30            .byte	$30
06451 16E8                        30            .byte	$30
06452 16E9                        00            .byte	0
06453 16EA                        FC            .byte	$FC
06454 16EB                        00            .byte	0
06455 16EC                        30            .byte	$30
06456 16ED                        30            .byte	$30
06457 16EE                        00            .byte	0
06458                                           ! 959  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06459 16EF                        00            .byte	0
06460 16F0                        76            .byte	$76
06461 16F1                        DC            .byte	$DC
06462 16F2                        00            .byte	0
06463 16F3                        76            .byte	$76
06464 16F4                        DC            .byte	$DC
06465 16F5                        00            .byte	0
06466 16F6                        00            .byte	0
06467                                           ! 960  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06468 16F7                        38            .byte	$38
06469 16F8                        6C            .byte	$6C
06470 16F9                        6C            .byte	$6C
06471 16FA                        38            .byte	$38
06472 16FB                        00            .byte	0
06473 16FC                        00            .byte	0
06474 16FD                        00            .byte	0
06475 16FE                        00            .byte	0
06476                                           ! 961  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06477 16FF                        00            .byte	0
06478 1700                        00            .byte	0
06479 1701                        00            .byte	0
06480 1702                        18            .byte	$18
06481 1703                        18            .byte	$18
06482 1704                        00            .byte	0
06483 1705                        00            .byte	0
06484 1706                        00            .byte	0
06485                                           ! 962  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06486 1707                        00            .byte	0
06487 1708                        00            .byte	0
06488 1709                        00            .byte	0
06489 170A                        00            .byte	0
06490 170B                        18            .byte	$18
06491 170C                        00            .byte	0
06492 170D                        00            .byte	0
06493 170E                        00            .byte	0
06494                                           ! 963  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06495 170F                        0F            .byte	$F
06496 1710                        0C            .byte	$C
06497 1711                        0C            .byte	$C
06498 1712                        0C            .byte	$C
06499 1713                        EC            .byte	$EC
06500 1714                        6C            .byte	$6C
06501 1715                        3C            .byte	$3C
06502 1716                        1C            .byte	$1C
06503                                           ! 964  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06504 1717                        78            .byte	$78
06505 1718                        6C            .byte	$6C
06506 1719                        6C            .byte	$6C
06507 171A                        6C            .byte	$6C
06508 171B                        6C            .byte	$6C
06509 171C                        00            .byte	0
06510 171D                        00            .byte	0
06511 171E                        00            .byte	0
06512                                           ! 965  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06513 171F                        70            .byte	$70
06514 1720                        18            .byte	$18
06515 1721                        30            .byte	$30
06516 1722                        60            .byte	$60
06517 1723                        78            .byte	$78
06518 1724                        00            .byte	0
06519 1725                        00            .byte	0
06520 1726                        00            .byte	0
06521                                           ! 966  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06522 1727                        00            .byte	0
06523 1728                        00            .byte	0
06524 1729                        3C            .byte	$3C
06525 172A                        3C            .byte	$3C
06526 172B                        3C            .byte	$3C
06527 172C                        3C            .byte	$3C
06528 172D                        00            .byte	0
06529 172E                        00            .byte	0
06530                                           ! 967  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06531 172F                        00            .byte	0
06532 1730                        00            .byte	0
06533 1731                        00            .byte	0
06534 1732                        00            .byte	0
06535 1733                        00            .byte	0
06536 1734                        00            .byte	0
06537 1735                        00            .byte	0
06538                                           ! 968 };
06539 1736                        00            .byte	0
06540                                           !BCC_EOS
06541                                           ! 969 static Bit8u vgafont14[256*14]=
06542                                           ! 970 {
06543                       00001737            _vgafont14:
06544                                           ! 971  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06545 1737                        00            .byte	0
06546 1738                        00            .byte	0
06547 1739                        00            .byte	0
06548 173A                        00            .byte	0
06549 173B                        00            .byte	0
06550 173C                        00            .byte	0
06551 173D                        00            .byte	0
06552 173E                        00            .byte	0
06553 173F                        00            .byte	0
06554 1740                        00            .byte	0
06555 1741                        00            .byte	0
06556 1742                        00            .byte	0
06557 1743                        00            .byte	0
06558 1744                        00            .byte	0
06559                                           ! 972  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06560 1745                        00            .byte	0
06561 1746                        00            .byte	0
06562 1747                        7E            .byte	$7E
06563 1748                        81            .byte	$81
06564 1749                        A5            .byte	$A5
06565 174A                        81            .byte	$81
06566 174B                        81            .byte	$81
06567 174C                        BD            .byte	$BD
06568 174D                        99            .byte	$99
06569 174E                        81            .byte	$81
06570 174F                        7E            .byte	$7E
06571 1750                        00            .byte	0
06572 1751                        00            .byte	0
06573 1752                        00            .byte	0
06574                                           ! 973  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06575 1753                        00            .byte	0
06576 1754                        00            .byte	0
06577 1755                        7E            .byte	$7E
06578 1756                        FF            .byte	$FF
06579 1757                        DB            .byte	$DB
06580 1758                        FF            .byte	$FF
06581 1759                        FF            .byte	$FF
06582 175A                        C3            .byte	$C3
06583 175B                        E7            .byte	$E7
06584 175C                        FF            .byte	$FF
06585 175D                        7E            .byte	$7E
06586 175E                        00            .byte	0
06587 175F                        00            .byte	0
06588 1760                        00            .byte	0
06589                                           ! 974  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06590 1761                        00            .byte	0
06591 1762                        00            .byte	0
06592 1763                        00            .byte	0
06593 1764                        6C            .byte	$6C
06594 1765                        FE            .byte	$FE
06595 1766                        FE            .byte	$FE
06596 1767                        FE            .byte	$FE
06597 1768                        FE            .byte	$FE
06598 1769                        7C            .byte	$7C
06599 176A                        38            .byte	$38
06600 176B                        10            .byte	$10
06601 176C                        00            .byte	0
06602 176D                        00            .byte	0
06603 176E                        00            .byte	0
06604                                           ! 975  0x00, 
06605 176F                        00            .byte	0
06606                                           ! 975 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06607 1770                        00            .byte	0
06608 1771                        00            .byte	0
06609 1772                        10            .byte	$10
06610 1773                        38            .byte	$38
06611 1774                        7C            .byte	$7C
06612 1775                        FE            .byte	$FE
06613 1776                        7C            .byte	$7C
06614 1777                        38            .byte	$38
06615 1778                        10            .byte	$10
06616 1779                        00            .byte	0
06617 177A                        00            .byte	0
06618 177B                        00            .byte	0
06619 177C                        00            .byte	0
06620                                           ! 976  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06621 177D                        00            .byte	0
06622 177E                        00            .byte	0
06623 177F                        18            .byte	$18
06624 1780                        3C            .byte	$3C
06625 1781                        3C            .byte	$3C
06626 1782                        E7            .byte	$E7
06627 1783                        E7            .byte	$E7
06628 1784                        E7            .byte	$E7
06629 1785                        18            .byte	$18
06630 1786                        18            .byte	$18
06631 1787                        3C            .byte	$3C
06632 1788                        00            .byte	0
06633 1789                        00            .byte	0
06634 178A                        00            .byte	0
06635                                           ! 977  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06636 178B                        00            .byte	0
06637 178C                        00            .byte	0
06638 178D                        18            .byte	$18
06639 178E                        3C            .byte	$3C
06640 178F                        7E            .byte	$7E
06641 1790                        FF            .byte	$FF
06642 1791                        FF            .byte	$FF
06643 1792                        7E            .byte	$7E
06644 1793                        18            .byte	$18
06645 1794                        18            .byte	$18
06646 1795                        3C            .byte	$3C
06647 1796                        00            .byte	0
06648 1797                        00            .byte	0
06649 1798                        00            .byte	0
06650                                           ! 978  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06651 1799                        00            .byte	0
06652 179A                        00            .byte	0
06653 179B                        00            .byte	0
06654 179C                        00            .byte	0
06655 179D                        00            .byte	0
06656 179E                        18            .byte	$18
06657 179F                        3C            .byte	$3C
06658 17A0                        3C            .byte	$3C
06659 17A1                        18            .byte	$18
06660 17A2                        00            .byte	0
06661 17A3                        00            .byte	0
06662 17A4                        00            .byte	0
06663 17A5                        00            .byte	0
06664 17A6                        00            .byte	0
06665                                           ! 979  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06666 17A7                        FF            .byte	$FF
06667 17A8                        FF            .byte	$FF
06668 17A9                        FF            .byte	$FF
06669 17AA                        FF            .byte	$FF
06670 17AB                        FF            .byte	$FF
06671 17AC                        E7            .byte	$E7
06672 17AD                        C3            .byte	$C3
06673 17AE                        C3            .byte	$C3
06674 17AF                        E7            .byte	$E7
06675 17B0                        FF            .byte	$FF
06676 17B1                        FF            .byte	$FF
06677 17B2                        FF            .byte	$FF
06678 17B3                        FF            .byte	$FF
06679 17B4                        FF            .byte	$FF
06680                                           ! 980  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06681 17B5                        00            .byte	0
06682 17B6                        00            .byte	0
06683 17B7                        00            .byte	0
06684 17B8                        00            .byte	0
06685 17B9                        3C            .byte	$3C
06686 17BA                        66            .byte	$66
06687 17BB                        42            .byte	$42
06688 17BC                        42            .byte	$42
06689 17BD                        66            .byte	$66
06690 17BE                        3C            .byte	$3C
06691 17BF                        00            .byte	0
06692 17C0                        00            .byte	0
06693 17C1                        00            .byte	0
06694 17C2                        00            .byte	0
06695                                           ! 981  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06696 17C3                        FF            .byte	$FF
06697 17C4                        FF            .byte	$FF
06698 17C5                        FF            .byte	$FF
06699 17C6                        FF            .byte	$FF
06700 17C7                        C3            .byte	$C3
06701 17C8                        99            .byte	$99
06702 17C9                        BD            .byte	$BD
06703 17CA                        BD            .byte	$BD
06704 17CB                        99            .byte	$99
06705 17CC                        C3            .byte	$C3
06706 17CD                        FF            .byte	$FF
06707 17CE                        FF            .byte	$FF
06708 17CF                        FF            .byte	$FF
06709 17D0                        FF            .byte	$FF
06710                                           ! 982  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06711 17D1                        00            .byte	0
06712 17D2                        00            .byte	0
06713 17D3                        1E            .byte	$1E
06714 17D4                        0E            .byte	$E
06715 17D5                        1A            .byte	$1A
06716 17D6                        32            .byte	$32
06717 17D7                        78            .byte	$78
06718 17D8                        CC            .byte	$CC
06719 17D9                        CC            .byte	$CC
06720 17DA                        CC            .byte	$CC
06721 17DB                        78            .byte	$78
06722 17DC                        00            .byte	0
06723 17DD                        00            .byte	0
06724 17DE                        00            .byte	0
06725                                           ! 983  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06726 17DF                        00            .byte	0
06727 17E0                        00            .byte	0
06728 17E1                        3C            .byte	$3C
06729 17E2                        66            .byte	$66
06730 17E3                        66            .byte	$66
06731 17E4                        66            .byte	$66
06732 17E5                        3C            .byte	$3C
06733 17E6                        18            .byte	$18
06734 17E7                        7E            .byte	$7E
06735 17E8                        18            .byte	$18
06736 17E9                        18            .byte	$18
06737 17EA                        00            .byte	0
06738 17EB                        00            .byte	0
06739 17EC                        00            .byte	0
06740                                           ! 984  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
06741 17ED                        00            .byte	0
06742 17EE                        00            .byte	0
06743 17EF                        3F            .byte	$3F
06744 17F0                        33            .byte	$33
06745 17F1                        3F            .byte	$3F
06746 17F2                        30            .byte	$30
06747 17F3                        30            .byte	$30
06748 17F4                        30            .byte	$30
06749 17F5                        70            .byte	$70
06750 17F6                        F0            .byte	$F0
06751 17F7                        E0            .byte	$E0
06752 17F8                        00            .byte	0
06753 17F9                        00            .byte	0
06754 17FA                        00            .byte	0
06755                                           ! 985  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
06756 17FB                        00            .byte	0
06757 17FC                        00            .byte	0
06758 17FD                        7F            .byte	$7F
06759 17FE                        63            .byte	$63
06760 17FF                        7F            .byte	$7F
06761 1800                        63            .byte	$63
06762 1801                        63            .byte	$63
06763 1802                        63            .byte	$63
06764 1803                        67            .byte	$67
06765 1804                        E7            .byte	$E7
06766 1805                        E6            .byte	$E6
06767 1806                        C0            .byte	$C0
06768 1807                        00            .byte	0
06769 1808                        00            .byte	0
06770                                           ! 986  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
06771 1809                        00            .byte	0
06772 180A                        00            .byte	0
06773 180B                        18            .byte	$18
06774 180C                        18            .byte	$18
06775 180D                        DB            .byte	$DB
06776 180E                        3C            .byte	$3C
06777 180F                        E7            .byte	$E7
06778 1810                        3C            .byte	$3C
06779 1811                        DB            .byte	$DB
06780 1812                        18            .byte	$18
06781 1813                        18            .byte	$18
06782 1814                        00            .byte	0
06783 1815                        00            .byte	0
06784 1816                        00            .byte	0
06785                                           ! 987  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
06786 1817                        00            .byte	0
06787 1818                        00            .byte	0
06788 1819                        80            .byte	$80
06789 181A                        C0            .byte	$C0
06790 181B                        E0            .byte	$E0
06791 181C                        F8            .byte	$F8
06792 181D                        FE            .byte	$FE
06793 181E                        F8            .byte	$F8
06794 181F                        E0            .byte	$E0
06795 1820                        C0            .byte	$C0
06796 1821                        80            .byte	$80
06797 1822                        00            .byte	0
06798 1823                        00            .byte	0
06799 1824                        00            .byte	0
06800                                           ! 988  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
06801 1825                        00            .byte	0
06802 1826                        00            .byte	0
06803 1827                        02            .byte	2
06804 1828                        06            .byte	6
06805 1829                        0E            .byte	$E
06806 182A                        3E            .byte	$3E
06807 182B                        FE            .byte	$FE
06808 182C                        3E            .byte	$3E
06809 182D                        0E            .byte	$E
06810 182E                        06            .byte	6
06811 182F                        02            .byte	2
06812 1830                        00            .byte	0
06813 1831                        00            .byte	0
06814 1832                        00            .byte	0
06815                                           ! 989  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06816 1833                        00            .byte	0
06817 1834                        00            .byte	0
06818 1835                        18            .byte	$18
06819 1836                        3C            .byte	$3C
06820 1837                        7E            .byte	$7E
06821 1838                        18            .byte	$18
06822 1839                        18            .byte	$18
06823 183A                        18            .byte	$18
06824 183B                        7E            .byte	$7E
06825 183C                        3C            .byte	$3C
06826 183D                        18            .byte	$18
06827 183E                        00            .byte	0
06828 183F                        00            .byte	0
06829 1840                        00            .byte	0
06830                                           ! 990  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
06831 1841                        00            .byte	0
06832 1842                        00            .byte	0
06833 1843                        66            .byte	$66
06834 1844                        66            .byte	$66
06835 1845                        66            .byte	$66
06836 1846                        66            .byte	$66
06837 1847                        66            .byte	$66
06838 1848                        66            .byte	$66
06839 1849                        00            .byte	0
06840 184A                        66            .byte	$66
06841 184B                        66            .byte	$66
06842 184C                        00            .byte	0
06843 184D                        00            .byte	0
06844 184E                        00            .byte	0
06845                                           ! 991  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
06846 184F                        00            .byte	0
06847 1850                        00            .byte	0
06848 1851                        7F            .byte	$7F
06849 1852                        DB            .byte	$DB
06850 1853                        DB            .byte	$DB
06851 1854                        DB            .byte	$DB
06852 1855                        7B            .byte	$7B
06853 1856                        1B            .byte	$1B
06854 1857                        1B            .byte	$1B
06855 1858                        1B            .byte	$1B
06856 1859                        1B            .byte	$1B
06857 185A                        00            .byte	0
06858 185B                        00            .byte	0
06859 185C                        00            .byte	0
06860                                           ! 992  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
06861 185D                        00            .byte	0
06862 185E                        7C            .byte	$7C
06863 185F                        C6            .byte	$C6
06864 1860                        60            .byte	$60
06865 1861                        38            .byte	$38
06866 1862                        6C            .byte	$6C
06867 1863                        C6            .byte	$C6
06868 1864                        C6            .byte	$C6
06869 1865                        6C            .byte	$6C
06870 1866                        38            .byte	$38
06871 1867                        0C            .byte	$C
06872 1868                        C6            .byte	$C6
06873 1869                        7C            .byte	$7C
06874 186A                        00            .byte	0
06875                                           ! 993  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
06876 186B                        00            .byte	0
06877 186C                        00            .byte	0
06878 186D                        00            .byte	0
06879 186E                        00            .byte	0
06880 186F                        00            .byte	0
06881 1870                        00            .byte	0
06882 1871                        00            .byte	0
06883 1872                        00            .byte	0
06884 1873                        FE            .byte	$FE
06885 1874                        FE            .byte	$FE
06886 1875                        FE            .byte	$FE
06887 1876                        00            .byte	0
06888 1877                        00            .byte	0
06889 1878                        00            .byte	0
06890                                           ! 994  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
06891 1879                        00            .byte	0
06892 187A                        00            .byte	0
06893 187B                        18            .byte	$18
06894 187C                        3C            .byte	$3C
06895 187D                        7E            .byte	$7E
06896 187E                        18            .byte	$18
06897 187F                        18            .byte	$18
06898 1880                        18            .byte	$18
06899 1881                        7E            .byte	$7E
06900 1882                        3C            .byte	$3C
06901 1883                        18            .byte	$18
06902 1884                        7E            .byte	$7E
06903 1885                        00            .byte	0
06904 1886                        00            .byte	0
06905                                           ! 995  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
06906 1887                        00            .byte	0
06907 1888                        00            .byte	0
06908 1889                        18            .byte	$18
06909 188A                        3C            .byte	$3C
06910 188B                        7E            .byte	$7E
06911 188C                        18            .byte	$18
06912 188D                        18            .byte	$18
06913 188E                        18            .byte	$18
06914 188F                        18            .byte	$18
06915 1890                        18            .byte	$18
06916 1891                        18            .byte	$18
06917 1892                        00            .byte	0
06918 1893                        00            .byte	0
06919 1894                        00            .byte	0
06920                                           ! 996  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06921 1895                        00            .byte	0
06922 1896                        00            .byte	0
06923 1897                        18            .byte	$18
06924 1898                        18            .byte	$18
06925 1899                        18            .byte	$18
06926 189A                        18            .byte	$18
06927 189B                        18            .byte	$18
06928 189C                        18            .byte	$18
06929 189D                        7E            .byte	$7E
06930 189E                        3C            .byte	$3C
06931 189F                        18            .byte	$18
06932 18A0                        00            .byte	0
06933 18A1                        00            .byte	0
06934 18A2                        00            .byte	0
06935                                           ! 997  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06936 18A3                        00            .byte	0
06937 18A4                        00            .byte	0
06938 18A5                        00            .byte	0
06939 18A6                        00            .byte	0
06940 18A7                        18            .byte	$18
06941 18A8                        0C            .byte	$C
06942 18A9                        FE            .byte	$FE
06943 18AA                        0C            .byte	$C
06944 18AB                        18            .byte	$18
06945 18AC                        00            .byte	0
06946 18AD                        00            .byte	0
06947 18AE                        00            .byte	0
06948 18AF                        00            .byte	0
06949 18B0                        00            .byte	0
06950                                           ! 998  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
06951 18B1                        00            .byte	0
06952 18B2                        00            .byte	0
06953 18B3                        00            .byte	0
06954 18B4                        00            .byte	0
06955 18B5                        30            .byte	$30
06956 18B6                        60            .byte	$60
06957 18B7                        FE            .byte	$FE
06958 18B8                        60            .byte	$60
06959 18B9                        30            .byte	$30
06960 18BA                        00            .byte	0
06961 18BB                        00            .byte	0
06962 18BC                        00            .byte	0
06963 18BD                        00            .byte	0
06964 18BE                        00            .byte	0
06965                                           ! 999  0x00, 0x00, 0x
06966 18BF                        00            .byte	0
06967 18C0                        00            .byte	0
06968                                           ! 999 00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
06969 18C1                        00            .byte	0
06970 18C2                        00            .byte	0
06971 18C3                        00            .byte	0
06972 18C4                        C0            .byte	$C0
06973 18C5                        C0            .byte	$C0
06974 18C6                        C0            .byte	$C0
06975 18C7                        FE            .byte	$FE
06976 18C8                        00            .byte	0
06977 18C9                        00            .byte	0
06978 18CA                        00            .byte	0
06979 18CB                        00            .byte	0
06980 18CC                        00            .byte	0
06981                                           ! 1000  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
06982 18CD                        00            .byte	0
06983 18CE                        00            .byte	0
06984 18CF                        00            .byte	0
06985 18D0                        00            .byte	0
06986 18D1                        28            .byte	$28
06987 18D2                        6C            .byte	$6C
06988 18D3                        FE            .byte	$FE
06989 18D4                        6C            .byte	$6C
06990 18D5                        28            .byte	$28
06991 18D6                        00            .byte	0
06992 18D7                        00            .byte	0
06993 18D8                        00            .byte	0
06994 18D9                        00            .byte	0
06995 18DA                        00            .byte	0
06996                                           ! 1001  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
06997 18DB                        00            .byte	0
06998 18DC                        00            .byte	0
06999 18DD                        00            .byte	0
07000 18DE                        10            .byte	$10
07001 18DF                        38            .byte	$38
07002 18E0                        38            .byte	$38
07003 18E1                        7C            .byte	$7C
07004 18E2                        7C            .byte	$7C
07005 18E3                        FE            .byte	$FE
07006 18E4                        FE            .byte	$FE
07007 18E5                        00            .byte	0
07008 18E6                        00            .byte	0
07009 18E7                        00            .byte	0
07010 18E8                        00            .byte	0
07011                                           ! 1002  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07012 18E9                        00            .byte	0
07013 18EA                        00            .byte	0
07014 18EB                        00            .byte	0
07015 18EC                        FE            .byte	$FE
07016 18ED                        FE            .byte	$FE
07017 18EE                        7C            .byte	$7C
07018 18EF                        7C            .byte	$7C
07019 18F0                        38            .byte	$38
07020 18F1                        38            .byte	$38
07021 18F2                        10            .byte	$10
07022 18F3                        00            .byte	0
07023 18F4                        00            .byte	0
07024 18F5                        00            .byte	0
07025 18F6                        00            .byte	0
07026                                           ! 1003  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07027 18F7                        00            .byte	0
07028 18F8                        00            .byte	0
07029 18F9                        00            .byte	0
07030 18FA                        00            .byte	0
07031 18FB                        00            .byte	0
07032 18FC                        00            .byte	0
07033 18FD                        00            .byte	0
07034 18FE                        00            .byte	0
07035 18FF                        00            .byte	0
07036 1900                        00            .byte	0
07037 1901                        00            .byte	0
07038 1902                        00            .byte	0
07039 1903                        00            .byte	0
07040 1904                        00            .byte	0
07041                                           ! 1004  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07042 1905                        00            .byte	0
07043 1906                        00            .byte	0
07044 1907                        18            .byte	$18
07045 1908                        3C            .byte	$3C
07046 1909                        3C            .byte	$3C
07047 190A                        3C            .byte	$3C
07048 190B                        18            .byte	$18
07049 190C                        18            .byte	$18
07050 190D                        00            .byte	0
07051 190E                        18            .byte	$18
07052 190F                        18            .byte	$18
07053 1910                        00            .byte	0
07054 1911                        00            .byte	0
07055 1912                        00            .byte	0
07056                                           ! 1005  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07057 1913                        00            .byte	0
07058 1914                        66            .byte	$66
07059 1915                        66            .byte	$66
07060 1916                        66            .byte	$66
07061 1917                        24            .byte	$24
07062 1918                        00            .byte	0
07063 1919                        00            .byte	0
07064 191A                        00            .byte	0
07065 191B                        00            .byte	0
07066 191C                        00            .byte	0
07067 191D                        00            .byte	0
07068 191E                        00            .byte	0
07069 191F                        00            .byte	0
07070 1920                        00            .byte	0
07071                                           ! 1006  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07072 1921                        00            .byte	0
07073 1922                        00            .byte	0
07074 1923                        6C            .byte	$6C
07075 1924                        6C            .byte	$6C
07076 1925                        FE            .byte	$FE
07077 1926                        6C            .byte	$6C
07078 1927                        6C            .byte	$6C
07079 1928                        6C            .byte	$6C
07080 1929                        FE            .byte	$FE
07081 192A                        6C            .byte	$6C
07082 192B                        6C            .byte	$6C
07083 192C                        00            .byte	0
07084 192D                        00            .byte	0
07085 192E                        00            .byte	0
07086                                           ! 1007  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07087 192F                        18            .byte	$18
07088 1930                        18            .byte	$18
07089 1931                        7C            .byte	$7C
07090 1932                        C6            .byte	$C6
07091 1933                        C2            .byte	$C2
07092 1934                        C0            .byte	$C0
07093 1935                        7C            .byte	$7C
07094 1936                        06            .byte	6
07095 1937                        86            .byte	$86
07096 1938                        C6            .byte	$C6
07097 1939                        7C            .byte	$7C
07098 193A                        18            .byte	$18
07099 193B                        18            .byte	$18
07100 193C                        00            .byte	0
07101                                           ! 1008  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07102 193D                        00            .byte	0
07103 193E                        00            .byte	0
07104 193F                        00            .byte	0
07105 1940                        00            .byte	0
07106 1941                        C2            .byte	$C2
07107 1942                        C6            .byte	$C6
07108 1943                        0C            .byte	$C
07109 1944                        18            .byte	$18
07110 1945                        30            .byte	$30
07111 1946                        66            .byte	$66
07112 1947                        C6            .byte	$C6
07113 1948                        00            .byte	0
07114 1949                        00            .byte	0
07115 194A                        00            .byte	0
07116                                           ! 1009  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07117 194B                        00            .byte	0
07118 194C                        00            .byte	0
07119 194D                        38            .byte	$38
07120 194E                        6C            .byte	$6C
07121 194F                        6C            .byte	$6C
07122 1950                        38            .byte	$38
07123 1951                        76            .byte	$76
07124 1952                        DC            .byte	$DC
07125 1953                        CC            .byte	$CC
07126 1954                        CC            .byte	$CC
07127 1955                        76            .byte	$76
07128 1956                        00            .byte	0
07129 1957                        00            .byte	0
07130 1958                        00            .byte	0
07131                                           ! 1010  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07132 1959                        00            .byte	0
07133 195A                        30            .byte	$30
07134 195B                        30            .byte	$30
07135 195C                        30            .byte	$30
07136 195D                        60            .byte	$60
07137 195E                        00            .byte	0
07138 195F                        00            .byte	0
07139 1960                        00            .byte	0
07140 1961                        00            .byte	0
07141 1962                        00            .byte	0
07142 1963                        00            .byte	0
07143 1964                        00            .byte	0
07144 1965                        00            .byte	0
07145 1966                        00            .byte	0
07146                                           ! 1011  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07147 1967                        00            .byte	0
07148 1968                        00            .byte	0
07149 1969                        0C            .byte	$C
07150 196A                        18            .byte	$18
07151 196B                        30            .byte	$30
07152 196C                        30            .byte	$30
07153 196D                        30            .byte	$30
07154 196E                        30            .byte	$30
07155 196F                        30            .byte	$30
07156 1970                        18            .byte	$18
07157 1971                        0C            .byte	$C
07158 1972                        00            .byte	0
07159 1973                        00            .byte	0
07160 1974                        00            .byte	0
07161                                           ! 1012  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07162 1975                        00            .byte	0
07163 1976                        00            .byte	0
07164 1977                        30            .byte	$30
07165 1978                        18            .byte	$18
07166 1979                        0C            .byte	$C
07167 197A                        0C            .byte	$C
07168 197B                        0C            .byte	$C
07169 197C                        0C            .byte	$C
07170 197D                        0C            .byte	$C
07171 197E                        18            .byte	$18
07172 197F                        30            .byte	$30
07173 1980                        00            .byte	0
07174 1981                        00            .byte	0
07175 1982                        00            .byte	0
07176                                           ! 1013  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07177 1983                        00            .byte	0
07178 1984                        00            .byte	0
07179 1985                        00            .byte	0
07180 1986                        00            .byte	0
07181 1987                        66            .byte	$66
07182 1988                        3C            .byte	$3C
07183 1989                        FF            .byte	$FF
07184 198A                        3C            .byte	$3C
07185 198B                        66            .byte	$66
07186 198C                        00            .byte	0
07187 198D                        00            .byte	0
07188 198E                        00            .byte	0
07189 198F                        00            .byte	0
07190 1990                        00            .byte	0
07191                                           ! 1014  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07192 1991                        00            .byte	0
07193 1992                        00            .byte	0
07194 1993                        00            .byte	0
07195 1994                        00            .byte	0
07196 1995                        18            .byte	$18
07197 1996                        18            .byte	$18
07198 1997                        7E            .byte	$7E
07199 1998                        18            .byte	$18
07200 1999                        18            .byte	$18
07201 199A                        00            .byte	0
07202 199B                        00            .byte	0
07203 199C                        00            .byte	0
07204 199D                        00            .byte	0
07205 199E                        00            .byte	0
07206                                           ! 1015  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07207 199F                        00            .byte	0
07208 19A0                        00            .byte	0
07209 19A1                        00            .byte	0
07210 19A2                        00            .byte	0
07211 19A3                        00            .byte	0
07212 19A4                        00            .byte	0
07213 19A5                        00            .byte	0
07214 19A6                        00            .byte	0
07215 19A7                        18            .byte	$18
07216 19A8                        18            .byte	$18
07217 19A9                        18            .byte	$18
07218 19AA                        30            .byte	$30
07219 19AB                        00            .byte	0
07220 19AC                        00            .byte	0
07221                                           ! 1016  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07222 19AD                        00            .byte	0
07223 19AE                        00            .byte	0
07224 19AF                        00            .byte	0
07225 19B0                        00            .byte	0
07226 19B1                        00            .byte	0
07227 19B2                        00            .byte	0
07228 19B3                        FE            .byte	$FE
07229 19B4                        00            .byte	0
07230 19B5                        00            .byte	0
07231 19B6                        00            .byte	0
07232 19B7                        00            .byte	0
07233 19B8                        00            .byte	0
07234 19B9                        00            .byte	0
07235 19BA                        00            .byte	0
07236                                           ! 1017  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07237 19BB                        00            .byte	0
07238 19BC                        00            .byte	0
07239 19BD                        00            .byte	0
07240 19BE                        00            .byte	0
07241 19BF                        00            .byte	0
07242 19C0                        00            .byte	0
07243 19C1                        00            .byte	0
07244 19C2                        00            .byte	0
07245 19C3                        00            .byte	0
07246 19C4                        18            .byte	$18
07247 19C5                        18            .byte	$18
07248 19C6                        00            .byte	0
07249 19C7                        00            .byte	0
07250 19C8                        00            .byte	0
07251                                           ! 1018  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07252 19C9                        00            .byte	0
07253 19CA                        00            .byte	0
07254 19CB                        02            .byte	2
07255 19CC                        06            .byte	6
07256 19CD                        0C            .byte	$C
07257 19CE                        18            .byte	$18
07258 19CF                        30            .byte	$30
07259 19D0                        60            .byte	$60
07260 19D1                        C0            .byte	$C0
07261 19D2                        80            .byte	$80
07262 19D3                        00            .byte	0
07263 19D4                        00            .byte	0
07264 19D5                        00            .byte	0
07265 19D6                        00            .byte	0
07266                                           ! 1019  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07267 19D7                        00            .byte	0
07268 19D8                        00            .byte	0
07269 19D9                        7C            .byte	$7C
07270 19DA                        C6            .byte	$C6
07271 19DB                        CE            .byte	$CE
07272 19DC                        DE            .byte	$DE
07273 19DD                        F6            .byte	$F6
07274 19DE                        E6            .byte	$E6
07275 19DF                        C6            .byte	$C6
07276 19E0                        C6            .byte	$C6
07277 19E1                        7C            .byte	$7C
07278 19E2                        00            .byte	0
07279 19E3                        00            .byte	0
07280 19E4                        00            .byte	0
07281                                           ! 1020  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07282 19E5                        00            .byte	0
07283 19E6                        00            .byte	0
07284 19E7                        18            .byte	$18
07285 19E8                        38            .byte	$38
07286 19E9                        78            .byte	$78
07287 19EA                        18            .byte	$18
07288 19EB                        18            .byte	$18
07289 19EC                        18            .byte	$18
07290 19ED                        18            .byte	$18
07291 19EE                        18            .byte	$18
07292 19EF                        7E            .byte	$7E
07293 19F0                        00            .byte	0
07294 19F1                        00            .byte	0
07295 19F2                        00            .byte	0
07296                                           ! 1021  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07297 19F3                        00            .byte	0
07298 19F4                        00            .byte	0
07299 19F5                        7C            .byte	$7C
07300 19F6                        C6            .byte	$C6
07301 19F7                        06            .byte	6
07302 19F8                        0C            .byte	$C
07303 19F9                        18            .byte	$18
07304 19FA                        30            .byte	$30
07305 19FB                        60            .byte	$60
07306 19FC                        C6            .byte	$C6
07307 19FD                        FE            .byte	$FE
07308 19FE                        00            .byte	0
07309 19FF                        00            .byte	0
07310 1A00                        00            .byte	0
07311                                           ! 1022  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07312 1A01                        00            .byte	0
07313 1A02                        00            .byte	0
07314 1A03                        7C            .byte	$7C
07315 1A04                        C6            .byte	$C6
07316 1A05                        06            .byte	6
07317 1A06                        06            .byte	6
07318 1A07                        3C            .byte	$3C
07319 1A08                        06            .byte	6
07320 1A09                        06            .byte	6
07321 1A0A                        C6            .byte	$C6
07322 1A0B                        7C            .byte	$7C
07323 1A0C                        00            .byte	0
07324 1A0D                        00            .byte	0
07325 1A0E                        00            .byte	0
07326                                           ! 1023  0x00, 0x00, 0x0c, 0x1c
07327 1A0F                        00            .byte	0
07328 1A10                        00            .byte	0
07329 1A11                        0C            .byte	$C
07330                                           ! 1023 , 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07331 1A12                        1C            .byte	$1C
07332 1A13                        3C            .byte	$3C
07333 1A14                        6C            .byte	$6C
07334 1A15                        CC            .byte	$CC
07335 1A16                        FE            .byte	$FE
07336 1A17                        0C            .byte	$C
07337 1A18                        0C            .byte	$C
07338 1A19                        1E            .byte	$1E
07339 1A1A                        00            .byte	0
07340 1A1B                        00            .byte	0
07341 1A1C                        00            .byte	0
07342                                           ! 1024  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07343 1A1D                        00            .byte	0
07344 1A1E                        00            .byte	0
07345 1A1F                        FE            .byte	$FE
07346 1A20                        C0            .byte	$C0
07347 1A21                        C0            .byte	$C0
07348 1A22                        C0            .byte	$C0
07349 1A23                        FC            .byte	$FC
07350 1A24                        06            .byte	6
07351 1A25                        06            .byte	6
07352 1A26                        C6            .byte	$C6
07353 1A27                        7C            .byte	$7C
07354 1A28                        00            .byte	0
07355 1A29                        00            .byte	0
07356 1A2A                        00            .byte	0
07357                                           ! 1025  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07358 1A2B                        00            .byte	0
07359 1A2C                        00            .byte	0
07360 1A2D                        38            .byte	$38
07361 1A2E                        60            .byte	$60
07362 1A2F                        C0            .byte	$C0
07363 1A30                        C0            .byte	$C0
07364 1A31                        FC            .byte	$FC
07365 1A32                        C6            .byte	$C6
07366 1A33                        C6            .byte	$C6
07367 1A34                        C6            .byte	$C6
07368 1A35                        7C            .byte	$7C
07369 1A36                        00            .byte	0
07370 1A37                        00            .byte	0
07371 1A38                        00            .byte	0
07372                                           ! 1026  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07373 1A39                        00            .byte	0
07374 1A3A                        00            .byte	0
07375 1A3B                        FE            .byte	$FE
07376 1A3C                        C6            .byte	$C6
07377 1A3D                        06            .byte	6
07378 1A3E                        0C            .byte	$C
07379 1A3F                        18            .byte	$18
07380 1A40                        30            .byte	$30
07381 1A41                        30            .byte	$30
07382 1A42                        30            .byte	$30
07383 1A43                        30            .byte	$30
07384 1A44                        00            .byte	0
07385 1A45                        00            .byte	0
07386 1A46                        00            .byte	0
07387                                           ! 1027  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07388 1A47                        00            .byte	0
07389 1A48                        00            .byte	0
07390 1A49                        7C            .byte	$7C
07391 1A4A                        C6            .byte	$C6
07392 1A4B                        C6            .byte	$C6
07393 1A4C                        C6            .byte	$C6
07394 1A4D                        7C            .byte	$7C
07395 1A4E                        C6            .byte	$C6
07396 1A4F                        C6            .byte	$C6
07397 1A50                        C6            .byte	$C6
07398 1A51                        7C            .byte	$7C
07399 1A52                        00            .byte	0
07400 1A53                        00            .byte	0
07401 1A54                        00            .byte	0
07402                                           ! 1028  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07403 1A55                        00            .byte	0
07404 1A56                        00            .byte	0
07405 1A57                        7C            .byte	$7C
07406 1A58                        C6            .byte	$C6
07407 1A59                        C6            .byte	$C6
07408 1A5A                        C6            .byte	$C6
07409 1A5B                        7E            .byte	$7E
07410 1A5C                        06            .byte	6
07411 1A5D                        06            .byte	6
07412 1A5E                        0C            .byte	$C
07413 1A5F                        78            .byte	$78
07414 1A60                        00            .byte	0
07415 1A61                        00            .byte	0
07416 1A62                        00            .byte	0
07417                                           ! 1029  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07418 1A63                        00            .byte	0
07419 1A64                        00            .byte	0
07420 1A65                        00            .byte	0
07421 1A66                        18            .byte	$18
07422 1A67                        18            .byte	$18
07423 1A68                        00            .byte	0
07424 1A69                        00            .byte	0
07425 1A6A                        00            .byte	0
07426 1A6B                        18            .byte	$18
07427 1A6C                        18            .byte	$18
07428 1A6D                        00            .byte	0
07429 1A6E                        00            .byte	0
07430 1A6F                        00            .byte	0
07431 1A70                        00            .byte	0
07432                                           ! 1030  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07433 1A71                        00            .byte	0
07434 1A72                        00            .byte	0
07435 1A73                        00            .byte	0
07436 1A74                        18            .byte	$18
07437 1A75                        18            .byte	$18
07438 1A76                        00            .byte	0
07439 1A77                        00            .byte	0
07440 1A78                        00            .byte	0
07441 1A79                        18            .byte	$18
07442 1A7A                        18            .byte	$18
07443 1A7B                        30            .byte	$30
07444 1A7C                        00            .byte	0
07445 1A7D                        00            .byte	0
07446 1A7E                        00            .byte	0
07447                                           ! 1031  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07448 1A7F                        00            .byte	0
07449 1A80                        00            .byte	0
07450 1A81                        06            .byte	6
07451 1A82                        0C            .byte	$C
07452 1A83                        18            .byte	$18
07453 1A84                        30            .byte	$30
07454 1A85                        60            .byte	$60
07455 1A86                        30            .byte	$30
07456 1A87                        18            .byte	$18
07457 1A88                        0C            .byte	$C
07458 1A89                        06            .byte	6
07459 1A8A                        00            .byte	0
07460 1A8B                        00            .byte	0
07461 1A8C                        00            .byte	0
07462                                           ! 1032  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07463 1A8D                        00            .byte	0
07464 1A8E                        00            .byte	0
07465 1A8F                        00            .byte	0
07466 1A90                        00            .byte	0
07467 1A91                        00            .byte	0
07468 1A92                        7E            .byte	$7E
07469 1A93                        00            .byte	0
07470 1A94                        00            .byte	0
07471 1A95                        7E            .byte	$7E
07472 1A96                        00            .byte	0
07473 1A97                        00            .byte	0
07474 1A98                        00            .byte	0
07475 1A99                        00            .byte	0
07476 1A9A                        00            .byte	0
07477                                           ! 1033  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07478 1A9B                        00            .byte	0
07479 1A9C                        00            .byte	0
07480 1A9D                        60            .byte	$60
07481 1A9E                        30            .byte	$30
07482 1A9F                        18            .byte	$18
07483 1AA0                        0C            .byte	$C
07484 1AA1                        06            .byte	6
07485 1AA2                        0C            .byte	$C
07486 1AA3                        18            .byte	$18
07487 1AA4                        30            .byte	$30
07488 1AA5                        60            .byte	$60
07489 1AA6                        00            .byte	0
07490 1AA7                        00            .byte	0
07491 1AA8                        00            .byte	0
07492                                           ! 1034  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07493 1AA9                        00            .byte	0
07494 1AAA                        00            .byte	0
07495 1AAB                        7C            .byte	$7C
07496 1AAC                        C6            .byte	$C6
07497 1AAD                        C6            .byte	$C6
07498 1AAE                        0C            .byte	$C
07499 1AAF                        18            .byte	$18
07500 1AB0                        18            .byte	$18
07501 1AB1                        00            .byte	0
07502 1AB2                        18            .byte	$18
07503 1AB3                        18            .byte	$18
07504 1AB4                        00            .byte	0
07505 1AB5                        00            .byte	0
07506 1AB6                        00            .byte	0
07507                                           ! 1035  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07508 1AB7                        00            .byte	0
07509 1AB8                        00            .byte	0
07510 1AB9                        7C            .byte	$7C
07511 1ABA                        C6            .byte	$C6
07512 1ABB                        C6            .byte	$C6
07513 1ABC                        DE            .byte	$DE
07514 1ABD                        DE            .byte	$DE
07515 1ABE                        DE            .byte	$DE
07516 1ABF                        DC            .byte	$DC
07517 1AC0                        C0            .byte	$C0
07518 1AC1                        7C            .byte	$7C
07519 1AC2                        00            .byte	0
07520 1AC3                        00            .byte	0
07521 1AC4                        00            .byte	0
07522                                           ! 1036  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07523 1AC5                        00            .byte	0
07524 1AC6                        00            .byte	0
07525 1AC7                        10            .byte	$10
07526 1AC8                        38            .byte	$38
07527 1AC9                        6C            .byte	$6C
07528 1ACA                        C6            .byte	$C6
07529 1ACB                        C6            .byte	$C6
07530 1ACC                        FE            .byte	$FE
07531 1ACD                        C6            .byte	$C6
07532 1ACE                        C6            .byte	$C6
07533 1ACF                        C6            .byte	$C6
07534 1AD0                        00            .byte	0
07535 1AD1                        00            .byte	0
07536 1AD2                        00            .byte	0
07537                                           ! 1037  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07538 1AD3                        00            .byte	0
07539 1AD4                        00            .byte	0
07540 1AD5                        FC            .byte	$FC
07541 1AD6                        66            .byte	$66
07542 1AD7                        66            .byte	$66
07543 1AD8                        66            .byte	$66
07544 1AD9                        7C            .byte	$7C
07545 1ADA                        66            .byte	$66
07546 1ADB                        66            .byte	$66
07547 1ADC                        66            .byte	$66
07548 1ADD                        FC            .byte	$FC
07549 1ADE                        00            .byte	0
07550 1ADF                        00            .byte	0
07551 1AE0                        00            .byte	0
07552                                           ! 1038  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07553 1AE1                        00            .byte	0
07554 1AE2                        00            .byte	0
07555 1AE3                        3C            .byte	$3C
07556 1AE4                        66            .byte	$66
07557 1AE5                        C2            .byte	$C2
07558 1AE6                        C0            .byte	$C0
07559 1AE7                        C0            .byte	$C0
07560 1AE8                        C0            .byte	$C0
07561 1AE9                        C2            .byte	$C2
07562 1AEA                        66            .byte	$66
07563 1AEB                        3C            .byte	$3C
07564 1AEC                        00            .byte	0
07565 1AED                        00            .byte	0
07566 1AEE                        00            .byte	0
07567                                           ! 1039  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07568 1AEF                        00            .byte	0
07569 1AF0                        00            .byte	0
07570 1AF1                        F8            .byte	$F8
07571 1AF2                        6C            .byte	$6C
07572 1AF3                        66            .byte	$66
07573 1AF4                        66            .byte	$66
07574 1AF5                        66            .byte	$66
07575 1AF6                        66            .byte	$66
07576 1AF7                        66            .byte	$66
07577 1AF8                        6C            .byte	$6C
07578 1AF9                        F8            .byte	$F8
07579 1AFA                        00            .byte	0
07580 1AFB                        00            .byte	0
07581 1AFC                        00            .byte	0
07582                                           ! 1040  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07583 1AFD                        00            .byte	0
07584 1AFE                        00            .byte	0
07585 1AFF                        FE            .byte	$FE
07586 1B00                        66            .byte	$66
07587 1B01                        62            .byte	$62
07588 1B02                        68            .byte	$68
07589 1B03                        78            .byte	$78
07590 1B04                        68            .byte	$68
07591 1B05                        62            .byte	$62
07592 1B06                        66            .byte	$66
07593 1B07                        FE            .byte	$FE
07594 1B08                        00            .byte	0
07595 1B09                        00            .byte	0
07596 1B0A                        00            .byte	0
07597                                           ! 1041  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07598 1B0B                        00            .byte	0
07599 1B0C                        00            .byte	0
07600 1B0D                        FE            .byte	$FE
07601 1B0E                        66            .byte	$66
07602 1B0F                        62            .byte	$62
07603 1B10                        68            .byte	$68
07604 1B11                        78            .byte	$78
07605 1B12                        68            .byte	$68
07606 1B13                        60            .byte	$60
07607 1B14                        60            .byte	$60
07608 1B15                        F0            .byte	$F0
07609 1B16                        00            .byte	0
07610 1B17                        00            .byte	0
07611 1B18                        00            .byte	0
07612                                           ! 1042  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07613 1B19                        00            .byte	0
07614 1B1A                        00            .byte	0
07615 1B1B                        3C            .byte	$3C
07616 1B1C                        66            .byte	$66
07617 1B1D                        C2            .byte	$C2
07618 1B1E                        C0            .byte	$C0
07619 1B1F                        C0            .byte	$C0
07620 1B20                        DE            .byte	$DE
07621 1B21                        C6            .byte	$C6
07622 1B22                        66            .byte	$66
07623 1B23                        3A            .byte	$3A
07624 1B24                        00            .byte	0
07625 1B25                        00            .byte	0
07626 1B26                        00            .byte	0
07627                                           ! 1043  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07628 1B27                        00            .byte	0
07629 1B28                        00            .byte	0
07630 1B29                        C6            .byte	$C6
07631 1B2A                        C6            .byte	$C6
07632 1B2B                        C6            .byte	$C6
07633 1B2C                        C6            .byte	$C6
07634 1B2D                        FE            .byte	$FE
07635 1B2E                        C6            .byte	$C6
07636 1B2F                        C6            .byte	$C6
07637 1B30                        C6            .byte	$C6
07638 1B31                        C6            .byte	$C6
07639 1B32                        00            .byte	0
07640 1B33                        00            .byte	0
07641 1B34                        00            .byte	0
07642                                           ! 1044  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07643 1B35                        00            .byte	0
07644 1B36                        00            .byte	0
07645 1B37                        3C            .byte	$3C
07646 1B38                        18            .byte	$18
07647 1B39                        18            .byte	$18
07648 1B3A                        18            .byte	$18
07649 1B3B                        18            .byte	$18
07650 1B3C                        18            .byte	$18
07651 1B3D                        18            .byte	$18
07652 1B3E                        18            .byte	$18
07653 1B3F                        3C            .byte	$3C
07654 1B40                        00            .byte	0
07655 1B41                        00            .byte	0
07656 1B42                        00            .byte	0
07657                                           ! 1045  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07658 1B43                        00            .byte	0
07659 1B44                        00            .byte	0
07660 1B45                        1E            .byte	$1E
07661 1B46                        0C            .byte	$C
07662 1B47                        0C            .byte	$C
07663 1B48                        0C            .byte	$C
07664 1B49                        0C            .byte	$C
07665 1B4A                        0C            .byte	$C
07666 1B4B                        CC            .byte	$CC
07667 1B4C                        CC            .byte	$CC
07668 1B4D                        78            .byte	$78
07669 1B4E                        00            .byte	0
07670 1B4F                        00            .byte	0
07671 1B50                        00            .byte	0
07672                                           ! 1046  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07673 1B51                        00            .byte	0
07674 1B52                        00            .byte	0
07675 1B53                        E6            .byte	$E6
07676 1B54                        66            .byte	$66
07677 1B55                        6C            .byte	$6C
07678 1B56                        6C            .byte	$6C
07679 1B57                        78            .byte	$78
07680 1B58                        6C            .byte	$6C
07681 1B59                        6C            .byte	$6C
07682 1B5A                        66            .byte	$66
07683 1B5B                        E6            .byte	$E6
07684 1B5C                        00            .byte	0
07685 1B5D                        00            .byte	0
07686 1B5E                        00            .byte	0
07687                                           ! 1047  0x00, 0x00, 0xf0, 0x60, 0x60, 
07688 1B5F                        00            .byte	0
07689 1B60                        00            .byte	0
07690 1B61                        F0            .byte	$F0
07691 1B62                        60            .byte	$60
07692 1B63                        60            .byte	$60
07693                                           ! 1047 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07694 1B64                        60            .byte	$60
07695 1B65                        60            .byte	$60
07696 1B66                        60            .byte	$60
07697 1B67                        62            .byte	$62
07698 1B68                        66            .byte	$66
07699 1B69                        FE            .byte	$FE
07700 1B6A                        00            .byte	0
07701 1B6B                        00            .byte	0
07702 1B6C                        00            .byte	0
07703                                           ! 1048  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07704 1B6D                        00            .byte	0
07705 1B6E                        00            .byte	0
07706 1B6F                        C6            .byte	$C6
07707 1B70                        EE            .byte	$EE
07708 1B71                        FE            .byte	$FE
07709 1B72                        FE            .byte	$FE
07710 1B73                        D6            .byte	$D6
07711 1B74                        C6            .byte	$C6
07712 1B75                        C6            .byte	$C6
07713 1B76                        C6            .byte	$C6
07714 1B77                        C6            .byte	$C6
07715 1B78                        00            .byte	0
07716 1B79                        00            .byte	0
07717 1B7A                        00            .byte	0
07718                                           ! 1049  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07719 1B7B                        00            .byte	0
07720 1B7C                        00            .byte	0
07721 1B7D                        C6            .byte	$C6
07722 1B7E                        E6            .byte	$E6
07723 1B7F                        F6            .byte	$F6
07724 1B80                        FE            .byte	$FE
07725 1B81                        DE            .byte	$DE
07726 1B82                        CE            .byte	$CE
07727 1B83                        C6            .byte	$C6
07728 1B84                        C6            .byte	$C6
07729 1B85                        C6            .byte	$C6
07730 1B86                        00            .byte	0
07731 1B87                        00            .byte	0
07732 1B88                        00            .byte	0
07733                                           ! 1050  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
07734 1B89                        00            .byte	0
07735 1B8A                        00            .byte	0
07736 1B8B                        38            .byte	$38
07737 1B8C                        6C            .byte	$6C
07738 1B8D                        C6            .byte	$C6
07739 1B8E                        C6            .byte	$C6
07740 1B8F                        C6            .byte	$C6
07741 1B90                        C6            .byte	$C6
07742 1B91                        C6            .byte	$C6
07743 1B92                        6C            .byte	$6C
07744 1B93                        38            .byte	$38
07745 1B94                        00            .byte	0
07746 1B95                        00            .byte	0
07747 1B96                        00            .byte	0
07748                                           ! 1051  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07749 1B97                        00            .byte	0
07750 1B98                        00            .byte	0
07751 1B99                        FC            .byte	$FC
07752 1B9A                        66            .byte	$66
07753 1B9B                        66            .byte	$66
07754 1B9C                        66            .byte	$66
07755 1B9D                        7C            .byte	$7C
07756 1B9E                        60            .byte	$60
07757 1B9F                        60            .byte	$60
07758 1BA0                        60            .byte	$60
07759 1BA1                        F0            .byte	$F0
07760 1BA2                        00            .byte	0
07761 1BA3                        00            .byte	0
07762 1BA4                        00            .byte	0
07763                                           ! 1052  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
07764 1BA5                        00            .byte	0
07765 1BA6                        00            .byte	0
07766 1BA7                        7C            .byte	$7C
07767 1BA8                        C6            .byte	$C6
07768 1BA9                        C6            .byte	$C6
07769 1BAA                        C6            .byte	$C6
07770 1BAB                        C6            .byte	$C6
07771 1BAC                        D6            .byte	$D6
07772 1BAD                        DE            .byte	$DE
07773 1BAE                        7C            .byte	$7C
07774 1BAF                        0C            .byte	$C
07775 1BB0                        0E            .byte	$E
07776 1BB1                        00            .byte	0
07777 1BB2                        00            .byte	0
07778                                           ! 1053  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
07779 1BB3                        00            .byte	0
07780 1BB4                        00            .byte	0
07781 1BB5                        FC            .byte	$FC
07782 1BB6                        66            .byte	$66
07783 1BB7                        66            .byte	$66
07784 1BB8                        66            .byte	$66
07785 1BB9                        7C            .byte	$7C
07786 1BBA                        6C            .byte	$6C
07787 1BBB                        66            .byte	$66
07788 1BBC                        66            .byte	$66
07789 1BBD                        E6            .byte	$E6
07790 1BBE                        00            .byte	0
07791 1BBF                        00            .byte	0
07792 1BC0                        00            .byte	0
07793                                           ! 1054  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07794 1BC1                        00            .byte	0
07795 1BC2                        00            .byte	0
07796 1BC3                        7C            .byte	$7C
07797 1BC4                        C6            .byte	$C6
07798 1BC5                        C6            .byte	$C6
07799 1BC6                        60            .byte	$60
07800 1BC7                        38            .byte	$38
07801 1BC8                        0C            .byte	$C
07802 1BC9                        C6            .byte	$C6
07803 1BCA                        C6            .byte	$C6
07804 1BCB                        7C            .byte	$7C
07805 1BCC                        00            .byte	0
07806 1BCD                        00            .byte	0
07807 1BCE                        00            .byte	0
07808                                           ! 1055  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07809 1BCF                        00            .byte	0
07810 1BD0                        00            .byte	0
07811 1BD1                        7E            .byte	$7E
07812 1BD2                        7E            .byte	$7E
07813 1BD3                        5A            .byte	$5A
07814 1BD4                        18            .byte	$18
07815 1BD5                        18            .byte	$18
07816 1BD6                        18            .byte	$18
07817 1BD7                        18            .byte	$18
07818 1BD8                        18            .byte	$18
07819 1BD9                        3C            .byte	$3C
07820 1BDA                        00            .byte	0
07821 1BDB                        00            .byte	0
07822 1BDC                        00            .byte	0
07823                                           ! 1056  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07824 1BDD                        00            .byte	0
07825 1BDE                        00            .byte	0
07826 1BDF                        C6            .byte	$C6
07827 1BE0                        C6            .byte	$C6
07828 1BE1                        C6            .byte	$C6
07829 1BE2                        C6            .byte	$C6
07830 1BE3                        C6            .byte	$C6
07831 1BE4                        C6            .byte	$C6
07832 1BE5                        C6            .byte	$C6
07833 1BE6                        C6            .byte	$C6
07834 1BE7                        7C            .byte	$7C
07835 1BE8                        00            .byte	0
07836 1BE9                        00            .byte	0
07837 1BEA                        00            .byte	0
07838                                           ! 1057  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
07839 1BEB                        00            .byte	0
07840 1BEC                        00            .byte	0
07841 1BED                        C6            .byte	$C6
07842 1BEE                        C6            .byte	$C6
07843 1BEF                        C6            .byte	$C6
07844 1BF0                        C6            .byte	$C6
07845 1BF1                        C6            .byte	$C6
07846 1BF2                        C6            .byte	$C6
07847 1BF3                        6C            .byte	$6C
07848 1BF4                        38            .byte	$38
07849 1BF5                        10            .byte	$10
07850 1BF6                        00            .byte	0
07851 1BF7                        00            .byte	0
07852 1BF8                        00            .byte	0
07853                                           ! 1058  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
07854 1BF9                        00            .byte	0
07855 1BFA                        00            .byte	0
07856 1BFB                        C6            .byte	$C6
07857 1BFC                        C6            .byte	$C6
07858 1BFD                        C6            .byte	$C6
07859 1BFE                        C6            .byte	$C6
07860 1BFF                        D6            .byte	$D6
07861 1C00                        D6            .byte	$D6
07862 1C01                        FE            .byte	$FE
07863 1C02                        7C            .byte	$7C
07864 1C03                        6C            .byte	$6C
07865 1C04                        00            .byte	0
07866 1C05                        00            .byte	0
07867 1C06                        00            .byte	0
07868                                           ! 1059  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07869 1C07                        00            .byte	0
07870 1C08                        00            .byte	0
07871 1C09                        C6            .byte	$C6
07872 1C0A                        C6            .byte	$C6
07873 1C0B                        6C            .byte	$6C
07874 1C0C                        38            .byte	$38
07875 1C0D                        38            .byte	$38
07876 1C0E                        38            .byte	$38
07877 1C0F                        6C            .byte	$6C
07878 1C10                        C6            .byte	$C6
07879 1C11                        C6            .byte	$C6
07880 1C12                        00            .byte	0
07881 1C13                        00            .byte	0
07882 1C14                        00            .byte	0
07883                                           ! 1060  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07884 1C15                        00            .byte	0
07885 1C16                        00            .byte	0
07886 1C17                        66            .byte	$66
07887 1C18                        66            .byte	$66
07888 1C19                        66            .byte	$66
07889 1C1A                        66            .byte	$66
07890 1C1B                        3C            .byte	$3C
07891 1C1C                        18            .byte	$18
07892 1C1D                        18            .byte	$18
07893 1C1E                        18            .byte	$18
07894 1C1F                        3C            .byte	$3C
07895 1C20                        00            .byte	0
07896 1C21                        00            .byte	0
07897 1C22                        00            .byte	0
07898                                           ! 1061  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07899 1C23                        00            .byte	0
07900 1C24                        00            .byte	0
07901 1C25                        FE            .byte	$FE
07902 1C26                        C6            .byte	$C6
07903 1C27                        8C            .byte	$8C
07904 1C28                        18            .byte	$18
07905 1C29                        30            .byte	$30
07906 1C2A                        60            .byte	$60
07907 1C2B                        C2            .byte	$C2
07908 1C2C                        C6            .byte	$C6
07909 1C2D                        FE            .byte	$FE
07910 1C2E                        00            .byte	0
07911 1C2F                        00            .byte	0
07912 1C30                        00            .byte	0
07913                                           ! 1062  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
07914 1C31                        00            .byte	0
07915 1C32                        00            .byte	0
07916 1C33                        3C            .byte	$3C
07917 1C34                        30            .byte	$30
07918 1C35                        30            .byte	$30
07919 1C36                        30            .byte	$30
07920 1C37                        30            .byte	$30
07921 1C38                        30            .byte	$30
07922 1C39                        30            .byte	$30
07923 1C3A                        30            .byte	$30
07924 1C3B                        3C            .byte	$3C
07925 1C3C                        00            .byte	0
07926 1C3D                        00            .byte	0
07927 1C3E                        00            .byte	0
07928                                           ! 1063  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07929 1C3F                        00            .byte	0
07930 1C40                        00            .byte	0
07931 1C41                        80            .byte	$80
07932 1C42                        C0            .byte	$C0
07933 1C43                        E0            .byte	$E0
07934 1C44                        70            .byte	$70
07935 1C45                        38            .byte	$38
07936 1C46                        1C            .byte	$1C
07937 1C47                        0E            .byte	$E
07938 1C48                        06            .byte	6
07939 1C49                        02            .byte	2
07940 1C4A                        00            .byte	0
07941 1C4B                        00            .byte	0
07942 1C4C                        00            .byte	0
07943                                           ! 1064  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
07944 1C4D                        00            .byte	0
07945 1C4E                        00            .byte	0
07946 1C4F                        3C            .byte	$3C
07947 1C50                        0C            .byte	$C
07948 1C51                        0C            .byte	$C
07949 1C52                        0C            .byte	$C
07950 1C53                        0C            .byte	$C
07951 1C54                        0C            .byte	$C
07952 1C55                        0C            .byte	$C
07953 1C56                        0C            .byte	$C
07954 1C57                        3C            .byte	$3C
07955 1C58                        00            .byte	0
07956 1C59                        00            .byte	0
07957 1C5A                        00            .byte	0
07958                                           ! 1065  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07959 1C5B                        10            .byte	$10
07960 1C5C                        38            .byte	$38
07961 1C5D                        6C            .byte	$6C
07962 1C5E                        C6            .byte	$C6
07963 1C5F                        00            .byte	0
07964 1C60                        00            .byte	0
07965 1C61                        00            .byte	0
07966 1C62                        00            .byte	0
07967 1C63                        00            .byte	0
07968 1C64                        00            .byte	0
07969 1C65                        00            .byte	0
07970 1C66                        00            .byte	0
07971 1C67                        00            .byte	0
07972 1C68                        00            .byte	0
07973                                           ! 1066  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
07974 1C69                        00            .byte	0
07975 1C6A                        00            .byte	0
07976 1C6B                        00            .byte	0
07977 1C6C                        00            .byte	0
07978 1C6D                        00            .byte	0
07979 1C6E                        00            .byte	0
07980 1C6F                        00            .byte	0
07981 1C70                        00            .byte	0
07982 1C71                        00            .byte	0
07983 1C72                        00            .byte	0
07984 1C73                        00            .byte	0
07985 1C74                        00            .byte	0
07986 1C75                        FF            .byte	$FF
07987 1C76                        00            .byte	0
07988                                           ! 1067  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07989 1C77                        30            .byte	$30
07990 1C78                        30            .byte	$30
07991 1C79                        18            .byte	$18
07992 1C7A                        00            .byte	0
07993 1C7B                        00            .byte	0
07994 1C7C                        00            .byte	0
07995 1C7D                        00            .byte	0
07996 1C7E                        00            .byte	0
07997 1C7F                        00            .byte	0
07998 1C80                        00            .byte	0
07999 1C81                        00            .byte	0
08000 1C82                        00            .byte	0
08001 1C83                        00            .byte	0
08002 1C84                        00            .byte	0
08003                                           ! 1068  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08004 1C85                        00            .byte	0
08005 1C86                        00            .byte	0
08006 1C87                        00            .byte	0
08007 1C88                        00            .byte	0
08008 1C89                        00            .byte	0
08009 1C8A                        78            .byte	$78
08010 1C8B                        0C            .byte	$C
08011 1C8C                        7C            .byte	$7C
08012 1C8D                        CC            .byte	$CC
08013 1C8E                        CC            .byte	$CC
08014 1C8F                        76            .byte	$76
08015 1C90                        00            .byte	0
08016 1C91                        00            .byte	0
08017 1C92                        00            .byte	0
08018                                           ! 1069  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08019 1C93                        00            .byte	0
08020 1C94                        00            .byte	0
08021 1C95                        E0            .byte	$E0
08022 1C96                        60            .byte	$60
08023 1C97                        60            .byte	$60
08024 1C98                        78            .byte	$78
08025 1C99                        6C            .byte	$6C
08026 1C9A                        66            .byte	$66
08027 1C9B                        66            .byte	$66
08028 1C9C                        66            .byte	$66
08029 1C9D                        7C            .byte	$7C
08030 1C9E                        00            .byte	0
08031 1C9F                        00            .byte	0
08032 1CA0                        00            .byte	0
08033                                           ! 1070  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08034 1CA1                        00            .byte	0
08035 1CA2                        00            .byte	0
08036 1CA3                        00            .byte	0
08037 1CA4                        00            .byte	0
08038 1CA5                        00            .byte	0
08039 1CA6                        7C            .byte	$7C
08040 1CA7                        C6            .byte	$C6
08041 1CA8                        C0            .byte	$C0
08042 1CA9                        C0            .byte	$C0
08043 1CAA                        C6            .byte	$C6
08044 1CAB                        7C            .byte	$7C
08045 1CAC                        00            .byte	0
08046 1CAD                        00            .byte	0
08047 1CAE                        00            .byte	0
08048                                           ! 1071  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x
08049 1CAF                        00            .byte	0
08050 1CB0                        00            .byte	0
08051 1CB1                        1C            .byte	$1C
08052 1CB2                        0C            .byte	$C
08053 1CB3                        0C            .byte	$C
08054 1CB4                        3C            .byte	$3C
08055                                           ! 1071 6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08056 1CB5                        6C            .byte	$6C
08057 1CB6                        CC            .byte	$CC
08058 1CB7                        CC            .byte	$CC
08059 1CB8                        CC            .byte	$CC
08060 1CB9                        76            .byte	$76
08061 1CBA                        00            .byte	0
08062 1CBB                        00            .byte	0
08063 1CBC                        00            .byte	0
08064                                           ! 1072  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08065 1CBD                        00            .byte	0
08066 1CBE                        00            .byte	0
08067 1CBF                        00            .byte	0
08068 1CC0                        00            .byte	0
08069 1CC1                        00            .byte	0
08070 1CC2                        7C            .byte	$7C
08071 1CC3                        C6            .byte	$C6
08072 1CC4                        FE            .byte	$FE
08073 1CC5                        C0            .byte	$C0
08074 1CC6                        C6            .byte	$C6
08075 1CC7                        7C            .byte	$7C
08076 1CC8                        00            .byte	0
08077 1CC9                        00            .byte	0
08078 1CCA                        00            .byte	0
08079                                           ! 1073  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08080 1CCB                        00            .byte	0
08081 1CCC                        00            .byte	0
08082 1CCD                        38            .byte	$38
08083 1CCE                        6C            .byte	$6C
08084 1CCF                        64            .byte	$64
08085 1CD0                        60            .byte	$60
08086 1CD1                        F0            .byte	$F0
08087 1CD2                        60            .byte	$60
08088 1CD3                        60            .byte	$60
08089 1CD4                        60            .byte	$60
08090 1CD5                        F0            .byte	$F0
08091 1CD6                        00            .byte	0
08092 1CD7                        00            .byte	0
08093 1CD8                        00            .byte	0
08094                                           ! 1074  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08095 1CD9                        00            .byte	0
08096 1CDA                        00            .byte	0
08097 1CDB                        00            .byte	0
08098 1CDC                        00            .byte	0
08099 1CDD                        00            .byte	0
08100 1CDE                        76            .byte	$76
08101 1CDF                        CC            .byte	$CC
08102 1CE0                        CC            .byte	$CC
08103 1CE1                        CC            .byte	$CC
08104 1CE2                        7C            .byte	$7C
08105 1CE3                        0C            .byte	$C
08106 1CE4                        CC            .byte	$CC
08107 1CE5                        78            .byte	$78
08108 1CE6                        00            .byte	0
08109                                           ! 1075  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08110 1CE7                        00            .byte	0
08111 1CE8                        00            .byte	0
08112 1CE9                        E0            .byte	$E0
08113 1CEA                        60            .byte	$60
08114 1CEB                        60            .byte	$60
08115 1CEC                        6C            .byte	$6C
08116 1CED                        76            .byte	$76
08117 1CEE                        66            .byte	$66
08118 1CEF                        66            .byte	$66
08119 1CF0                        66            .byte	$66
08120 1CF1                        E6            .byte	$E6
08121 1CF2                        00            .byte	0
08122 1CF3                        00            .byte	0
08123 1CF4                        00            .byte	0
08124                                           ! 1076  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08125 1CF5                        00            .byte	0
08126 1CF6                        00            .byte	0
08127 1CF7                        18            .byte	$18
08128 1CF8                        18            .byte	$18
08129 1CF9                        00            .byte	0
08130 1CFA                        38            .byte	$38
08131 1CFB                        18            .byte	$18
08132 1CFC                        18            .byte	$18
08133 1CFD                        18            .byte	$18
08134 1CFE                        18            .byte	$18
08135 1CFF                        3C            .byte	$3C
08136 1D00                        00            .byte	0
08137 1D01                        00            .byte	0
08138 1D02                        00            .byte	0
08139                                           ! 1077  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08140 1D03                        00            .byte	0
08141 1D04                        00            .byte	0
08142 1D05                        06            .byte	6
08143 1D06                        06            .byte	6
08144 1D07                        00            .byte	0
08145 1D08                        0E            .byte	$E
08146 1D09                        06            .byte	6
08147 1D0A                        06            .byte	6
08148 1D0B                        06            .byte	6
08149 1D0C                        06            .byte	6
08150 1D0D                        66            .byte	$66
08151 1D0E                        66            .byte	$66
08152 1D0F                        3C            .byte	$3C
08153 1D10                        00            .byte	0
08154                                           ! 1078  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08155 1D11                        00            .byte	0
08156 1D12                        00            .byte	0
08157 1D13                        E0            .byte	$E0
08158 1D14                        60            .byte	$60
08159 1D15                        60            .byte	$60
08160 1D16                        66            .byte	$66
08161 1D17                        6C            .byte	$6C
08162 1D18                        78            .byte	$78
08163 1D19                        6C            .byte	$6C
08164 1D1A                        66            .byte	$66
08165 1D1B                        E6            .byte	$E6
08166 1D1C                        00            .byte	0
08167 1D1D                        00            .byte	0
08168 1D1E                        00            .byte	0
08169                                           ! 1079  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08170 1D1F                        00            .byte	0
08171 1D20                        00            .byte	0
08172 1D21                        38            .byte	$38
08173 1D22                        18            .byte	$18
08174 1D23                        18            .byte	$18
08175 1D24                        18            .byte	$18
08176 1D25                        18            .byte	$18
08177 1D26                        18            .byte	$18
08178 1D27                        18            .byte	$18
08179 1D28                        18            .byte	$18
08180 1D29                        3C            .byte	$3C
08181 1D2A                        00            .byte	0
08182 1D2B                        00            .byte	0
08183 1D2C                        00            .byte	0
08184                                           ! 1080  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08185 1D2D                        00            .byte	0
08186 1D2E                        00            .byte	0
08187 1D2F                        00            .byte	0
08188 1D30                        00            .byte	0
08189 1D31                        00            .byte	0
08190 1D32                        EC            .byte	$EC
08191 1D33                        FE            .byte	$FE
08192 1D34                        D6            .byte	$D6
08193 1D35                        D6            .byte	$D6
08194 1D36                        D6            .byte	$D6
08195 1D37                        C6            .byte	$C6
08196 1D38                        00            .byte	0
08197 1D39                        00            .byte	0
08198 1D3A                        00            .byte	0
08199                                           ! 1081  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08200 1D3B                        00            .byte	0
08201 1D3C                        00            .byte	0
08202 1D3D                        00            .byte	0
08203 1D3E                        00            .byte	0
08204 1D3F                        00            .byte	0
08205 1D40                        DC            .byte	$DC
08206 1D41                        66            .byte	$66
08207 1D42                        66            .byte	$66
08208 1D43                        66            .byte	$66
08209 1D44                        66            .byte	$66
08210 1D45                        66            .byte	$66
08211 1D46                        00            .byte	0
08212 1D47                        00            .byte	0
08213 1D48                        00            .byte	0
08214                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08215 1D49                        00            .byte	0
08216 1D4A                        00            .byte	0
08217 1D4B                        00            .byte	0
08218 1D4C                        00            .byte	0
08219 1D4D                        00            .byte	0
08220 1D4E                        7C            .byte	$7C
08221 1D4F                        C6            .byte	$C6
08222 1D50                        C6            .byte	$C6
08223 1D51                        C6            .byte	$C6
08224 1D52                        C6            .byte	$C6
08225 1D53                        7C            .byte	$7C
08226 1D54                        00            .byte	0
08227 1D55                        00            .byte	0
08228 1D56                        00            .byte	0
08229                                           ! 1083  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08230 1D57                        00            .byte	0
08231 1D58                        00            .byte	0
08232 1D59                        00            .byte	0
08233 1D5A                        00            .byte	0
08234 1D5B                        00            .byte	0
08235 1D5C                        DC            .byte	$DC
08236 1D5D                        66            .byte	$66
08237 1D5E                        66            .byte	$66
08238 1D5F                        66            .byte	$66
08239 1D60                        7C            .byte	$7C
08240 1D61                        60            .byte	$60
08241 1D62                        60            .byte	$60
08242 1D63                        F0            .byte	$F0
08243 1D64                        00            .byte	0
08244                                           ! 1084  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08245 1D65                        00            .byte	0
08246 1D66                        00            .byte	0
08247 1D67                        00            .byte	0
08248 1D68                        00            .byte	0
08249 1D69                        00            .byte	0
08250 1D6A                        76            .byte	$76
08251 1D6B                        CC            .byte	$CC
08252 1D6C                        CC            .byte	$CC
08253 1D6D                        CC            .byte	$CC
08254 1D6E                        7C            .byte	$7C
08255 1D6F                        0C            .byte	$C
08256 1D70                        0C            .byte	$C
08257 1D71                        1E            .byte	$1E
08258 1D72                        00            .byte	0
08259                                           ! 1085  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08260 1D73                        00            .byte	0
08261 1D74                        00            .byte	0
08262 1D75                        00            .byte	0
08263 1D76                        00            .byte	0
08264 1D77                        00            .byte	0
08265 1D78                        DC            .byte	$DC
08266 1D79                        76            .byte	$76
08267 1D7A                        66            .byte	$66
08268 1D7B                        60            .byte	$60
08269 1D7C                        60            .byte	$60
08270 1D7D                        F0            .byte	$F0
08271 1D7E                        00            .byte	0
08272 1D7F                        00            .byte	0
08273 1D80                        00            .byte	0
08274                                           ! 1086  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08275 1D81                        00            .byte	0
08276 1D82                        00            .byte	0
08277 1D83                        00            .byte	0
08278 1D84                        00            .byte	0
08279 1D85                        00            .byte	0
08280 1D86                        7C            .byte	$7C
08281 1D87                        C6            .byte	$C6
08282 1D88                        70            .byte	$70
08283 1D89                        1C            .byte	$1C
08284 1D8A                        C6            .byte	$C6
08285 1D8B                        7C            .byte	$7C
08286 1D8C                        00            .byte	0
08287 1D8D                        00            .byte	0
08288 1D8E                        00            .byte	0
08289                                           ! 1087  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08290 1D8F                        00            .byte	0
08291 1D90                        00            .byte	0
08292 1D91                        10            .byte	$10
08293 1D92                        30            .byte	$30
08294 1D93                        30            .byte	$30
08295 1D94                        FC            .byte	$FC
08296 1D95                        30            .byte	$30
08297 1D96                        30            .byte	$30
08298 1D97                        30            .byte	$30
08299 1D98                        36            .byte	$36
08300 1D99                        1C            .byte	$1C
08301 1D9A                        00            .byte	0
08302 1D9B                        00            .byte	0
08303 1D9C                        00            .byte	0
08304                                           ! 1088  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08305 1D9D                        00            .byte	0
08306 1D9E                        00            .byte	0
08307 1D9F                        00            .byte	0
08308 1DA0                        00            .byte	0
08309 1DA1                        00            .byte	0
08310 1DA2                        CC            .byte	$CC
08311 1DA3                        CC            .byte	$CC
08312 1DA4                        CC            .byte	$CC
08313 1DA5                        CC            .byte	$CC
08314 1DA6                        CC            .byte	$CC
08315 1DA7                        76            .byte	$76
08316 1DA8                        00            .byte	0
08317 1DA9                        00            .byte	0
08318 1DAA                        00            .byte	0
08319                                           ! 1089  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08320 1DAB                        00            .byte	0
08321 1DAC                        00            .byte	0
08322 1DAD                        00            .byte	0
08323 1DAE                        00            .byte	0
08324 1DAF                        00            .byte	0
08325 1DB0                        66            .byte	$66
08326 1DB1                        66            .byte	$66
08327 1DB2                        66            .byte	$66
08328 1DB3                        66            .byte	$66
08329 1DB4                        3C            .byte	$3C
08330 1DB5                        18            .byte	$18
08331 1DB6                        00            .byte	0
08332 1DB7                        00            .byte	0
08333 1DB8                        00            .byte	0
08334                                           ! 1090  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08335 1DB9                        00            .byte	0
08336 1DBA                        00            .byte	0
08337 1DBB                        00            .byte	0
08338 1DBC                        00            .byte	0
08339 1DBD                        00            .byte	0
08340 1DBE                        C6            .byte	$C6
08341 1DBF                        C6            .byte	$C6
08342 1DC0                        D6            .byte	$D6
08343 1DC1                        D6            .byte	$D6
08344 1DC2                        FE            .byte	$FE
08345 1DC3                        6C            .byte	$6C
08346 1DC4                        00            .byte	0
08347 1DC5                        00            .byte	0
08348 1DC6                        00            .byte	0
08349                                           ! 1091  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08350 1DC7                        00            .byte	0
08351 1DC8                        00            .byte	0
08352 1DC9                        00            .byte	0
08353 1DCA                        00            .byte	0
08354 1DCB                        00            .byte	0
08355 1DCC                        C6            .byte	$C6
08356 1DCD                        6C            .byte	$6C
08357 1DCE                        38            .byte	$38
08358 1DCF                        38            .byte	$38
08359 1DD0                        6C            .byte	$6C
08360 1DD1                        C6            .byte	$C6
08361 1DD2                        00            .byte	0
08362 1DD3                        00            .byte	0
08363 1DD4                        00            .byte	0
08364                                           ! 1092  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08365 1DD5                        00            .byte	0
08366 1DD6                        00            .byte	0
08367 1DD7                        00            .byte	0
08368 1DD8                        00            .byte	0
08369 1DD9                        00            .byte	0
08370 1DDA                        C6            .byte	$C6
08371 1DDB                        C6            .byte	$C6
08372 1DDC                        C6            .byte	$C6
08373 1DDD                        C6            .byte	$C6
08374 1DDE                        7E            .byte	$7E
08375 1DDF                        06            .byte	6
08376 1DE0                        0C            .byte	$C
08377 1DE1                        F8            .byte	$F8
08378 1DE2                        00            .byte	0
08379                                           ! 1093  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08380 1DE3                        00            .byte	0
08381 1DE4                        00            .byte	0
08382 1DE5                        00            .byte	0
08383 1DE6                        00            .byte	0
08384 1DE7                        00            .byte	0
08385 1DE8                        FE            .byte	$FE
08386 1DE9                        CC            .byte	$CC
08387 1DEA                        18            .byte	$18
08388 1DEB                        30            .byte	$30
08389 1DEC                        66            .byte	$66
08390 1DED                        FE            .byte	$FE
08391 1DEE                        00            .byte	0
08392 1DEF                        00            .byte	0
08393 1DF0                        00            .byte	0
08394                                           ! 1094  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08395 1DF1                        00            .byte	0
08396 1DF2                        00            .byte	0
08397 1DF3                        0E            .byte	$E
08398 1DF4                        18            .byte	$18
08399 1DF5                        18            .byte	$18
08400 1DF6                        18            .byte	$18
08401 1DF7                        70            .byte	$70
08402 1DF8                        18            .byte	$18
08403 1DF9                        18            .byte	$18
08404 1DFA                        18            .byte	$18
08405 1DFB                        0E            .byte	$E
08406 1DFC                        00            .byte	0
08407 1DFD                        00            .byte	0
08408 1DFE                        00            .byte	0
08409                                           ! 1095  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18
08410 1DFF                        00            .byte	0
08411 1E00                        00            .byte	0
08412 1E01                        18            .byte	$18
08413 1E02                        18            .byte	$18
08414 1E03                        18            .byte	$18
08415 1E04                        18            .byte	$18
08416 1E05                        00            .byte	0
08417                                           ! 1095 , 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08418 1E06                        18            .byte	$18
08419 1E07                        18            .byte	$18
08420 1E08                        18            .byte	$18
08421 1E09                        18            .byte	$18
08422 1E0A                        00            .byte	0
08423 1E0B                        00            .byte	0
08424 1E0C                        00            .byte	0
08425                                           ! 1096  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08426 1E0D                        00            .byte	0
08427 1E0E                        00            .byte	0
08428 1E0F                        70            .byte	$70
08429 1E10                        18            .byte	$18
08430 1E11                        18            .byte	$18
08431 1E12                        18            .byte	$18
08432 1E13                        0E            .byte	$E
08433 1E14                        18            .byte	$18
08434 1E15                        18            .byte	$18
08435 1E16                        18            .byte	$18
08436 1E17                        70            .byte	$70
08437 1E18                        00            .byte	0
08438 1E19                        00            .byte	0
08439 1E1A                        00            .byte	0
08440                                           ! 1097  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08441 1E1B                        00            .byte	0
08442 1E1C                        00            .byte	0
08443 1E1D                        76            .byte	$76
08444 1E1E                        DC            .byte	$DC
08445 1E1F                        00            .byte	0
08446 1E20                        00            .byte	0
08447 1E21                        00            .byte	0
08448 1E22                        00            .byte	0
08449 1E23                        00            .byte	0
08450 1E24                        00            .byte	0
08451 1E25                        00            .byte	0
08452 1E26                        00            .byte	0
08453 1E27                        00            .byte	0
08454 1E28                        00            .byte	0
08455                                           ! 1098  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08456 1E29                        00            .byte	0
08457 1E2A                        00            .byte	0
08458 1E2B                        00            .byte	0
08459 1E2C                        00            .byte	0
08460 1E2D                        10            .byte	$10
08461 1E2E                        38            .byte	$38
08462 1E2F                        6C            .byte	$6C
08463 1E30                        C6            .byte	$C6
08464 1E31                        C6            .byte	$C6
08465 1E32                        FE            .byte	$FE
08466 1E33                        00            .byte	0
08467 1E34                        00            .byte	0
08468 1E35                        00            .byte	0
08469 1E36                        00            .byte	0
08470                                           ! 1099  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08471 1E37                        00            .byte	0
08472 1E38                        00            .byte	0
08473 1E39                        3C            .byte	$3C
08474 1E3A                        66            .byte	$66
08475 1E3B                        C2            .byte	$C2
08476 1E3C                        C0            .byte	$C0
08477 1E3D                        C0            .byte	$C0
08478 1E3E                        C2            .byte	$C2
08479 1E3F                        66            .byte	$66
08480 1E40                        3C            .byte	$3C
08481 1E41                        0C            .byte	$C
08482 1E42                        06            .byte	6
08483 1E43                        7C            .byte	$7C
08484 1E44                        00            .byte	0
08485                                           ! 1100  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08486 1E45                        00            .byte	0
08487 1E46                        00            .byte	0
08488 1E47                        CC            .byte	$CC
08489 1E48                        CC            .byte	$CC
08490 1E49                        00            .byte	0
08491 1E4A                        CC            .byte	$CC
08492 1E4B                        CC            .byte	$CC
08493 1E4C                        CC            .byte	$CC
08494 1E4D                        CC            .byte	$CC
08495 1E4E                        CC            .byte	$CC
08496 1E4F                        76            .byte	$76
08497 1E50                        00            .byte	0
08498 1E51                        00            .byte	0
08499 1E52                        00            .byte	0
08500                                           ! 1101  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08501 1E53                        00            .byte	0
08502 1E54                        0C            .byte	$C
08503 1E55                        18            .byte	$18
08504 1E56                        30            .byte	$30
08505 1E57                        00            .byte	0
08506 1E58                        7C            .byte	$7C
08507 1E59                        C6            .byte	$C6
08508 1E5A                        FE            .byte	$FE
08509 1E5B                        C0            .byte	$C0
08510 1E5C                        C6            .byte	$C6
08511 1E5D                        7C            .byte	$7C
08512 1E5E                        00            .byte	0
08513 1E5F                        00            .byte	0
08514 1E60                        00            .byte	0
08515                                           ! 1102  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08516 1E61                        00            .byte	0
08517 1E62                        10            .byte	$10
08518 1E63                        38            .byte	$38
08519 1E64                        6C            .byte	$6C
08520 1E65                        00            .byte	0
08521 1E66                        78            .byte	$78
08522 1E67                        0C            .byte	$C
08523 1E68                        7C            .byte	$7C
08524 1E69                        CC            .byte	$CC
08525 1E6A                        CC            .byte	$CC
08526 1E6B                        76            .byte	$76
08527 1E6C                        00            .byte	0
08528 1E6D                        00            .byte	0
08529 1E6E                        00            .byte	0
08530                                           ! 1103  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08531 1E6F                        00            .byte	0
08532 1E70                        00            .byte	0
08533 1E71                        CC            .byte	$CC
08534 1E72                        CC            .byte	$CC
08535 1E73                        00            .byte	0
08536 1E74                        78            .byte	$78
08537 1E75                        0C            .byte	$C
08538 1E76                        7C            .byte	$7C
08539 1E77                        CC            .byte	$CC
08540 1E78                        CC            .byte	$CC
08541 1E79                        76            .byte	$76
08542 1E7A                        00            .byte	0
08543 1E7B                        00            .byte	0
08544 1E7C                        00            .byte	0
08545                                           ! 1104  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08546 1E7D                        00            .byte	0
08547 1E7E                        60            .byte	$60
08548 1E7F                        30            .byte	$30
08549 1E80                        18            .byte	$18
08550 1E81                        00            .byte	0
08551 1E82                        78            .byte	$78
08552 1E83                        0C            .byte	$C
08553 1E84                        7C            .byte	$7C
08554 1E85                        CC            .byte	$CC
08555 1E86                        CC            .byte	$CC
08556 1E87                        76            .byte	$76
08557 1E88                        00            .byte	0
08558 1E89                        00            .byte	0
08559 1E8A                        00            .byte	0
08560                                           ! 1105  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08561 1E8B                        00            .byte	0
08562 1E8C                        38            .byte	$38
08563 1E8D                        6C            .byte	$6C
08564 1E8E                        38            .byte	$38
08565 1E8F                        00            .byte	0
08566 1E90                        78            .byte	$78
08567 1E91                        0C            .byte	$C
08568 1E92                        7C            .byte	$7C
08569 1E93                        CC            .byte	$CC
08570 1E94                        CC            .byte	$CC
08571 1E95                        76            .byte	$76
08572 1E96                        00            .byte	0
08573 1E97                        00            .byte	0
08574 1E98                        00            .byte	0
08575                                           ! 1106  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08576 1E99                        00            .byte	0
08577 1E9A                        00            .byte	0
08578 1E9B                        00            .byte	0
08579 1E9C                        00            .byte	0
08580 1E9D                        3C            .byte	$3C
08581 1E9E                        66            .byte	$66
08582 1E9F                        60            .byte	$60
08583 1EA0                        66            .byte	$66
08584 1EA1                        3C            .byte	$3C
08585 1EA2                        0C            .byte	$C
08586 1EA3                        06            .byte	6
08587 1EA4                        3C            .byte	$3C
08588 1EA5                        00            .byte	0
08589 1EA6                        00            .byte	0
08590                                           ! 1107  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08591 1EA7                        00            .byte	0
08592 1EA8                        10            .byte	$10
08593 1EA9                        38            .byte	$38
08594 1EAA                        6C            .byte	$6C
08595 1EAB                        00            .byte	0
08596 1EAC                        7C            .byte	$7C
08597 1EAD                        C6            .byte	$C6
08598 1EAE                        FE            .byte	$FE
08599 1EAF                        C0            .byte	$C0
08600 1EB0                        C6            .byte	$C6
08601 1EB1                        7C            .byte	$7C
08602 1EB2                        00            .byte	0
08603 1EB3                        00            .byte	0
08604 1EB4                        00            .byte	0
08605                                           ! 1108  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08606 1EB5                        00            .byte	0
08607 1EB6                        00            .byte	0
08608 1EB7                        CC            .byte	$CC
08609 1EB8                        CC            .byte	$CC
08610 1EB9                        00            .byte	0
08611 1EBA                        7C            .byte	$7C
08612 1EBB                        C6            .byte	$C6
08613 1EBC                        FE            .byte	$FE
08614 1EBD                        C0            .byte	$C0
08615 1EBE                        C6            .byte	$C6
08616 1EBF                        7C            .byte	$7C
08617 1EC0                        00            .byte	0
08618 1EC1                        00            .byte	0
08619 1EC2                        00            .byte	0
08620                                           ! 1109  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08621 1EC3                        00            .byte	0
08622 1EC4                        60            .byte	$60
08623 1EC5                        30            .byte	$30
08624 1EC6                        18            .byte	$18
08625 1EC7                        00            .byte	0
08626 1EC8                        7C            .byte	$7C
08627 1EC9                        C6            .byte	$C6
08628 1ECA                        FE            .byte	$FE
08629 1ECB                        C0            .byte	$C0
08630 1ECC                        C6            .byte	$C6
08631 1ECD                        7C            .byte	$7C
08632 1ECE                        00            .byte	0
08633 1ECF                        00            .byte	0
08634 1ED0                        00            .byte	0
08635                                           ! 1110  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08636 1ED1                        00            .byte	0
08637 1ED2                        00            .byte	0
08638 1ED3                        66            .byte	$66
08639 1ED4                        66            .byte	$66
08640 1ED5                        00            .byte	0
08641 1ED6                        38            .byte	$38
08642 1ED7                        18            .byte	$18
08643 1ED8                        18            .byte	$18
08644 1ED9                        18            .byte	$18
08645 1EDA                        18            .byte	$18
08646 1EDB                        3C            .byte	$3C
08647 1EDC                        00            .byte	0
08648 1EDD                        00            .byte	0
08649 1EDE                        00            .byte	0
08650                                           ! 1111  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08651 1EDF                        00            .byte	0
08652 1EE0                        18            .byte	$18
08653 1EE1                        3C            .byte	$3C
08654 1EE2                        66            .byte	$66
08655 1EE3                        00            .byte	0
08656 1EE4                        38            .byte	$38
08657 1EE5                        18            .byte	$18
08658 1EE6                        18            .byte	$18
08659 1EE7                        18            .byte	$18
08660 1EE8                        18            .byte	$18
08661 1EE9                        3C            .byte	$3C
08662 1EEA                        00            .byte	0
08663 1EEB                        00            .byte	0
08664 1EEC                        00            .byte	0
08665                                           ! 1112  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08666 1EED                        00            .byte	0
08667 1EEE                        60            .byte	$60
08668 1EEF                        30            .byte	$30
08669 1EF0                        18            .byte	$18
08670 1EF1                        00            .byte	0
08671 1EF2                        38            .byte	$38
08672 1EF3                        18            .byte	$18
08673 1EF4                        18            .byte	$18
08674 1EF5                        18            .byte	$18
08675 1EF6                        18            .byte	$18
08676 1EF7                        3C            .byte	$3C
08677 1EF8                        00            .byte	0
08678 1EF9                        00            .byte	0
08679 1EFA                        00            .byte	0
08680                                           ! 1113  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08681 1EFB                        00            .byte	0
08682 1EFC                        C6            .byte	$C6
08683 1EFD                        C6            .byte	$C6
08684 1EFE                        10            .byte	$10
08685 1EFF                        38            .byte	$38
08686 1F00                        6C            .byte	$6C
08687 1F01                        C6            .byte	$C6
08688 1F02                        C6            .byte	$C6
08689 1F03                        FE            .byte	$FE
08690 1F04                        C6            .byte	$C6
08691 1F05                        C6            .byte	$C6
08692 1F06                        00            .byte	0
08693 1F07                        00            .byte	0
08694 1F08                        00            .byte	0
08695                                           ! 1114  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08696 1F09                        38            .byte	$38
08697 1F0A                        6C            .byte	$6C
08698 1F0B                        38            .byte	$38
08699 1F0C                        00            .byte	0
08700 1F0D                        38            .byte	$38
08701 1F0E                        6C            .byte	$6C
08702 1F0F                        C6            .byte	$C6
08703 1F10                        C6            .byte	$C6
08704 1F11                        FE            .byte	$FE
08705 1F12                        C6            .byte	$C6
08706 1F13                        C6            .byte	$C6
08707 1F14                        00            .byte	0
08708 1F15                        00            .byte	0
08709 1F16                        00            .byte	0
08710                                           ! 1115  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08711 1F17                        18            .byte	$18
08712 1F18                        30            .byte	$30
08713 1F19                        60            .byte	$60
08714 1F1A                        00            .byte	0
08715 1F1B                        FE            .byte	$FE
08716 1F1C                        66            .byte	$66
08717 1F1D                        60            .byte	$60
08718 1F1E                        7C            .byte	$7C
08719 1F1F                        60            .byte	$60
08720 1F20                        66            .byte	$66
08721 1F21                        FE            .byte	$FE
08722 1F22                        00            .byte	0
08723 1F23                        00            .byte	0
08724 1F24                        00            .byte	0
08725                                           ! 1116  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08726 1F25                        00            .byte	0
08727 1F26                        00            .byte	0
08728 1F27                        00            .byte	0
08729 1F28                        00            .byte	0
08730 1F29                        CC            .byte	$CC
08731 1F2A                        76            .byte	$76
08732 1F2B                        36            .byte	$36
08733 1F2C                        7E            .byte	$7E
08734 1F2D                        D8            .byte	$D8
08735 1F2E                        D8            .byte	$D8
08736 1F2F                        6E            .byte	$6E
08737 1F30                        00            .byte	0
08738 1F31                        00            .byte	0
08739 1F32                        00            .byte	0
08740                                           ! 1117  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
08741 1F33                        00            .byte	0
08742 1F34                        00            .byte	0
08743 1F35                        3E            .byte	$3E
08744 1F36                        6C            .byte	$6C
08745 1F37                        CC            .byte	$CC
08746 1F38                        CC            .byte	$CC
08747 1F39                        FE            .byte	$FE
08748 1F3A                        CC            .byte	$CC
08749 1F3B                        CC            .byte	$CC
08750 1F3C                        CC            .byte	$CC
08751 1F3D                        CE            .byte	$CE
08752 1F3E                        00            .byte	0
08753 1F3F                        00            .byte	0
08754 1F40                        00            .byte	0
08755                                           ! 1118  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08756 1F41                        00            .byte	0
08757 1F42                        10            .byte	$10
08758 1F43                        38            .byte	$38
08759 1F44                        6C            .byte	$6C
08760 1F45                        00            .byte	0
08761 1F46                        7C            .byte	$7C
08762 1F47                        C6            .byte	$C6
08763 1F48                        C6            .byte	$C6
08764 1F49                        C6            .byte	$C6
08765 1F4A                        C6            .byte	$C6
08766 1F4B                        7C            .byte	$7C
08767 1F4C                        00            .byte	0
08768 1F4D                        00            .byte	0
08769 1F4E                        00            .byte	0
08770                                           ! 1119  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 
08771 1F4F                        00            .byte	0
08772 1F50                        00            .byte	0
08773 1F51                        C6            .byte	$C6
08774 1F52                        C6            .byte	$C6
08775 1F53                        00            .byte	0
08776 1F54                        7C            .byte	$7C
08777 1F55                        C6            .byte	$C6
08778 1F56                        C6            .byte	$C6
08779 1F57                        C6            .byte	$C6
08780                                           ! 1119 0xc6, 0x7c, 0x00, 0x00, 0x00,
08781 1F58                        C6            .byte	$C6
08782 1F59                        7C            .byte	$7C
08783 1F5A                        00            .byte	0
08784 1F5B                        00            .byte	0
08785 1F5C                        00            .byte	0
08786                                           ! 1120  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08787 1F5D                        00            .byte	0
08788 1F5E                        60            .byte	$60
08789 1F5F                        30            .byte	$30
08790 1F60                        18            .byte	$18
08791 1F61                        00            .byte	0
08792 1F62                        7C            .byte	$7C
08793 1F63                        C6            .byte	$C6
08794 1F64                        C6            .byte	$C6
08795 1F65                        C6            .byte	$C6
08796 1F66                        C6            .byte	$C6
08797 1F67                        7C            .byte	$7C
08798 1F68                        00            .byte	0
08799 1F69                        00            .byte	0
08800 1F6A                        00            .byte	0
08801                                           ! 1121  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08802 1F6B                        00            .byte	0
08803 1F6C                        30            .byte	$30
08804 1F6D                        78            .byte	$78
08805 1F6E                        CC            .byte	$CC
08806 1F6F                        00            .byte	0
08807 1F70                        CC            .byte	$CC
08808 1F71                        CC            .byte	$CC
08809 1F72                        CC            .byte	$CC
08810 1F73                        CC            .byte	$CC
08811 1F74                        CC            .byte	$CC
08812 1F75                        76            .byte	$76
08813 1F76                        00            .byte	0
08814 1F77                        00            .byte	0
08815 1F78                        00            .byte	0
08816                                           ! 1122  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08817 1F79                        00            .byte	0
08818 1F7A                        60            .byte	$60
08819 1F7B                        30            .byte	$30
08820 1F7C                        18            .byte	$18
08821 1F7D                        00            .byte	0
08822 1F7E                        CC            .byte	$CC
08823 1F7F                        CC            .byte	$CC
08824 1F80                        CC            .byte	$CC
08825 1F81                        CC            .byte	$CC
08826 1F82                        CC            .byte	$CC
08827 1F83                        76            .byte	$76
08828 1F84                        00            .byte	0
08829 1F85                        00            .byte	0
08830 1F86                        00            .byte	0
08831                                           ! 1123  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
08832 1F87                        00            .byte	0
08833 1F88                        00            .byte	0
08834 1F89                        C6            .byte	$C6
08835 1F8A                        C6            .byte	$C6
08836 1F8B                        00            .byte	0
08837 1F8C                        C6            .byte	$C6
08838 1F8D                        C6            .byte	$C6
08839 1F8E                        C6            .byte	$C6
08840 1F8F                        C6            .byte	$C6
08841 1F90                        7E            .byte	$7E
08842 1F91                        06            .byte	6
08843 1F92                        0C            .byte	$C
08844 1F93                        78            .byte	$78
08845 1F94                        00            .byte	0
08846                                           ! 1124  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08847 1F95                        00            .byte	0
08848 1F96                        C6            .byte	$C6
08849 1F97                        C6            .byte	$C6
08850 1F98                        38            .byte	$38
08851 1F99                        6C            .byte	$6C
08852 1F9A                        C6            .byte	$C6
08853 1F9B                        C6            .byte	$C6
08854 1F9C                        C6            .byte	$C6
08855 1F9D                        C6            .byte	$C6
08856 1F9E                        6C            .byte	$6C
08857 1F9F                        38            .byte	$38
08858 1FA0                        00            .byte	0
08859 1FA1                        00            .byte	0
08860 1FA2                        00            .byte	0
08861                                           ! 1125  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08862 1FA3                        00            .byte	0
08863 1FA4                        C6            .byte	$C6
08864 1FA5                        C6            .byte	$C6
08865 1FA6                        00            .byte	0
08866 1FA7                        C6            .byte	$C6
08867 1FA8                        C6            .byte	$C6
08868 1FA9                        C6            .byte	$C6
08869 1FAA                        C6            .byte	$C6
08870 1FAB                        C6            .byte	$C6
08871 1FAC                        C6            .byte	$C6
08872 1FAD                        7C            .byte	$7C
08873 1FAE                        00            .byte	0
08874 1FAF                        00            .byte	0
08875 1FB0                        00            .byte	0
08876                                           ! 1126  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
08877 1FB1                        00            .byte	0
08878 1FB2                        18            .byte	$18
08879 1FB3                        18            .byte	$18
08880 1FB4                        3C            .byte	$3C
08881 1FB5                        66            .byte	$66
08882 1FB6                        60            .byte	$60
08883 1FB7                        60            .byte	$60
08884 1FB8                        66            .byte	$66
08885 1FB9                        3C            .byte	$3C
08886 1FBA                        18            .byte	$18
08887 1FBB                        18            .byte	$18
08888 1FBC                        00            .byte	0
08889 1FBD                        00            .byte	0
08890 1FBE                        00            .byte	0
08891                                           ! 1127  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
08892 1FBF                        00            .byte	0
08893 1FC0                        38            .byte	$38
08894 1FC1                        6C            .byte	$6C
08895 1FC2                        64            .byte	$64
08896 1FC3                        60            .byte	$60
08897 1FC4                        F0            .byte	$F0
08898 1FC5                        60            .byte	$60
08899 1FC6                        60            .byte	$60
08900 1FC7                        60            .byte	$60
08901 1FC8                        E6            .byte	$E6
08902 1FC9                        FC            .byte	$FC
08903 1FCA                        00            .byte	0
08904 1FCB                        00            .byte	0
08905 1FCC                        00            .byte	0
08906                                           ! 1128  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
08907 1FCD                        00            .byte	0
08908 1FCE                        00            .byte	0
08909 1FCF                        66            .byte	$66
08910 1FD0                        66            .byte	$66
08911 1FD1                        3C            .byte	$3C
08912 1FD2                        18            .byte	$18
08913 1FD3                        7E            .byte	$7E
08914 1FD4                        18            .byte	$18
08915 1FD5                        7E            .byte	$7E
08916 1FD6                        18            .byte	$18
08917 1FD7                        18            .byte	$18
08918 1FD8                        00            .byte	0
08919 1FD9                        00            .byte	0
08920 1FDA                        00            .byte	0
08921                                           ! 1129  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
08922 1FDB                        00            .byte	0
08923 1FDC                        F8            .byte	$F8
08924 1FDD                        CC            .byte	$CC
08925 1FDE                        CC            .byte	$CC
08926 1FDF                        F8            .byte	$F8
08927 1FE0                        C4            .byte	$C4
08928 1FE1                        CC            .byte	$CC
08929 1FE2                        DE            .byte	$DE
08930 1FE3                        CC            .byte	$CC
08931 1FE4                        CC            .byte	$CC
08932 1FE5                        C6            .byte	$C6
08933 1FE6                        00            .byte	0
08934 1FE7                        00            .byte	0
08935 1FE8                        00            .byte	0
08936                                           ! 1130  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
08937 1FE9                        00            .byte	0
08938 1FEA                        0E            .byte	$E
08939 1FEB                        1B            .byte	$1B
08940 1FEC                        18            .byte	$18
08941 1FED                        18            .byte	$18
08942 1FEE                        18            .byte	$18
08943 1FEF                        7E            .byte	$7E
08944 1FF0                        18            .byte	$18
08945 1FF1                        18            .byte	$18
08946 1FF2                        18            .byte	$18
08947 1FF3                        18            .byte	$18
08948 1FF4                        D8            .byte	$D8
08949 1FF5                        70            .byte	$70
08950 1FF6                        00            .byte	0
08951                                           ! 1131  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08952 1FF7                        00            .byte	0
08953 1FF8                        18            .byte	$18
08954 1FF9                        30            .byte	$30
08955 1FFA                        60            .byte	$60
08956 1FFB                        00            .byte	0
08957 1FFC                        78            .byte	$78
08958 1FFD                        0C            .byte	$C
08959 1FFE                        7C            .byte	$7C
08960 1FFF                        CC            .byte	$CC
08961 2000                        CC            .byte	$CC
08962 2001                        76            .byte	$76
08963 2002                        00            .byte	0
08964 2003                        00            .byte	0
08965 2004                        00            .byte	0
08966                                           ! 1132  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08967 2005                        00            .byte	0
08968 2006                        0C            .byte	$C
08969 2007                        18            .byte	$18
08970 2008                        30            .byte	$30
08971 2009                        00            .byte	0
08972 200A                        38            .byte	$38
08973 200B                        18            .byte	$18
08974 200C                        18            .byte	$18
08975 200D                        18            .byte	$18
08976 200E                        18            .byte	$18
08977 200F                        3C            .byte	$3C
08978 2010                        00            .byte	0
08979 2011                        00            .byte	0
08980 2012                        00            .byte	0
08981                                           ! 1133  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08982 2013                        00            .byte	0
08983 2014                        18            .byte	$18
08984 2015                        30            .byte	$30
08985 2016                        60            .byte	$60
08986 2017                        00            .byte	0
08987 2018                        7C            .byte	$7C
08988 2019                        C6            .byte	$C6
08989 201A                        C6            .byte	$C6
08990 201B                        C6            .byte	$C6
08991 201C                        C6            .byte	$C6
08992 201D                        7C            .byte	$7C
08993 201E                        00            .byte	0
08994 201F                        00            .byte	0
08995 2020                        00            .byte	0
08996                                           ! 1134  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08997 2021                        00            .byte	0
08998 2022                        18            .byte	$18
08999 2023                        30            .byte	$30
09000 2024                        60            .byte	$60
09001 2025                        00            .byte	0
09002 2026                        CC            .byte	$CC
09003 2027                        CC            .byte	$CC
09004 2028                        CC            .byte	$CC
09005 2029                        CC            .byte	$CC
09006 202A                        CC            .byte	$CC
09007 202B                        76            .byte	$76
09008 202C                        00            .byte	0
09009 202D                        00            .byte	0
09010 202E                        00            .byte	0
09011                                           ! 1135  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09012 202F                        00            .byte	0
09013 2030                        00            .byte	0
09014 2031                        76            .byte	$76
09015 2032                        DC            .byte	$DC
09016 2033                        00            .byte	0
09017 2034                        DC            .byte	$DC
09018 2035                        66            .byte	$66
09019 2036                        66            .byte	$66
09020 2037                        66            .byte	$66
09021 2038                        66            .byte	$66
09022 2039                        66            .byte	$66
09023 203A                        00            .byte	0
09024 203B                        00            .byte	0
09025 203C                        00            .byte	0
09026                                           ! 1136  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09027 203D                        76            .byte	$76
09028 203E                        DC            .byte	$DC
09029 203F                        00            .byte	0
09030 2040                        C6            .byte	$C6
09031 2041                        E6            .byte	$E6
09032 2042                        F6            .byte	$F6
09033 2043                        FE            .byte	$FE
09034 2044                        DE            .byte	$DE
09035 2045                        CE            .byte	$CE
09036 2046                        C6            .byte	$C6
09037 2047                        C6            .byte	$C6
09038 2048                        00            .byte	0
09039 2049                        00            .byte	0
09040 204A                        00            .byte	0
09041                                           ! 1137  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09042 204B                        00            .byte	0
09043 204C                        3C            .byte	$3C
09044 204D                        6C            .byte	$6C
09045 204E                        6C            .byte	$6C
09046 204F                        3E            .byte	$3E
09047 2050                        00            .byte	0
09048 2051                        7E            .byte	$7E
09049 2052                        00            .byte	0
09050 2053                        00            .byte	0
09051 2054                        00            .byte	0
09052 2055                        00            .byte	0
09053 2056                        00            .byte	0
09054 2057                        00            .byte	0
09055 2058                        00            .byte	0
09056                                           ! 1138  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09057 2059                        00            .byte	0
09058 205A                        38            .byte	$38
09059 205B                        6C            .byte	$6C
09060 205C                        6C            .byte	$6C
09061 205D                        38            .byte	$38
09062 205E                        00            .byte	0
09063 205F                        7C            .byte	$7C
09064 2060                        00            .byte	0
09065 2061                        00            .byte	0
09066 2062                        00            .byte	0
09067 2063                        00            .byte	0
09068 2064                        00            .byte	0
09069 2065                        00            .byte	0
09070 2066                        00            .byte	0
09071                                           ! 1139  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09072 2067                        00            .byte	0
09073 2068                        00            .byte	0
09074 2069                        30            .byte	$30
09075 206A                        30            .byte	$30
09076 206B                        00            .byte	0
09077 206C                        30            .byte	$30
09078 206D                        30            .byte	$30
09079 206E                        60            .byte	$60
09080 206F                        C6            .byte	$C6
09081 2070                        C6            .byte	$C6
09082 2071                        7C            .byte	$7C
09083 2072                        00            .byte	0
09084 2073                        00            .byte	0
09085 2074                        00            .byte	0
09086                                           ! 1140  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09087 2075                        00            .byte	0
09088 2076                        00            .byte	0
09089 2077                        00            .byte	0
09090 2078                        00            .byte	0
09091 2079                        00            .byte	0
09092 207A                        00            .byte	0
09093 207B                        FE            .byte	$FE
09094 207C                        C0            .byte	$C0
09095 207D                        C0            .byte	$C0
09096 207E                        C0            .byte	$C0
09097 207F                        00            .byte	0
09098 2080                        00            .byte	0
09099 2081                        00            .byte	0
09100 2082                        00            .byte	0
09101                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09102 2083                        00            .byte	0
09103 2084                        00            .byte	0
09104 2085                        00            .byte	0
09105 2086                        00            .byte	0
09106 2087                        00            .byte	0
09107 2088                        00            .byte	0
09108 2089                        FE            .byte	$FE
09109 208A                        06            .byte	6
09110 208B                        06            .byte	6
09111 208C                        06            .byte	6
09112 208D                        00            .byte	0
09113 208E                        00            .byte	0
09114 208F                        00            .byte	0
09115 2090                        00            .byte	0
09116                                           ! 1142  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09117 2091                        00            .byte	0
09118 2092                        C0            .byte	$C0
09119 2093                        C0            .byte	$C0
09120 2094                        C6            .byte	$C6
09121 2095                        CC            .byte	$CC
09122 2096                        D8            .byte	$D8
09123 2097                        30            .byte	$30
09124 2098                        60            .byte	$60
09125 2099                        DC            .byte	$DC
09126 209A                        86            .byte	$86
09127 209B                        0C            .byte	$C
09128 209C                        18            .byte	$18
09129 209D                        3E            .byte	$3E
09130 209E                        00            .byte	0
09131                                           ! 1143  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x
09132 209F                        00            .byte	0
09133 20A0                        C0            .byte	$C0
09134 20A1                        C0            .byte	$C0
09135 20A2                        C6            .byte	$C6
09136 20A3                        CC            .byte	$CC
09137 20A4                        D8            .byte	$D8
09138 20A5                        30            .byte	$30
09139 20A6                        66            .byte	$66
09140 20A7                        CE            .byte	$CE
09141 20A8                        9E            .byte	$9E
09142                                           ! 1143 3e, 0x06, 0x06, 0x00,
09143 20A9                        3E            .byte	$3E
09144 20AA                        06            .byte	6
09145 20AB                        06            .byte	6
09146 20AC                        00            .byte	0
09147                                           ! 1144  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09148 20AD                        00            .byte	0
09149 20AE                        00            .byte	0
09150 20AF                        18            .byte	$18
09151 20B0                        18            .byte	$18
09152 20B1                        00            .byte	0
09153 20B2                        18            .byte	$18
09154 20B3                        18            .byte	$18
09155 20B4                        3C            .byte	$3C
09156 20B5                        3C            .byte	$3C
09157 20B6                        3C            .byte	$3C
09158 20B7                        18            .byte	$18
09159 20B8                        00            .byte	0
09160 20B9                        00            .byte	0
09161 20BA                        00            .byte	0
09162                                           ! 1145  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09163 20BB                        00            .byte	0
09164 20BC                        00            .byte	0
09165 20BD                        00            .byte	0
09166 20BE                        00            .byte	0
09167 20BF                        36            .byte	$36
09168 20C0                        6C            .byte	$6C
09169 20C1                        D8            .byte	$D8
09170 20C2                        6C            .byte	$6C
09171 20C3                        36            .byte	$36
09172 20C4                        00            .byte	0
09173 20C5                        00            .byte	0
09174 20C6                        00            .byte	0
09175 20C7                        00            .byte	0
09176 20C8                        00            .byte	0
09177                                           ! 1146  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09178 20C9                        00            .byte	0
09179 20CA                        00            .byte	0
09180 20CB                        00            .byte	0
09181 20CC                        00            .byte	0
09182 20CD                        D8            .byte	$D8
09183 20CE                        6C            .byte	$6C
09184 20CF                        36            .byte	$36
09185 20D0                        6C            .byte	$6C
09186 20D1                        D8            .byte	$D8
09187 20D2                        00            .byte	0
09188 20D3                        00            .byte	0
09189 20D4                        00            .byte	0
09190 20D5                        00            .byte	0
09191 20D6                        00            .byte	0
09192                                           ! 1147  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09193 20D7                        11            .byte	$11
09194 20D8                        44            .byte	$44
09195 20D9                        11            .byte	$11
09196 20DA                        44            .byte	$44
09197 20DB                        11            .byte	$11
09198 20DC                        44            .byte	$44
09199 20DD                        11            .byte	$11
09200 20DE                        44            .byte	$44
09201 20DF                        11            .byte	$11
09202 20E0                        44            .byte	$44
09203 20E1                        11            .byte	$11
09204 20E2                        44            .byte	$44
09205 20E3                        11            .byte	$11
09206 20E4                        44            .byte	$44
09207                                           ! 1148  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09208 20E5                        55            .byte	$55
09209 20E6                        AA            .byte	$AA
09210 20E7                        55            .byte	$55
09211 20E8                        AA            .byte	$AA
09212 20E9                        55            .byte	$55
09213 20EA                        AA            .byte	$AA
09214 20EB                        55            .byte	$55
09215 20EC                        AA            .byte	$AA
09216 20ED                        55            .byte	$55
09217 20EE                        AA            .byte	$AA
09218 20EF                        55            .byte	$55
09219 20F0                        AA            .byte	$AA
09220 20F1                        55            .byte	$55
09221 20F2                        AA            .byte	$AA
09222                                           ! 1149  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09223 20F3                        DD            .byte	$DD
09224 20F4                        77            .byte	$77
09225 20F5                        DD            .byte	$DD
09226 20F6                        77            .byte	$77
09227 20F7                        DD            .byte	$DD
09228 20F8                        77            .byte	$77
09229 20F9                        DD            .byte	$DD
09230 20FA                        77            .byte	$77
09231 20FB                        DD            .byte	$DD
09232 20FC                        77            .byte	$77
09233 20FD                        DD            .byte	$DD
09234 20FE                        77            .byte	$77
09235 20FF                        DD            .byte	$DD
09236 2100                        77            .byte	$77
09237                                           ! 1150  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09238 2101                        18            .byte	$18
09239 2102                        18            .byte	$18
09240 2103                        18            .byte	$18
09241 2104                        18            .byte	$18
09242 2105                        18            .byte	$18
09243 2106                        18            .byte	$18
09244 2107                        18            .byte	$18
09245 2108                        18            .byte	$18
09246 2109                        18            .byte	$18
09247 210A                        18            .byte	$18
09248 210B                        18            .byte	$18
09249 210C                        18            .byte	$18
09250 210D                        18            .byte	$18
09251 210E                        18            .byte	$18
09252                                           ! 1151  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09253 210F                        18            .byte	$18
09254 2110                        18            .byte	$18
09255 2111                        18            .byte	$18
09256 2112                        18            .byte	$18
09257 2113                        18            .byte	$18
09258 2114                        18            .byte	$18
09259 2115                        18            .byte	$18
09260 2116                        F8            .byte	$F8
09261 2117                        18            .byte	$18
09262 2118                        18            .byte	$18
09263 2119                        18            .byte	$18
09264 211A                        18            .byte	$18
09265 211B                        18            .byte	$18
09266 211C                        18            .byte	$18
09267                                           ! 1152  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09268 211D                        18            .byte	$18
09269 211E                        18            .byte	$18
09270 211F                        18            .byte	$18
09271 2120                        18            .byte	$18
09272 2121                        18            .byte	$18
09273 2122                        F8            .byte	$F8
09274 2123                        18            .byte	$18
09275 2124                        F8            .byte	$F8
09276 2125                        18            .byte	$18
09277 2126                        18            .byte	$18
09278 2127                        18            .byte	$18
09279 2128                        18            .byte	$18
09280 2129                        18            .byte	$18
09281 212A                        18            .byte	$18
09282                                           ! 1153  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09283 212B                        36            .byte	$36
09284 212C                        36            .byte	$36
09285 212D                        36            .byte	$36
09286 212E                        36            .byte	$36
09287 212F                        36            .byte	$36
09288 2130                        36            .byte	$36
09289 2131                        36            .byte	$36
09290 2132                        F6            .byte	$F6
09291 2133                        36            .byte	$36
09292 2134                        36            .byte	$36
09293 2135                        36            .byte	$36
09294 2136                        36            .byte	$36
09295 2137                        36            .byte	$36
09296 2138                        36            .byte	$36
09297                                           ! 1154  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09298 2139                        00            .byte	0
09299 213A                        00            .byte	0
09300 213B                        00            .byte	0
09301 213C                        00            .byte	0
09302 213D                        00            .byte	0
09303 213E                        00            .byte	0
09304 213F                        00            .byte	0
09305 2140                        FE            .byte	$FE
09306 2141                        36            .byte	$36
09307 2142                        36            .byte	$36
09308 2143                        36            .byte	$36
09309 2144                        36            .byte	$36
09310 2145                        36            .byte	$36
09311 2146                        36            .byte	$36
09312                                           ! 1155  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09313 2147                        00            .byte	0
09314 2148                        00            .byte	0
09315 2149                        00            .byte	0
09316 214A                        00            .byte	0
09317 214B                        00            .byte	0
09318 214C                        F8            .byte	$F8
09319 214D                        18            .byte	$18
09320 214E                        F8            .byte	$F8
09321 214F                        18            .byte	$18
09322 2150                        18            .byte	$18
09323 2151                        18            .byte	$18
09324 2152                        18            .byte	$18
09325 2153                        18            .byte	$18
09326 2154                        18            .byte	$18
09327                                           ! 1156  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09328 2155                        36            .byte	$36
09329 2156                        36            .byte	$36
09330 2157                        36            .byte	$36
09331 2158                        36            .byte	$36
09332 2159                        36            .byte	$36
09333 215A                        F6            .byte	$F6
09334 215B                        06            .byte	6
09335 215C                        F6            .byte	$F6
09336 215D                        36            .byte	$36
09337 215E                        36            .byte	$36
09338 215F                        36            .byte	$36
09339 2160                        36            .byte	$36
09340 2161                        36            .byte	$36
09341 2162                        36            .byte	$36
09342                                           ! 1157  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09343 2163                        36            .byte	$36
09344 2164                        36            .byte	$36
09345 2165                        36            .byte	$36
09346 2166                        36            .byte	$36
09347 2167                        36            .byte	$36
09348 2168                        36            .byte	$36
09349 2169                        36            .byte	$36
09350 216A                        36            .byte	$36
09351 216B                        36            .byte	$36
09352 216C                        36            .byte	$36
09353 216D                        36            .byte	$36
09354 216E                        36            .byte	$36
09355 216F                        36            .byte	$36
09356 2170                        36            .byte	$36
09357                                           ! 1158  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09358 2171                        00            .byte	0
09359 2172                        00            .byte	0
09360 2173                        00            .byte	0
09361 2174                        00            .byte	0
09362 2175                        00            .byte	0
09363 2176                        FE            .byte	$FE
09364 2177                        06            .byte	6
09365 2178                        F6            .byte	$F6
09366 2179                        36            .byte	$36
09367 217A                        36            .byte	$36
09368 217B                        36            .byte	$36
09369 217C                        36            .byte	$36
09370 217D                        36            .byte	$36
09371 217E                        36            .byte	$36
09372                                           ! 1159  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09373 217F                        36            .byte	$36
09374 2180                        36            .byte	$36
09375 2181                        36            .byte	$36
09376 2182                        36            .byte	$36
09377 2183                        36            .byte	$36
09378 2184                        F6            .byte	$F6
09379 2185                        06            .byte	6
09380 2186                        FE            .byte	$FE
09381 2187                        00            .byte	0
09382 2188                        00            .byte	0
09383 2189                        00            .byte	0
09384 218A                        00            .byte	0
09385 218B                        00            .byte	0
09386 218C                        00            .byte	0
09387                                           ! 1160  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09388 218D                        36            .byte	$36
09389 218E                        36            .byte	$36
09390 218F                        36            .byte	$36
09391 2190                        36            .byte	$36
09392 2191                        36            .byte	$36
09393 2192                        36            .byte	$36
09394 2193                        36            .byte	$36
09395 2194                        FE            .byte	$FE
09396 2195                        00            .byte	0
09397 2196                        00            .byte	0
09398 2197                        00            .byte	0
09399 2198                        00            .byte	0
09400 2199                        00            .byte	0
09401 219A                        00            .byte	0
09402                                           ! 1161  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09403 219B                        18            .byte	$18
09404 219C                        18            .byte	$18
09405 219D                        18            .byte	$18
09406 219E                        18            .byte	$18
09407 219F                        18            .byte	$18
09408 21A0                        F8            .byte	$F8
09409 21A1                        18            .byte	$18
09410 21A2                        F8            .byte	$F8
09411 21A3                        00            .byte	0
09412 21A4                        00            .byte	0
09413 21A5                        00            .byte	0
09414 21A6                        00            .byte	0
09415 21A7                        00            .byte	0
09416 21A8                        00            .byte	0
09417                                           ! 1162  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09418 21A9                        00            .byte	0
09419 21AA                        00            .byte	0
09420 21AB                        00            .byte	0
09421 21AC                        00            .byte	0
09422 21AD                        00            .byte	0
09423 21AE                        00            .byte	0
09424 21AF                        00            .byte	0
09425 21B0                        F8            .byte	$F8
09426 21B1                        18            .byte	$18
09427 21B2                        18            .byte	$18
09428 21B3                        18            .byte	$18
09429 21B4                        18            .byte	$18
09430 21B5                        18            .byte	$18
09431 21B6                        18            .byte	$18
09432                                           ! 1163  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09433 21B7                        18            .byte	$18
09434 21B8                        18            .byte	$18
09435 21B9                        18            .byte	$18
09436 21BA                        18            .byte	$18
09437 21BB                        18            .byte	$18
09438 21BC                        18            .byte	$18
09439 21BD                        18            .byte	$18
09440 21BE                        1F            .byte	$1F
09441 21BF                        00            .byte	0
09442 21C0                        00            .byte	0
09443 21C1                        00            .byte	0
09444 21C2                        00            .byte	0
09445 21C3                        00            .byte	0
09446 21C4                        00            .byte	0
09447                                           ! 1164  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09448 21C5                        18            .byte	$18
09449 21C6                        18            .byte	$18
09450 21C7                        18            .byte	$18
09451 21C8                        18            .byte	$18
09452 21C9                        18            .byte	$18
09453 21CA                        18            .byte	$18
09454 21CB                        18            .byte	$18
09455 21CC                        FF            .byte	$FF
09456 21CD                        00            .byte	0
09457 21CE                        00            .byte	0
09458 21CF                        00            .byte	0
09459 21D0                        00            .byte	0
09460 21D1                        00            .byte	0
09461 21D2                        00            .byte	0
09462                                           ! 1165  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09463 21D3                        00            .byte	0
09464 21D4                        00            .byte	0
09465 21D5                        00            .byte	0
09466 21D6                        00            .byte	0
09467 21D7                        00            .byte	0
09468 21D8                        00            .byte	0
09469 21D9                        00            .byte	0
09470 21DA                        FF            .byte	$FF
09471 21DB                        18            .byte	$18
09472 21DC                        18            .byte	$18
09473 21DD                        18            .byte	$18
09474 21DE                        18            .byte	$18
09475 21DF                        18            .byte	$18
09476 21E0                        18            .byte	$18
09477                                           ! 1166  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09478 21E1                        18            .byte	$18
09479 21E2                        18            .byte	$18
09480 21E3                        18            .byte	$18
09481 21E4                        18            .byte	$18
09482 21E5                        18            .byte	$18
09483 21E6                        18            .byte	$18
09484 21E7                        18            .byte	$18
09485 21E8                        1F            .byte	$1F
09486 21E9                        18            .byte	$18
09487 21EA                        18            .byte	$18
09488 21EB                        18            .byte	$18
09489 21EC                        18            .byte	$18
09490 21ED                        18            .byte	$18
09491 21EE                        18            .byte	$18
09492                                           ! 1167  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00
09493 21EF                        00            .byte	0
09494 21F0                        00            .byte	0
09495 21F1                        00            .byte	0
09496 21F2                        00            .byte	0
09497 21F3                        00            .byte	0
09498 21F4                        00            .byte	0
09499 21F5                        00            .byte	0
09500 21F6                        FF            .byte	$FF
09501 21F7                        00            .byte	0
09502 21F8                        00            .byte	0
09503 21F9                        00            .byte	0
09504                                           ! 1167 , 0x00, 0x00,
09505 21FA                        00            .byte	0
09506 21FB                        00            .byte	0
09507 21FC                        00            .byte	0
09508                                           ! 1168  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09509 21FD                        18            .byte	$18
09510 21FE                        18            .byte	$18
09511 21FF                        18            .byte	$18
09512 2200                        18            .byte	$18
09513 2201                        18            .byte	$18
09514 2202                        18            .byte	$18
09515 2203                        18            .byte	$18
09516 2204                        FF            .byte	$FF
09517 2205                        18            .byte	$18
09518 2206                        18            .byte	$18
09519 2207                        18            .byte	$18
09520 2208                        18            .byte	$18
09521 2209                        18            .byte	$18
09522 220A                        18            .byte	$18
09523                                           ! 1169  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09524 220B                        18            .byte	$18
09525 220C                        18            .byte	$18
09526 220D                        18            .byte	$18
09527 220E                        18            .byte	$18
09528 220F                        18            .byte	$18
09529 2210                        1F            .byte	$1F
09530 2211                        18            .byte	$18
09531 2212                        1F            .byte	$1F
09532 2213                        18            .byte	$18
09533 2214                        18            .byte	$18
09534 2215                        18            .byte	$18
09535 2216                        18            .byte	$18
09536 2217                        18            .byte	$18
09537 2218                        18            .byte	$18
09538                                           ! 1170  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09539 2219                        36            .byte	$36
09540 221A                        36            .byte	$36
09541 221B                        36            .byte	$36
09542 221C                        36            .byte	$36
09543 221D                        36            .byte	$36
09544 221E                        36            .byte	$36
09545 221F                        36            .byte	$36
09546 2220                        37            .byte	$37
09547 2221                        36            .byte	$36
09548 2222                        36            .byte	$36
09549 2223                        36            .byte	$36
09550 2224                        36            .byte	$36
09551 2225                        36            .byte	$36
09552 2226                        36            .byte	$36
09553                                           ! 1171  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09554 2227                        36            .byte	$36
09555 2228                        36            .byte	$36
09556 2229                        36            .byte	$36
09557 222A                        36            .byte	$36
09558 222B                        36            .byte	$36
09559 222C                        37            .byte	$37
09560 222D                        30            .byte	$30
09561 222E                        3F            .byte	$3F
09562 222F                        00            .byte	0
09563 2230                        00            .byte	0
09564 2231                        00            .byte	0
09565 2232                        00            .byte	0
09566 2233                        00            .byte	0
09567 2234                        00            .byte	0
09568                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09569 2235                        00            .byte	0
09570 2236                        00            .byte	0
09571 2237                        00            .byte	0
09572 2238                        00            .byte	0
09573 2239                        00            .byte	0
09574 223A                        3F            .byte	$3F
09575 223B                        30            .byte	$30
09576 223C                        37            .byte	$37
09577 223D                        36            .byte	$36
09578 223E                        36            .byte	$36
09579 223F                        36            .byte	$36
09580 2240                        36            .byte	$36
09581 2241                        36            .byte	$36
09582 2242                        36            .byte	$36
09583                                           ! 1173  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09584 2243                        36            .byte	$36
09585 2244                        36            .byte	$36
09586 2245                        36            .byte	$36
09587 2246                        36            .byte	$36
09588 2247                        36            .byte	$36
09589 2248                        F7            .byte	$F7
09590 2249                        00            .byte	0
09591 224A                        FF            .byte	$FF
09592 224B                        00            .byte	0
09593 224C                        00            .byte	0
09594 224D                        00            .byte	0
09595 224E                        00            .byte	0
09596 224F                        00            .byte	0
09597 2250                        00            .byte	0
09598                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09599 2251                        00            .byte	0
09600 2252                        00            .byte	0
09601 2253                        00            .byte	0
09602 2254                        00            .byte	0
09603 2255                        00            .byte	0
09604 2256                        FF            .byte	$FF
09605 2257                        00            .byte	0
09606 2258                        F7            .byte	$F7
09607 2259                        36            .byte	$36
09608 225A                        36            .byte	$36
09609 225B                        36            .byte	$36
09610 225C                        36            .byte	$36
09611 225D                        36            .byte	$36
09612 225E                        36            .byte	$36
09613                                           ! 1175  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09614 225F                        36            .byte	$36
09615 2260                        36            .byte	$36
09616 2261                        36            .byte	$36
09617 2262                        36            .byte	$36
09618 2263                        36            .byte	$36
09619 2264                        37            .byte	$37
09620 2265                        30            .byte	$30
09621 2266                        37            .byte	$37
09622 2267                        36            .byte	$36
09623 2268                        36            .byte	$36
09624 2269                        36            .byte	$36
09625 226A                        36            .byte	$36
09626 226B                        36            .byte	$36
09627 226C                        36            .byte	$36
09628                                           ! 1176  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09629 226D                        00            .byte	0
09630 226E                        00            .byte	0
09631 226F                        00            .byte	0
09632 2270                        00            .byte	0
09633 2271                        00            .byte	0
09634 2272                        FF            .byte	$FF
09635 2273                        00            .byte	0
09636 2274                        FF            .byte	$FF
09637 2275                        00            .byte	0
09638 2276                        00            .byte	0
09639 2277                        00            .byte	0
09640 2278                        00            .byte	0
09641 2279                        00            .byte	0
09642 227A                        00            .byte	0
09643                                           ! 1177  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09644 227B                        36            .byte	$36
09645 227C                        36            .byte	$36
09646 227D                        36            .byte	$36
09647 227E                        36            .byte	$36
09648 227F                        36            .byte	$36
09649 2280                        F7            .byte	$F7
09650 2281                        00            .byte	0
09651 2282                        F7            .byte	$F7
09652 2283                        36            .byte	$36
09653 2284                        36            .byte	$36
09654 2285                        36            .byte	$36
09655 2286                        36            .byte	$36
09656 2287                        36            .byte	$36
09657 2288                        36            .byte	$36
09658                                           ! 1178  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09659 2289                        18            .byte	$18
09660 228A                        18            .byte	$18
09661 228B                        18            .byte	$18
09662 228C                        18            .byte	$18
09663 228D                        18            .byte	$18
09664 228E                        FF            .byte	$FF
09665 228F                        00            .byte	0
09666 2290                        FF            .byte	$FF
09667 2291                        00            .byte	0
09668 2292                        00            .byte	0
09669 2293                        00            .byte	0
09670 2294                        00            .byte	0
09671 2295                        00            .byte	0
09672 2296                        00            .byte	0
09673                                           ! 1179  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09674 2297                        36            .byte	$36
09675 2298                        36            .byte	$36
09676 2299                        36            .byte	$36
09677 229A                        36            .byte	$36
09678 229B                        36            .byte	$36
09679 229C                        36            .byte	$36
09680 229D                        36            .byte	$36
09681 229E                        FF            .byte	$FF
09682 229F                        00            .byte	0
09683 22A0                        00            .byte	0
09684 22A1                        00            .byte	0
09685 22A2                        00            .byte	0
09686 22A3                        00            .byte	0
09687 22A4                        00            .byte	0
09688                                           ! 1180  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09689 22A5                        00            .byte	0
09690 22A6                        00            .byte	0
09691 22A7                        00            .byte	0
09692 22A8                        00            .byte	0
09693 22A9                        00            .byte	0
09694 22AA                        FF            .byte	$FF
09695 22AB                        00            .byte	0
09696 22AC                        FF            .byte	$FF
09697 22AD                        18            .byte	$18
09698 22AE                        18            .byte	$18
09699 22AF                        18            .byte	$18
09700 22B0                        18            .byte	$18
09701 22B1                        18            .byte	$18
09702 22B2                        18            .byte	$18
09703                                           ! 1181  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09704 22B3                        00            .byte	0
09705 22B4                        00            .byte	0
09706 22B5                        00            .byte	0
09707 22B6                        00            .byte	0
09708 22B7                        00            .byte	0
09709 22B8                        00            .byte	0
09710 22B9                        00            .byte	0
09711 22BA                        FF            .byte	$FF
09712 22BB                        36            .byte	$36
09713 22BC                        36            .byte	$36
09714 22BD                        36            .byte	$36
09715 22BE                        36            .byte	$36
09716 22BF                        36            .byte	$36
09717 22C0                        36            .byte	$36
09718                                           ! 1182  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09719 22C1                        36            .byte	$36
09720 22C2                        36            .byte	$36
09721 22C3                        36            .byte	$36
09722 22C4                        36            .byte	$36
09723 22C5                        36            .byte	$36
09724 22C6                        36            .byte	$36
09725 22C7                        36            .byte	$36
09726 22C8                        3F            .byte	$3F
09727 22C9                        00            .byte	0
09728 22CA                        00            .byte	0
09729 22CB                        00            .byte	0
09730 22CC                        00            .byte	0
09731 22CD                        00            .byte	0
09732 22CE                        00            .byte	0
09733                                           ! 1183  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09734 22CF                        18            .byte	$18
09735 22D0                        18            .byte	$18
09736 22D1                        18            .byte	$18
09737 22D2                        18            .byte	$18
09738 22D3                        18            .byte	$18
09739 22D4                        1F            .byte	$1F
09740 22D5                        18            .byte	$18
09741 22D6                        1F            .byte	$1F
09742 22D7                        00            .byte	0
09743 22D8                        00            .byte	0
09744 22D9                        00            .byte	0
09745 22DA                        00            .byte	0
09746 22DB                        00            .byte	0
09747 22DC                        00            .byte	0
09748                                           ! 1184  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09749 22DD                        00            .byte	0
09750 22DE                        00            .byte	0
09751 22DF                        00            .byte	0
09752 22E0                        00            .byte	0
09753 22E1                        00            .byte	0
09754 22E2                        1F            .byte	$1F
09755 22E3                        18            .byte	$18
09756 22E4                        1F            .byte	$1F
09757 22E5                        18            .byte	$18
09758 22E6                        18            .byte	$18
09759 22E7                        18            .byte	$18
09760 22E8                        18            .byte	$18
09761 22E9                        18            .byte	$18
09762 22EA                        18            .byte	$18
09763                                           ! 1185  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09764 22EB                        00            .byte	0
09765 22EC                        00            .byte	0
09766 22ED                        00            .byte	0
09767 22EE                        00            .byte	0
09768 22EF                        00            .byte	0
09769 22F0                        00            .byte	0
09770 22F1                        00            .byte	0
09771 22F2                        3F            .byte	$3F
09772 22F3                        36            .byte	$36
09773 22F4                        36            .byte	$36
09774 22F5                        36            .byte	$36
09775 22F6                        36            .byte	$36
09776 22F7                        36            .byte	$36
09777 22F8                        36            .byte	$36
09778                                           ! 1186  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09779 22F9                        36            .byte	$36
09780 22FA                        36            .byte	$36
09781 22FB                        36            .byte	$36
09782 22FC                        36            .byte	$36
09783 22FD                        36            .byte	$36
09784 22FE                        36            .byte	$36
09785 22FF                        36            .byte	$36
09786 2300                        FF            .byte	$FF
09787 2301                        36            .byte	$36
09788 2302                        36            .byte	$36
09789 2303                        36            .byte	$36
09790 2304                        36            .byte	$36
09791 2305                        36            .byte	$36
09792 2306                        36            .byte	$36
09793                                           ! 1187  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09794 2307                        18            .byte	$18
09795 2308                        18            .byte	$18
09796 2309                        18            .byte	$18
09797 230A                        18            .byte	$18
09798 230B                        18            .byte	$18
09799 230C                        FF            .byte	$FF
09800 230D                        18            .byte	$18
09801 230E                        FF            .byte	$FF
09802 230F                        18            .byte	$18
09803 2310                        18            .byte	$18
09804 2311                        18            .byte	$18
09805 2312                        18            .byte	$18
09806 2313                        18            .byte	$18
09807 2314                        18            .byte	$18
09808                                           ! 1188  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09809 2315                        18            .byte	$18
09810 2316                        18            .byte	$18
09811 2317                        18            .byte	$18
09812 2318                        18            .byte	$18
09813 2319                        18            .byte	$18
09814 231A                        18            .byte	$18
09815 231B                        18            .byte	$18
09816 231C                        F8            .byte	$F8
09817 231D                        00            .byte	0
09818 231E                        00            .byte	0
09819 231F                        00            .byte	0
09820 2320                        00            .byte	0
09821 2321                        00            .byte	0
09822 2322                        00            .byte	0
09823                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09824 2323                        00            .byte	0
09825 2324                        00            .byte	0
09826 2325                        00            .byte	0
09827 2326                        00            .byte	0
09828 2327                        00            .byte	0
09829 2328                        00            .byte	0
09830 2329                        00            .byte	0
09831 232A                        1F            .byte	$1F
09832 232B                        18            .byte	$18
09833 232C                        18            .byte	$18
09834 232D                        18            .byte	$18
09835 232E                        18            .byte	$18
09836 232F                        18            .byte	$18
09837 2330                        18            .byte	$18
09838                                           ! 1190  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09839 2331                        FF            .byte	$FF
09840 2332                        FF            .byte	$FF
09841 2333                        FF            .byte	$FF
09842 2334                        FF            .byte	$FF
09843 2335                        FF            .byte	$FF
09844 2336                        FF            .byte	$FF
09845 2337                        FF            .byte	$FF
09846 2338                        FF            .byte	$FF
09847 2339                        FF            .byte	$FF
09848 233A                        FF            .byte	$FF
09849 233B                        FF            .byte	$FF
09850 233C                        FF            .byte	$FF
09851 233D                        FF            .byte	$FF
09852 233E                        FF            .byte	$FF
09853                                           ! 1191  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
09854 233F                        00            .byte	0
09855 2340                        00            .byte	0
09856 2341                        00            .byte	0
09857 2342                        00            .byte	0
09858 2343                        00            .byte	0
09859 2344                        00            .byte	0
09860 2345                        00            .byte	0
09861 2346                        FF            .byte	$FF
09862 2347                        FF            .byte	$FF
09863 2348                        FF            .byte	$FF
09864 2349                        FF            .byte	$FF
09865 234A                        FF            .byte	$FF
09866 234B                        FF            .byte	$FF
09867                                           ! 1191 0xff,
09868 234C                        FF            .byte	$FF
09869                                           ! 1192  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
09870 234D                        F0            .byte	$F0
09871 234E                        F0            .byte	$F0
09872 234F                        F0            .byte	$F0
09873 2350                        F0            .byte	$F0
09874 2351                        F0            .byte	$F0
09875 2352                        F0            .byte	$F0
09876 2353                        F0            .byte	$F0
09877 2354                        F0            .byte	$F0
09878 2355                        F0            .byte	$F0
09879 2356                        F0            .byte	$F0
09880 2357                        F0            .byte	$F0
09881 2358                        F0            .byte	$F0
09882 2359                        F0            .byte	$F0
09883 235A                        F0            .byte	$F0
09884                                           ! 1193  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
09885 235B                        0F            .byte	$F
09886 235C                        0F            .byte	$F
09887 235D                        0F            .byte	$F
09888 235E                        0F            .byte	$F
09889 235F                        0F            .byte	$F
09890 2360                        0F            .byte	$F
09891 2361                        0F            .byte	$F
09892 2362                        0F            .byte	$F
09893 2363                        0F            .byte	$F
09894 2364                        0F            .byte	$F
09895 2365                        0F            .byte	$F
09896 2366                        0F            .byte	$F
09897 2367                        0F            .byte	$F
09898 2368                        0F            .byte	$F
09899                                           ! 1194  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09900 2369                        FF            .byte	$FF
09901 236A                        FF            .byte	$FF
09902 236B                        FF            .byte	$FF
09903 236C                        FF            .byte	$FF
09904 236D                        FF            .byte	$FF
09905 236E                        FF            .byte	$FF
09906 236F                        FF            .byte	$FF
09907 2370                        00            .byte	0
09908 2371                        00            .byte	0
09909 2372                        00            .byte	0
09910 2373                        00            .byte	0
09911 2374                        00            .byte	0
09912 2375                        00            .byte	0
09913 2376                        00            .byte	0
09914                                           ! 1195  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
09915 2377                        00            .byte	0
09916 2378                        00            .byte	0
09917 2379                        00            .byte	0
09918 237A                        00            .byte	0
09919 237B                        00            .byte	0
09920 237C                        76            .byte	$76
09921 237D                        DC            .byte	$DC
09922 237E                        D8            .byte	$D8
09923 237F                        D8            .byte	$D8
09924 2380                        DC            .byte	$DC
09925 2381                        76            .byte	$76
09926 2382                        00            .byte	0
09927 2383                        00            .byte	0
09928 2384                        00            .byte	0
09929                                           ! 1196  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
09930 2385                        00            .byte	0
09931 2386                        00            .byte	0
09932 2387                        00            .byte	0
09933 2388                        00            .byte	0
09934 2389                        7C            .byte	$7C
09935 238A                        C6            .byte	$C6
09936 238B                        FC            .byte	$FC
09937 238C                        C6            .byte	$C6
09938 238D                        C6            .byte	$C6
09939 238E                        FC            .byte	$FC
09940 238F                        C0            .byte	$C0
09941 2390                        C0            .byte	$C0
09942 2391                        40            .byte	$40
09943 2392                        00            .byte	0
09944                                           ! 1197  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
09945 2393                        00            .byte	0
09946 2394                        00            .byte	0
09947 2395                        FE            .byte	$FE
09948 2396                        C6            .byte	$C6
09949 2397                        C6            .byte	$C6
09950 2398                        C0            .byte	$C0
09951 2399                        C0            .byte	$C0
09952 239A                        C0            .byte	$C0
09953 239B                        C0            .byte	$C0
09954 239C                        C0            .byte	$C0
09955 239D                        C0            .byte	$C0
09956 239E                        00            .byte	0
09957 239F                        00            .byte	0
09958 23A0                        00            .byte	0
09959                                           ! 1198  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
09960 23A1                        00            .byte	0
09961 23A2                        00            .byte	0
09962 23A3                        00            .byte	0
09963 23A4                        00            .byte	0
09964 23A5                        FE            .byte	$FE
09965 23A6                        6C            .byte	$6C
09966 23A7                        6C            .byte	$6C
09967 23A8                        6C            .byte	$6C
09968 23A9                        6C            .byte	$6C
09969 23AA                        6C            .byte	$6C
09970 23AB                        6C            .byte	$6C
09971 23AC                        00            .byte	0
09972 23AD                        00            .byte	0
09973 23AE                        00            .byte	0
09974                                           ! 1199  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
09975 23AF                        00            .byte	0
09976 23B0                        00            .byte	0
09977 23B1                        FE            .byte	$FE
09978 23B2                        C6            .byte	$C6
09979 23B3                        60            .byte	$60
09980 23B4                        30            .byte	$30
09981 23B5                        18            .byte	$18
09982 23B6                        30            .byte	$30
09983 23B7                        60            .byte	$60
09984 23B8                        C6            .byte	$C6
09985 23B9                        FE            .byte	$FE
09986 23BA                        00            .byte	0
09987 23BB                        00            .byte	0
09988 23BC                        00            .byte	0
09989                                           ! 1200  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
09990 23BD                        00            .byte	0
09991 23BE                        00            .byte	0
09992 23BF                        00            .byte	0
09993 23C0                        00            .byte	0
09994 23C1                        00            .byte	0
09995 23C2                        7E            .byte	$7E
09996 23C3                        D8            .byte	$D8
09997 23C4                        D8            .byte	$D8
09998 23C5                        D8            .byte	$D8
09999 23C6                        D8            .byte	$D8
10000 23C7                        70            .byte	$70
10001 23C8                        00            .byte	0
10002 23C9                        00            .byte	0
10003 23CA                        00            .byte	0
10004                                           ! 1201  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10005 23CB                        00            .byte	0
10006 23CC                        00            .byte	0
10007 23CD                        00            .byte	0
10008 23CE                        00            .byte	0
10009 23CF                        66            .byte	$66
10010 23D0                        66            .byte	$66
10011 23D1                        66            .byte	$66
10012 23D2                        66            .byte	$66
10013 23D3                        7C            .byte	$7C
10014 23D4                        60            .byte	$60
10015 23D5                        60            .byte	$60
10016 23D6                        C0            .byte	$C0
10017 23D7                        00            .byte	0
10018 23D8                        00            .byte	0
10019                                           ! 1202  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10020 23D9                        00            .byte	0
10021 23DA                        00            .byte	0
10022 23DB                        00            .byte	0
10023 23DC                        00            .byte	0
10024 23DD                        76            .byte	$76
10025 23DE                        DC            .byte	$DC
10026 23DF                        18            .byte	$18
10027 23E0                        18            .byte	$18
10028 23E1                        18            .byte	$18
10029 23E2                        18            .byte	$18
10030 23E3                        18            .byte	$18
10031 23E4                        00            .byte	0
10032 23E5                        00            .byte	0
10033 23E6                        00            .byte	0
10034                                           ! 1203  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10035 23E7                        00            .byte	0
10036 23E8                        00            .byte	0
10037 23E9                        7E            .byte	$7E
10038 23EA                        18            .byte	$18
10039 23EB                        3C            .byte	$3C
10040 23EC                        66            .byte	$66
10041 23ED                        66            .byte	$66
10042 23EE                        66            .byte	$66
10043 23EF                        3C            .byte	$3C
10044 23F0                        18            .byte	$18
10045 23F1                        7E            .byte	$7E
10046 23F2                        00            .byte	0
10047 23F3                        00            .byte	0
10048 23F4                        00            .byte	0
10049                                           ! 1204  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10050 23F5                        00            .byte	0
10051 23F6                        00            .byte	0
10052 23F7                        38            .byte	$38
10053 23F8                        6C            .byte	$6C
10054 23F9                        C6            .byte	$C6
10055 23FA                        C6            .byte	$C6
10056 23FB                        FE            .byte	$FE
10057 23FC                        C6            .byte	$C6
10058 23FD                        C6            .byte	$C6
10059 23FE                        6C            .byte	$6C
10060 23FF                        38            .byte	$38
10061 2400                        00            .byte	0
10062 2401                        00            .byte	0
10063 2402                        00            .byte	0
10064                                           ! 1205  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10065 2403                        00            .byte	0
10066 2404                        00            .byte	0
10067 2405                        38            .byte	$38
10068 2406                        6C            .byte	$6C
10069 2407                        C6            .byte	$C6
10070 2408                        C6            .byte	$C6
10071 2409                        C6            .byte	$C6
10072 240A                        6C            .byte	$6C
10073 240B                        6C            .byte	$6C
10074 240C                        6C            .byte	$6C
10075 240D                        EE            .byte	$EE
10076 240E                        00            .byte	0
10077 240F                        00            .byte	0
10078 2410                        00            .byte	0
10079                                           ! 1206  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10080 2411                        00            .byte	0
10081 2412                        00            .byte	0
10082 2413                        1E            .byte	$1E
10083 2414                        30            .byte	$30
10084 2415                        18            .byte	$18
10085 2416                        0C            .byte	$C
10086 2417                        3E            .byte	$3E
10087 2418                        66            .byte	$66
10088 2419                        66            .byte	$66
10089 241A                        66            .byte	$66
10090 241B                        3C            .byte	$3C
10091 241C                        00            .byte	0
10092 241D                        00            .byte	0
10093 241E                        00            .byte	0
10094                                           ! 1207  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10095 241F                        00            .byte	0
10096 2420                        00            .byte	0
10097 2421                        00            .byte	0
10098 2422                        00            .byte	0
10099 2423                        00            .byte	0
10100 2424                        7E            .byte	$7E
10101 2425                        DB            .byte	$DB
10102 2426                        DB            .byte	$DB
10103 2427                        7E            .byte	$7E
10104 2428                        00            .byte	0
10105 2429                        00            .byte	0
10106 242A                        00            .byte	0
10107 242B                        00            .byte	0
10108 242C                        00            .byte	0
10109                                           ! 1208  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10110 242D                        00            .byte	0
10111 242E                        00            .byte	0
10112 242F                        03            .byte	3
10113 2430                        06            .byte	6
10114 2431                        7E            .byte	$7E
10115 2432                        DB            .byte	$DB
10116 2433                        DB            .byte	$DB
10117 2434                        F3            .byte	$F3
10118 2435                        7E            .byte	$7E
10119 2436                        60            .byte	$60
10120 2437                        C0            .byte	$C0
10121 2438                        00            .byte	0
10122 2439                        00            .byte	0
10123 243A                        00            .byte	0
10124                                           ! 1209  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10125 243B                        00            .byte	0
10126 243C                        00            .byte	0
10127 243D                        1C            .byte	$1C
10128 243E                        30            .byte	$30
10129 243F                        60            .byte	$60
10130 2440                        60            .byte	$60
10131 2441                        7C            .byte	$7C
10132 2442                        60            .byte	$60
10133 2443                        60            .byte	$60
10134 2444                        30            .byte	$30
10135 2445                        1C            .byte	$1C
10136 2446                        00            .byte	0
10137 2447                        00            .byte	0
10138 2448                        00            .byte	0
10139                                           ! 1210  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10140 2449                        00            .byte	0
10141 244A                        00            .byte	0
10142 244B                        00            .byte	0
10143 244C                        7C            .byte	$7C
10144 244D                        C6            .byte	$C6
10145 244E                        C6            .byte	$C6
10146 244F                        C6            .byte	$C6
10147 2450                        C6            .byte	$C6
10148 2451                        C6            .byte	$C6
10149 2452                        C6            .byte	$C6
10150 2453                        C6            .byte	$C6
10151 2454                        00            .byte	0
10152 2455                        00            .byte	0
10153 2456                        00            .byte	0
10154                                           ! 1211  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10155 2457                        00            .byte	0
10156 2458                        00            .byte	0
10157 2459                        00            .byte	0
10158 245A                        FE            .byte	$FE
10159 245B                        00            .byte	0
10160 245C                        00            .byte	0
10161 245D                        FE            .byte	$FE
10162 245E                        00            .byte	0
10163 245F                        00            .byte	0
10164 2460                        FE            .byte	$FE
10165 2461                        00            .byte	0
10166 2462                        00            .byte	0
10167 2463                        00            .byte	0
10168 2464                        00            .byte	0
10169                                           ! 1212  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10170 2465                        00            .byte	0
10171 2466                        00            .byte	0
10172 2467                        00            .byte	0
10173 2468                        18            .byte	$18
10174 2469                        18            .byte	$18
10175 246A                        7E            .byte	$7E
10176 246B                        18            .byte	$18
10177 246C                        18            .byte	$18
10178 246D                        00            .byte	0
10179 246E                        00            .byte	0
10180 246F                        FF            .byte	$FF
10181 2470                        00            .byte	0
10182 2471                        00            .byte	0
10183 2472                        00            .byte	0
10184                                           ! 1213  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10185 2473                        00            .byte	0
10186 2474                        00            .byte	0
10187 2475                        30            .byte	$30
10188 2476                        18            .byte	$18
10189 2477                        0C            .byte	$C
10190 2478                        06            .byte	6
10191 2479                        0C            .byte	$C
10192 247A                        18            .byte	$18
10193 247B                        30            .byte	$30
10194 247C                        00            .byte	0
10195 247D                        7E            .byte	$7E
10196 247E                        00            .byte	0
10197 247F                        00            .byte	0
10198 2480                        00            .byte	0
10199                                           ! 1214  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10200 2481                        00            .byte	0
10201 2482                        00            .byte	0
10202 2483                        0C            .byte	$C
10203 2484                        18            .byte	$18
10204 2485                        30            .byte	$30
10205 2486                        60            .byte	$60
10206 2487                        30            .byte	$30
10207 2488                        18            .byte	$18
10208 2489                        0C            .byte	$C
10209 248A                        00            .byte	0
10210 248B                        7E            .byte	$7E
10211 248C                        00            .byte	0
10212 248D                        00            .byte	0
10213 248E                        00            .byte	0
10214                                           ! 1215  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10215 248F                        00            .byte	0
10216 2490                        00            .byte	0
10217 2491                        0E            .byte	$E
10218 2492                        1B            .byte	$1B
10219 2493                        1B            .byte	$1B
10220 2494                        18            .byte	$18
10221 2495                        18            .byte	$18
10222 2496                        18            .byte	$18
10223 2497                        18            .byte	$18
10224 2498                        18            .byte	$18
10225 2499                        18            .byte	$18
10226 249A                        18            .byte	$18
10227 249B                        18            .byte	$18
10228 249C                        18            .byte	$18
10229                                           ! 1216  0
10230                                           ! 1216 x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10231 249D                        18            .byte	$18
10232 249E                        18            .byte	$18
10233 249F                        18            .byte	$18
10234 24A0                        18            .byte	$18
10235 24A1                        18            .byte	$18
10236 24A2                        18            .byte	$18
10237 24A3                        18            .byte	$18
10238 24A4                        18            .byte	$18
10239 24A5                        D8            .byte	$D8
10240 24A6                        D8            .byte	$D8
10241 24A7                        70            .byte	$70
10242 24A8                        00            .byte	0
10243 24A9                        00            .byte	0
10244 24AA                        00            .byte	0
10245                                           ! 1217  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10246 24AB                        00            .byte	0
10247 24AC                        00            .byte	0
10248 24AD                        00            .byte	0
10249 24AE                        18            .byte	$18
10250 24AF                        18            .byte	$18
10251 24B0                        00            .byte	0
10252 24B1                        7E            .byte	$7E
10253 24B2                        00            .byte	0
10254 24B3                        18            .byte	$18
10255 24B4                        18            .byte	$18
10256 24B5                        00            .byte	0
10257 24B6                        00            .byte	0
10258 24B7                        00            .byte	0
10259 24B8                        00            .byte	0
10260                                           ! 1218  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10261 24B9                        00            .byte	0
10262 24BA                        00            .byte	0
10263 24BB                        00            .byte	0
10264 24BC                        00            .byte	0
10265 24BD                        76            .byte	$76
10266 24BE                        DC            .byte	$DC
10267 24BF                        00            .byte	0
10268 24C0                        76            .byte	$76
10269 24C1                        DC            .byte	$DC
10270 24C2                        00            .byte	0
10271 24C3                        00            .byte	0
10272 24C4                        00            .byte	0
10273 24C5                        00            .byte	0
10274 24C6                        00            .byte	0
10275                                           ! 1219  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10276 24C7                        00            .byte	0
10277 24C8                        38            .byte	$38
10278 24C9                        6C            .byte	$6C
10279 24CA                        6C            .byte	$6C
10280 24CB                        38            .byte	$38
10281 24CC                        00            .byte	0
10282 24CD                        00            .byte	0
10283 24CE                        00            .byte	0
10284 24CF                        00            .byte	0
10285 24D0                        00            .byte	0
10286 24D1                        00            .byte	0
10287 24D2                        00            .byte	0
10288 24D3                        00            .byte	0
10289 24D4                        00            .byte	0
10290                                           ! 1220  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10291 24D5                        00            .byte	0
10292 24D6                        00            .byte	0
10293 24D7                        00            .byte	0
10294 24D8                        00            .byte	0
10295 24D9                        00            .byte	0
10296 24DA                        00            .byte	0
10297 24DB                        18            .byte	$18
10298 24DC                        18            .byte	$18
10299 24DD                        00            .byte	0
10300 24DE                        00            .byte	0
10301 24DF                        00            .byte	0
10302 24E0                        00            .byte	0
10303 24E1                        00            .byte	0
10304 24E2                        00            .byte	0
10305                                           ! 1221  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10306 24E3                        00            .byte	0
10307 24E4                        00            .byte	0
10308 24E5                        00            .byte	0
10309 24E6                        00            .byte	0
10310 24E7                        00            .byte	0
10311 24E8                        00            .byte	0
10312 24E9                        00            .byte	0
10313 24EA                        18            .byte	$18
10314 24EB                        00            .byte	0
10315 24EC                        00            .byte	0
10316 24ED                        00            .byte	0
10317 24EE                        00            .byte	0
10318 24EF                        00            .byte	0
10319 24F0                        00            .byte	0
10320                                           ! 1222  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10321 24F1                        00            .byte	0
10322 24F2                        0F            .byte	$F
10323 24F3                        0C            .byte	$C
10324 24F4                        0C            .byte	$C
10325 24F5                        0C            .byte	$C
10326 24F6                        0C            .byte	$C
10327 24F7                        0C            .byte	$C
10328 24F8                        EC            .byte	$EC
10329 24F9                        6C            .byte	$6C
10330 24FA                        3C            .byte	$3C
10331 24FB                        1C            .byte	$1C
10332 24FC                        00            .byte	0
10333 24FD                        00            .byte	0
10334 24FE                        00            .byte	0
10335                                           ! 1223  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10336 24FF                        00            .byte	0
10337 2500                        D8            .byte	$D8
10338 2501                        6C            .byte	$6C
10339 2502                        6C            .byte	$6C
10340 2503                        6C            .byte	$6C
10341 2504                        6C            .byte	$6C
10342 2505                        6C            .byte	$6C
10343 2506                        00            .byte	0
10344 2507                        00            .byte	0
10345 2508                        00            .byte	0
10346 2509                        00            .byte	0
10347 250A                        00            .byte	0
10348 250B                        00            .byte	0
10349 250C                        00            .byte	0
10350                                           ! 1224  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10351 250D                        00            .byte	0
10352 250E                        70            .byte	$70
10353 250F                        D8            .byte	$D8
10354 2510                        30            .byte	$30
10355 2511                        60            .byte	$60
10356 2512                        C8            .byte	$C8
10357 2513                        F8            .byte	$F8
10358 2514                        00            .byte	0
10359 2515                        00            .byte	0
10360 2516                        00            .byte	0
10361 2517                        00            .byte	0
10362 2518                        00            .byte	0
10363 2519                        00            .byte	0
10364 251A                        00            .byte	0
10365                                           ! 1225  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10366 251B                        00            .byte	0
10367 251C                        00            .byte	0
10368 251D                        00            .byte	0
10369 251E                        00            .byte	0
10370 251F                        7C            .byte	$7C
10371 2520                        7C            .byte	$7C
10372 2521                        7C            .byte	$7C
10373 2522                        7C            .byte	$7C
10374 2523                        7C            .byte	$7C
10375 2524                        7C            .byte	$7C
10376 2525                        00            .byte	0
10377 2526                        00            .byte	0
10378 2527                        00            .byte	0
10379 2528                        00            .byte	0
10380                                           ! 1226  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10381 2529                        00            .byte	0
10382 252A                        00            .byte	0
10383 252B                        00            .byte	0
10384 252C                        00            .byte	0
10385 252D                        00            .byte	0
10386 252E                        00            .byte	0
10387 252F                        00            .byte	0
10388 2530                        00            .byte	0
10389 2531                        00            .byte	0
10390 2532                        00            .byte	0
10391 2533                        00            .byte	0
10392 2534                        00            .byte	0
10393 2535                        00            .byte	0
10394                                           ! 1227 };
10395 2536                        00            .byte	0
10396                                           !BCC_EOS
10397                                           ! 1228 static Bit8u vgafont16[256*16]=
10398                                           ! 1229 {
10399                       00002537            _vgafont16:
10400                                           ! 1230  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10401 2537                        00            .byte	0
10402 2538                        00            .byte	0
10403 2539                        00            .byte	0
10404 253A                        00            .byte	0
10405 253B                        00            .byte	0
10406 253C                        00            .byte	0
10407 253D                        00            .byte	0
10408 253E                        00            .byte	0
10409 253F                        00            .byte	0
10410 2540                        00            .byte	0
10411 2541                        00            .byte	0
10412 2542                        00            .byte	0
10413 2543                        00            .byte	0
10414 2544                        00            .byte	0
10415 2545                        00            .byte	0
10416 2546                        00            .byte	0
10417                                           ! 1231  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10418 2547                        00            .byte	0
10419 2548                        00            .byte	0
10420 2549                        7E            .byte	$7E
10421 254A                        81            .byte	$81
10422 254B                        A5            .byte	$A5
10423 254C                        81            .byte	$81
10424 254D                        81            .byte	$81
10425 254E                        BD            .byte	$BD
10426 254F                        99            .byte	$99
10427 2550                        81            .byte	$81
10428 2551                        81            .byte	$81
10429 2552                        7E            .byte	$7E
10430 2553                        00            .byte	0
10431 2554                        00            .byte	0
10432 2555                        00            .byte	0
10433 2556                        00            .byte	0
10434                                           ! 1232  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10435 2557                        00            .byte	0
10436 2558                        00            .byte	0
10437 2559                        7E            .byte	$7E
10438 255A                        FF            .byte	$FF
10439 255B                        DB            .byte	$DB
10440 255C                        FF            .byte	$FF
10441 255D                        FF            .byte	$FF
10442 255E                        C3            .byte	$C3
10443 255F                        E7            .byte	$E7
10444 2560                        FF            .byte	$FF
10445 2561                        FF            .byte	$FF
10446 2562                        7E            .byte	$7E
10447 2563                        00            .byte	0
10448 2564                        00            .byte	0
10449 2565                        00            .byte	0
10450 2566                        00            .byte	0
10451                                           ! 1233  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10452 2567                        00            .byte	0
10453 2568                        00            .byte	0
10454 2569                        00            .byte	0
10455 256A                        00            .byte	0
10456 256B                        6C            .byte	$6C
10457 256C                        FE            .byte	$FE
10458 256D                        FE            .byte	$FE
10459 256E                        FE            .byte	$FE
10460 256F                        FE            .byte	$FE
10461 2570                        7C            .byte	$7C
10462 2571                        38            .byte	$38
10463 2572                        10            .byte	$10
10464 2573                        00            .byte	0
10465 2574                        00            .byte	0
10466 2575                        00            .byte	0
10467 2576                        00            .byte	0
10468                                           ! 1234  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10469 2577                        00            .byte	0
10470 2578                        00            .byte	0
10471 2579                        00            .byte	0
10472 257A                        00            .byte	0
10473 257B                        10            .byte	$10
10474 257C                        38            .byte	$38
10475 257D                        7C            .byte	$7C
10476 257E                        FE            .byte	$FE
10477 257F                        7C            .byte	$7C
10478 2580                        38            .byte	$38
10479 2581                        10            .byte	$10
10480 2582                        00            .byte	0
10481 2583                        00            .byte	0
10482 2584                        00            .byte	0
10483 2585                        00            .byte	0
10484 2586                        00            .byte	0
10485                                           ! 1235  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10486 2587                        00            .byte	0
10487 2588                        00            .byte	0
10488 2589                        00            .byte	0
10489 258A                        18            .byte	$18
10490 258B                        3C            .byte	$3C
10491 258C                        3C            .byte	$3C
10492 258D                        E7            .byte	$E7
10493 258E                        E7            .byte	$E7
10494 258F                        E7            .byte	$E7
10495 2590                        18            .byte	$18
10496 2591                        18            .byte	$18
10497 2592                        3C            .byte	$3C
10498 2593                        00            .byte	0
10499 2594                        00            .byte	0
10500 2595                        00            .byte	0
10501 2596                        00            .byte	0
10502                                           ! 1236  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10503 2597                        00            .byte	0
10504 2598                        00            .byte	0
10505 2599                        00            .byte	0
10506 259A                        18            .byte	$18
10507 259B                        3C            .byte	$3C
10508 259C                        7E            .byte	$7E
10509 259D                        FF            .byte	$FF
10510 259E                        FF            .byte	$FF
10511 259F                        7E            .byte	$7E
10512 25A0                        18            .byte	$18
10513 25A1                        18            .byte	$18
10514 25A2                        3C            .byte	$3C
10515 25A3                        00            .byte	0
10516 25A4                        00            .byte	0
10517 25A5                        00            .byte	0
10518 25A6                        00            .byte	0
10519                                           ! 1237  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10520 25A7                        00            .byte	0
10521 25A8                        00            .byte	0
10522 25A9                        00            .byte	0
10523 25AA                        00            .byte	0
10524 25AB                        00            .byte	0
10525 25AC                        00            .byte	0
10526 25AD                        18            .byte	$18
10527 25AE                        3C            .byte	$3C
10528 25AF                        3C            .byte	$3C
10529 25B0                        18            .byte	$18
10530 25B1                        00            .byte	0
10531 25B2                        00            .byte	0
10532 25B3                        00            .byte	0
10533 25B4                        00            .byte	0
10534 25B5                        00            .byte	0
10535 25B6                        00            .byte	0
10536                                           ! 1238  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10537 25B7                        FF            .byte	$FF
10538 25B8                        FF            .byte	$FF
10539 25B9                        FF            .byte	$FF
10540 25BA                        FF            .byte	$FF
10541 25BB                        FF            .byte	$FF
10542 25BC                        FF            .byte	$FF
10543 25BD                        E7            .byte	$E7
10544 25BE                        C3            .byte	$C3
10545 25BF                        C3            .byte	$C3
10546 25C0                        E7            .byte	$E7
10547 25C1                        FF            .byte	$FF
10548 25C2                        FF            .byte	$FF
10549 25C3                        FF            .byte	$FF
10550 25C4                        FF            .byte	$FF
10551 25C5                        FF            .byte	$FF
10552 25C6                        FF            .byte	$FF
10553                                           ! 1239  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10554 25C7                        00            .byte	0
10555 25C8                        00            .byte	0
10556 25C9                        00            .byte	0
10557 25CA                        00            .byte	0
10558 25CB                        00            .byte	0
10559 25CC                        3C            .byte	$3C
10560 25CD                        66            .byte	$66
10561 25CE                        42            .byte	$42
10562 25CF                        42            .byte	$42
10563 25D0                        66            .byte	$66
10564 25D1                        3C            .byte	$3C
10565 25D2                        00            .byte	0
10566 25D3                        00            .byte	0
10567 25D4                        00            .byte	0
10568 25D5                        00            .byte	0
10569 25D6                        00            .byte	0
10570                                           ! 1240  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10571 25D7                        FF            .byte	$FF
10572 25D8                        FF            .byte	$FF
10573 25D9                        FF            .byte	$FF
10574 25DA                        FF            .byte	$FF
10575 25DB                        FF            .byte	$FF
10576 25DC                        C3            .byte	$C3
10577 25DD                        99            .byte	$99
10578 25DE                        BD            .byte	$BD
10579 25DF                        BD            .byte	$BD
10580 25E0                        99            .byte	$99
10581 25E1                        C3            .byte	$C3
10582 25E2                        FF            .byte	$FF
10583 25E3                        FF            .byte	$FF
10584 25E4                        FF            .byte	$FF
10585 25E5                        FF            .byte	$FF
10586 25E6                        FF            .byte	$FF
10587                                           ! 1241  0x00, 0x00,
10588 25E7                        00            .byte	0
10589                                           ! 1241  0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10590 25E8                        00            .byte	0
10591 25E9                        1E            .byte	$1E
10592 25EA                        0E            .byte	$E
10593 25EB                        1A            .byte	$1A
10594 25EC                        32            .byte	$32
10595 25ED                        78            .byte	$78
10596 25EE                        CC            .byte	$CC
10597 25EF                        CC            .byte	$CC
10598 25F0                        CC            .byte	$CC
10599 25F1                        CC            .byte	$CC
10600 25F2                        78            .byte	$78
10601 25F3                        00            .byte	0
10602 25F4                        00            .byte	0
10603 25F5                        00            .byte	0
10604 25F6                        00            .byte	0
10605                                           ! 1242  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10606 25F7                        00            .byte	0
10607 25F8                        00            .byte	0
10608 25F9                        3C            .byte	$3C
10609 25FA                        66            .byte	$66
10610 25FB                        66            .byte	$66
10611 25FC                        66            .byte	$66
10612 25FD                        66            .byte	$66
10613 25FE                        3C            .byte	$3C
10614 25FF                        18            .byte	$18
10615 2600                        7E            .byte	$7E
10616 2601                        18            .byte	$18
10617 2602                        18            .byte	$18
10618 2603                        00            .byte	0
10619 2604                        00            .byte	0
10620 2605                        00            .byte	0
10621 2606                        00            .byte	0
10622                                           ! 1243  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10623 2607                        00            .byte	0
10624 2608                        00            .byte	0
10625 2609                        3F            .byte	$3F
10626 260A                        33            .byte	$33
10627 260B                        3F            .byte	$3F
10628 260C                        30            .byte	$30
10629 260D                        30            .byte	$30
10630 260E                        30            .byte	$30
10631 260F                        30            .byte	$30
10632 2610                        70            .byte	$70
10633 2611                        F0            .byte	$F0
10634 2612                        E0            .byte	$E0
10635 2613                        00            .byte	0
10636 2614                        00            .byte	0
10637 2615                        00            .byte	0
10638 2616                        00            .byte	0
10639                                           ! 1244  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10640 2617                        00            .byte	0
10641 2618                        00            .byte	0
10642 2619                        7F            .byte	$7F
10643 261A                        63            .byte	$63
10644 261B                        7F            .byte	$7F
10645 261C                        63            .byte	$63
10646 261D                        63            .byte	$63
10647 261E                        63            .byte	$63
10648 261F                        63            .byte	$63
10649 2620                        67            .byte	$67
10650 2621                        E7            .byte	$E7
10651 2622                        E6            .byte	$E6
10652 2623                        C0            .byte	$C0
10653 2624                        00            .byte	0
10654 2625                        00            .byte	0
10655 2626                        00            .byte	0
10656                                           ! 1245  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10657 2627                        00            .byte	0
10658 2628                        00            .byte	0
10659 2629                        00            .byte	0
10660 262A                        18            .byte	$18
10661 262B                        18            .byte	$18
10662 262C                        DB            .byte	$DB
10663 262D                        3C            .byte	$3C
10664 262E                        E7            .byte	$E7
10665 262F                        3C            .byte	$3C
10666 2630                        DB            .byte	$DB
10667 2631                        18            .byte	$18
10668 2632                        18            .byte	$18
10669 2633                        00            .byte	0
10670 2634                        00            .byte	0
10671 2635                        00            .byte	0
10672 2636                        00            .byte	0
10673                                           ! 1246  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10674 2637                        00            .byte	0
10675 2638                        80            .byte	$80
10676 2639                        C0            .byte	$C0
10677 263A                        E0            .byte	$E0
10678 263B                        F0            .byte	$F0
10679 263C                        F8            .byte	$F8
10680 263D                        FE            .byte	$FE
10681 263E                        F8            .byte	$F8
10682 263F                        F0            .byte	$F0
10683 2640                        E0            .byte	$E0
10684 2641                        C0            .byte	$C0
10685 2642                        80            .byte	$80
10686 2643                        00            .byte	0
10687 2644                        00            .byte	0
10688 2645                        00            .byte	0
10689 2646                        00            .byte	0
10690                                           ! 1247  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10691 2647                        00            .byte	0
10692 2648                        02            .byte	2
10693 2649                        06            .byte	6
10694 264A                        0E            .byte	$E
10695 264B                        1E            .byte	$1E
10696 264C                        3E            .byte	$3E
10697 264D                        FE            .byte	$FE
10698 264E                        3E            .byte	$3E
10699 264F                        1E            .byte	$1E
10700 2650                        0E            .byte	$E
10701 2651                        06            .byte	6
10702 2652                        02            .byte	2
10703 2653                        00            .byte	0
10704 2654                        00            .byte	0
10705 2655                        00            .byte	0
10706 2656                        00            .byte	0
10707                                           ! 1248  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10708 2657                        00            .byte	0
10709 2658                        00            .byte	0
10710 2659                        18            .byte	$18
10711 265A                        3C            .byte	$3C
10712 265B                        7E            .byte	$7E
10713 265C                        18            .byte	$18
10714 265D                        18            .byte	$18
10715 265E                        18            .byte	$18
10716 265F                        7E            .byte	$7E
10717 2660                        3C            .byte	$3C
10718 2661                        18            .byte	$18
10719 2662                        00            .byte	0
10720 2663                        00            .byte	0
10721 2664                        00            .byte	0
10722 2665                        00            .byte	0
10723 2666                        00            .byte	0
10724                                           ! 1249  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10725 2667                        00            .byte	0
10726 2668                        00            .byte	0
10727 2669                        66            .byte	$66
10728 266A                        66            .byte	$66
10729 266B                        66            .byte	$66
10730 266C                        66            .byte	$66
10731 266D                        66            .byte	$66
10732 266E                        66            .byte	$66
10733 266F                        66            .byte	$66
10734 2670                        00            .byte	0
10735 2671                        66            .byte	$66
10736 2672                        66            .byte	$66
10737 2673                        00            .byte	0
10738 2674                        00            .byte	0
10739 2675                        00            .byte	0
10740 2676                        00            .byte	0
10741                                           ! 1250  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
10742 2677                        00            .byte	0
10743 2678                        00            .byte	0
10744 2679                        7F            .byte	$7F
10745 267A                        DB            .byte	$DB
10746 267B                        DB            .byte	$DB
10747 267C                        DB            .byte	$DB
10748 267D                        7B            .byte	$7B
10749 267E                        1B            .byte	$1B
10750 267F                        1B            .byte	$1B
10751 2680                        1B            .byte	$1B
10752 2681                        1B            .byte	$1B
10753 2682                        1B            .byte	$1B
10754 2683                        00            .byte	0
10755 2684                        00            .byte	0
10756 2685                        00            .byte	0
10757 2686                        00            .byte	0
10758                                           ! 1251  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
10759 2687                        00            .byte	0
10760 2688                        7C            .byte	$7C
10761 2689                        C6            .byte	$C6
10762 268A                        60            .byte	$60
10763 268B                        38            .byte	$38
10764 268C                        6C            .byte	$6C
10765 268D                        C6            .byte	$C6
10766 268E                        C6            .byte	$C6
10767 268F                        6C            .byte	$6C
10768 2690                        38            .byte	$38
10769 2691                        0C            .byte	$C
10770 2692                        C6            .byte	$C6
10771 2693                        7C            .byte	$7C
10772 2694                        00            .byte	0
10773 2695                        00            .byte	0
10774 2696                        00            .byte	0
10775                                           ! 1252  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
10776 2697                        00            .byte	0
10777 2698                        00            .byte	0
10778 2699                        00            .byte	0
10779 269A                        00            .byte	0
10780 269B                        00            .byte	0
10781 269C                        00            .byte	0
10782 269D                        00            .byte	0
10783 269E                        00            .byte	0
10784 269F                        FE            .byte	$FE
10785 26A0                        FE            .byte	$FE
10786 26A1                        FE            .byte	$FE
10787 26A2                        FE            .byte	$FE
10788 26A3                        00            .byte	0
10789 26A4                        00            .byte	0
10790 26A5                        00            .byte	0
10791 26A6                        00            .byte	0
10792                                           ! 1253  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
10793 26A7                        00            .byte	0
10794 26A8                        00            .byte	0
10795 26A9                        18            .byte	$18
10796 26AA                        3C            .byte	$3C
10797 26AB                        7E            .byte	$7E
10798 26AC                        18            .byte	$18
10799 26AD                        18            .byte	$18
10800 26AE                        18            .byte	$18
10801 26AF                        7E            .byte	$7E
10802 26B0                        3C            .byte	$3C
10803 26B1                        18            .byte	$18
10804 26B2                        7E            .byte	$7E
10805 26B3                        00            .byte	0
10806 26B4                        00            .byte	0
10807 26B5                        00            .byte	0
10808 26B6                        00            .byte	0
10809                                           ! 1254  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10810 26B7                        00            .byte	0
10811 26B8                        00            .byte	0
10812 26B9                        18            .byte	$18
10813 26BA                        3C            .byte	$3C
10814 26BB                        7E            .byte	$7E
10815 26BC                        18            .byte	$18
10816 26BD                        18            .byte	$18
10817 26BE                        18            .byte	$18
10818 26BF                        18            .byte	$18
10819 26C0                        18            .byte	$18
10820 26C1                        18            .byte	$18
10821 26C2                        18            .byte	$18
10822 26C3                        00            .byte	0
10823 26C4                        00            .byte	0
10824 26C5                        00            .byte	0
10825 26C6                        00            .byte	0
10826                                           ! 1255  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
10827 26C7                        00            .byte	0
10828 26C8                        00            .byte	0
10829 26C9                        18            .byte	$18
10830 26CA                        18            .byte	$18
10831 26CB                        18            .byte	$18
10832 26CC                        18            .byte	$18
10833 26CD                        18            .byte	$18
10834 26CE                        18            .byte	$18
10835 26CF                        18            .byte	$18
10836 26D0                        7E            .byte	$7E
10837 26D1                        3C            .byte	$3C
10838 26D2                        18            .byte	$18
10839 26D3                        00            .byte	0
10840 26D4                        00            .byte	0
10841 26D5                        00            .byte	0
10842 26D6                        00            .byte	0
10843                                           ! 1256  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10844 26D7                        00            .byte	0
10845 26D8                        00            .byte	0
10846 26D9                        00            .byte	0
10847 26DA                        00            .byte	0
10848 26DB                        00            .byte	0
10849 26DC                        18            .byte	$18
10850 26DD                        0C            .byte	$C
10851 26DE                        FE            .byte	$FE
10852 26DF                        0C            .byte	$C
10853 26E0                        18            .byte	$18
10854 26E1                        00            .byte	0
10855 26E2                        00            .byte	0
10856 26E3                        00            .byte	0
10857 26E4                        00            .byte	0
10858 26E5                        00            .byte	0
10859 26E6                        00            .byte	0
10860                                           ! 1257  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10861 26E7                        00            .byte	0
10862 26E8                        00            .byte	0
10863 26E9                        00            .byte	0
10864 26EA                        00            .byte	0
10865 26EB                        00            .byte	0
10866 26EC                        30            .byte	$30
10867 26ED                        60            .byte	$60
10868 26EE                        FE            .byte	$FE
10869 26EF                        60            .byte	$60
10870 26F0                        30            .byte	$30
10871 26F1                        00            .byte	0
10872 26F2                        00            .byte	0
10873 26F3                        00            .byte	0
10874 26F4                        00            .byte	0
10875 26F5                        00            .byte	0
10876 26F6                        00            .byte	0
10877                                           ! 1258  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10878 26F7                        00            .byte	0
10879 26F8                        00            .byte	0
10880 26F9                        00            .byte	0
10881 26FA                        00            .byte	0
10882 26FB                        00            .byte	0
10883 26FC                        00            .byte	0
10884 26FD                        C0            .byte	$C0
10885 26FE                        C0            .byte	$C0
10886 26FF                        C0            .byte	$C0
10887 2700                        FE            .byte	$FE
10888 2701                        00            .byte	0
10889 2702                        00            .byte	0
10890 2703                        00            .byte	0
10891 2704                        00            .byte	0
10892 2705                        00            .byte	0
10893 2706                        00            .byte	0
10894                                           ! 1259  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10895 2707                        00            .byte	0
10896 2708                        00            .byte	0
10897 2709                        00            .byte	0
10898 270A                        00            .byte	0
10899 270B                        00            .byte	0
10900 270C                        24            .byte	$24
10901 270D                        66            .byte	$66
10902 270E                        FF            .byte	$FF
10903 270F                        66            .byte	$66
10904 2710                        24            .byte	$24
10905 2711                        00            .byte	0
10906 2712                        00            .byte	0
10907 2713                        00            .byte	0
10908 2714                        00            .byte	0
10909 2715                        00            .byte	0
10910 2716                        00            .byte	0
10911                                           ! 1260  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
10912 2717                        00            .byte	0
10913 2718                        00            .byte	0
10914 2719                        00            .byte	0
10915 271A                        00            .byte	0
10916 271B                        10            .byte	$10
10917 271C                        38            .byte	$38
10918 271D                        38            .byte	$38
10919 271E                        7C            .byte	$7C
10920 271F                        7C            .byte	$7C
10921 2720                        FE            .byte	$FE
10922 2721                        FE            .byte	$FE
10923 2722                        00            .byte	0
10924 2723                        00            .byte	0
10925 2724                        00            .byte	0
10926 2725                        00            .byte	0
10927 2726                        00            .byte	0
10928                                           ! 1261  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10929 2727                        00            .byte	0
10930 2728                        00            .byte	0
10931 2729                        00            .byte	0
10932 272A                        00            .byte	0
10933 272B                        FE            .byte	$FE
10934 272C                        FE            .byte	$FE
10935 272D                        7C            .byte	$7C
10936 272E                        7C            .byte	$7C
10937 272F                        38            .byte	$38
10938 2730                        38            .byte	$38
10939 2731                        10            .byte	$10
10940 2732                        00            .byte	0
10941 2733                        00            .byte	0
10942 2734                        00            .byte	0
10943 2735                        00            .byte	0
10944 2736                        00            .byte	0
10945                                           ! 1262  0x00, 0x00, 0x00, 0x00
10946 2737                        00            .byte	0
10947 2738                        00            .byte	0
10948 2739                        00            .byte	0
10949                                           ! 1262 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10950 273A                        00            .byte	0
10951 273B                        00            .byte	0
10952 273C                        00            .byte	0
10953 273D                        00            .byte	0
10954 273E                        00            .byte	0
10955 273F                        00            .byte	0
10956 2740                        00            .byte	0
10957 2741                        00            .byte	0
10958 2742                        00            .byte	0
10959 2743                        00            .byte	0
10960 2744                        00            .byte	0
10961 2745                        00            .byte	0
10962 2746                        00            .byte	0
10963                                           ! 1263  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10964 2747                        00            .byte	0
10965 2748                        00            .byte	0
10966 2749                        18            .byte	$18
10967 274A                        3C            .byte	$3C
10968 274B                        3C            .byte	$3C
10969 274C                        3C            .byte	$3C
10970 274D                        18            .byte	$18
10971 274E                        18            .byte	$18
10972 274F                        18            .byte	$18
10973 2750                        00            .byte	0
10974 2751                        18            .byte	$18
10975 2752                        18            .byte	$18
10976 2753                        00            .byte	0
10977 2754                        00            .byte	0
10978 2755                        00            .byte	0
10979 2756                        00            .byte	0
10980                                           ! 1264  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10981 2757                        00            .byte	0
10982 2758                        66            .byte	$66
10983 2759                        66            .byte	$66
10984 275A                        66            .byte	$66
10985 275B                        24            .byte	$24
10986 275C                        00            .byte	0
10987 275D                        00            .byte	0
10988 275E                        00            .byte	0
10989 275F                        00            .byte	0
10990 2760                        00            .byte	0
10991 2761                        00            .byte	0
10992 2762                        00            .byte	0
10993 2763                        00            .byte	0
10994 2764                        00            .byte	0
10995 2765                        00            .byte	0
10996 2766                        00            .byte	0
10997                                           ! 1265  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
10998 2767                        00            .byte	0
10999 2768                        00            .byte	0
11000 2769                        00            .byte	0
11001 276A                        6C            .byte	$6C
11002 276B                        6C            .byte	$6C
11003 276C                        FE            .byte	$FE
11004 276D                        6C            .byte	$6C
11005 276E                        6C            .byte	$6C
11006 276F                        6C            .byte	$6C
11007 2770                        FE            .byte	$FE
11008 2771                        6C            .byte	$6C
11009 2772                        6C            .byte	$6C
11010 2773                        00            .byte	0
11011 2774                        00            .byte	0
11012 2775                        00            .byte	0
11013 2776                        00            .byte	0
11014                                           ! 1266  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11015 2777                        18            .byte	$18
11016 2778                        18            .byte	$18
11017 2779                        7C            .byte	$7C
11018 277A                        C6            .byte	$C6
11019 277B                        C2            .byte	$C2
11020 277C                        C0            .byte	$C0
11021 277D                        7C            .byte	$7C
11022 277E                        06            .byte	6
11023 277F                        06            .byte	6
11024 2780                        86            .byte	$86
11025 2781                        C6            .byte	$C6
11026 2782                        7C            .byte	$7C
11027 2783                        18            .byte	$18
11028 2784                        18            .byte	$18
11029 2785                        00            .byte	0
11030 2786                        00            .byte	0
11031                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11032 2787                        00            .byte	0
11033 2788                        00            .byte	0
11034 2789                        00            .byte	0
11035 278A                        00            .byte	0
11036 278B                        C2            .byte	$C2
11037 278C                        C6            .byte	$C6
11038 278D                        0C            .byte	$C
11039 278E                        18            .byte	$18
11040 278F                        30            .byte	$30
11041 2790                        60            .byte	$60
11042 2791                        C6            .byte	$C6
11043 2792                        86            .byte	$86
11044 2793                        00            .byte	0
11045 2794                        00            .byte	0
11046 2795                        00            .byte	0
11047 2796                        00            .byte	0
11048                                           ! 1268  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11049 2797                        00            .byte	0
11050 2798                        00            .byte	0
11051 2799                        38            .byte	$38
11052 279A                        6C            .byte	$6C
11053 279B                        6C            .byte	$6C
11054 279C                        38            .byte	$38
11055 279D                        76            .byte	$76
11056 279E                        DC            .byte	$DC
11057 279F                        CC            .byte	$CC
11058 27A0                        CC            .byte	$CC
11059 27A1                        CC            .byte	$CC
11060 27A2                        76            .byte	$76
11061 27A3                        00            .byte	0
11062 27A4                        00            .byte	0
11063 27A5                        00            .byte	0
11064 27A6                        00            .byte	0
11065                                           ! 1269  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11066 27A7                        00            .byte	0
11067 27A8                        30            .byte	$30
11068 27A9                        30            .byte	$30
11069 27AA                        30            .byte	$30
11070 27AB                        60            .byte	$60
11071 27AC                        00            .byte	0
11072 27AD                        00            .byte	0
11073 27AE                        00            .byte	0
11074 27AF                        00            .byte	0
11075 27B0                        00            .byte	0
11076 27B1                        00            .byte	0
11077 27B2                        00            .byte	0
11078 27B3                        00            .byte	0
11079 27B4                        00            .byte	0
11080 27B5                        00            .byte	0
11081 27B6                        00            .byte	0
11082                                           ! 1270  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11083 27B7                        00            .byte	0
11084 27B8                        00            .byte	0
11085 27B9                        0C            .byte	$C
11086 27BA                        18            .byte	$18
11087 27BB                        30            .byte	$30
11088 27BC                        30            .byte	$30
11089 27BD                        30            .byte	$30
11090 27BE                        30            .byte	$30
11091 27BF                        30            .byte	$30
11092 27C0                        30            .byte	$30
11093 27C1                        18            .byte	$18
11094 27C2                        0C            .byte	$C
11095 27C3                        00            .byte	0
11096 27C4                        00            .byte	0
11097 27C5                        00            .byte	0
11098 27C6                        00            .byte	0
11099                                           ! 1271  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11100 27C7                        00            .byte	0
11101 27C8                        00            .byte	0
11102 27C9                        30            .byte	$30
11103 27CA                        18            .byte	$18
11104 27CB                        0C            .byte	$C
11105 27CC                        0C            .byte	$C
11106 27CD                        0C            .byte	$C
11107 27CE                        0C            .byte	$C
11108 27CF                        0C            .byte	$C
11109 27D0                        0C            .byte	$C
11110 27D1                        18            .byte	$18
11111 27D2                        30            .byte	$30
11112 27D3                        00            .byte	0
11113 27D4                        00            .byte	0
11114 27D5                        00            .byte	0
11115 27D6                        00            .byte	0
11116                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11117 27D7                        00            .byte	0
11118 27D8                        00            .byte	0
11119 27D9                        00            .byte	0
11120 27DA                        00            .byte	0
11121 27DB                        00            .byte	0
11122 27DC                        66            .byte	$66
11123 27DD                        3C            .byte	$3C
11124 27DE                        FF            .byte	$FF
11125 27DF                        3C            .byte	$3C
11126 27E0                        66            .byte	$66
11127 27E1                        00            .byte	0
11128 27E2                        00            .byte	0
11129 27E3                        00            .byte	0
11130 27E4                        00            .byte	0
11131 27E5                        00            .byte	0
11132 27E6                        00            .byte	0
11133                                           ! 1273  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11134 27E7                        00            .byte	0
11135 27E8                        00            .byte	0
11136 27E9                        00            .byte	0
11137 27EA                        00            .byte	0
11138 27EB                        00            .byte	0
11139 27EC                        18            .byte	$18
11140 27ED                        18            .byte	$18
11141 27EE                        7E            .byte	$7E
11142 27EF                        18            .byte	$18
11143 27F0                        18            .byte	$18
11144 27F1                        00            .byte	0
11145 27F2                        00            .byte	0
11146 27F3                        00            .byte	0
11147 27F4                        00            .byte	0
11148 27F5                        00            .byte	0
11149 27F6                        00            .byte	0
11150                                           ! 1274  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11151 27F7                        00            .byte	0
11152 27F8                        00            .byte	0
11153 27F9                        00            .byte	0
11154 27FA                        00            .byte	0
11155 27FB                        00            .byte	0
11156 27FC                        00            .byte	0
11157 27FD                        00            .byte	0
11158 27FE                        00            .byte	0
11159 27FF                        00            .byte	0
11160 2800                        18            .byte	$18
11161 2801                        18            .byte	$18
11162 2802                        18            .byte	$18
11163 2803                        30            .byte	$30
11164 2804                        00            .byte	0
11165 2805                        00            .byte	0
11166 2806                        00            .byte	0
11167                                           ! 1275  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11168 2807                        00            .byte	0
11169 2808                        00            .byte	0
11170 2809                        00            .byte	0
11171 280A                        00            .byte	0
11172 280B                        00            .byte	0
11173 280C                        00            .byte	0
11174 280D                        00            .byte	0
11175 280E                        FE            .byte	$FE
11176 280F                        00            .byte	0
11177 2810                        00            .byte	0
11178 2811                        00            .byte	0
11179 2812                        00            .byte	0
11180 2813                        00            .byte	0
11181 2814                        00            .byte	0
11182 2815                        00            .byte	0
11183 2816                        00            .byte	0
11184                                           ! 1276  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11185 2817                        00            .byte	0
11186 2818                        00            .byte	0
11187 2819                        00            .byte	0
11188 281A                        00            .byte	0
11189 281B                        00            .byte	0
11190 281C                        00            .byte	0
11191 281D                        00            .byte	0
11192 281E                        00            .byte	0
11193 281F                        00            .byte	0
11194 2820                        00            .byte	0
11195 2821                        18            .byte	$18
11196 2822                        18            .byte	$18
11197 2823                        00            .byte	0
11198 2824                        00            .byte	0
11199 2825                        00            .byte	0
11200 2826                        00            .byte	0
11201                                           ! 1277  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11202 2827                        00            .byte	0
11203 2828                        00            .byte	0
11204 2829                        00            .byte	0
11205 282A                        00            .byte	0
11206 282B                        02            .byte	2
11207 282C                        06            .byte	6
11208 282D                        0C            .byte	$C
11209 282E                        18            .byte	$18
11210 282F                        30            .byte	$30
11211 2830                        60            .byte	$60
11212 2831                        C0            .byte	$C0
11213 2832                        80            .byte	$80
11214 2833                        00            .byte	0
11215 2834                        00            .byte	0
11216 2835                        00            .byte	0
11217 2836                        00            .byte	0
11218                                           ! 1278  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11219 2837                        00            .byte	0
11220 2838                        00            .byte	0
11221 2839                        3C            .byte	$3C
11222 283A                        66            .byte	$66
11223 283B                        C3            .byte	$C3
11224 283C                        C3            .byte	$C3
11225 283D                        DB            .byte	$DB
11226 283E                        DB            .byte	$DB
11227 283F                        C3            .byte	$C3
11228 2840                        C3            .byte	$C3
11229 2841                        66            .byte	$66
11230 2842                        3C            .byte	$3C
11231 2843                        00            .byte	0
11232 2844                        00            .byte	0
11233 2845                        00            .byte	0
11234 2846                        00            .byte	0
11235                                           ! 1279  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11236 2847                        00            .byte	0
11237 2848                        00            .byte	0
11238 2849                        18            .byte	$18
11239 284A                        38            .byte	$38
11240 284B                        78            .byte	$78
11241 284C                        18            .byte	$18
11242 284D                        18            .byte	$18
11243 284E                        18            .byte	$18
11244 284F                        18            .byte	$18
11245 2850                        18            .byte	$18
11246 2851                        18            .byte	$18
11247 2852                        7E            .byte	$7E
11248 2853                        00            .byte	0
11249 2854                        00            .byte	0
11250 2855                        00            .byte	0
11251 2856                        00            .byte	0
11252                                           ! 1280  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11253 2857                        00            .byte	0
11254 2858                        00            .byte	0
11255 2859                        7C            .byte	$7C
11256 285A                        C6            .byte	$C6
11257 285B                        06            .byte	6
11258 285C                        0C            .byte	$C
11259 285D                        18            .byte	$18
11260 285E                        30            .byte	$30
11261 285F                        60            .byte	$60
11262 2860                        C0            .byte	$C0
11263 2861                        C6            .byte	$C6
11264 2862                        FE            .byte	$FE
11265 2863                        00            .byte	0
11266 2864                        00            .byte	0
11267 2865                        00            .byte	0
11268 2866                        00            .byte	0
11269                                           ! 1281  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11270 2867                        00            .byte	0
11271 2868                        00            .byte	0
11272 2869                        7C            .byte	$7C
11273 286A                        C6            .byte	$C6
11274 286B                        06            .byte	6
11275 286C                        06            .byte	6
11276 286D                        3C            .byte	$3C
11277 286E                        06            .byte	6
11278 286F                        06            .byte	6
11279 2870                        06            .byte	6
11280 2871                        C6            .byte	$C6
11281 2872                        7C            .byte	$7C
11282 2873                        00            .byte	0
11283 2874                        00            .byte	0
11284 2875                        00            .byte	0
11285 2876                        00            .byte	0
11286                                           ! 1282  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11287 2877                        00            .byte	0
11288 2878                        00            .byte	0
11289 2879                        0C            .byte	$C
11290 287A                        1C            .byte	$1C
11291 287B                        3C            .byte	$3C
11292 287C                        6C            .byte	$6C
11293 287D                        CC            .byte	$CC
11294 287E                        FE            .byte	$FE
11295 287F                        0C            .byte	$C
11296 2880                        0C            .byte	$C
11297 2881                        0C            .byte	$C
11298 2882                        1E            .byte	$1E
11299 2883                        00            .byte	0
11300 2884                        00            .byte	0
11301 2885                        00            .byte	0
11302 2886                        00            .byte	0
11303                                           ! 1283  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc
11304 2887                        00            .byte	0
11305 2888                        00            .byte	0
11306 2889                        FE            .byte	$FE
11307 288A                        C0            .byte	$C0
11308 288B                        C0            .byte	$C0
11309                                           ! 1283 0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11310 288C                        C0            .byte	$C0
11311 288D                        FC            .byte	$FC
11312 288E                        06            .byte	6
11313 288F                        06            .byte	6
11314 2890                        06            .byte	6
11315 2891                        C6            .byte	$C6
11316 2892                        7C            .byte	$7C
11317 2893                        00            .byte	0
11318 2894                        00            .byte	0
11319 2895                        00            .byte	0
11320 2896                        00            .byte	0
11321                                           ! 1284  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11322 2897                        00            .byte	0
11323 2898                        00            .byte	0
11324 2899                        38            .byte	$38
11325 289A                        60            .byte	$60
11326 289B                        C0            .byte	$C0
11327 289C                        C0            .byte	$C0
11328 289D                        FC            .byte	$FC
11329 289E                        C6            .byte	$C6
11330 289F                        C6            .byte	$C6
11331 28A0                        C6            .byte	$C6
11332 28A1                        C6            .byte	$C6
11333 28A2                        7C            .byte	$7C
11334 28A3                        00            .byte	0
11335 28A4                        00            .byte	0
11336 28A5                        00            .byte	0
11337 28A6                        00            .byte	0
11338                                           ! 1285  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11339 28A7                        00            .byte	0
11340 28A8                        00            .byte	0
11341 28A9                        FE            .byte	$FE
11342 28AA                        C6            .byte	$C6
11343 28AB                        06            .byte	6
11344 28AC                        06            .byte	6
11345 28AD                        0C            .byte	$C
11346 28AE                        18            .byte	$18
11347 28AF                        30            .byte	$30
11348 28B0                        30            .byte	$30
11349 28B1                        30            .byte	$30
11350 28B2                        30            .byte	$30
11351 28B3                        00            .byte	0
11352 28B4                        00            .byte	0
11353 28B5                        00            .byte	0
11354 28B6                        00            .byte	0
11355                                           ! 1286  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11356 28B7                        00            .byte	0
11357 28B8                        00            .byte	0
11358 28B9                        7C            .byte	$7C
11359 28BA                        C6            .byte	$C6
11360 28BB                        C6            .byte	$C6
11361 28BC                        C6            .byte	$C6
11362 28BD                        7C            .byte	$7C
11363 28BE                        C6            .byte	$C6
11364 28BF                        C6            .byte	$C6
11365 28C0                        C6            .byte	$C6
11366 28C1                        C6            .byte	$C6
11367 28C2                        7C            .byte	$7C
11368 28C3                        00            .byte	0
11369 28C4                        00            .byte	0
11370 28C5                        00            .byte	0
11371 28C6                        00            .byte	0
11372                                           ! 1287  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11373 28C7                        00            .byte	0
11374 28C8                        00            .byte	0
11375 28C9                        7C            .byte	$7C
11376 28CA                        C6            .byte	$C6
11377 28CB                        C6            .byte	$C6
11378 28CC                        C6            .byte	$C6
11379 28CD                        7E            .byte	$7E
11380 28CE                        06            .byte	6
11381 28CF                        06            .byte	6
11382 28D0                        06            .byte	6
11383 28D1                        0C            .byte	$C
11384 28D2                        78            .byte	$78
11385 28D3                        00            .byte	0
11386 28D4                        00            .byte	0
11387 28D5                        00            .byte	0
11388 28D6                        00            .byte	0
11389                                           ! 1288  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11390 28D7                        00            .byte	0
11391 28D8                        00            .byte	0
11392 28D9                        00            .byte	0
11393 28DA                        00            .byte	0
11394 28DB                        18            .byte	$18
11395 28DC                        18            .byte	$18
11396 28DD                        00            .byte	0
11397 28DE                        00            .byte	0
11398 28DF                        00            .byte	0
11399 28E0                        18            .byte	$18
11400 28E1                        18            .byte	$18
11401 28E2                        00            .byte	0
11402 28E3                        00            .byte	0
11403 28E4                        00            .byte	0
11404 28E5                        00            .byte	0
11405 28E6                        00            .byte	0
11406                                           ! 1289  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11407 28E7                        00            .byte	0
11408 28E8                        00            .byte	0
11409 28E9                        00            .byte	0
11410 28EA                        00            .byte	0
11411 28EB                        18            .byte	$18
11412 28EC                        18            .byte	$18
11413 28ED                        00            .byte	0
11414 28EE                        00            .byte	0
11415 28EF                        00            .byte	0
11416 28F0                        18            .byte	$18
11417 28F1                        18            .byte	$18
11418 28F2                        30            .byte	$30
11419 28F3                        00            .byte	0
11420 28F4                        00            .byte	0
11421 28F5                        00            .byte	0
11422 28F6                        00            .byte	0
11423                                           ! 1290  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11424 28F7                        00            .byte	0
11425 28F8                        00            .byte	0
11426 28F9                        00            .byte	0
11427 28FA                        06            .byte	6
11428 28FB                        0C            .byte	$C
11429 28FC                        18            .byte	$18
11430 28FD                        30            .byte	$30
11431 28FE                        60            .byte	$60
11432 28FF                        30            .byte	$30
11433 2900                        18            .byte	$18
11434 2901                        0C            .byte	$C
11435 2902                        06            .byte	6
11436 2903                        00            .byte	0
11437 2904                        00            .byte	0
11438 2905                        00            .byte	0
11439 2906                        00            .byte	0
11440                                           ! 1291  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11441 2907                        00            .byte	0
11442 2908                        00            .byte	0
11443 2909                        00            .byte	0
11444 290A                        00            .byte	0
11445 290B                        00            .byte	0
11446 290C                        7E            .byte	$7E
11447 290D                        00            .byte	0
11448 290E                        00            .byte	0
11449 290F                        7E            .byte	$7E
11450 2910                        00            .byte	0
11451 2911                        00            .byte	0
11452 2912                        00            .byte	0
11453 2913                        00            .byte	0
11454 2914                        00            .byte	0
11455 2915                        00            .byte	0
11456 2916                        00            .byte	0
11457                                           ! 1292  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11458 2917                        00            .byte	0
11459 2918                        00            .byte	0
11460 2919                        00            .byte	0
11461 291A                        60            .byte	$60
11462 291B                        30            .byte	$30
11463 291C                        18            .byte	$18
11464 291D                        0C            .byte	$C
11465 291E                        06            .byte	6
11466 291F                        0C            .byte	$C
11467 2920                        18            .byte	$18
11468 2921                        30            .byte	$30
11469 2922                        60            .byte	$60
11470 2923                        00            .byte	0
11471 2924                        00            .byte	0
11472 2925                        00            .byte	0
11473 2926                        00            .byte	0
11474                                           ! 1293  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11475 2927                        00            .byte	0
11476 2928                        00            .byte	0
11477 2929                        7C            .byte	$7C
11478 292A                        C6            .byte	$C6
11479 292B                        C6            .byte	$C6
11480 292C                        0C            .byte	$C
11481 292D                        18            .byte	$18
11482 292E                        18            .byte	$18
11483 292F                        18            .byte	$18
11484 2930                        00            .byte	0
11485 2931                        18            .byte	$18
11486 2932                        18            .byte	$18
11487 2933                        00            .byte	0
11488 2934                        00            .byte	0
11489 2935                        00            .byte	0
11490 2936                        00            .byte	0
11491                                           ! 1294  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11492 2937                        00            .byte	0
11493 2938                        00            .byte	0
11494 2939                        00            .byte	0
11495 293A                        7C            .byte	$7C
11496 293B                        C6            .byte	$C6
11497 293C                        C6            .byte	$C6
11498 293D                        DE            .byte	$DE
11499 293E                        DE            .byte	$DE
11500 293F                        DE            .byte	$DE
11501 2940                        DC            .byte	$DC
11502 2941                        C0            .byte	$C0
11503 2942                        7C            .byte	$7C
11504 2943                        00            .byte	0
11505 2944                        00            .byte	0
11506 2945                        00            .byte	0
11507 2946                        00            .byte	0
11508                                           ! 1295  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11509 2947                        00            .byte	0
11510 2948                        00            .byte	0
11511 2949                        10            .byte	$10
11512 294A                        38            .byte	$38
11513 294B                        6C            .byte	$6C
11514 294C                        C6            .byte	$C6
11515 294D                        C6            .byte	$C6
11516 294E                        FE            .byte	$FE
11517 294F                        C6            .byte	$C6
11518 2950                        C6            .byte	$C6
11519 2951                        C6            .byte	$C6
11520 2952                        C6            .byte	$C6
11521 2953                        00            .byte	0
11522 2954                        00            .byte	0
11523 2955                        00            .byte	0
11524 2956                        00            .byte	0
11525                                           ! 1296  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11526 2957                        00            .byte	0
11527 2958                        00            .byte	0
11528 2959                        FC            .byte	$FC
11529 295A                        66            .byte	$66
11530 295B                        66            .byte	$66
11531 295C                        66            .byte	$66
11532 295D                        7C            .byte	$7C
11533 295E                        66            .byte	$66
11534 295F                        66            .byte	$66
11535 2960                        66            .byte	$66
11536 2961                        66            .byte	$66
11537 2962                        FC            .byte	$FC
11538 2963                        00            .byte	0
11539 2964                        00            .byte	0
11540 2965                        00            .byte	0
11541 2966                        00            .byte	0
11542                                           ! 1297  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11543 2967                        00            .byte	0
11544 2968                        00            .byte	0
11545 2969                        3C            .byte	$3C
11546 296A                        66            .byte	$66
11547 296B                        C2            .byte	$C2
11548 296C                        C0            .byte	$C0
11549 296D                        C0            .byte	$C0
11550 296E                        C0            .byte	$C0
11551 296F                        C0            .byte	$C0
11552 2970                        C2            .byte	$C2
11553 2971                        66            .byte	$66
11554 2972                        3C            .byte	$3C
11555 2973                        00            .byte	0
11556 2974                        00            .byte	0
11557 2975                        00            .byte	0
11558 2976                        00            .byte	0
11559                                           ! 1298  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11560 2977                        00            .byte	0
11561 2978                        00            .byte	0
11562 2979                        F8            .byte	$F8
11563 297A                        6C            .byte	$6C
11564 297B                        66            .byte	$66
11565 297C                        66            .byte	$66
11566 297D                        66            .byte	$66
11567 297E                        66            .byte	$66
11568 297F                        66            .byte	$66
11569 2980                        66            .byte	$66
11570 2981                        6C            .byte	$6C
11571 2982                        F8            .byte	$F8
11572 2983                        00            .byte	0
11573 2984                        00            .byte	0
11574 2985                        00            .byte	0
11575 2986                        00            .byte	0
11576                                           ! 1299  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11577 2987                        00            .byte	0
11578 2988                        00            .byte	0
11579 2989                        FE            .byte	$FE
11580 298A                        66            .byte	$66
11581 298B                        62            .byte	$62
11582 298C                        68            .byte	$68
11583 298D                        78            .byte	$78
11584 298E                        68            .byte	$68
11585 298F                        60            .byte	$60
11586 2990                        62            .byte	$62
11587 2991                        66            .byte	$66
11588 2992                        FE            .byte	$FE
11589 2993                        00            .byte	0
11590 2994                        00            .byte	0
11591 2995                        00            .byte	0
11592 2996                        00            .byte	0
11593                                           ! 1300  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11594 2997                        00            .byte	0
11595 2998                        00            .byte	0
11596 2999                        FE            .byte	$FE
11597 299A                        66            .byte	$66
11598 299B                        62            .byte	$62
11599 299C                        68            .byte	$68
11600 299D                        78            .byte	$78
11601 299E                        68            .byte	$68
11602 299F                        60            .byte	$60
11603 29A0                        60            .byte	$60
11604 29A1                        60            .byte	$60
11605 29A2                        F0            .byte	$F0
11606 29A3                        00            .byte	0
11607 29A4                        00            .byte	0
11608 29A5                        00            .byte	0
11609 29A6                        00            .byte	0
11610                                           ! 1301  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11611 29A7                        00            .byte	0
11612 29A8                        00            .byte	0
11613 29A9                        3C            .byte	$3C
11614 29AA                        66            .byte	$66
11615 29AB                        C2            .byte	$C2
11616 29AC                        C0            .byte	$C0
11617 29AD                        C0            .byte	$C0
11618 29AE                        DE            .byte	$DE
11619 29AF                        C6            .byte	$C6
11620 29B0                        C6            .byte	$C6
11621 29B1                        66            .byte	$66
11622 29B2                        3A            .byte	$3A
11623 29B3                        00            .byte	0
11624 29B4                        00            .byte	0
11625 29B5                        00            .byte	0
11626 29B6                        00            .byte	0
11627                                           ! 1302  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11628 29B7                        00            .byte	0
11629 29B8                        00            .byte	0
11630 29B9                        C6            .byte	$C6
11631 29BA                        C6            .byte	$C6
11632 29BB                        C6            .byte	$C6
11633 29BC                        C6            .byte	$C6
11634 29BD                        FE            .byte	$FE
11635 29BE                        C6            .byte	$C6
11636 29BF                        C6            .byte	$C6
11637 29C0                        C6            .byte	$C6
11638 29C1                        C6            .byte	$C6
11639 29C2                        C6            .byte	$C6
11640 29C3                        00            .byte	0
11641 29C4                        00            .byte	0
11642 29C5                        00            .byte	0
11643 29C6                        00            .byte	0
11644                                           ! 1303  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11645 29C7                        00            .byte	0
11646 29C8                        00            .byte	0
11647 29C9                        3C            .byte	$3C
11648 29CA                        18            .byte	$18
11649 29CB                        18            .byte	$18
11650 29CC                        18            .byte	$18
11651 29CD                        18            .byte	$18
11652 29CE                        18            .byte	$18
11653 29CF                        18            .byte	$18
11654 29D0                        18            .byte	$18
11655 29D1                        18            .byte	$18
11656 29D2                        3C            .byte	$3C
11657 29D3                        00            .byte	0
11658 29D4                        00            .byte	0
11659 29D5                        00            .byte	0
11660 29D6                        00            .byte	0
11661                                           ! 1304  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x
11662 29D7                        00            .byte	0
11663 29D8                        00            .byte	0
11664 29D9                        1E            .byte	$1E
11665 29DA                        0C            .byte	$C
11666 29DB                        0C            .byte	$C
11667 29DC                        0C            .byte	$C
11668 29DD                        0C            .byte	$C
11669                                           ! 1304 0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11670 29DE                        0C            .byte	$C
11671 29DF                        CC            .byte	$CC
11672 29E0                        CC            .byte	$CC
11673 29E1                        CC            .byte	$CC
11674 29E2                        78            .byte	$78
11675 29E3                        00            .byte	0
11676 29E4                        00            .byte	0
11677 29E5                        00            .byte	0
11678 29E6                        00            .byte	0
11679                                           ! 1305  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11680 29E7                        00            .byte	0
11681 29E8                        00            .byte	0
11682 29E9                        E6            .byte	$E6
11683 29EA                        66            .byte	$66
11684 29EB                        66            .byte	$66
11685 29EC                        6C            .byte	$6C
11686 29ED                        78            .byte	$78
11687 29EE                        78            .byte	$78
11688 29EF                        6C            .byte	$6C
11689 29F0                        66            .byte	$66
11690 29F1                        66            .byte	$66
11691 29F2                        E6            .byte	$E6
11692 29F3                        00            .byte	0
11693 29F4                        00            .byte	0
11694 29F5                        00            .byte	0
11695 29F6                        00            .byte	0
11696                                           ! 1306  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11697 29F7                        00            .byte	0
11698 29F8                        00            .byte	0
11699 29F9                        F0            .byte	$F0
11700 29FA                        60            .byte	$60
11701 29FB                        60            .byte	$60
11702 29FC                        60            .byte	$60
11703 29FD                        60            .byte	$60
11704 29FE                        60            .byte	$60
11705 29FF                        60            .byte	$60
11706 2A00                        62            .byte	$62
11707 2A01                        66            .byte	$66
11708 2A02                        FE            .byte	$FE
11709 2A03                        00            .byte	0
11710 2A04                        00            .byte	0
11711 2A05                        00            .byte	0
11712 2A06                        00            .byte	0
11713                                           ! 1307  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11714 2A07                        00            .byte	0
11715 2A08                        00            .byte	0
11716 2A09                        C3            .byte	$C3
11717 2A0A                        E7            .byte	$E7
11718 2A0B                        FF            .byte	$FF
11719 2A0C                        FF            .byte	$FF
11720 2A0D                        DB            .byte	$DB
11721 2A0E                        C3            .byte	$C3
11722 2A0F                        C3            .byte	$C3
11723 2A10                        C3            .byte	$C3
11724 2A11                        C3            .byte	$C3
11725 2A12                        C3            .byte	$C3
11726 2A13                        00            .byte	0
11727 2A14                        00            .byte	0
11728 2A15                        00            .byte	0
11729 2A16                        00            .byte	0
11730                                           ! 1308  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11731 2A17                        00            .byte	0
11732 2A18                        00            .byte	0
11733 2A19                        C6            .byte	$C6
11734 2A1A                        E6            .byte	$E6
11735 2A1B                        F6            .byte	$F6
11736 2A1C                        FE            .byte	$FE
11737 2A1D                        DE            .byte	$DE
11738 2A1E                        CE            .byte	$CE
11739 2A1F                        C6            .byte	$C6
11740 2A20                        C6            .byte	$C6
11741 2A21                        C6            .byte	$C6
11742 2A22                        C6            .byte	$C6
11743 2A23                        00            .byte	0
11744 2A24                        00            .byte	0
11745 2A25                        00            .byte	0
11746 2A26                        00            .byte	0
11747                                           ! 1309  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11748 2A27                        00            .byte	0
11749 2A28                        00            .byte	0
11750 2A29                        7C            .byte	$7C
11751 2A2A                        C6            .byte	$C6
11752 2A2B                        C6            .byte	$C6
11753 2A2C                        C6            .byte	$C6
11754 2A2D                        C6            .byte	$C6
11755 2A2E                        C6            .byte	$C6
11756 2A2F                        C6            .byte	$C6
11757 2A30                        C6            .byte	$C6
11758 2A31                        C6            .byte	$C6
11759 2A32                        7C            .byte	$7C
11760 2A33                        00            .byte	0
11761 2A34                        00            .byte	0
11762 2A35                        00            .byte	0
11763 2A36                        00            .byte	0
11764                                           ! 1310  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11765 2A37                        00            .byte	0
11766 2A38                        00            .byte	0
11767 2A39                        FC            .byte	$FC
11768 2A3A                        66            .byte	$66
11769 2A3B                        66            .byte	$66
11770 2A3C                        66            .byte	$66
11771 2A3D                        7C            .byte	$7C
11772 2A3E                        60            .byte	$60
11773 2A3F                        60            .byte	$60
11774 2A40                        60            .byte	$60
11775 2A41                        60            .byte	$60
11776 2A42                        F0            .byte	$F0
11777 2A43                        00            .byte	0
11778 2A44                        00            .byte	0
11779 2A45                        00            .byte	0
11780 2A46                        00            .byte	0
11781                                           ! 1311  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
11782 2A47                        00            .byte	0
11783 2A48                        00            .byte	0
11784 2A49                        7C            .byte	$7C
11785 2A4A                        C6            .byte	$C6
11786 2A4B                        C6            .byte	$C6
11787 2A4C                        C6            .byte	$C6
11788 2A4D                        C6            .byte	$C6
11789 2A4E                        C6            .byte	$C6
11790 2A4F                        C6            .byte	$C6
11791 2A50                        D6            .byte	$D6
11792 2A51                        DE            .byte	$DE
11793 2A52                        7C            .byte	$7C
11794 2A53                        0C            .byte	$C
11795 2A54                        0E            .byte	$E
11796 2A55                        00            .byte	0
11797 2A56                        00            .byte	0
11798                                           ! 1312  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11799 2A57                        00            .byte	0
11800 2A58                        00            .byte	0
11801 2A59                        FC            .byte	$FC
11802 2A5A                        66            .byte	$66
11803 2A5B                        66            .byte	$66
11804 2A5C                        66            .byte	$66
11805 2A5D                        7C            .byte	$7C
11806 2A5E                        6C            .byte	$6C
11807 2A5F                        66            .byte	$66
11808 2A60                        66            .byte	$66
11809 2A61                        66            .byte	$66
11810 2A62                        E6            .byte	$E6
11811 2A63                        00            .byte	0
11812 2A64                        00            .byte	0
11813 2A65                        00            .byte	0
11814 2A66                        00            .byte	0
11815                                           ! 1313  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11816 2A67                        00            .byte	0
11817 2A68                        00            .byte	0
11818 2A69                        7C            .byte	$7C
11819 2A6A                        C6            .byte	$C6
11820 2A6B                        C6            .byte	$C6
11821 2A6C                        60            .byte	$60
11822 2A6D                        38            .byte	$38
11823 2A6E                        0C            .byte	$C
11824 2A6F                        06            .byte	6
11825 2A70                        C6            .byte	$C6
11826 2A71                        C6            .byte	$C6
11827 2A72                        7C            .byte	$7C
11828 2A73                        00            .byte	0
11829 2A74                        00            .byte	0
11830 2A75                        00            .byte	0
11831 2A76                        00            .byte	0
11832                                           ! 1314  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11833 2A77                        00            .byte	0
11834 2A78                        00            .byte	0
11835 2A79                        FF            .byte	$FF
11836 2A7A                        DB            .byte	$DB
11837 2A7B                        99            .byte	$99
11838 2A7C                        18            .byte	$18
11839 2A7D                        18            .byte	$18
11840 2A7E                        18            .byte	$18
11841 2A7F                        18            .byte	$18
11842 2A80                        18            .byte	$18
11843 2A81                        18            .byte	$18
11844 2A82                        3C            .byte	$3C
11845 2A83                        00            .byte	0
11846 2A84                        00            .byte	0
11847 2A85                        00            .byte	0
11848 2A86                        00            .byte	0
11849                                           ! 1315  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11850 2A87                        00            .byte	0
11851 2A88                        00            .byte	0
11852 2A89                        C6            .byte	$C6
11853 2A8A                        C6            .byte	$C6
11854 2A8B                        C6            .byte	$C6
11855 2A8C                        C6            .byte	$C6
11856 2A8D                        C6            .byte	$C6
11857 2A8E                        C6            .byte	$C6
11858 2A8F                        C6            .byte	$C6
11859 2A90                        C6            .byte	$C6
11860 2A91                        C6            .byte	$C6
11861 2A92                        7C            .byte	$7C
11862 2A93                        00            .byte	0
11863 2A94                        00            .byte	0
11864 2A95                        00            .byte	0
11865 2A96                        00            .byte	0
11866                                           ! 1316  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11867 2A97                        00            .byte	0
11868 2A98                        00            .byte	0
11869 2A99                        C3            .byte	$C3
11870 2A9A                        C3            .byte	$C3
11871 2A9B                        C3            .byte	$C3
11872 2A9C                        C3            .byte	$C3
11873 2A9D                        C3            .byte	$C3
11874 2A9E                        C3            .byte	$C3
11875 2A9F                        C3            .byte	$C3
11876 2AA0                        66            .byte	$66
11877 2AA1                        3C            .byte	$3C
11878 2AA2                        18            .byte	$18
11879 2AA3                        00            .byte	0
11880 2AA4                        00            .byte	0
11881 2AA5                        00            .byte	0
11882 2AA6                        00            .byte	0
11883                                           ! 1317  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11884 2AA7                        00            .byte	0
11885 2AA8                        00            .byte	0
11886 2AA9                        C3            .byte	$C3
11887 2AAA                        C3            .byte	$C3
11888 2AAB                        C3            .byte	$C3
11889 2AAC                        C3            .byte	$C3
11890 2AAD                        C3            .byte	$C3
11891 2AAE                        DB            .byte	$DB
11892 2AAF                        DB            .byte	$DB
11893 2AB0                        FF            .byte	$FF
11894 2AB1                        66            .byte	$66
11895 2AB2                        66            .byte	$66
11896 2AB3                        00            .byte	0
11897 2AB4                        00            .byte	0
11898 2AB5                        00            .byte	0
11899 2AB6                        00            .byte	0
11900                                           ! 1318  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11901 2AB7                        00            .byte	0
11902 2AB8                        00            .byte	0
11903 2AB9                        C3            .byte	$C3
11904 2ABA                        C3            .byte	$C3
11905 2ABB                        66            .byte	$66
11906 2ABC                        3C            .byte	$3C
11907 2ABD                        18            .byte	$18
11908 2ABE                        18            .byte	$18
11909 2ABF                        3C            .byte	$3C
11910 2AC0                        66            .byte	$66
11911 2AC1                        C3            .byte	$C3
11912 2AC2                        C3            .byte	$C3
11913 2AC3                        00            .byte	0
11914 2AC4                        00            .byte	0
11915 2AC5                        00            .byte	0
11916 2AC6                        00            .byte	0
11917                                           ! 1319  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11918 2AC7                        00            .byte	0
11919 2AC8                        00            .byte	0
11920 2AC9                        C3            .byte	$C3
11921 2ACA                        C3            .byte	$C3
11922 2ACB                        C3            .byte	$C3
11923 2ACC                        66            .byte	$66
11924 2ACD                        3C            .byte	$3C
11925 2ACE                        18            .byte	$18
11926 2ACF                        18            .byte	$18
11927 2AD0                        18            .byte	$18
11928 2AD1                        18            .byte	$18
11929 2AD2                        3C            .byte	$3C
11930 2AD3                        00            .byte	0
11931 2AD4                        00            .byte	0
11932 2AD5                        00            .byte	0
11933 2AD6                        00            .byte	0
11934                                           ! 1320  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
11935 2AD7                        00            .byte	0
11936 2AD8                        00            .byte	0
11937 2AD9                        FF            .byte	$FF
11938 2ADA                        C3            .byte	$C3
11939 2ADB                        86            .byte	$86
11940 2ADC                        0C            .byte	$C
11941 2ADD                        18            .byte	$18
11942 2ADE                        30            .byte	$30
11943 2ADF                        60            .byte	$60
11944 2AE0                        C1            .byte	$C1
11945 2AE1                        C3            .byte	$C3
11946 2AE2                        FF            .byte	$FF
11947 2AE3                        00            .byte	0
11948 2AE4                        00            .byte	0
11949 2AE5                        00            .byte	0
11950 2AE6                        00            .byte	0
11951                                           ! 1321  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
11952 2AE7                        00            .byte	0
11953 2AE8                        00            .byte	0
11954 2AE9                        3C            .byte	$3C
11955 2AEA                        30            .byte	$30
11956 2AEB                        30            .byte	$30
11957 2AEC                        30            .byte	$30
11958 2AED                        30            .byte	$30
11959 2AEE                        30            .byte	$30
11960 2AEF                        30            .byte	$30
11961 2AF0                        30            .byte	$30
11962 2AF1                        30            .byte	$30
11963 2AF2                        3C            .byte	$3C
11964 2AF3                        00            .byte	0
11965 2AF4                        00            .byte	0
11966 2AF5                        00            .byte	0
11967 2AF6                        00            .byte	0
11968                                           ! 1322  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
11969 2AF7                        00            .byte	0
11970 2AF8                        00            .byte	0
11971 2AF9                        00            .byte	0
11972 2AFA                        80            .byte	$80
11973 2AFB                        C0            .byte	$C0
11974 2AFC                        E0            .byte	$E0
11975 2AFD                        70            .byte	$70
11976 2AFE                        38            .byte	$38
11977 2AFF                        1C            .byte	$1C
11978 2B00                        0E            .byte	$E
11979 2B01                        06            .byte	6
11980 2B02                        02            .byte	2
11981 2B03                        00            .byte	0
11982 2B04                        00            .byte	0
11983 2B05                        00            .byte	0
11984 2B06                        00            .byte	0
11985                                           ! 1323  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
11986 2B07                        00            .byte	0
11987 2B08                        00            .byte	0
11988 2B09                        3C            .byte	$3C
11989 2B0A                        0C            .byte	$C
11990 2B0B                        0C            .byte	$C
11991 2B0C                        0C            .byte	$C
11992 2B0D                        0C            .byte	$C
11993 2B0E                        0C            .byte	$C
11994 2B0F                        0C            .byte	$C
11995 2B10                        0C            .byte	$C
11996 2B11                        0C            .byte	$C
11997 2B12                        3C            .byte	$3C
11998 2B13                        00            .byte	0
11999 2B14                        00            .byte	0
12000 2B15                        00            .byte	0
12001 2B16                        00            .byte	0
12002                                           ! 1324  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12003 2B17                        10            .byte	$10
12004 2B18                        38            .byte	$38
12005 2B19                        6C            .byte	$6C
12006 2B1A                        C6            .byte	$C6
12007 2B1B                        00            .byte	0
12008 2B1C                        00            .byte	0
12009 2B1D                        00            .byte	0
12010 2B1E                        00            .byte	0
12011 2B1F                        00            .byte	0
12012 2B20                        00            .byte	0
12013 2B21                        00            .byte	0
12014 2B22                        00            .byte	0
12015 2B23                        00            .byte	0
12016 2B24                        00            .byte	0
12017 2B25                        00            .byte	0
12018 2B26                        00            .byte	0
12019                                           ! 1325  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
12020 2B27                        00            .byte	0
12021 2B28                        00            .byte	0
12022 2B29                        00            .byte	0
12023 2B2A                        00            .byte	0
12024 2B2B                        00            .byte	0
12025 2B2C                        00            .byte	0
12026 2B2D                        00            .byte	0
12027 2B2E                        00            .byte	0
12028 2B2F                        00            .byte	0
12029                                           ! 1325 x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12030 2B30                        00            .byte	0
12031 2B31                        00            .byte	0
12032 2B32                        00            .byte	0
12033 2B33                        00            .byte	0
12034 2B34                        FF            .byte	$FF
12035 2B35                        00            .byte	0
12036 2B36                        00            .byte	0
12037                                           ! 1326  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12038 2B37                        30            .byte	$30
12039 2B38                        30            .byte	$30
12040 2B39                        18            .byte	$18
12041 2B3A                        00            .byte	0
12042 2B3B                        00            .byte	0
12043 2B3C                        00            .byte	0
12044 2B3D                        00            .byte	0
12045 2B3E                        00            .byte	0
12046 2B3F                        00            .byte	0
12047 2B40                        00            .byte	0
12048 2B41                        00            .byte	0
12049 2B42                        00            .byte	0
12050 2B43                        00            .byte	0
12051 2B44                        00            .byte	0
12052 2B45                        00            .byte	0
12053 2B46                        00            .byte	0
12054                                           ! 1327  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12055 2B47                        00            .byte	0
12056 2B48                        00            .byte	0
12057 2B49                        00            .byte	0
12058 2B4A                        00            .byte	0
12059 2B4B                        00            .byte	0
12060 2B4C                        78            .byte	$78
12061 2B4D                        0C            .byte	$C
12062 2B4E                        7C            .byte	$7C
12063 2B4F                        CC            .byte	$CC
12064 2B50                        CC            .byte	$CC
12065 2B51                        CC            .byte	$CC
12066 2B52                        76            .byte	$76
12067 2B53                        00            .byte	0
12068 2B54                        00            .byte	0
12069 2B55                        00            .byte	0
12070 2B56                        00            .byte	0
12071                                           ! 1328  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12072 2B57                        00            .byte	0
12073 2B58                        00            .byte	0
12074 2B59                        E0            .byte	$E0
12075 2B5A                        60            .byte	$60
12076 2B5B                        60            .byte	$60
12077 2B5C                        78            .byte	$78
12078 2B5D                        6C            .byte	$6C
12079 2B5E                        66            .byte	$66
12080 2B5F                        66            .byte	$66
12081 2B60                        66            .byte	$66
12082 2B61                        66            .byte	$66
12083 2B62                        7C            .byte	$7C
12084 2B63                        00            .byte	0
12085 2B64                        00            .byte	0
12086 2B65                        00            .byte	0
12087 2B66                        00            .byte	0
12088                                           ! 1329  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12089 2B67                        00            .byte	0
12090 2B68                        00            .byte	0
12091 2B69                        00            .byte	0
12092 2B6A                        00            .byte	0
12093 2B6B                        00            .byte	0
12094 2B6C                        7C            .byte	$7C
12095 2B6D                        C6            .byte	$C6
12096 2B6E                        C0            .byte	$C0
12097 2B6F                        C0            .byte	$C0
12098 2B70                        C0            .byte	$C0
12099 2B71                        C6            .byte	$C6
12100 2B72                        7C            .byte	$7C
12101 2B73                        00            .byte	0
12102 2B74                        00            .byte	0
12103 2B75                        00            .byte	0
12104 2B76                        00            .byte	0
12105                                           ! 1330  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12106 2B77                        00            .byte	0
12107 2B78                        00            .byte	0
12108 2B79                        1C            .byte	$1C
12109 2B7A                        0C            .byte	$C
12110 2B7B                        0C            .byte	$C
12111 2B7C                        3C            .byte	$3C
12112 2B7D                        6C            .byte	$6C
12113 2B7E                        CC            .byte	$CC
12114 2B7F                        CC            .byte	$CC
12115 2B80                        CC            .byte	$CC
12116 2B81                        CC            .byte	$CC
12117 2B82                        76            .byte	$76
12118 2B83                        00            .byte	0
12119 2B84                        00            .byte	0
12120 2B85                        00            .byte	0
12121 2B86                        00            .byte	0
12122                                           ! 1331  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12123 2B87                        00            .byte	0
12124 2B88                        00            .byte	0
12125 2B89                        00            .byte	0
12126 2B8A                        00            .byte	0
12127 2B8B                        00            .byte	0
12128 2B8C                        7C            .byte	$7C
12129 2B8D                        C6            .byte	$C6
12130 2B8E                        FE            .byte	$FE
12131 2B8F                        C0            .byte	$C0
12132 2B90                        C0            .byte	$C0
12133 2B91                        C6            .byte	$C6
12134 2B92                        7C            .byte	$7C
12135 2B93                        00            .byte	0
12136 2B94                        00            .byte	0
12137 2B95                        00            .byte	0
12138 2B96                        00            .byte	0
12139                                           ! 1332  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12140 2B97                        00            .byte	0
12141 2B98                        00            .byte	0
12142 2B99                        38            .byte	$38
12143 2B9A                        6C            .byte	$6C
12144 2B9B                        64            .byte	$64
12145 2B9C                        60            .byte	$60
12146 2B9D                        F0            .byte	$F0
12147 2B9E                        60            .byte	$60
12148 2B9F                        60            .byte	$60
12149 2BA0                        60            .byte	$60
12150 2BA1                        60            .byte	$60
12151 2BA2                        F0            .byte	$F0
12152 2BA3                        00            .byte	0
12153 2BA4                        00            .byte	0
12154 2BA5                        00            .byte	0
12155 2BA6                        00            .byte	0
12156                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12157 2BA7                        00            .byte	0
12158 2BA8                        00            .byte	0
12159 2BA9                        00            .byte	0
12160 2BAA                        00            .byte	0
12161 2BAB                        00            .byte	0
12162 2BAC                        76            .byte	$76
12163 2BAD                        CC            .byte	$CC
12164 2BAE                        CC            .byte	$CC
12165 2BAF                        CC            .byte	$CC
12166 2BB0                        CC            .byte	$CC
12167 2BB1                        CC            .byte	$CC
12168 2BB2                        7C            .byte	$7C
12169 2BB3                        0C            .byte	$C
12170 2BB4                        CC            .byte	$CC
12171 2BB5                        78            .byte	$78
12172 2BB6                        00            .byte	0
12173                                           ! 1334  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12174 2BB7                        00            .byte	0
12175 2BB8                        00            .byte	0
12176 2BB9                        E0            .byte	$E0
12177 2BBA                        60            .byte	$60
12178 2BBB                        60            .byte	$60
12179 2BBC                        6C            .byte	$6C
12180 2BBD                        76            .byte	$76
12181 2BBE                        66            .byte	$66
12182 2BBF                        66            .byte	$66
12183 2BC0                        66            .byte	$66
12184 2BC1                        66            .byte	$66
12185 2BC2                        E6            .byte	$E6
12186 2BC3                        00            .byte	0
12187 2BC4                        00            .byte	0
12188 2BC5                        00            .byte	0
12189 2BC6                        00            .byte	0
12190                                           ! 1335  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12191 2BC7                        00            .byte	0
12192 2BC8                        00            .byte	0
12193 2BC9                        18            .byte	$18
12194 2BCA                        18            .byte	$18
12195 2BCB                        00            .byte	0
12196 2BCC                        38            .byte	$38
12197 2BCD                        18            .byte	$18
12198 2BCE                        18            .byte	$18
12199 2BCF                        18            .byte	$18
12200 2BD0                        18            .byte	$18
12201 2BD1                        18            .byte	$18
12202 2BD2                        3C            .byte	$3C
12203 2BD3                        00            .byte	0
12204 2BD4                        00            .byte	0
12205 2BD5                        00            .byte	0
12206 2BD6                        00            .byte	0
12207                                           ! 1336  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12208 2BD7                        00            .byte	0
12209 2BD8                        00            .byte	0
12210 2BD9                        06            .byte	6
12211 2BDA                        06            .byte	6
12212 2BDB                        00            .byte	0
12213 2BDC                        0E            .byte	$E
12214 2BDD                        06            .byte	6
12215 2BDE                        06            .byte	6
12216 2BDF                        06            .byte	6
12217 2BE0                        06            .byte	6
12218 2BE1                        06            .byte	6
12219 2BE2                        06            .byte	6
12220 2BE3                        66            .byte	$66
12221 2BE4                        66            .byte	$66
12222 2BE5                        3C            .byte	$3C
12223 2BE6                        00            .byte	0
12224                                           ! 1337  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12225 2BE7                        00            .byte	0
12226 2BE8                        00            .byte	0
12227 2BE9                        E0            .byte	$E0
12228 2BEA                        60            .byte	$60
12229 2BEB                        60            .byte	$60
12230 2BEC                        66            .byte	$66
12231 2BED                        6C            .byte	$6C
12232 2BEE                        78            .byte	$78
12233 2BEF                        78            .byte	$78
12234 2BF0                        6C            .byte	$6C
12235 2BF1                        66            .byte	$66
12236 2BF2                        E6            .byte	$E6
12237 2BF3                        00            .byte	0
12238 2BF4                        00            .byte	0
12239 2BF5                        00            .byte	0
12240 2BF6                        00            .byte	0
12241                                           ! 1338  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12242 2BF7                        00            .byte	0
12243 2BF8                        00            .byte	0
12244 2BF9                        38            .byte	$38
12245 2BFA                        18            .byte	$18
12246 2BFB                        18            .byte	$18
12247 2BFC                        18            .byte	$18
12248 2BFD                        18            .byte	$18
12249 2BFE                        18            .byte	$18
12250 2BFF                        18            .byte	$18
12251 2C00                        18            .byte	$18
12252 2C01                        18            .byte	$18
12253 2C02                        3C            .byte	$3C
12254 2C03                        00            .byte	0
12255 2C04                        00            .byte	0
12256 2C05                        00            .byte	0
12257 2C06                        00            .byte	0
12258                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12259 2C07                        00            .byte	0
12260 2C08                        00            .byte	0
12261 2C09                        00            .byte	0
12262 2C0A                        00            .byte	0
12263 2C0B                        00            .byte	0
12264 2C0C                        E6            .byte	$E6
12265 2C0D                        FF            .byte	$FF
12266 2C0E                        DB            .byte	$DB
12267 2C0F                        DB            .byte	$DB
12268 2C10                        DB            .byte	$DB
12269 2C11                        DB            .byte	$DB
12270 2C12                        DB            .byte	$DB
12271 2C13                        00            .byte	0
12272 2C14                        00            .byte	0
12273 2C15                        00            .byte	0
12274 2C16                        00            .byte	0
12275                                           ! 1340  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12276 2C17                        00            .byte	0
12277 2C18                        00            .byte	0
12278 2C19                        00            .byte	0
12279 2C1A                        00            .byte	0
12280 2C1B                        00            .byte	0
12281 2C1C                        DC            .byte	$DC
12282 2C1D                        66            .byte	$66
12283 2C1E                        66            .byte	$66
12284 2C1F                        66            .byte	$66
12285 2C20                        66            .byte	$66
12286 2C21                        66            .byte	$66
12287 2C22                        66            .byte	$66
12288 2C23                        00            .byte	0
12289 2C24                        00            .byte	0
12290 2C25                        00            .byte	0
12291 2C26                        00            .byte	0
12292                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12293 2C27                        00            .byte	0
12294 2C28                        00            .byte	0
12295 2C29                        00            .byte	0
12296 2C2A                        00            .byte	0
12297 2C2B                        00            .byte	0
12298 2C2C                        7C            .byte	$7C
12299 2C2D                        C6            .byte	$C6
12300 2C2E                        C6            .byte	$C6
12301 2C2F                        C6            .byte	$C6
12302 2C30                        C6            .byte	$C6
12303 2C31                        C6            .byte	$C6
12304 2C32                        7C            .byte	$7C
12305 2C33                        00            .byte	0
12306 2C34                        00            .byte	0
12307 2C35                        00            .byte	0
12308 2C36                        00            .byte	0
12309                                           ! 1342  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12310 2C37                        00            .byte	0
12311 2C38                        00            .byte	0
12312 2C39                        00            .byte	0
12313 2C3A                        00            .byte	0
12314 2C3B                        00            .byte	0
12315 2C3C                        DC            .byte	$DC
12316 2C3D                        66            .byte	$66
12317 2C3E                        66            .byte	$66
12318 2C3F                        66            .byte	$66
12319 2C40                        66            .byte	$66
12320 2C41                        66            .byte	$66
12321 2C42                        7C            .byte	$7C
12322 2C43                        60            .byte	$60
12323 2C44                        60            .byte	$60
12324 2C45                        F0            .byte	$F0
12325 2C46                        00            .byte	0
12326                                           ! 1343  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12327 2C47                        00            .byte	0
12328 2C48                        00            .byte	0
12329 2C49                        00            .byte	0
12330 2C4A                        00            .byte	0
12331 2C4B                        00            .byte	0
12332 2C4C                        76            .byte	$76
12333 2C4D                        CC            .byte	$CC
12334 2C4E                        CC            .byte	$CC
12335 2C4F                        CC            .byte	$CC
12336 2C50                        CC            .byte	$CC
12337 2C51                        CC            .byte	$CC
12338 2C52                        7C            .byte	$7C
12339 2C53                        0C            .byte	$C
12340 2C54                        0C            .byte	$C
12341 2C55                        1E            .byte	$1E
12342 2C56                        00            .byte	0
12343                                           ! 1344  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12344 2C57                        00            .byte	0
12345 2C58                        00            .byte	0
12346 2C59                        00            .byte	0
12347 2C5A                        00            .byte	0
12348 2C5B                        00            .byte	0
12349 2C5C                        DC            .byte	$DC
12350 2C5D                        76            .byte	$76
12351 2C5E                        66            .byte	$66
12352 2C5F                        60            .byte	$60
12353 2C60                        60            .byte	$60
12354 2C61                        60            .byte	$60
12355 2C62                        F0            .byte	$F0
12356 2C63                        00            .byte	0
12357 2C64                        00            .byte	0
12358 2C65                        00            .byte	0
12359 2C66                        00            .byte	0
12360                                           ! 1345  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12361 2C67                        00            .byte	0
12362 2C68                        00            .byte	0
12363 2C69                        00            .byte	0
12364 2C6A                        00            .byte	0
12365 2C6B                        00            .byte	0
12366 2C6C                        7C            .byte	$7C
12367 2C6D                        C6            .byte	$C6
12368 2C6E                        60            .byte	$60
12369 2C6F                        38            .byte	$38
12370 2C70                        0C            .byte	$C
12371 2C71                        C6            .byte	$C6
12372 2C72                        7C            .byte	$7C
12373 2C73                        00            .byte	0
12374 2C74                        00            .byte	0
12375 2C75                        00            .byte	0
12376 2C76                        00            .byte	0
12377                                           ! 1346  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 
12378 2C77                        00            .byte	0
12379 2C78                        00            .byte	0
12380 2C79                        10            .byte	$10
12381 2C7A                        30            .byte	$30
12382 2C7B                        30            .byte	$30
12383 2C7C                        FC            .byte	$FC
12384 2C7D                        30            .byte	$30
12385 2C7E                        30            .byte	$30
12386 2C7F                        30            .byte	$30
12387 2C80                        30            .byte	$30
12388 2C81                        36            .byte	$36
12389                                           ! 1346 0x1c, 0x00, 0x00, 0x00, 0x00,
12390 2C82                        1C            .byte	$1C
12391 2C83                        00            .byte	0
12392 2C84                        00            .byte	0
12393 2C85                        00            .byte	0
12394 2C86                        00            .byte	0
12395                                           ! 1347  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12396 2C87                        00            .byte	0
12397 2C88                        00            .byte	0
12398 2C89                        00            .byte	0
12399 2C8A                        00            .byte	0
12400 2C8B                        00            .byte	0
12401 2C8C                        CC            .byte	$CC
12402 2C8D                        CC            .byte	$CC
12403 2C8E                        CC            .byte	$CC
12404 2C8F                        CC            .byte	$CC
12405 2C90                        CC            .byte	$CC
12406 2C91                        CC            .byte	$CC
12407 2C92                        76            .byte	$76
12408 2C93                        00            .byte	0
12409 2C94                        00            .byte	0
12410 2C95                        00            .byte	0
12411 2C96                        00            .byte	0
12412                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12413 2C97                        00            .byte	0
12414 2C98                        00            .byte	0
12415 2C99                        00            .byte	0
12416 2C9A                        00            .byte	0
12417 2C9B                        00            .byte	0
12418 2C9C                        C3            .byte	$C3
12419 2C9D                        C3            .byte	$C3
12420 2C9E                        C3            .byte	$C3
12421 2C9F                        C3            .byte	$C3
12422 2CA0                        66            .byte	$66
12423 2CA1                        3C            .byte	$3C
12424 2CA2                        18            .byte	$18
12425 2CA3                        00            .byte	0
12426 2CA4                        00            .byte	0
12427 2CA5                        00            .byte	0
12428 2CA6                        00            .byte	0
12429                                           ! 1349  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12430 2CA7                        00            .byte	0
12431 2CA8                        00            .byte	0
12432 2CA9                        00            .byte	0
12433 2CAA                        00            .byte	0
12434 2CAB                        00            .byte	0
12435 2CAC                        C3            .byte	$C3
12436 2CAD                        C3            .byte	$C3
12437 2CAE                        C3            .byte	$C3
12438 2CAF                        DB            .byte	$DB
12439 2CB0                        DB            .byte	$DB
12440 2CB1                        FF            .byte	$FF
12441 2CB2                        66            .byte	$66
12442 2CB3                        00            .byte	0
12443 2CB4                        00            .byte	0
12444 2CB5                        00            .byte	0
12445 2CB6                        00            .byte	0
12446                                           ! 1350  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12447 2CB7                        00            .byte	0
12448 2CB8                        00            .byte	0
12449 2CB9                        00            .byte	0
12450 2CBA                        00            .byte	0
12451 2CBB                        00            .byte	0
12452 2CBC                        C3            .byte	$C3
12453 2CBD                        66            .byte	$66
12454 2CBE                        3C            .byte	$3C
12455 2CBF                        18            .byte	$18
12456 2CC0                        3C            .byte	$3C
12457 2CC1                        66            .byte	$66
12458 2CC2                        C3            .byte	$C3
12459 2CC3                        00            .byte	0
12460 2CC4                        00            .byte	0
12461 2CC5                        00            .byte	0
12462 2CC6                        00            .byte	0
12463                                           ! 1351  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12464 2CC7                        00            .byte	0
12465 2CC8                        00            .byte	0
12466 2CC9                        00            .byte	0
12467 2CCA                        00            .byte	0
12468 2CCB                        00            .byte	0
12469 2CCC                        C6            .byte	$C6
12470 2CCD                        C6            .byte	$C6
12471 2CCE                        C6            .byte	$C6
12472 2CCF                        C6            .byte	$C6
12473 2CD0                        C6            .byte	$C6
12474 2CD1                        C6            .byte	$C6
12475 2CD2                        7E            .byte	$7E
12476 2CD3                        06            .byte	6
12477 2CD4                        0C            .byte	$C
12478 2CD5                        F8            .byte	$F8
12479 2CD6                        00            .byte	0
12480                                           ! 1352  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12481 2CD7                        00            .byte	0
12482 2CD8                        00            .byte	0
12483 2CD9                        00            .byte	0
12484 2CDA                        00            .byte	0
12485 2CDB                        00            .byte	0
12486 2CDC                        FE            .byte	$FE
12487 2CDD                        CC            .byte	$CC
12488 2CDE                        18            .byte	$18
12489 2CDF                        30            .byte	$30
12490 2CE0                        60            .byte	$60
12491 2CE1                        C6            .byte	$C6
12492 2CE2                        FE            .byte	$FE
12493 2CE3                        00            .byte	0
12494 2CE4                        00            .byte	0
12495 2CE5                        00            .byte	0
12496 2CE6                        00            .byte	0
12497                                           ! 1353  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12498 2CE7                        00            .byte	0
12499 2CE8                        00            .byte	0
12500 2CE9                        0E            .byte	$E
12501 2CEA                        18            .byte	$18
12502 2CEB                        18            .byte	$18
12503 2CEC                        18            .byte	$18
12504 2CED                        70            .byte	$70
12505 2CEE                        18            .byte	$18
12506 2CEF                        18            .byte	$18
12507 2CF0                        18            .byte	$18
12508 2CF1                        18            .byte	$18
12509 2CF2                        0E            .byte	$E
12510 2CF3                        00            .byte	0
12511 2CF4                        00            .byte	0
12512 2CF5                        00            .byte	0
12513 2CF6                        00            .byte	0
12514                                           ! 1354  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12515 2CF7                        00            .byte	0
12516 2CF8                        00            .byte	0
12517 2CF9                        18            .byte	$18
12518 2CFA                        18            .byte	$18
12519 2CFB                        18            .byte	$18
12520 2CFC                        18            .byte	$18
12521 2CFD                        00            .byte	0
12522 2CFE                        18            .byte	$18
12523 2CFF                        18            .byte	$18
12524 2D00                        18            .byte	$18
12525 2D01                        18            .byte	$18
12526 2D02                        18            .byte	$18
12527 2D03                        00            .byte	0
12528 2D04                        00            .byte	0
12529 2D05                        00            .byte	0
12530 2D06                        00            .byte	0
12531                                           ! 1355  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12532 2D07                        00            .byte	0
12533 2D08                        00            .byte	0
12534 2D09                        70            .byte	$70
12535 2D0A                        18            .byte	$18
12536 2D0B                        18            .byte	$18
12537 2D0C                        18            .byte	$18
12538 2D0D                        0E            .byte	$E
12539 2D0E                        18            .byte	$18
12540 2D0F                        18            .byte	$18
12541 2D10                        18            .byte	$18
12542 2D11                        18            .byte	$18
12543 2D12                        70            .byte	$70
12544 2D13                        00            .byte	0
12545 2D14                        00            .byte	0
12546 2D15                        00            .byte	0
12547 2D16                        00            .byte	0
12548                                           ! 1356  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12549 2D17                        00            .byte	0
12550 2D18                        00            .byte	0
12551 2D19                        76            .byte	$76
12552 2D1A                        DC            .byte	$DC
12553 2D1B                        00            .byte	0
12554 2D1C                        00            .byte	0
12555 2D1D                        00            .byte	0
12556 2D1E                        00            .byte	0
12557 2D1F                        00            .byte	0
12558 2D20                        00            .byte	0
12559 2D21                        00            .byte	0
12560 2D22                        00            .byte	0
12561 2D23                        00            .byte	0
12562 2D24                        00            .byte	0
12563 2D25                        00            .byte	0
12564 2D26                        00            .byte	0
12565                                           ! 1357  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12566 2D27                        00            .byte	0
12567 2D28                        00            .byte	0
12568 2D29                        00            .byte	0
12569 2D2A                        00            .byte	0
12570 2D2B                        10            .byte	$10
12571 2D2C                        38            .byte	$38
12572 2D2D                        6C            .byte	$6C
12573 2D2E                        C6            .byte	$C6
12574 2D2F                        C6            .byte	$C6
12575 2D30                        C6            .byte	$C6
12576 2D31                        FE            .byte	$FE
12577 2D32                        00            .byte	0
12578 2D33                        00            .byte	0
12579 2D34                        00            .byte	0
12580 2D35                        00            .byte	0
12581 2D36                        00            .byte	0
12582                                           ! 1358  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12583 2D37                        00            .byte	0
12584 2D38                        00            .byte	0
12585 2D39                        3C            .byte	$3C
12586 2D3A                        66            .byte	$66
12587 2D3B                        C2            .byte	$C2
12588 2D3C                        C0            .byte	$C0
12589 2D3D                        C0            .byte	$C0
12590 2D3E                        C0            .byte	$C0
12591 2D3F                        C2            .byte	$C2
12592 2D40                        66            .byte	$66
12593 2D41                        3C            .byte	$3C
12594 2D42                        0C            .byte	$C
12595 2D43                        06            .byte	6
12596 2D44                        7C            .byte	$7C
12597 2D45                        00            .byte	0
12598 2D46                        00            .byte	0
12599                                           ! 1359  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12600 2D47                        00            .byte	0
12601 2D48                        00            .byte	0
12602 2D49                        CC            .byte	$CC
12603 2D4A                        00            .byte	0
12604 2D4B                        00            .byte	0
12605 2D4C                        CC            .byte	$CC
12606 2D4D                        CC            .byte	$CC
12607 2D4E                        CC            .byte	$CC
12608 2D4F                        CC            .byte	$CC
12609 2D50                        CC            .byte	$CC
12610 2D51                        CC            .byte	$CC
12611 2D52                        76            .byte	$76
12612 2D53                        00            .byte	0
12613 2D54                        00            .byte	0
12614 2D55                        00            .byte	0
12615 2D56                        00            .byte	0
12616                                           ! 1360  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12617 2D57                        00            .byte	0
12618 2D58                        0C            .byte	$C
12619 2D59                        18            .byte	$18
12620 2D5A                        30            .byte	$30
12621 2D5B                        00            .byte	0
12622 2D5C                        7C            .byte	$7C
12623 2D5D                        C6            .byte	$C6
12624 2D5E                        FE            .byte	$FE
12625 2D5F                        C0            .byte	$C0
12626 2D60                        C0            .byte	$C0
12627 2D61                        C6            .byte	$C6
12628 2D62                        7C            .byte	$7C
12629 2D63                        00            .byte	0
12630 2D64                        00            .byte	0
12631 2D65                        00            .byte	0
12632 2D66                        00            .byte	0
12633                                           ! 1361  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12634 2D67                        00            .byte	0
12635 2D68                        10            .byte	$10
12636 2D69                        38            .byte	$38
12637 2D6A                        6C            .byte	$6C
12638 2D6B                        00            .byte	0
12639 2D6C                        78            .byte	$78
12640 2D6D                        0C            .byte	$C
12641 2D6E                        7C            .byte	$7C
12642 2D6F                        CC            .byte	$CC
12643 2D70                        CC            .byte	$CC
12644 2D71                        CC            .byte	$CC
12645 2D72                        76            .byte	$76
12646 2D73                        00            .byte	0
12647 2D74                        00            .byte	0
12648 2D75                        00            .byte	0
12649 2D76                        00            .byte	0
12650                                           ! 1362  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12651 2D77                        00            .byte	0
12652 2D78                        00            .byte	0
12653 2D79                        CC            .byte	$CC
12654 2D7A                        00            .byte	0
12655 2D7B                        00            .byte	0
12656 2D7C                        78            .byte	$78
12657 2D7D                        0C            .byte	$C
12658 2D7E                        7C            .byte	$7C
12659 2D7F                        CC            .byte	$CC
12660 2D80                        CC            .byte	$CC
12661 2D81                        CC            .byte	$CC
12662 2D82                        76            .byte	$76
12663 2D83                        00            .byte	0
12664 2D84                        00            .byte	0
12665 2D85                        00            .byte	0
12666 2D86                        00            .byte	0
12667                                           ! 1363  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12668 2D87                        00            .byte	0
12669 2D88                        60            .byte	$60
12670 2D89                        30            .byte	$30
12671 2D8A                        18            .byte	$18
12672 2D8B                        00            .byte	0
12673 2D8C                        78            .byte	$78
12674 2D8D                        0C            .byte	$C
12675 2D8E                        7C            .byte	$7C
12676 2D8F                        CC            .byte	$CC
12677 2D90                        CC            .byte	$CC
12678 2D91                        CC            .byte	$CC
12679 2D92                        76            .byte	$76
12680 2D93                        00            .byte	0
12681 2D94                        00            .byte	0
12682 2D95                        00            .byte	0
12683 2D96                        00            .byte	0
12684                                           ! 1364  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12685 2D97                        00            .byte	0
12686 2D98                        38            .byte	$38
12687 2D99                        6C            .byte	$6C
12688 2D9A                        38            .byte	$38
12689 2D9B                        00            .byte	0
12690 2D9C                        78            .byte	$78
12691 2D9D                        0C            .byte	$C
12692 2D9E                        7C            .byte	$7C
12693 2D9F                        CC            .byte	$CC
12694 2DA0                        CC            .byte	$CC
12695 2DA1                        CC            .byte	$CC
12696 2DA2                        76            .byte	$76
12697 2DA3                        00            .byte	0
12698 2DA4                        00            .byte	0
12699 2DA5                        00            .byte	0
12700 2DA6                        00            .byte	0
12701                                           ! 1365  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12702 2DA7                        00            .byte	0
12703 2DA8                        00            .byte	0
12704 2DA9                        00            .byte	0
12705 2DAA                        00            .byte	0
12706 2DAB                        3C            .byte	$3C
12707 2DAC                        66            .byte	$66
12708 2DAD                        60            .byte	$60
12709 2DAE                        60            .byte	$60
12710 2DAF                        66            .byte	$66
12711 2DB0                        3C            .byte	$3C
12712 2DB1                        0C            .byte	$C
12713 2DB2                        06            .byte	6
12714 2DB3                        3C            .byte	$3C
12715 2DB4                        00            .byte	0
12716 2DB5                        00            .byte	0
12717 2DB6                        00            .byte	0
12718                                           ! 1366  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12719 2DB7                        00            .byte	0
12720 2DB8                        10            .byte	$10
12721 2DB9                        38            .byte	$38
12722 2DBA                        6C            .byte	$6C
12723 2DBB                        00            .byte	0
12724 2DBC                        7C            .byte	$7C
12725 2DBD                        C6            .byte	$C6
12726 2DBE                        FE            .byte	$FE
12727 2DBF                        C0            .byte	$C0
12728 2DC0                        C0            .byte	$C0
12729 2DC1                        C6            .byte	$C6
12730 2DC2                        7C            .byte	$7C
12731 2DC3                        00            .byte	0
12732 2DC4                        00            .byte	0
12733 2DC5                        00            .byte	0
12734 2DC6                        00            .byte	0
12735                                           ! 1367  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00,
12736 2DC7                        00            .byte	0
12737 2DC8                        00            .byte	0
12738 2DC9                        C6            .byte	$C6
12739 2DCA                        00            .byte	0
12740 2DCB                        00            .byte	0
12741 2DCC                        7C            .byte	$7C
12742 2DCD                        C6            .byte	$C6
12743 2DCE                        FE            .byte	$FE
12744 2DCF                        C0            .byte	$C0
12745 2DD0                        C0            .byte	$C0
12746 2DD1                        C6            .byte	$C6
12747 2DD2                        7C            .byte	$7C
12748                                           ! 1367  0x00, 0x00, 0x00,
12749 2DD3                        00            .byte	0
12750 2DD4                        00            .byte	0
12751 2DD5                        00            .byte	0
12752 2DD6                        00            .byte	0
12753                                           ! 1368  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12754 2DD7                        00            .byte	0
12755 2DD8                        60            .byte	$60
12756 2DD9                        30            .byte	$30
12757 2DDA                        18            .byte	$18
12758 2DDB                        00            .byte	0
12759 2DDC                        7C            .byte	$7C
12760 2DDD                        C6            .byte	$C6
12761 2DDE                        FE            .byte	$FE
12762 2DDF                        C0            .byte	$C0
12763 2DE0                        C0            .byte	$C0
12764 2DE1                        C6            .byte	$C6
12765 2DE2                        7C            .byte	$7C
12766 2DE3                        00            .byte	0
12767 2DE4                        00            .byte	0
12768 2DE5                        00            .byte	0
12769 2DE6                        00            .byte	0
12770                                           ! 1369  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12771 2DE7                        00            .byte	0
12772 2DE8                        00            .byte	0
12773 2DE9                        66            .byte	$66
12774 2DEA                        00            .byte	0
12775 2DEB                        00            .byte	0
12776 2DEC                        38            .byte	$38
12777 2DED                        18            .byte	$18
12778 2DEE                        18            .byte	$18
12779 2DEF                        18            .byte	$18
12780 2DF0                        18            .byte	$18
12781 2DF1                        18            .byte	$18
12782 2DF2                        3C            .byte	$3C
12783 2DF3                        00            .byte	0
12784 2DF4                        00            .byte	0
12785 2DF5                        00            .byte	0
12786 2DF6                        00            .byte	0
12787                                           ! 1370  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12788 2DF7                        00            .byte	0
12789 2DF8                        18            .byte	$18
12790 2DF9                        3C            .byte	$3C
12791 2DFA                        66            .byte	$66
12792 2DFB                        00            .byte	0
12793 2DFC                        38            .byte	$38
12794 2DFD                        18            .byte	$18
12795 2DFE                        18            .byte	$18
12796 2DFF                        18            .byte	$18
12797 2E00                        18            .byte	$18
12798 2E01                        18            .byte	$18
12799 2E02                        3C            .byte	$3C
12800 2E03                        00            .byte	0
12801 2E04                        00            .byte	0
12802 2E05                        00            .byte	0
12803 2E06                        00            .byte	0
12804                                           ! 1371  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12805 2E07                        00            .byte	0
12806 2E08                        60            .byte	$60
12807 2E09                        30            .byte	$30
12808 2E0A                        18            .byte	$18
12809 2E0B                        00            .byte	0
12810 2E0C                        38            .byte	$38
12811 2E0D                        18            .byte	$18
12812 2E0E                        18            .byte	$18
12813 2E0F                        18            .byte	$18
12814 2E10                        18            .byte	$18
12815 2E11                        18            .byte	$18
12816 2E12                        3C            .byte	$3C
12817 2E13                        00            .byte	0
12818 2E14                        00            .byte	0
12819 2E15                        00            .byte	0
12820 2E16                        00            .byte	0
12821                                           ! 1372  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12822 2E17                        00            .byte	0
12823 2E18                        C6            .byte	$C6
12824 2E19                        00            .byte	0
12825 2E1A                        10            .byte	$10
12826 2E1B                        38            .byte	$38
12827 2E1C                        6C            .byte	$6C
12828 2E1D                        C6            .byte	$C6
12829 2E1E                        C6            .byte	$C6
12830 2E1F                        FE            .byte	$FE
12831 2E20                        C6            .byte	$C6
12832 2E21                        C6            .byte	$C6
12833 2E22                        C6            .byte	$C6
12834 2E23                        00            .byte	0
12835 2E24                        00            .byte	0
12836 2E25                        00            .byte	0
12837 2E26                        00            .byte	0
12838                                           ! 1373  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12839 2E27                        38            .byte	$38
12840 2E28                        6C            .byte	$6C
12841 2E29                        38            .byte	$38
12842 2E2A                        00            .byte	0
12843 2E2B                        38            .byte	$38
12844 2E2C                        6C            .byte	$6C
12845 2E2D                        C6            .byte	$C6
12846 2E2E                        C6            .byte	$C6
12847 2E2F                        FE            .byte	$FE
12848 2E30                        C6            .byte	$C6
12849 2E31                        C6            .byte	$C6
12850 2E32                        C6            .byte	$C6
12851 2E33                        00            .byte	0
12852 2E34                        00            .byte	0
12853 2E35                        00            .byte	0
12854 2E36                        00            .byte	0
12855                                           ! 1374  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
12856 2E37                        18            .byte	$18
12857 2E38                        30            .byte	$30
12858 2E39                        60            .byte	$60
12859 2E3A                        00            .byte	0
12860 2E3B                        FE            .byte	$FE
12861 2E3C                        66            .byte	$66
12862 2E3D                        60            .byte	$60
12863 2E3E                        7C            .byte	$7C
12864 2E3F                        60            .byte	$60
12865 2E40                        60            .byte	$60
12866 2E41                        66            .byte	$66
12867 2E42                        FE            .byte	$FE
12868 2E43                        00            .byte	0
12869 2E44                        00            .byte	0
12870 2E45                        00            .byte	0
12871 2E46                        00            .byte	0
12872                                           ! 1375  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
12873 2E47                        00            .byte	0
12874 2E48                        00            .byte	0
12875 2E49                        00            .byte	0
12876 2E4A                        00            .byte	0
12877 2E4B                        00            .byte	0
12878 2E4C                        6E            .byte	$6E
12879 2E4D                        3B            .byte	$3B
12880 2E4E                        1B            .byte	$1B
12881 2E4F                        7E            .byte	$7E
12882 2E50                        D8            .byte	$D8
12883 2E51                        DC            .byte	$DC
12884 2E52                        77            .byte	$77
12885 2E53                        00            .byte	0
12886 2E54                        00            .byte	0
12887 2E55                        00            .byte	0
12888 2E56                        00            .byte	0
12889                                           ! 1376  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
12890 2E57                        00            .byte	0
12891 2E58                        00            .byte	0
12892 2E59                        3E            .byte	$3E
12893 2E5A                        6C            .byte	$6C
12894 2E5B                        CC            .byte	$CC
12895 2E5C                        CC            .byte	$CC
12896 2E5D                        FE            .byte	$FE
12897 2E5E                        CC            .byte	$CC
12898 2E5F                        CC            .byte	$CC
12899 2E60                        CC            .byte	$CC
12900 2E61                        CC            .byte	$CC
12901 2E62                        CE            .byte	$CE
12902 2E63                        00            .byte	0
12903 2E64                        00            .byte	0
12904 2E65                        00            .byte	0
12905 2E66                        00            .byte	0
12906                                           ! 1377  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12907 2E67                        00            .byte	0
12908 2E68                        10            .byte	$10
12909 2E69                        38            .byte	$38
12910 2E6A                        6C            .byte	$6C
12911 2E6B                        00            .byte	0
12912 2E6C                        7C            .byte	$7C
12913 2E6D                        C6            .byte	$C6
12914 2E6E                        C6            .byte	$C6
12915 2E6F                        C6            .byte	$C6
12916 2E70                        C6            .byte	$C6
12917 2E71                        C6            .byte	$C6
12918 2E72                        7C            .byte	$7C
12919 2E73                        00            .byte	0
12920 2E74                        00            .byte	0
12921 2E75                        00            .byte	0
12922 2E76                        00            .byte	0
12923                                           ! 1378  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12924 2E77                        00            .byte	0
12925 2E78                        00            .byte	0
12926 2E79                        C6            .byte	$C6
12927 2E7A                        00            .byte	0
12928 2E7B                        00            .byte	0
12929 2E7C                        7C            .byte	$7C
12930 2E7D                        C6            .byte	$C6
12931 2E7E                        C6            .byte	$C6
12932 2E7F                        C6            .byte	$C6
12933 2E80                        C6            .byte	$C6
12934 2E81                        C6            .byte	$C6
12935 2E82                        7C            .byte	$7C
12936 2E83                        00            .byte	0
12937 2E84                        00            .byte	0
12938 2E85                        00            .byte	0
12939 2E86                        00            .byte	0
12940                                           ! 1379  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12941 2E87                        00            .byte	0
12942 2E88                        60            .byte	$60
12943 2E89                        30            .byte	$30
12944 2E8A                        18            .byte	$18
12945 2E8B                        00            .byte	0
12946 2E8C                        7C            .byte	$7C
12947 2E8D                        C6            .byte	$C6
12948 2E8E                        C6            .byte	$C6
12949 2E8F                        C6            .byte	$C6
12950 2E90                        C6            .byte	$C6
12951 2E91                        C6            .byte	$C6
12952 2E92                        7C            .byte	$7C
12953 2E93                        00            .byte	0
12954 2E94                        00            .byte	0
12955 2E95                        00            .byte	0
12956 2E96                        00            .byte	0
12957                                           ! 1380  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12958 2E97                        00            .byte	0
12959 2E98                        30            .byte	$30
12960 2E99                        78            .byte	$78
12961 2E9A                        CC            .byte	$CC
12962 2E9B                        00            .byte	0
12963 2E9C                        CC            .byte	$CC
12964 2E9D                        CC            .byte	$CC
12965 2E9E                        CC            .byte	$CC
12966 2E9F                        CC            .byte	$CC
12967 2EA0                        CC            .byte	$CC
12968 2EA1                        CC            .byte	$CC
12969 2EA2                        76            .byte	$76
12970 2EA3                        00            .byte	0
12971 2EA4                        00            .byte	0
12972 2EA5                        00            .byte	0
12973 2EA6                        00            .byte	0
12974                                           ! 1381  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12975 2EA7                        00            .byte	0
12976 2EA8                        60            .byte	$60
12977 2EA9                        30            .byte	$30
12978 2EAA                        18            .byte	$18
12979 2EAB                        00            .byte	0
12980 2EAC                        CC            .byte	$CC
12981 2EAD                        CC            .byte	$CC
12982 2EAE                        CC            .byte	$CC
12983 2EAF                        CC            .byte	$CC
12984 2EB0                        CC            .byte	$CC
12985 2EB1                        CC            .byte	$CC
12986 2EB2                        76            .byte	$76
12987 2EB3                        00            .byte	0
12988 2EB4                        00            .byte	0
12989 2EB5                        00            .byte	0
12990 2EB6                        00            .byte	0
12991                                           ! 1382  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
12992 2EB7                        00            .byte	0
12993 2EB8                        00            .byte	0
12994 2EB9                        C6            .byte	$C6
12995 2EBA                        00            .byte	0
12996 2EBB                        00            .byte	0
12997 2EBC                        C6            .byte	$C6
12998 2EBD                        C6            .byte	$C6
12999 2EBE                        C6            .byte	$C6
13000 2EBF                        C6            .byte	$C6
13001 2EC0                        C6            .byte	$C6
13002 2EC1                        C6            .byte	$C6
13003 2EC2                        7E            .byte	$7E
13004 2EC3                        06            .byte	6
13005 2EC4                        0C            .byte	$C
13006 2EC5                        78            .byte	$78
13007 2EC6                        00            .byte	0
13008                                           ! 1383  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13009 2EC7                        00            .byte	0
13010 2EC8                        C6            .byte	$C6
13011 2EC9                        00            .byte	0
13012 2ECA                        7C            .byte	$7C
13013 2ECB                        C6            .byte	$C6
13014 2ECC                        C6            .byte	$C6
13015 2ECD                        C6            .byte	$C6
13016 2ECE                        C6            .byte	$C6
13017 2ECF                        C6            .byte	$C6
13018 2ED0                        C6            .byte	$C6
13019 2ED1                        C6            .byte	$C6
13020 2ED2                        7C            .byte	$7C
13021 2ED3                        00            .byte	0
13022 2ED4                        00            .byte	0
13023 2ED5                        00            .byte	0
13024 2ED6                        00            .byte	0
13025                                           ! 1384  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13026 2ED7                        00            .byte	0
13027 2ED8                        C6            .byte	$C6
13028 2ED9                        00            .byte	0
13029 2EDA                        C6            .byte	$C6
13030 2EDB                        C6            .byte	$C6
13031 2EDC                        C6            .byte	$C6
13032 2EDD                        C6            .byte	$C6
13033 2EDE                        C6            .byte	$C6
13034 2EDF                        C6            .byte	$C6
13035 2EE0                        C6            .byte	$C6
13036 2EE1                        C6            .byte	$C6
13037 2EE2                        7C            .byte	$7C
13038 2EE3                        00            .byte	0
13039 2EE4                        00            .byte	0
13040 2EE5                        00            .byte	0
13041 2EE6                        00            .byte	0
13042                                           ! 1385  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13043 2EE7                        00            .byte	0
13044 2EE8                        18            .byte	$18
13045 2EE9                        18            .byte	$18
13046 2EEA                        7E            .byte	$7E
13047 2EEB                        C3            .byte	$C3
13048 2EEC                        C0            .byte	$C0
13049 2EED                        C0            .byte	$C0
13050 2EEE                        C0            .byte	$C0
13051 2EEF                        C3            .byte	$C3
13052 2EF0                        7E            .byte	$7E
13053 2EF1                        18            .byte	$18
13054 2EF2                        18            .byte	$18
13055 2EF3                        00            .byte	0
13056 2EF4                        00            .byte	0
13057 2EF5                        00            .byte	0
13058 2EF6                        00            .byte	0
13059                                           ! 1386  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13060 2EF7                        00            .byte	0
13061 2EF8                        38            .byte	$38
13062 2EF9                        6C            .byte	$6C
13063 2EFA                        64            .byte	$64
13064 2EFB                        60            .byte	$60
13065 2EFC                        F0            .byte	$F0
13066 2EFD                        60            .byte	$60
13067 2EFE                        60            .byte	$60
13068 2EFF                        60            .byte	$60
13069 2F00                        60            .byte	$60
13070 2F01                        E6            .byte	$E6
13071 2F02                        FC            .byte	$FC
13072 2F03                        00            .byte	0
13073 2F04                        00            .byte	0
13074 2F05                        00            .byte	0
13075 2F06                        00            .byte	0
13076                                           ! 1387  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13077 2F07                        00            .byte	0
13078 2F08                        00            .byte	0
13079 2F09                        C3            .byte	$C3
13080 2F0A                        66            .byte	$66
13081 2F0B                        3C            .byte	$3C
13082 2F0C                        18            .byte	$18
13083 2F0D                        FF            .byte	$FF
13084 2F0E                        18            .byte	$18
13085 2F0F                        FF            .byte	$FF
13086 2F10                        18            .byte	$18
13087 2F11                        18            .byte	$18
13088 2F12                        18            .byte	$18
13089 2F13                        00            .byte	0
13090 2F14                        00            .byte	0
13091 2F15                        00            .byte	0
13092 2F16                        00            .byte	0
13093                                           ! 1388  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00
13094 2F17                        00            .byte	0
13095 2F18                        FC            .byte	$FC
13096 2F19                        66            .byte	$66
13097 2F1A                        66            .byte	$66
13098 2F1B                        7C            .byte	$7C
13099 2F1C                        62            .byte	$62
13100 2F1D                        66            .byte	$66
13101 2F1E                        6F            .byte	$6F
13102 2F1F                        66            .byte	$66
13103 2F20                        66            .byte	$66
13104 2F21                        66            .byte	$66
13105 2F22                        F3            .byte	$F3
13106 2F23                        00            .byte	0
13107 2F24                        00            .byte	0
13108                                           ! 1388 , 0x00,
13109 2F25                        00            .byte	0
13110 2F26                        00            .byte	0
13111                                           ! 1389  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13112 2F27                        00            .byte	0
13113 2F28                        0E            .byte	$E
13114 2F29                        1B            .byte	$1B
13115 2F2A                        18            .byte	$18
13116 2F2B                        18            .byte	$18
13117 2F2C                        18            .byte	$18
13118 2F2D                        7E            .byte	$7E
13119 2F2E                        18            .byte	$18
13120 2F2F                        18            .byte	$18
13121 2F30                        18            .byte	$18
13122 2F31                        18            .byte	$18
13123 2F32                        18            .byte	$18
13124 2F33                        D8            .byte	$D8
13125 2F34                        70            .byte	$70
13126 2F35                        00            .byte	0
13127 2F36                        00            .byte	0
13128                                           ! 1390  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13129 2F37                        00            .byte	0
13130 2F38                        18            .byte	$18
13131 2F39                        30            .byte	$30
13132 2F3A                        60            .byte	$60
13133 2F3B                        00            .byte	0
13134 2F3C                        78            .byte	$78
13135 2F3D                        0C            .byte	$C
13136 2F3E                        7C            .byte	$7C
13137 2F3F                        CC            .byte	$CC
13138 2F40                        CC            .byte	$CC
13139 2F41                        CC            .byte	$CC
13140 2F42                        76            .byte	$76
13141 2F43                        00            .byte	0
13142 2F44                        00            .byte	0
13143 2F45                        00            .byte	0
13144 2F46                        00            .byte	0
13145                                           ! 1391  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13146 2F47                        00            .byte	0
13147 2F48                        0C            .byte	$C
13148 2F49                        18            .byte	$18
13149 2F4A                        30            .byte	$30
13150 2F4B                        00            .byte	0
13151 2F4C                        38            .byte	$38
13152 2F4D                        18            .byte	$18
13153 2F4E                        18            .byte	$18
13154 2F4F                        18            .byte	$18
13155 2F50                        18            .byte	$18
13156 2F51                        18            .byte	$18
13157 2F52                        3C            .byte	$3C
13158 2F53                        00            .byte	0
13159 2F54                        00            .byte	0
13160 2F55                        00            .byte	0
13161 2F56                        00            .byte	0
13162                                           ! 1392  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13163 2F57                        00            .byte	0
13164 2F58                        18            .byte	$18
13165 2F59                        30            .byte	$30
13166 2F5A                        60            .byte	$60
13167 2F5B                        00            .byte	0
13168 2F5C                        7C            .byte	$7C
13169 2F5D                        C6            .byte	$C6
13170 2F5E                        C6            .byte	$C6
13171 2F5F                        C6            .byte	$C6
13172 2F60                        C6            .byte	$C6
13173 2F61                        C6            .byte	$C6
13174 2F62                        7C            .byte	$7C
13175 2F63                        00            .byte	0
13176 2F64                        00            .byte	0
13177 2F65                        00            .byte	0
13178 2F66                        00            .byte	0
13179                                           ! 1393  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13180 2F67                        00            .byte	0
13181 2F68                        18            .byte	$18
13182 2F69                        30            .byte	$30
13183 2F6A                        60            .byte	$60
13184 2F6B                        00            .byte	0
13185 2F6C                        CC            .byte	$CC
13186 2F6D                        CC            .byte	$CC
13187 2F6E                        CC            .byte	$CC
13188 2F6F                        CC            .byte	$CC
13189 2F70                        CC            .byte	$CC
13190 2F71                        CC            .byte	$CC
13191 2F72                        76            .byte	$76
13192 2F73                        00            .byte	0
13193 2F74                        00            .byte	0
13194 2F75                        00            .byte	0
13195 2F76                        00            .byte	0
13196                                           ! 1394  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13197 2F77                        00            .byte	0
13198 2F78                        00            .byte	0
13199 2F79                        76            .byte	$76
13200 2F7A                        DC            .byte	$DC
13201 2F7B                        00            .byte	0
13202 2F7C                        DC            .byte	$DC
13203 2F7D                        66            .byte	$66
13204 2F7E                        66            .byte	$66
13205 2F7F                        66            .byte	$66
13206 2F80                        66            .byte	$66
13207 2F81                        66            .byte	$66
13208 2F82                        66            .byte	$66
13209 2F83                        00            .byte	0
13210 2F84                        00            .byte	0
13211 2F85                        00            .byte	0
13212 2F86                        00            .byte	0
13213                                           ! 1395  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13214 2F87                        76            .byte	$76
13215 2F88                        DC            .byte	$DC
13216 2F89                        00            .byte	0
13217 2F8A                        C6            .byte	$C6
13218 2F8B                        E6            .byte	$E6
13219 2F8C                        F6            .byte	$F6
13220 2F8D                        FE            .byte	$FE
13221 2F8E                        DE            .byte	$DE
13222 2F8F                        CE            .byte	$CE
13223 2F90                        C6            .byte	$C6
13224 2F91                        C6            .byte	$C6
13225 2F92                        C6            .byte	$C6
13226 2F93                        00            .byte	0
13227 2F94                        00            .byte	0
13228 2F95                        00            .byte	0
13229 2F96                        00            .byte	0
13230                                           ! 1396  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13231 2F97                        00            .byte	0
13232 2F98                        3C            .byte	$3C
13233 2F99                        6C            .byte	$6C
13234 2F9A                        6C            .byte	$6C
13235 2F9B                        3E            .byte	$3E
13236 2F9C                        00            .byte	0
13237 2F9D                        7E            .byte	$7E
13238 2F9E                        00            .byte	0
13239 2F9F                        00            .byte	0
13240 2FA0                        00            .byte	0
13241 2FA1                        00            .byte	0
13242 2FA2                        00            .byte	0
13243 2FA3                        00            .byte	0
13244 2FA4                        00            .byte	0
13245 2FA5                        00            .byte	0
13246 2FA6                        00            .byte	0
13247                                           ! 1397  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13248 2FA7                        00            .byte	0
13249 2FA8                        38            .byte	$38
13250 2FA9                        6C            .byte	$6C
13251 2FAA                        6C            .byte	$6C
13252 2FAB                        38            .byte	$38
13253 2FAC                        00            .byte	0
13254 2FAD                        7C            .byte	$7C
13255 2FAE                        00            .byte	0
13256 2FAF                        00            .byte	0
13257 2FB0                        00            .byte	0
13258 2FB1                        00            .byte	0
13259 2FB2                        00            .byte	0
13260 2FB3                        00            .byte	0
13261 2FB4                        00            .byte	0
13262 2FB5                        00            .byte	0
13263 2FB6                        00            .byte	0
13264                                           ! 1398  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13265 2FB7                        00            .byte	0
13266 2FB8                        00            .byte	0
13267 2FB9                        30            .byte	$30
13268 2FBA                        30            .byte	$30
13269 2FBB                        00            .byte	0
13270 2FBC                        30            .byte	$30
13271 2FBD                        30            .byte	$30
13272 2FBE                        60            .byte	$60
13273 2FBF                        C0            .byte	$C0
13274 2FC0                        C6            .byte	$C6
13275 2FC1                        C6            .byte	$C6
13276 2FC2                        7C            .byte	$7C
13277 2FC3                        00            .byte	0
13278 2FC4                        00            .byte	0
13279 2FC5                        00            .byte	0
13280 2FC6                        00            .byte	0
13281                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13282 2FC7                        00            .byte	0
13283 2FC8                        00            .byte	0
13284 2FC9                        00            .byte	0
13285 2FCA                        00            .byte	0
13286 2FCB                        00            .byte	0
13287 2FCC                        00            .byte	0
13288 2FCD                        FE            .byte	$FE
13289 2FCE                        C0            .byte	$C0
13290 2FCF                        C0            .byte	$C0
13291 2FD0                        C0            .byte	$C0
13292 2FD1                        C0            .byte	$C0
13293 2FD2                        00            .byte	0
13294 2FD3                        00            .byte	0
13295 2FD4                        00            .byte	0
13296 2FD5                        00            .byte	0
13297 2FD6                        00            .byte	0
13298                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13299 2FD7                        00            .byte	0
13300 2FD8                        00            .byte	0
13301 2FD9                        00            .byte	0
13302 2FDA                        00            .byte	0
13303 2FDB                        00            .byte	0
13304 2FDC                        00            .byte	0
13305 2FDD                        FE            .byte	$FE
13306 2FDE                        06            .byte	6
13307 2FDF                        06            .byte	6
13308 2FE0                        06            .byte	6
13309 2FE1                        06            .byte	6
13310 2FE2                        00            .byte	0
13311 2FE3                        00            .byte	0
13312 2FE4                        00            .byte	0
13313 2FE5                        00            .byte	0
13314 2FE6                        00            .byte	0
13315                                           ! 1401  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13316 2FE7                        00            .byte	0
13317 2FE8                        C0            .byte	$C0
13318 2FE9                        C0            .byte	$C0
13319 2FEA                        C2            .byte	$C2
13320 2FEB                        C6            .byte	$C6
13321 2FEC                        CC            .byte	$CC
13322 2FED                        18            .byte	$18
13323 2FEE                        30            .byte	$30
13324 2FEF                        60            .byte	$60
13325 2FF0                        CE            .byte	$CE
13326 2FF1                        9B            .byte	$9B
13327 2FF2                        06            .byte	6
13328 2FF3                        0C            .byte	$C
13329 2FF4                        1F            .byte	$1F
13330 2FF5                        00            .byte	0
13331 2FF6                        00            .byte	0
13332                                           ! 1402  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13333 2FF7                        00            .byte	0
13334 2FF8                        C0            .byte	$C0
13335 2FF9                        C0            .byte	$C0
13336 2FFA                        C2            .byte	$C2
13337 2FFB                        C6            .byte	$C6
13338 2FFC                        CC            .byte	$CC
13339 2FFD                        18            .byte	$18
13340 2FFE                        30            .byte	$30
13341 2FFF                        66            .byte	$66
13342 3000                        CE            .byte	$CE
13343 3001                        96            .byte	$96
13344 3002                        3E            .byte	$3E
13345 3003                        06            .byte	6
13346 3004                        06            .byte	6
13347 3005                        00            .byte	0
13348 3006                        00            .byte	0
13349                                           ! 1403  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13350 3007                        00            .byte	0
13351 3008                        00            .byte	0
13352 3009                        18            .byte	$18
13353 300A                        18            .byte	$18
13354 300B                        00            .byte	0
13355 300C                        18            .byte	$18
13356 300D                        18            .byte	$18
13357 300E                        18            .byte	$18
13358 300F                        3C            .byte	$3C
13359 3010                        3C            .byte	$3C
13360 3011                        3C            .byte	$3C
13361 3012                        18            .byte	$18
13362 3013                        00            .byte	0
13363 3014                        00            .byte	0
13364 3015                        00            .byte	0
13365 3016                        00            .byte	0
13366                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13367 3017                        00            .byte	0
13368 3018                        00            .byte	0
13369 3019                        00            .byte	0
13370 301A                        00            .byte	0
13371 301B                        00            .byte	0
13372 301C                        36            .byte	$36
13373 301D                        6C            .byte	$6C
13374 301E                        D8            .byte	$D8
13375 301F                        6C            .byte	$6C
13376 3020                        36            .byte	$36
13377 3021                        00            .byte	0
13378 3022                        00            .byte	0
13379 3023                        00            .byte	0
13380 3024                        00            .byte	0
13381 3025                        00            .byte	0
13382 3026                        00            .byte	0
13383                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13384 3027                        00            .byte	0
13385 3028                        00            .byte	0
13386 3029                        00            .byte	0
13387 302A                        00            .byte	0
13388 302B                        00            .byte	0
13389 302C                        D8            .byte	$D8
13390 302D                        6C            .byte	$6C
13391 302E                        36            .byte	$36
13392 302F                        6C            .byte	$6C
13393 3030                        D8            .byte	$D8
13394 3031                        00            .byte	0
13395 3032                        00            .byte	0
13396 3033                        00            .byte	0
13397 3034                        00            .byte	0
13398 3035                        00            .byte	0
13399 3036                        00            .byte	0
13400                                           ! 1406  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13401 3037                        11            .byte	$11
13402 3038                        44            .byte	$44
13403 3039                        11            .byte	$11
13404 303A                        44            .byte	$44
13405 303B                        11            .byte	$11
13406 303C                        44            .byte	$44
13407 303D                        11            .byte	$11
13408 303E                        44            .byte	$44
13409 303F                        11            .byte	$11
13410 3040                        44            .byte	$44
13411 3041                        11            .byte	$11
13412 3042                        44            .byte	$44
13413 3043                        11            .byte	$11
13414 3044                        44            .byte	$44
13415 3045                        11            .byte	$11
13416 3046                        44            .byte	$44
13417                                           ! 1407  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13418 3047                        55            .byte	$55
13419 3048                        AA            .byte	$AA
13420 3049                        55            .byte	$55
13421 304A                        AA            .byte	$AA
13422 304B                        55            .byte	$55
13423 304C                        AA            .byte	$AA
13424 304D                        55            .byte	$55
13425 304E                        AA            .byte	$AA
13426 304F                        55            .byte	$55
13427 3050                        AA            .byte	$AA
13428 3051                        55            .byte	$55
13429 3052                        AA            .byte	$AA
13430 3053                        55            .byte	$55
13431 3054                        AA            .byte	$AA
13432 3055                        55            .byte	$55
13433 3056                        AA            .byte	$AA
13434                                           ! 1408  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13435 3057                        DD            .byte	$DD
13436 3058                        77            .byte	$77
13437 3059                        DD            .byte	$DD
13438 305A                        77            .byte	$77
13439 305B                        DD            .byte	$DD
13440 305C                        77            .byte	$77
13441 305D                        DD            .byte	$DD
13442 305E                        77            .byte	$77
13443 305F                        DD            .byte	$DD
13444 3060                        77            .byte	$77
13445 3061                        DD            .byte	$DD
13446 3062                        77            .byte	$77
13447 3063                        DD            .byte	$DD
13448 3064                        77            .byte	$77
13449 3065                        DD            .byte	$DD
13450 3066                        77            .byte	$77
13451                                           ! 1409  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13452 3067                        18            .byte	$18
13453 3068                        18            .byte	$18
13454 3069                        18            .byte	$18
13455 306A                        18            .byte	$18
13456 306B                        18            .byte	$18
13457 306C                        18            .byte	$18
13458 306D                        18            .byte	$18
13459 306E                        18            .byte	$18
13460 306F                        18            .byte	$18
13461 3070                        18            .byte	$18
13462 3071                        18            .byte	$18
13463 3072                        18            .byte	$18
13464 3073                        18            .byte	$18
13465 3074                        18            .byte	$18
13466 3075                        18            .byte	$18
13467 3076                        18            .byte	$18
13468                                           ! 1410  0x
13469                                           ! 1410 18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13470 3077                        18            .byte	$18
13471 3078                        18            .byte	$18
13472 3079                        18            .byte	$18
13473 307A                        18            .byte	$18
13474 307B                        18            .byte	$18
13475 307C                        18            .byte	$18
13476 307D                        18            .byte	$18
13477 307E                        F8            .byte	$F8
13478 307F                        18            .byte	$18
13479 3080                        18            .byte	$18
13480 3081                        18            .byte	$18
13481 3082                        18            .byte	$18
13482 3083                        18            .byte	$18
13483 3084                        18            .byte	$18
13484 3085                        18            .byte	$18
13485 3086                        18            .byte	$18
13486                                           ! 1411  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13487 3087                        18            .byte	$18
13488 3088                        18            .byte	$18
13489 3089                        18            .byte	$18
13490 308A                        18            .byte	$18
13491 308B                        18            .byte	$18
13492 308C                        F8            .byte	$F8
13493 308D                        18            .byte	$18
13494 308E                        F8            .byte	$F8
13495 308F                        18            .byte	$18
13496 3090                        18            .byte	$18
13497 3091                        18            .byte	$18
13498 3092                        18            .byte	$18
13499 3093                        18            .byte	$18
13500 3094                        18            .byte	$18
13501 3095                        18            .byte	$18
13502 3096                        18            .byte	$18
13503                                           ! 1412  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13504 3097                        36            .byte	$36
13505 3098                        36            .byte	$36
13506 3099                        36            .byte	$36
13507 309A                        36            .byte	$36
13508 309B                        36            .byte	$36
13509 309C                        36            .byte	$36
13510 309D                        36            .byte	$36
13511 309E                        F6            .byte	$F6
13512 309F                        36            .byte	$36
13513 30A0                        36            .byte	$36
13514 30A1                        36            .byte	$36
13515 30A2                        36            .byte	$36
13516 30A3                        36            .byte	$36
13517 30A4                        36            .byte	$36
13518 30A5                        36            .byte	$36
13519 30A6                        36            .byte	$36
13520                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13521 30A7                        00            .byte	0
13522 30A8                        00            .byte	0
13523 30A9                        00            .byte	0
13524 30AA                        00            .byte	0
13525 30AB                        00            .byte	0
13526 30AC                        00            .byte	0
13527 30AD                        00            .byte	0
13528 30AE                        FE            .byte	$FE
13529 30AF                        36            .byte	$36
13530 30B0                        36            .byte	$36
13531 30B1                        36            .byte	$36
13532 30B2                        36            .byte	$36
13533 30B3                        36            .byte	$36
13534 30B4                        36            .byte	$36
13535 30B5                        36            .byte	$36
13536 30B6                        36            .byte	$36
13537                                           ! 1414  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13538 30B7                        00            .byte	0
13539 30B8                        00            .byte	0
13540 30B9                        00            .byte	0
13541 30BA                        00            .byte	0
13542 30BB                        00            .byte	0
13543 30BC                        F8            .byte	$F8
13544 30BD                        18            .byte	$18
13545 30BE                        F8            .byte	$F8
13546 30BF                        18            .byte	$18
13547 30C0                        18            .byte	$18
13548 30C1                        18            .byte	$18
13549 30C2                        18            .byte	$18
13550 30C3                        18            .byte	$18
13551 30C4                        18            .byte	$18
13552 30C5                        18            .byte	$18
13553 30C6                        18            .byte	$18
13554                                           ! 1415  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13555 30C7                        36            .byte	$36
13556 30C8                        36            .byte	$36
13557 30C9                        36            .byte	$36
13558 30CA                        36            .byte	$36
13559 30CB                        36            .byte	$36
13560 30CC                        F6            .byte	$F6
13561 30CD                        06            .byte	6
13562 30CE                        F6            .byte	$F6
13563 30CF                        36            .byte	$36
13564 30D0                        36            .byte	$36
13565 30D1                        36            .byte	$36
13566 30D2                        36            .byte	$36
13567 30D3                        36            .byte	$36
13568 30D4                        36            .byte	$36
13569 30D5                        36            .byte	$36
13570 30D6                        36            .byte	$36
13571                                           ! 1416  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13572 30D7                        36            .byte	$36
13573 30D8                        36            .byte	$36
13574 30D9                        36            .byte	$36
13575 30DA                        36            .byte	$36
13576 30DB                        36            .byte	$36
13577 30DC                        36            .byte	$36
13578 30DD                        36            .byte	$36
13579 30DE                        36            .byte	$36
13580 30DF                        36            .byte	$36
13581 30E0                        36            .byte	$36
13582 30E1                        36            .byte	$36
13583 30E2                        36            .byte	$36
13584 30E3                        36            .byte	$36
13585 30E4                        36            .byte	$36
13586 30E5                        36            .byte	$36
13587 30E6                        36            .byte	$36
13588                                           ! 1417  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13589 30E7                        00            .byte	0
13590 30E8                        00            .byte	0
13591 30E9                        00            .byte	0
13592 30EA                        00            .byte	0
13593 30EB                        00            .byte	0
13594 30EC                        FE            .byte	$FE
13595 30ED                        06            .byte	6
13596 30EE                        F6            .byte	$F6
13597 30EF                        36            .byte	$36
13598 30F0                        36            .byte	$36
13599 30F1                        36            .byte	$36
13600 30F2                        36            .byte	$36
13601 30F3                        36            .byte	$36
13602 30F4                        36            .byte	$36
13603 30F5                        36            .byte	$36
13604 30F6                        36            .byte	$36
13605                                           ! 1418  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13606 30F7                        36            .byte	$36
13607 30F8                        36            .byte	$36
13608 30F9                        36            .byte	$36
13609 30FA                        36            .byte	$36
13610 30FB                        36            .byte	$36
13611 30FC                        F6            .byte	$F6
13612 30FD                        06            .byte	6
13613 30FE                        FE            .byte	$FE
13614 30FF                        00            .byte	0
13615 3100                        00            .byte	0
13616 3101                        00            .byte	0
13617 3102                        00            .byte	0
13618 3103                        00            .byte	0
13619 3104                        00            .byte	0
13620 3105                        00            .byte	0
13621 3106                        00            .byte	0
13622                                           ! 1419  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13623 3107                        36            .byte	$36
13624 3108                        36            .byte	$36
13625 3109                        36            .byte	$36
13626 310A                        36            .byte	$36
13627 310B                        36            .byte	$36
13628 310C                        36            .byte	$36
13629 310D                        36            .byte	$36
13630 310E                        FE            .byte	$FE
13631 310F                        00            .byte	0
13632 3110                        00            .byte	0
13633 3111                        00            .byte	0
13634 3112                        00            .byte	0
13635 3113                        00            .byte	0
13636 3114                        00            .byte	0
13637 3115                        00            .byte	0
13638 3116                        00            .byte	0
13639                                           ! 1420  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13640 3117                        18            .byte	$18
13641 3118                        18            .byte	$18
13642 3119                        18            .byte	$18
13643 311A                        18            .byte	$18
13644 311B                        18            .byte	$18
13645 311C                        F8            .byte	$F8
13646 311D                        18            .byte	$18
13647 311E                        F8            .byte	$F8
13648 311F                        00            .byte	0
13649 3120                        00            .byte	0
13650 3121                        00            .byte	0
13651 3122                        00            .byte	0
13652 3123                        00            .byte	0
13653 3124                        00            .byte	0
13654 3125                        00            .byte	0
13655 3126                        00            .byte	0
13656                                           ! 1421  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13657 3127                        00            .byte	0
13658 3128                        00            .byte	0
13659 3129                        00            .byte	0
13660 312A                        00            .byte	0
13661 312B                        00            .byte	0
13662 312C                        00            .byte	0
13663 312D                        00            .byte	0
13664 312E                        F8            .byte	$F8
13665 312F                        18            .byte	$18
13666 3130                        18            .byte	$18
13667 3131                        18            .byte	$18
13668 3132                        18            .byte	$18
13669 3133                        18            .byte	$18
13670 3134                        18            .byte	$18
13671 3135                        18            .byte	$18
13672 3136                        18            .byte	$18
13673                                           ! 1422  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13674 3137                        18            .byte	$18
13675 3138                        18            .byte	$18
13676 3139                        18            .byte	$18
13677 313A                        18            .byte	$18
13678 313B                        18            .byte	$18
13679 313C                        18            .byte	$18
13680 313D                        18            .byte	$18
13681 313E                        1F            .byte	$1F
13682 313F                        00            .byte	0
13683 3140                        00            .byte	0
13684 3141                        00            .byte	0
13685 3142                        00            .byte	0
13686 3143                        00            .byte	0
13687 3144                        00            .byte	0
13688 3145                        00            .byte	0
13689 3146                        00            .byte	0
13690                                           ! 1423  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13691 3147                        18            .byte	$18
13692 3148                        18            .byte	$18
13693 3149                        18            .byte	$18
13694 314A                        18            .byte	$18
13695 314B                        18            .byte	$18
13696 314C                        18            .byte	$18
13697 314D                        18            .byte	$18
13698 314E                        FF            .byte	$FF
13699 314F                        00            .byte	0
13700 3150                        00            .byte	0
13701 3151                        00            .byte	0
13702 3152                        00            .byte	0
13703 3153                        00            .byte	0
13704 3154                        00            .byte	0
13705 3155                        00            .byte	0
13706 3156                        00            .byte	0
13707                                           ! 1424  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13708 3157                        00            .byte	0
13709 3158                        00            .byte	0
13710 3159                        00            .byte	0
13711 315A                        00            .byte	0
13712 315B                        00            .byte	0
13713 315C                        00            .byte	0
13714 315D                        00            .byte	0
13715 315E                        FF            .byte	$FF
13716 315F                        18            .byte	$18
13717 3160                        18            .byte	$18
13718 3161                        18            .byte	$18
13719 3162                        18            .byte	$18
13720 3163                        18            .byte	$18
13721 3164                        18            .byte	$18
13722 3165                        18            .byte	$18
13723 3166                        18            .byte	$18
13724                                           ! 1425  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13725 3167                        18            .byte	$18
13726 3168                        18            .byte	$18
13727 3169                        18            .byte	$18
13728 316A                        18            .byte	$18
13729 316B                        18            .byte	$18
13730 316C                        18            .byte	$18
13731 316D                        18            .byte	$18
13732 316E                        1F            .byte	$1F
13733 316F                        18            .byte	$18
13734 3170                        18            .byte	$18
13735 3171                        18            .byte	$18
13736 3172                        18            .byte	$18
13737 3173                        18            .byte	$18
13738 3174                        18            .byte	$18
13739 3175                        18            .byte	$18
13740 3176                        18            .byte	$18
13741                                           ! 1426  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13742 3177                        00            .byte	0
13743 3178                        00            .byte	0
13744 3179                        00            .byte	0
13745 317A                        00            .byte	0
13746 317B                        00            .byte	0
13747 317C                        00            .byte	0
13748 317D                        00            .byte	0
13749 317E                        FF            .byte	$FF
13750 317F                        00            .byte	0
13751 3180                        00            .byte	0
13752 3181                        00            .byte	0
13753 3182                        00            .byte	0
13754 3183                        00            .byte	0
13755 3184                        00            .byte	0
13756 3185                        00            .byte	0
13757 3186                        00            .byte	0
13758                                           ! 1427  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13759 3187                        18            .byte	$18
13760 3188                        18            .byte	$18
13761 3189                        18            .byte	$18
13762 318A                        18            .byte	$18
13763 318B                        18            .byte	$18
13764 318C                        18            .byte	$18
13765 318D                        18            .byte	$18
13766 318E                        FF            .byte	$FF
13767 318F                        18            .byte	$18
13768 3190                        18            .byte	$18
13769 3191                        18            .byte	$18
13770 3192                        18            .byte	$18
13771 3193                        18            .byte	$18
13772 3194                        18            .byte	$18
13773 3195                        18            .byte	$18
13774 3196                        18            .byte	$18
13775                                           ! 1428  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13776 3197                        18            .byte	$18
13777 3198                        18            .byte	$18
13778 3199                        18            .byte	$18
13779 319A                        18            .byte	$18
13780 319B                        18            .byte	$18
13781 319C                        1F            .byte	$1F
13782 319D                        18            .byte	$18
13783 319E                        1F            .byte	$1F
13784 319F                        18            .byte	$18
13785 31A0                        18            .byte	$18
13786 31A1                        18            .byte	$18
13787 31A2                        18            .byte	$18
13788 31A3                        18            .byte	$18
13789 31A4                        18            .byte	$18
13790 31A5                        18            .byte	$18
13791 31A6                        18            .byte	$18
13792                                           ! 1429  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13793 31A7                        36            .byte	$36
13794 31A8                        36            .byte	$36
13795 31A9                        36            .byte	$36
13796 31AA                        36            .byte	$36
13797 31AB                        36            .byte	$36
13798 31AC                        36            .byte	$36
13799 31AD                        36            .byte	$36
13800 31AE                        37            .byte	$37
13801 31AF                        36            .byte	$36
13802 31B0                        36            .byte	$36
13803 31B1                        36            .byte	$36
13804 31B2                        36            .byte	$36
13805 31B3                        36            .byte	$36
13806 31B4                        36            .byte	$36
13807 31B5                        36            .byte	$36
13808 31B6                        36            .byte	$36
13809                                           ! 1430  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13810 31B7                        36            .byte	$36
13811 31B8                        36            .byte	$36
13812 31B9                        36            .byte	$36
13813 31BA                        36            .byte	$36
13814 31BB                        36            .byte	$36
13815 31BC                        37            .byte	$37
13816 31BD                        30            .byte	$30
13817 31BE                        3F            .byte	$3F
13818 31BF                        00            .byte	0
13819 31C0                        00            .byte	0
13820 31C1                        00            .byte	0
13821 31C2                        00            .byte	0
13822 31C3                        00            .byte	0
13823 31C4                        00            .byte	0
13824 31C5                        00            .byte	0
13825 31C6                        00            .byte	0
13826                                           ! 1431  0x00, 0x00, 0
13827 31C7                        00            .byte	0
13828 31C8                        00            .byte	0
13829                                           ! 1431 x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13830 31C9                        00            .byte	0
13831 31CA                        00            .byte	0
13832 31CB                        00            .byte	0
13833 31CC                        3F            .byte	$3F
13834 31CD                        30            .byte	$30
13835 31CE                        37            .byte	$37
13836 31CF                        36            .byte	$36
13837 31D0                        36            .byte	$36
13838 31D1                        36            .byte	$36
13839 31D2                        36            .byte	$36
13840 31D3                        36            .byte	$36
13841 31D4                        36            .byte	$36
13842 31D5                        36            .byte	$36
13843 31D6                        36            .byte	$36
13844                                           ! 1432  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13845 31D7                        36            .byte	$36
13846 31D8                        36            .byte	$36
13847 31D9                        36            .byte	$36
13848 31DA                        36            .byte	$36
13849 31DB                        36            .byte	$36
13850 31DC                        F7            .byte	$F7
13851 31DD                        00            .byte	0
13852 31DE                        FF            .byte	$FF
13853 31DF                        00            .byte	0
13854 31E0                        00            .byte	0
13855 31E1                        00            .byte	0
13856 31E2                        00            .byte	0
13857 31E3                        00            .byte	0
13858 31E4                        00            .byte	0
13859 31E5                        00            .byte	0
13860 31E6                        00            .byte	0
13861                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13862 31E7                        00            .byte	0
13863 31E8                        00            .byte	0
13864 31E9                        00            .byte	0
13865 31EA                        00            .byte	0
13866 31EB                        00            .byte	0
13867 31EC                        FF            .byte	$FF
13868 31ED                        00            .byte	0
13869 31EE                        F7            .byte	$F7
13870 31EF                        36            .byte	$36
13871 31F0                        36            .byte	$36
13872 31F1                        36            .byte	$36
13873 31F2                        36            .byte	$36
13874 31F3                        36            .byte	$36
13875 31F4                        36            .byte	$36
13876 31F5                        36            .byte	$36
13877 31F6                        36            .byte	$36
13878                                           ! 1434  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13879 31F7                        36            .byte	$36
13880 31F8                        36            .byte	$36
13881 31F9                        36            .byte	$36
13882 31FA                        36            .byte	$36
13883 31FB                        36            .byte	$36
13884 31FC                        37            .byte	$37
13885 31FD                        30            .byte	$30
13886 31FE                        37            .byte	$37
13887 31FF                        36            .byte	$36
13888 3200                        36            .byte	$36
13889 3201                        36            .byte	$36
13890 3202                        36            .byte	$36
13891 3203                        36            .byte	$36
13892 3204                        36            .byte	$36
13893 3205                        36            .byte	$36
13894 3206                        36            .byte	$36
13895                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13896 3207                        00            .byte	0
13897 3208                        00            .byte	0
13898 3209                        00            .byte	0
13899 320A                        00            .byte	0
13900 320B                        00            .byte	0
13901 320C                        FF            .byte	$FF
13902 320D                        00            .byte	0
13903 320E                        FF            .byte	$FF
13904 320F                        00            .byte	0
13905 3210                        00            .byte	0
13906 3211                        00            .byte	0
13907 3212                        00            .byte	0
13908 3213                        00            .byte	0
13909 3214                        00            .byte	0
13910 3215                        00            .byte	0
13911 3216                        00            .byte	0
13912                                           ! 1436  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13913 3217                        36            .byte	$36
13914 3218                        36            .byte	$36
13915 3219                        36            .byte	$36
13916 321A                        36            .byte	$36
13917 321B                        36            .byte	$36
13918 321C                        F7            .byte	$F7
13919 321D                        00            .byte	0
13920 321E                        F7            .byte	$F7
13921 321F                        36            .byte	$36
13922 3220                        36            .byte	$36
13923 3221                        36            .byte	$36
13924 3222                        36            .byte	$36
13925 3223                        36            .byte	$36
13926 3224                        36            .byte	$36
13927 3225                        36            .byte	$36
13928 3226                        36            .byte	$36
13929                                           ! 1437  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13930 3227                        18            .byte	$18
13931 3228                        18            .byte	$18
13932 3229                        18            .byte	$18
13933 322A                        18            .byte	$18
13934 322B                        18            .byte	$18
13935 322C                        FF            .byte	$FF
13936 322D                        00            .byte	0
13937 322E                        FF            .byte	$FF
13938 322F                        00            .byte	0
13939 3230                        00            .byte	0
13940 3231                        00            .byte	0
13941 3232                        00            .byte	0
13942 3233                        00            .byte	0
13943 3234                        00            .byte	0
13944 3235                        00            .byte	0
13945 3236                        00            .byte	0
13946                                           ! 1438  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13947 3237                        36            .byte	$36
13948 3238                        36            .byte	$36
13949 3239                        36            .byte	$36
13950 323A                        36            .byte	$36
13951 323B                        36            .byte	$36
13952 323C                        36            .byte	$36
13953 323D                        36            .byte	$36
13954 323E                        FF            .byte	$FF
13955 323F                        00            .byte	0
13956 3240                        00            .byte	0
13957 3241                        00            .byte	0
13958 3242                        00            .byte	0
13959 3243                        00            .byte	0
13960 3244                        00            .byte	0
13961 3245                        00            .byte	0
13962 3246                        00            .byte	0
13963                                           ! 1439  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13964 3247                        00            .byte	0
13965 3248                        00            .byte	0
13966 3249                        00            .byte	0
13967 324A                        00            .byte	0
13968 324B                        00            .byte	0
13969 324C                        FF            .byte	$FF
13970 324D                        00            .byte	0
13971 324E                        FF            .byte	$FF
13972 324F                        18            .byte	$18
13973 3250                        18            .byte	$18
13974 3251                        18            .byte	$18
13975 3252                        18            .byte	$18
13976 3253                        18            .byte	$18
13977 3254                        18            .byte	$18
13978 3255                        18            .byte	$18
13979 3256                        18            .byte	$18
13980                                           ! 1440  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13981 3257                        00            .byte	0
13982 3258                        00            .byte	0
13983 3259                        00            .byte	0
13984 325A                        00            .byte	0
13985 325B                        00            .byte	0
13986 325C                        00            .byte	0
13987 325D                        00            .byte	0
13988 325E                        FF            .byte	$FF
13989 325F                        36            .byte	$36
13990 3260                        36            .byte	$36
13991 3261                        36            .byte	$36
13992 3262                        36            .byte	$36
13993 3263                        36            .byte	$36
13994 3264                        36            .byte	$36
13995 3265                        36            .byte	$36
13996 3266                        36            .byte	$36
13997                                           ! 1441  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13998 3267                        36            .byte	$36
13999 3268                        36            .byte	$36
14000 3269                        36            .byte	$36
14001 326A                        36            .byte	$36
14002 326B                        36            .byte	$36
14003 326C                        36            .byte	$36
14004 326D                        36            .byte	$36
14005 326E                        3F            .byte	$3F
14006 326F                        00            .byte	0
14007 3270                        00            .byte	0
14008 3271                        00            .byte	0
14009 3272                        00            .byte	0
14010 3273                        00            .byte	0
14011 3274                        00            .byte	0
14012 3275                        00            .byte	0
14013 3276                        00            .byte	0
14014                                           ! 1442  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14015 3277                        18            .byte	$18
14016 3278                        18            .byte	$18
14017 3279                        18            .byte	$18
14018 327A                        18            .byte	$18
14019 327B                        18            .byte	$18
14020 327C                        1F            .byte	$1F
14021 327D                        18            .byte	$18
14022 327E                        1F            .byte	$1F
14023 327F                        00            .byte	0
14024 3280                        00            .byte	0
14025 3281                        00            .byte	0
14026 3282                        00            .byte	0
14027 3283                        00            .byte	0
14028 3284                        00            .byte	0
14029 3285                        00            .byte	0
14030 3286                        00            .byte	0
14031                                           ! 1443  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14032 3287                        00            .byte	0
14033 3288                        00            .byte	0
14034 3289                        00            .byte	0
14035 328A                        00            .byte	0
14036 328B                        00            .byte	0
14037 328C                        1F            .byte	$1F
14038 328D                        18            .byte	$18
14039 328E                        1F            .byte	$1F
14040 328F                        18            .byte	$18
14041 3290                        18            .byte	$18
14042 3291                        18            .byte	$18
14043 3292                        18            .byte	$18
14044 3293                        18            .byte	$18
14045 3294                        18            .byte	$18
14046 3295                        18            .byte	$18
14047 3296                        18            .byte	$18
14048                                           ! 1444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14049 3297                        00            .byte	0
14050 3298                        00            .byte	0
14051 3299                        00            .byte	0
14052 329A                        00            .byte	0
14053 329B                        00            .byte	0
14054 329C                        00            .byte	0
14055 329D                        00            .byte	0
14056 329E                        3F            .byte	$3F
14057 329F                        36            .byte	$36
14058 32A0                        36            .byte	$36
14059 32A1                        36            .byte	$36
14060 32A2                        36            .byte	$36
14061 32A3                        36            .byte	$36
14062 32A4                        36            .byte	$36
14063 32A5                        36            .byte	$36
14064 32A6                        36            .byte	$36
14065                                           ! 1445  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14066 32A7                        36            .byte	$36
14067 32A8                        36            .byte	$36
14068 32A9                        36            .byte	$36
14069 32AA                        36            .byte	$36
14070 32AB                        36            .byte	$36
14071 32AC                        36            .byte	$36
14072 32AD                        36            .byte	$36
14073 32AE                        FF            .byte	$FF
14074 32AF                        36            .byte	$36
14075 32B0                        36            .byte	$36
14076 32B1                        36            .byte	$36
14077 32B2                        36            .byte	$36
14078 32B3                        36            .byte	$36
14079 32B4                        36            .byte	$36
14080 32B5                        36            .byte	$36
14081 32B6                        36            .byte	$36
14082                                           ! 1446  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14083 32B7                        18            .byte	$18
14084 32B8                        18            .byte	$18
14085 32B9                        18            .byte	$18
14086 32BA                        18            .byte	$18
14087 32BB                        18            .byte	$18
14088 32BC                        FF            .byte	$FF
14089 32BD                        18            .byte	$18
14090 32BE                        FF            .byte	$FF
14091 32BF                        18            .byte	$18
14092 32C0                        18            .byte	$18
14093 32C1                        18            .byte	$18
14094 32C2                        18            .byte	$18
14095 32C3                        18            .byte	$18
14096 32C4                        18            .byte	$18
14097 32C5                        18            .byte	$18
14098 32C6                        18            .byte	$18
14099                                           ! 1447  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14100 32C7                        18            .byte	$18
14101 32C8                        18            .byte	$18
14102 32C9                        18            .byte	$18
14103 32CA                        18            .byte	$18
14104 32CB                        18            .byte	$18
14105 32CC                        18            .byte	$18
14106 32CD                        18            .byte	$18
14107 32CE                        F8            .byte	$F8
14108 32CF                        00            .byte	0
14109 32D0                        00            .byte	0
14110 32D1                        00            .byte	0
14111 32D2                        00            .byte	0
14112 32D3                        00            .byte	0
14113 32D4                        00            .byte	0
14114 32D5                        00            .byte	0
14115 32D6                        00            .byte	0
14116                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14117 32D7                        00            .byte	0
14118 32D8                        00            .byte	0
14119 32D9                        00            .byte	0
14120 32DA                        00            .byte	0
14121 32DB                        00            .byte	0
14122 32DC                        00            .byte	0
14123 32DD                        00            .byte	0
14124 32DE                        1F            .byte	$1F
14125 32DF                        18            .byte	$18
14126 32E0                        18            .byte	$18
14127 32E1                        18            .byte	$18
14128 32E2                        18            .byte	$18
14129 32E3                        18            .byte	$18
14130 32E4                        18            .byte	$18
14131 32E5                        18            .byte	$18
14132 32E6                        18            .byte	$18
14133                                           ! 1449  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14134 32E7                        FF            .byte	$FF
14135 32E8                        FF            .byte	$FF
14136 32E9                        FF            .byte	$FF
14137 32EA                        FF            .byte	$FF
14138 32EB                        FF            .byte	$FF
14139 32EC                        FF            .byte	$FF
14140 32ED                        FF            .byte	$FF
14141 32EE                        FF            .byte	$FF
14142 32EF                        FF            .byte	$FF
14143 32F0                        FF            .byte	$FF
14144 32F1                        FF            .byte	$FF
14145 32F2                        FF            .byte	$FF
14146 32F3                        FF            .byte	$FF
14147 32F4                        FF            .byte	$FF
14148 32F5                        FF            .byte	$FF
14149 32F6                        FF            .byte	$FF
14150                                           ! 1450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14151 32F7                        00            .byte	0
14152 32F8                        00            .byte	0
14153 32F9                        00            .byte	0
14154 32FA                        00            .byte	0
14155 32FB                        00            .byte	0
14156 32FC                        00            .byte	0
14157 32FD                        00            .byte	0
14158 32FE                        FF            .byte	$FF
14159 32FF                        FF            .byte	$FF
14160 3300                        FF            .byte	$FF
14161 3301                        FF            .byte	$FF
14162 3302                        FF            .byte	$FF
14163 3303                        FF            .byte	$FF
14164 3304                        FF            .byte	$FF
14165 3305                        FF            .byte	$FF
14166 3306                        FF            .byte	$FF
14167                                           ! 1451  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14168 3307                        F0            .byte	$F0
14169 3308                        F0            .byte	$F0
14170 3309                        F0            .byte	$F0
14171 330A                        F0            .byte	$F0
14172 330B                        F0            .byte	$F0
14173 330C                        F0            .byte	$F0
14174 330D                        F0            .byte	$F0
14175 330E                        F0            .byte	$F0
14176 330F                        F0            .byte	$F0
14177 3310                        F0            .byte	$F0
14178 3311                        F0            .byte	$F0
14179 3312                        F0            .byte	$F0
14180 3313                        F0            .byte	$F0
14181 3314                        F0            .byte	$F0
14182 3315                        F0            .byte	$F0
14183 3316                        F0            .byte	$F0
14184                                           ! 1452  0x0f, 0x0f, 0x0f, 0x0f, 
14185 3317                        0F            .byte	$F
14186 3318                        0F            .byte	$F
14187 3319                        0F            .byte	$F
14188 331A                        0F            .byte	$F
14189                                           ! 1452 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14190 331B                        0F            .byte	$F
14191 331C                        0F            .byte	$F
14192 331D                        0F            .byte	$F
14193 331E                        0F            .byte	$F
14194 331F                        0F            .byte	$F
14195 3320                        0F            .byte	$F
14196 3321                        0F            .byte	$F
14197 3322                        0F            .byte	$F
14198 3323                        0F            .byte	$F
14199 3324                        0F            .byte	$F
14200 3325                        0F            .byte	$F
14201 3326                        0F            .byte	$F
14202                                           ! 1453  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14203 3327                        FF            .byte	$FF
14204 3328                        FF            .byte	$FF
14205 3329                        FF            .byte	$FF
14206 332A                        FF            .byte	$FF
14207 332B                        FF            .byte	$FF
14208 332C                        FF            .byte	$FF
14209 332D                        FF            .byte	$FF
14210 332E                        00            .byte	0
14211 332F                        00            .byte	0
14212 3330                        00            .byte	0
14213 3331                        00            .byte	0
14214 3332                        00            .byte	0
14215 3333                        00            .byte	0
14216 3334                        00            .byte	0
14217 3335                        00            .byte	0
14218 3336                        00            .byte	0
14219                                           ! 1454  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14220 3337                        00            .byte	0
14221 3338                        00            .byte	0
14222 3339                        00            .byte	0
14223 333A                        00            .byte	0
14224 333B                        00            .byte	0
14225 333C                        76            .byte	$76
14226 333D                        DC            .byte	$DC
14227 333E                        D8            .byte	$D8
14228 333F                        D8            .byte	$D8
14229 3340                        D8            .byte	$D8
14230 3341                        DC            .byte	$DC
14231 3342                        76            .byte	$76
14232 3343                        00            .byte	0
14233 3344                        00            .byte	0
14234 3345                        00            .byte	0
14235 3346                        00            .byte	0
14236                                           ! 1455  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14237 3347                        00            .byte	0
14238 3348                        00            .byte	0
14239 3349                        78            .byte	$78
14240 334A                        CC            .byte	$CC
14241 334B                        CC            .byte	$CC
14242 334C                        CC            .byte	$CC
14243 334D                        D8            .byte	$D8
14244 334E                        CC            .byte	$CC
14245 334F                        C6            .byte	$C6
14246 3350                        C6            .byte	$C6
14247 3351                        C6            .byte	$C6
14248 3352                        CC            .byte	$CC
14249 3353                        00            .byte	0
14250 3354                        00            .byte	0
14251 3355                        00            .byte	0
14252 3356                        00            .byte	0
14253                                           ! 1456  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14254 3357                        00            .byte	0
14255 3358                        00            .byte	0
14256 3359                        FE            .byte	$FE
14257 335A                        C6            .byte	$C6
14258 335B                        C6            .byte	$C6
14259 335C                        C0            .byte	$C0
14260 335D                        C0            .byte	$C0
14261 335E                        C0            .byte	$C0
14262 335F                        C0            .byte	$C0
14263 3360                        C0            .byte	$C0
14264 3361                        C0            .byte	$C0
14265 3362                        C0            .byte	$C0
14266 3363                        00            .byte	0
14267 3364                        00            .byte	0
14268 3365                        00            .byte	0
14269 3366                        00            .byte	0
14270                                           ! 1457  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14271 3367                        00            .byte	0
14272 3368                        00            .byte	0
14273 3369                        00            .byte	0
14274 336A                        00            .byte	0
14275 336B                        FE            .byte	$FE
14276 336C                        6C            .byte	$6C
14277 336D                        6C            .byte	$6C
14278 336E                        6C            .byte	$6C
14279 336F                        6C            .byte	$6C
14280 3370                        6C            .byte	$6C
14281 3371                        6C            .byte	$6C
14282 3372                        6C            .byte	$6C
14283 3373                        00            .byte	0
14284 3374                        00            .byte	0
14285 3375                        00            .byte	0
14286 3376                        00            .byte	0
14287                                           ! 1458  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14288 3377                        00            .byte	0
14289 3378                        00            .byte	0
14290 3379                        00            .byte	0
14291 337A                        FE            .byte	$FE
14292 337B                        C6            .byte	$C6
14293 337C                        60            .byte	$60
14294 337D                        30            .byte	$30
14295 337E                        18            .byte	$18
14296 337F                        30            .byte	$30
14297 3380                        60            .byte	$60
14298 3381                        C6            .byte	$C6
14299 3382                        FE            .byte	$FE
14300 3383                        00            .byte	0
14301 3384                        00            .byte	0
14302 3385                        00            .byte	0
14303 3386                        00            .byte	0
14304                                           ! 1459  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14305 3387                        00            .byte	0
14306 3388                        00            .byte	0
14307 3389                        00            .byte	0
14308 338A                        00            .byte	0
14309 338B                        00            .byte	0
14310 338C                        7E            .byte	$7E
14311 338D                        D8            .byte	$D8
14312 338E                        D8            .byte	$D8
14313 338F                        D8            .byte	$D8
14314 3390                        D8            .byte	$D8
14315 3391                        D8            .byte	$D8
14316 3392                        70            .byte	$70
14317 3393                        00            .byte	0
14318 3394                        00            .byte	0
14319 3395                        00            .byte	0
14320 3396                        00            .byte	0
14321                                           ! 1460  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14322 3397                        00            .byte	0
14323 3398                        00            .byte	0
14324 3399                        00            .byte	0
14325 339A                        00            .byte	0
14326 339B                        66            .byte	$66
14327 339C                        66            .byte	$66
14328 339D                        66            .byte	$66
14329 339E                        66            .byte	$66
14330 339F                        66            .byte	$66
14331 33A0                        7C            .byte	$7C
14332 33A1                        60            .byte	$60
14333 33A2                        60            .byte	$60
14334 33A3                        C0            .byte	$C0
14335 33A4                        00            .byte	0
14336 33A5                        00            .byte	0
14337 33A6                        00            .byte	0
14338                                           ! 1461  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14339 33A7                        00            .byte	0
14340 33A8                        00            .byte	0
14341 33A9                        00            .byte	0
14342 33AA                        00            .byte	0
14343 33AB                        76            .byte	$76
14344 33AC                        DC            .byte	$DC
14345 33AD                        18            .byte	$18
14346 33AE                        18            .byte	$18
14347 33AF                        18            .byte	$18
14348 33B0                        18            .byte	$18
14349 33B1                        18            .byte	$18
14350 33B2                        18            .byte	$18
14351 33B3                        00            .byte	0
14352 33B4                        00            .byte	0
14353 33B5                        00            .byte	0
14354 33B6                        00            .byte	0
14355                                           ! 1462  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14356 33B7                        00            .byte	0
14357 33B8                        00            .byte	0
14358 33B9                        00            .byte	0
14359 33BA                        7E            .byte	$7E
14360 33BB                        18            .byte	$18
14361 33BC                        3C            .byte	$3C
14362 33BD                        66            .byte	$66
14363 33BE                        66            .byte	$66
14364 33BF                        66            .byte	$66
14365 33C0                        3C            .byte	$3C
14366 33C1                        18            .byte	$18
14367 33C2                        7E            .byte	$7E
14368 33C3                        00            .byte	0
14369 33C4                        00            .byte	0
14370 33C5                        00            .byte	0
14371 33C6                        00            .byte	0
14372                                           ! 1463  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14373 33C7                        00            .byte	0
14374 33C8                        00            .byte	0
14375 33C9                        00            .byte	0
14376 33CA                        38            .byte	$38
14377 33CB                        6C            .byte	$6C
14378 33CC                        C6            .byte	$C6
14379 33CD                        C6            .byte	$C6
14380 33CE                        FE            .byte	$FE
14381 33CF                        C6            .byte	$C6
14382 33D0                        C6            .byte	$C6
14383 33D1                        6C            .byte	$6C
14384 33D2                        38            .byte	$38
14385 33D3                        00            .byte	0
14386 33D4                        00            .byte	0
14387 33D5                        00            .byte	0
14388 33D6                        00            .byte	0
14389                                           ! 1464  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14390 33D7                        00            .byte	0
14391 33D8                        00            .byte	0
14392 33D9                        38            .byte	$38
14393 33DA                        6C            .byte	$6C
14394 33DB                        C6            .byte	$C6
14395 33DC                        C6            .byte	$C6
14396 33DD                        C6            .byte	$C6
14397 33DE                        6C            .byte	$6C
14398 33DF                        6C            .byte	$6C
14399 33E0                        6C            .byte	$6C
14400 33E1                        6C            .byte	$6C
14401 33E2                        EE            .byte	$EE
14402 33E3                        00            .byte	0
14403 33E4                        00            .byte	0
14404 33E5                        00            .byte	0
14405 33E6                        00            .byte	0
14406                                           ! 1465  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14407 33E7                        00            .byte	0
14408 33E8                        00            .byte	0
14409 33E9                        1E            .byte	$1E
14410 33EA                        30            .byte	$30
14411 33EB                        18            .byte	$18
14412 33EC                        0C            .byte	$C
14413 33ED                        3E            .byte	$3E
14414 33EE                        66            .byte	$66
14415 33EF                        66            .byte	$66
14416 33F0                        66            .byte	$66
14417 33F1                        66            .byte	$66
14418 33F2                        3C            .byte	$3C
14419 33F3                        00            .byte	0
14420 33F4                        00            .byte	0
14421 33F5                        00            .byte	0
14422 33F6                        00            .byte	0
14423                                           ! 1466  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14424 33F7                        00            .byte	0
14425 33F8                        00            .byte	0
14426 33F9                        00            .byte	0
14427 33FA                        00            .byte	0
14428 33FB                        00            .byte	0
14429 33FC                        7E            .byte	$7E
14430 33FD                        DB            .byte	$DB
14431 33FE                        DB            .byte	$DB
14432 33FF                        DB            .byte	$DB
14433 3400                        7E            .byte	$7E
14434 3401                        00            .byte	0
14435 3402                        00            .byte	0
14436 3403                        00            .byte	0
14437 3404                        00            .byte	0
14438 3405                        00            .byte	0
14439 3406                        00            .byte	0
14440                                           ! 1467  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14441 3407                        00            .byte	0
14442 3408                        00            .byte	0
14443 3409                        00            .byte	0
14444 340A                        03            .byte	3
14445 340B                        06            .byte	6
14446 340C                        7E            .byte	$7E
14447 340D                        DB            .byte	$DB
14448 340E                        DB            .byte	$DB
14449 340F                        F3            .byte	$F3
14450 3410                        7E            .byte	$7E
14451 3411                        60            .byte	$60
14452 3412                        C0            .byte	$C0
14453 3413                        00            .byte	0
14454 3414                        00            .byte	0
14455 3415                        00            .byte	0
14456 3416                        00            .byte	0
14457                                           ! 1468  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14458 3417                        00            .byte	0
14459 3418                        00            .byte	0
14460 3419                        1C            .byte	$1C
14461 341A                        30            .byte	$30
14462 341B                        60            .byte	$60
14463 341C                        60            .byte	$60
14464 341D                        7C            .byte	$7C
14465 341E                        60            .byte	$60
14466 341F                        60            .byte	$60
14467 3420                        60            .byte	$60
14468 3421                        30            .byte	$30
14469 3422                        1C            .byte	$1C
14470 3423                        00            .byte	0
14471 3424                        00            .byte	0
14472 3425                        00            .byte	0
14473 3426                        00            .byte	0
14474                                           ! 1469  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14475 3427                        00            .byte	0
14476 3428                        00            .byte	0
14477 3429                        00            .byte	0
14478 342A                        7C            .byte	$7C
14479 342B                        C6            .byte	$C6
14480 342C                        C6            .byte	$C6
14481 342D                        C6            .byte	$C6
14482 342E                        C6            .byte	$C6
14483 342F                        C6            .byte	$C6
14484 3430                        C6            .byte	$C6
14485 3431                        C6            .byte	$C6
14486 3432                        C6            .byte	$C6
14487 3433                        00            .byte	0
14488 3434                        00            .byte	0
14489 3435                        00            .byte	0
14490 3436                        00            .byte	0
14491                                           ! 1470  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14492 3437                        00            .byte	0
14493 3438                        00            .byte	0
14494 3439                        00            .byte	0
14495 343A                        00            .byte	0
14496 343B                        FE            .byte	$FE
14497 343C                        00            .byte	0
14498 343D                        00            .byte	0
14499 343E                        FE            .byte	$FE
14500 343F                        00            .byte	0
14501 3440                        00            .byte	0
14502 3441                        FE            .byte	$FE
14503 3442                        00            .byte	0
14504 3443                        00            .byte	0
14505 3444                        00            .byte	0
14506 3445                        00            .byte	0
14507 3446                        00            .byte	0
14508                                           ! 1471  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14509 3447                        00            .byte	0
14510 3448                        00            .byte	0
14511 3449                        00            .byte	0
14512 344A                        00            .byte	0
14513 344B                        18            .byte	$18
14514 344C                        18            .byte	$18
14515 344D                        7E            .byte	$7E
14516 344E                        18            .byte	$18
14517 344F                        18            .byte	$18
14518 3450                        00            .byte	0
14519 3451                        00            .byte	0
14520 3452                        FF            .byte	$FF
14521 3453                        00            .byte	0
14522 3454                        00            .byte	0
14523 3455                        00            .byte	0
14524 3456                        00            .byte	0
14525                                           ! 1472  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14526 3457                        00            .byte	0
14527 3458                        00            .byte	0
14528 3459                        00            .byte	0
14529 345A                        30            .byte	$30
14530 345B                        18            .byte	$18
14531 345C                        0C            .byte	$C
14532 345D                        06            .byte	6
14533 345E                        0C            .byte	$C
14534 345F                        18            .byte	$18
14535 3460                        30            .byte	$30
14536 3461                        00            .byte	0
14537 3462                        7E            .byte	$7E
14538 3463                        00            .byte	0
14539 3464                        00            .byte	0
14540 3465                        00            .byte	0
14541 3466                        00            .byte	0
14542                                           ! 1473  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30,
14543 3467                        00            .byte	0
14544 3468                        00            .byte	0
14545 3469                        00            .byte	0
14546 346A                        0C            .byte	$C
14547 346B                        18            .byte	$18
14548                                           ! 1473  0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14549 346C                        30            .byte	$30
14550 346D                        60            .byte	$60
14551 346E                        30            .byte	$30
14552 346F                        18            .byte	$18
14553 3470                        0C            .byte	$C
14554 3471                        00            .byte	0
14555 3472                        7E            .byte	$7E
14556 3473                        00            .byte	0
14557 3474                        00            .byte	0
14558 3475                        00            .byte	0
14559 3476                        00            .byte	0
14560                                           ! 1474  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14561 3477                        00            .byte	0
14562 3478                        00            .byte	0
14563 3479                        0E            .byte	$E
14564 347A                        1B            .byte	$1B
14565 347B                        1B            .byte	$1B
14566 347C                        18            .byte	$18
14567 347D                        18            .byte	$18
14568 347E                        18            .byte	$18
14569 347F                        18            .byte	$18
14570 3480                        18            .byte	$18
14571 3481                        18            .byte	$18
14572 3482                        18            .byte	$18
14573 3483                        18            .byte	$18
14574 3484                        18            .byte	$18
14575 3485                        18            .byte	$18
14576 3486                        18            .byte	$18
14577                                           ! 1475  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14578 3487                        18            .byte	$18
14579 3488                        18            .byte	$18
14580 3489                        18            .byte	$18
14581 348A                        18            .byte	$18
14582 348B                        18            .byte	$18
14583 348C                        18            .byte	$18
14584 348D                        18            .byte	$18
14585 348E                        18            .byte	$18
14586 348F                        D8            .byte	$D8
14587 3490                        D8            .byte	$D8
14588 3491                        D8            .byte	$D8
14589 3492                        70            .byte	$70
14590 3493                        00            .byte	0
14591 3494                        00            .byte	0
14592 3495                        00            .byte	0
14593 3496                        00            .byte	0
14594                                           ! 1476  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14595 3497                        00            .byte	0
14596 3498                        00            .byte	0
14597 3499                        00            .byte	0
14598 349A                        00            .byte	0
14599 349B                        18            .byte	$18
14600 349C                        18            .byte	$18
14601 349D                        00            .byte	0
14602 349E                        7E            .byte	$7E
14603 349F                        00            .byte	0
14604 34A0                        18            .byte	$18
14605 34A1                        18            .byte	$18
14606 34A2                        00            .byte	0
14607 34A3                        00            .byte	0
14608 34A4                        00            .byte	0
14609 34A5                        00            .byte	0
14610 34A6                        00            .byte	0
14611                                           ! 1477  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14612 34A7                        00            .byte	0
14613 34A8                        00            .byte	0
14614 34A9                        00            .byte	0
14615 34AA                        00            .byte	0
14616 34AB                        00            .byte	0
14617 34AC                        76            .byte	$76
14618 34AD                        DC            .byte	$DC
14619 34AE                        00            .byte	0
14620 34AF                        76            .byte	$76
14621 34B0                        DC            .byte	$DC
14622 34B1                        00            .byte	0
14623 34B2                        00            .byte	0
14624 34B3                        00            .byte	0
14625 34B4                        00            .byte	0
14626 34B5                        00            .byte	0
14627 34B6                        00            .byte	0
14628                                           ! 1478  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14629 34B7                        00            .byte	0
14630 34B8                        38            .byte	$38
14631 34B9                        6C            .byte	$6C
14632 34BA                        6C            .byte	$6C
14633 34BB                        38            .byte	$38
14634 34BC                        00            .byte	0
14635 34BD                        00            .byte	0
14636 34BE                        00            .byte	0
14637 34BF                        00            .byte	0
14638 34C0                        00            .byte	0
14639 34C1                        00            .byte	0
14640 34C2                        00            .byte	0
14641 34C3                        00            .byte	0
14642 34C4                        00            .byte	0
14643 34C5                        00            .byte	0
14644 34C6                        00            .byte	0
14645                                           ! 1479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14646 34C7                        00            .byte	0
14647 34C8                        00            .byte	0
14648 34C9                        00            .byte	0
14649 34CA                        00            .byte	0
14650 34CB                        00            .byte	0
14651 34CC                        00            .byte	0
14652 34CD                        00            .byte	0
14653 34CE                        18            .byte	$18
14654 34CF                        18            .byte	$18
14655 34D0                        00            .byte	0
14656 34D1                        00            .byte	0
14657 34D2                        00            .byte	0
14658 34D3                        00            .byte	0
14659 34D4                        00            .byte	0
14660 34D5                        00            .byte	0
14661 34D6                        00            .byte	0
14662                                           ! 1480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14663 34D7                        00            .byte	0
14664 34D8                        00            .byte	0
14665 34D9                        00            .byte	0
14666 34DA                        00            .byte	0
14667 34DB                        00            .byte	0
14668 34DC                        00            .byte	0
14669 34DD                        00            .byte	0
14670 34DE                        00            .byte	0
14671 34DF                        18            .byte	$18
14672 34E0                        00            .byte	0
14673 34E1                        00            .byte	0
14674 34E2                        00            .byte	0
14675 34E3                        00            .byte	0
14676 34E4                        00            .byte	0
14677 34E5                        00            .byte	0
14678 34E6                        00            .byte	0
14679                                           ! 1481  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14680 34E7                        00            .byte	0
14681 34E8                        0F            .byte	$F
14682 34E9                        0C            .byte	$C
14683 34EA                        0C            .byte	$C
14684 34EB                        0C            .byte	$C
14685 34EC                        0C            .byte	$C
14686 34ED                        0C            .byte	$C
14687 34EE                        EC            .byte	$EC
14688 34EF                        6C            .byte	$6C
14689 34F0                        6C            .byte	$6C
14690 34F1                        3C            .byte	$3C
14691 34F2                        1C            .byte	$1C
14692 34F3                        00            .byte	0
14693 34F4                        00            .byte	0
14694 34F5                        00            .byte	0
14695 34F6                        00            .byte	0
14696                                           ! 1482  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14697 34F7                        00            .byte	0
14698 34F8                        D8            .byte	$D8
14699 34F9                        6C            .byte	$6C
14700 34FA                        6C            .byte	$6C
14701 34FB                        6C            .byte	$6C
14702 34FC                        6C            .byte	$6C
14703 34FD                        6C            .byte	$6C
14704 34FE                        00            .byte	0
14705 34FF                        00            .byte	0
14706 3500                        00            .byte	0
14707 3501                        00            .byte	0
14708 3502                        00            .byte	0
14709 3503                        00            .byte	0
14710 3504                        00            .byte	0
14711 3505                        00            .byte	0
14712 3506                        00            .byte	0
14713                                           ! 1483  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14714 3507                        00            .byte	0
14715 3508                        70            .byte	$70
14716 3509                        D8            .byte	$D8
14717 350A                        30            .byte	$30
14718 350B                        60            .byte	$60
14719 350C                        C8            .byte	$C8
14720 350D                        F8            .byte	$F8
14721 350E                        00            .byte	0
14722 350F                        00            .byte	0
14723 3510                        00            .byte	0
14724 3511                        00            .byte	0
14725 3512                        00            .byte	0
14726 3513                        00            .byte	0
14727 3514                        00            .byte	0
14728 3515                        00            .byte	0
14729 3516                        00            .byte	0
14730                                           ! 1484  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14731 3517                        00            .byte	0
14732 3518                        00            .byte	0
14733 3519                        00            .byte	0
14734 351A                        00            .byte	0
14735 351B                        7C            .byte	$7C
14736 351C                        7C            .byte	$7C
14737 351D                        7C            .byte	$7C
14738 351E                        7C            .byte	$7C
14739 351F                        7C            .byte	$7C
14740 3520                        7C            .byte	$7C
14741 3521                        7C            .byte	$7C
14742 3522                        00            .byte	0
14743 3523                        00            .byte	0
14744 3524                        00            .byte	0
14745 3525                        00            .byte	0
14746 3526                        00            .byte	0
14747                                           ! 1485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
14748 3527                        00            .byte	0
14749 3528                        00            .byte	0
14750 3529                        00            .byte	0
14751 352A                        00            .byte	0
14752 352B                        00            .byte	0
14753 352C                        00            .byte	0
14754 352D                        00            .byte	0
14755 352E                        00            .byte	0
14756 352F                        00            .byte	0
14757 3530                        00            .byte	0
14758 3531                        00            .byte	0
14759 3532                        00            .byte	0
14760 3533                        00            .byte	0
14761 3534                        00            .byte	0
14762 3535                        00            .byte	0
14763                                           ! 1486 };
14764 3536                        00            .byte	0
14765                                           !BCC_EOS
14766                                           ! 1487 static Bit8u vgafont14alt[1]={0x00};
14767                       00003537            _vgafont14alt:
14768 3537                        00            .byte	0
14769                                           !BCC_EOS
14770                                           ! 1488 static Bit8u vgafont16alt[1]={0x00};
14771                       00003538            _vgafont16alt:
14772 3538                        00            .byte	0
14773                                           !BCC_EOS
14774                                           ! 1489 #asm
14775                                           !BCC_ASM
14776                       00003539            init_vga_card:
14777                                           ;; switch to color mode and enable CPU access 480 lines
14778 3539           BA                   03C2    mov dx, #0x3C2
14779 353C           B0                     C3    mov al, #0xC3
14780 353E           EE                           outb dx,al
14781                                           ;; more than 64k 3C4/04
14782 353F           BA                   03C4    mov dx, #0x3C4
14783 3542           B0                     04    mov al, #0x04
14784 3544           EE                           outb dx,al
14785 3545           BA                   03C5    mov dx, #0x3C5
14786 3548           B0                     02    mov al, #0x02
14787 354A           EE                           outb dx,al
14788 354B           BB                   3555    mov bx, #msg_vga_init
14789 354E           53                           push bx
14790 354F           E8         4632              call _printf
14791 3552           44                           inc sp
14792 3553           44                           inc sp
14793 3554           C3                           ret
14794                       00003555            msg_vga_init:
14795 3555                        56            .ascii "VGABios $Id: vgabios.c,v 1.69 2009/04/07 18:18:20 vruppert Exp $"
14796 3595                        0D            .byte 0x0d,0x0a,0x00
14797                                           ! 1511 endasm
14798                                           !BCC_ENDASM
14799                                           ! 1512 #asm
14800                                           !BCC_ASM
14801                       00003598            init_bios_area:
14802 3598           1E                           push ds
14803 3599           B8                   0040    mov ax, # 0x40
14804 359C           8ED8                         mov ds, ax
14805                                           ;; init detected hardware BIOS Area
14806 359E           BB                   0010    mov bx, # 0x10
14807 35A1           8B07                         mov ax, [bx]
14808 35A3           25                   FFCF    and ax, #0xffcf
14809                                           ;; set 80x25 color (not clear from RBIL but usual)
14810 35A6           0D                   0020    or ax, #0x0020
14811 35A9           8907                         mov [bx], ax
14812                                           ;; Just for the first int10 find its children
14813                                           ;; the default char height
14814 35AB           BB                   0085    mov bx, # 0x85
14815 35AE           B0                     10    mov al, #0x10
14816 35B0           8807                         mov [bx], al
14817                                           ;; Clear the screen
14818 35B2           BB                   0087    mov bx, # 0x87
14819 35B5           B0                     60    mov al, #0x60
14820 35B7           8807                         mov [bx], al
14821                                           ;; Set the basic screen we have
14822 35B9           BB                   0088    mov bx, # 0x88
14823 35BC           B0                     F9    mov al, #0xf9
14824 35BE           8807                         mov [bx], al
14825                                           ;; Set the basic modeset options
14826 35C0           BB                   0089    mov bx, # 0x89
14827 35C3           B0                     51    mov al, #0x51
14828 35C5           8807                         mov [bx], al
14829                                           ;; Set the default MSR
14830 35C7           BB                   0065    mov bx, # 0x65
14831 35CA           B0                     09    mov al, #0x09
14832 35CC           8807                         mov [bx], al
14833 35CE           1F                           pop ds
14834 35CF           C3                           ret
14835                       000035D0            _video_save_pointer_table:
14836 35D0                      0267              .word _video_param_table
14837 35D2                      C000              .word 0xc000
14838 35D4                      0000              .word 0
14839 35D6                      0000              .word 0
14840 35D8                      0000              .word 0
14841 35DA                      0000              .word 0
14842 35DC                      0000              .word 0
14843 35DE                      0000              .word 0
14844 35E0                      0000              .word 0
14845 35E2                      0000              .word 0
14846 35E4                      0000              .word 0
14847 35E6                      0000              .word 0
14848 35E8                      0000              .word 0
14849 35EA                      0000              .word 0
14850                                           ! 1562 endasm
14851                                           !BCC_ENDASM
14852                                           ! 1563 static void display_splash_screen()
14853                                           ! 1564 {
14854                                           
14855                       000035EC            _display_splash_screen:
14856                                           ! 1565 }
14857 35EC           C3                         ret
14858                                           ! 1566 static void display_info()
14859                                           ! 1567 {
14860                       000035ED            _display_info:
14861                                           ! 1568 #asm
14862                                           !BCC_ASM
14863 35ED           B8                   C000   mov ax,#0xc000
14864 35F0           8ED8                        mov ds,ax
14865 35F2           BE                   0022   mov si,#vgabios_name
14866 35F5           E8         0013             call _display_string
14867 35F8           BE                   003E   mov si,#vgabios_version
14868 35FB           E8         000D             call _display_string
14869                                            ;;mov si,#vgabios_copyright
14870                                            ;;call _display_string
14871                                            ;;mov si,#crlf
14872                                            ;;call _display_string
14873 35FE           BE                   007D   mov si,#vgabios_license
14874 3601           E8         0007             call _display_string
14875 3604           BE                   00B2   mov si,#vgabios_website
14876 3607           E8         0001             call _display_string
14877                                           ! 1583 endasm
14878                                           !BCC_ENDASM
14879                                           ! 1584 }
14880 360A           C3                         ret
14881                                           ! 1585 static void display_string()
14882                                           ! 1586 {
14883                       0000360B            _display_string:
14884                                           ! 1587 #asm
14885                                           !BCC_ASM
14886 360B           8CD8                        mov ax,ds
14887 360D           8EC0                        mov es,ax
14888 360F           89F7                        mov di,si
14889 3611           31C9                        xor cx,cx
14890 3613           F7D1                        not cx
14891 3615           30C0                        xor al,al
14892 3617           FC                          cld
14893 3618           F2                          repne
14894 3619           AE                           scasb
14895 361A           F7D1                        not cx
14896 361C           49                          dec cx
14897 361D           51                          push cx
14898 361E           B8                   0300   mov ax,#0x0300
14899 3621           BB                   0000   mov bx,#0x0000
14900 3624           CD                     10   int #0x10
14901 3626           59                          pop cx
14902 3627           B8                   1301   mov ax,#0x1301
14903 362A           BB                   000B   mov bx,#0x000b
14904 362D           89F5                        mov bp,si
14905 362F           CD                     10   int #0x10
14906                                           ! 1608 endasm
14907                                           !BCC_ENDASM
14908                                           ! 1609 }
14909 3631           C3                         ret
14910                                           ! 1610 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
14911                                           ! 1611   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
14912                       00003632            _int10_func:
14913                                           !BCC_EOS
14914                                           ! 1612 {
14915                                           ! 1613  switch(( AX >> 8 ))
14916 3632           55                         push	bp
14917 3633           89E5                       mov	bp,sp
14918                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
14919 3635           8B46         12            mov	ax,$12[bp]
14920 3638           88E0                       mov	al,ah
14921 363A           30E4                       xor	ah,ah
14922                                           ! 1614   {
14923 363C           E9         0425            br 	.3
14924                                           ! 1615    case 0x00:
14925                                           ! 1616      biosfn_set_video_mode(( AX & 0x00ff ));
14926                       0000363F            .4:
14927                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14928 363F           8A46         12            mov	al,$12[bp]
14929                                           ! Debug: list unsigned char = al+0 (used reg = )
14930 3642           30E4                       xor	ah,ah
14931 3644           50                         push	ax
14932                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
14933 3645           E8         046B            call	_biosfn_set_video_mode
14934 3648           44                         inc	sp
14935 3649           44                         inc	sp
14936                                           !BCC_EOS
14937                                           ! 1617      switch(( AX & 0x00ff )&0x7F)
14938                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14939 364A           8A46         12            mov	al,$12[bp]
14940                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
14941 364D           24                     7F  and	al,*$7F
14942                                           ! 1618       {case 6:
14943 364F           EB           24            jmp .7
14944                                           ! 1619         AX = ((AX & 0xff00) | (0x3F));
14945                       00003651            .8:
14946                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14947 3651           8B46         12            mov	ax,$12[bp]
14948 3654           30C0                       xor	al,al
14949                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
14950 3656           0C                     3F  or	al,*$3F
14951                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14952 3658           8946         12            mov	$12[bp],ax
14953                                           !BCC_EOS
14954                                           ! 1620         break;
14955 365B           EB           3D            jmp .5
14956                                           !BCC_EOS
14957                                           ! 1621        case 0:
14958                                           ! 1622        case 1:
14959                       0000365D            .9:
14960                                           ! 1623        case 2:
14961                       0000365D            .A:
14962                                           ! 1624        case 3:
14963                       0000365D            .B:
14964                                           ! 1625        case 4:
14965                       0000365D            .C:
14966                                           ! 1626        case 5:
14967                       0000365D            .D:
14968                                           ! 1627        case 7:
14969                       0000365D            .E:
14970                                           ! 1628         AX = ((AX & 0xff00) | (0x30));
14971                       0000365D            .F:
14972                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14973 365D           8B46         12            mov	ax,$12[bp]
14974 3660           30C0                       xor	al,al
14975                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
14976 3662           0C                     30  or	al,*$30
14977                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14978 3664           8946         12            mov	$12[bp],ax
14979                                           !BCC_EOS
14980                                           ! 1629         break;
14981 3667           EB           31            jmp .5
14982                                           !BCC_EOS
14983                                           ! 1630       default:
14984                                           ! 1631         AX = ((AX & 0xff00) | (0x20));
14985                       00003669            .10:
14986                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14987 3669           8B46         12            mov	ax,$12[bp]
14988 366C           30C0                       xor	al,al
14989                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
14990 366E           0C                     20  or	al,*$20
14991                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14992 3670           8946         12            mov	$12[bp],ax
14993                                           !BCC_EOS
14994                                           ! 1632       }
14995                                           ! 1633      break;
14996 3673           EB           25            jmp .5
14997                       00003675            .7:
14998 3675           2C                     00  sub	al,*0
14999 3677           72           F0            jb 	.10
15000 3679           3C                     07  cmp	al,*7
15001 367B           77           1B            ja  	.11
15002 367D           30E4                       xor	ah,ah
15003 367F           D1E0                       shl	ax,*1
15004 3681           89C3                       mov	bx,ax
15005 3683           2E                         seg	cs
15006 3684           FFA7       3688            br	.12[bx]
15007                       00003688            .12:
15008 3688                      365D            .word	.9
15009 368A                      365D            .word	.A
15010 368C                      365D            .word	.B
15011 368E                      365D            .word	.C
15012 3690                      365D            .word	.D
15013 3692                      365D            .word	.E
15014 3694                      3651            .word	.8
15015 3696                      365D            .word	.F
15016                       00003698            .11:
15017 3698           EB           CF            jmp	.10
15018                       0000369A            .5:
15019 369A           E9         0414            br 	.1
15020                                           !BCC_EOS
15021                                           ! 1634    case 0x01:
15022                                           ! 1635      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15023                       0000369D            .13:
15024                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15025 369D           8A46         10            mov	al,$10[bp]
15026                                           ! Debug: list unsigned char = al+0 (used reg = )
15027 36A0           30E4                       xor	ah,ah
15028 36A2           50                         push	ax
15029                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15030 36A3           8B46         10            mov	ax,$10[bp]
15031 36A6           88E0                       mov	al,ah
15032 36A8           30E4                       xor	ah,ah
15033                                           ! Debug: list unsigned int = ax+0 (used reg = )
15034 36AA           50                         push	ax
15035                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15036 36AB           E8         0A8D            call	_biosfn_set_cursor_shape
15037 36AE           83C4                   04  add	sp,*4
15038                                           !BCC_EOS
15039                                           ! 1636      break;
15040 36B1           E9         03FD            br 	.1
15041                                           !BCC_EOS
15042                                           ! 1637    case 0x02:
15043                                           ! 1638      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15044                       000036B4            .14:
15045                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15046 36B4           FF76         0E            push	$E[bp]
15047                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15048 36B7           8B46         0C            mov	ax,$C[bp]
15049 36BA           88E0                       mov	al,ah
15050 36BC           30E4                       xor	ah,ah
15051                                           ! Debug: list unsigned int = ax+0 (used reg = )
15052 36BE           50                         push	ax
15053                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15054 36BF           E8         0B94            call	_biosfn_set_cursor_pos
15055 36C2           83C4                   04  add	sp,*4
15056                                           !BCC_EOS
15057                                           ! 1639      break;
15058 36C5           E9         03E9            br 	.1
15059                                           !BCC_EOS
15060                                           ! 1640    case 0x03:
15061                                           ! 1641      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15062                       000036C8            .15:
15063                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15064 36C8           8D5E         0E            lea	bx,$E[bp]
15065 36CB           53                         push	bx
15066                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15067 36CC           8D5E         10            lea	bx,$10[bp]
15068 36CF           53                         push	bx
15069                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15070 36D0           8B46         0C            mov	ax,$C[bp]
15071 36D3           88E0                       mov	al,ah
15072 36D5           30E4                       xor	ah,ah
15073                                           ! Debug: list unsigned int = ax+0 (used reg = )
15074 36D7           50                         push	ax
15075                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15076 36D8           E8         0C7B            call	_biosfn_get_cursor_pos
15077 36DB           83C4                   06  add	sp,*6
15078                                           !BCC_EOS
15079                                           ! 1642      break;
15080 36DE           E9         03D0            br 	.1
15081                                           !BCC_EOS
15082                                           ! 1643    case 0x04:
15083                                           ! 1644      AX=0x00;
15084                       000036E1            .16:
15085                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15086 36E1           31C0                       xor	ax,ax
15087 36E3           8946         12            mov	$12[bp],ax
15088                                           !BCC_EOS
15089                                           ! 1645      BX=0x00;
15090                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15091 36E6           31C0                       xor	ax,ax
15092 36E8           8946         0C            mov	$C[bp],ax
15093                                           !BCC_EOS
15094                                           ! 1646      CX=0x00;
15095                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15096 36EB           31C0                       xor	ax,ax
15097 36ED           8946         10            mov	$10[bp],ax
15098                                           !BCC_EOS
15099                                           ! 1647      DX=0x00;
15100                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15101 36F0           31C0                       xor	ax,ax
15102 36F2           8946         0E            mov	$E[bp],ax
15103                                           !BCC_EOS
15104                                           ! 1648      bre
15105                                           ! 1648 ak;
15106 36F5           E9         03B9            br 	.1
15107                                           !BCC_EOS
15108                                           ! 1649    case 0x05:
15109                                           ! 1650      biosfn_set_active_page(( AX & 0x00ff ));
15110                       000036F8            .17:
15111                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15112 36F8           8A46         12            mov	al,$12[bp]
15113                                           ! Debug: list unsigned char = al+0 (used reg = )
15114 36FB           30E4                       xor	ah,ah
15115 36FD           50                         push	ax
15116                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15117 36FE           E8         0CCA            call	_biosfn_set_active_page
15118 3701           44                         inc	sp
15119 3702           44                         inc	sp
15120                                           !BCC_EOS
15121                                           ! 1651      break;
15122 3703           E9         03AB            br 	.1
15123                                           !BCC_EOS
15124                                           ! 1652    case 0x06:
15125                                           ! 1653      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15126                       00003706            .18:
15127                                           ! Debug: list int = const 1 (used reg = )
15128 3706           B8                   0001  mov	ax,*1
15129 3709           50                         push	ax
15130                                           ! Debug: list int = const $FF (used reg = )
15131 370A           B8                   00FF  mov	ax,#$FF
15132 370D           50                         push	ax
15133                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15134 370E           8A46         0E            mov	al,$E[bp]
15135                                           ! Debug: list unsigned char = al+0 (used reg = )
15136 3711           30E4                       xor	ah,ah
15137 3713           50                         push	ax
15138                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15139 3714           8B46         0E            mov	ax,$E[bp]
15140 3717           88E0                       mov	al,ah
15141 3719           30E4                       xor	ah,ah
15142                                           ! Debug: list unsigned int = ax+0 (used reg = )
15143 371B           50                         push	ax
15144                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15145 371C           8A46         10            mov	al,$10[bp]
15146                                           ! Debug: list unsigned char = al+0 (used reg = )
15147 371F           30E4                       xor	ah,ah
15148 3721           50                         push	ax
15149                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15150 3722           8B46         10            mov	ax,$10[bp]
15151 3725           88E0                       mov	al,ah
15152 3727           30E4                       xor	ah,ah
15153                                           ! Debug: list unsigned int = ax+0 (used reg = )
15154 3729           50                         push	ax
15155                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15156 372A           8B46         0C            mov	ax,$C[bp]
15157 372D           88E0                       mov	al,ah
15158 372F           30E4                       xor	ah,ah
15159                                           ! Debug: list unsigned int = ax+0 (used reg = )
15160 3731           50                         push	ax
15161                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15162 3732           8A46         12            mov	al,$12[bp]
15163                                           ! Debug: list unsigned char = al+0 (used reg = )
15164 3735           30E4                       xor	ah,ah
15165 3737           50                         push	ax
15166                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15167 3738           E8         1113            call	_biosfn_scroll
15168 373B           83C4                   10  add	sp,*$10
15169                                           !BCC_EOS
15170                                           ! 1654      break;
15171 373E           E9         0370            br 	.1
15172                                           !BCC_EOS
15173                                           ! 1655    case 0x07:
15174                                           ! 1656      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15175                       00003741            .19:
15176                                           ! Debug: list int = const 0 (used reg = )
15177 3741           31C0                       xor	ax,ax
15178 3743           50                         push	ax
15179                                           ! Debug: list int = const $FF (used reg = )
15180 3744           B8                   00FF  mov	ax,#$FF
15181 3747           50                         push	ax
15182                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15183 3748           8A46         0E            mov	al,$E[bp]
15184                                           ! Debug: list unsigned char = al+0 (used reg = )
15185 374B           30E4                       xor	ah,ah
15186 374D           50                         push	ax
15187                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15188 374E           8B46         0E            mov	ax,$E[bp]
15189 3751           88E0                       mov	al,ah
15190 3753           30E4                       xor	ah,ah
15191                                           ! Debug: list unsigned int = ax+0 (used reg = )
15192 3755           50                         push	ax
15193                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15194 3756           8A46         10            mov	al,$10[bp]
15195                                           ! Debug: list unsigned char = al+0 (used reg = )
15196 3759           30E4                       xor	ah,ah
15197 375B           50                         push	ax
15198                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15199 375C           8B46         10            mov	ax,$10[bp]
15200 375F           88E0                       mov	al,ah
15201 3761           30E4                       xor	ah,ah
15202                                           ! Debug: list unsigned int = ax+0 (used reg = )
15203 3763           50                         push	ax
15204                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15205 3764           8B46         0C            mov	ax,$C[bp]
15206 3767           88E0                       mov	al,ah
15207 3769           30E4                       xor	ah,ah
15208                                           ! Debug: list unsigned int = ax+0 (used reg = )
15209 376B           50                         push	ax
15210                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15211 376C           8A46         12            mov	al,$12[bp]
15212                                           ! Debug: list unsigned char = al+0 (used reg = )
15213 376F           30E4                       xor	ah,ah
15214 3771           50                         push	ax
15215                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15216 3772           E8         10D9            call	_biosfn_scroll
15217 3775           83C4                   10  add	sp,*$10
15218                                           !BCC_EOS
15219                                           ! 1657      break;
15220 3778           E9         0336            br 	.1
15221                                           !BCC_EOS
15222                                           ! 1658    case 0x08:
15223                                           ! 1659      biosfn_read_char_attr(( BX >> 8 ),&AX);
15224                       0000377B            .1A:
15225                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15226 377B           8D5E         12            lea	bx,$12[bp]
15227 377E           53                         push	bx
15228                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15229 377F           8B46         0C            mov	ax,$C[bp]
15230 3782           88E0                       mov	al,ah
15231 3784           30E4                       xor	ah,ah
15232                                           ! Debug: list unsigned int = ax+0 (used reg = )
15233 3786           50                         push	ax
15234                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15235 3787           E8         17CA            call	_biosfn_read_char_attr
15236 378A           83C4                   04  add	sp,*4
15237                                           !BCC_EOS
15238                                           ! 1660      break;
15239 378D           E9         0321            br 	.1
15240                                           !BCC_EOS
15241                                           ! 1661    case 0x09:
15242                                           ! 1662      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15243                       00003790            .1B:
15244                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15245 3790           FF76         10            push	$10[bp]
15246                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15247 3793           8A46         0C            mov	al,$C[bp]
15248                                           ! Debug: list unsigned char = al+0 (used reg = )
15249 3796           30E4                       xor	ah,ah
15250 3798           50                         push	ax
15251                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15252 3799           8B46         0C            mov	ax,$C[bp]
15253 379C           88E0                       mov	al,ah
15254 379E           30E4                       xor	ah,ah
15255                                           ! Debug: list unsigned int = ax+0 (used reg = )
15256 37A0           50                         push	ax
15257                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15258 37A1           8A46         12            mov	al,$12[bp]
15259                                           ! Debug: list unsigned char = al+0 (used reg = )
15260 37A4           30E4                       xor	ah,ah
15261 37A6           50                         push	ax
15262                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15263 37A7           E8         1CF1            call	_biosfn_write_char_attr
15264 37AA           83C4                   08  add	sp,*8
15265                                           !BCC_EOS
15266                                           ! 1663      break;
15267 37AD           E9         0301            br 	.1
15268                                           !BCC_EOS
15269                                           ! 1664    case 0x0A:
15270                                           ! 1665      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15271                       000037B0            .1C:
15272                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15273 37B0           FF76         10            push	$10[bp]
15274                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15275 37B3           8A46         0C            mov	al,$C[bp]
15276                                           ! Debug: list unsigned char = al+0 (used reg = )
15277 37B6           30E4                       xor	ah,ah
15278 37B8           50                         push	ax
15279                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15280 37B9           8B46         0C            mov	ax,$C[bp]
15281 37BC           88E0                       mov	al,ah
15282 37BE           30E4                       xor	ah,ah
15283                                           ! Debug: list unsigned int = ax+0 (used reg = )
15284 37C0           50                         push	ax
15285                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15286 37C1           8A46         12            mov	al,$12[bp]
15287                                           ! Debug: list unsigned char = al+0 (used reg = )
15288 37C4           30E4                       xor	ah,ah
15289 37C6           50                         push	ax
15290                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15291 37C7           E8         1EC3            call	_biosfn_write_char_only
15292 37CA           83C4                   08  add	sp,*8
15293                                           !BCC_EOS
15294                                           ! 1666      break;
15295 37CD           E9         02E1            br 	.1
15296                                           !BCC_EOS
15297                                           ! 1667    case 0x0C:
15298                                           ! 1668      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15299                       000037D0            .1D:
15300                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15301 37D0           FF76         0E            push	$E[bp]
15302                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15303 37D3           FF76         10            push	$10[bp]
15304                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15305 37D6           8A46         12            mov	al,$12[bp]
15306                                           ! Debug: list unsigned char = al+0 (used reg = )
15307 37D9           30E4                       xor	ah,ah
15308 37DB           50                         push	ax
15309                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15310 37DC           8B46         0C            mov	ax,$C[bp]
15311 37DF           88E0                       mov	al,ah
15312 37E1           30E4                       xor	ah,ah
15313                                           ! Debug: list unsigned int = ax+0 (used reg = )
15314 37E3           50                         push	ax
15315                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15316 37E4           E8         2114            call	_biosfn_write_pixel
15317 37E7           83C4                   08  add	sp,*8
15318                                           !BCC_EOS
15319                                           ! 1669      break;
15320 37EA           E9         02C4            br 	.1
15321                                           !BCC_EOS
15322                                           ! 1670    case 0x0D:
15323                                           ! 1671      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15324                       000037ED            .1E:
15325                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15326 37ED           8D5E         12            lea	bx,$12[bp]
15327 37F0           53                         push	bx
15328                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15329 37F1           FF76         0E            push	$E[bp]
15330                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15331 37F4           FF76         10            push	$10[bp]
15332                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15333 37F7           8B46         0C            mov	ax,$C[bp]
15334 37FA           88E0                       mov	al,ah
15335 37FC           30E4                       xor	ah,ah
15336                                           ! Debug: list unsigned int = ax+0 (used reg = )
15337 37FE           50                         push	ax
15338                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15339 37FF           E8         2395            call	_biosfn_read_pixel
15340 3802           83C4                   08  add	sp,*8
15341                                           !BCC_EOS
15342                                           ! 1672      break;
15343 3805           E9         02A9            br 	.1
15344                                           !BCC_EOS
15345                                           ! 1673    case 0x0E:
15346                                           ! 1674      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15347                       00003808            .1F:
15348                                           ! Debug: list int = const 2 (used reg = )
15349 3808           B8                   0002  mov	ax,*2
15350 380B           50                         push	ax
15351                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15352 380C           8A46         0C            mov	al,$C[bp]
15353                                           ! Debug: list unsigned char = al+0 (used reg = )
15354 380F           30E4                       xor	ah,ah
15355 3811           50                         push	ax
15356                                           ! Debug: list int = const $FF (used reg = )
15357 3812           B8                   00FF  mov	ax,#$FF
15358 3815           50                         push	ax
15359                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15360 3816           8A46         12            mov	al,$12[bp]
15361                                           ! Debug: list unsigned char = al+0 (used reg = )
15362 3819           30E4                       xor	ah,ah
15363 381B           50                         push	ax
15364                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15365 381C           E8         257E            call	_biosfn_write_teletype
15366 381F           83C4                   08  add	sp,*8
15367                                           !BCC_EOS
15368                                           ! 1675      break;
15369 3822           E9         028C            br 	.1
15370                                           !BCC_EOS
15371                                           ! 1676    case 0x10:
15372                                           ! 1677      biosfn_perform_gray_scale_summing(BX,CX);
15373                       00003825            .20:
15374                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15375 3825           FF76         10            push	$10[bp]
15376                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15377 3828           FF76         0C            push	$C[bp]
15378                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15379 382B           E8         2BC0            call	_biosfn_perform_gray_scale_summing
15380 382E           83C4                   04  add	sp,*4
15381                                           !BCC_EOS
15382                                           ! 1678      break;
15383 3831           E9         027D            br 	.1
15384                                           !BCC_EOS
15385                                           ! 1679    case 0x11:
15386                                           ! 1680      switch(( AX & 0x00ff ))
15387                       00003834            .21:
15388                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15389 3834           8A46         12            mov	al,$12[bp]
15390                                           ! 1681       {
15391 3837           E9         00E1            br 	.24
15392                                           ! 1682        case 0x00:
15393                                           ! 1683        case 0x10:
15394                       0000383A            .25:
15395                                           ! 1684         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15396                       0000383A            .26:
15397                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15398 383A           8B46         0C            mov	ax,$C[bp]
15399 383D           88E0                       mov	al,ah
15400 383F           30E4                       xor	ah,ah
15401                                           ! Debug: list unsigned int = ax+0 (used reg = )
15402 3841           50                         push	ax
15403                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15404 3842           8A46         0C            mov	al,$C[bp]
15405                                           ! Debug: list unsigned char = al+0 (used reg = )
15406 3845           30E4                       xor	ah,ah
15407 3847           50                         push	ax
15408                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15409 3848           FF76         0E            push	$E[bp]
15410                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15411 384B           FF76         10            push	$10[bp]
15412                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15413 384E           FF76         08            push	8[bp]
15414                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15415 3851           FF76         16            push	$16[bp]
15416                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15417 3854           8A46         12            mov	al,$12[bp]
15418                                           ! Debug: list unsigned char = al+0 (used reg = )
15419 3857           30E4                       xor	ah,ah
15420 3859           50                         push	ax
15421                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15422 385A           E8         2E38            call	_biosfn_load_text_user_pat
15423 385D           83C4                   0E  add	sp,*$E
15424                                           !BCC_EOS
15425                                           ! 1685         break;
15426 3860           E9         010C            br 	.22
15427                                           !BCC_EOS
15428                                           ! 1686        case 0x01:
15429                                           ! 1687        case 0x11:
15430                       00003863            .27:
15431                                           ! 1688         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15432                       00003863            .28:
15433                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15434 3863           8A46         0C            mov	al,$C[bp]
15435                                           ! Debug: list unsigned char = al+0 (used reg = )
15436 3866           30E4                       xor	ah,ah
15437 3868           50                         push	ax
15438                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15439 3869           8A46         12            mov	al,$12[bp]
15440                                           ! Debug: list unsigned char = al+0 (used reg = )
15441 386C           30E4                       xor	ah,ah
15442 386E           50                         push	ax
15443                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15444 386F           E8         2EBF            call	_biosfn_load_text_8_14_pat
15445 3872           83C4                   04  add	sp,*4
15446                                           !BCC_EOS
15447                                           ! 1689         break;
15448 3875           E9         00F7            br 	.22
15449                                           !BCC_EOS
15450                                           ! 1690        case 0x02:
15451                                           ! 1691        case 0x12:
15452                       00003878            .29:
15453                                           ! 1692         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15454                       00003878            .2A:
15455                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15456 3878           8A46         0C            mov	al,$C[bp]
15457                                           ! Debug: list unsigned char = al+0 (used reg = )
15458 387B           30E4                       xor	ah,ah
15459 387D           50                         push	ax
15460                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15461 387E           8A46         12            mov	al,$12[bp]
15462                                           ! Debug: list unsigned char = al+0 (used reg = )
15463 3881           30E4                       xor	ah,ah
15464 3883           50                         push	ax
15465                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15466 3884           E8         2F41            call	_biosfn_load_text_8_8_pat
15467 3887           83C4                   04  add	sp,*4
15468                                           !BCC_EOS
15469                                           ! 1693         break;
15470 388A           E9         00E2            br 	.22
15471                                           !BCC_EOS
15472                                           ! 1694        case 0x04:
15473                                           ! 1695        case 0x14:
15474                       0000388D            .2B:
15475                                           ! 1696         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15476                       0000388D            .2C:
15477                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15478 388D           8A46         0C            mov	al,$C[bp]
15479                                           ! Debug: list unsigned char = al+0 (used reg = )
15480 3890           30E4                       xor	ah,ah
15481 3892           50                         push	ax
15482                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15483 3893           8A46         12            mov	al,$12[bp]
15484                                           ! Debug: list unsigned char = al+0 (used reg = )
15485 3896           30E4                       xor	ah,ah
15486 3898           50                         push	ax
15487                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15488 3899           E8         2FCA            call	_biosfn_load_text_8_16_pat
15489 389C           83C4                   04  add	sp,*4
15490                                           !BCC_EOS
15491                                           ! 1697         break;
15492 389F           E9         00CD            br 	.22
15493                                           !BCC_EOS
15494                                           ! 1698        case 0x20:
15495                                           ! 1699         biosfn_load_gfx_8_8_chars(ES,BP);
15496                       000038A2            .2D:
15497                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15498 38A2           FF76         08            push	8[bp]
15499                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15500 38A5           FF76         16            push	$16[bp]
15501                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15502 38A8           E8         304C            call	_biosfn_load_gfx_8_8_chars
15503 38AB           83C4                   04  add	sp,*4
15504                                           !BCC_EOS
15505                                           ! 1700         break;
15506 38AE           E9         00BE            br 	.22
15507                                           !BCC_EOS
15508                                           ! 1701        case 0x21:
15509                                           ! 1702         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15510                       000038B1            .2E:
15511                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15512 38B1           8A46         0E            mov	al,$E[bp]
15513                                           ! Debug: list unsigned char = al+0 (used reg = )
15514 38B4           30E4                       xor	ah,ah
15515 38B6           50                         push	ax
15516                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15517 38B7           8A46         0C            mov	al,$C[bp]
15518                                           ! Debug: list unsigned char = al+0 (used reg = )
15519 38BA           30E4                       xor	ah,ah
15520 38BC           50                         push	ax
15521                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15522 38BD           FF76         10            push	$10[bp]
15523                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15524 38C0           FF76         08            push	8[bp]
15525                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15526 38C3           FF76         16            push	$16[bp]
15527                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15528 38C6           E8         302F            call	_biosfn_load_gfx_user_chars
15529 38C9           83C4                   0A  add	sp,*$A
15530                                           !BCC_EOS
15531                                           ! 1703         break;
15532 38CC           E9         00A0            br 	.22
15533                                           !BCC_EOS
15534                                           ! 1704        case 0x22:
15535                                           ! 1705         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15536                       000038CF            .2F:
15537                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15538 38CF           8A46         0C            mov	al,$C[bp]
15539                                           ! Debug: list unsigned char = al+0 (used reg = )
15540 38D2           30E4                       xor	ah,ah
15541 38D4           50                         push	ax
15542                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15543 38D5           E8         3021            call	_biosfn_load_gfx_8_14_chars
15544 38D8           44                         inc	sp
15545 38D9           44                         inc	sp
15546                                           !BCC_EOS
15547                                           ! 1706         break;
15548 38DA           E9         0092            br 	.22
15549                                           !BCC_EOS
15550                                           ! 1707        case 0x23:
15551                                           ! 1708         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15552                       000038DD            .30:
15553                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15554 38DD           8A46         0C            mov	al,$C[bp]
15555                                           ! Debug: list unsigned char = al+0 (used reg = )
15556 38E0           30E4                       xor	ah,ah
15557 38E2           50                         push	ax
15558                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15559 38E3           E8         3014            call	_biosfn_load_gfx_8_8_dd_chars
15560 38E6           44                         inc	sp
15561 38E7           44                         inc	sp
15562                                           !BCC_EOS
15563                                           ! 1709         break;
15564 38E8           E9         0084            br 	.22
15565                                           !BCC_EOS
15566                                           ! 1710        case 0x24:
15567                                           ! 1711         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15568                       000038EB            .31:
15569                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15570 38EB           8A46         0C            mov	al,$C[bp]
15571                                           ! Debug: list unsigned char = al+0 (used reg = )
15572 38EE           30E4                       xor	ah,ah
15573 38F0           50                         push	ax
15574                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15575 38F1           E8         3007            call	_biosfn_load_gfx_8_16_chars
15576 38F4           44                         inc	sp
15577 38F5           44                         inc	sp
15578                                           !BCC_EOS
15579                                           ! 1712         break;
15580 38F6           E9         0076            br 	.22
15581                                           !BCC_EOS
15582                                           ! 1713        case 0x30:
15583                                           ! 1714         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15584                       000038F9            .32:
15585                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15586 38F9           8D5E         0E            lea	bx,$E[bp]
15587 38FC           53                         push	bx
15588                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15589 38FD           8D5E         10            lea	bx,$10[bp]
15590 3900           53                         push	bx
15591                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15592 3901           8D5E         08            lea	bx,8[bp]
15593 3904           53                         push	bx
15594                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15595 3905           8D5E         16            lea	bx,$16[bp]
15596 3908           53                         push	bx
15597                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15598 3909           8B46         0C            mov	ax,$C[bp]
15599 390C           88E0                       mov	al,ah
15600 390E           30E4                       xor	ah,ah
15601                                           ! Debug: list unsigned int = ax+0 (used reg = )
15602 3910           50                         push	ax
15603                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15604 3911           E8         2FE8            call	_biosfn_get_font_info
15605 3914           83C4                   0A  add	sp,*$A
15606                                           !BCC_EOS
15607                                           ! 1715         break;
15608 3917           EB           56            jmp .22
15609                                           !BCC_EOS
15610                                           ! 1716      
15611                                           ! 1716  }
15612                                           ! 1717      break;
15613 3919           EB           54            jmp .22
15614                       0000391B            .24:
15615 391B           2C                     00  sub	al,*0
15616 391D         0F84         FF19            beq 	.25
15617 3921           2C                     01  sub	al,*1
15618 3923         0F84         FF3C            beq 	.27
15619 3927           2C                     01  sub	al,*1
15620 3929         0F84         FF4B            beq 	.29
15621 392D           2C                     02  sub	al,*2
15622 392F         0F84         FF5A            beq 	.2B
15623 3933           2C                     0C  sub	al,*$C
15624 3935         0F84         FF01            beq 	.26
15625 3939           2C                     01  sub	al,*1
15626 393B         0F84         FF24            beq 	.28
15627 393F           2C                     01  sub	al,*1
15628 3941         0F84         FF33            beq 	.2A
15629 3945           2C                     02  sub	al,*2
15630 3947         0F84         FF42            beq 	.2C
15631 394B           2C                     0C  sub	al,*$C
15632 394D         0F84         FF51            beq 	.2D
15633 3951           2C                     01  sub	al,*1
15634 3953         0F84         FF5A            beq 	.2E
15635 3957           2C                     01  sub	al,*1
15636 3959         0F84         FF72            beq 	.2F
15637 395D           2C                     01  sub	al,*1
15638 395F         0F84         FF7A            beq 	.30
15639 3963           2C                     01  sub	al,*1
15640 3965         0F84         FF82            beq 	.31
15641 3969           2C                     0C  sub	al,*$C
15642 396B         0F84         FF8A            beq 	.32
15643                       0000396F            .22:
15644 396F           E9         013F            br 	.1
15645                                           !BCC_EOS
15646                                           ! 1718    case 0x12:
15647                                           ! 1719      switch(( BX & 0x00ff ))
15648                       00003972            .33:
15649                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15650 3972           8A46         0C            mov	al,$C[bp]
15651                                           ! 1720       {
15652 3975           EB           3C            jmp .36
15653                                           ! 1721        case 0x20:
15654                                           ! 1722         biosfn_alternate_prtsc();
15655                       00003977            .37:
15656                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15657 3977           E8         315C            call	_biosfn_alternate_prtsc
15658                                           !BCC_EOS
15659                                           ! 1723         break;
15660 397A           EB           43            jmp .34
15661                                           !BCC_EOS
15662                                           ! 1724        case 0x35:
15663                                           ! 1725         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15664                       0000397C            .38:
15665                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15666 397C           FF76         0E            push	$E[bp]
15667                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15668 397F           FF76         16            push	$16[bp]
15669                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15670 3982           8A46         12            mov	al,$12[bp]
15671                                           ! Debug: list unsigned char = al+0 (used reg = )
15672 3985           30E4                       xor	ah,ah
15673 3987           50                         push	ax
15674                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15675 3988           E8         3225            call	_biosfn_switch_video_interface
15676 398B           83C4                   06  add	sp,*6
15677                                           !BCC_EOS
15678                                           ! 1726         AX = ((AX & 0xff00) | (0x12));
15679                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15680 398E           8B46         12            mov	ax,$12[bp]
15681 3991           30C0                       xor	al,al
15682                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15683 3993           0C                     12  or	al,*$12
15684                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15685 3995           8946         12            mov	$12[bp],ax
15686                                           !BCC_EOS
15687                                           ! 1727         break;
15688 3998           EB           25            jmp .34
15689                                           !BCC_EOS
15690                                           ! 1728        case 0x36:
15691                                           ! 1729         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15692                       0000399A            .39:
15693                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15694 399A           8A46         12            mov	al,$12[bp]
15695                                           ! Debug: list unsigned char = al+0 (used reg = )
15696 399D           30E4                       xor	ah,ah
15697 399F           50                         push	ax
15698                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15699 39A0           E8         320E            call	_biosfn_enable_video_refresh_control
15700 39A3           44                         inc	sp
15701 39A4           44                         inc	sp
15702                                           !BCC_EOS
15703                                           ! 1730         AX = ((AX & 0xff00) | (0x12));
15704                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15705 39A5           8B46         12            mov	ax,$12[bp]
15706 39A8           30C0                       xor	al,al
15707                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15708 39AA           0C                     12  or	al,*$12
15709                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15710 39AC           8946         12            mov	$12[bp],ax
15711                                           !BCC_EOS
15712                                           ! 1731         break;
15713 39AF           EB           0E            jmp .34
15714                                           !BCC_EOS
15715                                           ! 1732       }
15716                                           ! 1733      break;
15717 39B1           EB           0C            jmp .34
15718                       000039B3            .36:
15719 39B3           2C                     20  sub	al,*$20
15720 39B5           74           C0            je 	.37
15721 39B7           2C                     15  sub	al,*$15
15722 39B9           74           C1            je 	.38
15723 39BB           2C                     01  sub	al,*1
15724 39BD           74           DB            je 	.39
15725                       000039BF            .34:
15726 39BF           E9         00EF            br 	.1
15727                                           !BCC_EOS
15728                                           ! 1734    case 0x13:
15729                                           ! 1735      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15730                       000039C2            .3A:
15731                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15732 39C2           FF76         08            push	8[bp]
15733                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15734 39C5           FF76         16            push	$16[bp]
15735                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15736 39C8           8A46         0E            mov	al,$E[bp]
15737                                           ! Debug: list unsigned char = al+0 (used reg = )
15738 39CB           30E4                       xor	ah,ah
15739 39CD           50                         push	ax
15740                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15741 39CE           8B46         0E            mov	ax,$E[bp]
15742 39D1           88E0                       mov	al,ah
15743 39D3           30E4                       xor	ah,ah
15744                                           ! Debug: list unsigned int = ax+0 (used reg = )
15745 39D5           50                         push	ax
15746                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
15747 39D6           FF76         10            push	$10[bp]
15748                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
15749 39D9           8A46         0C            mov	al,$C[bp]
15750                                           ! Debug: list unsigned char = al+0 (used reg = )
15751 39DC           30E4                       xor	ah,ah
15752 39DE           50                         push	ax
15753                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15754 39DF           8B46         0C            mov	ax,$C[bp]
15755 39E2           88E0                       mov	al,ah
15756 39E4           30E4                       xor	ah,ah
15757                                           ! Debug: list unsigned int = ax+0 (used reg = )
15758 39E6           50                         push	ax
15759                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15760 39E7           8A46         12            mov	al,$12[bp]
15761                                           ! Debug: list unsigned char = al+0 (used reg = )
15762 39EA           30E4                       xor	ah,ah
15763 39EC           50                         push	ax
15764                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
15765 39ED           E8         31C2            call	_biosfn_write_string
15766 39F0           83C4                   10  add	sp,*$10
15767                                           !BCC_EOS
15768                                           ! 1736      break;
15769 39F3           E9         00BB            br 	.1
15770                                           !BCC_EOS
15771                                           ! 1737    case 0x1B:
15772                                           ! 1738      biosfn_read_state_info(BX,ES,DI);
15773                       000039F6            .3B:
15774                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
15775 39F6           FF76         04            push	4[bp]
15776                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15777 39F9           FF76         16            push	$16[bp]
15778                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15779 39FC           FF76         0C            push	$C[bp]
15780                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
15781 39FF           E8         32BC            call	_biosfn_read_state_info
15782 3A02           83C4                   06  add	sp,*6
15783                                           !BCC_EOS
15784                                           ! 1739      AX = ((AX & 0xff00) | (0x1B));
15785                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15786 3A05           8B46         12            mov	ax,$12[bp]
15787 3A08           30C0                       xor	al,al
15788                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
15789 3A0A           0C                     1B  or	al,*$1B
15790                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15791 3A0C           8946         12            mov	$12[bp],ax
15792                                           !BCC_EOS
15793                                           ! 1740      break;
15794 3A0F           E9         009F            br 	.1
15795                                           !BCC_EOS
15796                                           ! 1741    case 0x1C:
15797                                           ! 1742      switch(( AX & 0x00ff ))
15798                       00003A12            .3C:
15799                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15800 3A12           8A46         12            mov	al,$12[bp]
15801                                           ! 1743       {
15802 3A15           EB           33            jmp .3F
15803                                           ! 1744        case 0x00:
15804                                           ! 1745         biosfn_read_video_state_size(CX,&BX);
15805                       00003A17            .40:
15806                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
15807 3A17           8D5E         0C            lea	bx,$C[bp]
15808 3A1A           53                         push	bx
15809                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15810 3A1B           FF76         10            push	$10[bp]
15811                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
15812 3A1E           E8         341C            call	_biosfn_read_video_state_size
15813 3A21           83C4                   04  add	sp,*4
15814                                           !BCC_EOS
15815                                           ! 1746         break;
15816 3A24           EB           30            jmp .3D
15817                                           !BCC_EOS
15818                                           ! 1747        case 0x01:
15819                                           ! 1748         biosfn_save_video_state(CX,ES,BX);
15820                       00003A26            .41:
15821                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15822 3A26           FF76         0C            push	$C[bp]
15823                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15824 3A29           FF76         16            push	$16[bp]
15825                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15826 3A2C           FF76         10            push	$10[bp]
15827                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
15828 3A2F           E8         342F            call	_biosfn_save_video_state
15829 3A32           83C4                   06  add	sp,*6
15830                                           !BCC_EOS
15831                                           ! 1749         break;
15832 3A35           EB           1F            jmp .3D
15833                                           !BCC_EOS
15834                                           ! 1750        case 0x02:
15835                                           ! 1751         biosfn_restore_video_state(CX,ES,BX);
15836                       00003A37            .42:
15837                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15838 3A37           FF76         0C            push	$C[bp]
15839                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15840 3A3A           FF76         16            push	$16[bp]
15841                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15842 3A3D           FF76         10            push	$10[bp]
15843                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
15844 3A40           E8         39E8            call	_biosfn_restore_video_state
15845 3A43           83C4                   06  add	sp,*6
15846                                           !BCC_EOS
15847                                           ! 1752         break;
15848 3A46           EB           0E            jmp .3D
15849                                           !BCC_EOS
15850                                           ! 1753       }
15851                                           ! 1754      AX = ((AX & 0xff00) | (0x1C));
15852 3A48           EB           0C            jmp .3D
15853                       00003A4A            .3F:
15854 3A4A           2C                     00  sub	al,*0
15855 3A4C           74           C9            je 	.40
15856 3A4E           2C                     01  sub	al,*1
15857 3A50           74           D4            je 	.41
15858 3A52           2C                     01  sub	al,*1
15859 3A54           74           E1            je 	.42
15860                       00003A56            .3D:
15861                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15862 3A56           8B46         12            mov	ax,$12[bp]
15863 3A59           30C0                       xor	al,al
15864                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
15865 3A5B           0C                     1C  or	al,*$1C
15866                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15867 3A5D           8946         12            mov	$12[bp],ax
15868                                           !BCC_EOS
15869                                           ! 1755      break;
15870 3A60           EB           4F            jmp .1
15871                                           !BCC_EOS
15872                                           ! 1756   }
15873                                           ! 1757 }
15874 3A62           EB           4D            jmp .1
15875                       00003A64            .3:
15876 3A64           2D                   0000  sub	ax,*0
15877 3A67           7C           48            jl  	.1
15878 3A69           3D                   001C  cmp	ax,*$1C
15879 3A6C           77           43            ja  	.43
15880 3A6E           D1E0                       shl	ax,*1
15881 3A70           89C3                       mov	bx,ax
15882 3A72           2E                         seg	cs
15883 3A73           FFA7       3A77            br	.44[bx]
15884                       00003A77            .44:
15885 3A77                      363F            .word	.4
15886 3A79                      369D            .word	.13
15887 3A7B                      36B4            .word	.14
15888 3A7D                      36C8            .word	.15
15889 3A7F                      36E1            .word	.16
15890 3A81                      36F8            .word	.17
15891 3A83                      3706            .word	.18
15892 3A85                      3741            .word	.19
15893 3A87                      377B            .word	.1A
15894 3A89                      3790            .word	.1B
15895 3A8B                      37B0            .word	.1C
15896 3A8D                      3AB1            .word	.1
15897 3A8F                      37D0            .word	.1D
15898 3A91                      37ED            .word	.1E
15899 3A93                      3808            .word	.1F
15900 3A95                      3AB1            .word	.1
15901 3A97                      3825            .word	.20
15902 3A99                      3834            .word	.21
15903 3A9B                      3972            .word	.33
15904 3A9D                      39C2            .word	.3A
15905 3A9F                      3AB1            .word	.1
15906 3AA1                      3AB1            .word	.1
15907 3AA3                      3AB1            .word	.1
15908 3AA5                      3AB1            .word	.1
15909 3AA7                      3AB1            .word	.1
15910 3AA9                      3AB1            .word	.1
15911 3AAB                      3AB1            .word	.1
15912 3AAD                      39F6            .word	.3B
15913 3AAF                      3A12            .word	.3C
15914                       00003AB1            .43:
15915                       00003AB1            .1:
15916                       FFFFFFFE            ..FFFF	=	-2
15917 3AB1           5D                         pop	bp
15918 3AB2           C3                         ret
15919                                           ! 1758 static void biosfn_set_video_mode(mode) Bit8u mode;
15920                                           ! Register BX used in function int10_func
15921                       00003AB3            _biosfn_set_video_mode:
15922                                           !BCC_EOS
15923                                           ! 1759 {
15924                                           ! 1760  Bit8u noclearmem=mode&0x80;
15925 3AB3           55                         push	bp
15926 3AB4           89E5                       mov	bp,sp
15927 3AB6           4C                         dec	sp
15928                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
15929 3AB7           8A46         04            mov	al,4[bp]
15930 3ABA           24                     80  and	al,#$80
15931                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
15932 3ABC           8846         FF            mov	-1[bp],al
15933                                           !BCC_EOS
15934                                           ! 1761  Bit8u line,mmask,*palette,vpti;
15935                                           !BCC_EOS
15936                                           ! 1762  Bit16u i,twidth,theightm1,cheight;
15937                                           !BCC_EOS
15938                                           ! 1763  Bit8u modeset_ctl,video_ctl,vga_switches;
15939                                           !BCC_EOS
15940                                           ! 1764  Bit16u crtc_addr;
15941                                           !BCC_EOS
15942                                           ! 1765  mode=mode&0x7f;
15943 3ABF           83C4                   EB  add	sp,*-$15
15944                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
15945 3AC2           8A46         04            mov	al,4[bp]
15946 3AC5           24                     7F  and	al,*$7F
15947                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
15948 3AC7           8846         04            mov	4[bp],al
15949                                           !BCC_EOS
15950                                           ! 1766  line=find_vga_entry(mode);
15951                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
15952 3ACA           8A46         04            mov	al,4[bp]
15953 3ACD           30E4                       xor	ah,ah
15954 3ACF           50                         push	ax
15955                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
15956 3AD0           E8         3F36            call	_find_vga_entry
15957 3AD3           44                         inc	sp
15958 3AD4           44                         inc	sp
15959                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
15960 3AD5           8846         FE            mov	-2[bp],al
15961                                           !BCC_EOS
15962                                           ! 1767  if(line==0xFF)
15963                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
15964 3AD8           8A46         FE            mov	al,-2[bp]
15965 3ADB           3C                     FF  cmp	al,#$FF
15966 3ADD           75           04            jne 	.45
15967                       00003ADF            .46:
15968                                           ! 1768   return;
15969 3ADF           89EC                       mov	sp,bp
15970 3AE1           5D                         pop	bp
15971 3AE2           C3                         ret
15972                                           !BCC_EOS
15973                                           ! 1769  vpti=line_to_vpti[line];
15974                       00003AE3            .45:
15975                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
15976 3AE3           8A46         FE            mov	al,-2[bp]
15977 3AE6           30E4                       xor	ah,ah
15978 3AE8           89C3                       mov	bx,ax
15979                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
15980 3AEA           8A87       0253            mov	al,_line_to_vpti[bx]
15981 3AEE           8846         F9            mov	-7[bp],al
15982                                           !BCC_EOS
15983                                           ! 1770  twidth=video_param_table[vpti].twidth;
15984                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15985 3AF1           8A46         F9            mov	al,-7[bp]
15986 3AF4           30E4                       xor	ah,ah
15987 3AF6           B1                     06  mov	cl,*6
15988 3AF8           D3E0                       shl	ax,cl
15989 3AFA           89C3                       mov	bx,ax
15990                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
15991 3AFC           8A87       0267            mov	al,_video_param_table[bx]
15992 3B00           30E4                       xor	ah,ah
15993 3B02           8946         F4            mov	-$C[bp],ax
15994                                           !BCC_EOS
15995                                           ! 1771  theightm1=video_param_table[vpti].theightm1;
15996                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15997 3B05           8A46         F9            mov	al,-7[bp]
15998 3B08           30E4                       xor	ah,ah
15999 3B0A           B1                     06  mov	cl,*6
16000 3B0C           D3E0                       shl	ax,cl
16001 3B0E           89C3                       mov	bx,ax
16002 3B10           81C3                 0267  add	bx,#_video_param_table
16003                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16004 3B14           8A47         01            mov	al,1[bx]
16005 3B17           30E4                       xor	ah,ah
16006 3B19           8946         F2            mov	-$E[bp],ax
16007                                           !BCC_EOS
16008                                           ! 1772  cheight=video_param_table[vpti].cheight;
16009                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16010 3B1C           8A46         F9            mov	al,-7[bp]
16011 3B1F           30E4                       xor	ah,ah
16012 3B21           B1                     06  mov	cl,*6
16013 3B23           D3E0                       shl	ax,cl
16014 3B25           89C3                       mov	bx,ax
16015 3B27           81C3                 0267  add	bx,#_video_param_table
16016                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16017 3B2B           8A47         02            mov	al,2[bx]
16018 3B2E           30E4                       xor	ah,ah
16019 3B30           8946         F0            mov	-$10[bp],ax
16020                                           !BCC_EOS
16021                                           ! 1773  video_ctl=read_byte(0x40,0x87);
16022                                           ! Debug: list int = const $87 (used reg = )
16023 3B33           B8                   0087  mov	ax,#$87
16024 3B36           50                         push	ax
16025                                           ! Debug: list int = const $40 (used reg = )
16026 3B37           B8                   0040  mov	ax,*$40
16027 3B3A           50                         push	ax
16028                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16029 3B3B           E8         3FB7            call	_read_byte
16030 3B3E           83C4                   04  add	sp,*4
16031                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16032 3B41           8846         EE            mov	-$12[bp],al
16033                                           !BCC_EOS
16034                                           ! 1774  vga_switches=read_byte(0x40,0x88);
16035                                           ! Debug: list int = const $88 (used reg = )
16036 3B44           B8                   0088  mov	ax,#$88
16037 3B47           50                         push	ax
16038                                           ! Debug: list int = const $40 (used reg = )
16039 3B48           B8                   0040  mov	ax,*$40
16040 3B4B           50                         push	ax
16041                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16042 3B4C           E8         3FA6            call	_read_byte
16043 3B4F           83C4                   04  add	sp,*4
16044                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16045 3B52           8846         ED            mov	-$13[bp],al
16046                                           !BCC_EOS
16047                                           ! 1775  modeset_ctl=read_byte(0x40,0x89);
16048                                           ! Debug: list int = const $89 (used reg = )
16049 3B55           B8                   0089  mov	ax,#$89
16050 3B58           50                         push	ax
16051                                           ! Debug: list int = const $40 (used reg = )
16052 3B59           B8                   0040  mov	ax,*$40
16053 3B5C           50                         push	ax
16054                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16055 3B5D           E8         3F95            call	_read_byte
16056 3B60           83C4                   04  add	sp,*4
16057                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16058 3B63           8846         EF            mov	-$11[bp],al
16059                                           !BCC_EOS
16060                                           ! 1776  if((modeset_ctl&0x08)==0)
16061                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16062 3B66           8A46         EF            mov	al,-$11[bp]
16063 3B69           24                     08  and	al,*8
16064                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16065 3B6B           84C0                       test	al,al
16066 3B6D         0F85         0145            bne 	.47
16067                       00003B71            .48:
16068                                           ! 1777   {
16069                                           ! 1778    outb(0x3c6,vga_modes[line].pelmask);
16070                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16071 3B71           8A46         FE            mov	al,-2[bp]
16072 3B74           30E4                       xor	ah,ah
16073 3B76           B1                     03  mov	cl,*3
16074 3B78           D3E0                       shl	ax,cl
16075 3B7A           89C3                       mov	bx,ax
16076 3B7C           81C3                 01D3  add	bx,#_vga_modes
16077                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16078 3B80           8A47         06            mov	al,6[bx]
16079 3B83           30E4                       xor	ah,ah
16080 3B85           50                         push	ax
16081                                           ! Debug: list int = const $3C6 (used reg = )
16082 3B86           B8                   03C6  mov	ax,#$3C6
16083 3B89           50                         push	ax
16084                                           ! Debug: func () void = outb+0 (used reg = )
16085 3B8A           E8         3FD4            call	_outb
16086 3B8D           83C4                   04  add	sp,*4
16087                                           !BCC_EOS
16088                                           ! 1779    outb(0x3c8,0x00);
16089                                           ! Debug: list int = const 0 (used reg = )
16090 3B90           31C0                       xor	ax,ax
16091 3B92           50                         push	ax
16092                                           ! Debug: list int = const $3C8 (used reg = )
16093 3B93           B8                   03C8  mov	ax,#$3C8
16094 3B96           50                         push	ax
16095                                           ! Debug: func () void = outb+0 (used reg = )
16096 3B97           E8         3FC7            call	_outb
16097 3B9A           83C4                   04  add	sp,*4
16098                                           !BCC_EOS
16099                                           ! 1780    switch(vga_modes[line].dacmodel)
16100                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16101 3B9D           8A46         FE            mov	al,-2[bp]
16102 3BA0           30E4                       xor	ah,ah
16103 3BA2           B1                     03  mov	cl,*3
16104 3BA4           D3E0                       shl	ax,cl
16105 3BA6           89C3                       mov	bx,ax
16106 3BA8           81C3                 01D3  add	bx,#_vga_modes
16107 3BAC           8A47         07            mov	al,7[bx]
16108                                           ! 1781     {case 0:
16109 3BAF           EB           22            jmp .4B
16110                                           ! 1782       palette=&palette0;
16111                       00003BB1            .4C:
16112                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16113 3BB1           BB                   09E7  mov	bx,#_palette0
16114 3BB4           895E         FA            mov	-6[bp],bx
16115                                           !BCC_EOS
16116                                           ! 1783       break;
16117 3BB7           EB           2A            jmp .49
16118                                           !BCC_EOS
16119                                           ! 1784      case 1:
16120                                           ! 1785       palette=&palette1;
16121                       00003BB9            .4D:
16122                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16123 3BB9           BB                   0AA7  mov	bx,#_palette1
16124 3BBC           895E         FA            mov	-6[bp],bx
16125                                           !BCC_EOS
16126                                           ! 1786       break;
16127 3BBF           EB           22            jmp .49
16128                                           !BCC_EOS
16129                                           ! 1787      case 2:
16130                                           ! 1788       palette=&palette2;
16131                       00003BC1            .4E:
16132                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16133 3BC1           BB                   0B67  mov	bx,#_palette2
16134 3BC4           895E         FA            mov	-6[bp],bx
16135                                           !BCC_EOS
16136                                           ! 1789       break;
16137 3BC7           EB           1A            jmp .49
16138                                           !BCC_EOS
16139                                           ! 1790      case 3:
16140                                           ! 1791       palette=&palette3;
16141                       00003BC9            .4F:
16142                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16143 3BC9           BB                   0C27  mov	bx,#_palette3
16144 3BCC           895E         FA            mov	-6[bp],bx
16145                                           !BCC_EOS
16146                                           ! 1792       break;
16147 3BCF           EB           12            jmp .49
16148                                           !BCC_EOS
16149                                           ! 1793     }
16150                                           ! 1794    for(i=0;i<0x0100;i++)
16151 3BD1           EB           10            jmp .49
16152                       00003BD3            .4B:
16153 3BD3           2C                     00  sub	al,*0
16154 3BD5           74           DA            je 	.4C
16155 3BD7           2C                     01  sub	al,*1
16156 3BD9           74           DE            je 	.4D
16157 3BDB           2C                     01  sub	al,*1
16158 3BDD           74           E2            je 	.4E
16159 3BDF           2C                     01  sub	al,*1
16160 3BE1           74           E6            je 	.4F
16161                       00003BE3            .49:
16162                       FFFFFFE8            ..FFFE	=	-$18
16163                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16164 3BE3           31C0                       xor	ax,ax
16165 3BE5           8946         F6            mov	-$A[bp],ax
16166                                           !BCC_EOS
16167                                           !BCC_EOS
16168                                           ! 1795     {if(i<=dac_regs[vga_modes[line].dacmodel])
16169 3BE8           E9         00AB            br 	.52
16170                       00003BEB            .53:
16171                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16172 3BEB           8A46         FE            mov	al,-2[bp]
16173 3BEE           30E4                       xor	ah,ah
16174 3BF0           B1                     03  mov	cl,*3
16175 3BF2           D3E0                       shl	ax,cl
16176 3BF4           89C3                       mov	bx,ax
16177 3BF6           81C3                 01D3  add	bx,#_vga_modes
16178                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16179 3BFA           8A47         07            mov	al,7[bx]
16180 3BFD           30E4                       xor	ah,ah
16181 3BFF           89C3                       mov	bx,ax
16182                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16183 3C01           8A87       0263            mov	al,_dac_regs[bx]
16184 3C05           30E4                       xor	ah,ah
16185 3C07           3B46         F6            cmp	ax,-$A[bp]
16186 3C0A           72           5C            jb  	.54
16187                       00003C0C            .55:
16188                                           ! 1796       {outb(0x3c9,palette[(i*3)+0]);
16189                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16190 3C0C           8B46         F6            mov	ax,-$A[bp]
16191 3C0F           89C2                       mov	dx,ax
16192 3C11           D1E0                       shl	ax,*1
16193 3C13           01D0                       add	ax,dx
16194                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16195                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16196 3C15           0346         FA            add	ax,-6[bp]
16197 3C18           89C3                       mov	bx,ax
16198                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16199 3C1A           8A07                       mov	al,[bx]
16200 3C1C           30E4                       xor	ah,ah
16201 3C1E           50                         push	ax
16202                                           ! Debug: list int = const $3C9 (used reg = )
16203 3C1F           B8                   03C9  mov	ax,#$3C9
16204 3C22           50                         push	ax
16205                                           ! Debug: func () void = outb+0 (used reg = )
16206 3C23           E8         3F3B            call	_outb
16207 3C26           83C4                   04  add	sp,*4
16208                                           !BCC_EOS
16209                                           ! 1797        outb(0x3c9,palette[(i*3)+1]);
16210                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16211 3C29           8B46         F6            mov	ax,-$A[bp]
16212 3C2C           89C2                       mov	dx,ax
16213 3C2E           D1E0                       shl	ax,*1
16214 3C30           01D0                       add	ax,dx
16215                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16216                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16217 3C32           40                         inc	ax
16218 3C33           0346         FA            add	ax,-6[bp]
16219 3C36           89C3                       mov	bx,ax
16220                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16221 3C38           8A07                       mov	al,[bx]
16222 3C3A           30E4                       xor	ah,ah
16223 3C3C           50                         push	ax
16224                                           ! Debug: list int = const $3C9 (used reg = )
16225 3C3D           B8                   03C9  mov	ax,#$3C9
16226 3C40           50                         push	ax
16227                                           ! Debug: func () void = outb+0 (used reg = )
16228 3C41           E8         3F1D            call	_outb
16229 3C44           83C4                   04  add	sp,*4
16230                                           !BCC_EOS
16231                                           ! 1798        outb(0x3c9,
16232                                           ! 1798 palette[(i*3)+2]);
16233                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16234 3C47           8B46         F6            mov	ax,-$A[bp]
16235 3C4A           89C2                       mov	dx,ax
16236 3C4C           D1E0                       shl	ax,*1
16237 3C4E           01D0                       add	ax,dx
16238                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16239                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16240 3C50           40                         inc	ax
16241 3C51           40                         inc	ax
16242 3C52           0346         FA            add	ax,-6[bp]
16243 3C55           89C3                       mov	bx,ax
16244                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16245 3C57           8A07                       mov	al,[bx]
16246 3C59           30E4                       xor	ah,ah
16247 3C5B           50                         push	ax
16248                                           ! Debug: list int = const $3C9 (used reg = )
16249 3C5C           B8                   03C9  mov	ax,#$3C9
16250 3C5F           50                         push	ax
16251                                           ! Debug: func () void = outb+0 (used reg = )
16252 3C60           E8         3EFE            call	_outb
16253 3C63           83C4                   04  add	sp,*4
16254                                           !BCC_EOS
16255                                           ! 1799       }
16256                                           ! 1800      else
16257                                           ! 1801       {outb(0x3c9,0);
16258 3C66           EB           27            jmp .56
16259                       00003C68            .54:
16260                                           ! Debug: list int = const 0 (used reg = )
16261 3C68           31C0                       xor	ax,ax
16262 3C6A           50                         push	ax
16263                                           ! Debug: list int = const $3C9 (used reg = )
16264 3C6B           B8                   03C9  mov	ax,#$3C9
16265 3C6E           50                         push	ax
16266                                           ! Debug: func () void = outb+0 (used reg = )
16267 3C6F           E8         3EEF            call	_outb
16268 3C72           83C4                   04  add	sp,*4
16269                                           !BCC_EOS
16270                                           ! 1802        outb(0x3c9,0);
16271                                           ! Debug: list int = const 0 (used reg = )
16272 3C75           31C0                       xor	ax,ax
16273 3C77           50                         push	ax
16274                                           ! Debug: list int = const $3C9 (used reg = )
16275 3C78           B8                   03C9  mov	ax,#$3C9
16276 3C7B           50                         push	ax
16277                                           ! Debug: func () void = outb+0 (used reg = )
16278 3C7C           E8         3EE2            call	_outb
16279 3C7F           83C4                   04  add	sp,*4
16280                                           !BCC_EOS
16281                                           ! 1803        outb(0x3c9,0);
16282                                           ! Debug: list int = const 0 (used reg = )
16283 3C82           31C0                       xor	ax,ax
16284 3C84           50                         push	ax
16285                                           ! Debug: list int = const $3C9 (used reg = )
16286 3C85           B8                   03C9  mov	ax,#$3C9
16287 3C88           50                         push	ax
16288                                           ! Debug: func () void = outb+0 (used reg = )
16289 3C89           E8         3ED5            call	_outb
16290 3C8C           83C4                   04  add	sp,*4
16291                                           !BCC_EOS
16292                                           ! 1804       }
16293                                           ! 1805     }
16294                       00003C8F            .56:
16295                                           ! 1806    if((modeset_ctl&0x02)==0x02)
16296                       00003C8F            .51:
16297                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16298 3C8F           8B46         F6            mov	ax,-$A[bp]
16299 3C92           40                         inc	ax
16300 3C93           8946         F6            mov	-$A[bp],ax
16301                       00003C96            .52:
16302                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16303 3C96           8B46         F6            mov	ax,-$A[bp]
16304 3C99           3D                   0100  cmp	ax,#$100
16305 3C9C         0F82         FF4B            blo 	.53
16306                       00003CA0            .57:
16307                       00003CA0            .50:
16308                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16309 3CA0           8A46         EF            mov	al,-$11[bp]
16310 3CA3           24                     02  and	al,*2
16311                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16312 3CA5           3C                     02  cmp	al,*2
16313 3CA7           75           0D            jne 	.58
16314                       00003CA9            .59:
16315                                           ! 1807     {
16316                                           ! 1808      biosfn_perform_gray_scale_summing(0x00, 0x100);
16317                                           ! Debug: list int = const $100 (used reg = )
16318 3CA9           B8                   0100  mov	ax,#$100
16319 3CAC           50                         push	ax
16320                                           ! Debug: list int = const 0 (used reg = )
16321 3CAD           31C0                       xor	ax,ax
16322 3CAF           50                         push	ax
16323                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16324 3CB0           E8         273B            call	_biosfn_perform_gray_scale_summing
16325 3CB3           83C4                   04  add	sp,*4
16326                                           !BCC_EOS
16327                                           ! 1809     }
16328                                           ! 1810   }
16329                       00003CB6            .58:
16330                                           ! 1811  inb(0x3da);
16331                       00003CB6            .47:
16332                                           ! Debug: list int = const $3DA (used reg = )
16333 3CB6           B8                   03DA  mov	ax,#$3DA
16334 3CB9           50                         push	ax
16335                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16336 3CBA           E8         3E8E            call	_inb
16337 3CBD           44                         inc	sp
16338 3CBE           44                         inc	sp
16339                                           !BCC_EOS
16340                                           ! 1812  for(i=0;i<=0x13;i++)
16341                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16342 3CBF           31C0                       xor	ax,ax
16343 3CC1           8946         F6            mov	-$A[bp],ax
16344                                           !BCC_EOS
16345                                           !BCC_EOS
16346                                           ! 1813   {outb(0x3c0,i);
16347 3CC4           EB           38            jmp .5C
16348                       00003CC6            .5D:
16349                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16350 3CC6           FF76         F6            push	-$A[bp]
16351                                           ! Debug: list int = const $3C0 (used reg = )
16352 3CC9           B8                   03C0  mov	ax,#$3C0
16353 3CCC           50                         push	ax
16354                                           ! Debug: func () void = outb+0 (used reg = )
16355 3CCD           E8         3E91            call	_outb
16356 3CD0           83C4                   04  add	sp,*4
16357                                           !BCC_EOS
16358                                           ! 1814    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16359                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16360 3CD3           8A46         F9            mov	al,-7[bp]
16361 3CD6           30E4                       xor	ah,ah
16362 3CD8           B1                     06  mov	cl,*6
16363 3CDA           D3E0                       shl	ax,cl
16364 3CDC           89C3                       mov	bx,ax
16365 3CDE           81C3                 0267  add	bx,#_video_param_table
16366                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16367 3CE2           8B46         F6            mov	ax,-$A[bp]
16368 3CE5           01C3                       add	bx,ax
16369                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16370 3CE7           8A47         23            mov	al,$23[bx]
16371 3CEA           30E4                       xor	ah,ah
16372 3CEC           50                         push	ax
16373                                           ! Debug: list int = const $3C0 (used reg = )
16374 3CED           B8                   03C0  mov	ax,#$3C0
16375 3CF0           50                         push	ax
16376                                           ! Debug: func () void = outb+0 (used reg = )
16377 3CF1           E8         3E6D            call	_outb
16378 3CF4           83C4                   04  add	sp,*4
16379                                           !BCC_EOS
16380                                           ! 1815   }
16381                                           ! 1816  outb(0x3c0,0x14);
16382                       00003CF7            .5B:
16383                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16384 3CF7           8B46         F6            mov	ax,-$A[bp]
16385 3CFA           40                         inc	ax
16386 3CFB           8946         F6            mov	-$A[bp],ax
16387                       00003CFE            .5C:
16388                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16389 3CFE           8B46         F6            mov	ax,-$A[bp]
16390 3D01           3D                   0013  cmp	ax,*$13
16391 3D04           76           C0            jbe	.5D
16392                       00003D06            .5E:
16393                       00003D06            .5A:
16394                                           ! Debug: list int = const $14 (used reg = )
16395 3D06           B8                   0014  mov	ax,*$14
16396 3D09           50                         push	ax
16397                                           ! Debug: list int = const $3C0 (used reg = )
16398 3D0A           B8                   03C0  mov	ax,#$3C0
16399 3D0D           50                         push	ax
16400                                           ! Debug: func () void = outb+0 (used reg = )
16401 3D0E           E8         3E50            call	_outb
16402 3D11           83C4                   04  add	sp,*4
16403                                           !BCC_EOS
16404                                           ! 1817  outb(0x3c0,0x00);
16405                                           ! Debug: list int = const 0 (used reg = )
16406 3D14           31C0                       xor	ax,ax
16407 3D16           50                         push	ax
16408                                           ! Debug: list int = const $3C0 (used reg = )
16409 3D17           B8                   03C0  mov	ax,#$3C0
16410 3D1A           50                         push	ax
16411                                           ! Debug: func () void = outb+0 (used reg = )
16412 3D1B           E8         3E43            call	_outb
16413 3D1E           83C4                   04  add	sp,*4
16414                                           !BCC_EOS
16415                                           ! 1818  outb(0x3c4,0);
16416                                           ! Debug: list int = const 0 (used reg = )
16417 3D21           31C0                       xor	ax,ax
16418 3D23           50                         push	ax
16419                                           ! Debug: list int = const $3C4 (used reg = )
16420 3D24           B8                   03C4  mov	ax,#$3C4
16421 3D27           50                         push	ax
16422                                           ! Debug: func () void = outb+0 (used reg = )
16423 3D28           E8         3E36            call	_outb
16424 3D2B           83C4                   04  add	sp,*4
16425                                           !BCC_EOS
16426                                           ! 1819  outb(0x3c5,0x03);
16427                                           ! Debug: list int = const 3 (used reg = )
16428 3D2E           B8                   0003  mov	ax,*3
16429 3D31           50                         push	ax
16430                                           ! Debug: list int = const $3C5 (used reg = )
16431 3D32           B8                   03C5  mov	ax,#$3C5
16432 3D35           50                         push	ax
16433                                           ! Debug: func () void = outb+0 (used reg = )
16434 3D36           E8         3E28            call	_outb
16435 3D39           83C4                   04  add	sp,*4
16436                                           !BCC_EOS
16437                                           ! 1820  for(i=1;i<=4;i++)
16438                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16439 3D3C           B8                   0001  mov	ax,*1
16440 3D3F           8946         F6            mov	-$A[bp],ax
16441                                           !BCC_EOS
16442                                           !BCC_EOS
16443                                           ! 1821   {outb(0x3c4,i);
16444 3D42           EB           3F            jmp .61
16445                       00003D44            .62:
16446                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16447 3D44           FF76         F6            push	-$A[bp]
16448                                           ! Debug: list int = const $3C4 (used reg = )
16449 3D47           B8                   03C4  mov	ax,#$3C4
16450 3D4A           50                         push	ax
16451                                           ! Debug: func () void = outb+0 (used reg = )
16452 3D4B           E8         3E13            call	_outb
16453 3D4E           83C4                   04  add	sp,*4
16454                                           !BCC_EOS
16455                                           ! 1822    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16456                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16457 3D51           8B46         F6            mov	ax,-$A[bp]
16458 3D54           48                         dec	ax
16459 3D55           50                         push	ax
16460                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16461 3D56           8A46         F9            mov	al,-7[bp]
16462 3D59           30E4                       xor	ah,ah
16463 3D5B           B1                     06  mov	cl,*6
16464 3D5D           D3E0                       shl	ax,cl
16465 3D5F           89C3                       mov	bx,ax
16466 3D61           81C3                 0267  add	bx,#_video_param_table
16467                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16468 3D65           8B46         E8            mov	ax,-$18[bp]
16469 3D68           01C3                       add	bx,ax
16470 3D6A           44                         inc	sp
16471 3D6B           44                         inc	sp
16472                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16473 3D6C           8A47         05            mov	al,5[bx]
16474 3D6F           30E4                       xor	ah,ah
16475 3D71           50                         push	ax
16476                                           ! Debug: list int = const $3C5 (used reg = )
16477 3D72           B8                   03C5  mov	ax,#$3C5
16478 3D75           50                         push	ax
16479                                           ! Debug: func () void = outb+0 (used reg = )
16480 3D76           E8         3DE8            call	_outb
16481 3D79           83C4                   04  add	sp,*4
16482                                           !BCC_EOS
16483                                           ! 1823   }
16484                                           ! 1824  for(i=0;i<=8;i++)
16485                       00003D7C            .60:
16486                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16487 3D7C           8B46         F6            mov	ax,-$A[bp]
16488 3D7F           40                         inc	ax
16489 3D80           8946         F6            mov	-$A[bp],ax
16490                       00003D83            .61:
16491                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16492 3D83           8B46         F6            mov	ax,-$A[bp]
16493 3D86           3D                   0004  cmp	ax,*4
16494 3D89           76           B9            jbe	.62
16495                       00003D8B            .63:
16496                       00003D8B            .5F:
16497                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16498 3D8B           31C0                       xor	ax,ax
16499 3D8D           8946         F6            mov	-$A[bp],ax
16500                                           !BCC_EOS
16501                                           !BCC_EOS
16502                                           ! 1825   {outb(0x3ce,i);
16503 3D90           EB           38            jmp .66
16504                       00003D92            .67:
16505                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16506 3D92           FF76         F6            push	-$A[bp]
16507                                           ! Debug: list int = const $3CE (used reg = )
16508 3D95           B8                   03CE  mov	ax,#$3CE
16509 3D98           50                         push	ax
16510                                           ! Debug: func () void = outb+0 (used reg = )
16511 3D99           E8         3DC5            call	_outb
16512 3D9C           83C4                   04  add	sp,*4
16513                                           !BCC_EOS
16514                                           ! 1826    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16515                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16516 3D9F           8A46         F9            mov	al,-7[bp]
16517 3DA2           30E4                       xor	ah,ah
16518 3DA4           B1                     06  mov	cl,*6
16519 3DA6           D3E0                       shl	ax,cl
16520 3DA8           89C3                       mov	bx,ax
16521 3DAA           81C3                 0267  add	bx,#_video_param_table
16522                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16523 3DAE           8B46         F6            mov	ax,-$A[bp]
16524 3DB1           01C3                       add	bx,ax
16525                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16526 3DB3           8A47         37            mov	al,$37[bx]
16527 3DB6           30E4                       xor	ah,ah
16528 3DB8           50                         push	ax
16529                                           ! Debug: list int = const $3CF (used reg = )
16530 3DB9           B8                   03CF  mov	ax,#$3CF
16531 3DBC           50                         push	ax
16532                                           ! Debug: func () void = outb+0 (used reg = )
16533 3DBD           E8         3DA1            call	_outb
16534 3DC0           83C4                   04  add	sp,*4
16535                                           !BCC_EOS
16536                                           ! 1827   }
16537                                           ! 1828  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16538                       00003DC3            .65:
16539                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16540 3DC3           8B46         F6            mov	ax,-$A[bp]
16541 3DC6           40                         inc	ax
16542 3DC7           8946         F6            mov	-$A[bp],ax
16543                       00003DCA            .66:
16544                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16545 3DCA           8B46         F6            mov	ax,-$A[bp]
16546 3DCD           3D                   0008  cmp	ax,*8
16547 3DD0           76           C0            jbe	.67
16548                       00003DD2            .68:
16549                       00003DD2            .64:
16550                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16551 3DD2           8A46         FE            mov	al,-2[bp]
16552 3DD5           30E4                       xor	ah,ah
16553 3DD7           B1                     03  mov	cl,*3
16554 3DD9           D3E0                       shl	ax,cl
16555 3DDB           89C3                       mov	bx,ax
16556 3DDD           81C3                 01D3  add	bx,#_vga_modes
16557                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
16558 3DE1           8A47         02            mov	al,2[bx]
16559 3DE4           3C                     01  cmp	al,*1
16560 3DE6           75           05            jne 	.69
16561                       00003DE8            .6A:
16562 3DE8           B8                   03B4  mov	ax,#$3B4
16563 3DEB           EB           03            jmp .6B
16564                       00003DED            .69:
16565 3DED           B8                   03D4  mov	ax,#$3D4
16566                       00003DF0            .6B:
16567                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
16568 3DF0           8946         EA            mov	-$16[bp],ax
16569                                           !BCC_EOS
16570                                           ! 1829  outw(crtc_addr,0x0011);
16571                                           ! Debug: list int = const $11 (used reg = )
16572 3DF3           B8                   0011  mov	ax,*$11
16573 3DF6           50                         push	ax
16574                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16575 3DF7           FF76         EA            push	-$16[bp]
16576                                           ! Debug: func () void = outw+0 (used reg = )
16577 3DFA           E8         3D74            call	_outw
16578 3DFD           83C4                   04  add	sp,*4
16579                                           !BCC_EOS
16580                                           ! 1830  for(i=0;i<=0x18;i++)
16581                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16582 3E00           31C0                       xor	ax,ax
16583 3E02           8946         F6            mov	-$A[bp],ax
16584                                           !BCC_EOS
16585                                           !BCC_EOS
16586                                           ! 1831   {outb(crtc_addr,i);
16587 3E05           EB           38            jmp .6E
16588                       00003E07            .6F:
16589                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16590 3E07           FF76         F6            push	-$A[bp]
16591                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16592 3E0A           FF76         EA            push	-$16[bp]
16593                                           ! Debug: func () void = outb+0 (used reg = )
16594 3E0D           E8         3D51            call	_outb
16595 3E10           83C4                   04  add	sp,*4
16596                                           !BCC_EOS
16597                                           ! 1832    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
16598                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16599 3E13           8A46         F9            mov	al,-7[bp]
16600 3E16           30E4                       xor	ah,ah
16601 3E18           B1                     06  mov	cl,*6
16602 3E1A           D3E0                       shl	ax,cl
16603 3E1C           89C3                       mov	bx,ax
16604 3E1E           81C3                 0267  add	bx,#_video_param_table
16605                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
16606 3E22           8B46         F6            mov	ax,-$A[bp]
16607 3E25           01C3                       add	bx,ax
16608                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
16609 3E27           8A47         0A            mov	al,$A[bx]
16610 3E2A           30E4                       xor	ah,ah
16611 3E2C           50                         push	ax
16612                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16613 3E2D           8B46         EA            mov	ax,-$16[bp]
16614                                           ! Debug: list unsigned int = ax+1 (used reg = )
16615 3E30           40                         inc	ax
16616 3E31           50                         push	ax
16617                                           ! Debug: func () void = outb+0 (used reg = )
16618 3E32           E8         3D2C            call	_outb
16619 3E35           83C4                   04  add	sp,*4
16620                                           !BCC_EOS
16621                                           ! 1833   }
16622                                           ! 1834  outb(0x3c2,video_param_table[vpti].miscreg);
16623                       00003E38            .6D:
16624                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16625 3E38           8B46         F6            mov	ax,-$A[bp]
16626 3E3B           40                         inc	ax
16627 3E3C           8946         F6            mov	-$A[bp],ax
16628                       00003E3F            .6E:
16629                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
16630 3E3F           8B46         F6            mov	ax,-$A[bp]
16631 3E42           3D                   0018  cmp	ax,*$18
16632 3E45           76           C0            jbe	.6F
16633                       00003E47            .70:
16634                       00003E47            .6C:
16635                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16636 3E47           8A46         F9            mov	al,-7[bp]
16637 3E4A           30E4                       xor	ah,ah
16638 3E4C           B1                     06  mov	cl,*6
16639 3E4E           D3E0                       shl	ax,cl
16640 3E50           89C3                       mov	bx,ax
16641 3E52           81C3                 0267  add	bx,#_video_param_table
16642                                           ! Debug: list unsigned char = [bx+9] (used reg = )
16643 3E56           8A47         09            mov	al,9[bx]
16644 3E59           30E4                       xor	ah,ah
16645 3E5B           50                         push	ax
16646                                           ! Debug: list int = const $3C2 (used reg = )
16647 3E5C           B8                   03C2  mov	ax,#$3C2
16648 3E5F           50                         push	ax
16649                                           ! Debug: func () void = outb+0 (used reg = )
16650 3E60           E8         3CFE            call	_outb
16651 3E63           83C4                   04  add	sp,*4
16652                                           !BCC_EOS
16653                                           ! 1835  outb(0x3c0,0x20);
16654                                           ! Debug: list int = const $20 (used reg = )
16655 3E66           B8                   0020  mov	ax,*$20
16656 3E69           50                         push	ax
16657                                           ! Debug: list int = const $3C0 (used reg = )
16658 3E6A           B8                   03C0  mov	ax,#$3C0
16659 3E6D           50                         push	ax
16660                                           ! Debug: func () void = outb+0 (used reg = )
16661 3E6E           E8         3CF0            call	_outb
16662 3E71           83C4                   04  add	sp,*4
16663                                           !BCC_EOS
16664                                           ! 1836  inb(0x3da);
16665                                           ! Debug: list int = const $3DA (used reg = )
16666 3E74           B8                   03DA  mov	ax,#$3DA
16667 3E77           50                         push	ax
16668                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16669 3E78           E8         3CD0            call	_inb
16670 3E7B           44                         inc	sp
16671 3E7C           44                         inc	sp
16672                                           !BCC_EOS
16673                                           ! 1837  if(noclearmem==0x00)
16674                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
16675 3E7D           8A46         FF            mov	al,-1[bp]
16676 3E80           84C0                       test	al,al
16677 3E82         0F85         00C1            bne 	.71
16678                       00003E86            .72:
16679                                           ! 1838   {
16680                                           ! 1839    if(vga_modes[line].class==0x00)
16681                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16682 3E86           8A46         FE            mov	al,-2[bp]
16683 3E89           30E4                       xor	ah,ah
16684 3E8B           B1                     03  mov	cl,*3
16685 3E8D           D3E0                       shl	ax,cl
16686 3E8F           89C3                       mov	bx,ax
16687 3E91           81C3                 01D3  add	bx,#_vga_modes
16688                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
16689 3E95           8A47         01            mov	al,1[bx]
16690 3E98           84C0                       test	al,al
16691 3E9A           75           26            jne 	.73
16692                       00003E9C            .74:
16693                                           ! 1840     {
16694                                           ! 1841      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
16695                                           ! Debug: list int = const $4000 (used reg = )
16696 3E9C           B8                   4000  mov	ax,#$4000
16697 3E9F           50                         push	ax
16698                                           ! Debug: list int = const $720 (used reg = )
16699 3EA0           B8                   0720  mov	ax,#$720
16700 3EA3           50                         push	ax
16701                                           ! Debug: list int = const 0 (used reg = )
16702 3EA4           31C0                       xor	ax,ax
16703 3EA6           50                         push	ax
16704                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16705 3EA7           8A46         FE            mov	al,-2[bp]
16706 3EAA           30E4                       xor	ah,ah
16707 3EAC           B1                     03  mov	cl,*3
16708 3EAE           D3E0                       shl	ax,cl
16709 3EB0           89C3                       mov	bx,ax
16710 3EB2           81C3                 01D3  add	bx,#_vga_modes
16711                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16712 3EB6           FF77         04            push	4[bx]
16713                                           ! Debug: func () void = memsetw+0 (used reg = )
16714 3EB9           E8         3BB4            call	_memsetw
16715 3EBC           83C4                   08  add	sp,*8
16716                                           !BCC_EOS
16717                                           ! 1842     }
16718                                           ! 1843    else
16719                                           ! 1844     {
16720 3EBF           E9         0085            br 	.75
16721                       00003EC2            .73:
16722                                           ! 1845      if(mode<0x0d)
16723                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
16724 3EC2           8A46         04            mov	al,4[bp]
16725 3EC5           3C                     0D  cmp	al,*$D
16726 3EC7           73           24            jae 	.76
16727                       00003EC9            .77:
16728                                           ! 1846       {
16729                                           ! 1847        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
16730                                           ! Debug: list int = const $4000 (used reg = )
16731 3EC9           B8                   4000  mov	ax,#$4000
16732 3ECC           50                         push	ax
16733                                           ! Debug: list int = const 0 (used reg = )
16734 3ECD           31C0                       xor	ax,ax
16735 3ECF           50                         push	ax
16736                                           ! Debug: list int = const 0 (used reg = )
16737 3ED0           31C0                       xor	ax,ax
16738 3ED2           50                         push	ax
16739                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16740 3ED3           8A46         FE            mov	al,-2[bp]
16741 3ED6           30E4                       xor	ah,ah
16742 3ED8           B1                     03  mov	cl,*3
16743 3EDA           D3E0                       shl	ax,cl
16744 3EDC           89C3                       mov	bx,ax
16745 3EDE           81C3                 01D3  add	bx,#_vga_modes
16746                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16747 3EE2           FF77         04            push	4[bx]
16748                                           ! Debug: func () void = memsetw+0 (used reg = )
16749 3EE5           E8         3B88            call	_memsetw
16750 3EE8           83C4                   08  add	sp,*8
16751                                           !BCC_EOS
16752                                           ! 1848       }
16753                                           ! 1849      else
16754                                           ! 1850       {
16755 3EEB           EB           5A            jmp .78
16756                       00003EED            .76:
16757                                           ! 1851        outb( 0x3c4, 0x02 );
16758                                           ! Debug: list int = const 2 (used reg = )
16759 3EED           B8                   0002  mov	ax,*2
16760 3EF0           50                         push	ax
16761                                           ! Debug: list int = const $3C4 (used reg = )
16762 3EF1           B8                   03C4  mov	ax,#$3C4
16763 3EF4           50                         push	ax
16764                                           ! Debug: func () void = outb+0 (used reg = )
16765 3EF5           E8         3C69            call	_outb
16766 3EF8           83C4                   04  add	sp,*4
16767                                           !BCC_EOS
16768                                           ! 1852        mmask = inb( 0x3c5 );
16769                                           ! Debug: list int = const $3C5 (used reg = )
16770 3EFB           B8                   03C5  mov	ax,#$3C5
16771 3EFE           50                         push	ax
16772                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16773 3EFF           E8         3C49            call	_inb
16774 3F02           44                         inc	sp
16775 3F03           44                         inc	sp
16776                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
16777 3F04           8846         FD            mov	-3[bp],al
16778                                           !BCC_EOS
16779                                           ! 1853        outb( 0x3c5, 0x0f );
16780                                           ! Debug: list int = const $F (used reg = )
16781 3F07           B8                   000F  mov	ax,*$F
16782 3F0A           50                         push	ax
16783                                           ! Debug: list int = const $3C5 (used reg = )
16784 3F0B           B8                   03C5  mov	ax,#$3C5
16785 3F0E           50                         push	ax
16786                                           ! Debug: func () void = outb+0 (used reg = )
16787 3F0F           E8         3C4F            call	_outb
16788 3F12           83C4                   04  add	sp,*4
16789                                           !BCC_EOS
16790                                           ! 1854        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
16791                                           ! Debug: list unsigned int = const $8000 (used reg = )
16792 3F15           B8                   8000  mov	ax,#$8000
16793 3F18           50                         push	ax
16794                                           ! Debug: list int = const 0 (used reg = )
16795 3F19           31C0                       xor	ax,ax
16796 3F1B           50                         push	ax
16797                                           ! Debug: list int = const 0 (used reg = )
16798 3F1C           31C0                       xor	ax,ax
16799 3F1E           50                         push	ax
16800                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16801 3F1F           8A46         FE            mov	al,-2[bp]
16802 3F22           30E4                       xor	ah,ah
16803 3F24           B1                     03  mov	cl,*3
16804 3F26           D3E0                       shl	ax,cl
16805 3F28           89C3                       mov	bx,ax
16806 3F2A           81C3                 01D3  add	bx,#_vga_modes
16807                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16808 3F2E           FF77         04            push	4[bx]
16809                                           ! Debug: func () void = memsetw+0 (used reg = )
16810 3F31           E8         3B3C            call	_memsetw
16811 3F34           83C4                   08  add	sp,*8
16812                                           !BCC_EOS
16813                                           ! 1855        outb( 0x3c5, mmask );
16814                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
16815 3F37           8A46         FD            mov	al,-3[bp]
16816 3F3A           30E4                       xor	ah,ah
16817 3F3C           50                         push	ax
16818                                           ! Debug: list int = const $3C5 (used reg = )
16819 3F3D           B8                   03C5  mov	ax,#$3C5
16820 3F40           50                         push	ax
16821                                           ! Debug: func () void = outb+0 (used reg = )
16822 3F41           E8         3C1D            call	_outb
16823 3F44           83C4                   04  add	sp,*4
16824                                           !BCC_EOS
16825                                           ! 1856       }
16826                                           ! 1857     }
16827                       00003F47            .78:
16828                                           ! 1858   }
16829                       00003F47            .75:
16830                                           ! 1859  write_byte(0x40,0x49,mode);
16831                       00003F47            .71:
16832                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16833 3F47           8A46         04            mov	al,4[bp]
16834 3F4A           30E4                       xor	ah,ah
16835 3F4C           50                         push	ax
16836                                           ! Debug: list int = const $49 (used reg = )
16837 3F4D           B8                   0049  mov	ax,*$49
16838 3F50           50                         push	ax
16839                                           ! Debug: list int = const $40 (used reg = )
16840 3F51           B8                   0040  mov	ax,*$40
16841 3F54           50                         push	ax
16842                                           ! Debug: func () void = write_byte+0 (used reg = )
16843 3F55           E8         3BC3            call	_write_byte
16844 3F58           83C4                   06  add	sp,*6
16845                                           !BCC_EOS
16846                                           ! 1860  write_word(0x40,0x4A,twidth);
16847                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
16848 3F5B           FF76         F4            push	-$C[bp]
16849                                           ! Debug: list int = const $4A (used reg = )
16850 3F5E           B8                   004A  mov	ax,*$4A
16851 3F61           50                         push	ax
16852                                           ! Debug: list int = const $40 (used reg = )
16853 3F62           B8                   0040  mov	ax,*$40
16854 3F65           50                         push	ax
16855                                           ! Debug: func () void = write_word+0 (used reg = )
16856 3F66           E8         3BCA            call	_write_word
16857 3F69           83C4                   06  add	sp,*6
16858                                           !BCC_EOS
16859                                           ! 1861  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
16860                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16861 3F6C           8A46         F9            mov	al,-7[bp]
16862 3F6F           30E4                       xor	ah,ah
16863 3F71           B1                     06  mov	cl,*6
16864 3F73           D3E0                       shl	ax,cl
16865 3F75           89C3                       mov	bx,ax
16866 3F77           81C3                 0267  add	bx,#_video_param_table
16867                                           ! Debug: address unsigned char = [bx+3] (used reg = )
16868                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
16869                                           ! Debug: list unsigned short = [bx+3] (used reg = )
16870 3F7B           FF77         03            push	3[bx]
16871                                           ! Debug: list int = const $4C (used reg = )
16872 3F7E           B8                   004C  mov	ax,*$4C
16873 3F81           50                         push	ax
16874                                           ! Debug: list int = const $40 (used reg = )
16875 3F82           B8                   0040  mov	ax,*$40
16876 3F85           50                         push	ax
16877                                           ! Debug: func () void = write_word+0 (used reg = )
16878 3F86           E8         3BAA            call	_write_word
16879 3F89           83C4                   06  add	sp,*6
16880                                           !BCC_EOS
16881                                           ! 1862  write_word(0x40,0x63,crtc_addr);
16882                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
16883 3F8C           FF76         EA            push	-$16[bp]
16884                                           ! Debug: list int = const $63 (used reg = )
16885 3F8F           B8                   0063  mov	ax,*$63
16886 3F92           50                         push	ax
16887                                           ! Debug: list int = const $40 (used reg = )
16888 3F93           B8                   0040  mov	ax,*$40
16889 3F96           50                         push	ax
16890                                           ! Debug: func () void = write_word+0 (used reg = )
16891 3F97           E8         3B99            call	_write_word
16892 3F9A           83C4                   06  add	sp,*6
16893                                           !BCC_EOS
16894                                           ! 1863  write_byte(0x40,0x84,theightm1);
16895                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
16896 3F9D           FF76         F2            push	-$E[bp]
16897                                           ! Debug: list int = const $84 (used reg = )
16898 3FA0           B8                   0084  mov	ax,#$84
16899 3FA3           50                         push	ax
16900                                           ! Debug: list int = const $40 (used reg = )
16901 3FA4           B8                   0040  mov	ax,*$40
16902 3FA7           50                         push	ax
16903                                           ! Debug: func () void = write_byte+0 (used reg = )
16904 3FA8           E8         3B70            call	_write_byte
16905 3FAB           83C4                   06  add	sp,*6
16906                                           !BCC_EOS
16907                                           ! 1864  write_word(0x40,0x85,cheight);
16908                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
16909 3FAE           FF76         F0            push	-$10[bp]
16910                                           ! Debug: list int = const $85 (used reg = )
16911 3FB1           B8                   0085  mov	ax,#$85
16912 3FB4           50                         push	ax
16913                                           ! Debug: list int = const $40 (used reg = )
16914 3FB5           B8                   0040  mov	ax,*$40
16915 3FB8           50                         push	ax
16916                                           ! Debug: func () void = write_word+0 (used reg = )
16917 3FB9           E8         3B77            call	_write_word
16918 3FBC           83C4                   06  add	sp,*6
16919                                           !BCC_EOS
16920                                           ! 1865  write_byte(0x40,0x87,(0x60|noclearmem));
16921                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
16922                                           ! Debug: expression subtree swapping
16923 3FBF           8A46         FF            mov	al,-1[bp]
16924 3FC2           0C                     60  or	al,*$60
16925                                           ! Debug: list unsigned char = al+0 (used reg = )
16926 3FC4           30E4                       xor	ah,ah
16927 3FC6           50                         push	ax
16928                                           ! Debug: list int = const $87 (used reg = )
16929 3FC7           B8                   0087  mov	ax,#$87
16930 3FCA           50                         push	ax
16931                                           ! Debug: list int = const $40 (used reg = )
16932 3FCB           B8                   0040  mov	ax,*$40
16933 3FCE           50                         push	ax
16934                                           ! Debug: func () void = write_byte+0 (used reg = )
16935 3FCF           E8         3B49            call	_write_byte
16936 3FD2           83C4                   06  add	sp,*6
16937                                           !BCC_EOS
16938                                           ! 1866  write_byte(0x40,0x88,0xF9);
16939                                           ! Debug: list int = const $F9 (used reg = )
16940 3FD5           B8                   00F9  mov	ax,#$F9
16941 3FD8           50                         push	ax
16942                                           ! Debug: list int = const $88 (used reg = )
16943 3FD9           B8                   0088  mov	ax,#$88
16944 3FDC           50                         push	ax
16945                                           ! Debug: list int = const $40 (used reg = )
16946 3FDD           B8                   0040  mov	ax,*$40
16947 3FE0           50                         push	ax
16948                                           ! Debug: func () void = write_byte+0 (used reg = )
16949 3FE1           E8         3B37            call	_write_byte
16950 3FE4           83C4                   06  add	sp,*6
16951                                           !BCC_EOS
16952                                           ! 1867  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
16953                                           ! Debug: list int = const $89 (used reg = )
16954 3FE7           B8                   0089  mov	ax,#$89
16955 3FEA           50                         push	ax
16956                                           ! Debug: list int = const $40 (used reg = )
16957 3FEB           B8                   0040  mov	ax,*$40
16958 3FEE           50                         push	ax
16959                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16960 3FEF           E8         3B03            call	_read_byte
16961 3FF2           83C4                   04  add	sp,*4
16962                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
16963 3FF5           24                     7F  and	al,*$7F
16964                                           ! Debug: list unsigned char = al+0 (used reg = )
16965 3FF7           30E4                       xor	ah,ah
16966 3FF9           50                         push	ax
16967                                           ! Debug: list int = const $89 (used reg = )
16968 3FFA           B8                   0089  mov	ax,#$89
16969 3FFD           50                         push	ax
16970                                           ! Debug: list int = const $40 (used reg = )
16971 3FFE           B8                   0040  mov	ax,*$40
16972 4001           50                         push	ax
16973                                           ! Debug: func () void = write_byte+0 (used reg = )
16974 4002           E8         3B16            call	_write_byte
16975 4005           83C4                   06  add	sp,*6
16976                                           !BCC_EOS
16977                                           ! 1868  write_byte(0x40,0x8A,0x08);
16978                                           ! Debug: list int = const 8 (used reg = )
16979 4008           B8                   0008  mov	ax,*8
16980 400B           50                         push	ax
16981                                           ! Debug: list int = const $8A (used reg = )
16982 400C           B8                   008A  mov	ax,#$8A
16983 400F           50                         push	ax
16984                                           ! Debug: list int = const $40 (used reg = )
16985 4010           B8                   0040  mov	ax,*$40
16986 4013           50                         push	ax
16987                                           ! Debug: func () void = write_byte+0 (used reg = )
16988 4014           E8         3B04            call	_write_byte
16989 4017           83C4                   06  add	sp,*6
16990                                           !BCC_EOS
16991                                           ! 1869  write_word(0x40,0xA8, video_save_pointer_table);
16992                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
16993 401A           BB                   35D0  mov	bx,#_video_save_pointer_table
16994 401D           53                         push	bx
16995                                           ! Debug: list int = const $A8 (used reg = )
16996 401E           B8                   00A8  mov	ax,#$A8
16997 4021           50                         push	ax
16998                                           ! Debug: list int = const $40 (used reg = )
16999 4022           B8                   0040  mov	ax,*$40
17000 4025           50                         push	ax
17001                                           ! Debug: func () void = write_word+0 (used reg = )
17002 4026           E8         3B0A            call	_write_word
17003 4029           83C4                   06  add	sp,*6
17004                                           !BCC_EOS
17005                                           ! 1870  write_word(0x40,0xA8 +2, 0xc000);
17006                                           ! Debug: list unsigned int = const $C000 (used reg = )
17007 402C           B8                   C000  mov	ax,#$C000
17008 402F           50                         push	ax
17009                                           ! Debug: list int = const $AA (used reg = )
17010 4030           B8                   00AA  mov	ax,#$AA
17011 4033           50                         push	ax
17012                                           ! Debug: list int = const $40 (used reg = )
17013 4034           B8                   0040  mov	ax,*$40
17014 4037           50                         push	ax
17015                                           ! Debug: func () void = write_word+0 (used reg = )
17016 4038           E8         3AF8            call	_write_word
17017 403B           83C4                   06  add	sp,*6
17018                                           !BCC_EOS
17019                                           ! 1871  write_byte(0x40,0x65,0x00);
17020                                           ! Debug: list int = const 0 (used reg = )
17021 403E           31C0                       xor	ax,ax
17022 4040           50                         push	ax
17023                                           ! Debug: list int = const $65 (used reg = )
17024 4041           B8                   0065  mov	ax,*$65
17025 4044           50                         push	ax
17026                                           ! Debug: list int = const $40 (used reg = )
17027 4045           B8                   0040  mov	ax,*$40
17028 4048           50                         push	ax
17029                                           ! Debug: func () void = write_byte+0 (used reg = )
17030 4049           E8         3ACF            call	_write_byte
17031 404C           83C4                   06  add	sp,*6
17032                                           !BCC_EOS
17033                                           ! 1872  write_byte(0x40,0x66,0x00);
17034                                           ! Debug: list int = const 0 (used reg = )
17035 404F           31C0                       xor	ax,ax
17036 4051           50                         push	ax
17037                                           ! Debug: list int = const $66 (used reg = )
17038 4052           B8                   0066  mov	ax,*$66
17039 4055           50                         push	ax
17040                                           ! Debug: list int = const $40 (used reg = )
17041 4056           B8                   0040  mov	ax,*$40
17042 4059           50                         push	ax
17043                                           ! Debug: func () void = write_byte+0 (used reg = )
17044 405A           E8         3ABE            call	_write_byte
17045 405D           83C4                   06  add	sp,*6
17046                                           !BCC_EOS
17047                                           ! 1873  if(vga_modes[line].class==0x00)
17048                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17049 4060           8A46         FE            mov	al,-2[bp]
17050 4063           30E4                       xor	ah,ah
17051 4065           B1                     03  mov	cl,*3
17052 4067           D3E0                       shl	ax,cl
17053 4069           89C3                       mov	bx,ax
17054 406B           81C3                 01D3  add	bx,#_vga_modes
17055                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17056 406F           8A47         01            mov	al,1[bx]
17057 4072           84C0                       test	al,al
17058 4074           75           0E            jne 	.79
17059                       00004076            .7A:
17060                                           ! 1874   {
17061                                           ! 1875    biosfn_set_cursor_shape(0x06,0x07);
17062                                           ! Debug: list int = const 7 (used reg = )
17063 4076           B8                   0007  mov	ax,*7
17064 4079           50                         push	ax
17065                                           ! Debug: list int = const 6 (used reg = )
17066 407A           B8                   0006  mov	ax,*6
17067 407D           50                         push	ax
17068                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17069 407E           E8         00BA            call	_biosfn_set_cursor_shape
17070 4081           83C4                   04  add	sp,*4
17071                                           !BCC_EOS
17072                                           ! 1876   }
17073                                           ! 1877  for(i=0;i<8;i++)
17074                       00004084            .79:
17075                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17076 4084           31C0                       xor	ax,ax
17077 4086           8946         F6            mov	-$A[bp],ax
17078                                           !BCC_EOS
17079                                           !BCC_EOS
17080                                           ! 1878   biosfn_set_cursor_pos(i,0x0000);
17081 4089           EB           13            jmp .7D
17082                       0000408B            .7E:
17083                                           ! Debug: list int = const 0 (used reg = )
17084 408B           31C0                       xor	ax,ax
17085 408D           50                         push	ax
17086                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17087 408E           FF76         F6            push	-$A[bp]
17088                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17089 4091           E8         01C2            call	_biosfn_set_cursor_pos
17090 4094           83C4                   04  add	sp,*4
17091                                           !BCC_EOS
17092                                           ! 1879  biosfn_set_active_page(0x00);
17093                       00004097            .7C:
17094                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17095 4097           8B46         F6            mov	ax,-$A[bp]
17096 409A           40                         inc	ax
17097 409B           8946         F6            mov	-$A[bp],ax
17098                       0000409E            .7D:
17099                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17100 409E           8B46         F6            mov	ax,-$A[bp]
17101 40A1           3D                   0008  cmp	ax,*8
17102 40A4           72           E5            jb 	.7E
17103                       000040A6            .7F:
17104                       000040A6            .7B:
17105                                           ! Debug: list int = const 0 (used reg = )
17106 40A6           31C0                       xor	ax,ax
17107 40A8           50                         push	ax
17108                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17109 40A9           E8         031F            call	_biosfn_set_active_page
17110 40AC           44                         inc	sp
17111 40AD           44                         inc	sp
17112                                           !BCC_EOS
17113                                           ! 1880  if(vga_modes[line].class==0x00)
17114                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17115 40AE           8A46         FE            mov	al,-2[bp]
17116 40B1           30E4                       xor	ah,ah
17117 40B3           B1                     03  mov	cl,*3
17118 40B5           D3E0                       shl	ax,cl
17119 40B7           89C3                       mov	bx,ax
17120 40B9           81C3                 01D3  add	bx,#_vga_modes
17121                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17122 40BD           8A47         01            mov	al,1[bx]
17123 40C0           84C0                       test	al,al
17124 40C2           75           0E            jne 	.80
17125                       000040C4            .81:
17126                                           ! 1881   {
17127                                           ! 1882 #asm
17128                                           !BCC_EOS
17129                                           !BCC_ASM
17130                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17131                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17132                       00000008            _biosfn_set_video_mode.theightm1	set	8
17133                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17134                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17135                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17136                       00000014            _biosfn_set_video_mode.line	set	$14
17137                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17138                       00000006            _biosfn_set_video_mode.cheight	set	6
17139                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17140                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17141                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17142                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17143                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17144                       0000000C            _biosfn_set_video_mode.i	set	$C
17145                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17146                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17147                       00000004            .biosfn_set_video_mode.mode	set	4
17148                       00000010            _biosfn_set_video_mode.palette	set	$10
17149                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17150                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17151                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17152                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17153                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17154                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17155                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17156                       00000013            _biosfn_set_video_mode.mmask	set	$13
17157                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17158                                             ;; copy and activate 8x16 font
17159 40C4           B8                   1104    mov ax, #0x1104
17160 40C7           B3                     00    mov bl, #0x00
17161 40C9           CD                     10    int #0x10
17162 40CB           B8                   1103    mov ax, #0x1103
17163 40CE           B3                     00    mov bl, #0x00
17164 40D0           CD                     10    int #0x10
17165                                           ! 1890 endasm
17166                                           !BCC_ENDASM
17167                                           !BCC_EOS
17168                                           ! 1891   }
17169                                           ! 1892 #asm
17170                       000040D2            .80:
17171                                           !BCC_EOS
17172                                           !BCC_ASM
17173                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17174                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17175                       00000008            _biosfn_set_video_mode.theightm1	set	8
17176                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17177                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17178                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17179                       00000014            _biosfn_set_video_mode.line	set	$14
17180                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17181                       00000006            _biosfn_set_video_mode.cheight	set	6
17182                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17183                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17184                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17185                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17186                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17187                       0000000C            _biosfn_set_video_mode.i	set	$C
17188                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17189                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17190                       00000004            .biosfn_set_video_mode.mode	set	4
17191                       00000010            _biosfn_set_video_mode.palette	set	$10
17192                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17193                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17194                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17195                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17196                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17197                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17198                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17199                       00000013            _biosfn_set_video_mode.mmask	set	$13
17200                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17201                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   40D2           1E                           push ds
 +a   40D3           31C0                         xor ax, ax
 +a   40D5           8ED8                         mov ds, ax
 +a   40D7           B8                   1337    mov ax,  #_vgafont8+128*8
 +a   40DA           A3         007C              mov 0x1f*4, ax
 +a   40DD           B8                   C000    mov ax,  #0xC000
 +a   40E0           A3         007E              mov 0x1f*4+2, ax
 +a   40E3           1F                           pop ds
17202                                           ! 1894 endasm
17203                                           !BCC_ENDASM
17204                                           !BCC_EOS
17205                                           ! 1895   switch(cheight)
17206 40E4           8B46         F0            mov	ax,-$10[bp]
17207                                           ! 1896    {case 8:
17208 40E7           E9         003E            br 	.84
17209                                           ! 1897 #asm
17210                       000040EA            .85:
17211                                           !BCC_EOS
17212                                           !BCC_ASM
17213                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17214                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17215                       00000008            _biosfn_set_video_mode.theightm1	set	8
17216                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17217                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17218                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17219                       00000014            _biosfn_set_video_mode.line	set	$14
17220                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17221                       00000006            _biosfn_set_video_mode.cheight	set	6
17222                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17223                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17224                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17225                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17226                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17227                       0000000C            _biosfn_set_video_mode.i	set	$C
17228                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17229                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17230                       00000004            .biosfn_set_video_mode.mode	set	4
17231                       00000010            _biosfn_set_video_mode.palette	set	$10
17232                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17233                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17234                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17235                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17236                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17237                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17238                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17239                       00000013            _biosfn_set_video_mode.mmask	set	$13
17240                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17241                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   40EA           1E                           push ds
 +a   40EB           31C0                         xor ax, ax
 +a   40ED           8ED8                         mov ds, ax
 +a   40EF           B8                   0F37    mov ax,  #_vgafont8
 +a   40F2           A3         010C              mov 0x43*4, ax
 +a   40F5           B8                   C000    mov ax,  #0xC000
 +a   40F8           A3         010E              mov 0x43*4+2, ax
 +a   40FB           1F                           pop ds
17242                                           ! 1899 endasm
17243                                           !BCC_ENDASM
17244                                           !BCC_EOS
17245                                           ! 1900      break;
17246 40FC           EB           39            jmp .82
17247                                           !BCC_EOS
17248                                           ! 1901     case 14:
17249                                           ! 1902 #asm
17250                       000040FE            .86:
17251                                           !BCC_EOS
17252                                           !BCC_ASM
17253                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17254                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17255                       00000008            _biosfn_set_video_mode.theightm1	set	8
17256                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17257                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17258                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17259                       00000014            _biosfn_set_video_mode.line	set	$14
17260                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17261                       00000006            _biosfn_set_video_mode.cheight	set	6
17262                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17263                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17264                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17265                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17266                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17267                       0000000C            _biosfn_set_video_mode.i	set	$C
17268                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17269                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17270                       00000004            .biosfn_set_video_mode.mode	set	4
17271                       00000010            _biosfn_set_video_mode.palette	set	$10
17272                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17273                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17274                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17275                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17276                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17277                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17278                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17279                       00000013            _biosfn_set_video_mode.mmask	set	$13
17280                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17281                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   40FE           1E                           push ds
 +a   40FF           31C0                         xor ax, ax
 +a   4101           8ED8                         mov ds, ax
 +a   4103           B8                   1737    mov ax,  #_vgafont14
 +a   4106           A3         010C              mov 0x43*4, ax
 +a   4109           B8                   C000    mov ax,  #0xC000
 +a   410C           A3         010E              mov 0x43*4+2, ax
 +a   410F           1F                           pop ds
17282                                           ! 1904 endasm
17283                                           !BCC_ENDASM
17284                                           !BCC_EOS
17285                                           ! 1905      break;
17286 4110           EB           25            jmp .82
17287                                           !BCC_EOS
17288                                           ! 1906     case 16:
17289                                           ! 1907 #asm
17290                       00004112            .87:
17291                                           !BCC_EOS
17292                                           !BCC_ASM
17293                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17294                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17295                       00000008            _biosfn_set_video_mode.theightm1	set	8
17296                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17297                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17298                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17299                       00000014            _biosfn_set_video_mode.line	set	$14
17300                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17301                       00000006            _biosfn_set_video_mode.cheight	set	6
17302                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17303                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17304                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17305                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17306                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17307                       0000000C            _biosfn_set_video_mode.i	set	$C
17308                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17309                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17310                       00000004            .biosfn_set_video_mode.mode	set	4
17311                       00000010            _biosfn_set_video_mode.palette	set	$10
17312                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17313                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17314                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17315                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17316                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17317                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17318                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17319                       00000013            _biosfn_set_video_mode.mmask	set	$13
17320                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17321                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4112           1E                           push ds
 +a   4113           31C0                         xor ax, ax
 +a   4115           8ED8                         mov ds, ax
 +a   4117           B8                   2537    mov ax,  #_vgafont16
 +a   411A           A3         010C              mov 0x43*4, ax
 +a   411D           B8                   C000    mov ax,  #0xC000
 +a   4120           A3         010E              mov 0x43*4+2, ax
 +a   4123           1F                           pop ds
17322                                           ! 1909 endasm
17323                                           !BCC_ENDASM
17324                                           !BCC_EOS
17325                                           ! 1910      break;
17326 4124           EB           11            jmp .82
17327                                           !BCC_EOS
17328                                           ! 1911    }
17329                                           ! 1912 }
17330 4126           EB           0F            jmp .82
17331                       00004128            .84:
17332 4128           2D                   0008  sub	ax,*8
17333 412B           74           BD            je 	.85
17334 412D           2D                   0006  sub	ax,*6
17335 4130           74           CC            je 	.86
17336 4132           2D                   0002  sub	ax,*2
17337 4135           74           DB            je 	.87
17338                       00004137            .82:
17339                       FFFFFFE8            ..FFFD	=	-$18
17340 4137           89EC                       mov	sp,bp
17341 4139           5D                         pop	bp
17342 413A           C3                         ret
17343                                           ! 1913 static void biosfn_set_cursor_shape (CH,CL)
17344                                           ! Register BX used in function biosfn_set_video_mode
17345                                           ! 1914 Bit8u CH;Bit8u CL;
17346                       0000413B            _biosfn_set_cursor_shape:
17347                                           !BCC_EOS
17348                                           !BCC_EOS
17349                                           ! 1915 {Bit16u cheight,curs,crtc_addr;
17350                                           !BCC_EOS
17351                                           ! 1916  Bit8u modeset_ctl;
17352                                           !BCC_EOS
17353                                           ! 1917  CH&=0x3f;
17354 413B           55                         push	bp
17355 413C           89E5                       mov	bp,sp
17356 413E           83C4                   F8  add	sp,*-8
17357                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17358 4141           8A46         04            mov	al,4[bp]
17359 4144           24                     3F  and	al,*$3F
17360 4146           8846         04            mov	4[bp],al
17361                                           !BCC_EOS
17362                                           ! 1918  CL&=0x1f;
17363                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17364 4149           8A46         06            mov	al,6[bp]
17365 414C           24                     1F  and	al,*$1F
17366 414E           8846         06            mov	6[bp],al
17367                                           !BCC_EOS
17368                                           ! 1919  curs=(CH<<8)+CL;
17369                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17370 4151           8A46         04            mov	al,4[bp]
17371 4154           30E4                       xor	ah,ah
17372 4156           88C4                       mov	ah,al
17373 4158           30C0                       xor	al,al
17374                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17375 415A           0246         06            add	al,6[bp]
17376 415D           80D4                   00  adc	ah,*0
17377                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17378 4160           8946         FC            mov	-4[bp],ax
17379                                           !BCC_EOS
17380                                           ! 1920  write_word(0x40,0x60,curs);
17381                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17382 4163           FF76         FC            push	-4[bp]
17383                                           ! Debug: list int = const $60 (used reg = )
17384 4166           B8                   0060  mov	ax,*$60
17385 4169           50                         push	ax
17386                                           ! Debug: list int = const $40 (used reg = )
17387 416A           B8                   0040  mov	ax,*$40
17388 416D           50                         push	ax
17389                                           ! Debug: func () void = write_word+0 (used reg = )
17390 416E           E8         39C2            call	_write_word
17391 4171           83C4                   06  add	sp,*6
17392                                           !BCC_EOS
17393                                           ! 1921  modeset_ctl=read_byte(0x40,0x89);
17394                                           ! Debug: list int = const $89 (used reg = )
17395 4174           B8                   0089  mov	ax,#$89
17396 4177           50                         push	ax
17397                                           ! Debug: list int = const $40 (used reg = )
17398 4178           B8                   0040  mov	ax,*$40
17399 417B           50                         push	ax
17400                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17401 417C           E8         3976            call	_read_byte
17402 417F           83C4                   04  add	sp,*4
17403                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17404 4182           8846         F9            mov	-7[bp],al
17405                                           !BCC_EOS
17406                                           ! 1922  cheight = read_word(0x40,0x85);
17407                                           ! Debug: list int = const $85 (used reg = )
17408 4185           B8                   0085  mov	ax,#$85
17409 4188           50                         push	ax
17410                                           ! Debug: list int = const $40 (used reg = )
17411 4189           B8                   0040  mov	ax,*$40
17412 418C           50                         push	ax
17413                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17414 418D           E8         3978            call	_read_word
17415 4190           83C4                   04  add	sp,*4
17416                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17417 4193           8946         FE            mov	-2[bp],ax
17418                                           !BCC_EOS
17419                                           ! 1923  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17420                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17421 4196           8A46         F9            mov	al,-7[bp]
17422 4199           24                     01  and	al,*1
17423 419B           84C0                       test	al,al
17424 419D           74           66            je  	.88
17425                       0000419F            .8C:
17426                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17427 419F           8B46         FE            mov	ax,-2[bp]
17428 41A2           3D                   0008  cmp	ax,*8
17429 41A5           76           5E            jbe 	.88
17430                       000041A7            .8B:
17431                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17432 41A7           8A46         06            mov	al,6[bp]
17433 41AA           3C                     08  cmp	al,*8
17434 41AC           73           57            jae 	.88
17435                       000041AE            .8A:
17436                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17437 41AE           8A46         04            mov	al,4[bp]
17438 41B1           3C                     20  cmp	al,*$20
17439 41B3           73           50            jae 	.88
17440                       000041B5            .89:
17441                                           ! 1924   {
17442                                           ! 1925    if(CL!=(CH+1))
17443                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17444 41B5           8A46         04            mov	al,4[bp]
17445 41B8           30E4                       xor	ah,ah
17446                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17447                                           ! Debug: expression subtree swapping
17448 41BA           40                         inc	ax
17449 41BB           50                         push	ax
17450 41BC           8A46         06            mov	al,6[bp]
17451 41BF           30E4                       xor	ah,ah
17452 41C1           3B46         F6            cmp	ax,-$A[bp]
17453 41C4           8D66         F8            lea	sp,-8[bp]
17454 41C7           74           15            je  	.8D
17455                       000041C9            .8E:
17456                                           ! 1926     {
17457                                           ! 1927      CH = ((CH+1) * cheight / 8) -1;
17458                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17459 41C9           8A46         04            mov	al,4[bp]
17460 41CC           30E4                       xor	ah,ah
17461                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17462 41CE           40                         inc	ax
17463 41CF           8B4E         FE            mov	cx,-2[bp]
17464 41D2           F7E9                       imul	cx
17465                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17466 41D4           B1                     03  mov	cl,*3
17467 41D6           D3E8                       shr	ax,cl
17468                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17469                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17470 41D8           48                         dec	ax
17471 41D9           8846         04            mov	4[bp],al
17472                                           !BCC_EOS
17473                                           ! 1928     }
17474                                           ! 1929    else
17475                                           ! 1930     {
17476 41DC           EB           14            jmp .8F
17477                       000041DE            .8D:
17478                                           ! 1931      CH = ((CL+1) * cheight / 8) - 2;
17479                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17480 41DE           8A46         06            mov	al,6[bp]
17481 41E1           30E4                       xor	ah,ah
17482                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17483 41E3           40                         inc	ax
17484 41E4           8B4E         FE            mov	cx,-2[bp]
17485 41E7           F7E9                       imul	cx
17486                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17487 41E9           B1                     03  mov	cl,*3
17488 41EB           D3E8                       shr	ax,cl
17489                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17490                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17491 41ED           48                         dec	ax
17492 41EE           48                         dec	ax
17493 41EF           8846         04            mov	4[bp],al
17494                                           !BCC_EOS
17495                                           ! 1932     }
17496                                           ! 1933    CL = ((CL+1) * cheight / 8) - 1;
17497                       000041F2            .8F:
17498                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17499 41F2           8A46         06            mov	al,6[bp]
17500 41F5           30E4                       xor	ah,ah
17501                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17502 41F7           40                         inc	ax
17503 41F8           8B4E         FE            mov	cx,-2[bp]
17504 41FB           F7E9                       imul	cx
17505                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17506 41FD           B1                     03  mov	cl,*3
17507 41FF           D3E8                       shr	ax,cl
17508                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17509                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17510 4201           48                         dec	ax
17511 4202           8846         06            mov	6[bp],al
17512                                           !BCC_EOS
17513                                           ! 1934   }
17514                                           ! 1935  crtc_addr=read_word(0x40,0x63);
17515                       00004205            .88:
17516                                           ! Debug: list int = const $63 (used reg = )
17517 4205           B8                   0063  mov	ax,*$63
17518 4208           50                         push	ax
17519                                           ! Debug: list int = const $40 (used reg = )
17520 4209           B8                   0040  mov	ax,*$40
17521 420C           50                         push	ax
17522                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17523 420D           E8         38F8            call	_read_word
17524 4210           83C4                   04  add	sp,*4
17525                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17526 4213           8946         FA            mov	-6[bp],ax
17527                                           !BCC_EOS
17528                                           ! 1936  outb(crtc_addr,0x0a);
17529                                           ! Debug: list int = const $A (used reg = )
17530 4216           B8                   000A  mov	ax,*$A
17531 4219           50                         push	ax
17532                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17533 421A           FF76         FA            push	-6[bp]
17534                                           ! Debug: func () void = outb+0 (used reg = )
17535 421D           E8         3941            call	_outb
17536 4220           83C4                   04  add	sp,*4
17537                                           !BCC_EOS
17538                                           ! 1937  outb(crtc_addr+1,CH);
17539                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17540 4223           8A46         04            mov	al,4[bp]
17541 4226           30E4                       xor	ah,ah
17542 4228           50                         push	ax
17543                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17544 4229           8B46         FA            mov	ax,-6[bp]
17545                                           ! Debug: list unsigned int = ax+1 (used reg = )
17546 422C           40                         inc	ax
17547 422D           50                         push	ax
17548                                           ! Debug: func () void = outb+0 (used reg = )
17549 422E           E8         3930            call	_outb
17550 4231           83C4                   04  add	sp,*4
17551                                           !BCC_EOS
17552                                           ! 1938  outb(crtc_addr,0x0b);
17553                                           ! Debug: list int = const $B (used reg = )
17554 4234           B8                   000B  mov	ax,*$B
17555 4237           50                         push	ax
17556                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17557 4238           FF76         FA            push	-6[bp]
17558                                           ! Debug: func () void = outb+0 (used reg = )
17559 423B           E8         3923            call	_outb
17560 423E           83C4                   04  add	sp,*4
17561                                           !BCC_EOS
17562                                           ! 1939  outb(crtc_addr+1,CL);
17563                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
17564 4241           8A46         06            mov	al,6[bp]
17565 4244           30E4                       xor	ah,ah
17566 4246           50                         push	ax
17567                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17568 4247           8B46         FA            mov	ax,-6[bp]
17569                                           ! Debug: list unsigned int = ax+1 (used reg = )
17570 424A           40                         inc	ax
17571 424B           50                         push	ax
17572                                           ! Debug: func () void = outb+0 (used reg = )
17573 424C           E8         3912            call	_outb
17574 424F           83C4                   04  add	sp,*4
17575                                           !BCC_EOS
17576                                           ! 1940 }
17577 4252           89EC                       mov	sp,bp
17578 4254           5D                         pop	bp
17579 4255           C3                         ret
17580                                           ! 1941 static void biosfn_set_cursor_pos (page, cursor)
17581                                           ! 1942 Bit8u page;Bit16u cursor;
17582                       00004256            _biosfn_set_cursor_pos:
17583                                           !BCC_EOS
17584                                           !BCC_EOS
17585                                           ! 1943 {
17586                                           ! 1944  Bit8u xcurs,ycurs,current;
17587                                           !BCC_EOS
17588                                           ! 1945  Bit16u nbcols,nbrows,address,crtc_addr;
17589                                           !BCC_EOS
17590                                           ! 1946  if(page>7)return;
17591 4256           55                         push	bp
17592 4257           89E5                       mov	bp,sp
17593 4259           83C4                   F4  add	sp,*-$C
17594                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
17595 425C           8A46         04            mov	al,4[bp]
17596 425F           3C                     07  cmp	al,*7
17597 4261           76           04            jbe 	.90
17598                       00004263            .91:
17599 4263           89EC                       mov	sp,bp
17600 4265           5D                         pop	bp
17601 4266           C3                         ret
17602                                           !BCC_EOS
17603                                           ! 1947  write_word(0x40, 0x50 +2*page, cursor);
17604                       00004267            .90:
17605                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
17606 4267           FF76         06            push	6[bp]
17607                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
17608                                           ! Debug: expression subtree swapping
17609 426A           8A46         04            mov	al,4[bp]
17610 426D           30E4                       xor	ah,ah
17611 426F           D1E0                       shl	ax,*1
17612                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17613                                           ! Debug: expression subtree swapping
17614                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17615 4271           05                   0050  add	ax,*$50
17616 4274           50                         push	ax
17617                                           ! Debug: list int = const $40 (used reg = )
17618 4275           B8                   0040  mov	ax,*$40
17619 4278           50                         push	ax
17620                                           ! Debug: func () void = write_word+0 (used reg = )
17621 4279           E8         38B7            call	_write_word
17622 427C           83C4                   06  add	sp,*6
17623                                           !BCC_EOS
17624                                           ! 1948  current=read_byte(0x40,0x62);
17625                                           ! Debug: list int = const $62 (used reg = )
17626 427F           B8                   0062  mov	ax,*$62
17627 4282           50                         push	ax
17628                                           ! Debug: list int = const $40 (used reg = )
17629 4283           B8                   0040  mov	ax,*$40
17630 4286           50                         push	ax
17631                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17632 4287           E8         386B            call	_read_byte
17633 428A           83C4                   04  add	sp,*4
17634                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
17635 428D           8846         FD            mov	-3[bp],al
17636                                           !BCC_EOS
17637                                           ! 1949  if(page==current)
17638                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
17639 4290           8A46         04            mov	al,4[bp]
17640 4293           3A46         FD            cmp	al,-3[bp]
17641 4296         0F85         00B8            bne 	.92
17642                       0000429A            .93:
17643                                           ! 1950   {
17644                                           ! 1951    nbcols=read_word(0x40,0x4A);
17645                                           ! Debug: list int = const $4A (used reg = )
17646 429A           B8                   004A  mov	ax,*$4A
17647 429D           50                         push	ax
17648                                           ! Debug: list int = const $40 (used reg = )
17649 429E           B8                   0040  mov	ax,*$40
17650 42A1           50                         push	ax
17651                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17652 42A2           E8         3863            call	_read_word
17653 42A5           83C4                   04  add	sp,*4
17654                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
17655 42A8           8946         FA            mov	-6[bp],ax
17656                                           !BCC_EOS
17657                                           ! 1952    nbrows=read_byte(0x40,0x84)+1;
17658                                           ! Debug: list int = const $84 (used reg = )
17659 42AB           B8                   0084  mov	ax,#$84
17660 42AE           50                         push	ax
17661                                           ! Debug: list int = const $40 (used reg = )
17662 42AF           B8                   0040  mov	ax,*$40
17663 42B2           50                         push	ax
17664                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17665 42B3           E8         383F            call	_read_byte
17666 42B6           83C4                   04  add	sp,*4
17667                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
17668 42B9           30E4                       xor	ah,ah
17669                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
17670 42BB           40                         inc	ax
17671 42BC           8946         F8            mov	-8[bp],ax
17672                                           !BCC_EOS
17673                                           ! 1953    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
17674                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
17675 42BF           8A46         06            mov	al,6[bp]
17676                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
17677 42C2           8846         FF            mov	-1[bp],al
17678                                           !BCC_EOS
17679                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
17680 42C5           8B46         06            mov	ax,6[bp]
17681 42C8           30C0                       xor	al,al
17682                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17683 42CA           88E0                       mov	al,ah
17684 42CC           30E4                       xor	ah,ah
17685                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
17686 42CE           8846         FE            mov	-2[bp],al
17687                                           !BCC_EOS
17688                                           ! 1954    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
17689                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
17690 42D1           8A46         FE            mov	al,-2[bp]
17691 42D4           30E4                       xor	ah,ah
17692 42D6           8B4E         FA            mov	cx,-6[bp]
17693 42D9           F7E9                       imul	cx
17694 42DB           50                         push	ax
17695                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
17696 42DC           8B46         FA            mov	ax,-6[bp]
17697 42DF           8B4E         F8            mov	cx,-8[bp]
17698 42E2           F7E9                       imul	cx
17699                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
17700 42E4           0C                     FF  or	al,#$FF
17701                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
17702                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
17703 42E6           89C3                       mov	bx,ax
17704 42E8           8A46         04            mov	al,4[bp]
17705 42EB           30E4                       xor	ah,ah
17706 42ED           93                         xchg	ax,bx
17707 42EE           40                         inc	ax
17708 42EF           89D9                       mov	cx,bx
17709 42F1           F7E9                       imul	cx
17710                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
17711 42F3           0246         FF            add	al,-1[bp]
17712 42F6           80D4                   00  adc	ah,*0
17713                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
17714 42F9           0346         F2            add	ax,-$E[bp]
17715 42FC           44                         inc	sp
17716 42FD           44                         inc	sp
17717                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
17718 42FE           8946         F6            mov	-$A[bp],ax
17719                                           !BCC_EOS
17720                                           ! 1955    crtc_addr=read_word(0x40,0x63);
17721                                           ! Debug: list int = const $63 (used reg = )
17722 4301           B8                   0063  mov	ax,*$63
17723 4304           50                         push	ax
17724                                           ! Debug: list int = const $40 (used reg = )
17725 4305           B8                   0040  mov	ax,*$40
17726 4308           50                         push	ax
17727                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17728 4309           E8         37FC            call	_read_word
17729 430C           83C4                   04  add	sp,*4
17730                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
17731 430F           8946         F4            mov	-$C[bp],ax
17732                                           !BCC_EOS
17733                                           ! 1956    outb(crtc_addr,0x0e);
17734                                           ! Debug: list int = const $E (used reg = )
17735 4312           B8                   000E  mov	ax,*$E
17736 4315           50                         push	ax
17737                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17738 4316           FF76         F4            push	-$C[bp]
17739                                           ! Debug: func () void = outb+0 (used reg = )
17740 4319           E8         3845            call	_outb
17741 431C           83C4                   04  add	sp,*4
17742                                           !BCC_EOS
17743                                           ! 1957    outb(crtc_addr+1,(address&0xff00)>>8);
17744                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
17745 431F           8B46         F6            mov	ax,-$A[bp]
17746 4322           30C0                       xor	al,al
17747                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17748 4324           88E0                       mov	al,ah
17749 4326           30E4                       xor	ah,ah
17750                                           ! Debug: list unsigned int = ax+0 (used reg = )
17751 4328           50                         push	ax
17752                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17753 4329           8B46         F4            mov	ax,-$C[bp]
17754                                           ! Debug: list unsigned int = ax+1 (used reg = )
17755 432C           40                         inc	ax
17756 432D           50                         push	ax
17757                                           ! Debug: func () void = outb+0 (used reg = )
17758 432E           E8         3830            call	_outb
17759 4331           83C4                   04  add	sp,*4
17760                                           !BCC_EOS
17761                                           ! 1958    outb(crtc_addr,0x0f);
17762                                           ! Debug: list int = const $F (used reg = )
17763 4334           B8                   000F  mov	ax,*$F
17764 4337           50                         push	ax
17765                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17766 4338           FF76         F4            push	-$C[bp]
17767                                           ! Debug: func () void = outb+0 (used reg = )
17768 433B           E8         3823            call	_outb
17769 433E           83C4                   04  add	sp,*4
17770                                           !BCC_EOS
17771                                           ! 1959    outb(crtc_addr+1,address&0x00ff);
17772                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
17773 4341           8A46         F6            mov	al,-$A[bp]
17774                                           ! Debug: list unsigned char = al+0 (used reg = )
17775 4344           30E4                       xor	ah,ah
17776 4346           50                         push	ax
17777                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17778 4347           8B46         F4            mov	ax,-$C[bp]
17779                                           ! Debug: list unsigned int = ax+1 (used reg = )
17780 434A           40                         inc	ax
17781 434B           50                         push	ax
17782                                           ! Debug: func () void = outb+0 (used reg = )
17783 434C           E8         3812            call	_outb
17784 434F           83C4                   04  add	sp,*4
17785                                           !BCC_EOS
17786                                           ! 1960   }
17787                                           ! 1961 }
17788                       00004352            .92:
17789 4352           89EC                       mov	sp,bp
17790 4354           5D                         pop	bp
17791 4355           C3                         ret
17792                                           ! 1962 static void biosfn_get_cursor_pos (page,shape, pos)
17793                                           ! Register BX used in function biosfn_set_cursor_pos
17794                                           ! 1963 Bit8u page;Bit16u *shape;Bit16u *pos;
17795                       00004356            _biosfn_get_cursor_pos:
17796                                           !BCC_EOS
17797                                           !BCC_EOS
17798                                           !BCC_EOS
17799                                           ! 1964 {
17800                                           ! 1965  Bit16u ss=get_SS();
17801 4356           55                         push	bp
17802 4357           89E5                       mov	bp,sp
17803 4359           4C                         dec	sp
17804 435A           4C                         dec	sp
17805                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
17806 435B           E8         3823            call	_get_SS
17807                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
17808 435E           8946         FE            mov	-2[bp],ax
17809                                           !BCC_EOS
17810                                           ! 1966  write_word(ss, shape, 0);
17811                                           ! Debug: list int = const 0 (used reg = )
17812 4361           31C0                       xor	ax,ax
17813 4363           50                         push	ax
17814                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17815 4364           FF76         06            push	6[bp]
17816                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17817 4367           FF76         FE            push	-2[bp]
17818                                           ! Debug: func () void = write_word+0 (used reg = )
17819 436A           E8         37C6            call	_write_word
17820 436D           83C4                   06  add	sp,*6
17821                                           !BCC_EOS
17822                                           ! 1967  write_word(ss, pos, 0);
17823                                           ! Debug: list int = const 0 (used reg = )
17824 4370           31C0                       xor	ax,ax
17825 4372           50                         push	ax
17826                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17827 4373           FF76         08            push	8[bp]
17828                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17829 4376           FF76         FE            push	-2[bp]
17830                                           ! Debug: func () void = write_word+0 (used reg = )
17831 4379           E8         37B7            call	_write_word
17832 437C           83C4                   06  add	sp,*6
17833                                           !BCC_EOS
17834                                           ! 1968  if(page>7)return;
17835                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
17836 437F           8A46         04            mov	al,4[bp]
17837 4382           3C                     07  cmp	al,*7
17838 4384           76           04            jbe 	.94
17839                       00004386            .95:
17840 4386           89EC                       mov	sp,bp
17841 4388           5D                         pop	bp
17842 4389           C3                         ret
17843                                           !BCC_EOS
17844                                           ! 1969  write_word(ss,shape,read_word(0x40,0x60));
17845                       0000438A            .94:
17846                                           ! Debug: list int = const $60 (used reg = )
17847 438A           B8                   0060  mov	ax,*$60
17848 438D           50                         push	ax
17849                                           ! Debug: list int = const $40 (used reg = )
17850 438E           B8                   0040  mov	ax,*$40
17851 4391           50                         push	ax
17852                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17853 4392           E8         3773            call	_read_word
17854 4395           83C4                   04  add	sp,*4
17855                                           ! Debug: list unsigned short = ax+0 (used reg = )
17856 4398           50                         push	ax
17857                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17858 4399           FF76         06            push	6[bp]
17859                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17860 439C           FF76         FE            push	-2[bp]
17861                                           ! Debug: func () void = write_word+0 (used reg = )
17862 439F           E8         3791            call	_write_word
17863 43A2           83C4                   06  add	sp,*6
17864                                           !BCC_EOS
17865                                           ! 1970  write_word(ss,pos,read_word(0x40,0x50 +page*2));
17866                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
17867 43A5           8A46         04            mov	al,4[bp]
17868 43A8           30E4                       xor	ah,ah
17869 43AA           D1E0                       shl	ax,*1
17870                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17871                                           ! Debug: expression subtree swapping
17872                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17873 43AC           05                   0050  add	ax,*$50
17874 43AF           50                         push	ax
17875                                           ! Debug: list int = const $40 (used reg = )
17876 43B0           B8                   0040  mov	ax,*$40
17877 43B3           50                         push	ax
17878                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17879 43B4           E8         3751            call	_read_word
17880 43B7           83C4                   04  add	sp,*4
17881                                           ! Debug: list unsigned short = ax+0 (used reg = )
17882 43BA           50                         push	ax
17883                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17884 43BB           FF76         08            push	8[bp]
17885                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17886 43BE           FF76         FE            push	-2[bp]
17887                                           ! Debug: func () void = write_word+0 (used reg = )
17888 43C1           E8         376F            call	_write_word
17889 43C4           83C4                   06  add	sp,*6
17890                                           !BCC_EOS
17891                                           ! 1971 }
17892 43C7           89EC                       mov	sp,bp
17893 43C9           5D                         pop	bp
17894 43CA           C3                         ret
17895                                           ! 1972 static void biosfn_set_active_page (page)
17896                                           ! 1973 Bit8u page;
17897                       000043CB            _biosfn_set_active_page:
17898                                           !BCC_EOS
17899                                           ! 1974 {
17900                                           ! 1975  Bit16u cursor,dummy,crtc_addr;
17901                                           !BCC_EOS
17902                                           ! 1976  
17903                                           ! 1976 Bit16u nbcols,nbrows,address;
17904                                           !BCC_EOS
17905                                           ! 1977  Bit8u mode,line;
17906                                           !BCC_EOS
17907                                           ! 1978  if(page>7)return;
17908 43CB           55                         push	bp
17909 43CC           89E5                       mov	bp,sp
17910 43CE           83C4                   F2  add	sp,*-$E
17911                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
17912 43D1           8A46         04            mov	al,4[bp]
17913 43D4           3C                     07  cmp	al,*7
17914 43D6           76           04            jbe 	.96
17915                       000043D8            .97:
17916 43D8           89EC                       mov	sp,bp
17917 43DA           5D                         pop	bp
17918 43DB           C3                         ret
17919                                           !BCC_EOS
17920                                           ! 1979  mode=read_byte(0x40,0x49);
17921                       000043DC            .96:
17922                                           ! Debug: list int = const $49 (used reg = )
17923 43DC           B8                   0049  mov	ax,*$49
17924 43DF           50                         push	ax
17925                                           ! Debug: list int = const $40 (used reg = )
17926 43E0           B8                   0040  mov	ax,*$40
17927 43E3           50                         push	ax
17928                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17929 43E4           E8         370E            call	_read_byte
17930 43E7           83C4                   04  add	sp,*4
17931                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
17932 43EA           8846         F3            mov	-$D[bp],al
17933                                           !BCC_EOS
17934                                           ! 1980  line=find_vga_entry(mode);
17935                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
17936 43ED           8A46         F3            mov	al,-$D[bp]
17937 43F0           30E4                       xor	ah,ah
17938 43F2           50                         push	ax
17939                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
17940 43F3           E8         3613            call	_find_vga_entry
17941 43F6           44                         inc	sp
17942 43F7           44                         inc	sp
17943                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
17944 43F8           8846         F2            mov	-$E[bp],al
17945                                           !BCC_EOS
17946                                           ! 1981  if(line==0xFF)return;
17947                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
17948 43FB           8A46         F2            mov	al,-$E[bp]
17949 43FE           3C                     FF  cmp	al,#$FF
17950 4400           75           04            jne 	.98
17951                       00004402            .99:
17952 4402           89EC                       mov	sp,bp
17953 4404           5D                         pop	bp
17954 4405           C3                         ret
17955                                           !BCC_EOS
17956                                           ! 1982  biosfn_get_cursor_pos(page,&dummy,&cursor);
17957                       00004406            .98:
17958                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
17959 4406           8D5E         FE            lea	bx,-2[bp]
17960 4409           53                         push	bx
17961                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
17962 440A           8D5E         FC            lea	bx,-4[bp]
17963 440D           53                         push	bx
17964                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
17965 440E           8A46         04            mov	al,4[bp]
17966 4411           30E4                       xor	ah,ah
17967 4413           50                         push	ax
17968                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
17969 4414           E8         FF3F            call	_biosfn_get_cursor_pos
17970 4417           83C4                   06  add	sp,*6
17971                                           !BCC_EOS
17972                                           ! 1983  if(vga_modes[line].class==0x00)
17973                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
17974 441A           8A46         F2            mov	al,-$E[bp]
17975 441D           30E4                       xor	ah,ah
17976 441F           B1                     03  mov	cl,*3
17977 4421           D3E0                       shl	ax,cl
17978 4423           89C3                       mov	bx,ax
17979 4425           81C3                 01D3  add	bx,#_vga_modes
17980                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17981 4429           8A47         01            mov	al,1[bx]
17982 442C           84C0                       test	al,al
17983 442E           75           6E            jne 	.9A
17984                       00004430            .9B:
17985                                           ! 1984   {
17986                                           ! 1985    nbcols=read_word(0x40,0x4A);
17987                                           ! Debug: list int = const $4A (used reg = )
17988 4430           B8                   004A  mov	ax,*$4A
17989 4433           50                         push	ax
17990                                           ! Debug: list int = const $40 (used reg = )
17991 4434           B8                   0040  mov	ax,*$40
17992 4437           50                         push	ax
17993                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17994 4438           E8         36CD            call	_read_word
17995 443B           83C4                   04  add	sp,*4
17996                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
17997 443E           8946         F8            mov	-8[bp],ax
17998                                           !BCC_EOS
17999                                           ! 1986    nbrows=read_byte(0x40,0x84)+1;
18000                                           ! Debug: list int = const $84 (used reg = )
18001 4441           B8                   0084  mov	ax,#$84
18002 4444           50                         push	ax
18003                                           ! Debug: list int = const $40 (used reg = )
18004 4445           B8                   0040  mov	ax,*$40
18005 4448           50                         push	ax
18006                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18007 4449           E8         36A9            call	_read_byte
18008 444C           83C4                   04  add	sp,*4
18009                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18010 444F           30E4                       xor	ah,ah
18011                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18012 4451           40                         inc	ax
18013 4452           8946         F6            mov	-$A[bp],ax
18014                                           !BCC_EOS
18015                                           ! 1987    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18016                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18017 4455           8B46         F8            mov	ax,-8[bp]
18018 4458           8B4E         F6            mov	cx,-$A[bp]
18019 445B           F7E9                       imul	cx
18020                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18021 445D           D1E0                       shl	ax,*1
18022                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18023 445F           0C                     FF  or	al,#$FF
18024                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18025                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18026 4461           89C3                       mov	bx,ax
18027 4463           8A46         04            mov	al,4[bp]
18028 4466           30E4                       xor	ah,ah
18029 4468           93                         xchg	ax,bx
18030 4469           40                         inc	ax
18031 446A           89D9                       mov	cx,bx
18032 446C           F7E9                       imul	cx
18033                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18034 446E           8946         F4            mov	-$C[bp],ax
18035                                           !BCC_EOS
18036                                           ! 1988    write_word(0x40,0x4E,address);
18037                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18038 4471           FF76         F4            push	-$C[bp]
18039                                           ! Debug: list int = const $4E (used reg = )
18040 4474           B8                   004E  mov	ax,*$4E
18041 4477           50                         push	ax
18042                                           ! Debug: list int = const $40 (used reg = )
18043 4478           B8                   0040  mov	ax,*$40
18044 447B           50                         push	ax
18045                                           ! Debug: func () void = write_word+0 (used reg = )
18046 447C           E8         36B4            call	_write_word
18047 447F           83C4                   06  add	sp,*6
18048                                           !BCC_EOS
18049                                           ! 1989    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18050                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18051 4482           8B46         F8            mov	ax,-8[bp]
18052 4485           8B4E         F6            mov	cx,-$A[bp]
18053 4488           F7E9                       imul	cx
18054                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18055 448A           0C                     FF  or	al,#$FF
18056                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18057                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18058 448C           89C3                       mov	bx,ax
18059 448E           8A46         04            mov	al,4[bp]
18060 4491           30E4                       xor	ah,ah
18061 4493           93                         xchg	ax,bx
18062 4494           40                         inc	ax
18063 4495           89D9                       mov	cx,bx
18064 4497           F7E9                       imul	cx
18065                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18066 4499           8946         F4            mov	-$C[bp],ax
18067                                           !BCC_EOS
18068                                           ! 1990   }
18069                                           ! 1991  else
18070                                           ! 1992   {
18071 449C           EB           24            jmp .9C
18072                       0000449E            .9A:
18073                                           ! 1993    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18074                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18075 449E           8A46         F2            mov	al,-$E[bp]
18076 44A1           30E4                       xor	ah,ah
18077 44A3           89C3                       mov	bx,ax
18078                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18079 44A5           8A87       0253            mov	al,_line_to_vpti[bx]
18080 44A9           30E4                       xor	ah,ah
18081 44AB           B1                     06  mov	cl,*6
18082 44AD           D3E0                       shl	ax,cl
18083 44AF           89C3                       mov	bx,ax
18084 44B1           81C3                 0267  add	bx,#_video_param_table
18085                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18086                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18087                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18088 44B5           8A46         04            mov	al,4[bp]
18089 44B8           30E4                       xor	ah,ah
18090 44BA           8B4F         03            mov	cx,3[bx]
18091 44BD           F7E9                       imul	cx
18092                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18093 44BF           8946         F4            mov	-$C[bp],ax
18094                                           !BCC_EOS
18095                                           ! 1994   }
18096                                           ! 1995  crtc_addr=read_word(0x40,0x63);
18097                       000044C2            .9C:
18098                                           ! Debug: list int = const $63 (used reg = )
18099 44C2           B8                   0063  mov	ax,*$63
18100 44C5           50                         push	ax
18101                                           ! Debug: list int = const $40 (used reg = )
18102 44C6           B8                   0040  mov	ax,*$40
18103 44C9           50                         push	ax
18104                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18105 44CA           E8         363B            call	_read_word
18106 44CD           83C4                   04  add	sp,*4
18107                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18108 44D0           8946         FA            mov	-6[bp],ax
18109                                           !BCC_EOS
18110                                           ! 1996  outb(crtc_addr,0x0c);
18111                                           ! Debug: list int = const $C (used reg = )
18112 44D3           B8                   000C  mov	ax,*$C
18113 44D6           50                         push	ax
18114                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18115 44D7           FF76         FA            push	-6[bp]
18116                                           ! Debug: func () void = outb+0 (used reg = )
18117 44DA           E8         3684            call	_outb
18118 44DD           83C4                   04  add	sp,*4
18119                                           !BCC_EOS
18120                                           ! 1997  outb(crtc_addr+1,(address&0xff00)>>8);
18121                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18122 44E0           8B46         F4            mov	ax,-$C[bp]
18123 44E3           30C0                       xor	al,al
18124                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18125 44E5           88E0                       mov	al,ah
18126 44E7           30E4                       xor	ah,ah
18127                                           ! Debug: list unsigned int = ax+0 (used reg = )
18128 44E9           50                         push	ax
18129                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18130 44EA           8B46         FA            mov	ax,-6[bp]
18131                                           ! Debug: list unsigned int = ax+1 (used reg = )
18132 44ED           40                         inc	ax
18133 44EE           50                         push	ax
18134                                           ! Debug: func () void = outb+0 (used reg = )
18135 44EF           E8         366F            call	_outb
18136 44F2           83C4                   04  add	sp,*4
18137                                           !BCC_EOS
18138                                           ! 1998  outb(crtc_addr,0x0d);
18139                                           ! Debug: list int = const $D (used reg = )
18140 44F5           B8                   000D  mov	ax,*$D
18141 44F8           50                         push	ax
18142                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18143 44F9           FF76         FA            push	-6[bp]
18144                                           ! Debug: func () void = outb+0 (used reg = )
18145 44FC           E8         3662            call	_outb
18146 44FF           83C4                   04  add	sp,*4
18147                                           !BCC_EOS
18148                                           ! 1999  outb(crtc_addr+1,address&0x00ff);
18149                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18150 4502           8A46         F4            mov	al,-$C[bp]
18151                                           ! Debug: list unsigned char = al+0 (used reg = )
18152 4505           30E4                       xor	ah,ah
18153 4507           50                         push	ax
18154                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18155 4508           8B46         FA            mov	ax,-6[bp]
18156                                           ! Debug: list unsigned int = ax+1 (used reg = )
18157 450B           40                         inc	ax
18158 450C           50                         push	ax
18159                                           ! Debug: func () void = outb+0 (used reg = )
18160 450D           E8         3651            call	_outb
18161 4510           83C4                   04  add	sp,*4
18162                                           !BCC_EOS
18163                                           ! 2000  write_byte(0x40,0x62,page);
18164                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18165 4513           8A46         04            mov	al,4[bp]
18166 4516           30E4                       xor	ah,ah
18167 4518           50                         push	ax
18168                                           ! Debug: list int = const $62 (used reg = )
18169 4519           B8                   0062  mov	ax,*$62
18170 451C           50                         push	ax
18171                                           ! Debug: list int = const $40 (used reg = )
18172 451D           B8                   0040  mov	ax,*$40
18173 4520           50                         push	ax
18174                                           ! Debug: func () void = write_byte+0 (used reg = )
18175 4521           E8         35F7            call	_write_byte
18176 4524           83C4                   06  add	sp,*6
18177                                           !BCC_EOS
18178                                           ! 2001  biosfn_set_cursor_pos(page,cursor);
18179                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18180 4527           FF76         FE            push	-2[bp]
18181                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18182 452A           8A46         04            mov	al,4[bp]
18183 452D           30E4                       xor	ah,ah
18184 452F           50                         push	ax
18185                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18186 4530           E8         FD23            call	_biosfn_set_cursor_pos
18187 4533           83C4                   04  add	sp,*4
18188                                           !BCC_EOS
18189                                           ! 2002 }
18190 4536           89EC                       mov	sp,bp
18191 4538           5D                         pop	bp
18192 4539           C3                         ret
18193                                           ! 2003 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18194                                           ! Register BX used in function biosfn_set_active_page
18195                                           ! 2004 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18196                       0000453A            _vgamem_copy_pl4:
18197                                           !BCC_EOS
18198                                           !BCC_EOS
18199                                           !BCC_EOS
18200                                           !BCC_EOS
18201                                           !BCC_EOS
18202                                           !BCC_EOS
18203                                           ! 2005 {
18204                                           ! 2006  Bit16u src,dest;
18205                                           !BCC_EOS
18206                                           ! 2007  Bit8u i;
18207                                           !BCC_EOS
18208                                           ! 2008  src=ysrc*cheight*nbcols+xstart;
18209 453A           55                         push	bp
18210 453B           89E5                       mov	bp,sp
18211 453D           83C4                   FA  add	sp,*-6
18212                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18213 4540           8A46         0E            mov	al,$E[bp]
18214 4543           30E4                       xor	ah,ah
18215 4545           89C3                       mov	bx,ax
18216 4547           8A46         06            mov	al,6[bp]
18217 454A           30E4                       xor	ah,ah
18218 454C           89D9                       mov	cx,bx
18219 454E           F7E9                       imul	cx
18220                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18221 4550           89C3                       mov	bx,ax
18222 4552           8A46         0C            mov	al,$C[bp]
18223 4555           30E4                       xor	ah,ah
18224 4557           93                         xchg	ax,bx
18225 4558           89D9                       mov	cx,bx
18226 455A           F7E9                       imul	cx
18227                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18228 455C           0246         04            add	al,4[bp]
18229 455F           80D4                   00  adc	ah,*0
18230                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18231 4562           8946         FE            mov	-2[bp],ax
18232                                           !BCC_EOS
18233                                           ! 2009  dest=ydest*cheight*nbcols+xstart;
18234                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18235 4565           8A46         0E            mov	al,$E[bp]
18236 4568           30E4                       xor	ah,ah
18237 456A           89C3                       mov	bx,ax
18238 456C           8A46         08            mov	al,8[bp]
18239 456F           30E4                       xor	ah,ah
18240 4571           89D9                       mov	cx,bx
18241 4573           F7E9                       imul	cx
18242                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18243 4575           89C3                       mov	bx,ax
18244 4577           8A46         0C            mov	al,$C[bp]
18245 457A           30E4                       xor	ah,ah
18246 457C           93                         xchg	ax,bx
18247 457D           89D9                       mov	cx,bx
18248 457F           F7E9                       imul	cx
18249                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18250 4581           0246         04            add	al,4[bp]
18251 4584           80D4                   00  adc	ah,*0
18252                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18253 4587           8946         FC            mov	-4[bp],ax
18254                                           !BCC_EOS
18255                                           ! 2010  outw(0x3ce, 0x0105);
18256                                           ! Debug: list int = const $105 (used reg = )
18257 458A           B8                   0105  mov	ax,#$105
18258 458D           50                         push	ax
18259                                           ! Debug: list int = const $3CE (used reg = )
18260 458E           B8                   03CE  mov	ax,#$3CE
18261 4591           50                         push	ax
18262                                           ! Debug: func () void = outw+0 (used reg = )
18263 4592           E8         35DC            call	_outw
18264 4595           83C4                   04  add	sp,*4
18265                                           !BCC_EOS
18266                                           ! 2011  for(i=0;i<cheight;i++)
18267                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18268 4598           30C0                       xor	al,al
18269 459A           8846         FB            mov	-5[bp],al
18270                                           !BCC_EOS
18271                                           !BCC_EOS
18272                                           ! 2012   {
18273 459D           EB           43            jmp .9F
18274                       0000459F            .A0:
18275                                           ! 2013    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18276                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18277 459F           8A46         0A            mov	al,$A[bp]
18278 45A2           30E4                       xor	ah,ah
18279 45A4           50                         push	ax
18280                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18281 45A5           8A46         0C            mov	al,$C[bp]
18282 45A8           30E4                       xor	ah,ah
18283 45AA           89C3                       mov	bx,ax
18284 45AC           8A46         FB            mov	al,-5[bp]
18285 45AF           30E4                       xor	ah,ah
18286 45B1           89D9                       mov	cx,bx
18287 45B3           F7E9                       imul	cx
18288                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18289                                           ! Debug: expression subtree swapping
18290 45B5           0346         FE            add	ax,-2[bp]
18291                                           ! Debug: list unsigned int = ax+0 (used reg = )
18292 45B8           50                         push	ax
18293                                           ! Debug: list unsigned int = const $A000 (used reg = )
18294 45B9           B8                   A000  mov	ax,#$A000
18295 45BC           50                         push	ax
18296                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18297 45BD           8A46         0C            mov	al,$C[bp]
18298 45C0           30E4                       xor	ah,ah
18299 45C2           89C3                       mov	bx,ax
18300 45C4           8A46         FB            mov	al,-5[bp]
18301 45C7           30E4                       xor	ah,ah
18302 45C9           89D9                       mov	cx,bx
18303 45CB           F7E9                       imul	cx
18304                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18305                                           ! Debug: expression subtree swapping
18306 45CD           0346         FC            add	ax,-4[bp]
18307                                           ! Debug: list unsigned int = ax+0 (used reg = )
18308 45D0           50                         push	ax
18309                                           ! Debug: list unsigned int = const $A000 (used reg = )
18310 45D1           B8                   A000  mov	ax,#$A000
18311 45D4           50                         push	ax
18312                                           ! Debug: func () void = memcpyb+0 (used reg = )
18313 45D5           E8         34BD            call	_memcpyb
18314 45D8           83C4                   0A  add	sp,*$A
18315                                           !BCC_EOS
18316                                           ! 2014   }
18317                                           ! 2015  outw(0x3ce, 0x0005);
18318                       000045DB            .9E:
18319                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18320 45DB           8A46         FB            mov	al,-5[bp]
18321 45DE           40                         inc	ax
18322 45DF           8846         FB            mov	-5[bp],al
18323                       000045E2            .9F:
18324                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18325 45E2           8A46         FB            mov	al,-5[bp]
18326 45E5           3A46         0E            cmp	al,$E[bp]
18327 45E8           72           B5            jb 	.A0
18328                       000045EA            .A1:
18329                       000045EA            .9D:
18330                                           ! Debug: list int = const 5 (used reg = )
18331 45EA           B8                   0005  mov	ax,*5
18332 45ED           50                         push	ax
18333                                           ! Debug: list int = const $3CE (used reg = )
18334 45EE           B8                   03CE  mov	ax,#$3CE
18335 45F1           50                         push	ax
18336                                           ! Debug: func () void = outw+0 (used reg = )
18337 45F2           E8         357C            call	_outw
18338 45F5           83C4                   04  add	sp,*4
18339                                           !BCC_EOS
18340                                           ! 2016 }
18341 45F8           89EC                       mov	sp,bp
18342 45FA           5D                         pop	bp
18343 45FB           C3                         ret
18344                                           ! 2017 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18345                                           ! Register BX used in function vgamem_copy_pl4
18346                                           ! 2018 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18347                       000045FC            _vgamem_fill_pl4:
18348                                           !BCC_EOS
18349                                           !BCC_EOS
18350                                           !BCC_EOS
18351                                           !BCC_EOS
18352                                           !BCC_EOS
18353                                           !BCC_EOS
18354                                           ! 2019 {
18355                                           ! 2020  Bit16u dest;
18356                                           !BCC_EOS
18357                                           ! 2021  Bit8u i;
18358                                           !BCC_EOS
18359                                           ! 2022  dest=ystart*cheight*nbcols+xstart;
18360 45FC           55                         push	bp
18361 45FD           89E5                       mov	bp,sp
18362 45FF           83C4                   FC  add	sp,*-4
18363                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18364 4602           8A46         0C            mov	al,$C[bp]
18365 4605           30E4                       xor	ah,ah
18366 4607           89C3                       mov	bx,ax
18367 4609           8A46         06            mov	al,6[bp]
18368 460C           30E4                       xor	ah,ah
18369 460E           89D9                       mov	cx,bx
18370 4610           F7E9                       imul	cx
18371                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18372 4612           89C3                       mov	bx,ax
18373 4614           8A46         0A            mov	al,$A[bp]
18374 4617           30E4                       xor	ah,ah
18375 4619           93                         xchg	ax,bx
18376 461A           89D9                       mov	cx,bx
18377 461C           F7E9                       imul	cx
18378                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18379 461E           0246         04            add	al,4[bp]
18380 4621           80D4                   00  adc	ah,*0
18381                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18382 4624           8946         FE            mov	-2[bp],ax
18383                                           !BCC_EOS
18384                                           ! 2023  outw(0x3ce, 0x0205);
18385                                           ! Debug: list int = const $205 (used reg = )
18386 4627           B8                   0205  mov	ax,#$205
18387 462A           50                         push	ax
18388                                           ! Debug: list int = const $3CE (used reg = )
18389 462B           B8                   03CE  mov	ax,#$3CE
18390 462E           50                         push	ax
18391                                           ! Debug: func () void = outw+0 (used reg = )
18392 462F           E8         353F            call	_outw
18393 4632           83C4                   04  add	sp,*4
18394                                           !BCC_EOS
18395                                           ! 2024  for(i=0;i<cheight;i++)
18396                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18397 4635           30C0                       xor	al,al
18398 4637           8846         FD            mov	-3[bp],al
18399                                           !BCC_EOS
18400                                           !BCC_EOS
18401                                           ! 2025   {
18402 463A           EB           31            jmp .A4
18403                       0000463C            .A5:
18404                                           ! 2026    memsetb(0xa000,dest+i*nbcols,attr,cols);
18405                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18406 463C           8A46         08            mov	al,8[bp]
18407 463F           30E4                       xor	ah,ah
18408 4641           50                         push	ax
18409                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18410 4642           8A46         0E            mov	al,$E[bp]
18411 4645           30E4                       xor	ah,ah
18412 4647           50                         push	ax
18413                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18414 4648           8A46         0A            mov	al,$A[bp]
18415 464B           30E4                       xor	ah,ah
18416 464D           89C3                       mov	bx,ax
18417 464F           8A46         FD            mov	al,-3[bp]
18418 4652           30E4                       xor	ah,ah
18419 4654           89D9                       mov	cx,bx
18420 4656           F7E9                       imul	cx
18421                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18422                                           ! Debug: expression subtree swapping
18423 4658           0346         FE            add	ax,-2[bp]
18424                                           ! Debug: list unsigned int = ax+0 (used reg = )
18425 465B           50                         push	ax
18426                                           ! Debug: list unsigned int = const $A000 (used reg = )
18427 465C           B8                   A000  mov	ax,#$A000
18428 465F           50                         push	ax
18429                                           ! Debug: func () void = memsetb+0 (used reg = )
18430 4660           E8         33E8            call	_memsetb
18431 4663           83C4                   08  add	sp,*8
18432                                           !BCC_EOS
18433                                           ! 2027   }
18434                                           ! 2028  outw(0x3ce, 0x0005);
18435                       00004666            .A3:
18436                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18437 4666           8A46         FD            mov	al,-3[bp]
18438 4669           40                         inc	ax
18439 466A           8846         FD            mov	-3[bp],al
18440                       0000466D            .A4:
18441                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18442 466D           8A46         FD            mov	al,-3[bp]
18443 4670           3A46         0C            cmp	al,$C[bp]
18444 4673           72           C7            jb 	.A5
18445                       00004675            .A6:
18446                       00004675            .A2:
18447                                           ! Debug: list int = const 5 (used reg = )
18448 4675           B8                   0005  mov	ax,*5
18449 4678           50                         push	ax
18450                                           ! Debug: list int = const $3CE (used reg = )
18451 4679           B8                   03CE  mov	ax,#$3CE
18452 467C           50                         push	ax
18453                                           ! Debug: func () void = outw+0 (used reg = )
18454 467D           E8         34F1            call	_outw
18455 4680           83C4                   04  add	sp,*4
18456                                           !BCC_EOS
18457                                           ! 2029 }
18458 4683           89EC                       mov	sp,bp
18459 4685           5D                         pop	bp
18460 4686           C3                         ret
18461                                           ! 2030 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18462                                           ! Register BX used in function vgamem_fill_pl4
18463                                           ! 2031 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18464                       00004687            _vgamem_copy_cga:
18465                                           !BCC_EOS
18466                                           !BCC_EOS
18467                                           !BCC_EOS
18468                                           !BCC_EOS
18469                                           !BCC_EOS
18470                                           !BCC_EOS
18471                                           ! 2032 {
18472                                           ! 2033  Bit16u src,dest;
18473                                           !BCC_EOS
18474                                           ! 2034  Bit8u i;
18475                                           !BCC_EOS
18476                                           ! 2035  src=((ysrc*cheight*nbcols)>>1)+xstart;
18477 4687           55                         push	bp
18478 4688           89E5                       mov	bp,sp
18479 468A           83C4                   FA  add	sp,*-6
18480                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18481 468D           8A46         0E            mov	al,$E[bp]
18482 4690           30E4                       xor	ah,ah
18483 4692           89C3                       mov	bx,ax
18484 4694           8A46         06            mov	al,6[bp]
18485 4697           30E4                       xor	ah,ah
18486 4699           89D9                       mov	cx,bx
18487 469B           F7E9                       imul	cx
18488                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18489 469D           89C3                       mov	bx,ax
18490 469F           8A46         0C            mov	al,$C[bp]
18491 46A2           30E4                       xor	ah,ah
18492 46A4           93                         xchg	ax,bx
18493 46A5           89D9                       mov	cx,bx
18494 46A7           F7E9                       imul	cx
18495                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18496 46A9           D1E8                       shr	ax,*1
18497                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18498 46AB           0246         04            add	al,4[bp]
18499 46AE           80D4                   00  adc	ah,*0
18500                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18501 46B1           8946         FE            mov	-2[bp],ax
18502                                           !BCC_EOS
18503                                           ! 2036  dest=((ydest*cheight*nbcols)>>1)+xstart;
18504                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18505 46B4           8A46         0E            mov	al,$E[bp]
18506 46B7           30E4                       xor	ah,ah
18507 46B9           89C3                       mov	bx,ax
18508 46BB           8A46         08            mov	al,8[bp]
18509 46BE           30E4                       xor	ah,ah
18510 46C0           89D9                       mov	cx,bx
18511 46C2           F7E9                       imul	cx
18512                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18513 46C4           89C3                       mov	bx,ax
18514 46C6           8A46         0C            mov	al,$C[bp]
18515 46C9           30E4                       xor	ah,ah
18516 46CB           93                         xchg	ax,bx
18517 46CC           89D9                       mov	cx,bx
18518 46CE           F7E9                       imul	cx
18519                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18520 46D0           D1E8                       shr	ax,*1
18521                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18522 46D2           0246         04            add	al,4[bp]
18523 46D5           80D4                   00  adc	ah,*0
18524                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18525 46D8           8946         FC            mov	-4[bp],ax
18526                                           !BCC_EOS
18527                                           ! 2037  for(i=0;i<cheight;i++)
18528                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18529 46DB           30C0                       xor	al,al
18530 46DD           8846         FB            mov	-5[bp],al
18531                                           !BCC_EOS
18532                                           !BCC_EOS
18533                                           ! 2038   {
18534 46E0           E9         00A8            br 	.A9
18535                       000046E3            .AA:
18536                                           ! 2039    if (i & 1)
18537                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18538 46E3           8A46         FB            mov	al,-5[bp]
18539 46E6           24                     01  and	al,*1
18540 46E8           84C0                       test	al,al
18541 46EA           74           56            je  	.AB
18542                       000046EC            .AC:
18543                                           ! 2040      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18544                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18545 46EC           8A46         0A            mov	al,$A[bp]
18546 46EF           30E4                       xor	ah,ah
18547 46F1           50                         push	ax
18548                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18549 46F2           8A46         FB            mov	al,-5[bp]
18550 46F5           30E4                       xor	ah,ah
18551 46F7           D1E8                       shr	ax,*1
18552                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18553 46F9           89C3                       mov	bx,ax
18554 46FB           8A46         0C            mov	al,$C[bp]
18555 46FE           30E4                       xor	ah,ah
18556 4700           93                         xchg	ax,bx
18557 4701           89D9                       mov	cx,bx
18558 4703           F7E9                       imul	cx
18559 4705           50                         push	ax
18560                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
18561                                           ! Debug: expression subtree swapping
18562 4706           8B46         FE            mov	ax,-2[bp]
18563                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18564 4709           05                   2000  add	ax,#$2000
18565 470C           0346         F6            add	ax,-$A[bp]
18566 470F           44                         inc	sp
18567 4710           44                         inc	sp
18568                                           ! Debug: list unsigned int = ax+0 (used reg = )
18569 4711           50                         push	ax
18570                                           ! Debug: list unsigned int = const $B800 (used reg = )
18571 4712           B8                   B800  mov	ax,#$B800
18572 4715           50                         push	ax
18573                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18574 4716           8A46         FB            mov	al,-5[bp]
18575 4719           30E4                       xor	ah,ah
18576 471B           D1E8                       shr	ax,*1
18577                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18578 471D           89C3                       mov	bx,ax
18579 471F           8A46         0C            mov	al,$C[bp]
18580 4722           30E4                       xor	ah,ah
18581 4724           93                         xchg	ax,bx
18582 4725           89D9                       mov	cx,bx
18583 4727           F7E9                       imul	cx
18584 4729           50                         push	ax
18585                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
18586                                           ! Debug: expression subtree swapping
18587 472A           8B46         FC            mov	ax,-4[bp]
18588                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
18589 472D           05                   2000  add	ax,#$2000
18590 4730           0346         F2            add	ax,-$E[bp]
18591 4733           44                         inc	sp
18592 4734           44                         inc	sp
18593                                           ! Debug: list unsigned int = ax+0 (used reg = )
18594 4735           50                         push	ax
18595                                           ! Debug: list unsigned int = const $B800 (used reg = )
18596 4736           B8                   B800  mov	ax,#$B800
18597 4739           50                         push	ax
18598                                           ! Debug: func () void = memcpyb+0 (used reg = )
18599 473A           E8         3358            call	_memcpyb
18600 473D           83C4                   0A  add	sp,*$A
18601                                           !BCC_EOS
18602                                           ! 2041    else
18603                                           ! 2042      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
18604 4740           EB           42            jmp .AD
18605                       00004742            .AB:
18606                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18607 4742           8A46         0A            mov	al,$A[bp]
18608 4745           30E4                       xor	ah,ah
18609 4747           50                         push	ax
18610                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18611 4748           8A46         FB            mov	al,-5[bp]
18612 474B           30E4                       xor	ah,ah
18613 474D           D1E8                       shr	ax,*1
18614                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18615 474F           89C3                       mov	bx,ax
18616 4751           8A46         0C            mov	al,$C[bp]
18617 4754           30E4                       xor	ah,ah
18618 4756           93                         xchg	ax,bx
18619 4757           89D9                       mov	cx,bx
18620 4759           F7E9                       imul	cx
18621                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18622                                           ! Debug: expression subtree swapping
18623 475B           0346         FE            add	ax,-2[bp]
18624                                           ! Debug: list unsigned int = ax+0 (used reg = )
18625 475E           50                         push	ax
18626                                           ! Debug: list unsigned int = const $B800 (used reg = )
18627 475F           B8                   B800  mov	ax,#$B800
18628 4762           50                         push	ax
18629                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18630 4763           8A46         FB            mov	al,-5[bp]
18631 4766           30E4                       xor	ah,ah
18632 4768           D1E8                       shr	ax,*1
18633                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18634 476A           89C3                       mov	bx,ax
18635 476C           8A46         0C            mov	al,$C[bp]
18636 476F           30E4                       xor	ah,ah
18637 4771           93                         xchg	ax,bx
18638 4772           89D9                       mov	cx,bx
18639 4774           F7E9                       imul	cx
18640                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18641                                           ! Debug: expression subtree swapping
18642 4776           0346         FC            add	ax,-4[bp]
18643                                           ! Debug: list unsigned int = ax+0 (used reg = )
18644 4779           50                         push	ax
18645                                           ! Debug: list unsigned int = const $B800 (used reg = )
18646 477A           B8                   B800  mov	ax,#$B800
18647 477D           50                         push	ax
18648                                           ! Debug: func () void = memcpyb+0 (used reg = )
18649 477E           E8         3314            call	_memcpyb
18650 4781           83C4                   0A  add	sp,*$A
18651                                           !BCC_EOS
18652                                           ! 2043   }
18653                       00004784            .AD:
18654                                           ! 2044 }
18655                       00004784            .A8:
18656                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18657 4784           8A46         FB            mov	al,-5[bp]
18658 4787           40                         inc	ax
18659 4788           8846         FB            mov	-5[bp],al
18660                       0000478B            .A9:
18661                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18662 478B           8A46         FB            mov	al,-5[bp]
18663 478E           3A46         0E            cmp	al,$E[bp]
18664 4791         0F82         FF4E            blo 	.AA
18665                       00004795            .AE:
18666                       00004795            .A7:
18667 4795           89EC                       mov	sp,bp
18668 4797           5D                         pop	bp
18669 4798           C3                         ret
18670                                           ! 2045 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
18671                                           ! Register BX used in function vgamem_copy_cga
18672                                           ! 2046 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u chei
18673                       00004799            _vgamem_fill_cga:
18674                                           !BCC_EOS
18675                                           !BCC_EOS
18676                                           !BCC_EOS
18677                                           !BCC_EOS
18678                                           ! 2046 ght;Bit8u attr;
18679                                           !BCC_EOS
18680                                           !BCC_EOS
18681                                           ! 2047 {
18682                                           ! 2048  Bit16u dest;
18683                                           !BCC_EOS
18684                                           ! 2049  Bit8u i;
18685                                           !BCC_EOS
18686                                           ! 2050  dest=((ystart*cheight*nbcols)>>1)+xstart;
18687 4799           55                         push	bp
18688 479A           89E5                       mov	bp,sp
18689 479C           83C4                   FC  add	sp,*-4
18690                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18691 479F           8A46         0C            mov	al,$C[bp]
18692 47A2           30E4                       xor	ah,ah
18693 47A4           89C3                       mov	bx,ax
18694 47A6           8A46         06            mov	al,6[bp]
18695 47A9           30E4                       xor	ah,ah
18696 47AB           89D9                       mov	cx,bx
18697 47AD           F7E9                       imul	cx
18698                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18699 47AF           89C3                       mov	bx,ax
18700 47B1           8A46         0A            mov	al,$A[bp]
18701 47B4           30E4                       xor	ah,ah
18702 47B6           93                         xchg	ax,bx
18703 47B7           89D9                       mov	cx,bx
18704 47B9           F7E9                       imul	cx
18705                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18706 47BB           D1E8                       shr	ax,*1
18707                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18708 47BD           0246         04            add	al,4[bp]
18709 47C0           80D4                   00  adc	ah,*0
18710                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18711 47C3           8946         FE            mov	-2[bp],ax
18712                                           !BCC_EOS
18713                                           ! 2051  for(i=0;i<cheight;i++)
18714                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18715 47C6           30C0                       xor	al,al
18716 47C8           8846         FD            mov	-3[bp],al
18717                                           !BCC_EOS
18718                                           !BCC_EOS
18719                                           ! 2052   {
18720 47CB           EB           75            jmp .B1
18721                       000047CD            .B2:
18722                                           ! 2053    if (i & 1)
18723                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
18724 47CD           8A46         FD            mov	al,-3[bp]
18725 47D0           24                     01  and	al,*1
18726 47D2           84C0                       test	al,al
18727 47D4           74           38            je  	.B3
18728                       000047D6            .B4:
18729                                           ! 2054      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
18730                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18731 47D6           8A46         08            mov	al,8[bp]
18732 47D9           30E4                       xor	ah,ah
18733 47DB           50                         push	ax
18734                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18735 47DC           8A46         0E            mov	al,$E[bp]
18736 47DF           30E4                       xor	ah,ah
18737 47E1           50                         push	ax
18738                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18739 47E2           8A46         FD            mov	al,-3[bp]
18740 47E5           30E4                       xor	ah,ah
18741 47E7           D1E8                       shr	ax,*1
18742                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18743 47E9           89C3                       mov	bx,ax
18744 47EB           8A46         0A            mov	al,$A[bp]
18745 47EE           30E4                       xor	ah,ah
18746 47F0           93                         xchg	ax,bx
18747 47F1           89D9                       mov	cx,bx
18748 47F3           F7E9                       imul	cx
18749 47F5           50                         push	ax
18750                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
18751                                           ! Debug: expression subtree swapping
18752 47F6           8B46         FE            mov	ax,-2[bp]
18753                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18754 47F9           05                   2000  add	ax,#$2000
18755 47FC           0346         F6            add	ax,-$A[bp]
18756 47FF           44                         inc	sp
18757 4800           44                         inc	sp
18758                                           ! Debug: list unsigned int = ax+0 (used reg = )
18759 4801           50                         push	ax
18760                                           ! Debug: list unsigned int = const $B800 (used reg = )
18761 4802           B8                   B800  mov	ax,#$B800
18762 4805           50                         push	ax
18763                                           ! Debug: func () void = memsetb+0 (used reg = )
18764 4806           E8         3242            call	_memsetb
18765 4809           83C4                   08  add	sp,*8
18766                                           !BCC_EOS
18767                                           ! 2055    else
18768                                           ! 2056      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
18769 480C           EB           2D            jmp .B5
18770                       0000480E            .B3:
18771                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18772 480E           8A46         08            mov	al,8[bp]
18773 4811           30E4                       xor	ah,ah
18774 4813           50                         push	ax
18775                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18776 4814           8A46         0E            mov	al,$E[bp]
18777 4817           30E4                       xor	ah,ah
18778 4819           50                         push	ax
18779                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18780 481A           8A46         FD            mov	al,-3[bp]
18781 481D           30E4                       xor	ah,ah
18782 481F           D1E8                       shr	ax,*1
18783                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18784 4821           89C3                       mov	bx,ax
18785 4823           8A46         0A            mov	al,$A[bp]
18786 4826           30E4                       xor	ah,ah
18787 4828           93                         xchg	ax,bx
18788 4829           89D9                       mov	cx,bx
18789 482B           F7E9                       imul	cx
18790                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18791                                           ! Debug: expression subtree swapping
18792 482D           0346         FE            add	ax,-2[bp]
18793                                           ! Debug: list unsigned int = ax+0 (used reg = )
18794 4830           50                         push	ax
18795                                           ! Debug: list unsigned int = const $B800 (used reg = )
18796 4831           B8                   B800  mov	ax,#$B800
18797 4834           50                         push	ax
18798                                           ! Debug: func () void = memsetb+0 (used reg = )
18799 4835           E8         3213            call	_memsetb
18800 4838           83C4                   08  add	sp,*8
18801                                           !BCC_EOS
18802                                           ! 2057   }
18803                       0000483B            .B5:
18804                                           ! 2058 }
18805                       0000483B            .B0:
18806                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18807 483B           8A46         FD            mov	al,-3[bp]
18808 483E           40                         inc	ax
18809 483F           8846         FD            mov	-3[bp],al
18810                       00004842            .B1:
18811                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18812 4842           8A46         FD            mov	al,-3[bp]
18813 4845           3A46         0C            cmp	al,$C[bp]
18814 4848           72           83            jb 	.B2
18815                       0000484A            .B6:
18816                       0000484A            .AF:
18817 484A           89EC                       mov	sp,bp
18818 484C           5D                         pop	bp
18819 484D           C3                         ret
18820                                           ! 2059 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
18821                                           ! Register BX used in function vgamem_fill_cga
18822                                           ! 2060 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
18823                       0000484E            _biosfn_scroll:
18824                                           !BCC_EOS
18825                                           !BCC_EOS
18826                                           !BCC_EOS
18827                                           !BCC_EOS
18828                                           !BCC_EOS
18829                                           !BCC_EOS
18830                                           !BCC_EOS
18831                                           !BCC_EOS
18832                                           ! 2061 {
18833                                           ! 2062  Bit8u mode,line,cheight,bpp,cols;
18834                                           !BCC_EOS
18835                                           ! 2063  Bit16u nbcols,nbrows,i;
18836                                           !BCC_EOS
18837                                           ! 2064  Bit16u address;
18838                                           !BCC_EOS
18839                                           ! 2065  if(rul>rlr)return;
18840 484E           55                         push	bp
18841 484F           89E5                       mov	bp,sp
18842 4851           83C4                   F2  add	sp,*-$E
18843                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
18844 4854           8A46         08            mov	al,8[bp]
18845 4857           3A46         0C            cmp	al,$C[bp]
18846 485A           76           04            jbe 	.B7
18847                       0000485C            .B8:
18848 485C           89EC                       mov	sp,bp
18849 485E           5D                         pop	bp
18850 485F           C3                         ret
18851                                           !BCC_EOS
18852                                           ! 2066  if(cul>clr)return;
18853                       00004860            .B7:
18854                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
18855 4860           8A46         0A            mov	al,$A[bp]
18856 4863           3A46         0E            cmp	al,$E[bp]
18857 4866           76           04            jbe 	.B9
18858                       00004868            .BA:
18859 4868           89EC                       mov	sp,bp
18860 486A           5D                         pop	bp
18861 486B           C3                         ret
18862                                           !BCC_EOS
18863                                           ! 2067  mode=read_byte(0x40,0x49);
18864                       0000486C            .B9:
18865                                           ! Debug: list int = const $49 (used reg = )
18866 486C           B8                   0049  mov	ax,*$49
18867 486F           50                         push	ax
18868                                           ! Debug: list int = const $40 (used reg = )
18869 4870           B8                   0040  mov	ax,*$40
18870 4873           50                         push	ax
18871                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18872 4874           E8         327E            call	_read_byte
18873 4877           83C4                   04  add	sp,*4
18874                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
18875 487A           8846         FF            mov	-1[bp],al
18876                                           !BCC_EOS
18877                                           ! 2068  line=find_vga_entry(mode);
18878                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
18879 487D           8A46         FF            mov	al,-1[bp]
18880 4880           30E4                       xor	ah,ah
18881 4882           50                         push	ax
18882                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18883 4883           E8         3183            call	_find_vga_entry
18884 4886           44                         inc	sp
18885 4887           44                         inc	sp
18886                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
18887 4888           8846         FE            mov	-2[bp],al
18888                                           !BCC_EOS
18889                                           ! 2069  if(line==0xFF)return;
18890                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
18891 488B           8A46         FE            mov	al,-2[bp]
18892 488E           3C                     FF  cmp	al,#$FF
18893 4890           75           04            jne 	.BB
18894                       00004892            .BC:
18895 4892           89EC                       mov	sp,bp
18896 4894           5D                         pop	bp
18897 4895           C3                         ret
18898                                           !BCC_EOS
18899                                           ! 2070  nbrows=read_byte(0x40,0x84)+1;
18900                       00004896            .BB:
18901                                           ! Debug: list int = const $84 (used reg = )
18902 4896           B8                   0084  mov	ax,#$84
18903 4899           50                         push	ax
18904                                           ! Debug: list int = const $40 (used reg = )
18905 489A           B8                   0040  mov	ax,*$40
18906 489D           50                         push	ax
18907                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18908 489E           E8         3254            call	_read_byte
18909 48A1           83C4                   04  add	sp,*4
18910                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18911 48A4           30E4                       xor	ah,ah
18912                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18913 48A6           40                         inc	ax
18914 48A7           8946         F6            mov	-$A[bp],ax
18915                                           !BCC_EOS
18916                                           ! 2071  nbcols=read_word(0x40,0x4A);
18917                                           ! Debug: list int = const $4A (used reg = )
18918 48AA           B8                   004A  mov	ax,*$4A
18919 48AD           50                         push	ax
18920                                           ! Debug: list int = const $40 (used reg = )
18921 48AE           B8                   0040  mov	ax,*$40
18922 48B1           50                         push	ax
18923                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18924 48B2           E8         3253            call	_read_word
18925 48B5           83C4                   04  add	sp,*4
18926                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18927 48B8           8946         F8            mov	-8[bp],ax
18928                                           !BCC_EOS
18929                                           ! 2072  if(page==0xFF)
18930                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
18931 48BB           8A46         10            mov	al,$10[bp]
18932 48BE           3C                     FF  cmp	al,#$FF
18933 48C0           75           11            jne 	.BD
18934                       000048C2            .BE:
18935                                           ! 2073   page=read_byte(0x40,0x62);
18936                                           ! Debug: list int = const $62 (used reg = )
18937 48C2           B8                   0062  mov	ax,*$62
18938 48C5           50                         push	ax
18939                                           ! Debug: list int = const $40 (used reg = )
18940 48C6           B8                   0040  mov	ax,*$40
18941 48C9           50                         push	ax
18942                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18943 48CA           E8         3228            call	_read_byte
18944 48CD           83C4                   04  add	sp,*4
18945                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
18946 48D0           8846         10            mov	$10[bp],al
18947                                           !BCC_EOS
18948                                           ! 2074  if(rlr>=nbrows)rlr=nbrows-1;
18949                       000048D3            .BD:
18950                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
18951 48D3           8A46         0C            mov	al,$C[bp]
18952 48D6           30E4                       xor	ah,ah
18953 48D8           3B46         F6            cmp	ax,-$A[bp]
18954 48DB           72           07            jb  	.BF
18955                       000048DD            .C0:
18956                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18957 48DD           8B46         F6            mov	ax,-$A[bp]
18958                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
18959 48E0           48                         dec	ax
18960 48E1           8846         0C            mov	$C[bp],al
18961                                           !BCC_EOS
18962                                           ! 2075  if(clr>=nbcols)clr=nbcols-1;
18963                       000048E4            .BF:
18964                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
18965 48E4           8A46         0E            mov	al,$E[bp]
18966 48E7           30E4                       xor	ah,ah
18967 48E9           3B46         F8            cmp	ax,-8[bp]
18968 48EC           72           07            jb  	.C1
18969                       000048EE            .C2:
18970                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
18971 48EE           8B46         F8            mov	ax,-8[bp]
18972                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
18973 48F1           48                         dec	ax
18974 48F2           8846         0E            mov	$E[bp],al
18975                                           !BCC_EOS
18976                                           ! 2076  if(nblines>nbrows)nblines=0;
18977                       000048F5            .C1:
18978                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
18979 48F5           8A46         04            mov	al,4[bp]
18980 48F8           30E4                       xor	ah,ah
18981 48FA           3B46         F6            cmp	ax,-$A[bp]
18982 48FD           76           05            jbe 	.C3
18983                       000048FF            .C4:
18984                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
18985 48FF           30C0                       xor	al,al
18986 4901           8846         04            mov	4[bp],al
18987                                           !BCC_EOS
18988                                           ! 2077  cols=clr-cul+1;
18989                       00004904            .C3:
18990                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
18991 4904           8A46         0E            mov	al,$E[bp]
18992 4907           30E4                       xor	ah,ah
18993 4909           2A46         0A            sub	al,$A[bp]
18994 490C           80DC                   00  sbb	ah,*0
18995                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18996                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
18997 490F           40                         inc	ax
18998 4910           8846         FB            mov	-5[bp],al
18999                                           !BCC_EOS
19000                                           ! 2078  if(vga_modes[line].class==0x00)
19001                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19002 4913           8A46         FE            mov	al,-2[bp]
19003 4916           30E4                       xor	ah,ah
19004 4918           B1                     03  mov	cl,*3
19005 491A           D3E0                       shl	ax,cl
19006 491C           89C3                       mov	bx,ax
19007 491E           81C3                 01D3  add	bx,#_vga_modes
19008                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19009 4922           8A47         01            mov	al,1[bx]
19010 4925           84C0                       test	al,al
19011 4927         0F85         0250            bne 	.C5
19012                       0000492B            .C6:
19013                                           ! 2079   {
19014                                           ! 2080    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19015                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19016 492B           8B46         F8            mov	ax,-8[bp]
19017 492E           8B4E         F6            mov	cx,-$A[bp]
19018 4931           F7E9                       imul	cx
19019                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19020 4933           D1E0                       shl	ax,*1
19021                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19022 4935           0C                     FF  or	al,#$FF
19023                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19024                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19025 4937           89C3                       mov	bx,ax
19026 4939           8A46         10            mov	al,$10[bp]
19027 493C           30E4                       xor	ah,ah
19028 493E           93                         xchg	ax,bx
19029 493F           40                         inc	ax
19030 4940           89D9                       mov	cx,bx
19031 4942           F7E9                       imul	cx
19032                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19033 4944           8946         F2            mov	-$E[bp],ax
19034                                           !BCC_EOS
19035                                           ! 2081    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19036                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19037 4947           8A46         04            mov	al,4[bp]
19038 494A           84C0                       test	al,al
19039 494C           75           67            jne 	.C7
19040                       0000494E            .CC:
19041                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19042 494E           8A46         08            mov	al,8[bp]
19043 4951           84C0                       test	al,al
19044 4953           75           60            jne 	.C7
19045                       00004955            .CB:
19046                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19047 4955           8A46         0A            mov	al,$A[bp]
19048 4958           84C0                       test	al,al
19049 495A           75           59            jne 	.C7
19050                       0000495C            .CA:
19051                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19052 495C           8B46         F6            mov	ax,-$A[bp]
19053                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19054                                           ! Debug: expression subtree swapping
19055 495F           48                         dec	ax
19056 4960           50                         push	ax
19057 4961           8A46         0C            mov	al,$C[bp]
19058 4964           30E4                       xor	ah,ah
19059 4966           3B46         F0            cmp	ax,-$10[bp]
19060 4969           8D66         F2            lea	sp,-$E[bp]
19061 496C           75           47            jne 	.C7
19062                       0000496E            .C9:
19063                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19064 496E           8B46         F8            mov	ax,-8[bp]
19065                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19066                                           ! Debug: expression subtree swapping
19067 4971           48                         dec	ax
19068 4972           50                         push	ax
19069 4973           8A46         0E            mov	al,$E[bp]
19070 4976           30E4                       xor	ah,ah
19071 4978           3B46         F0            cmp	ax,-$10[bp]
19072 497B           8D66         F2            lea	sp,-$E[bp]
19073 497E           75           35            jne 	.C7
19074                       00004980            .C8:
19075                                           ! 2082     {
19076                                           ! 2083      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19077                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19078 4980           8B46         F6            mov	ax,-$A[bp]
19079 4983           8B4E         F8            mov	cx,-8[bp]
19080 4986           F7E9                       imul	cx
19081                                           ! Debug: list unsigned int = ax+0 (used reg = )
19082 4988           50                         push	ax
19083                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19084 4989           8A46         06            mov	al,6[bp]
19085 498C           30E4                       xor	ah,ah
19086                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19087 498E           B9                   0100  mov	cx,#$100
19088 4991           F7E9                       imul	cx
19089                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19090                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19091 4993           05                   0020  add	ax,*$20
19092 4996           50                         push	ax
19093                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19094 4997           FF76         F2            push	-$E[bp]
19095                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19096 499A           8A46         FE            mov	al,-2[bp]
19097 499D           30E4                       xor	ah,ah
19098 499F           B1                     03  mov	cl,*3
19099 49A1           D3E0                       shl	ax,cl
19100 49A3           89C3                       mov	bx,ax
19101 49A5           81C3                 01D3  add	bx,#_vga_modes
19102                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19103 49A9           FF77         04            push	4[bx]
19104                                           ! Debug: func () void = memsetw+0 (used reg = )
19105 49AC           E8         30C1            call	_memsetw
19106 49AF           83C4                   08  add	sp,*8
19107                                           !BCC_EOS
19108                                           ! 2084     }
19109                                           ! 2085    else
19110                                           ! 2086     {
19111 49B2           E9         01C3            br 	.CD
19112                       000049B5            .C7:
19113                                           ! 2087      if(dir==1)
19114                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19115 49B5           8A46         12            mov	al,$12[bp]
19116 49B8           3C                     01  cmp	al,*1
19117 49BA         0F85         00DC            bne 	.CE
19118                       000049BE            .CF:
19119                                           ! 2088       {for(i=rul;i<=rlr;i++)
19120                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19121 49BE           8A46         08            mov	al,8[bp]
19122 49C1           30E4                       xor	ah,ah
19123 49C3           8946         F4            mov	-$C[bp],ax
19124                                           !BCC_EOS
19125                                           !BCC_EOS
19126                                           ! 2089         {
19127 49C6           E9         00C2            br 	.D2
19128                       000049C9            .D3:
19129                                           ! 2090          if((i+nblines>rlr)||(nblines==0))
19130                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19131 49C9           8B46         F4            mov	ax,-$C[bp]
19132 49CC           0246         04            add	al,4[bp]
19133 49CF           80D4                   00  adc	ah,*0
19134                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19135 49D2           50                         push	ax
19136 49D3           8A46         0C            mov	al,$C[bp]
19137 49D6           30E4                       xor	ah,ah
19138 49D8           3B46         F0            cmp	ax,-$10[bp]
19139 49DB           8D66         F2            lea	sp,-$E[bp]
19140 49DE           72           07            jb  	.D5
19141                       000049E0            .D6:
19142                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19143 49E0           8A46         04            mov	al,4[bp]
19144 49E3           84C0                       test	al,al
19145 49E5           75           42            jne 	.D4
19146                       000049E7            .D5:
19147                                           ! 2091           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19148                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19149 49E7           8A46         FB            mov	al,-5[bp]
19150 49EA           30E4                       xor	ah,ah
19151 49EC           50                         push	ax
19152                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19153 49ED           8A46         06            mov	al,6[bp]
19154 49F0           30E4                       xor	ah,ah
19155                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19156 49F2           B9                   0100  mov	cx,#$100
19157 49F5           F7E9                       imul	cx
19158                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19159                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19160 49F7           05                   0020  add	ax,*$20
19161 49FA           50                         push	ax
19162                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19163 49FB           8B46         F4            mov	ax,-$C[bp]
19164 49FE           8B4E         F8            mov	cx,-8[bp]
19165 4A01           F7E9                       imul	cx
19166                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19167 4A03           0246         0A            add	al,$A[bp]
19168 4A06           80D4                   00  adc	ah,*0
19169                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19170 4A09           D1E0                       shl	ax,*1
19171                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19172                                           ! Debug: expression subtree swapping
19173 4A0B           0346         F2            add	ax,-$E[bp]
19174                                           ! Debug: list unsigned int = ax+0 (used reg = )
19175 4A0E           50                         push	ax
19176                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19177 4A0F           8A46         FE            mov	al,-2[bp]
19178 4A12           30E4                       xor	ah,ah
19179 4A14           B1                     03  mov	cl,*3
19180 4A16           D3E0                       shl	ax,cl
19181 4A18           89C3                       mov	bx,ax
19182 4A1A           81C3                 01D3  add	bx,#_vga_modes
19183                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19184 4A1E           FF77         04            push	4[bx]
19185                                           ! Debug: func () void = memsetw+0 (used reg = )
19186 4A21           E8         304C            call	_memsetw
19187 4A24           83C4                   08  add	sp,*8
19188                                           !BCC_EOS
19189                                           ! 2092          else
19190                                           ! 2093           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19191 4A27           EB           5B            jmp .D7
19192                       00004A29            .D4:
19193                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19194 4A29           8A46         FB            mov	al,-5[bp]
19195 4A2C           30E4                       xor	ah,ah
19196 4A2E           50                         push	ax
19197                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19198 4A2F           8B46         F4            mov	ax,-$C[bp]
19199 4A32           0246         04            add	al,4[bp]
19200 4A35           80D4                   00  adc	ah,*0
19201                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19202 4A38           8B4E         F8            mov	cx,-8[bp]
19203 4A3B           F7E9                       imul	cx
19204                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19205 4A3D           0246         0A            add	al,$A[bp]
19206 4A40           80D4                   00  adc	ah,*0
19207                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19208 4A43           D1E0                       shl	ax,*1
19209                                           ! Debug: list unsigned int = ax+0 (used reg = )
19210 4A45           50                         push	ax
19211                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19212 4A46           8A46         FE            mov	al,-2[bp]
19213 4A49           30E4                       xor	ah,ah
19214 4A4B           B1                     03  mov	cl,*3
19215 4A4D           D3E0                       shl	ax,cl
19216 4A4F           89C3                       mov	bx,ax
19217 4A51           81C3                 01D3  add	bx,#_vga_modes
19218                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19219 4A55           FF77         04            push	4[bx]
19220                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19221 4A58           8B46         F4            mov	ax,-$C[bp]
19222 4A5B           8B4E         F8            mov	cx,-8[bp]
19223 4A5E           F7E9                       imul	cx
19224                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19225 4A60           0246         0A            add	al,$A[bp]
19226 4A63           80D4                   00  adc	ah,*0
19227                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19228 4A66           D1E0                       shl	ax,*1
19229                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19230                                           ! Debug: expression subtree swapping
19231 4A68           0346         F2            add	ax,-$E[bp]
19232                                           ! Debug: list unsigned int = ax+0 (used reg = )
19233 4A6B           50                         push	ax
19234                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19235 4A6C           8A46         FE            mov	al,-2[bp]
19236 4A6F           30E4                       xor	ah,ah
19237 4A71           B1                     03  mov	cl,*3
19238 4A73           D3E0                       shl	ax,cl
19239 4A75           89C3                       mov	bx,ax
19240 4A77           81C3                 01D3  add	bx,#_vga_modes
19241                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19242 4A7B           FF77         04            push	4[bx]
19243                                           ! Debug: func () void = memcpyw+0 (used reg = )
19244 4A7E           E8         3044            call	_memcpyw
19245 4A81           83C4                   0A  add	sp,*$A
19246                                           !BCC_EOS
19247                                           ! 2094         }
19248                       00004A84            .D7:
19249                                           ! 2095       }
19250                       00004A84            .D1:
19251                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19252 4A84           8B46         F4            mov	ax,-$C[bp]
19253 4A87           40                         inc	ax
19254 4A88           8946         F4            mov	-$C[bp],ax
19255                       00004A8B            .D2:
19256                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19257 4A8B           8A46         0C            mov	al,$C[bp]
19258 4A8E           30E4                       xor	ah,ah
19259 4A90           3B46         F4            cmp	ax,-$C[bp]
19260 4A93         0F83         FF32            bhis	.D3
19261                       00004A97            .D8:
19262                       00004A97            .D0:
19263                                           ! 2096      else
19264                                           ! 2097       {for(i=rlr;i>=rul;i--)
19265 4A97           E9         00DE            br 	.D9
19266                       00004A9A            .CE:
19267                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19268 4A9A           8A46         0C            mov	al,$C[bp]
19269 4A9D           30E4                       xor	ah,ah
19270 4A9F           8946         F4            mov	-$C[bp],ax
19271                                           !BCC_EOS
19272                                           !BCC_EOS
19273                                           ! 2098         {
19274 4AA2           E9         00C7            br 	.DC
19275                       00004AA5            .DD:
19276                                           ! 2099          if((i<rul+nblines)||(nblines==0))
19277                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19278 4AA5           8A46         08            mov	al,8[bp]
19279 4AA8           30E4                       xor	ah,ah
19280 4AAA           0246         04            add	al,4[bp]
19281 4AAD           80D4                   00  adc	ah,*0
19282                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19283 4AB0           3B46         F4            cmp	ax,-$C[bp]
19284 4AB3           77           07            ja  	.DF
19285                       00004AB5            .E0:
19286                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19287 4AB5           8A46         04            mov	al,4[bp]
19288 4AB8           84C0                       test	al,al
19289 4ABA           75           42            jne 	.DE
19290                       00004ABC            .DF:
19291                                           ! 2100           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19292                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19293 4ABC           8A46         FB            mov	al,-5[bp]
19294 4ABF           30E4                       xor	ah,ah
19295 4AC1           50                         push	ax
19296                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19297 4AC2           8A46         06            mov	al,6[bp]
19298 4AC5           30E4                       xor	ah,ah
19299                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19300 4AC7           B9                   0100  mov	cx,#$100
19301 4ACA           F7E9                       imul	cx
19302                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19303                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19304 4ACC           05                   0020  add	ax,*$20
19305 4ACF           50                         push	ax
19306                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19307 4AD0           8B46         F4            mov	ax,-$C[bp]
19308 4AD3           8B4E         F8            mov	cx,-8[bp]
19309 4AD6           F7E9                       imul	cx
19310                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19311 4AD8           0246         0A            add	al,$A[bp]
19312 4ADB           80D4                   00  adc	ah,*0
19313                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19314 4ADE           D1E0                       shl	ax,*1
19315                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19316                                           ! Debug: expression subtree swapping
19317 4AE0           0346         F2            add	ax,-$E[bp]
19318                                           ! Debug: list unsigned int = ax+0 (used reg = )
19319 4AE3           50                         push	ax
19320                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19321 4AE4           8A46         FE            mov	al,-2[bp]
19322 4AE7           30E4                       xor	ah,ah
19323 4AE9           B1                     03  mov	cl,*3
19324 4AEB           D3E0                       shl	ax,cl
19325 4AED           89C3                       mov	bx,ax
19326 4AEF           81C3                 01D3  add	bx,#_vga_modes
19327                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19328 4AF3           FF77         04            push	4[bx]
19329                                           ! Debug: func () void = memsetw+0 (used reg = )
19330 4AF6           E8         2F77            call	_memsetw
19331 4AF9           83C4                   08  add	sp,*8
19332                                           !BCC_EOS
19333                                           ! 2101          else
19334                                           ! 2102           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19335 4AFC           EB           5B            jmp .E1
19336                       00004AFE            .DE:
19337                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19338 4AFE           8A46         FB            mov	al,-5[bp]
19339 4B01           30E4                       xor	ah,ah
19340 4B03           50                         push	ax
19341                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19342 4B04           8B46         F4            mov	ax,-$C[bp]
19343 4B07           2A46         04            sub	al,4[bp]
19344 4B0A           80DC                   00  sbb	ah,*0
19345                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19346 4B0D           8B4E         F8            mov	cx,-8[bp]
19347 4B10           F7E9                       imul	cx
19348                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19349 4B12           0246         0A            add	al,$A[bp]
19350 4B15           80D4                   00  adc	ah,*0
19351                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19352 4B18           D1E0                       shl	ax,*1
19353                                           ! Debug: list unsigned int = ax+0 (used reg = )
19354 4B1A           50                         push	ax
19355                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19356 4B1B           8A46         FE            mov	al,-2[bp]
19357 4B1E           30E4                       xor	ah,ah
19358 4B20           B1                     03  mov	cl,*3
19359 4B22           D3E0                       shl	ax,cl
19360 4B24           89C3                       mov	bx,ax
19361 4B26           81C3                 01D3  add	bx,#_vga_modes
19362                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19363 4B2A           FF77         04            push	4[bx]
19364                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19365 4B2D           8B46         F4            mov	ax,-$C[bp]
19366 4B30           8B4E         F8            mov	cx,-8[bp]
19367 4B33           F7E9                       imul	cx
19368                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19369 4B35           0246         0A            add	al,$A[bp]
19370 4B38           80D4                   00  adc	ah,*0
19371                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19372 4B3B           D1E0                       shl	ax,*1
19373                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19374                                           ! Debug: expression subtree swapping
19375 4B3D           0346         F2            add	ax,-$E[bp]
19376                                           ! Debug: list unsigned int = ax+0 (used reg = )
19377 4B40           50                         push	ax
19378                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19379 4B41           8A46         FE            mov	al,-2[bp]
19380 4B44           30E4                       xor	ah,ah
19381 4B46           B1                     03  mov	cl,*3
19382 4B48           D3E0                       shl	ax,cl
19383 4B4A           89C3                       mov	bx,ax
19384 4B4C           81C3                 01D3  add	bx,#_vga_modes
19385                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19386 4B50           FF77         04            push	4[bx]
19387                                           ! Debug: func () void = memcpyw+0 (used reg = )
19388 4B53           E8         2F6F            call	_memcpyw
19389 4B56           83C4                   0A  add	sp,*$A
19390                                           !BCC_EOS
19391                                           ! 2103          if (i>rlr) break;
19392                       00004B59            .E1:
19393                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19394 4B59           8A46         0C            mov	al,$C[bp]
19395 4B5C           30E4                       xor	ah,ah
19396 4B5E           3B46         F4            cmp	ax,-$C[bp]
19397 4B61           73           02            jae 	.E2
19398                       00004B63            .E3:
19399 4B63           EB           13            jmp .DA
19400                                           !BCC_EOS
19401                                           ! 2104         }
19402                       00004B65            .E2:
19403                                           ! 2105       }
19404                       00004B65            .DB:
19405                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19406 4B65           8B46         F4            mov	ax,-$C[bp]
19407 4B68           48                         dec	ax
19408 4B69           8946         F4            mov	-$C[bp],ax
19409                       00004B6C            .DC:
19410                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19411 4B6C           8A46         08            mov	al,8[bp]
19412 4B6F           30E4                       xor	ah,ah
19413 4B71           3B46         F4            cmp	ax,-$C[bp]
19414 4B74         0F86         FF2D            blos	.DD
19415                       00004B78            .E4:
19416                       00004B78            .DA:
19417                                           ! 2106     }
19418                       00004B78            .D9:
19419                                           ! 2107   }
19420                       00004B78            .CD:
19421                                           ! 2108  else
19422                                           ! 2109   {
19423 4B78           E9         03D5            br 	.E5
19424                       00004B7B            .C5:
19425                                           ! 2110    cheight=video_param_table[line_to_vpti[line]].cheight;
19426                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19427 4B7B           8A46         FE            mov	al,-2[bp]
19428 4B7E           30E4                       xor	ah,ah
19429 4B80           89C3                       mov	bx,ax
19430                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19431 4B82           8A87       0253            mov	al,_line_to_vpti[bx]
19432 4B86           30E4                       xor	ah,ah
19433 4B88           B1                     06  mov	cl,*6
19434 4B8A           D3E0                       shl	ax,cl
19435 4B8C           89C3                       mov	bx,ax
19436 4B8E           81C3                 0267  add	bx,#_video_param_table
19437                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19438 4B92           8A47         02            mov	al,2[bx]
19439 4B95           8846         FD            mov	-3[bp],al
19440                                           !BCC_EOS
19441                                           ! 2111    switch(vga_modes[line].memmodel)
19442                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19443 4B98           8A46         FE            mov	al,-2[bp]
19444 4B9B           30E4                       xor	ah,ah
19445 4B9D           B1                     03  mov	cl,*3
19446 4B9F           D3E0                       shl	ax,cl
19447 4BA1           89C3                       mov	bx,ax
19448 4BA3           81C3                 01D3  add	bx,#_vga_modes
19449 4BA7           8A47         02            mov	al,2[bx]
19450                                           ! 2112     {
19451 4BAA           E9         0391            br 	.E8
19452                                           ! 2113      case 0x04:
19453                                           ! 2114      case 0x03:
19454                       00004BAD            .E9:
19455                                           ! 2115        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19456                       00004BAD            .EA:
19457                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19458 4BAD           8A46         04            mov	al,4[bp]
19459 4BB0           84C0                       test	al,al
19460 4BB2         0F85         0089            bne 	.EB
19461                       00004BB6            .F0:
19462                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19463 4BB6           8A46         08            mov	al,8[bp]
19464 4BB9           84C0                       test	al,al
19465 4BBB         0F85         0080            bne 	.EB
19466                       00004BBF            .EF:
19467                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19468 4BBF           8A46         0A            mov	al,$A[bp]
19469 4BC2           84C0                       test	al,al
19470 4BC4           75           79            jne 	.EB
19471                       00004BC6            .EE:
19472                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19473 4BC6           8B46         F6            mov	ax,-$A[bp]
19474                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19475                                           ! Debug: expression subtree swapping
19476 4BC9           48                         dec	ax
19477 4BCA           50                         push	ax
19478 4BCB           8A46         0C            mov	al,$C[bp]
19479 4BCE           30E4                       xor	ah,ah
19480 4BD0           3B46         F0            cmp	ax,0+..FFFC[bp]
19481 4BD3           8D66         F2            lea	sp,2+..FFFC[bp]
19482 4BD6           75           67            jne 	.EB
19483                       00004BD8            .ED:
19484                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19485 4BD8           8B46         F8            mov	ax,-8[bp]
19486                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19487                                           ! Debug: expression subtree swapping
19488 4BDB           48                         dec	ax
19489 4BDC           50                         push	ax
19490 4BDD           8A46         0E            mov	al,$E[bp]
19491 4BE0           30E4                       xor	ah,ah
19492 4BE2           3B46         F0            cmp	ax,0+..FFFC[bp]
19493 4BE5           8D66         F2            lea	sp,2+..FFFC[bp]
19494 4BE8           75           55            jne 	.EB
19495                       00004BEA            .EC:
19496                                           ! 2116         {
19497                                           ! 2117          outw(0x3ce, 0x0
19498                                           ! 2117 205);
19499                                           ! Debug: list int = const $205 (used reg = )
19500 4BEA           B8                   0205  mov	ax,#$205
19501 4BED           50                         push	ax
19502                                           ! Debug: list int = const $3CE (used reg = )
19503 4BEE           B8                   03CE  mov	ax,#$3CE
19504 4BF1           50                         push	ax
19505                                           ! Debug: func () void = outw+0 (used reg = )
19506 4BF2           E8         2F7C            call	_outw
19507 4BF5           83C4                   04  add	sp,*4
19508                                           !BCC_EOS
19509                                           ! 2118          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19510                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19511 4BF8           8B46         F6            mov	ax,-$A[bp]
19512 4BFB           8B4E         F8            mov	cx,-8[bp]
19513 4BFE           F7E9                       imul	cx
19514                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19515 4C00           89C3                       mov	bx,ax
19516 4C02           8A46         FD            mov	al,-3[bp]
19517 4C05           30E4                       xor	ah,ah
19518 4C07           93                         xchg	ax,bx
19519 4C08           89D9                       mov	cx,bx
19520 4C0A           F7E9                       imul	cx
19521                                           ! Debug: list unsigned int = ax+0 (used reg = )
19522 4C0C           50                         push	ax
19523                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19524 4C0D           8A46         06            mov	al,6[bp]
19525 4C10           30E4                       xor	ah,ah
19526 4C12           50                         push	ax
19527                                           ! Debug: list int = const 0 (used reg = )
19528 4C13           31C0                       xor	ax,ax
19529 4C15           50                         push	ax
19530                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19531 4C16           8A46         FE            mov	al,-2[bp]
19532 4C19           30E4                       xor	ah,ah
19533 4C1B           B1                     03  mov	cl,*3
19534 4C1D           D3E0                       shl	ax,cl
19535 4C1F           89C3                       mov	bx,ax
19536 4C21           81C3                 01D3  add	bx,#_vga_modes
19537                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19538 4C25           FF77         04            push	4[bx]
19539                                           ! Debug: func () void = memsetb+0 (used reg = )
19540 4C28           E8         2E20            call	_memsetb
19541 4C2B           83C4                   08  add	sp,*8
19542                                           !BCC_EOS
19543                                           ! 2119          outw(0x3ce, 0x0005);
19544                                           ! Debug: list int = const 5 (used reg = )
19545 4C2E           B8                   0005  mov	ax,*5
19546 4C31           50                         push	ax
19547                                           ! Debug: list int = const $3CE (used reg = )
19548 4C32           B8                   03CE  mov	ax,#$3CE
19549 4C35           50                         push	ax
19550                                           ! Debug: func () void = outw+0 (used reg = )
19551 4C36           E8         2F38            call	_outw
19552 4C39           83C4                   04  add	sp,*4
19553                                           !BCC_EOS
19554                                           ! 2120         }
19555                                           ! 2121        else
19556                                           ! 2122         {
19557 4C3C           E9         0121            br 	.F1
19558                       00004C3F            .EB:
19559                                           ! 2123          if(dir==1)
19560                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19561 4C3F           8A46         12            mov	al,$12[bp]
19562 4C42           3C                     01  cmp	al,*1
19563 4C44         0F85         008A            bne 	.F2
19564                       00004C48            .F3:
19565                                           ! 2124           {for(i=rul;i<=rlr;i++)
19566                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19567 4C48           8A46         08            mov	al,8[bp]
19568 4C4B           30E4                       xor	ah,ah
19569 4C4D           8946         F4            mov	-$C[bp],ax
19570                                           !BCC_EOS
19571                                           !BCC_EOS
19572                                           ! 2125             {
19573 4C50           EB           73            jmp .F6
19574                       00004C52            .F7:
19575                                           ! 2126              if((i+nblines>rlr)||(nblines==0))
19576                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19577 4C52           8B46         F4            mov	ax,-$C[bp]
19578 4C55           0246         04            add	al,4[bp]
19579 4C58           80D4                   00  adc	ah,*0
19580                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19581 4C5B           50                         push	ax
19582 4C5C           8A46         0C            mov	al,$C[bp]
19583 4C5F           30E4                       xor	ah,ah
19584 4C61           3B46         F0            cmp	ax,0+..FFFC[bp]
19585 4C64           8D66         F2            lea	sp,2+..FFFC[bp]
19586 4C67           72           07            jb  	.F9
19587                       00004C69            .FA:
19588                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19589 4C69           8A46         04            mov	al,4[bp]
19590 4C6C           84C0                       test	al,al
19591 4C6E           75           26            jne 	.F8
19592                       00004C70            .F9:
19593                                           ! 2127               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19594                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19595 4C70           8A46         06            mov	al,6[bp]
19596 4C73           30E4                       xor	ah,ah
19597 4C75           50                         push	ax
19598                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19599 4C76           8A46         FD            mov	al,-3[bp]
19600 4C79           30E4                       xor	ah,ah
19601 4C7B           50                         push	ax
19602                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19603 4C7C           FF76         F8            push	-8[bp]
19604                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19605 4C7F           8A46         FB            mov	al,-5[bp]
19606 4C82           30E4                       xor	ah,ah
19607 4C84           50                         push	ax
19608                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19609 4C85           FF76         F4            push	-$C[bp]
19610                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19611 4C88           8A46         0A            mov	al,$A[bp]
19612 4C8B           30E4                       xor	ah,ah
19613 4C8D           50                         push	ax
19614                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19615 4C8E           E8         F96B            call	_vgamem_fill_pl4
19616 4C91           83C4                   0C  add	sp,*$C
19617                                           !BCC_EOS
19618                                           ! 2128              else
19619                                           ! 2129               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
19620 4C94           EB           28            jmp .FB
19621                       00004C96            .F8:
19622                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19623 4C96           8A46         FD            mov	al,-3[bp]
19624 4C99           30E4                       xor	ah,ah
19625 4C9B           50                         push	ax
19626                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19627 4C9C           FF76         F8            push	-8[bp]
19628                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19629 4C9F           8A46         FB            mov	al,-5[bp]
19630 4CA2           30E4                       xor	ah,ah
19631 4CA4           50                         push	ax
19632                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19633 4CA5           FF76         F4            push	-$C[bp]
19634                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19635 4CA8           8B46         F4            mov	ax,-$C[bp]
19636 4CAB           0246         04            add	al,4[bp]
19637 4CAE           80D4                   00  adc	ah,*0
19638                                           ! Debug: list unsigned int = ax+0 (used reg = )
19639 4CB1           50                         push	ax
19640                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19641 4CB2           8A46         0A            mov	al,$A[bp]
19642 4CB5           30E4                       xor	ah,ah
19643 4CB7           50                         push	ax
19644                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19645 4CB8           E8         F87F            call	_vgamem_copy_pl4
19646 4CBB           83C4                   0C  add	sp,*$C
19647                                           !BCC_EOS
19648                                           ! 2130             }
19649                       00004CBE            .FB:
19650                                           ! 2131           }
19651                       00004CBE            .F5:
19652                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19653 4CBE           8B46         F4            mov	ax,-$C[bp]
19654 4CC1           40                         inc	ax
19655 4CC2           8946         F4            mov	-$C[bp],ax
19656                       00004CC5            .F6:
19657                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19658 4CC5           8A46         0C            mov	al,$C[bp]
19659 4CC8           30E4                       xor	ah,ah
19660 4CCA           3B46         F4            cmp	ax,-$C[bp]
19661 4CCD           73           83            jae	.F7
19662                       00004CCF            .FC:
19663                       00004CCF            .F4:
19664                                           ! 2132          else
19665                                           ! 2133           {for(i=rlr;i>=rul;i--)
19666 4CCF           E9         008E            br 	.FD
19667                       00004CD2            .F2:
19668                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19669 4CD2           8A46         0C            mov	al,$C[bp]
19670 4CD5           30E4                       xor	ah,ah
19671 4CD7           8946         F4            mov	-$C[bp],ax
19672                                           !BCC_EOS
19673                                           !BCC_EOS
19674                                           ! 2134             {
19675 4CDA           EB           78            jmp .100
19676                       00004CDC            .101:
19677                                           ! 2135              if((i<rul+nblines)||(nblines==0))
19678                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19679 4CDC           8A46         08            mov	al,8[bp]
19680 4CDF           30E4                       xor	ah,ah
19681 4CE1           0246         04            add	al,4[bp]
19682 4CE4           80D4                   00  adc	ah,*0
19683                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19684 4CE7           3B46         F4            cmp	ax,-$C[bp]
19685 4CEA           77           07            ja  	.103
19686                       00004CEC            .104:
19687                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19688 4CEC           8A46         04            mov	al,4[bp]
19689 4CEF           84C0                       test	al,al
19690 4CF1           75           26            jne 	.102
19691                       00004CF3            .103:
19692                                           ! 2136               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19693                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19694 4CF3           8A46         06            mov	al,6[bp]
19695 4CF6           30E4                       xor	ah,ah
19696 4CF8           50                         push	ax
19697                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19698 4CF9           8A46         FD            mov	al,-3[bp]
19699 4CFC           30E4                       xor	ah,ah
19700 4CFE           50                         push	ax
19701                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19702 4CFF           FF76         F8            push	-8[bp]
19703                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19704 4D02           8A46         FB            mov	al,-5[bp]
19705 4D05           30E4                       xor	ah,ah
19706 4D07           50                         push	ax
19707                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19708 4D08           FF76         F4            push	-$C[bp]
19709                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19710 4D0B           8A46         0A            mov	al,$A[bp]
19711 4D0E           30E4                       xor	ah,ah
19712 4D10           50                         push	ax
19713                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19714 4D11           E8         F8E8            call	_vgamem_fill_pl4
19715 4D14           83C4                   0C  add	sp,*$C
19716                                           !BCC_EOS
19717                                           ! 2137              else
19718                                           ! 2138               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
19719 4D17           EB           28            jmp .105
19720                       00004D19            .102:
19721                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19722 4D19           8A46         FD            mov	al,-3[bp]
19723 4D1C           30E4                       xor	ah,ah
19724 4D1E           50                         push	ax
19725                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19726 4D1F           FF76         F8            push	-8[bp]
19727                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19728 4D22           8A46         FB            mov	al,-5[bp]
19729 4D25           30E4                       xor	ah,ah
19730 4D27           50                         push	ax
19731                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
19732 4D28           8B46         F4            mov	ax,-$C[bp]
19733 4D2B           2A46         04            sub	al,4[bp]
19734 4D2E           80DC                   00  sbb	ah,*0
19735                                           ! Debug: list unsigned int = ax+0 (used reg = )
19736 4D31           50                         push	ax
19737                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19738 4D32           FF76         F4            push	-$C[bp]
19739                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19740 4D35           8A46         0A            mov	al,$A[bp]
19741 4D38           30E4                       xor	ah,ah
19742 4D3A           50                         push	ax
19743                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19744 4D3B           E8         F7FC            call	_vgamem_copy_pl4
19745 4D3E           83C4                   0C  add	sp,*$C
19746                                           !BCC_EOS
19747                                           ! 2139              if (i>rlr) break;
19748                       00004D41            .105:
19749                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19750 4D41           8A46         0C            mov	al,$C[bp]
19751 4D44           30E4                       xor	ah,ah
19752 4D46           3B46         F4            cmp	ax,-$C[bp]
19753 4D49           73           02            jae 	.106
19754                       00004D4B            .107:
19755 4D4B           EB           13            jmp .FE
19756                                           !BCC_EOS
19757                                           ! 2140             }
19758                       00004D4D            .106:
19759                                           ! 2141           }
19760                       00004D4D            .FF:
19761                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19762 4D4D           8B46         F4            mov	ax,-$C[bp]
19763 4D50           48                         dec	ax
19764 4D51           8946         F4            mov	-$C[bp],ax
19765                       00004D54            .100:
19766                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19767 4D54           8A46         08            mov	al,8[bp]
19768 4D57           30E4                       xor	ah,ah
19769 4D59           3B46         F4            cmp	ax,-$C[bp]
19770 4D5C         0F86         FF7C            blos	.101
19771                       00004D60            .108:
19772                       00004D60            .FE:
19773                                           ! 2142         }
19774                       00004D60            .FD:
19775                                           ! 2143        break;
19776                       00004D60            .F1:
19777 4D60           E9         01ED            br 	.E6
19778                                           !BCC_EOS
19779                                           ! 2144      case 0x02:
19780                                           ! 2145        bpp=vga_modes[line].pixbits;
19781                       00004D63            .109:
19782                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19783 4D63           8A46         FE            mov	al,-2[bp]
19784 4D66           30E4                       xor	ah,ah
19785 4D68           B1                     03  mov	cl,*3
19786 4D6A           D3E0                       shl	ax,cl
19787 4D6C           89C3                       mov	bx,ax
19788 4D6E           81C3                 01D3  add	bx,#_vga_modes
19789                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
19790 4D72           8A47         03            mov	al,3[bx]
19791 4D75           8846         FC            mov	-4[bp],al
19792                                           !BCC_EOS
19793                                           ! 2146        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19794                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19795 4D78           8A46         04            mov	al,4[bp]
19796 4D7B           84C0                       test	al,al
19797 4D7D           75           77            jne 	.10A
19798                       00004D7F            .10F:
19799                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19800 4D7F           8A46         08            mov	al,8[bp]
19801 4D82           84C0                       test	al,al
19802 4D84           75           70            jne 	.10A
19803                       00004D86            .10E:
19804                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19805 4D86           8A46         0A            mov	al,$A[bp]
19806 4D89           84C0                       test	al,al
19807 4D8B           75           69            jne 	.10A
19808                       00004D8D            .10D:
19809                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19810 4D8D           8B46         F6            mov	ax,-$A[bp]
19811                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19812                                           ! Debug: expression subtree swapping
19813 4D90           48                         dec	ax
19814 4D91           50                         push	ax
19815 4D92           8A46         0C            mov	al,$C[bp]
19816 4D95           30E4                       xor	ah,ah
19817 4D97           3B46         F0            cmp	ax,0+..FFFC[bp]
19818 4D9A           8D66         F2            lea	sp,2+..FFFC[bp]
19819 4D9D           75           57            jne 	.10A
19820                       00004D9F            .10C:
19821                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19822 4D9F           8B46         F8            mov	ax,-8[bp]
19823                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19824                                           ! Debug: expression subtree swapping
19825 4DA2           48                         dec	ax
19826 4DA3           50                         push	ax
19827 4DA4           8A46         0E            mov	al,$E[bp]
19828 4DA7           30E4                       xor	ah,ah
19829 4DA9           3B46         F0            cmp	ax,0+..FFFC[bp]
19830 4DAC           8D66         F2            lea	sp,2+..FFFC[bp]
19831 4DAF           75           45            jne 	.10A
19832                       00004DB1            .10B:
19833                                           ! 2147         {
19834                                           ! 2148          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
19835                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19836 4DB1           8B46         F6            mov	ax,-$A[bp]
19837 4DB4           8B4E         F8            mov	cx,-8[bp]
19838 4DB7           F7E9                       imul	cx
19839                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19840 4DB9           89C3                       mov	bx,ax
19841 4DBB           8A46         FD            mov	al,-3[bp]
19842 4DBE           30E4                       xor	ah,ah
19843 4DC0           93                         xchg	ax,bx
19844 4DC1           89D9                       mov	cx,bx
19845 4DC3           F7E9                       imul	cx
19846                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
19847 4DC5           89C3                       mov	bx,ax
19848 4DC7           8A46         FC            mov	al,-4[bp]
19849 4DCA           30E4                       xor	ah,ah
19850 4DCC           93                         xchg	ax,bx
19851 4DCD           89D9                       mov	cx,bx
19852 4DCF           F7E9                       imul	cx
19853                                           ! Debug: list unsigned int = ax+0 (used reg = )
19854 4DD1           50                         push	ax
19855                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19856 4DD2           8A46         06            mov	al,6[bp]
19857 4DD5           30E4                       xor	ah,ah
19858 4DD7           50                         push	ax
19859                                           ! Debug: list int = const 0 (used reg = )
19860 4DD8           31C0                       xor	ax,ax
19861 4DDA           50                         push	ax
19862                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19863 4DDB           8A46         FE            mov	al,-2[bp]
19864 4DDE           30E4                       xor	ah,ah
19865 4DE0           B1                     03  mov	cl,*3
19866 4DE2           D3E0                       shl	ax,cl
19867 4DE4           89C3                       mov	bx,ax
19868 4DE6           81C3                 01D3  add	bx,#_vga_modes
19869                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19870 4DEA           FF77         04            push	4[bx]
19871                                           ! Debug: func () void = memsetb+0 (used reg = )
19872 4DED           E8         2C5B            call	_memsetb
19873 4DF0           83C4                   08  add	sp,*8
19874                                           !BCC_EOS
19875                                           ! 2149         }
19876                                           ! 2150        else
19877                                           ! 2151         {
19878 4DF3           E9         0144            br 	.110
19879                       00004DF6            .10A:
19880                                           ! 2152          if(bpp==2)
19881                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
19882 4DF6           8A46         FC            mov	al,-4[bp]
19883 4DF9           3C                     02  cmp	al,*2
19884 4DFB           75           1C            jne 	.111
19885                       00004DFD            .112:
19886                                           ! 2153           {
19887                                           ! 2154            cul<<=1;
19888                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
19889 4DFD           8A46         0A            mov	al,$A[bp]
19890 4E00           30E4                       xor	ah,ah
19891 4E02           D1E0                       shl	ax,*1
19892 4E04           8846         0A            mov	$A[bp],al
19893                                           !BCC_EOS
19894                                           ! 2155            cols<<=1;
19895                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
19896 4E07           8A46         FB            mov	al,-5[bp]
19897 4E0A           30E4                       xor	ah,ah
19898 4E0C           D1E0                       shl	ax,*1
19899 4E0E           8846         FB            mov	-5[bp],al
19900                                           !BCC_EOS
19901                                           ! 2156            nbcols<<=1;
19902                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19903 4E11           8B46         F8            mov	ax,-8[bp]
19904 4E14           D1E0                       shl	ax,*1
19905 4E16           8946         F8            mov	-8[bp],ax
19906                                           !BCC_EOS
19907                                           ! 2157           }
19908                                           ! 2158          if(dir==1)
19909                       00004E19            .111:
19910                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19911 4E19           8A46         12            mov	al,$12[bp]
19912 4E1C           3C                     01  cmp	al,*1
19913 4E1E         0F85         008A            bne 	.113
19914                       00004E22            .114:
19915                                           ! 2159           {for(i=rul;i<=rlr;i++)
19916                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19917 4E22           8A46         08            mov	al,8[bp]
19918 4E25           30E4                       xor	ah,ah
19919 4E27           8946         F4            mov	-$C[bp],ax
19920                                           !BCC_EOS
19921                                           !BCC_EOS
19922                                           ! 2160             {
19923 4E2A           EB           73            jmp .117
19924                       00004E2C            .118:
19925                                           ! 2161              if((i+nblines>rlr)||(nblines==0))
19926                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19927 4E2C           8B46         F4            mov	ax,-$C[bp]
19928 4E2F           0246         04            add	al,4[bp]
19929 4E32           80D4                   00  adc	ah,*0
19930                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19931 4E35           50                         push	ax
19932 4E36           8A46         0C            mov	al,$C[bp]
19933 4E39           30E4                       xor	ah,ah
19934 4E3B           3B46         F0            cmp	ax,0+..FFFC[bp]
19935 4E3E           8D66         F2            lea	sp,2+..FFFC[bp]
19936 4E41           72           07            jb  	.11A
19937                       00004E43            .11B:
19938                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19939 4E43           8A46         04            mov	al,4[bp]
19940 4E46           84C0                       test	al,al
19941 4E48           75           26            jne 	.119
19942                       00004E4A            .11A:
19943                                           ! 2162               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
19944                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19945 4E4A           8A46         06            mov	al,6[bp]
19946 4E4D           30E4                       xor	ah,ah
19947 4E4F           50                         push	ax
19948                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19949 4E50           8A46         FD            mov	al,-3[bp]
19950 4E53           30E4                       xor	ah,ah
19951 4E55           50                         push	ax
19952                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19953 4E56           FF76         F8            push	-8[bp]
19954                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19955 4E59           8A46         FB            mov	al,-5[bp]
19956 4E5C           30E4                       xor	ah,ah
19957 4E5E           50                         push	ax
19958                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19959 4E5F           FF76         F4            push	-$C[bp]
19960                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19961 4E62           8A46         0A            mov	al,$A[bp]
19962 4E65           30E4                       xor	ah,ah
19963 4E67           50                         push	ax
19964                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
19965 4E68           E8         F92E            call	_vgamem_fill_cga
19966 4E6B           83C4                   0C  add	sp,*$C
19967                                           !BCC_EOS
19968                                           ! 2163              else
19969                                           ! 2164               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
19970 4E6E           EB           28            jmp .11C
19971                       00004E70            .119:
19972                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19973 4E70           8A46         FD            mov	al,-3[bp]
19974 4E73           30E4                       xor	ah,ah
19975 4E75           50                         push	ax
19976                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19977 4E76           FF76         F8            push	-8[bp]
19978                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19979 4E79           8A46         FB            mov	al,-5[bp]
19980 4E7C           30E4                       xor	ah,ah
19981 4E7E           50                         push	ax
19982                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19983 4E7F           FF76         F4            push	-$C[bp]
19984                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19985 4E82           8B46         F4            mov	ax,-$C[bp]
19986 4E85           0246         04            add	al,4[bp]
19987 4E88           80D4                   00  adc	ah,*0
19988                                           ! Debug: list unsigned int = ax+0 (used reg = )
19989 4E8B           50                         push	ax
19990                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19991 4E8C           8A46         0A            mov	al,$A[bp]
19992 4E8F           30E4                       xor	ah,ah
19993 4E91           50                         push	ax
19994                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
19995 4E92           E8         F7F2            call	_vgamem_copy_cga
19996 4E95           83C4                   0C  add	sp,*$C
19997                                           !BCC_EOS
19998                                           ! 2165             }
19999                       00004E98            .11C:
20000                                           ! 2166           }
20001                       00004E98            .116:
20002                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20003 4E98           8B46         F4            mov	ax,-$C[bp]
20004 4E9B           40                         inc	ax
20005 4E9C           8946         F4            mov	-$C[bp],ax
20006                       00004E9F            .117:
20007                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20008 4E9F           8A46         0C            mov	al,$C[bp]
20009 4EA2           30E4                       xor	ah,ah
20010 4EA4           3B46         F4            cmp	ax,-$C[bp]
20011 4EA7           73           83            jae	.118
20012                       00004EA9            .11D:
20013                       00004EA9            .115:
20014                                           ! 2167          else
20015                                           ! 2168           {for(i=rlr;i>=rul;i--)
20016 4EA9           E9         008E            br 	.11E
20017                       00004EAC            .113:
20018                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20019 4EAC           8A46         0C            mov	al,$C[bp]
20020 4EAF           30E4                       xor	ah,ah
20021 4EB1           8946         F4            mov	-$C[bp],ax
20022                                           !BCC_EOS
20023                                           !BCC_EOS
20024                                           ! 2169             {
20025 4EB4           EB           78            jmp .121
20026                       00004EB6            .122:
20027                                           ! 2170              if((i<rul+nblines)||(nblines==0))
20028                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20029 4EB6           8A46         08            mov	al,8[bp]
20030 4EB9           30E4                       xor	ah,ah
20031 4EBB           0246         04            add	al,4[bp]
20032 4EBE           80D4                   00  adc	ah,*0
20033                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20034 4EC1           3B46         F4            cmp	ax,-$C[bp]
20035 4EC4           77           07            ja  	.124
20036                       00004EC6            .125:
20037                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20038 4EC6           8A46         04            mov	al,4[bp]
20039 4EC9           84C0                       test	al,al
20040 4ECB           75           26            jne 	.123
20041                       00004ECD            .124:
20042                                           ! 2171               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20043                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20044 4ECD           8A46         06            mov	al,6[bp]
20045 4ED0           30E4                       xor	ah,ah
20046 4ED2           50                         push	ax
20047                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20048 4ED3           8A46         FD            mov	al,-3[bp]
20049 4ED6           30E4                       xor	ah,ah
20050 4ED8           50                         push	ax
20051                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20052 4ED9           FF76         F8            push	-8[bp]
20053                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20054 4EDC           8A46         FB            mov	al,-5[bp]
20055 4EDF           30E4                       xor	ah,ah
20056 4EE1           50                         push	ax
20057                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20058 4EE2           FF76         F4            push	-$C[bp]
20059                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20060 4EE5           8A46         0A            mov	al,$A[bp]
20061 4EE8           30E4                       xor	ah,ah
20062 4EEA           50                         push	ax
20063                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20064 4EEB           E8         F8AB            call	_vgamem_fill_cga
20065 4EEE           83C4                   0C  add	sp,*$C
20066                                           !BCC_EOS
20067                                           ! 2172              else
20068                                           ! 2173               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20069 4EF1           EB           28            jmp .126
20070                       00004EF3            .123:
20071                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20072 4EF3           8A46         FD            mov	al,-3[bp]
20073 4EF6           30E4                       xor	ah,ah
20074 4EF8           50                         push	ax
20075                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20076 4EF9           FF76         F8            push	-8[bp]
20077                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20078 4EFC           8A46         FB            mov	al,-5[bp]
20079 4EFF           30E4                       xor	ah,ah
20080 4F01           50                         push	ax
20081                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20082 4F02           8B46         F4            mov	ax,-$C[bp]
20083 4F05           2A46         04            sub	al,4[bp]
20084 4F08           80DC                   00  sbb	ah,*0
20085                                           ! Debug: list unsigned int = ax+0 (used reg = )
20086 4F0B           50                         push	ax
20087                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20088 4F0C           FF76         F4            push	-$C[bp]
20089                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20090 4F0F           8A46         0A            mov	al,$A[bp]
20091 4F12           30E4                       xor	ah,ah
20092 4F14           50                         push	ax
20093                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20094 4F15           E8         F76F            call	_vgamem_copy_cga
20095 4F18           83C4                   0C  add	sp,*$C
20096                                           !BCC_EOS
20097                                           ! 2174              if (i>rlr) break;
20098                       00004F1B            .126:
20099                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20100 4F1B           8A46         0C            mov	al,$C[bp]
20101 4F1E           30E4                       xor	ah,ah
20102 4F20           3B46         F4            cmp	ax,-$C[bp]
20103 4F23           73           02            jae 	.127
20104                       00004F25            .128:
20105 4F25           EB           13            jmp .11F
20106                                           !BCC_EOS
20107                                           ! 2175             }
20108                       00004F27            .127:
20109                                           ! 2176           }
20110                       00004F27            .120:
20111                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20112 4F27           8B46         F4            mov	ax,-$C[bp]
20113 4F2A           48                         dec	ax
20114 4F2B           8946         F4            mov	-$C[bp],ax
20115                       00004F2E            .121:
20116                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20117 4F2E           8A46         08            mov	al,8[bp]
20118 4F31           30E4                       xor	ah,ah
20119 4F33           3B46         F4            cmp	ax,-$C[bp]
20120 4F36         0F86         FF7C            blos	.122
20121                       00004F3A            .129:
20122                       00004F3A            .11F:
20123                                           ! 2177         }
20124                       00004F3A            .11E:
20125                                           ! 2178        break;
20126                       00004F3A            .110:
20127 4F3A           EB           14            jmp .E6
20128                                           !BCC_EOS
20129                                           ! 2179     }
20130                                           ! 2180   }
20131 4F3C           EB           12            jmp .E6
20132                       00004F3E            .E8:
20133 4F3E           2C                     02  sub	al,*2
20134 4F40         0F84         FE1F            beq 	.109
20135 4F44           2C                     01  sub	al,*1
20136 4F46         0F84         FC63            beq 	.EA
20137 4F4A           2C                     01  sub	al,*1
20138 4F4C         0F84         FC5D            beq 	.E9
20139                       00004F50            .E6:
20140                       FFFFFFF0            ..FFFC	=	-$10
20141                                           ! 2181 }
20142                       00004F50            .E5:
20143 4F50           89EC                       mov	sp,bp
20144 4F52           5D                         pop	bp
20145 4F53           C3                         ret
20146                                           ! 2182 static void biosfn_read_char_attr (page,car)
20147                                           ! Register BX used in function biosfn_scroll
20148                                           ! 2183 Bit8u page;Bit16u *car;
20149                       00004F54            _biosfn_read_char_attr:
20150                                           !BCC_EOS
20151                                           !BCC_EOS
20152                                           ! 2184 {Bit16u ss=get_SS();
20153 4F54           55                         push	bp
20154 4F55           89E5                       mov	bp,sp
20155 4F57           4C                         dec	sp
20156 4F58           4C                         dec	sp
20157                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20158 4F59           E8         2C25            call	_get_SS
20159                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20160 4F5C           8946         FE            mov	-2[bp],ax
20161                                           !BCC_EOS
20162                                           ! 2185  Bit8u xcurs,ycurs,mode,line;
20163                                           !BCC_EOS
20164                                           ! 2186  Bit16u nbcols,nbrows,address;
20165                                           !BCC_EOS
20166                                           ! 2187  Bit16u cursor,dummy;
20167                                           !BCC_EOS
20168                                           ! 2188  mode=read_byte(0x40,0x49);
20169 4F5F           83C4                   F2  add	sp,*-$E
20170                                           ! Debug: list int = const $49 (used reg = )
20171 4F62           B8                   0049  mov	ax,*$49
20172 4F65           50                         push	ax
20173                                           ! Debug: list int = const $40 (used reg = )
20174 4F66           B8                   0040  mov	ax,*$40
20175 4F69           50                         push	ax
20176                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20177 4F6A           E8         2B88            call	_read_byte
20178 4F6D           83C4                   04  add	sp,*4
20179                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20180 4F70           8846         FB            mov	-5[bp],al
20181                                           !BCC_EOS
20182                                           ! 2189  line=find_vga_entry(mode);
20183                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20184 4F73           8A46         FB            mov	al,-5[bp]
20185 4F76           30E4                       xor	ah,ah
20186 4F78           50                         push	ax
20187                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20188 4F79           E8         2A8D            call	_find_vga_entry
20189 4F7C           44                         inc	sp
20190 4F7D           44                         inc	sp
20191                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20192 4F7E           8846         FA            mov	-6[bp],al
20193                                           !BCC_EOS
20194                                           ! 2190  if(line==0xFF)return;
20195                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20196 4F81           8A46         FA            mov	al,-6[bp]
20197 4F84           3C                     FF  cmp	al,#$FF
20198 4F86           75           04            jne 	.12A
20199                       00004F88            .12B:
20200 4F88           89EC                       mov	sp,bp
20201 4F8A           5D                         pop	bp
20202 4F8B           C3                         ret
20203                                           !BCC_EOS
20204                                           ! 2191  biosfn_get_cursor_pos(page,&dummy,&cursor);
20205                       00004F8C            .12A:
20206                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20207 4F8C           8D5E         F2            lea	bx,-$E[bp]
20208 4F8F           53                         push	bx
20209                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20210 4F90           8D5E         F0            lea	bx,-$10[bp]
20211 4F93           53                         push	bx
20212                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20213 4F94           8A46         04            mov	al,4[bp]
20214 4F97           30E4                       xor	ah,ah
20215 4F99           50                         push	ax
20216                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20217 4F9A           E8         F3B9            call	_biosfn_get_cursor_pos
20218 4F9D           83C4                   06  add	sp,*6
20219                                           !BCC_EOS
20220                                           ! 2192  
20221                                           ! 2192 xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20222                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20223 4FA0           8A46         F2            mov	al,-$E[bp]
20224                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20225 4FA3           8846         FD            mov	-3[bp],al
20226                                           !BCC_EOS
20227                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20228 4FA6           8B46         F2            mov	ax,-$E[bp]
20229 4FA9           30C0                       xor	al,al
20230                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20231 4FAB           88E0                       mov	al,ah
20232 4FAD           30E4                       xor	ah,ah
20233                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20234 4FAF           8846         FC            mov	-4[bp],al
20235                                           !BCC_EOS
20236                                           ! 2193  nbrows=read_byte(0x40,0x84)+1;
20237                                           ! Debug: list int = const $84 (used reg = )
20238 4FB2           B8                   0084  mov	ax,#$84
20239 4FB5           50                         push	ax
20240                                           ! Debug: list int = const $40 (used reg = )
20241 4FB6           B8                   0040  mov	ax,*$40
20242 4FB9           50                         push	ax
20243                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20244 4FBA           E8         2B38            call	_read_byte
20245 4FBD           83C4                   04  add	sp,*4
20246                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20247 4FC0           30E4                       xor	ah,ah
20248                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20249 4FC2           40                         inc	ax
20250 4FC3           8946         F6            mov	-$A[bp],ax
20251                                           !BCC_EOS
20252                                           ! 2194  nbcols=read_word(0x40,0x4A);
20253                                           ! Debug: list int = const $4A (used reg = )
20254 4FC6           B8                   004A  mov	ax,*$4A
20255 4FC9           50                         push	ax
20256                                           ! Debug: list int = const $40 (used reg = )
20257 4FCA           B8                   0040  mov	ax,*$40
20258 4FCD           50                         push	ax
20259                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20260 4FCE           E8         2B37            call	_read_word
20261 4FD1           83C4                   04  add	sp,*4
20262                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20263 4FD4           8946         F8            mov	-8[bp],ax
20264                                           !BCC_EOS
20265                                           ! 2195  if(vga_modes[line].class==0x00)
20266                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20267 4FD7           8A46         FA            mov	al,-6[bp]
20268 4FDA           30E4                       xor	ah,ah
20269 4FDC           B1                     03  mov	cl,*3
20270 4FDE           D3E0                       shl	ax,cl
20271 4FE0           89C3                       mov	bx,ax
20272 4FE2           81C3                 01D3  add	bx,#_vga_modes
20273                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20274 4FE6           8A47         01            mov	al,1[bx]
20275 4FE9           84C0                       test	al,al
20276 4FEB           75           5E            jne 	.12C
20277                       00004FED            .12D:
20278                                           ! 2196   {
20279                                           ! 2197    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20280                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20281 4FED           8A46         FC            mov	al,-4[bp]
20282 4FF0           30E4                       xor	ah,ah
20283 4FF2           8B4E         F8            mov	cx,-8[bp]
20284 4FF5           F7E9                       imul	cx
20285                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20286                                           ! Debug: expression subtree swapping
20287 4FF7           0246         FD            add	al,-3[bp]
20288 4FFA           80D4                   00  adc	ah,*0
20289                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20290 4FFD           D1E0                       shl	ax,*1
20291 4FFF           50                         push	ax
20292                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20293 5000           8B46         F8            mov	ax,-8[bp]
20294 5003           8B4E         F6            mov	cx,-$A[bp]
20295 5006           F7E9                       imul	cx
20296                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20297 5008           D1E0                       shl	ax,*1
20298                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20299 500A           0C                     FF  or	al,#$FF
20300                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20301                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20302 500C           89C3                       mov	bx,ax
20303 500E           8A46         04            mov	al,4[bp]
20304 5011           30E4                       xor	ah,ah
20305 5013           93                         xchg	ax,bx
20306 5014           40                         inc	ax
20307 5015           89D9                       mov	cx,bx
20308 5017           F7E9                       imul	cx
20309                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20310 5019           0346         EE            add	ax,-$12[bp]
20311 501C           44                         inc	sp
20312 501D           44                         inc	sp
20313                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20314 501E           8946         F4            mov	-$C[bp],ax
20315                                           !BCC_EOS
20316                                           ! 2198    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20317                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20318 5021           FF76         F4            push	-$C[bp]
20319                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20320 5024           8A46         FA            mov	al,-6[bp]
20321 5027           30E4                       xor	ah,ah
20322 5029           B1                     03  mov	cl,*3
20323 502B           D3E0                       shl	ax,cl
20324 502D           89C3                       mov	bx,ax
20325 502F           81C3                 01D3  add	bx,#_vga_modes
20326                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20327 5033           FF77         04            push	4[bx]
20328                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20329 5036           E8         2ACF            call	_read_word
20330 5039           83C4                   04  add	sp,*4
20331                                           ! Debug: list unsigned short = ax+0 (used reg = )
20332 503C           50                         push	ax
20333                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20334 503D           FF76         06            push	6[bp]
20335                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20336 5040           FF76         FE            push	-2[bp]
20337                                           ! Debug: func () void = write_word+0 (used reg = )
20338 5043           E8         2AED            call	_write_word
20339 5046           83C4                   06  add	sp,*6
20340                                           !BCC_EOS
20341                                           ! 2199   }
20342                                           ! 2200  else
20343                                           ! 2201   {
20344 5049           EB           00            jmp .12E
20345                       0000504B            .12C:
20346                                           ! 2202   }
20347                                           ! 2203 }
20348                       0000504B            .12E:
20349 504B           89EC                       mov	sp,bp
20350 504D           5D                         pop	bp
20351 504E           C3                         ret
20352                                           ! 2204 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20353                                           ! Register BX used in function biosfn_read_char_attr
20354                                           ! 2205 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20355                       0000504F            _write_gfx_char_pl4:
20356                                           !BCC_EOS
20357                                           !BCC_EOS
20358                                           !BCC_EOS
20359                                           !BCC_EOS
20360                                           !BCC_EOS
20361                                           !BCC_EOS
20362                                           ! 2206 {
20363                                           ! 2207  Bit8u i,j,mask;
20364                                           !BCC_EOS
20365                                           ! 2208  Bit8u *fdata;
20366                                           !BCC_EOS
20367                                           ! 2209  Bit16u addr,dest,src;
20368                                           !BCC_EOS
20369                                           ! 2210  switch(cheight)
20370 504F           55                         push	bp
20371 5050           89E5                       mov	bp,sp
20372 5052           83C4                   F4  add	sp,*-$C
20373 5055           8A46         0E            mov	al,$E[bp]
20374                                           ! 2211   {case 14:
20375 5058           EB           18            jmp .131
20376                                           ! 2212     fdata = &vgafont14;
20377                       0000505A            .132:
20378                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20379 505A           BB                   1737  mov	bx,#_vgafont14
20380 505D           895E         FA            mov	-6[bp],bx
20381                                           !BCC_EOS
20382                                           ! 2213     break;
20383 5060           EB           1A            jmp .12F
20384                                           !BCC_EOS
20385                                           ! 2214    case 16:
20386                                           ! 2215     fdata = &vgafont16;
20387                       00005062            .133:
20388                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20389 5062           BB                   2537  mov	bx,#_vgafont16
20390 5065           895E         FA            mov	-6[bp],bx
20391                                           !BCC_EOS
20392                                           ! 2216     break;
20393 5068           EB           12            jmp .12F
20394                                           !BCC_EOS
20395                                           ! 2217    default:
20396                                           ! 2218     fdata = &vgafont8;
20397                       0000506A            .134:
20398                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20399 506A           BB                   0F37  mov	bx,#_vgafont8
20400 506D           895E         FA            mov	-6[bp],bx
20401                                           !BCC_EOS
20402                                           ! 2219   }
20403                                           ! 2220  addr=xcurs+ycurs*cheight*nbcols;
20404 5070           EB           0A            jmp .12F
20405                       00005072            .131:
20406 5072           2C                     0E  sub	al,*$E
20407 5074           74           E4            je 	.132
20408 5076           2C                     02  sub	al,*2
20409 5078           74           E8            je 	.133
20410 507A           EB           EE            jmp	.134
20411                       0000507C            .12F:
20412                       FFFFFFF2            ..FFFB	=	-$E
20413                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20414 507C           8A46         0E            mov	al,$E[bp]
20415 507F           30E4                       xor	ah,ah
20416 5081           89C3                       mov	bx,ax
20417 5083           8A46         0A            mov	al,$A[bp]
20418 5086           30E4                       xor	ah,ah
20419 5088           89D9                       mov	cx,bx
20420 508A           F7E9                       imul	cx
20421                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20422 508C           89C3                       mov	bx,ax
20423 508E           8A46         0C            mov	al,$C[bp]
20424 5091           30E4                       xor	ah,ah
20425 5093           93                         xchg	ax,bx
20426 5094           89D9                       mov	cx,bx
20427 5096           F7E9                       imul	cx
20428                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20429                                           ! Debug: expression subtree swapping
20430 5098           0246         08            add	al,8[bp]
20431 509B           80D4                   00  adc	ah,*0
20432                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20433 509E           8946         F8            mov	-8[bp],ax
20434                                           !BCC_EOS
20435                                           ! 2221  src = car * cheight;
20436                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20437 50A1           8A46         0E            mov	al,$E[bp]
20438 50A4           30E4                       xor	ah,ah
20439 50A6           89C3                       mov	bx,ax
20440 50A8           8A46         04            mov	al,4[bp]
20441 50AB           30E4                       xor	ah,ah
20442 50AD           89D9                       mov	cx,bx
20443 50AF           F7E9                       imul	cx
20444                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20445 50B1           8946         F4            mov	-$C[bp],ax
20446                                           !BCC_EOS
20447                                           ! 2222  outw(0x3c4, 0x0f02);
20448                                           ! Debug: list int = const $F02 (used reg = )
20449 50B4           B8                   0F02  mov	ax,#$F02
20450 50B7           50                         push	ax
20451                                           ! Debug: list int = const $3C4 (used reg = )
20452 50B8           B8                   03C4  mov	ax,#$3C4
20453 50BB           50                         push	ax
20454                                           ! Debug: func () void = outw+0 (used reg = )
20455 50BC           E8         2AB2            call	_outw
20456 50BF           83C4                   04  add	sp,*4
20457                                           !BCC_EOS
20458                                           ! 2223  outw(0x3ce, 0x0205);
20459                                           ! Debug: list int = const $205 (used reg = )
20460 50C2           B8                   0205  mov	ax,#$205
20461 50C5           50                         push	ax
20462                                           ! Debug: list int = const $3CE (used reg = )
20463 50C6           B8                   03CE  mov	ax,#$3CE
20464 50C9           50                         push	ax
20465                                           ! Debug: func () void = outw+0 (used reg = )
20466 50CA           E8         2AA4            call	_outw
20467 50CD           83C4                   04  add	sp,*4
20468                                           !BCC_EOS
20469                                           ! 2224  if(attr&0x80)
20470                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20471 50D0           8A46         06            mov	al,6[bp]
20472 50D3           24                     80  and	al,#$80
20473 50D5           84C0                       test	al,al
20474 50D7           74           10            je  	.135
20475                       000050D9            .136:
20476                                           ! 2225   {
20477                                           ! 2226    outw(0x3ce, 0x1803);
20478                                           ! Debug: list int = const $1803 (used reg = )
20479 50D9           B8                   1803  mov	ax,#$1803
20480 50DC           50                         push	ax
20481                                           ! Debug: list int = const $3CE (used reg = )
20482 50DD           B8                   03CE  mov	ax,#$3CE
20483 50E0           50                         push	ax
20484                                           ! Debug: func () void = outw+0 (used reg = )
20485 50E1           E8         2A8D            call	_outw
20486 50E4           83C4                   04  add	sp,*4
20487                                           !BCC_EOS
20488                                           ! 2227   }
20489                                           ! 2228  else
20490                                           ! 2229   {
20491 50E7           EB           0E            jmp .137
20492                       000050E9            .135:
20493                                           ! 2230    outw(0x3ce, 0x0003);
20494                                           ! Debug: list int = const 3 (used reg = )
20495 50E9           B8                   0003  mov	ax,*3
20496 50EC           50                         push	ax
20497                                           ! Debug: list int = const $3CE (used reg = )
20498 50ED           B8                   03CE  mov	ax,#$3CE
20499 50F0           50                         push	ax
20500                                           ! Debug: func () void = outw+0 (used reg = )
20501 50F1           E8         2A7D            call	_outw
20502 50F4           83C4                   04  add	sp,*4
20503                                           !BCC_EOS
20504                                           ! 2231   }
20505                                           ! 2232  for(i=0;i<cheight;i++)
20506                       000050F7            .137:
20507                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20508 50F7           30C0                       xor	al,al
20509 50F9           8846         FF            mov	-1[bp],al
20510                                           !BCC_EOS
20511                                           !BCC_EOS
20512                                           ! 2233   {
20513 50FC           E9         00A6            br 	.13A
20514                       000050FF            .13B:
20515                                           ! 2234    dest=addr+i*nbcols;
20516                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20517 50FF           8A46         0C            mov	al,$C[bp]
20518 5102           30E4                       xor	ah,ah
20519 5104           89C3                       mov	bx,ax
20520 5106           8A46         FF            mov	al,-1[bp]
20521 5109           30E4                       xor	ah,ah
20522 510B           89D9                       mov	cx,bx
20523 510D           F7E9                       imul	cx
20524                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20525                                           ! Debug: expression subtree swapping
20526 510F           0346         F8            add	ax,-8[bp]
20527                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20528 5112           8946         F6            mov	-$A[bp],ax
20529                                           !BCC_EOS
20530                                           ! 2235    for(j=0;j<8;j++)
20531                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20532 5115           30C0                       xor	al,al
20533 5117           8846         FE            mov	-2[bp],al
20534                                           !BCC_EOS
20535                                           !BCC_EOS
20536                                           ! 2236     {
20537 511A           EB           79            jmp .13E
20538                       0000511C            .13F:
20539                                           ! 2237      mask=0x80>>j;
20540                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20541 511C           8A46         FE            mov	al,-2[bp]
20542 511F           30E4                       xor	ah,ah
20543 5121           89C3                       mov	bx,ax
20544 5123           B8                   0080  mov	ax,#$80
20545 5126           89D9                       mov	cx,bx
20546 5128           D3F8                       sar	ax,cl
20547                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20548 512A           8846         FD            mov	-3[bp],al
20549                                           !BCC_EOS
20550                                           ! 2238      outw(0x3ce, (mask << 8) | 0x08);
20551                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20552 512D           8A46         FD            mov	al,-3[bp]
20553 5130           30E4                       xor	ah,ah
20554 5132           88C4                       mov	ah,al
20555 5134           30C0                       xor	al,al
20556                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
20557 5136           0C                     08  or	al,*8
20558                                           ! Debug: list unsigned int = ax+0 (used reg = )
20559 5138           50                         push	ax
20560                                           ! Debug: list int = const $3CE (used reg = )
20561 5139           B8                   03CE  mov	ax,#$3CE
20562 513C           50                         push	ax
20563                                           ! Debug: func () void = outw+0 (used reg = )
20564 513D           E8         2A31            call	_outw
20565 5140           83C4                   04  add	sp,*4
20566                                           !BCC_EOS
20567                                           ! 2239      read_byte(0xa000,dest);
20568                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20569 5143           FF76         F6            push	-$A[bp]
20570                                           ! Debug: list unsigned int = const $A000 (used reg = )
20571 5146           B8                   A000  mov	ax,#$A000
20572 5149           50                         push	ax
20573                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20574 514A           E8         29A8            call	_read_byte
20575 514D           83C4                   04  add	sp,*4
20576                                           !BCC_EOS
20577                                           ! 2240      if(fdata[src+i]&mask)
20578                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20579 5150           8B46         F4            mov	ax,-$C[bp]
20580 5153           0246         FF            add	al,-1[bp]
20581 5156           80D4                   00  adc	ah,*0
20582                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20583 5159           0346         FA            add	ax,-6[bp]
20584 515C           89C3                       mov	bx,ax
20585                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20586 515E           8A07                       mov	al,[bx]
20587 5160           2246         FD            and	al,-3[bp]
20588 5163           84C0                       test	al,al
20589 5165           74           17            je  	.140
20590                       00005167            .141:
20591                                           ! 2241       {
20592                                           ! 2242        write_byte(0xa000,dest,attr&0x0f);
20593                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
20594 5167           8A46         06            mov	al,6[bp]
20595 516A           24                     0F  and	al,*$F
20596                                           ! Debug: list unsigned char = al+0 (used reg = )
20597 516C           30E4                       xor	ah,ah
20598 516E           50                         push	ax
20599                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20600 516F           FF76         F6            push	-$A[bp]
20601                                           ! Debug: list unsigned int = const $A000 (used reg = )
20602 5172           B8                   A000  mov	ax,#$A000
20603 5175           50                         push	ax
20604                                           ! Debug: func () void = write_byte+0 (used reg = )
20605 5176           E8         29A2            call	_write_byte
20606 5179           83C4                   06  add	sp,*6
20607                                           !BCC_EOS
20608                                           ! 2243       }
20609                                           ! 2244      else
20610                                           ! 2245       {
20611 517C           EB           10            jmp .142
20612                       0000517E            .140:
20613                                           ! 2246        write_byte(0xa000,dest,0x00);
20614                                           ! Debug: list int = const 0 (used reg = )
20615 517E           31C0                       xor	ax,ax
20616 5180           50                         push	ax
20617                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20618 5181           FF76         F6            push	-$A[bp]
20619                                           ! Debug: list unsigned int = const $A000 (used reg = )
20620 5184           B8                   A000  mov	ax,#$A000
20621 5187           50                         push	ax
20622                                           ! Debug: func () void = write_byte+0 (used reg = )
20623 5188           E8         2990            call	_write_byte
20624 518B           83C4                   06  add	sp,*6
20625                                           !BCC_EOS
20626                                           ! 2247       }
20627                                           ! 2248     }
20628                       0000518E            .142:
20629                                           ! 2249   }
20630                       0000518E            .13D:
20631                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20632 518E           8A46         FE            mov	al,-2[bp]
20633 5191           40                         inc	ax
20634 5192           8846         FE            mov	-2[bp],al
20635                       00005195            .13E:
20636                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20637 5195           8A46         FE            mov	al,-2[bp]
20638 5198           3C                     08  cmp	al,*8
20639 519A         0F82         FF7E            blo 	.13F
20640                       0000519E            .143:
20641                       0000519E            .13C:
20642                                           ! 2250 #asm
20643                       0000519E            .139:
20644                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
20645 519E           8A46         FF            mov	al,-1[bp]
20646 51A1           40                         inc	ax
20647 51A2           8846         FF            mov	-1[bp],al
20648                       000051A5            .13A:
20649                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
20650 51A5           8A46         FF            mov	al,-1[bp]
20651 51A8           3A46         0E            cmp	al,$E[bp]
20652 51AB         0F82         FF50            blo 	.13B
20653                       000051AF            .144:
20654                       000051AF            .138:
20655                                           !BCC_EOS
20656                                           !BCC_ASM
20657                       0000000A            _write_gfx_char_pl4.j	set	$A
20658                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
20659                       00000006            _write_gfx_char_pl4.fdata	set	6
20660                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
20661                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
20662                       0000000E            .write_gfx_char_pl4.cheight	set	$E
20663                       00000018            _write_gfx_char_pl4.nbcols	set	$18
20664                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
20665                       0000000B            _write_gfx_char_pl4.i	set	$B
20666                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
20667                       00000016            _write_gfx_char_pl4.ycurs	set	$16
20668                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
20669                       00000009            _write_gfx_char_pl4.mask	set	9
20670                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
20671                       00000002            _write_gfx_char_pl4.dest	set	2
20672                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
20673                       00000014            _write_gfx_char_pl4.xcurs	set	$14
20674                       00000008            .write_gfx_char_pl4.xcurs	set	8
20675                       00000000            _write_gfx_char_pl4.src	set	0
20676                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
20677                       00000012            _write_gfx_char_pl4.attr	set	$12
20678                       00000006            .write_gfx_char_pl4.attr	set	6
20679                       00000010            _write_gfx_char_pl4.car	set	$10
20680                       00000004            .write_gfx_char_pl4.car	set	4
20681                       00000004            _write_gfx_char_pl4.addr	set	4
20682                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
20683 51AF           BA                   03CE    mov dx, # 0x3ce
20684 51B2           B8                   FF08    mov ax, #0xff08
20685 51B5           EF                           out dx, ax
20686 51B6           B8                   0005    mov ax, #0x0005
20687 51B9           EF                           out dx, ax
20688 51BA           B8                   0003    mov ax, #0x0003
20689 51BD           EF                           out dx, ax
20690                                           ! 2258 endasm
20691                                           !BCC_ENDASM
20692                                           !BCC_EOS
20693                                           ! 2259 }
20694 51BE           89EC                       mov	sp,bp
20695 51C0           5D                         pop	bp
20696 51C1           C3                         ret
20697                                           ! 2260 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
20698                                           ! Register BX used in function write_gfx_char_pl4
20699                                           ! 2261 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
20700                       000051C2            _write_gfx_char_cga:
20701                                           !BCC_EOS
20702                                           !BCC_EOS
20703                                           !BCC_EOS
20704                                           !BCC_EOS
20705                                           !BCC_EOS
20706                                           !BCC_EOS
20707                                           ! 2262 {
20708                                           ! 2263  Bit8u i,j,mask,data;
20709                                           !BCC_EOS
20710                                           ! 2264  Bit8u *fdata;
20711                                           !BCC_EOS
20712                                           ! 2265  Bit16u addr,dest,src;
20713                                           !BCC_EOS
20714                                           ! 2266  fdata = &vgafont8;
20715 51C2           55                         push	bp
20716 51C3           89E5                       mov	bp,sp
20717 51C5           83C4                   F4  add	sp,*-$C
20718                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20719 51C8           BB                   0F37  mov	bx,#_vgafont8
20720 51CB           895E         FA            mov	-6[bp],bx
20721                                           !BCC_EOS
20722                                           ! 2267  addr=(xcurs*bpp)+ycurs*320;
20723                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
20724 51CE           8A46         0A            mov	al,$A[bp]
20725 51D1           30E4                       xor	ah,ah
20726 51D3           B9                   0140  mov	cx,#$140
20727 51D6           F7E9                       imul	cx
20728 51D8           50                         push	ax
20729                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
20730 51D9           8A46         0E            mov	al,$E[bp]
20731 51DC           30E4                       xor	ah,ah
20732 51DE           89C3                       mov	bx,ax
20733 51E0           8A46         08            mov	al,8[bp]
20734 51E3           30E4                       xor	ah,ah
20735 51E5           89D9                       mov	cx,bx
20736 51E7           F7E9                       imul	cx
20737                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
20738 51E9           0346         F2            add	ax,-$E[bp]
20739 51EC           44                         inc	sp
20740 51ED           44                         inc	sp
20741                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20742 51EE           8946         F8            mov	-8[bp],ax
20743                                           !BCC_EOS
20744                                           ! 2268  src = car * 8;
20745                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
20746 51F1           8A46         04            mov	al,4[bp]
20747 51F4           30E4                       xor	ah,ah
20748 51F6           B1                     03  mov	cl,*3
20749 51F8           D3E0                       shl	ax,cl
20750                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20751 51FA           8946         F4            mov	-$C[bp],ax
20752                                           !BCC_EOS
20753                                           ! 2269  for(i=0;i<8;i++)
20754                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20755 51FD           30C0                       xor	al,al
20756 51FF           8846         FF            mov	-1[bp],al
20757                                           !BCC_EOS
20758                                           !BCC_EOS
20759                                           ! 2270   {
20760 5202           E9         01B5            br 	.147
20761                       00005205            .148:
20762                                           ! 2271    dest=addr+(i>>1)*80;
20763                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20764 5205           8A46         FF            mov	al,-1[bp]
20765 5208           30E4                       xor	ah,ah
20766 520A           D1E8                       shr	ax,*1
20767                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
20768 520C           B9                   0050  mov	cx,*$50
20769 520F           F7E9                       imul	cx
20770                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20771                                           ! Debug: expression subtree swapping
20772 5211           0346         F8            add	ax,-8[bp]
20773                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20774 5214           8946         F6            mov	-$A[bp],ax
20775                                           !BCC_EOS
20776                                           ! 2272    if (i & 1) dest += 0x2000;
20777                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20778 5217           8A46         FF            mov	al,-1[bp]
20779 521A           24                     01  and	al,*1
20780 521C           84C0                       test	al,al
20781 521E           74           09            je  	.149
20782                       00005220            .14A:
20783                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
20784 5220           8B46         F6            mov	ax,-$A[bp]
20785 5223           05                   2000  add	ax,#$2000
20786 5226           8946         F6            mov	-$A[bp],ax
20787                                           !BCC_EOS
20788                                           ! 2273    mask = 0x80;
20789                       00005229            .149:
20790                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
20791 5229           B0                     80  mov	al,#$80
20792 522B           8846         FD            mov	-3[bp],al
20793                                           !BCC_EOS
20794                                           ! 2274    if (bpp == 1)
20795                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
20796 522E           8A46         0E            mov	al,$E[bp]
20797 5231           3C                     01  cmp	al,*1
20798 5233         0F85         00B3            bne 	.14B
20799                       00005237            .14C:
20800                                           ! 2275     {
20801                                           ! 2276      if (attr & 0x80)
20802                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20803 5237           8A46         06            mov	al,6[bp]
20804 523A           24                     80  and	al,#$80
20805 523C           84C0                       test	al,al
20806 523E           74           12            je  	.14D
20807                       00005240            .14E:
20808                                           ! 2277       {
20809                                           ! 2278        data = read_byte(0xb800,dest);
20810                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20811 5240           FF76         F6            push	-$A[bp]
20812                                           ! Debug: list unsigned int = const $B800 (used reg = )
20813 5243           B8                   B800  mov	ax,#$B800
20814 5246           50                         push	ax
20815                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20816 5247           E8         28AB            call	_read_byte
20817 524A           83C4                   04  add	sp,*4
20818                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20819 524D           8846         FC            mov	-4[bp],al
20820                                           !BCC_EOS
20821                                           ! 2279       }
20822                                           ! 2280      else
20823                                           ! 2281       {
20824 5250           EB           05            jmp .14F
20825                       00005252            .14D:
20826                                           ! 2282        data = 0x00;
20827                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20828 5252           30C0                       xor	al,al
20829 5254           8846         FC            mov	-4[bp],al
20830                                           !BCC_EOS
20831                                           ! 2283       }
20832                                           ! 2284      for(j=0;j<8;j++)
20833                       00005257            .14F:
20834                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20835 5257           30C0                       xor	al,al
20836 5259           8846         FE            mov	-2[bp],al
20837                                           !BCC_EOS
20838                                           !BCC_EOS
20839                                           ! 2285       {
20840 525C           EB           6F            jmp .152
20841                       0000525E            .153:
20842                                           ! 2286        if (fdata[src+i] & mask)
20843                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20844 525E           8B46         F4            mov	ax,-$C[bp]
20845 5261           0246         FF            add	al,-1[bp]
20846 5264           80D4                   00  adc	ah,*0
20847                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20848 5267           0346         FA            add	ax,-6[bp]
20849 526A           89C3                       mov	bx,ax
20850                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20851 526C           8A07                       mov	al,[bx]
20852 526E           2246         FD            and	al,-3[bp]
20853 5271           84C0                       test	al,al
20854 5273           74           47            je  	.154
20855                       00005275            .155:
20856                                           ! 2287         {
20857                                           ! 2288          if (attr & 0x80)
20858                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20859 5275           8A46         06            mov	al,6[bp]
20860 5278           24                     80  and	al,#$80
20861 527A           84C0                       test	al,al
20862 527C           74           20            je  	.156
20863                       0000527E            .157:
20864                                           ! 2289           {
20865                                           ! 2290            data ^= (attr & 0x01) << (7-j);
20866                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20867 527E           B8                   0007  mov	ax,*7
20868 5281           2A46         FE            sub	al,-2[bp]
20869 5284           80DC                   00  sbb	ah,*0
20870 5287           50                         push	ax
20871                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20872 5288           8A46         06            mov	al,6[bp]
20873 528B           24                     01  and	al,*1
20874                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20875 528D           30E4                       xor	ah,ah
20876 528F           8B4E         F2            mov	cx,-$E[bp]
20877 5292           D3E0                       shl	ax,cl
20878 5294           44                         inc	sp
20879 5295           44                         inc	sp
20880                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20881 5296           3246         FC            xor	al,-4[bp]
20882 5299           8846         FC            mov	-4[bp],al
20883                                           !BCC_EOS
20884                                           ! 2291           }
20885                                           ! 2292          else
20886                                           ! 2293           {
20887 529C           EB           1E            jmp .158
20888                       0000529E            .156:
20889                                           ! 2294            data |= (attr & 0x01) << (7-j);
20890                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20891 529E           B8                   0007  mov	ax,*7
20892 52A1           2A46         FE            sub	al,-2[bp]
20893 52A4           80DC                   00  sbb	ah,*0
20894 52A7           50                         push	ax
20895                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20896 52A8           8A46         06            mov	al,6[bp]
20897 52AB           24                     01  and	al,*1
20898                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20899 52AD           30E4                       xor	ah,ah
20900 52AF           8B4E         F2            mov	cx,-$E[bp]
20901 52B2           D3E0                       shl	ax,cl
20902 52B4           44                         inc	sp
20903 52B5           44                         inc	sp
20904                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20905 52B6           0A46         FC            or	al,-4[bp]
20906 52B9           8846         FC            mov	-4[bp],al
20907                                           !BCC_EOS
20908                                           ! 2295           }
20909                                           ! 2296         }
20910                       000052BC            .158:
20911                                           ! 2297        mask 
20912                       000052BC            .154:
20913                                           ! 2297 >>= 1;
20914                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
20915 52BC           8A46         FD            mov	al,-3[bp]
20916 52BF           30E4                       xor	ah,ah
20917 52C1           D1E8                       shr	ax,*1
20918 52C3           8846         FD            mov	-3[bp],al
20919                                           !BCC_EOS
20920                                           ! 2298       }
20921                                           ! 2299      write_byte(0xb800,dest,data);
20922                       000052C6            .151:
20923                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20924 52C6           8A46         FE            mov	al,-2[bp]
20925 52C9           40                         inc	ax
20926 52CA           8846         FE            mov	-2[bp],al
20927                       000052CD            .152:
20928                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20929 52CD           8A46         FE            mov	al,-2[bp]
20930 52D0           3C                     08  cmp	al,*8
20931 52D2           72           8A            jb 	.153
20932                       000052D4            .159:
20933                       000052D4            .150:
20934                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
20935 52D4           8A46         FC            mov	al,-4[bp]
20936 52D7           30E4                       xor	ah,ah
20937 52D9           50                         push	ax
20938                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20939 52DA           FF76         F6            push	-$A[bp]
20940                                           ! Debug: list unsigned int = const $B800 (used reg = )
20941 52DD           B8                   B800  mov	ax,#$B800
20942 52E0           50                         push	ax
20943                                           ! Debug: func () void = write_byte+0 (used reg = )
20944 52E1           E8         2837            call	_write_byte
20945 52E4           83C4                   06  add	sp,*6
20946                                           !BCC_EOS
20947                                           ! 2300     }
20948                                           ! 2301    else
20949                                           ! 2302     {
20950 52E7           E9         00C9            br 	.15A
20951                       000052EA            .14B:
20952                                           ! 2303      while (mask > 0)
20953                                           ! 2304       {
20954 52EA           E9         00BD            br 	.15C
20955                       000052ED            .15D:
20956                                           ! 2305        if (attr & 0x80)
20957                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20958 52ED           8A46         06            mov	al,6[bp]
20959 52F0           24                     80  and	al,#$80
20960 52F2           84C0                       test	al,al
20961 52F4           74           12            je  	.15E
20962                       000052F6            .15F:
20963                                           ! 2306         {
20964                                           ! 2307          data = read_byte(0xb800,dest);
20965                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20966 52F6           FF76         F6            push	-$A[bp]
20967                                           ! Debug: list unsigned int = const $B800 (used reg = )
20968 52F9           B8                   B800  mov	ax,#$B800
20969 52FC           50                         push	ax
20970                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20971 52FD           E8         27F5            call	_read_byte
20972 5300           83C4                   04  add	sp,*4
20973                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20974 5303           8846         FC            mov	-4[bp],al
20975                                           !BCC_EOS
20976                                           ! 2308         }
20977                                           ! 2309        else
20978                                           ! 2310         {
20979 5306           EB           05            jmp .160
20980                       00005308            .15E:
20981                                           ! 2311          data = 0x00;
20982                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20983 5308           30C0                       xor	al,al
20984 530A           8846         FC            mov	-4[bp],al
20985                                           !BCC_EOS
20986                                           ! 2312         }
20987                                           ! 2313        for(j=0;j<4;j++)
20988                       0000530D            .160:
20989                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20990 530D           30C0                       xor	al,al
20991 530F           8846         FE            mov	-2[bp],al
20992                                           !BCC_EOS
20993                                           !BCC_EOS
20994                                           ! 2314         {
20995 5312           EB           75            jmp .163
20996                       00005314            .164:
20997                                           ! 2315          if (fdata[src+i] & mask)
20998                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20999 5314           8B46         F4            mov	ax,-$C[bp]
21000 5317           0246         FF            add	al,-1[bp]
21001 531A           80D4                   00  adc	ah,*0
21002                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21003 531D           0346         FA            add	ax,-6[bp]
21004 5320           89C3                       mov	bx,ax
21005                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21006 5322           8A07                       mov	al,[bx]
21007 5324           2246         FD            and	al,-3[bp]
21008 5327           84C0                       test	al,al
21009 5329           74           4D            je  	.165
21010                       0000532B            .166:
21011                                           ! 2316           {
21012                                           ! 2317            if (attr & 0x80)
21013                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21014 532B           8A46         06            mov	al,6[bp]
21015 532E           24                     80  and	al,#$80
21016 5330           84C0                       test	al,al
21017 5332         0F84         0022            beq 	.167
21018                       00005336            .168:
21019                                           ! 2318             {
21020                                           ! 2319              data ^= (attr & 0x03) << ((3-j)*2);
21021                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21022 5336           B8                   0003  mov	ax,*3
21023 5339           2A46         FE            sub	al,-2[bp]
21024 533C           80DC                   00  sbb	ah,*0
21025                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21026 533F           D1E0                       shl	ax,*1
21027 5341           50                         push	ax
21028                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21029 5342           8A46         06            mov	al,6[bp]
21030 5345           24                     03  and	al,*3
21031                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21032 5347           30E4                       xor	ah,ah
21033 5349           8B4E         F2            mov	cx,-$E[bp]
21034 534C           D3E0                       shl	ax,cl
21035 534E           44                         inc	sp
21036 534F           44                         inc	sp
21037                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21038 5350           3246         FC            xor	al,-4[bp]
21039 5353           8846         FC            mov	-4[bp],al
21040                                           !BCC_EOS
21041                                           ! 2320             }
21042                                           ! 2321            else
21043                                           ! 2322             {
21044 5356           EB           20            jmp .169
21045                       00005358            .167:
21046                                           ! 2323              data |= (attr & 0x03) << ((3-j)*2);
21047                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21048 5358           B8                   0003  mov	ax,*3
21049 535B           2A46         FE            sub	al,-2[bp]
21050 535E           80DC                   00  sbb	ah,*0
21051                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21052 5361           D1E0                       shl	ax,*1
21053 5363           50                         push	ax
21054                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21055 5364           8A46         06            mov	al,6[bp]
21056 5367           24                     03  and	al,*3
21057                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21058 5369           30E4                       xor	ah,ah
21059 536B           8B4E         F2            mov	cx,-$E[bp]
21060 536E           D3E0                       shl	ax,cl
21061 5370           44                         inc	sp
21062 5371           44                         inc	sp
21063                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21064 5372           0A46         FC            or	al,-4[bp]
21065 5375           8846         FC            mov	-4[bp],al
21066                                           !BCC_EOS
21067                                           ! 2324             }
21068                                           ! 2325           }
21069                       00005378            .169:
21070                                           ! 2326          mask >>= 1;
21071                       00005378            .165:
21072                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21073 5378           8A46         FD            mov	al,-3[bp]
21074 537B           30E4                       xor	ah,ah
21075 537D           D1E8                       shr	ax,*1
21076 537F           8846         FD            mov	-3[bp],al
21077                                           !BCC_EOS
21078                                           ! 2327         }
21079                                           ! 2328        write_byte(0xb800,dest,data);
21080                       00005382            .162:
21081                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21082 5382           8A46         FE            mov	al,-2[bp]
21083 5385           40                         inc	ax
21084 5386           8846         FE            mov	-2[bp],al
21085                       00005389            .163:
21086                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21087 5389           8A46         FE            mov	al,-2[bp]
21088 538C           3C                     04  cmp	al,*4
21089 538E           72           84            jb 	.164
21090                       00005390            .16A:
21091                       00005390            .161:
21092                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21093 5390           8A46         FC            mov	al,-4[bp]
21094 5393           30E4                       xor	ah,ah
21095 5395           50                         push	ax
21096                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21097 5396           FF76         F6            push	-$A[bp]
21098                                           ! Debug: list unsigned int = const $B800 (used reg = )
21099 5399           B8                   B800  mov	ax,#$B800
21100 539C           50                         push	ax
21101                                           ! Debug: func () void = write_byte+0 (used reg = )
21102 539D           E8         277B            call	_write_byte
21103 53A0           83C4                   06  add	sp,*6
21104                                           !BCC_EOS
21105                                           ! 2329        dest += 1;
21106                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21107 53A3           8B46         F6            mov	ax,-$A[bp]
21108 53A6           40                         inc	ax
21109 53A7           8946         F6            mov	-$A[bp],ax
21110                                           !BCC_EOS
21111                                           ! 2330       }
21112                                           ! 2331     }
21113                       000053AA            .15C:
21114                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21115 53AA           8A46         FD            mov	al,-3[bp]
21116 53AD           84C0                       test	al,al
21117 53AF         0F85         FF3A            bne 	.15D
21118                       000053B3            .16B:
21119                       000053B3            .15B:
21120                                           ! 2332   }
21121                       000053B3            .15A:
21122                                           ! 2333 }
21123                       000053B3            .146:
21124                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21125 53B3           8A46         FF            mov	al,-1[bp]
21126 53B6           40                         inc	ax
21127 53B7           8846         FF            mov	-1[bp],al
21128                       000053BA            .147:
21129                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21130 53BA           8A46         FF            mov	al,-1[bp]
21131 53BD           3C                     08  cmp	al,*8
21132 53BF         0F82         FE42            blo 	.148
21133                       000053C3            .16C:
21134                       000053C3            .145:
21135 53C3           89EC                       mov	sp,bp
21136 53C5           5D                         pop	bp
21137 53C6           C3                         ret
21138                                           ! 2334 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21139                                           ! Register BX used in function write_gfx_char_cga
21140                                           ! 2335 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21141                       000053C7            _write_gfx_char_lin:
21142                                           !BCC_EOS
21143                                           !BCC_EOS
21144                                           !BCC_EOS
21145                                           !BCC_EOS
21146                                           !BCC_EOS
21147                                           ! 2336 {
21148                                           ! 2337  Bit8u i,j,mask,data;
21149                                           !BCC_EOS
21150                                           ! 2338  Bit8u *fdata;
21151                                           !BCC_EOS
21152                                           ! 2339  Bit16u addr,dest,src;
21153                                           !BCC_EOS
21154                                           ! 2340  fdata = &vgafont8;
21155 53C7           55                         push	bp
21156 53C8           89E5                       mov	bp,sp
21157 53CA           83C4                   F4  add	sp,*-$C
21158                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21159 53CD           BB                   0F37  mov	bx,#_vgafont8
21160 53D0           895E         FA            mov	-6[bp],bx
21161                                           !BCC_EOS
21162                                           ! 2341  addr=xcurs*8+ycurs*nbcols*64;
21163                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21164 53D3           8A46         0C            mov	al,$C[bp]
21165 53D6           30E4                       xor	ah,ah
21166 53D8           89C3                       mov	bx,ax
21167 53DA           8A46         0A            mov	al,$A[bp]
21168 53DD           30E4                       xor	ah,ah
21169 53DF           89D9                       mov	cx,bx
21170 53E1           F7E9                       imul	cx
21171                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21172 53E3           B1                     06  mov	cl,*6
21173 53E5           D3E0                       shl	ax,cl
21174 53E7           50                         push	ax
21175                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21176 53E8           8A46         08            mov	al,8[bp]
21177 53EB           30E4                       xor	ah,ah
21178 53ED           B1                     03  mov	cl,*3
21179 53EF           D3E0                       shl	ax,cl
21180                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21181 53F1           0346         F2            add	ax,-$E[bp]
21182 53F4           44                         inc	sp
21183 53F5           44                         inc	sp
21184                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21185 53F6           8946         F8            mov	-8[bp],ax
21186                                           !BCC_EOS
21187                                           ! 2342  src = car * 8;
21188                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21189 53F9           8A46         04            mov	al,4[bp]
21190 53FC           30E4                       xor	ah,ah
21191 53FE           B1                     03  mov	cl,*3
21192 5400           D3E0                       shl	ax,cl
21193                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21194 5402           8946         F4            mov	-$C[bp],ax
21195                                           !BCC_EOS
21196                                           ! 2343  for(i=0;i<8;i++)
21197                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21198 5405           30C0                       xor	al,al
21199 5407           8846         FF            mov	-1[bp],al
21200                                           !BCC_EOS
21201                                           !BCC_EOS
21202                                           ! 2344   {
21203 540A           E9         0081            br 	.16F
21204                       0000540D            .170:
21205                                           ! 2345    dest=addr+i*nbcols*8;
21206                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21207 540D           8A46         0C            mov	al,$C[bp]
21208 5410           30E4                       xor	ah,ah
21209 5412           89C3                       mov	bx,ax
21210 5414           8A46         FF            mov	al,-1[bp]
21211 5417           30E4                       xor	ah,ah
21212 5419           89D9                       mov	cx,bx
21213 541B           F7E9                       imul	cx
21214                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21215 541D           B1                     03  mov	cl,*3
21216 541F           D3E0                       shl	ax,cl
21217                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21218                                           ! Debug: expression subtree swapping
21219 5421           0346         F8            add	ax,-8[bp]
21220                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21221 5424           8946         F6            mov	-$A[bp],ax
21222                                           !BCC_EOS
21223                                           ! 2346    mask = 0x80;
21224                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21225 5427           B0                     80  mov	al,#$80
21226 5429           8846         FD            mov	-3[bp],al
21227                                           !BCC_EOS
21228                                           ! 2347    for(j=0;j<8;j++)
21229                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21230 542C           30C0                       xor	al,al
21231 542E           8846         FE            mov	-2[bp],al
21232                                           !BCC_EOS
21233                                           !BCC_EOS
21234                                           ! 2348     {
21235 5431           EB           4D            jmp .173
21236                       00005433            .174:
21237                                           ! 2349      data = 0x00;
21238                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21239 5433           30C0                       xor	al,al
21240 5435           8846         FC            mov	-4[bp],al
21241                                           !BCC_EOS
21242                                           ! 2350      if (fdata[src+i] & mask)
21243                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21244 5438           8B46         F4            mov	ax,-$C[bp]
21245 543B           0246         FF            add	al,-1[bp]
21246 543E           80D4                   00  adc	ah,*0
21247                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21248 5441           0346         FA            add	ax,-6[bp]
21249 5444           89C3                       mov	bx,ax
21250                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21251 5446           8A07                       mov	al,[bx]
21252 5448           2246         FD            and	al,-3[bp]
21253 544B           84C0                       test	al,al
21254 544D           74           06            je  	.175
21255                       0000544F            .176:
21256                                           ! 2351       {
21257                                           ! 2352        data = attr;
21258                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21259 544F           8A46         06            mov	al,6[bp]
21260 5452           8846         FC            mov	-4[bp],al
21261                                           !BCC_EOS
21262                                           ! 2353       }
21263                                           ! 2354      write_byte(0xa000,dest+j,data);
21264                       00005455            .175:
21265                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21266 5455           8A46         FC            mov	al,-4[bp]
21267 5458           30E4                       xor	ah,ah
21268 545A           50                         push	ax
21269                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21270 545B           8B46         F6            mov	ax,-$A[bp]
21271 545E           0246         FE            add	al,-2[bp]
21272 5461           80D4                   00  adc	ah,*0
21273                                           ! Debug: list unsigned int = ax+0 (used reg = )
21274 5464           50                         push	ax
21275                                           ! Debug: list unsigned int = const $A000 (used reg = )
21276 5465           B8                   A000  mov	ax,#$A000
21277 5468           50                         push	ax
21278                                           ! Debug: func () void = write_byte+0 (used reg = )
21279 5469           E8         26AF            call	_write_byte
21280 546C           83C4                   06  add	sp,*6
21281                                           !BCC_EOS
21282                                           ! 2355      mask >>= 1;
21283                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21284 546F           8A46         FD            mov	al,-3[bp]
21285 5472           30E4                       xor	ah,ah
21286 5474           D1E8                       shr	ax,*1
21287 5476           8846         FD            mov	-3[bp],al
21288                                           !BCC_EOS
21289                                           ! 2356     }
21290                                           ! 2357   }
21291                       00005479            .172:
21292                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21293 5479           8A46         FE            mov	al,-2[bp]
21294 547C           40                         inc	ax
21295 547D           8846         FE            mov	-2[bp],al
21296                       00005480            .173:
21297                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21298 5480           8A46         FE            mov	al,-2[bp]
21299 5483           3C                     08  cmp	al,*8
21300 5485           72           AC            jb 	.174
21301                       00005487            .177:
21302                       00005487            .171:
21303                                           ! 2358 }
21304                       00005487            .16E:
21305                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21306 5487           8A46         FF            mov	al,-1[bp]
21307 548A           40                         inc	ax
21308 548B           8846         FF            mov	-1[bp],al
21309                       0000548E            .16F:
21310                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21311 548E           8A46         FF            mov	al,-1[bp]
21312 5491           3C                     08  cmp	al,*8
21313 5493         0F82         FF76            blo 	.170
21314                       00005497            .178:
21315                       00005497            .16D:
21316 5497           89EC                       mov	sp,bp
21317 5499           5D                         pop	bp
21318 549A           C3                         ret
21319                                           ! 2359 static void biosfn_write_char_attr (car,page,attr,count)
21320                                           ! Register BX used in function write_gfx_char_lin
21321                                           ! 2360 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21322                       0000549B            _biosfn_write_char_attr:
21323                                           !BCC_EOS
21324                                           !BCC_EOS
21325                                           !BCC_EOS
21326                                           !BCC_EOS
21327                                           ! 2361 {
21328                                           ! 2362  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21329                                           !BCC_EOS
21330                                           ! 2363  Bit16u nbcols,nbrows,address;
21331                                           !BCC_EOS
21332                                           ! 2364  Bit16u cursor,dummy;
21333                                           !BCC_EOS
21334                                           ! 2365  mode=read_byte(0x40,0x49);
21335 549B           55                         push	bp
21336 549C           89E5                       mov	bp,sp
21337 549E           83C4                   F0  add	sp,*-$10
21338                                           ! Debug: list int = const $49 (used reg = )
21339 54A1           B8                   0049  mov	ax,*$49
21340 54A4           50                         push	ax
21341                                           ! Debug: list int = const $40 (used reg = )
21342 54A5           B8                   0040  mov	ax,*$40
21343 54A8           50                         push	ax
21344                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21345 54A9           E8         2649            call	_read_byte
21346 54AC           83C4                   04  add	sp,*4
21347                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21348 54AF           8846         FC            mov	-4[bp],al
21349                                           !BCC_EOS
21350                                           ! 2366  line=find_vga_entry(mode);
21351                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21352 54B2           8A46         FC            mov	al,-4[bp]
21353 54B5           30E4                       xor	ah,ah
21354 54B7           50                         push	ax
21355                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21356 54B8           E8         254E            call	_find_vga_entry
21357 54BB           44                         inc	sp
21358 54BC           44                         inc	sp
21359                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21360 54BD           8846         FB            mov	-5[bp],al
21361                                           !BCC_EOS
21362                                           ! 2367  if(line==0xFF)return;
21363                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21364 54C0           8A46         FB            mov	al,-5[bp]
21365 54C3           3C                     FF  cmp	al,#$FF
21366 54C5           75           04            jne 	.179
21367                       000054C7            .17A:
21368 54C7           89EC                       mov	sp,bp
21369 54C9           5D                         pop	bp
21370 54CA           C3                         ret
21371                                           !BCC_EOS
21372                                           ! 2368  biosfn_get_cursor_pos(page,&dummy,&cursor);
21373                       000054CB            .179:
21374                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21375 54CB           8D5E         F2            lea	bx,-$E[bp]
21376 54CE           53                         push	bx
21377                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21378 54CF           8D5E         F0            lea	bx,-$10[bp]
21379 54D2           53                         push	bx
21380                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21381 54D3           8A46         06            mov	al,6[bp]
21382 54D6           30E4                       xor	ah,ah
21383 54D8           50                         push	ax
21384                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21385 54D9           E8         EE7A            call	_biosfn_get_cursor_pos
21386 54DC           83C4                   06  add	sp,*6
21387                                           !BCC_EOS
21388                                           ! 2369  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21389                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21390 54DF           8A46         F2            mov	al,-$E[bp]
21391                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21392 54E2           8846         FE            mov	-2[bp],al
21393                                           !BCC_EOS
21394                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21395 54E5           8B46         F2            mov	ax,-$E[bp]
21396 54E8           30C0                       xor	al,al
21397                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21398 54EA           88E0                       mov	al,ah
21399 54EC           30E4                       xor	ah,ah
21400                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21401 54EE           8846         FD            mov	-3[bp],al
21402                                           !BCC_EOS
21403                                           ! 2370  nbrows=read_byte(0x40,0x84)+1;
21404                                           ! Debug: list int = const $84 (used reg = )
21405 54F1           B8                   0084  mov	ax,#$84
21406 54F4           50                         push	ax
21407                                           ! Debug: list int = const $40 (used reg = )
21408 54F5           B8                   0040  mov	ax,*$40
21409 54F8           50                         push	ax
21410                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21411 54F9           E8         25F9            call	_read_byte
21412 54FC           83C4                   04  add	sp,*4
21413                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21414 54FF           30E4                       xor	ah,ah
21415                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21416 5501           40                         inc	ax
21417 5502           8946         F6            mov	-$A[bp],ax
21418                                           !BCC_EOS
21419                                           ! 2371  nbcols=read_word(0x40,0x4A);
21420                                           ! Debug: list int = const $4A (used reg = )
21421 5505           B8                   004A  mov	ax,*$4A
21422 5508           50                         push	ax
21423                                           ! Debug: list int = const $40 (used reg = )
21424 5509           B8                   0040  mov	ax,*$40
21425 550C           50                         push	ax
21426                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21427 550D           E8         25F8            call	_read_word
21428 5510           83C4                   04  add	sp,*4
21429                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21430 5513           8946         F8            mov	-8[bp],ax
21431                                           !BCC_EOS
21432                                           ! 2372  if(vga_modes[line].class==0x00)
21433                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21434 5516           8A46         FB            mov	al,-5[bp]
21435 5519           30E4                       xor	ah,ah
21436 551B           B1                     03  mov	cl,*3
21437 551D           D3E0                       shl	ax,cl
21438 551F           89C3                       mov	bx,ax
21439 5521           81C3                 01D3  add	bx,#_vga_modes
21440                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21441 5525           8A47         01            mov	al,1[bx]
21442 5528           84C0                       test	al,al
21443 552A           75           6A            jne 	.17B
21444                       0000552C            .17C:
21445                                           ! 2373   {
21446                                           ! 2374    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21447                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21448 552C           8A46         FD            mov	al,-3[bp]
21449 552F           30E4                       xor	ah,ah
21450 5531           8B4E         F8            mov	cx,-8[bp]
21451 5534           F7E9                       imul	cx
21452                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21453                                           ! Debug: expression subtree swapping
21454 5536           0246         FE            add	al,-2[bp]
21455 5539           80D4                   00  adc	ah,*0
21456                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21457 553C           D1E0                       shl	ax,*1
21458 553E           50                         push	ax
21459                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21460 553F           8B46         F8            mov	ax,-8[bp]
21461 5542           8B4E         F6            mov	cx,-$A[bp]
21462 5545           F7E9                       imul	cx
21463                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21464 5547           D1E0                       shl	ax,*1
21465                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21466 5549           0C                     FF  or	al,#$FF
21467                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21468                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21469 554B           89C3                       mov	bx,ax
21470 554D           8A46         06            mov	al,6[bp]
21471 5550           30E4                       xor	ah,ah
21472 5552           93                         xchg	ax,bx
21473 5553           40                         inc	ax
21474 5554           89D9                       mov	cx,bx
21475 5556           F7E9                       imul	cx
21476                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21477 5558           0346         EE            add	ax,-$12[bp]
21478 555B           44                         inc	sp
21479 555C           44                         inc	sp
21480                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21481 555D           8946         F4            mov	-$C[bp],ax
21482                                           !BCC_EOS
21483                                           ! 2375    dummy=((Bit16u)attr<<8)+car;
21484                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21485 5560           8A46         08            mov	al,8[bp]
21486 5563           30E4                       xor	ah,ah
21487                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21488 5565           88C4                       mov	ah,al
21489 5567           30C0                       xor	al,al
21490                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21491 5569           0246         04            add	al,4[bp]
21492 556C           80D4                   00  adc	ah,*0
21493                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21494 556F           8946         F0            mov	-$10[bp],ax
21495                                           !BCC_EOS
21496                                           ! 2376    memsetw(vga_modes[line].sstart,address,dummy,count);
21497                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21498 5572           FF76         0A            push	$A[bp]
21499                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21500 5575           FF76         F0            push	-$10[bp]
21501                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21502 5578           FF76         F4            push	-$C[bp]
21503                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21504 557B           8A46         FB            mov	al,-5[bp]
21505 557E           30E4                       xor	ah,ah
21506 5580           B1                     03  mov	cl,*3
21507 5582           D3E0                       shl	ax,cl
21508 5584           89C3                       mov	bx,ax
21509 5586           81C3                 01D3  add	bx,#_vga_modes
21510                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21511 558A           FF77         04            push	4[bx]
21512                                           ! Debug: func () void = memsetw+0 (used reg = )
21513 558D           E8         24E0            call	_memsetw
21514 5590           83C4                   08  add	sp,*8
21515                                           !BCC_EOS
21516                                           ! 2377   }
21517                                           ! 2378  else
21518                                           ! 2379   {
21519 5593           E9         00F3            br 	.17D
21520                       00005596            .17B:
21521                                           ! 2380    cheight=video_param_table[line_to_vpti[line]].cheight;
21522                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21523 5596           8A46         FB            mov	al,-5[bp]
21524 5599           30E4                       xor	ah,ah
21525 559B           89C3                       mov	bx,ax
21526                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21527 559D           8A87       0253            mov	al,_line_to_vpti[bx]
21528 55A1           30E4                       xor	ah,ah
21529 55A3           B1                     06  mov	cl,*6
21530 55A5           D3E0                       shl	ax,cl
21531 55A7           89C3                       mov	bx,ax
21532 55A9           81C3                 0267  add	bx,#_video_param_table
21533                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21534 55AD           8A47         02            mov	al,2[bx]
21535 55B0           8846         FF            mov	-1[bp],al
21536                                           !BCC_EOS
21537                                           ! 2381    bpp=vga_modes[line].pixbits;
21538                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21539 55B3           8A46         FB            mov	al,-5[bp]
21540 55B6           30E4                       xor	ah,ah
21541 55B8           B1                     03  mov	cl,*3
21542 55BA           D3E0                       shl	ax,cl
21543 55BC           89C3                       mov	bx,ax
21544 55BE           81C3                 01D3  add	bx,#_vga_modes
21545                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21546 55C2           8A47         03            mov	al,3[bx]
21547 55C5           8846         FA            mov	-6[bp],al
21548                                           !BCC_EOS
21549                                           ! 2382    while((count-->0) && (xcurs<nbcols))
21550                                           ! 2383     {
21551 55C8           E9         00A6            br 	.17F
21552                       000055CB            .180:
21553                                           ! 2384      switch(vga_modes[line].memmodel)
21554                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21555 55CB           8A46         FB            mov	al,-5[bp]
21556 55CE           30E4                       xor	ah,ah
21557 55D0           B1                     03  mov	cl,*3
21558 55D2           D3E0                       shl	ax,cl
21559 55D4           89C3                       mov	bx,ax
21560 55D6           81C3                 01D3  add	bx,#_vga_modes
21561 55DA           8A47         02            mov	al,2[bx]
21562                                           ! 2385       {
21563 55DD           EB           77            jmp .183
21564                                           ! 2386        case 0x04:
21565                                           ! 2387        case 0x03:
21566                       000055DF            .184:
21567                                           ! 2388          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
21568                       000055DF            .185:
21569                                           ! 2388 ;
21570                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21571 55DF           8A46         FF            mov	al,-1[bp]
21572 55E2           30E4                       xor	ah,ah
21573 55E4           50                         push	ax
21574                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21575 55E5           FF76         F8            push	-8[bp]
21576                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21577 55E8           8A46         FD            mov	al,-3[bp]
21578 55EB           30E4                       xor	ah,ah
21579 55ED           50                         push	ax
21580                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21581 55EE           8A46         FE            mov	al,-2[bp]
21582 55F1           30E4                       xor	ah,ah
21583 55F3           50                         push	ax
21584                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21585 55F4           8A46         08            mov	al,8[bp]
21586 55F7           30E4                       xor	ah,ah
21587 55F9           50                         push	ax
21588                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21589 55FA           8A46         04            mov	al,4[bp]
21590 55FD           30E4                       xor	ah,ah
21591 55FF           50                         push	ax
21592                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21593 5600           E8         FA4C            call	_write_gfx_char_pl4
21594 5603           83C4                   0C  add	sp,*$C
21595                                           !BCC_EOS
21596                                           ! 2389          break;
21597 5606           EB           62            jmp .181
21598                                           !BCC_EOS
21599                                           ! 2390        case 0x02:
21600                                           ! 2391          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21601                       00005608            .186:
21602                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21603 5608           8A46         FA            mov	al,-6[bp]
21604 560B           30E4                       xor	ah,ah
21605 560D           50                         push	ax
21606                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21607 560E           FF76         F8            push	-8[bp]
21608                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21609 5611           8A46         FD            mov	al,-3[bp]
21610 5614           30E4                       xor	ah,ah
21611 5616           50                         push	ax
21612                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21613 5617           8A46         FE            mov	al,-2[bp]
21614 561A           30E4                       xor	ah,ah
21615 561C           50                         push	ax
21616                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21617 561D           8A46         08            mov	al,8[bp]
21618 5620           30E4                       xor	ah,ah
21619 5622           50                         push	ax
21620                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21621 5623           8A46         04            mov	al,4[bp]
21622 5626           30E4                       xor	ah,ah
21623 5628           50                         push	ax
21624                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
21625 5629           E8         FB96            call	_write_gfx_char_cga
21626 562C           83C4                   0C  add	sp,*$C
21627                                           !BCC_EOS
21628                                           ! 2392          break;
21629 562F           EB           39            jmp .181
21630                                           !BCC_EOS
21631                                           ! 2393        case 0x05:
21632                                           ! 2394          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
21633                       00005631            .187:
21634                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
21635 5631           FF76         F8            push	-8[bp]
21636                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
21637 5634           8A46         FD            mov	al,-3[bp]
21638 5637           30E4                       xor	ah,ah
21639 5639           50                         push	ax
21640                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
21641 563A           8A46         FE            mov	al,-2[bp]
21642 563D           30E4                       xor	ah,ah
21643 563F           50                         push	ax
21644                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
21645 5640           8A46         08            mov	al,8[bp]
21646 5643           30E4                       xor	ah,ah
21647 5645           50                         push	ax
21648                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
21649 5646           8A46         04            mov	al,4[bp]
21650 5649           30E4                       xor	ah,ah
21651 564B           50                         push	ax
21652                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
21653 564C           E8         FD78            call	_write_gfx_char_lin
21654 564F           83C4                   0A  add	sp,*$A
21655                                           !BCC_EOS
21656                                           ! 2395          break;
21657 5652           EB           16            jmp .181
21658                                           !BCC_EOS
21659                                           ! 2396       }
21660                                           ! 2397      xcurs++;
21661 5654           EB           14            jmp .181
21662                       00005656            .183:
21663 5656           2C                     02  sub	al,*2
21664 5658           74           AE            je 	.186
21665 565A           2C                     01  sub	al,*1
21666 565C         0F84         FF7F            beq 	.185
21667 5660           2C                     01  sub	al,*1
21668 5662         0F84         FF79            beq 	.184
21669 5666           2C                     01  sub	al,*1
21670 5668           74           C7            je 	.187
21671                       0000566A            .181:
21672                       FFFFFFEE            ..FFFA	=	-$12
21673                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
21674 566A           8A46         FE            mov	al,-2[bp]
21675 566D           40                         inc	ax
21676 566E           8846         FE            mov	-2[bp],al
21677                                           !BCC_EOS
21678                                           ! 2398     }
21679                                           ! 2399   }
21680                       00005671            .17F:
21681                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21682 5671           8B46         0A            mov	ax,$A[bp]
21683 5674           48                         dec	ax
21684 5675           8946         0A            mov	$A[bp],ax
21685                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21686 5678           3D                   FFFF  cmp	ax,*-1
21687 567B           74           0C            je  	.188
21688                       0000567D            .189:
21689                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
21690 567D           8A46         FE            mov	al,-2[bp]
21691 5680           30E4                       xor	ah,ah
21692 5682           3B46         F8            cmp	ax,-8[bp]
21693 5685         0F82         FF42            blo 	.180
21694                       00005689            .188:
21695                       00005689            .17E:
21696                                           ! 2400 }
21697                       00005689            .17D:
21698 5689           89EC                       mov	sp,bp
21699 568B           5D                         pop	bp
21700 568C           C3                         ret
21701                                           ! 2401 static void biosfn_write_char_only (car,page,attr,count)
21702                                           ! Register BX used in function biosfn_write_char_attr
21703                                           ! 2402 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21704                       0000568D            _biosfn_write_char_only:
21705                                           !BCC_EOS
21706                                           !BCC_EOS
21707                                           !BCC_EOS
21708                                           !BCC_EOS
21709                                           ! 2403 {
21710                                           ! 2404  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21711                                           !BCC_EOS
21712                                           ! 2405  Bit16u nbcols,nbrows,address;
21713                                           !BCC_EOS
21714                                           ! 2406  Bit16u cursor,dummy;
21715                                           !BCC_EOS
21716                                           ! 2407  mode=read_byte(0x40,0x49);
21717 568D           55                         push	bp
21718 568E           89E5                       mov	bp,sp
21719 5690           83C4                   F0  add	sp,*-$10
21720                                           ! Debug: list int = const $49 (used reg = )
21721 5693           B8                   0049  mov	ax,*$49
21722 5696           50                         push	ax
21723                                           ! Debug: list int = const $40 (used reg = )
21724 5697           B8                   0040  mov	ax,*$40
21725 569A           50                         push	ax
21726                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21727 569B           E8         2457            call	_read_byte
21728 569E           83C4                   04  add	sp,*4
21729                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21730 56A1           8846         FC            mov	-4[bp],al
21731                                           !BCC_EOS
21732                                           ! 2408  line=find_vga_entry(mode);
21733                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21734 56A4           8A46         FC            mov	al,-4[bp]
21735 56A7           30E4                       xor	ah,ah
21736 56A9           50                         push	ax
21737                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21738 56AA           E8         235C            call	_find_vga_entry
21739 56AD           44                         inc	sp
21740 56AE           44                         inc	sp
21741                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21742 56AF           8846         FB            mov	-5[bp],al
21743                                           !BCC_EOS
21744                                           ! 2409  if(line==0xFF)return;
21745                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21746 56B2           8A46         FB            mov	al,-5[bp]
21747 56B5           3C                     FF  cmp	al,#$FF
21748 56B7           75           04            jne 	.18A
21749                       000056B9            .18B:
21750 56B9           89EC                       mov	sp,bp
21751 56BB           5D                         pop	bp
21752 56BC           C3                         ret
21753                                           !BCC_EOS
21754                                           ! 2410  biosfn_get_cursor_pos(page,&dummy,&cursor);
21755                       000056BD            .18A:
21756                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21757 56BD           8D5E         F2            lea	bx,-$E[bp]
21758 56C0           53                         push	bx
21759                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21760 56C1           8D5E         F0            lea	bx,-$10[bp]
21761 56C4           53                         push	bx
21762                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21763 56C5           8A46         06            mov	al,6[bp]
21764 56C8           30E4                       xor	ah,ah
21765 56CA           50                         push	ax
21766                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21767 56CB           E8         EC88            call	_biosfn_get_cursor_pos
21768 56CE           83C4                   06  add	sp,*6
21769                                           !BCC_EOS
21770                                           ! 2411  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21771                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21772 56D1           8A46         F2            mov	al,-$E[bp]
21773                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21774 56D4           8846         FE            mov	-2[bp],al
21775                                           !BCC_EOS
21776                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21777 56D7           8B46         F2            mov	ax,-$E[bp]
21778 56DA           30C0                       xor	al,al
21779                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21780 56DC           88E0                       mov	al,ah
21781 56DE           30E4                       xor	ah,ah
21782                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21783 56E0           8846         FD            mov	-3[bp],al
21784                                           !BCC_EOS
21785                                           ! 2412  nbrows=read_byte(0x40,0x84)+1;
21786                                           ! Debug: list int = const $84 (used reg = )
21787 56E3           B8                   0084  mov	ax,#$84
21788 56E6           50                         push	ax
21789                                           ! Debug: list int = const $40 (used reg = )
21790 56E7           B8                   0040  mov	ax,*$40
21791 56EA           50                         push	ax
21792                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21793 56EB           E8         2407            call	_read_byte
21794 56EE           83C4                   04  add	sp,*4
21795                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21796 56F1           30E4                       xor	ah,ah
21797                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21798 56F3           40                         inc	ax
21799 56F4           8946         F6            mov	-$A[bp],ax
21800                                           !BCC_EOS
21801                                           ! 2413  nbcols=read_word(0x40,0x4A);
21802                                           ! Debug: list int = const $4A (used reg = )
21803 56F7           B8                   004A  mov	ax,*$4A
21804 56FA           50                         push	ax
21805                                           ! Debug: list int = const $40 (used reg = )
21806 56FB           B8                   0040  mov	ax,*$40
21807 56FE           50                         push	ax
21808                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21809 56FF           E8         2406            call	_read_word
21810 5702           83C4                   04  add	sp,*4
21811                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21812 5705           8946         F8            mov	-8[bp],ax
21813                                           !BCC_EOS
21814                                           ! 2414  if(vga_modes[line].class==0x00)
21815                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21816 5708           8A46         FB            mov	al,-5[bp]
21817 570B           30E4                       xor	ah,ah
21818 570D           B1                     03  mov	cl,*3
21819 570F           D3E0                       shl	ax,cl
21820 5711           89C3                       mov	bx,ax
21821 5713           81C3                 01D3  add	bx,#_vga_modes
21822                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21823 5717           8A47         01            mov	al,1[bx]
21824 571A           84C0                       test	al,al
21825 571C           75           6E            jne 	.18C
21826                       0000571E            .18D:
21827                                           ! 2415   {
21828                                           ! 2416    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21829                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21830 571E           8A46         FD            mov	al,-3[bp]
21831 5721           30E4                       xor	ah,ah
21832 5723           8B4E         F8            mov	cx,-8[bp]
21833 5726           F7E9                       imul	cx
21834                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21835                                           ! Debug: expression subtree swapping
21836 5728           0246         FE            add	al,-2[bp]
21837 572B           80D4                   00  adc	ah,*0
21838                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21839 572E           D1E0                       shl	ax,*1
21840 5730           50                         push	ax
21841                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21842 5731           8B46         F8            mov	ax,-8[bp]
21843 5734           8B4E         F6            mov	cx,-$A[bp]
21844 5737           F7E9                       imul	cx
21845                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21846 5739           D1E0                       shl	ax,*1
21847                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21848 573B           0C                     FF  or	al,#$FF
21849                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21850                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21851 573D           89C3                       mov	bx,ax
21852 573F           8A46         06            mov	al,6[bp]
21853 5742           30E4                       xor	ah,ah
21854 5744           93                         xchg	ax,bx
21855 5745           40                         inc	ax
21856 5746           89D9                       mov	cx,bx
21857 5748           F7E9                       imul	cx
21858                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21859 574A           0346         EE            add	ax,-$12[bp]
21860 574D           44                         inc	sp
21861 574E           44                         inc	sp
21862                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21863 574F           8946         F4            mov	-$C[bp],ax
21864                                           !BCC_EOS
21865                                           ! 2417    while(count-->0)
21866                                           ! 2418     {write_byte(vga_modes[line].sstart,address,car);
21867 5752           EB           29            jmp .18F
21868                       00005754            .190:
21869                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
21870 5754           8A46         04            mov	al,4[bp]
21871 5757           30E4                       xor	ah,ah
21872 5759           50                         push	ax
21873                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
21874 575A           FF76         F4            push	-$C[bp]
21875                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
21876 575D           8A46         FB            mov	al,-5[bp]
21877 5760           30E4                       xor	ah,ah
21878 5762           B1                     03  mov	cl,*3
21879 5764           D3E0                       shl	ax,cl
21880 5766           89C3                       mov	bx,ax
21881 5768           81C3                 01D3  add	bx,#_vga_modes
21882                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21883 576C           FF77         04            push	4[bx]
21884                                           ! Debug: func () void = write_byte+0 (used reg = )
21885 576F           E8         23A9            call	_write_byte
21886 5772           83C4                   06  add	sp,*6
21887                                           !BCC_EOS
21888                                           ! 2419      address+=2;
21889                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
21890 5775           8B46         F4            mov	ax,-$C[bp]
21891 5778           40                         inc	ax
21892 5779           40                         inc	ax
21893 577A           8946         F4            mov	-$C[bp],ax
21894                                           !BCC_EOS
21895                                           ! 2420     }
21896                                           ! 2421   }
21897                       0000577D            .18F:
21898                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21899 577D           8B46         0A            mov	ax,$A[bp]
21900 5780           48                         dec	ax
21901 5781           8946         0A            mov	$A[bp],ax
21902                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21903 5784           3D                   FFFF  cmp	ax,*-1
21904 5787           75           CB            jne	.190
21905                       00005789            .191:
21906                       00005789            .18E:
21907                                           ! 2422  else
21908                                           ! 2423   {
21909 5789           E9         00F3            br 	.192
21910                       0000578C            .18C:
21911                                           ! 2424    cheight=video_param_table[line_to_vpti[line]].cheight;
21912                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21913 578C           8A46         FB            mov	al,-5[bp]
21914 578F           30E4                       xor	ah,ah
21915 5791           89C3                       mov	bx,ax
21916                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21917 5793           8A87       0253            mov	al,_line_to_vpti[bx]
21918 5797           30E4                       xor	ah,ah
21919 5799           B1                     06  mov	cl,*6
21920 579B           D3E0                       shl	ax,cl
21921 579D           89C3                       mov	bx,ax
21922 579F           81C3                 0267  add	bx,#_video_param_table
21923                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21924 57A3           8A47         02            mov	al,2[bx]
21925 57A6           8846         FF            mov	-1[bp],al
21926                                           !BCC_EOS
21927                                           ! 2425    bpp=vga_modes[line].pixbits;
21928                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21929 57A9           8A46         FB            mov	al,-5[bp]
21930 57AC           30E4                       xor	ah,ah
21931 57AE           B1                     03  mov	cl,*3
21932 57B0           D3E0                       shl	ax,cl
21933 57B2           89C3                       mov	bx,ax
21934 57B4           81C3                 01D3  add	bx,#_vga_modes
21935                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21936 57B8           8A47         03            mov	al,3[bx]
21937 57BB           8846         FA            mov	-6[bp],al
21938                                           !BCC_EOS
21939                                           ! 2426    while((count-->0) && (xcurs<nbcols))
21940                                           ! 2427     {
21941 57BE           E9         00A6            br 	.194
21942                       000057C1            .195:
21943                                           ! 2428      switch(vga_modes[line].memmodel)
21944                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21945 57C1           8A46         FB            mov	al,-5[bp]
21946 57C4           30E4                       xor	ah,ah
21947 57C6           B1                     03  mov	cl,*3
21948 57C8           D3E0                       shl	ax,cl
21949 57CA           89C3                       mov	bx,ax
21950 57CC           81C3                 01D3  add	bx,#_vga_modes
21951 57D0           8A47         02            mov	al,2[bx]
21952                                           ! 2429       {
21953 57D3           EB           77            jmp .198
21954                                           ! 2430        case 0x04:
21955                                           ! 2431        case 0x03:
21956                       000057D5            .199:
21957                                           ! 2432          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21958                       000057D5            .19A:
21959                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21960 57D5           8A46         FF            mov	al,-1[bp]
21961 57D8           30E4                       xor	ah,ah
21962 57DA           50                         push	ax
21963                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21964 57DB           FF76         F8            push	-8[bp]
21965                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21966 57DE           8A46         FD            mov	al,-3[bp]
21967 57E1           30E4                       xor	ah,ah
21968 57E3           50                         push	ax
21969                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21970 57E4           8A46         FE            mov	al,-2[bp]
21971 57E7           30E4                       xor	ah,ah
21972 57E9           50                         push	ax
21973                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21974 57EA           8A46         08            mov	al,8[bp]
21975 57ED           30E4                       xor	ah,ah
21976 57EF           50                         push	ax
21977                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21978 57F0           8A46         04            mov	al,4[bp]
21979 57F3           30E4                       xor	ah,ah
21980 57F5           50                         push	ax
21981                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21982 57F6           E8         F856            call	_write_gfx_char_pl4
21983 57F9           83C4                   0C  add	sp,*$C
21984                                           !BCC_EOS
21985                                           ! 2433          break;
21986 57FC           EB           62            jmp .196
21987                                           !BCC_EOS
21988                                           ! 2434        case 0x02:
21989                                           ! 2435          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21990                       000057FE            .19B:
21991                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21992 57FE           8A46         FA            mov	al,-6[bp]
21993 5801           30E4                       xor	ah,ah
21994 5803           50                         push	ax
21995                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21996 5804           FF76         F8            push	-8[bp]
21997                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21998 5807           8A46         FD            mov	al,-3[bp]
21999 580A           30E4                       xor	ah,ah
22000 580C           50                         push	ax
22001                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22002 580D           8A46         FE            mov	al,-2[bp]
22003 5810           30E4                       xor	ah,ah
22004 5812           50                         push	ax
22005                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22006 5813           8A46         08            mov	al,8[bp]
22007 5816           30E4                       xor	ah,ah
22008 5818           50                         push	ax
22009                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22010 5819           8A46         04            mov	al,4[bp]
22011 581C           30E4                       xor	ah,ah
22012 581E           50                         push	ax
22013                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22014 581F           E8         F9A0            call	_write_gfx_char_cga
22015 5822           83C4                   0C  add	sp,*$C
22016                                           !BCC_EOS
22017                                           ! 2436          break;
22018 5825           EB           39            jmp .196
22019                                           !BCC_EOS
22020                                           ! 2437        case 0x05:
22021                                           ! 2438          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22022                       00005827            .19C:
22023                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22024 5827           FF76         F8            push	-8[bp]
22025                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22026 582A           8A46         FD            mov	al,-3[bp]
22027 582D           30E4                       xor	ah,ah
22028 582F           50                         push	ax
22029                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22030 5830           8A46         FE            mov	al,-2[bp]
22031 5833           30E4                       xor	ah,ah
22032 5835           50                         push	ax
22033                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22034 5836           8A46         08            mov	al,8[bp]
22035 5839           30E4                       xor	ah,ah
22036 583B           50                         push	ax
22037                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22038 583C           8A46         04            mov	al,4[bp]
22039 583F           30E4                       xor	ah,ah
22040 5841           50                         push	ax
22041                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22042 5842           E8         FB82            call	_write_gfx_char_lin
22043 5845           83C4                   0A  add	sp,*$A
22044                                           !BCC_EOS
22045                                           ! 2439          break;
22046 5848           EB           16            jmp .196
22047                                           !BCC_EOS
22048                                           ! 2440       }
22049                                           ! 2441      xcurs++;
22050 584A           EB           14            jmp .196
22051                       0000584C            .198:
22052 584C           2C                     02  sub	al,*2
22053 584E           74           AE            je 	.19B
22054 5850           2C                     01  sub	al,*1
22055 5852         0F84         FF7F            beq 	.19A
22056 5856           2C                     01  sub	al,*1
22057 5858         0F84         FF79            beq 	.199
22058 585C           2C                     01  sub	al,*1
22059 585E           74           C7            je 	.19C
22060                       00005860            .196:
22061                       FFFFFFEE            ..FFF9	=	-$12
22062                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22063 5860           8A46         FE            mov	al,-2[bp]
22064 5863           40                         inc	ax
22065 5864           8846         FE            mov	-2[bp],al
22066                                           !BCC_EOS
22067                                           ! 2442     }
22068                                           ! 2443   }
22069                       00005867            .194:
22070                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22071 5867           8B46         0A            mov	ax,$A[bp]
22072 586A           48                         dec	ax
22073 586B           8946         0A            mov	$A[bp],ax
22074                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22075 586E           3D                   FFFF  cmp	ax,*-1
22076 5871           74           0C            je  	.19D
22077                       00005873            .19E:
22078                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22079 5873           8A46         FE            mov	al,-2[bp]
22080 5876           30E4                       xor	ah,ah
22081 5878           3B46         F8            cmp	ax,-8[bp]
22082 587B         0F82         FF42            blo 	.195
22083                       0000587F            .19D:
22084                       0000587F            .193:
22085                                           ! 2444 }
22086                       0000587F            .192:
22087 587F           89EC                       mov	sp,bp
22088 5881           5D                         pop	bp
22089 5882           C3                         ret
22090                                           ! 2445 #asm
22091                                           !BCC_ASM
22092                       00000008            _biosfn_write_char_only.count	set	8
22093                       00000006            _biosfn_write_char_only.attr	set	6
22094                       00000004            _biosfn_write_char_only.page	set	4
22095                       00000002            _biosfn_write_char_only.car	set	2
22096                       00005883            biosfn_group_0B:
22097 5883           80FF                   00    cmp bh, #0x00
22098 5886           74           06              je biosfn_set_border_color
22099 5888           80FF                   01    cmp bh, #0x01
22100 588B           74           40              je biosfn_set_palette
22101 588D           C3                           ret
22102                       0000588E            biosfn_set_border_color:
22103 588E           50                           push ax
22104 588F           53                           push bx
22105 5890           51                           push cx
22106 5891           52                           push dx
22107 5892           BA                   03DA    mov dx, # 0x3da
22108 5895           EC                           in al, dx
22109 5896           BA                   03C0    mov dx, # 0x3c0
22110 5899           B0                     00    mov al, #0x00
22111 589B           EE                           out dx, al
22112 589C           88D8                         mov al, bl
22113 589E           24                     0F    and al, #0x0f
22114 58A0           A8                     08    test al, #0x08
22115 58A2           74           02              jz set_low_border
22116 58A4           04                     08    add al, #0x08
22117                       000058A6            set_low_border:
22118 58A6           EE                           out dx, al
22119 58A7           B1                     01    mov cl, #0x01
22120 58A9           80E3                   10    and bl, #0x10
22121                       000058AC            set_intensity_loop:
22122 58AC           BA                   03C0    mov dx, # 0x3c0
22123 58AF           88C8                         mov al, cl
22124 58B1           EE                           out dx, al
22125 58B2           BA                   03C1    mov dx, # 0x3c1
22126 58B5           EC                           in al, dx
22127 58B6           24                     EF    and al, #0xef
22128 58B8           08D8                         or al, bl
22129 58BA           BA                   03C0    mov dx, # 0x3c0
22130 58BD           EE                           out dx, al
22131 58BE           FEC1                         inc cl
22132 58C0           80F9                   04    cmp cl, #0x04
22133 58C3           75           E7              jne set_intensity_loop
22134 58C5           B0                     20    mov al, #0x20
22135 58C7           EE                           out dx, al
22136 58C8           5A                           pop dx
22137 58C9           59                           pop cx
22138 58CA           5B                           pop bx
22139 58CB           58                           pop ax
22140 58CC           C3                           ret
22141                       000058CD            biosfn_set_palette:
22142 58CD           50                           push ax
22143 58CE           53                           push bx
22144 58CF           51                           push cx
22145 58D0           52                           push dx
22146 58D1           BA                   03DA    mov dx, # 0x3da
22147 58D4           EC                           in al, dx
22148 58D5           B1                     01    mov cl, #0x01
22149 58D7           80E3                   01    and bl, #0x01
22150                       000058DA            set_cga_palette_loop:
22151 58DA           BA                   03C0    mov dx, # 0x3c0
22152 58DD           88C8                         mov al, cl
22153 58DF           EE                           out dx, al
22154 58E0           BA                   03C1    mov dx, # 0x3c1
22155 58E3           EC                           in al, dx
22156 58E4           24                     FE    and al, #0xfe
22157 58E6           08D8                         or al, bl
22158 58E8           BA                   03C0    mov dx, # 0x3c0
22159 58EB           EE                           out dx, al
22160 58EC           FEC1                         inc cl
22161 58EE           80F9                   04    cmp cl, #0x04
22162 58F1           75           E7              jne set_cga_palette_loop
22163 58F3           B0                     20    mov al, #0x20
22164 58F5           EE                           out dx, al
22165 58F6           5A                           pop dx
22166 58F7           59                           pop cx
22167 58F8           5B                           pop bx
22168 58F9           58                           pop ax
22169 58FA           C3                           ret
22170                                           ! 2520 endasm
22171                                           !BCC_ENDASM
22172                                           ! 2521 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22173                                           ! Register BX used in function biosfn_write_char_only
22174                       000058FB            _biosfn_write_pixel:
22175                                           !BCC_EOS
22176                                           !BCC_EOS
22177                                           !BCC_EOS
22178                                           !BCC_EOS
22179                                           ! 2522 {
22180                                           ! 2523  Bit8u mode,line,mask,attr,data;
22181                                           !BCC_EOS
22182                                           ! 2524  Bit16u addr;
22183                                           !BCC_EOS
22184                                           ! 2525  mode=read_byte(0x40,0x49);
22185 58FB           55                         push	bp
22186 58FC           89E5                       mov	bp,sp
22187 58FE           83C4                   F8  add	sp,*-8
22188                                           ! Debug: list int = const $49 (used reg = )
22189 5901           B8                   0049  mov	ax,*$49
22190 5904           50                         push	ax
22191                                           ! Debug: list int = const $40 (used reg = )
22192 5905           B8                   0040  mov	ax,*$40
22193 5908           50                         push	ax
22194                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22195 5909           E8         21E9            call	_read_byte
22196 590C           83C4                   04  add	sp,*4
22197                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22198 590F           8846         FF            mov	-1[bp],al
22199                                           !BCC_EOS
22200                                           ! 2526  line=find_vga_entry(mode);
22201                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22202 5912           8A46         FF            mov	al,-1[bp]
22203 5915           30E4                       xor	ah,ah
22204 5917           50                         push	ax
22205                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22206 5918           E8         20EE            call	_find_vga_entry
22207 591B           44                         inc	sp
22208 591C           44                         inc	sp
22209                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22210 591D           8846         FE            mov	-2[bp],al
22211                                           !BCC_EOS
22212                                           ! 2527  if(line==0xFF)return;
22213                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22214 5920           8A46         FE            mov	al,-2[bp]
22215 5923           3C                     FF  cmp	al,#$FF
22216 5925           75           04            jne 	.19F
22217                       00005927            .1A0:
22218 5927           89EC                       mov	sp,bp
22219 5929           5D                         pop	bp
22220 592A           C3                         ret
22221                                           !BCC_EOS
22222                                           ! 2528  if(vga_modes[line].class==0x00)return;
22223                       0000592B            .19F:
22224                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22225 592B           8A46         FE            mov	al,-2[bp]
22226 592E           30E4                       xor	ah,ah
22227 5930           B1                     03  mov	cl,*3
22228 5932           D3E0                       shl	ax,cl
22229 5934           89C3                       mov	bx,ax
22230 5936           81C3                 01D3  add	bx,#_vga_modes
22231                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22232 593A           8A47         01            mov	al,1[bx]
22233 593D           84C0                       test	al,al
22234 593F           75           04            jne 	.1A1
22235                       00005941            .1A2:
22236 5941           89EC                       mov	sp,bp
22237 5943           5D                         pop	bp
22238 5944           C3                         ret
22239                                           !BCC_EOS
22240                                           ! 2529  switch(vga_modes[line].memmodel)
22241                       00005945            .1A1:
22242                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22243 5945           8A46         FE            mov	al,-2[bp]
22244 5948           30E4                       xor	ah,ah
22245 594A           B1                     03  mov	cl,*3
22246 594C           D3E0                       shl	ax,cl
22247 594E           89C3                       mov	bx,ax
22248 5950           81C3                 01D3  add	bx,#_vga_modes
22249 5954           8A47         02            mov	al,2[bx]
22250                                           ! 2530   {
22251 5957           E9         0223            br 	.1A5
22252                                           ! 2531    case 0x04:
22253                                           ! 2532    case 0x03:
22254                       0000595A            .1A6:
22255                                           ! 2533      addr = CX/8+DX*read_word(0x40,0x4A);
22256                       0000595A            .1A7:
22257                                           ! Debug: list int = const $4A (used reg = )
22258 595A           B8                   004A  mov	ax,*$4A
22259 595D           50                         push	ax
22260                                           ! Debug: list int = const $40 (used reg = )
22261 595E           B8                   0040  mov	ax,*$40
22262 5961           50                         push	ax
22263                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22264 5962           E8         21A3            call	_read_word
22265 5965           83C4                   04  add	sp,*4
22266                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22267                                           ! Debug: expression subtree swapping
22268 5968           8B4E         0A            mov	cx,$A[bp]
22269 596B           F7E9                       imul	cx
22270 596D           50                         push	ax
22271                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22272 596E           8B46         08            mov	ax,8[bp]
22273 5971           B1                     03  mov	cl,*3
22274 5973           D3E8                       shr	ax,cl
22275                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22276 5975           0346         F6            add	ax,0+..FFF8[bp]
22277 5978           44                         inc	sp
22278 5979           44                         inc	sp
22279                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22280 597A           8946         F8            mov	-8[bp],ax
22281                                           !BCC_EOS
22282                                           ! 2534      mask = 0x80 >> (CX & 0x07);
22283                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22284 597D           8A46         08            mov	al,8[bp]
22285 5980           24                     07  and	al,*7
22286                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22287 5982           30E4                       xor	ah,ah
22288 5984           89C3                       mov	bx,ax
22289 5986           B8                   0080  mov	ax,#$80
22290 5989           89D9                       mov	cx,bx
22291 598B           D3F8                       sar	ax,cl
22292                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22293 598D           8846         FD            mov	-3[bp],al
22294                                           !BCC_EOS
22295                                           ! 2535      outw(0x3ce, (mask << 8) | 0x08);
22296                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22297 5990           8A46         FD            mov	al,-3[bp]
22298 5993           30E4                       xor	ah,ah
22299 5995           88C4                       mov	ah,al
22300 5997           30C0                       xor	al,al
22301                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22302 5999           0C                     08  or	al,*8
22303                                           ! Debug: list unsigned int = ax+0 (used reg = )
22304 599B           50                         push	ax
22305                                           ! Debug: list int = const $3CE (used reg = )
22306 599C           B8                   03CE  mov	ax,#$3CE
22307 599F           50                         push	ax
22308                                           ! Debug: func () void = outw+0 (used reg = )
22309 59A0           E8         21CE            call	_outw
22310 59A3           83C4                   04  add	sp,*4
22311                                           !BCC_EOS
22312                                           ! 2536      outw(0x3ce, 0x0205);
22313                                           ! Debug: list int = const $205 (used reg = )
22314 59A6           B8                   0205  mov	ax,#$205
22315 59A9           50                         push	ax
22316                                           ! Debug: list int = const $3CE (used reg = )
22317 59AA           B8                   03CE  mov	ax,#$3CE
22318 59AD           50                         push	ax
22319                                           ! Debug: func () void = outw+0 (used reg = )
22320 59AE           E8         21C0            call	_outw
22321 59B1           83C4                   04  add	sp,*4
22322                                           !BCC_EOS
22323                                           ! 2537      data = read_byte(0xa000,addr);
22324                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22325 59B4           FF76         F8            push	-8[bp]
22326                                           ! Debug: list unsigned int = const $A000 (used reg = )
22327 59B7           B8                   A000  mov	ax,#$A000
22328 59BA           50                         push	ax
22329                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22330 59BB           E8         2137            call	_read_byte
22331 59BE           83C4                   04  add	sp,*4
22332                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22333 59C1           8846         FB            mov	-5[bp],al
22334                                           !BCC_EOS
22335                                           ! 2538      if (AL & 0x80)
22336                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22337 59C4           8A46         06            mov	al,6[bp]
22338 59C7           24                     80  and	al,#$80
22339 59C9           84C0                       test	al,al
22340 59CB           74           0E            je  	.1A8
22341                       000059CD            .1A9:
22342                                           ! 2539       {
22343                                           ! 2540        outw(0x3ce, 0x1803);
22344                                           ! Debug: list int = const $1803 (used reg = )
22345 59CD           B8                   1803  mov	ax,#$1803
22346 59D0           50                         push	ax
22347                                           ! Debug: list int = const $3CE (used reg = )
22348 59D1           B8                   03CE  mov	ax,#$3CE
22349 59D4           50                         push	ax
22350                                           ! Debug: func () void = outw+0 (used reg = )
22351 59D5           E8         2199            call	_outw
22352 59D8           83C4                   04  add	sp,*4
22353                                           !BCC_EOS
22354                                           ! 2541       }
22355                                           ! 2542      write_byte(0xa000,addr,AL);
22356                       000059DB            .1A8:
22357                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22358 59DB           8A46         06            mov	al,6[bp]
22359 59DE           30E4                       xor	ah,ah
22360 59E0           50                         push	ax
22361                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22362 59E1           FF76         F8            push	-8[bp]
22363                                           ! Debug: list unsigned int = const $A000 (used reg = )
22364 59E4           B8                   A000  mov	ax,#$A000
22365 59E7           50                         push	ax
22366                                           ! Debug: func () void = write_byte+0 (used reg = )
22367 59E8           E8         2130            call	_write_byte
22368 59EB           83C4                   06  add	sp,*6
22369                                           !BCC_EOS
22370                                           ! 2543 #asm
22371                                           !BCC_EOS
22372                                           !BCC_ASM
22373                       0000000C            _biosfn_write_pixel.BH	set	$C
22374                       00000004            .biosfn_write_pixel.BH	set	4
22375                       00000010            _biosfn_write_pixel.CX	set	$10
22376                       00000008            .biosfn_write_pixel.CX	set	8
22377                       00000006            _biosfn_write_pixel.line	set	6
22378                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22379                       0000000E            _biosfn_write_pixel.AL	set	$E
22380                       00000006            .biosfn_write_pixel.AL	set	6
22381                       00000003            _biosfn_write_pixel.data	set	3
22382                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22383                       00000012            _biosfn_write_pixel.DX	set	$12
22384                       0000000A            .biosfn_write_pixel.DX	set	$A
22385                       00000005            _biosfn_write_pixel.mask	set	5
22386                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22387                       00000004            _biosfn_write_pixel.attr	set	4
22388                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22389                       00000007            _biosfn_write_pixel.mode	set	7
22390                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22391                       00000000            _biosfn_write_pixel.addr	set	0
22392                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22393 59EE           BA                   03CE       mov dx, # 0x3ce
22394 59F1           B8                   FF08       mov ax, #0xff08
22395 59F4           EF                              out dx, ax
22396 59F5           B8                   0005       mov ax, #0x0005
22397 59F8           EF                              out dx, ax
22398 59F9           B8                   0003       mov ax, #0x0003
22399 59FC           EF                              out dx, ax
22400                                           ! 2551 endasm
22401                                           !BCC_ENDASM
22402                                           !BCC_EOS
22403                                           ! 2552      break;
22404 59FD           E9         0193            br 	.1A3
22405                                           !BCC_EOS
22406                                           ! 2553    case 0x02:
22407                                           ! 2554      if(vga_modes[line].pixbits==2)
22408                       00005A00            .1AA:
22409                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22410 5A00           8A46         FE            mov	al,-2[bp]
22411 5A03           30E4                       xor	ah,ah
22412 5A05           B1                     03  mov	cl,*3
22413 5A07           D3E0                       shl	ax,cl
22414 5A09           89C3                       mov	bx,ax
22415 5A0B           81C3                 01D3  add	bx,#_vga_modes
22416                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22417 5A0F           8A47         03            mov	al,3[bx]
22418 5A12           3C                     02  cmp	al,*2
22419 5A14           75           1C            jne 	.1AB
22420                       00005A16            .1AC:
22421                                           ! 2555       {
22422                                           ! 2556        addr=(CX>>2)+(DX>>1)*80;
22423                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22424 5A16           8B46         0A            mov	ax,$A[bp]
22425 5A19           D1E8                       shr	ax,*1
22426                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22427 5A1B           B9                   0050  mov	cx,*$50
22428 5A1E           F7E9                       imul	cx
22429 5A20           50                         push	ax
22430                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22431 5A21           8B46         08            mov	ax,8[bp]
22432 5A24           D1E8                       shr	ax,*1
22433 5A26           D1E8                       shr	ax,*1
22434                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22435 5A28           0346         F6            add	ax,0+..FFF8[bp]
22436 5A2B           44                         inc	sp
22437 5A2C           44                         inc	sp
22438                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22439 5A2D           8946         F8            mov	-8[bp],ax
22440                                           !BCC_EOS
22441                                           ! 2557       }
22442                                           ! 2558      else
22443                                           ! 2559       {
22444 5A30           EB           1A            jmp .1AD
22445                       00005A32            .1AB:
22446                                           ! 2560        addr=(CX>>3)+(DX>>1)*80;
22447                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22448 5A32           8B46         0A            mov	ax,$A[bp]
22449 5A35           D1E8                       shr	ax,*1
22450                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22451 5A37           B9                   0050  mov	cx,*$50
22452 5A3A           F7E9                       imul	cx
22453 5A3C           50                         push	ax
22454                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22455 5A3D           8B46         08            mov	ax,8[bp]
22456 5A40           B1                     03  mov	cl,*3
22457 5A42           D3E8                       shr	ax,cl
22458                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22459 5A44           0346         F6            add	ax,0+..FFF8[bp]
22460 5A47           44                         inc	sp
22461 5A48           44                         inc	sp
22462                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22463 5A49           8946         F8            mov	-8[bp],ax
22464                                           !BCC_EOS
22465                                           ! 2561       }
22466                                           ! 2562      if (DX & 1) addr += 0x2000;
22467                       00005A4C            .1AD:
22468                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22469 5A4C           8A46         0A            mov	al,$A[bp]
22470 5A4F           24                     01  and	al,*1
22471 5A51           84C0                       test	al,al
22472 5A53           74           09            je  	.1AE
22473                       00005A55            .1AF:
22474                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22475 5A55           8B46         F8            mov	ax,-8[bp]
22476 5A58           05                   2000  add	ax,#$2000
22477 5A5B           8946         F8            mov	-8[bp],ax
22478                                           !BCC_EOS
22479                                           ! 2563      data = read_byte(0xb800,addr);
22480                       00005A5E            .1AE:
22481                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22482 5A5E           FF76         F8            push	-8[bp]
22483                                           ! Debug: list unsigned int = const $B800 (used reg = )
22484 5A61           B8                   B800  mov	ax,#$B800
22485 5A64           50                         push	ax
22486                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22487 5A65           E8         208D            call	_read_byte
22488 5A68           83C4                   04  add	sp,*4
22489                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22490 5A6B           8846         FB            mov	-5[bp],al
22491                                           !BCC_EOS
22492                                           ! 2564      if(vga_modes[line].pixbits==2)
22493                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22494 5A6E           8A46         FE            mov	al,-2[bp]
22495 5A71           30E4                       xor	ah,ah
22496 5A73           B1                     03  mov	cl,*3
22497 5A75           D3E0                       shl	ax,cl
22498 5A77           89C3                       mov	bx,ax
22499 5A79           81C3                 01D3  add	bx,#_vga_modes
22500                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22501 5A7D           8A47         03            mov	al,3[bx]
22502 5A80           3C                     02  cmp	al,*2
22503 5A82           75           46            jne 	.1B0
22504                       00005A84            .1B1:
22505                                           ! 2565       {
22506                                           ! 2566        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22507                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22508 5A84           8A46         08            mov	al,8[bp]
22509 5A87           24                     03  and	al,*3
22510                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22511 5A89           50                         push	ax
22512 5A8A           B8                   0003  mov	ax,*3
22513 5A8D           2A46         F6            sub	al,0+..FFF8[bp]
22514 5A90           80DC                   00  sbb	ah,*0
22515 5A93           44                         inc	sp
22516 5A94           44                         inc	sp
22517                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22518 5A95           D1E0                       shl	ax,*1
22519 5A97           50                         push	ax
22520                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22521 5A98           8A46         06            mov	al,6[bp]
22522 5A9B           24                     03  and	al,*3
22523                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22524 5A9D           30E4                       xor	ah,ah
22525 5A9F           8B4E         F6            mov	cx,0+..FFF8[bp]
22526 5AA2           D3E0                       shl	ax,cl
22527 5AA4           44                         inc	sp
22528 5AA5           44                         inc	sp
22529                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22530 5AA6           8846         FC            mov	-4[bp],al
22531                                           !BCC_EOS
22532                                           ! 2567        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22533                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22534 5AA9           8A46         08            mov	al,8[bp]
22535 5AAC           24                     03  and	al,*3
22536                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22537 5AAE           50                         push	ax
22538 5AAF           B8                   0003  mov	ax,*3
22539 5AB2           2A46         F6            sub	al,0+..FFF8[bp]
22540 5AB5           80DC                   00  sbb	ah,*0
22541 5AB8           44                         inc	sp
22542 5AB9           44                         inc	sp
22543                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22544 5ABA           D1E0                       shl	ax,*1
22545                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22546 5ABC           89C3                       mov	bx,ax
22547 5ABE           B8                   0003  mov	ax,*3
22548 5AC1           89D9                       mov	cx,bx
22549 5AC3           D3E0                       shl	ax,cl
22550                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22551 5AC5           8846         FD            mov	-3[bp],al
22552                                           !BCC_EOS
22553                                           ! 2568       }
22554                                           ! 2569      else
22555                                           ! 2570       {
22556 5AC8           EB           40            jmp .1B2
22557                       00005ACA            .1B0:
22558                                           ! 2571        attr = (AL & 0x01) << (7 - (CX & 0x07));
22559                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22560 5ACA           8A46         08            mov	al,8[bp]
22561 5ACD           24                     07  and	al,*7
22562                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22563 5ACF           50                         push	ax
22564 5AD0           B8                   0007  mov	ax,*7
22565 5AD3           2A46         F6            sub	al,0+..FFF8[bp]
22566 5AD6           80DC                   00  sbb	ah,*0
22567 5AD9           44                         inc	sp
22568 5ADA           44                         inc	sp
22569 5ADB           50                         push	ax
22570                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
22571 5ADC           8A46         06            mov	al,6[bp]
22572 5ADF           24                     01  and	al,*1
22573                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22574 5AE1           30E4                       xor	ah,ah
22575 5AE3           8B4E         F6            mov	cx,0+..FFF8[bp]
22576 5AE6           D3E0                       shl	ax,cl
22577 5AE8           44                         inc	sp
22578 5AE9           44                         inc	sp
22579                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22580 5AEA           8846         FC            mov	-4[bp],al
22581                                           !BCC_EOS
22582                                           ! 2572        mask = 0x01 << (7 - (CX & 0x07));
22583                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22584 5AED           8A46         08            mov	al,8[bp]
22585 5AF0           24                     07  and	al,*7
22586                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22587 5AF2           50                         push	ax
22588 5AF3           B8                   0007  mov	ax,*7
22589 5AF6           2A46         F6            sub	al,0+..FFF8[bp]
22590 5AF9           80DC                   00  sbb	ah,*0
22591 5AFC           44                         inc	sp
22592 5AFD           44                         inc	sp
22593                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
22594 5AFE           89C3                       mov	bx,ax
22595 5B00           B8                   0001  mov	ax,*1
22596 5B03           89D9                       mov	cx,bx
22597 5B05           D3E0                       shl	ax,cl
22598                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22599 5B07           8846         FD            mov	-3[bp],al
22600                                           !BCC_EOS
22601                                           ! 2573       }
22602                                           ! 2574      if (AL & 0x80)
22603                       00005B0A            .1B2:
22604                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22605 5B0A           8A46         06            mov	al,6[bp]
22606 5B0D           24                     80  and	al,#$80
22607 5B0F           84C0                       test	al,al
22608 5B11           74           0B            je  	.1B3
22609                       00005B13            .1B4:
22610                                           ! 2575       {
22611                                           ! 2576        data ^= attr;
22612                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22613 5B13           8A46         FB            mov	al,-5[bp]
22614 5B16           3246         FC            xor	al,-4[bp]
22615 5B19           8846         FB            mov	-5[bp],al
22616                                           !BCC_EOS
22617                                           ! 2577       }
22618                                           ! 2578      else
22619                                           ! 2579       {
22620 5B1C           EB           16            jmp .1B5
22621                       00005B1E            .1B3:
22622                                           ! 2580        data &= ~mask;
22623                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
22624 5B1E           8A46         FD            mov	al,-3[bp]
22625 5B21           30E4                       xor	ah,ah
22626 5B23           F7D0                       not	ax
22627                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
22628 5B25           2246         FB            and	al,-5[bp]
22629 5B28           8846         FB            mov	-5[bp],al
22630                                           !BCC_EOS
22631                                           ! 2581        data |= attr;
22632                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22633 5B2B           8A46         FB            mov	al,-5[bp]
22634 5B2E           0A46         FC            or	al,-4[bp]
22635 5B31           8846         FB            mov	-5[bp],al
22636                                           !BCC_EOS
22637                                           ! 2582       }
22638                                           ! 2583      write_byte(0xb800,addr,data);
22639                       00005B34            .1B5:
22640                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
22641 5B34           8A46         FB            mov	al,-5[bp]
22642 5B37           30E4                       xor	ah,ah
22643 5B39           50                         push	ax
22644                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22645 5B3A           FF76         F8            push	-8[bp]
22646                                           ! Debug: list unsigned int = const $B800 (used reg = )
22647 5B3D           B8                   B800  mov	ax,#$B800
22648 5B40           50                         push	ax
22649                                           ! Debug: func () void = write_byte+0 (used reg = )
22650 5B41           E8         1FD7            call	_write_byte
22651 5B44           83C4                   06  add	sp,*6
22652                                           !BCC_EOS
22653                                           ! 2584      break;
22654 5B47           EB           4A            jmp .1A3
22655                                           !BCC_EOS
22656                                           ! 2585    case 0x05:
22657                                           ! 2586      addr=CX+DX*(read_word(0x40,0x4A)*8);
22658                       00005B49            .1B6:
22659                                           ! Debug: list int = const $4A (used reg = )
22660 5B49           B8                   004A  mov	ax,*$4A
22661 5B4C           50                         push	ax
22662                                           ! Debug: list int = const $40 (used reg = )
22663 5B4D           B8                   0040  mov	ax,*$40
22664 5B50           50                         push	ax
22665                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22666 5B51           E8         1FB4            call	_read_word
22667 5B54           83C4                   04  add	sp,*4
22668                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
22669 5B57           B1                     03  mov	cl,*3
22670 5B59           D3E0                       shl	ax,cl
22671                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22672                                           ! Debug: expression subtree swapping
22673 5B5B           8B4E         0A            mov	cx,$A[bp]
22674 5B5E           F7E9                       imul	cx
22675                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
22676                                           ! Debug: expression subtree swapping
22677 5B60           0346         08            add	ax,8[bp]
22678                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22679 5B63           8946         F8            mov	-8[bp],ax
22680                                           !BCC_EOS
22681                                           ! 2587      write_byte(0xa000,addr,AL);
22682                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22683 5B66           8A46         06            mov	al,6[bp]
22684 5B69           30E4                       xor	ah,ah
22685 5B6B           50                         push	ax
22686                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22687 5B6C           FF76         F8            push	-8[bp]
22688                                           ! Debug: list unsigned int = const $A000 (used reg = )
22689 5B6F           B8                   A000  mov	ax,#$A000
22690 5B72           50                         push	ax
22691                                           ! Debug: func () void = write_byte+0 (used reg = )
22692 5B73           E8         1FA5            call	_write_byte
22693 5B76           83C4                   06  add	sp,*6
22694                                           !BCC_EOS
22695                                           ! 2588      break;
22696 5B79           EB           18            jmp .1A3
22697                                           !BCC_EOS
22698                                           ! 2589   }
22699                                           ! 2590 }
22700 5B7B           EB           16            jmp .1A3
22701                       00005B7D            .1A5:
22702 5B7D           2C                     02  sub	al,*2
22703 5B7F         0F84         FE7D            beq 	.1AA
22704 5B83           2C                     01  sub	al,*1
22705 5B85         0F84         FDD1            beq 	.1A7
22706 5B89           2C                     01  sub	al,*1
22707 5B8B         0F84         FDCB            beq 	.1A6
22708 5B8F           2C                     01  sub	al,*1
22709 5B91           74           B6            je 	.1B6
22710                       00005B93            .1A3:
22711                       FFFFFFF6            ..FFF8	=	-$A
22712 5B93           89EC                       mov	sp,bp
22713 5B95           5D                         pop	bp
22714 5B96           C3                         ret
22715                                           ! 2591 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *
22716                                           ! Register BX used in function biosfn_write_pixel
22717                       00005B97            _biosfn_read_pixel:
22718                                           !BCC_EOS
22719                                           !BCC_EOS
22720                                           !BCC_EOS
22721                                           ! 2591 AX;
22722                                           !BCC_EOS
22723                                           ! 2592 {
22724                                           ! 2593  Bit8u mode,line,mask,attr,data,i;
22725                                           !BCC_EOS
22726                                           ! 2594  Bit16u addr;
22727                                           !BCC_EOS
22728                                           ! 2595  Bit16u ss=get_SS();
22729 5B97           55                         push	bp
22730 5B98           89E5                       mov	bp,sp
22731 5B9A           83C4                   F6  add	sp,*-$A
22732                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
22733 5B9D           E8         1FE1            call	_get_SS
22734                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
22735 5BA0           8946         F6            mov	-$A[bp],ax
22736                                           !BCC_EOS
22737                                           ! 2596  mode=read_byte(0x40,0x49);
22738                                           ! Debug: list int = const $49 (used reg = )
22739 5BA3           B8                   0049  mov	ax,*$49
22740 5BA6           50                         push	ax
22741                                           ! Debug: list int = const $40 (used reg = )
22742 5BA7           B8                   0040  mov	ax,*$40
22743 5BAA           50                         push	ax
22744                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22745 5BAB           E8         1F47            call	_read_byte
22746 5BAE           83C4                   04  add	sp,*4
22747                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
22748 5BB1           8846         FF            mov	-1[bp],al
22749                                           !BCC_EOS
22750                                           ! 2597  line=find_vga_entry(mode);
22751                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
22752 5BB4           8A46         FF            mov	al,-1[bp]
22753 5BB7           30E4                       xor	ah,ah
22754 5BB9           50                         push	ax
22755                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22756 5BBA           E8         1E4C            call	_find_vga_entry
22757 5BBD           44                         inc	sp
22758 5BBE           44                         inc	sp
22759                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
22760 5BBF           8846         FE            mov	-2[bp],al
22761                                           !BCC_EOS
22762                                           ! 2598  if(line==0xFF)return;
22763                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
22764 5BC2           8A46         FE            mov	al,-2[bp]
22765 5BC5           3C                     FF  cmp	al,#$FF
22766 5BC7           75           04            jne 	.1B7
22767                       00005BC9            .1B8:
22768 5BC9           89EC                       mov	sp,bp
22769 5BCB           5D                         pop	bp
22770 5BCC           C3                         ret
22771                                           !BCC_EOS
22772                                           ! 2599  if(vga_modes[line].class==0x00)return;
22773                       00005BCD            .1B7:
22774                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22775 5BCD           8A46         FE            mov	al,-2[bp]
22776 5BD0           30E4                       xor	ah,ah
22777 5BD2           B1                     03  mov	cl,*3
22778 5BD4           D3E0                       shl	ax,cl
22779 5BD6           89C3                       mov	bx,ax
22780 5BD8           81C3                 01D3  add	bx,#_vga_modes
22781                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22782 5BDC           8A47         01            mov	al,1[bx]
22783 5BDF           84C0                       test	al,al
22784 5BE1           75           04            jne 	.1B9
22785                       00005BE3            .1BA:
22786 5BE3           89EC                       mov	sp,bp
22787 5BE5           5D                         pop	bp
22788 5BE6           C3                         ret
22789                                           !BCC_EOS
22790                                           ! 2600  switch(vga_modes[line].memmodel)
22791                       00005BE7            .1B9:
22792                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22793 5BE7           8A46         FE            mov	al,-2[bp]
22794 5BEA           30E4                       xor	ah,ah
22795 5BEC           B1                     03  mov	cl,*3
22796 5BEE           D3E0                       shl	ax,cl
22797 5BF0           89C3                       mov	bx,ax
22798 5BF2           81C3                 01D3  add	bx,#_vga_modes
22799 5BF6           8A47         02            mov	al,2[bx]
22800                                           ! 2601   {
22801 5BF9           E9         0167            br 	.1BD
22802                                           ! 2602    case 0x04:
22803                                           ! 2603    case 0x03:
22804                       00005BFC            .1BE:
22805                                           ! 2604      addr = CX/8+DX*read_word(0x40,0x4A);
22806                       00005BFC            .1BF:
22807                                           ! Debug: list int = const $4A (used reg = )
22808 5BFC           B8                   004A  mov	ax,*$4A
22809 5BFF           50                         push	ax
22810                                           ! Debug: list int = const $40 (used reg = )
22811 5C00           B8                   0040  mov	ax,*$40
22812 5C03           50                         push	ax
22813                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22814 5C04           E8         1F01            call	_read_word
22815 5C07           83C4                   04  add	sp,*4
22816                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
22817                                           ! Debug: expression subtree swapping
22818 5C0A           8B4E         08            mov	cx,8[bp]
22819 5C0D           F7E9                       imul	cx
22820 5C0F           50                         push	ax
22821                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
22822 5C10           8B46         06            mov	ax,6[bp]
22823 5C13           B1                     03  mov	cl,*3
22824 5C15           D3E8                       shr	ax,cl
22825                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22826 5C17           0346         F4            add	ax,0+..FFF7[bp]
22827 5C1A           44                         inc	sp
22828 5C1B           44                         inc	sp
22829                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22830 5C1C           8946         F8            mov	-8[bp],ax
22831                                           !BCC_EOS
22832                                           ! 2605      mask = 0x80 >> (CX & 0x07);
22833                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
22834 5C1F           8A46         06            mov	al,6[bp]
22835 5C22           24                     07  and	al,*7
22836                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22837 5C24           30E4                       xor	ah,ah
22838 5C26           89C3                       mov	bx,ax
22839 5C28           B8                   0080  mov	ax,#$80
22840 5C2B           89D9                       mov	cx,bx
22841 5C2D           D3F8                       sar	ax,cl
22842                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
22843 5C2F           8846         FD            mov	-3[bp],al
22844                                           !BCC_EOS
22845                                           ! 2606      attr = 0x00;
22846                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
22847 5C32           30C0                       xor	al,al
22848 5C34           8846         FC            mov	-4[bp],al
22849                                           !BCC_EOS
22850                                           ! 2607      for(i=0;i<4;i++)
22851                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
22852 5C37           30C0                       xor	al,al
22853 5C39           8846         FA            mov	-6[bp],al
22854                                           !BCC_EOS
22855                                           !BCC_EOS
22856                                           ! 2608       {
22857 5C3C           EB           4B            jmp .1C2
22858                       00005C3E            .1C3:
22859                                           ! 2609        outw(0x3ce, (i << 8) | 0x04);
22860                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
22861 5C3E           8A46         FA            mov	al,-6[bp]
22862 5C41           30E4                       xor	ah,ah
22863 5C43           88C4                       mov	ah,al
22864 5C45           30C0                       xor	al,al
22865                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
22866 5C47           0C                     04  or	al,*4
22867                                           ! Debug: list unsigned int = ax+0 (used reg = )
22868 5C49           50                         push	ax
22869                                           ! Debug: list int = const $3CE (used reg = )
22870 5C4A           B8                   03CE  mov	ax,#$3CE
22871 5C4D           50                         push	ax
22872                                           ! Debug: func () void = outw+0 (used reg = )
22873 5C4E           E8         1F20            call	_outw
22874 5C51           83C4                   04  add	sp,*4
22875                                           !BCC_EOS
22876                                           ! 2610        data = read_byte(0xa000,addr) & mask;
22877                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22878 5C54           FF76         F8            push	-8[bp]
22879                                           ! Debug: list unsigned int = const $A000 (used reg = )
22880 5C57           B8                   A000  mov	ax,#$A000
22881 5C5A           50                         push	ax
22882                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22883 5C5B           E8         1E97            call	_read_byte
22884 5C5E           83C4                   04  add	sp,*4
22885                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
22886 5C61           2246         FD            and	al,-3[bp]
22887                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22888 5C64           8846         FB            mov	-5[bp],al
22889                                           !BCC_EOS
22890                                           ! 2611        if (data > 0) attr |= (0x01 << i);
22891                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
22892 5C67           8A46         FB            mov	al,-5[bp]
22893 5C6A           84C0                       test	al,al
22894 5C6C           74           14            je  	.1C4
22895                       00005C6E            .1C5:
22896                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
22897 5C6E           8A46         FA            mov	al,-6[bp]
22898 5C71           30E4                       xor	ah,ah
22899 5C73           89C3                       mov	bx,ax
22900 5C75           B8                   0001  mov	ax,*1
22901 5C78           89D9                       mov	cx,bx
22902 5C7A           D3E0                       shl	ax,cl
22903                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
22904 5C7C           0A46         FC            or	al,-4[bp]
22905 5C7F           8846         FC            mov	-4[bp],al
22906                                           !BCC_EOS
22907                                           ! 2612       }
22908                       00005C82            .1C4:
22909                                           ! 2613      break;
22910                       00005C82            .1C1:
22911                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
22912 5C82           8A46         FA            mov	al,-6[bp]
22913 5C85           40                         inc	ax
22914 5C86           8846         FA            mov	-6[bp],al
22915                       00005C89            .1C2:
22916                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
22917 5C89           8A46         FA            mov	al,-6[bp]
22918 5C8C           3C                     04  cmp	al,*4
22919 5C8E           72           AE            jb 	.1C3
22920                       00005C90            .1C6:
22921                       00005C90            .1C0:
22922 5C90           E9         00E8            br 	.1BB
22923                                           !BCC_EOS
22924                                           ! 2614    case 0x02:
22925                                           ! 2615      addr=(CX>>2)+(DX>>1)*80;
22926                       00005C93            .1C7:
22927                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22928 5C93           8B46         08            mov	ax,8[bp]
22929 5C96           D1E8                       shr	ax,*1
22930                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22931 5C98           B9                   0050  mov	cx,*$50
22932 5C9B           F7E9                       imul	cx
22933 5C9D           50                         push	ax
22934                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
22935 5C9E           8B46         06            mov	ax,6[bp]
22936 5CA1           D1E8                       shr	ax,*1
22937 5CA3           D1E8                       shr	ax,*1
22938                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22939 5CA5           0346         F4            add	ax,0+..FFF7[bp]
22940 5CA8           44                         inc	sp
22941 5CA9           44                         inc	sp
22942                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22943 5CAA           8946         F8            mov	-8[bp],ax
22944                                           !BCC_EOS
22945                                           ! 2616      if (DX & 1) addr += 0x2000;
22946                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22947 5CAD           8A46         08            mov	al,8[bp]
22948 5CB0           24                     01  and	al,*1
22949 5CB2           84C0                       test	al,al
22950 5CB4           74           09            je  	.1C8
22951                       00005CB6            .1C9:
22952                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
22953 5CB6           8B46         F8            mov	ax,-8[bp]
22954 5CB9           05                   2000  add	ax,#$2000
22955 5CBC           8946         F8            mov	-8[bp],ax
22956                                           !BCC_EOS
22957                                           ! 2617      data = read_byte(0xb800,addr);
22958                       00005CBF            .1C8:
22959                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22960 5CBF           FF76         F8            push	-8[bp]
22961                                           ! Debug: list unsigned int = const $B800 (used reg = )
22962 5CC2           B8                   B800  mov	ax,#$B800
22963 5CC5           50                         push	ax
22964                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22965 5CC6           E8         1E2C            call	_read_byte
22966 5CC9           83C4                   04  add	sp,*4
22967                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22968 5CCC           8846         FB            mov	-5[bp],al
22969                                           !BCC_EOS
22970                                           ! 2618      if(vga_modes[line].pixbits==2)
22971                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22972 5CCF           8A46         FE            mov	al,-2[bp]
22973 5CD2           30E4                       xor	ah,ah
22974 5CD4           B1                     03  mov	cl,*3
22975 5CD6           D3E0                       shl	ax,cl
22976 5CD8           89C3                       mov	bx,ax
22977 5CDA           81C3                 01D3  add	bx,#_vga_modes
22978                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22979 5CDE           8A47         03            mov	al,3[bx]
22980 5CE1           3C                     02  cmp	al,*2
22981 5CE3           75           25            jne 	.1CA
22982                       00005CE5            .1CB:
22983                                           ! 2619       {
22984                                           ! 2620        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
22985                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
22986 5CE5           8A46         06            mov	al,6[bp]
22987 5CE8           24                     03  and	al,*3
22988                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22989 5CEA           50                         push	ax
22990 5CEB           B8                   0003  mov	ax,*3
22991 5CEE           2A46         F4            sub	al,0+..FFF7[bp]
22992 5CF1           80DC                   00  sbb	ah,*0
22993 5CF4           44                         inc	sp
22994 5CF5           44                         inc	sp
22995                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22996 5CF6           D1E0                       shl	ax,*1
22997                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
22998 5CF8           89C3                       mov	bx,ax
22999 5CFA           8A46         FB            mov	al,-5[bp]
23000 5CFD           30E4                       xor	ah,ah
23001 5CFF           89D9                       mov	cx,bx
23002 5D01           D3E8                       shr	ax,cl
23003                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23004 5D03           24                     03  and	al,*3
23005                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23006 5D05           8846         FC            mov	-4[bp],al
23007                                           !BCC_EOS
23008                                           ! 2621       }
23009                                           ! 2622      else
23010                                           ! 2623       {
23011 5D08           EB           21            jmp .1CC
23012                       00005D0A            .1CA:
23013                                           ! 2624        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23014                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23015 5D0A           8A46         06            mov	al,6[bp]
23016 5D0D           24                     07  and	al,*7
23017                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23018 5D0F           50                         push	ax
23019 5D10           B8                   0007  mov	ax,*7
23020 5D13           2A46         F4            sub	al,0+..FFF7[bp]
23021 5D16           80DC                   00  sbb	ah,*0
23022 5D19           44                         inc	sp
23023 5D1A           44                         inc	sp
23024                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23025 5D1B           89C3                       mov	bx,ax
23026 5D1D           8A46         FB            mov	al,-5[bp]
23027 5D20           30E4                       xor	ah,ah
23028 5D22           89D9                       mov	cx,bx
23029 5D24           D3E8                       shr	ax,cl
23030                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23031 5D26           24                     01  and	al,*1
23032                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23033 5D28           8846         FC            mov	-4[bp],al
23034                                           !BCC_EOS
23035                                           ! 2625       }
23036                                           ! 2626      break;
23037                       00005D2B            .1CC:
23038 5D2B           EB           4E            jmp .1BB
23039                                           !BCC_EOS
23040                                           ! 2627    case 0x05:
23041                                           ! 2628      addr=CX+DX*(read_word(0x40,0x4A)*8);
23042                       00005D2D            .1CD:
23043                                           ! Debug: list int = const $4A (used reg = )
23044 5D2D           B8                   004A  mov	ax,*$4A
23045 5D30           50                         push	ax
23046                                           ! Debug: list int = const $40 (used reg = )
23047 5D31           B8                   0040  mov	ax,*$40
23048 5D34           50                         push	ax
23049                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23050 5D35           E8         1DD0            call	_read_word
23051 5D38           83C4                   04  add	sp,*4
23052                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23053 5D3B           B1                     03  mov	cl,*3
23054 5D3D           D3E0                       shl	ax,cl
23055                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23056                                           ! Debug: expression subtree swapping
23057 5D3F           8B4E         08            mov	cx,8[bp]
23058 5D42           F7E9                       imul	cx
23059                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23060                                           ! Debug: expression subtree swapping
23061 5D44           0346         06            add	ax,6[bp]
23062                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23063 5D47           8946         F8            mov	-8[bp],ax
23064                                           !BCC_EOS
23065                                           ! 2629      attr=read_byte(0xa000,addr);
23066                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23067 5D4A           FF76         F8            push	-8[bp]
23068                                           ! Debug: list unsigned int = const $A000 (used reg = )
23069 5D4D           B8                   A000  mov	ax,#$A000
23070 5D50           50                         push	ax
23071                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23072 5D51           E8         1DA1            call	_read_byte
23073 5D54           83C4                   04  add	sp,*4
23074                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23075 5D57           8846         FC            mov	-4[bp],al
23076                                           !BCC_EOS
23077                                           ! 2630      break;
23078 5D5A           EB           1F            jmp .1BB
23079                                           !BCC_EOS
23080                                           ! 2631    default:
23081                                           ! 2632      attr = 0;
23082                       00005D5C            .1CE:
23083                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23084 5D5C           30C0                       xor	al,al
23085 5D5E           8846         FC            mov	-4[bp],al
23086                                           !BCC_EOS
23087                                           ! 2633   }
23088                                           ! 2634  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23089 5D61           EB           18            jmp .1BB
23090                       00005D63            .1BD:
23091 5D63           2C                     02  sub	al,*2
23092 5D65         0F84         FF2A            beq 	.1C7
23093 5D69           2C                     01  sub	al,*1
23094 5D6B         0F84         FE8D            beq 	.1BF
23095 5D6F           2C                     01  sub	al,*1
23096 5D71         0F84         FE87            beq 	.1BE
23097 5D75           2C                     01  sub	al,*1
23098 5D77           74           B4            je 	.1CD
23099 5D79           EB           E1            jmp	.1CE
23100                       00005D7B            .1BB:
23101                       FFFFFFF4            ..FFF7	=	-$C
23102                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23103 5D7B           FF76         0A            push	$A[bp]
23104                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23105 5D7E           FF76         F6            push	-$A[bp]
23106                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23107 5D81           E8         1D84            call	_read_word
23108 5D84           83C4                   04  add	sp,*4
23109                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23110 5D87           30C0                       xor	al,al
23111                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23112 5D89           0A46         FC            or	al,-4[bp]
23113                                           ! Debug: list unsigned int = ax+0 (used reg = )
23114 5D8C           50                         push	ax
23115                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23116 5D8D           FF76         0A            push	$A[bp]
23117                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23118 5D90           FF76         F6            push	-$A[bp]
23119                                           ! Debug: func () void = write_word+0 (used reg = )
23120 5D93           E8         1D9D            call	_write_word
23121 5D96           83C4                   06  add	sp,*6
23122                                           !BCC_EOS
23123                                           ! 2635 }
23124 5D99           89EC                       mov	sp,bp
23125 5D9B           5D                         pop	bp
23126 5D9C           C3                         ret
23127                                           ! 2636 static void biosfn_write_teletype (car, page, attr, flag)
23128                                           ! Register BX used in function biosfn_read_pixel
23129                                           ! 2637 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23130                       00005D9D            _biosfn_write_teletype:
23131                                           !BCC_EOS
23132                                           !BCC_EOS
23133                                           !BCC_EOS
23134                                           !BCC_EOS
23135                                           ! 2638 {
23136                                           ! 2639  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23137                                           !BCC_EOS
23138                                           ! 2640  Bit16u nbcols,nbrows,address;
23139                                           !BCC_EOS
23140                                           ! 2641  Bit16u cursor,dummy;
23141                                           !BCC_EOS
23142                                           ! 2642  if(page==0xff)
23143 5D9D           55                         push	bp
23144 5D9E           89E5                       mov	bp,sp
23145 5DA0           83C4                   F0  add	sp,*-$10
23146                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23147 5DA3           8A46         06            mov	al,6[bp]
23148 5DA6           3C                     FF  cmp	al,#$FF
23149 5DA8           75           11            jne 	.1CF
23150                       00005DAA            .1D0:
23151                                           ! 2643   page=read_byte(0x40,0x62);
23152                                           ! Debug: list int = const $62 (used reg = )
23153 5DAA           B8                   0062  mov	ax,*$62
23154 5DAD           50                         push	ax
23155                                           ! Debug: list int = const $40 (used reg = )
23156 5DAE           B8                   0040  mov	ax,*$40
23157 5DB1           50                         push	ax
23158                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23159 5DB2           E8         1D40            call	_read_byte
23160 5DB5           83C4                   04  add	sp,*4
23161                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23162 5DB8           8846         06            mov	6[bp],al
23163                                           !BCC_EOS
23164                                           ! 2644  mode=read_byte(0x40,0x49);
23165                       00005DBB            .1CF:
23166                                           ! Debug: list int = const $49 (used reg = )
23167 5DBB           B8                   0049  mov	ax,*$49
23168 5DBE           50                         push	ax
23169                                           ! Debug: list int = const $40 (used reg = )
23170 5DBF           B8                   0040  mov	ax,*$40
23171 5DC2           50                         push	ax
23172                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23173 5DC3           E8         1D2F            call	_read_byte
23174 5DC6           83C4                   04  add	sp,*4
23175                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23176 5DC9           8846         FC            mov	-4[bp],al
23177                                           !BCC_EOS
23178                                           ! 2645  line=find_vga_entry(mode);
23179                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23180 5DCC           8A46         FC            mov	al,-4[bp]
23181 5DCF           30E4                       xor	ah,ah
23182 5DD1           50                         push	ax
23183                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23184 5DD2           E8         1C34            call	_find_vga_entry
23185 5DD5           44                         inc	sp
23186 5DD6           44                         inc	sp
23187                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23188 5DD7           8846         FB            mov	-5[bp],al
23189                                           !BCC_EOS
23190                                           ! 2646  if(line==0xFF)return;
23191                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23192 5DDA           8A46         FB            mov	al,-5[bp]
23193 5DDD           3C                     FF  cmp	al,#$FF
23194 5DDF           75           04            jne 	.1D1
23195                       00005DE1            .1D2:
23196 5DE1           89EC                       mov	sp,bp
23197 5DE3           5D                         pop	bp
23198 5DE4           C3                         ret
23199                                           !BCC_EOS
23200                                           ! 2647  biosfn_get_cursor_pos(page,&dummy,&cursor);
23201                       00005DE5            .1D1:
23202                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23203 5DE5           8D5E         F2            lea	bx,-$E[bp]
23204 5DE8           53                         push	bx
23205                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23206 5DE9           8D5E         F0            lea	bx,-$10[bp]
23207 5DEC           53                         push	bx
23208                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23209 5DED           8A46         06            mov	al,6[bp]
23210 5DF0           30E4                       xor	ah,ah
23211 5DF2           50                         push	ax
23212                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23213 5DF3           E8         E560            call	_biosfn_get_cursor_pos
23214 5DF6           83C4                   06  add	sp,*6
23215                                           !BCC_EOS
23216                                           ! 2648  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23217                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23218 5DF9           8A46         F2            mov	al,-$E[bp]
23219                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23220 5DFC           8846         FE            mov	-2[bp],al
23221                                           !BCC_EOS
23222                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23223 5DFF           8B46         F2            mov	ax,-$E[bp]
23224 5E02           30C0                       xor	al,al
23225                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23226 5E04           88E0                       mov	al,ah
23227 5E06           30E4                       xor	ah,ah
23228                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23229 5E08           8846         FD            mov	-3[bp],al
23230                                           !BCC_EOS
23231                                           ! 2649  nbrows=read_byte(0x40,0x84)+1;
23232                                           ! Debug: list int = const $84 (used reg = )
23233 5E0B           B8                   0084  mov	ax,#$84
23234 5E0E           50                         push	ax
23235                                           ! Debug: list int = const $40 (used reg = )
23236 5E0F           B8                   0040  mov	ax,*$40
23237 5E12           50                         push	ax
23238                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23239 5E13           E8         1CDF            call	_read_byte
23240 5E16           83C4                   04  add	sp,*4
23241                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23242 5E19           30E4                       xor	ah,ah
23243                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23244 5E1B           40                         inc	ax
23245 5E1C           8946         F6            mov	-$A[bp],ax
23246                                           !BCC_EOS
23247                                           ! 2650  nbcols=read_word(0x40,0x4A);
23248                                           ! Debug: list int = const $4A (used reg = )
23249 5E1F           B8                   004A  mov	ax,*$4A
23250 5E22           50                         push	ax
23251                                           ! Debug: list int = const $40 (used reg = )
23252 5E23           B8                   0040  mov	ax,*$40
23253 5E26           50                         push	ax
23254                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23255 5E27           E8         1CDE            call	_read_word
23256 5E2A           83C4                   04  add	sp,*4
23257                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23258 5E2D           8946         F8            mov	-8[bp],ax
23259                                           !BCC_EOS
23260                                           ! 2651  switch(car)
23261 5E30           8A46         04            mov	al,4[bp]
23262                                           ! 2652   {
23263 5E33           E9         01EB            br 	.1D5
23264                                           ! 2653    case 7:
23265                                           ! 2654     break;
23266                       00005E36            .1D6:
23267 5E36           E9         0209            br 	.1D3
23268                                           !BCC_EOS
23269                                           ! 2655    case 8:
23270                                           ! 2656     if(xcurs>0)xcurs--;
23271                       00005E39            .1D7:
23272                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23273 5E39           8A46         FE            mov	al,-2[bp]
23274 5E3C           84C0                       test	al,al
23275 5E3E           74           07            je  	.1D8
23276                       00005E40            .1D9:
23277                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23278 5E40           8A46         FE            mov	al,-2[bp]
23279 5E43           48                         dec	ax
23280 5E44           8846         FE            mov	-2[bp],al
23281                                           !BCC_EOS
23282                                           ! 2657     break;
23283                       00005E47            .1D8:
23284 5E47           E9         01F8            br 	.1D3
23285                                           !BCC_EOS
23286                                           ! 2658    case '\r':
23287                                           ! 2659     xcurs=0;
23288                       00005E4A            .1DA:
23289                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23290 5E4A           30C0                       xor	al,al
23291 5E4C           8846         FE            mov	-2[bp],al
23292                                           !BCC_EOS
23293                                           ! 2660     break;
23294 5E4F           E9         01F0            br 	.1D3
23295                                           !BCC_EOS
23296                                           ! 2661    case '\n':
23297                                           ! 2662     ycurs++;
23298                       00005E52            .1DB:
23299                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23300 5E52           8A46         FD            mov	al,-3[bp]
23301 5E55           40                         inc	ax
23302 5E56           8846         FD            mov	-3[bp],al
23303                                           !BCC_EOS
23304                                           ! 2663     break;
23305 5E59           E9         01E6            br 	.1D3
23306                                           !BCC_EOS
23307                                           ! 2664    case '\t':
23308                                           ! 2665     do
23309                       00005E5C            .1DC:
23310                                           ! 2666      {
23311                       00005E5C            .1DF:
23312                                           ! 2667       biosfn_write_teletype(' ',page,attr,flag);
23313                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23314 5E5C           8A46         0A            mov	al,$A[bp]
23315 5E5F           30E4                       xor	ah,ah
23316 5E61           50                         push	ax
23317                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23318 5E62           8A46         08            mov	al,8[bp]
23319 5E65           30E4                       xor	ah,ah
23320 5E67           50                         push	ax
23321                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23322 5E68           8A46         06            mov	al,6[bp]
23323 5E6B           30E4                       xor	ah,ah
23324 5E6D           50                         push	ax
23325                                           ! Debug: list int = const $20 (used reg = )
23326 5E6E           B8                   0020  mov	ax,*$20
23327 5E71           50                         push	ax
23328                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23329 5E72           E8         FF28            call	_biosfn_write_teletype
23330 5E75           83C4                   08  add	sp,*8
23331                                           !BCC_EOS
23332                                           ! 2668       biosfn_get_cursor_pos(page,&dummy,&cursor);
23333                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23334 5E78           8D5E         F2            lea	bx,-$E[bp]
23335 5E7B           53                         push	bx
23336                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23337 5E7C           8D5E         F0            lea	bx,-$10[bp]
23338 5E7F           53                         push	bx
23339                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23340 5E80           8A46         06            mov	al,6[bp]
23341 5E83           30E4                       xor	ah,ah
23342 5E85           50                         push	ax
23343                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23344 5E86           E8         E4CD            call	_biosfn_get_cursor_pos
23345 5E89           83C4                   06  add	sp,*6
23346                                           !BCC_EOS
23347                                           ! 2669       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23348                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23349 5E8C           8A46         F2            mov	al,-$E[bp]
23350                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23351 5E8F           8846         FE            mov	-2[bp],al
23352                                           !BCC_EOS
23353                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23354 5E92           8B46         F2            mov	ax,-$E[bp]
23355 5E95           30C0                       xor	al,al
23356                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23357 5E97           88E0                       mov	al,ah
23358 5E99           30E4                       xor	ah,ah
23359                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23360 5E9B           8846         FD            mov	-3[bp],al
23361                                           !BCC_EOS
23362                                           ! 2670      }while(xcurs%8==0);
23363                       00005E9E            .1DE:
23364                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23365 5E9E           8A46         FE            mov	al,-2[bp]
23366 5EA1           30E4                       xor	ah,ah
23367 5EA3           24                     07  and	al,*7
23368                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23369 5EA5           84C0                       test	al,al
23370 5EA7           74           B3            je 	.1DF
23371                       00005EA9            .1E0:
23372                                           !BCC_EOS
23373                                           ! 2671     break;
23374                       00005EA9            .1DD:
23375 5EA9           E9         0196            br 	.1D3
23376                                           !BCC_EOS
23377                                           ! 2672    default:
23378                                           ! 2673     if(vga_modes[line].class==0x00)
23379                       00005EAC            .1E1:
23380                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23381 5EAC           8A46         FB            mov	al,-5[bp]
23382 5EAF           30E4                       xor	ah,ah
23383 5EB1           B1                     03  mov	cl,*3
23384 5EB3           D3E0                       shl	ax,cl
23385 5EB5           89C3                       mov	bx,ax
23386 5EB7           81C3                 01D3  add	bx,#_vga_modes
23387                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23388 5EBB           8A47         01            mov	al,1[bx]
23389 5EBE           84C0                       test	al,al
23390 5EC0         0F85         0082            bne 	.1E2
23391                       00005EC4            .1E3:
23392                                           ! 2674      {
23393                                           ! 2675       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23394                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23395 5EC4           8A46         FD            mov	al,-3[bp]
23396 5EC7           30E4                       xor	ah,ah
23397 5EC9           8B4E         F8            mov	cx,-8[bp]
23398 5ECC           F7E9                       imul	cx
23399                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23400                                           ! Debug: expression subtree swapping
23401 5ECE           0246         FE            add	al,-2[bp]
23402 5ED1           80D4                   00  adc	ah,*0
23403                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23404 5ED4           D1E0                       shl	ax,*1
23405 5ED6           50                         push	ax
23406                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23407 5ED7           8B46         F8            mov	ax,-8[bp]
23408 5EDA           8B4E         F6            mov	cx,-$A[bp]
23409 5EDD           F7E9                       imul	cx
23410                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23411 5EDF           D1E0                       shl	ax,*1
23412                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23413 5EE1           0C                     FF  or	al,#$FF
23414                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23415                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23416 5EE3           89C3                       mov	bx,ax
23417 5EE5           8A46         06            mov	al,6[bp]
23418 5EE8           30E4                       xor	ah,ah
23419 5EEA           93                         xchg	ax,bx
23420 5EEB           40                         inc	ax
23421 5EEC           89D9                       mov	cx,bx
23422 5EEE           F7E9                       imul	cx
23423                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23424 5EF0           0346         EE            add	ax,0+..FFF6[bp]
23425 5EF3           44                         inc	sp
23426 5EF4           44                         inc	sp
23427                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23428 5EF5           8946         F4            mov	-$C[bp],ax
23429                                           !BCC_EOS
23430                                           ! 2676       write_byte(vga_modes[line].ssta
23431                                           ! 2676 rt,address,car);
23432                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23433 5EF8           8A46         04            mov	al,4[bp]
23434 5EFB           30E4                       xor	ah,ah
23435 5EFD           50                         push	ax
23436                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23437 5EFE           FF76         F4            push	-$C[bp]
23438                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23439 5F01           8A46         FB            mov	al,-5[bp]
23440 5F04           30E4                       xor	ah,ah
23441 5F06           B1                     03  mov	cl,*3
23442 5F08           D3E0                       shl	ax,cl
23443 5F0A           89C3                       mov	bx,ax
23444 5F0C           81C3                 01D3  add	bx,#_vga_modes
23445                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23446 5F10           FF77         04            push	4[bx]
23447                                           ! Debug: func () void = write_byte+0 (used reg = )
23448 5F13           E8         1C05            call	_write_byte
23449 5F16           83C4                   06  add	sp,*6
23450                                           !BCC_EOS
23451                                           ! 2677       if(flag==3)
23452                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23453 5F19           8A46         0A            mov	al,$A[bp]
23454 5F1C           3C                     03  cmp	al,*3
23455 5F1E           75           23            jne 	.1E4
23456                       00005F20            .1E5:
23457                                           ! 2678        write_byte(vga_modes[line].sstart,address+1,attr);
23458                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23459 5F20           8A46         08            mov	al,8[bp]
23460 5F23           30E4                       xor	ah,ah
23461 5F25           50                         push	ax
23462                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23463 5F26           8B46         F4            mov	ax,-$C[bp]
23464                                           ! Debug: list unsigned int = ax+1 (used reg = )
23465 5F29           40                         inc	ax
23466 5F2A           50                         push	ax
23467                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23468 5F2B           8A46         FB            mov	al,-5[bp]
23469 5F2E           30E4                       xor	ah,ah
23470 5F30           B1                     03  mov	cl,*3
23471 5F32           D3E0                       shl	ax,cl
23472 5F34           89C3                       mov	bx,ax
23473 5F36           81C3                 01D3  add	bx,#_vga_modes
23474                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23475 5F3A           FF77         04            push	4[bx]
23476                                           ! Debug: func () void = write_byte+0 (used reg = )
23477 5F3D           E8         1BDB            call	_write_byte
23478 5F40           83C4                   06  add	sp,*6
23479                                           !BCC_EOS
23480                                           ! 2679      }
23481                       00005F43            .1E4:
23482                                           ! 2680     else
23483                                           ! 2681      {
23484 5F43           E9         00D2            br 	.1E6
23485                       00005F46            .1E2:
23486                                           ! 2682       cheight=video_param_table[line_to_vpti[line]].cheight;
23487                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23488 5F46           8A46         FB            mov	al,-5[bp]
23489 5F49           30E4                       xor	ah,ah
23490 5F4B           89C3                       mov	bx,ax
23491                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23492 5F4D           8A87       0253            mov	al,_line_to_vpti[bx]
23493 5F51           30E4                       xor	ah,ah
23494 5F53           B1                     06  mov	cl,*6
23495 5F55           D3E0                       shl	ax,cl
23496 5F57           89C3                       mov	bx,ax
23497 5F59           81C3                 0267  add	bx,#_video_param_table
23498                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23499 5F5D           8A47         02            mov	al,2[bx]
23500 5F60           8846         FF            mov	-1[bp],al
23501                                           !BCC_EOS
23502                                           ! 2683       bpp=vga_modes[line].pixbits;
23503                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23504 5F63           8A46         FB            mov	al,-5[bp]
23505 5F66           30E4                       xor	ah,ah
23506 5F68           B1                     03  mov	cl,*3
23507 5F6A           D3E0                       shl	ax,cl
23508 5F6C           89C3                       mov	bx,ax
23509 5F6E           81C3                 01D3  add	bx,#_vga_modes
23510                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23511 5F72           8A47         03            mov	al,3[bx]
23512 5F75           8846         FA            mov	-6[bp],al
23513                                           !BCC_EOS
23514                                           ! 2684       switch(vga_modes[line].memmodel)
23515                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23516 5F78           8A46         FB            mov	al,-5[bp]
23517 5F7B           30E4                       xor	ah,ah
23518 5F7D           B1                     03  mov	cl,*3
23519 5F7F           D3E0                       shl	ax,cl
23520 5F81           89C3                       mov	bx,ax
23521 5F83           81C3                 01D3  add	bx,#_vga_modes
23522 5F87           8A47         02            mov	al,2[bx]
23523                                           ! 2685        {
23524 5F8A           E9         0077            br 	.1E9
23525                                           ! 2686         case 0x04:
23526                                           ! 2687         case 0x03:
23527                       00005F8D            .1EA:
23528                                           ! 2688           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23529                       00005F8D            .1EB:
23530                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23531 5F8D           8A46         FF            mov	al,-1[bp]
23532 5F90           30E4                       xor	ah,ah
23533 5F92           50                         push	ax
23534                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23535 5F93           FF76         F8            push	-8[bp]
23536                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23537 5F96           8A46         FD            mov	al,-3[bp]
23538 5F99           30E4                       xor	ah,ah
23539 5F9B           50                         push	ax
23540                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23541 5F9C           8A46         FE            mov	al,-2[bp]
23542 5F9F           30E4                       xor	ah,ah
23543 5FA1           50                         push	ax
23544                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23545 5FA2           8A46         08            mov	al,8[bp]
23546 5FA5           30E4                       xor	ah,ah
23547 5FA7           50                         push	ax
23548                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23549 5FA8           8A46         04            mov	al,4[bp]
23550 5FAB           30E4                       xor	ah,ah
23551 5FAD           50                         push	ax
23552                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23553 5FAE           E8         F09E            call	_write_gfx_char_pl4
23554 5FB1           83C4                   0C  add	sp,*$C
23555                                           !BCC_EOS
23556                                           ! 2689           break;
23557 5FB4           EB           62            jmp .1E7
23558                                           !BCC_EOS
23559                                           ! 2690         case 0x02:
23560                                           ! 2691           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
23561                       00005FB6            .1EC:
23562                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
23563 5FB6           8A46         FA            mov	al,-6[bp]
23564 5FB9           30E4                       xor	ah,ah
23565 5FBB           50                         push	ax
23566                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23567 5FBC           FF76         F8            push	-8[bp]
23568                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23569 5FBF           8A46         FD            mov	al,-3[bp]
23570 5FC2           30E4                       xor	ah,ah
23571 5FC4           50                         push	ax
23572                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23573 5FC5           8A46         FE            mov	al,-2[bp]
23574 5FC8           30E4                       xor	ah,ah
23575 5FCA           50                         push	ax
23576                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23577 5FCB           8A46         08            mov	al,8[bp]
23578 5FCE           30E4                       xor	ah,ah
23579 5FD0           50                         push	ax
23580                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23581 5FD1           8A46         04            mov	al,4[bp]
23582 5FD4           30E4                       xor	ah,ah
23583 5FD6           50                         push	ax
23584                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
23585 5FD7           E8         F1E8            call	_write_gfx_char_cga
23586 5FDA           83C4                   0C  add	sp,*$C
23587                                           !BCC_EOS
23588                                           ! 2692           break;
23589 5FDD           EB           39            jmp .1E7
23590                                           !BCC_EOS
23591                                           ! 2693         case 0x05:
23592                                           ! 2694           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
23593                       00005FDF            .1ED:
23594                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
23595 5FDF           FF76         F8            push	-8[bp]
23596                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
23597 5FE2           8A46         FD            mov	al,-3[bp]
23598 5FE5           30E4                       xor	ah,ah
23599 5FE7           50                         push	ax
23600                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
23601 5FE8           8A46         FE            mov	al,-2[bp]
23602 5FEB           30E4                       xor	ah,ah
23603 5FED           50                         push	ax
23604                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
23605 5FEE           8A46         08            mov	al,8[bp]
23606 5FF1           30E4                       xor	ah,ah
23607 5FF3           50                         push	ax
23608                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
23609 5FF4           8A46         04            mov	al,4[bp]
23610 5FF7           30E4                       xor	ah,ah
23611 5FF9           50                         push	ax
23612                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
23613 5FFA           E8         F3CA            call	_write_gfx_char_lin
23614 5FFD           83C4                   0A  add	sp,*$A
23615                                           !BCC_EOS
23616                                           ! 2695           break;
23617 6000           EB           16            jmp .1E7
23618                                           !BCC_EOS
23619                                           ! 2696        }
23620                                           ! 2697      }
23621 6002           EB           14            jmp .1E7
23622                       00006004            .1E9:
23623 6004           2C                     02  sub	al,*2
23624 6006           74           AE            je 	.1EC
23625 6008           2C                     01  sub	al,*1
23626 600A         0F84         FF7F            beq 	.1EB
23627 600E           2C                     01  sub	al,*1
23628 6010         0F84         FF79            beq 	.1EA
23629 6014           2C                     01  sub	al,*1
23630 6016           74           C7            je 	.1ED
23631                       00006018            .1E7:
23632                                           ! 2698     xcurs++;
23633                       00006018            .1E6:
23634                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
23635 6018           8A46         FE            mov	al,-2[bp]
23636 601B           40                         inc	ax
23637 601C           8846         FE            mov	-2[bp],al
23638                                           !BCC_EOS
23639                                           ! 2699   }
23640                                           ! 2700  if(xcurs==nbcols)
23641 601F           EB           21            jmp .1D3
23642                       00006021            .1D5:
23643 6021           2C                     07  sub	al,*7
23644 6023         0F84         FE0F            beq 	.1D6
23645 6027           2C                     01  sub	al,*1
23646 6029         0F84         FE0C            beq 	.1D7
23647 602D           2C                     01  sub	al,*1
23648 602F         0F84         FE29            beq 	.1DC
23649 6033           2C                     01  sub	al,*1
23650 6035         0F84         FE19            beq 	.1DB
23651 6039           2C                     03  sub	al,*3
23652 603B         0F84         FE0B            beq 	.1DA
23653 603F           E9         FE6A            br 	.1E1
23654                       00006042            .1D3:
23655                       FFFFFFEE            ..FFF6	=	-$12
23656                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
23657 6042           8A46         FE            mov	al,-2[bp]
23658 6045           30E4                       xor	ah,ah
23659 6047           3B46         F8            cmp	ax,-8[bp]
23660 604A           75           0C            jne 	.1EE
23661                       0000604C            .1EF:
23662                                           ! 2701   {xcurs=0;
23663                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23664 604C           30C0                       xor	al,al
23665 604E           8846         FE            mov	-2[bp],al
23666                                           !BCC_EOS
23667                                           ! 2702    ycurs++;
23668                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23669 6051           8A46         FD            mov	al,-3[bp]
23670 6054           40                         inc	ax
23671 6055           8846         FD            mov	-3[bp],al
23672                                           !BCC_EOS
23673                                           ! 2703   }
23674                                           ! 2704  if(ycurs==nbrows)
23675                       00006058            .1EE:
23676                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
23677 6058           8A46         FD            mov	al,-3[bp]
23678 605B           30E4                       xor	ah,ah
23679 605D           3B46         F6            cmp	ax,-$A[bp]
23680 6060         0F85         00C9            bne 	.1F0
23681                       00006064            .1F1:
23682                                           ! 2705   {
23683                                           ! 2706    if(vga_modes[line].class==0x00)
23684                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23685 6064           8A46         FB            mov	al,-5[bp]
23686 6067           30E4                       xor	ah,ah
23687 6069           B1                     03  mov	cl,*3
23688 606B           D3E0                       shl	ax,cl
23689 606D           89C3                       mov	bx,ax
23690 606F           81C3                 01D3  add	bx,#_vga_modes
23691                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23692 6073           8A47         01            mov	al,1[bx]
23693 6076           84C0                       test	al,al
23694 6078         0F85         0081            bne 	.1F2
23695                       0000607C            .1F3:
23696                                           ! 2707     {
23697                                           ! 2708      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
23698                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23699 607C           8A46         FD            mov	al,-3[bp]
23700 607F           30E4                       xor	ah,ah
23701                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
23702 6081           48                         dec	ax
23703 6082           8B4E         F8            mov	cx,-8[bp]
23704 6085           F7E9                       imul	cx
23705                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23706                                           ! Debug: expression subtree swapping
23707 6087           0246         FE            add	al,-2[bp]
23708 608A           80D4                   00  adc	ah,*0
23709                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23710 608D           D1E0                       shl	ax,*1
23711 608F           50                         push	ax
23712                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23713 6090           8B46         F8            mov	ax,-8[bp]
23714 6093           8B4E         F6            mov	cx,-$A[bp]
23715 6096           F7E9                       imul	cx
23716                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23717 6098           D1E0                       shl	ax,*1
23718                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23719 609A           0C                     FF  or	al,#$FF
23720                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23721                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23722 609C           89C3                       mov	bx,ax
23723 609E           8A46         06            mov	al,6[bp]
23724 60A1           30E4                       xor	ah,ah
23725 60A3           93                         xchg	ax,bx
23726 60A4           40                         inc	ax
23727 60A5           89D9                       mov	cx,bx
23728 60A7           F7E9                       imul	cx
23729                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23730 60A9           0346         EE            add	ax,-$12[bp]
23731 60AC           44                         inc	sp
23732 60AD           44                         inc	sp
23733                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23734 60AE           8946         F4            mov	-$C[bp],ax
23735                                           !BCC_EOS
23736                                           ! 2709      attr=read_byte(vga_modes[line].sstart,address+1);
23737                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
23738 60B1           8B46         F4            mov	ax,-$C[bp]
23739                                           ! Debug: list unsigned int = ax+1 (used reg = )
23740 60B4           40                         inc	ax
23741 60B5           50                         push	ax
23742                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
23743 60B6           8A46         FB            mov	al,-5[bp]
23744 60B9           30E4                       xor	ah,ah
23745 60BB           B1                     03  mov	cl,*3
23746 60BD           D3E0                       shl	ax,cl
23747 60BF           89C3                       mov	bx,ax
23748 60C1           81C3                 01D3  add	bx,#_vga_modes
23749                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23750 60C5           FF77         04            push	4[bx]
23751                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23752 60C8           E8         1A2A            call	_read_byte
23753 60CB           83C4                   04  add	sp,*4
23754                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
23755 60CE           8846         08            mov	8[bp],al
23756                                           !BCC_EOS
23757                                           ! 2710      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
23758                                           ! Debug: list int = const 1 (used reg = )
23759 60D1           B8                   0001  mov	ax,*1
23760 60D4           50                         push	ax
23761                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23762 60D5           8A46         06            mov	al,6[bp]
23763 60D8           30E4                       xor	ah,ah
23764 60DA           50                         push	ax
23765                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23766 60DB           8B46         F8            mov	ax,-8[bp]
23767                                           ! Debug: list unsigned int = ax-1 (used reg = )
23768 60DE           48                         dec	ax
23769 60DF           50                         push	ax
23770                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23771 60E0           8B46         F6            mov	ax,-$A[bp]
23772                                           ! Debug: list unsigned int = ax-1 (used reg = )
23773 60E3           48                         dec	ax
23774 60E4           50                         push	ax
23775                                           ! Debug: list int = const 0 (used reg = )
23776 60E5           31C0                       xor	ax,ax
23777 60E7           50                         push	ax
23778                                           ! Debug: list int = const 0 (used reg = )
23779 60E8           31C0                       xor	ax,ax
23780 60EA           50                         push	ax
23781                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
23782 60EB           8A46         08            mov	al,8[bp]
23783 60EE           30E4                       xor	ah,ah
23784 60F0           50                         push	ax
23785                                           ! Debug: list int = const 1 (used reg = )
23786 60F1           B8                   0001  mov	ax,*1
23787 60F4           50                         push	ax
23788                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23789 60F5           E8         E756            call	_biosfn_scroll
23790 60F8           83C4                   10  add	sp,*$10
23791                                           !BCC_EOS
23792                                           ! 2711     }
23793                                           ! 2712    else
23794                                           ! 2713     {
23795 60FB           EB           27            jmp .1F4
23796                       000060FD            .1F2:
23797                                           ! 2714      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
23798                                           ! Debug: list int = const 1 (used reg = )
23799 60FD           B8                   0001  mov	ax,*1
23800 6100           50                         push	ax
23801                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23802 6101           8A46         06            mov	al,6[bp]
23803 6104           30E4                       xor	ah,ah
23804 6106           50                         push	ax
23805                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23806 6107           8B46         F8            mov	ax,-8[bp]
23807                                           ! Debug: list unsigned int = ax-1 (used reg = )
23808 610A           48                         dec	ax
23809 610B           50                         push	ax
23810                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23811 610C           8B46         F6            mov	ax,-$A[bp]
23812                                           ! Debug: list unsigned int = ax-1 (used reg = )
23813 610F           48                         dec	ax
23814 6110           50                         push	ax
23815                                           ! Debug: list int = const 0 (used reg = )
23816 6111           31C0                       xor	ax,ax
23817 6113           50                         push	ax
23818                                           ! Debug: list int = const 0 (used reg = )
23819 6114           31C0                       xor	ax,ax
23820 6116           50                         push	ax
23821                                           ! Debug: list int = const 0 (used reg = )
23822 6117           31C0                       xor	ax,ax
23823 6119           50                         push	ax
23824                                           ! Debug: list int = const 1 (used reg = )
23825 611A           B8                   0001  mov	ax,*1
23826 611D           50                         push	ax
23827                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23828 611E           E8         E72D            call	_biosfn_scroll
23829 6121           83C4                   10  add	sp,*$10
23830                                           !BCC_EOS
23831                                           ! 2715     }
23832                                           ! 2716    ycurs-=1;
23833                       00006124            .1F4:
23834                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23835 6124           8A46         FD            mov	al,-3[bp]
23836 6127           30E4                       xor	ah,ah
23837 6129           48                         dec	ax
23838 612A           8846         FD            mov	-3[bp],al
23839                                           !BCC_EOS
23840                                           ! 2717   }
23841                                           ! 2718  cursor=ycurs; cursor<<=8; cursor+=xcurs;
23842                       0000612D            .1F0:
23843                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
23844 612D           8A46         FD            mov	al,-3[bp]
23845 6130           30E4                       xor	ah,ah
23846 6132           8946         F2            mov	-$E[bp],ax
23847                                           !BCC_EOS
23848                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
23849 6135           8B46         F2            mov	ax,-$E[bp]
23850 6138           88C4                       mov	ah,al
23851 613A           30C0                       xor	al,al
23852 613C           8946         F2            mov	-$E[bp],ax
23853                                           !BCC_EOS
23854                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
23855 613F           8B46         F2            mov	ax,-$E[bp]
23856 6142           0246         FE            add	al,-2[bp]
23857 6145           80D4                   00  adc	ah,*0
23858 6148           8946         F2            mov	-$E[bp],ax
23859                                           !BCC_EOS
23860                                           ! 2719  biosfn_set_cursor_pos(page,cursor);
23861                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
23862 614B           FF76         F2            push	-$E[bp]
23863                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23864 614E           8A46         06            mov	al,6[bp]
23865 6151           30E4                       xor	ah,ah
23866 6153           50                         push	ax
23867                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
23868 6154           E8         E0FF            call	_biosfn_set_cursor_pos
23869 6157           83C4                   04  add	sp,*4
23870                                           !BCC_EOS
23871                                           ! 2720 }
23872 615A           89EC                       mov	sp,bp
23873 615C           5D                         pop	bp
23874 615D           C3                         ret
23875                                           ! 2721 #asm
23876                                           !BCC_ASM
23877                       00000008            _biosfn_write_teletype.flag	set	8
23878                       00000006            _biosfn_write_teletype.attr	set	6
23879                       00000004            _biosfn_write_teletype.page	set	4
23880                       00000002            _biosfn_write_teletype.car	set	2
23881                       0000615E            biosfn_get_video_mode:
23882 615E           1E                           push ds
23883 615F           B8                   0040    mov ax, # 0x40
23884 6162           8ED8                         mov ds, ax
23885 6164           53                           push bx
23886 6165           BB                   0062    mov bx, # 0x62
23887 6168           8A07                         mov al, [bx]
23888 616A           5B                           pop bx
23889 616B           88C7                         mov bh, al
23890 616D           53                           push bx
23891 616E           BB                   0087    mov bx, # 0x87
23892 6171           8A27                         mov ah, [bx]
23893 6173           80E4                   80    and ah, #0x80
23894 6176           BB                   0049    mov bx, # 0x49
23895 6179           8A07                         mov al, [bx]
23896 617B           08E0                         or al, ah
23897 617D           BB                   004A    mov bx, # 0x4A
23898 6180           8A27                         mov ah, [bx]
23899 6182           5B                           pop bx
23900 6183           1F                           pop ds
23901 6184           C3                           ret
23902                                           ! 2743 endasm
23903                                           !BCC_ENDASM
23904                                           ! 2744 #asm
23905                                           !BCC_ASM
23906                       00000008            _biosfn_write_teletype.flag	set	8
23907                       00000006            _biosfn_write_teletype.attr	set	6
23908                       00000004            _biosfn_write_teletype.page	set	4
23909                       00000002            _biosfn_write_teletype.car	set	2
23910                       00006185            biosfn_group_10:
23911 6185           3C                     00    cmp al, #0x00
23912 6187           75           02              jne int10_test_1001
23913 6189           EB           61              jmp biosfn_set_single_palette_reg
23914                       0000618B            int10_test_1001:
23915 618B           3C                     01    cmp al, #0x01
23916 618D           75           02              jne int10_test_1002
23917 618F           EB           75              jmp biosfn_set_overscan_border_color
23918                       00006191            int10_test_1002:
23919 6191           3C                     02    cmp al, #0x02
23920 6193           75           02              jne int10_test_1003
23921 6195           EB           77              jmp biosfn_set_all_palette_reg
23922                       00006197            int10_test_1003:
23923 6197           3C                     03    cmp al, #0x03
23924 6199           75           03              jne int10_test_1007
23925 619B           E9         009D              jmp biosfn_toggle_intensity
23926                       0000619E            int10_test_1007:
23927 619E           3C                     07    cmp al, #0x07
23928 61A0           75           03              jne int10_test_1008
23929 61A2           E9         00BC              jmp biosfn_get_single_palette_reg
23930                       000061A5            int10_test_1008:
23931 61A5           3C                     08    cmp al, #0x08
23932 61A7           75           03              jne int10_test_1009
23933 61A9           E9         00D9              jmp biosfn_read_overscan_border_color
23934                       000061AC            int10_test_1009:
23935 61AC           3C                     09    cmp al, #0x09
23936 61AE           75           03              jne int10_test_1010
23937 61B0           E9         00E0              jmp biosfn_get_all_palette_reg
23938                       000061B3            int10_test_1010:
23939 61B3           3C                     10    cmp al, #0x10
23940 61B5           75           03              jne int10_test_1012
23941 61B7           E9         011A              jmp biosfn_set_single_dac_reg
23942                       000061BA            int10_test_1012:
23943 61BA           3C                     12    cmp al, #0x12
23944 61BC           75           03              jne int10_test_1013
23945 61BE           E9         012C              jmp biosfn_set_all_dac_reg
23946                       000061C1            int10_test_1013:
23947 61C1           3C                     13    cmp al, #0x13
23948 61C3           75           03              jne int10_test_1015
23949 61C5           E9         014D              jmp biosfn_select_video_dac_color_page
23950                       000061C8            int10_test_1015:
23951 61C8           3C                     15    cmp al, #0x15
23952 61CA           75           03              jne int10_test_1017
23953 61CC           E9         0189              jmp biosfn_read_single_dac_reg
23954                       000061CF            int10_test_1017:
23955 61CF           3C                     17    cmp al, #0x17
23956 61D1           75           03              jne int10_test_1018
23957 61D3           E9         019D              jmp biosfn_read_all_dac_reg
23958                       000061D6            int10_test_1018:
23959 61D6           3C                     18    cmp al, #0x18
23960 61D8           75           03              jne int10_test_1019
23961 61DA           E9         01BE              jmp biosfn_set_pel_mask
23962                       000061DD            int10_test_1019:
23963 61DD           3C                     19    cmp al, #0x19
23964 61DF           75           03              jne int10_test_101A
23965 61E1           E9         01C2              jmp biosfn_read_pel_mask
23966                       000061E4            int10_test_101A:
23967 61E4           3C                     1A    cmp al, #0x1a
23968 61E6           75           03              jne int10_group_10_unknown
23969 61E8           E9         01C6              jmp biosfn_read_video_dac_state
23970                       000061EB            int10_group_10_unknown:
23971 61EB           C3                           ret
23972                       000061EC            biosfn_set_single_palette_reg:
23973 61EC           80FB                   14    cmp bl, #0x14
23974 61EF           77           14              ja no_actl_reg1
23975 61F1           50                           push ax
23976 61F2           52                           push dx
23977 61F3           BA                   03DA    mov dx, # 0x3da
23978 61F6           EC                           in al, dx
23979 61F7           BA                   03C0    mov dx, # 0x3c0
23980 61FA           88D8                         mov al, bl
23981 61FC           EE                           out dx, al
23982 61FD           88F8                         mov al, bh
23983 61FF           EE                           out dx, al
23984 6200           B0                     20    mov al, #0x20
23985 6202           EE                           out dx, al
23986 6203           5A                           pop dx
23987 6204           58                           pop ax
23988                       00006205            no_actl_reg1:
23989 6205           C3                           ret
23990                                           ! 2825 endasm
23991                                           !BCC_ENDASM
23992                                           ! 2826 #asm
23993                                           !BCC_ASM
23994                       00000008            _biosfn_write_teletype.flag	set	8
23995                       00000006            _biosfn_write_teletype.attr	set	6
23996                       00000004            _biosfn_write_teletype.page	set	4
23997                       00000002            _biosfn_write_teletype.car	set	2
23998                       00006206            biosfn_set_overscan_border_color:
23999 6206           53                           push bx
24000 6207           B3                     11    mov bl, #0x11
24001 6209           E8         FFE0              call biosfn_set_single_palette_reg
24002 620C           5B                           pop bx
24003 620D           C3                           ret
24004                                           ! 2833 endasm
24005                                           !BCC_ENDASM
24006                                           ! 2834 #asm
24007                                           !BCC_ASM
24008                       00000008            _biosfn_write_teletype.flag	set	8
24009                       00000006            _biosfn_write_teletype.attr	set	6
24010                       00000004            _biosfn_write_teletype.page	set	4
24011                       00000002            _biosfn_write_teletype.car	set	2
24012                       0000620E            biosfn_set_all_palette_reg:
24013 620E           50                           push ax
24014 620F           53                           push bx
24015 6210           51                           push cx
24016 6211           52                           push dx
24017 6212           89D3                         mov bx, dx
24018 6214           BA                   03DA    mov dx, # 0x3da
24019 6217           EC                           in al, dx
24020 6218           B1                     00    mov cl, #0x00
24021 621A           BA                   03C0    mov dx, # 0x3c0
24022                       0000621D            set_palette_loop:
24023 621D           88C8                         mov al, cl
24024 621F           EE                           out dx, al
24025 6220           26                           seg es
24026 6221           8A07                         mov al, [bx]
24027 6223           EE                           out dx, al
24028 6224           43                           inc bx
24029 6225           FEC1                         inc cl
24030 6227           80F9                   10    cmp cl, #0x10
24031 622A           75           F1              jne set_palette_loop
24032 622C           B0                     11    mov al, #0x11
24033 622E           EE                           out dx, al
24034 622F           26                           seg es
24035 6230           8A07                         mov al, [bx]
24036 6232           EE                           out dx, al
24037 6233           B0                     20    mov al, #0x20
24038 6235           EE                           out dx, al
24039 6236           5A                           pop dx
24040 6237           59                           pop cx
24041 6238           5B                           pop bx
24042 6239           58                           pop ax
24043 623A           C3                           ret
24044                                           ! 2867 endasm
24045                                           !BCC_ENDASM
24046                                           ! 2868 #asm
24047                                           !BCC_ASM
24048                       00000008            _biosfn_write_teletype.flag	set	8
24049                       00000006            _biosfn_write_teletype.attr	set	6
24050                       00000004            _biosfn_write_teletype.page	set	4
24051                       00000002            _biosfn_write_teletype.car	set	2
24052                       0000623B            biosfn_toggle_intensity:
24053 623B           50                           push ax
24054 623C           53                           push bx
24055 623D           52                           push dx
24056 623E           BA                   03DA    mov dx, # 0x3da
24057 6241           EC                           in al, dx
24058 6242           BA                   03C0    mov dx, # 0x3c0
24059 6245           B0                     10    mov al, #0x10
24060 6247           EE                           out dx, al
24061 6248           BA                   03C1    mov dx, # 0x3c1
24062 624B           EC                           in al, dx
24063 624C           24                     F7    and al, #0xf7
24064 624E           80E3                   01    and bl, #0x01
24065 6251           C0E3                   03    shl bl, 3
24066 6254           08D8                         or al, bl
24067 6256           BA                   03C0    mov dx, # 0x3c0
24068 6259           EE                           out dx, al
24069 625A           B0                     20    mov al, #0x20
24070 625C           EE                           out dx, al
24071 625D           5A                           pop dx
24072 625E           5B                           pop bx
24073 625F           58                           pop ax
24074 6260           C3                           ret
24075                                           ! 2892 endasm
24076                                           !BCC_ENDASM
24077                                           ! 2893 #asm
24078                                           !BCC_ASM
24079                       00000008            _biosfn_write_teletype.flag	set	8
24080                       00000006            _biosfn_write_teletype.attr	set	6
24081                       00000004            _biosfn_write_teletype.page	set	4
24082                       00000002            _biosfn_write_teletype.car	set	2
24083                       00006261            biosfn_get_single_palette_reg:
24084 6261           80FB                   14    cmp bl, #0x14
24085 6264           77           1E              ja no_actl_reg2
24086 6266           50                           push ax
24087 6267           52                           push dx
24088 6268           BA                   03DA    mov dx, # 0x3da
24089 626B           EC                           in al, dx
24090 626C           BA                   03C0    mov dx, # 0x3c0
24091 626F           88D8                         mov al, bl
24092 6271           EE                           out dx, al
24093 6272           BA                   03C1    mov dx, # 0x3c1
24094 6275           EC                           in al, dx
24095 6276           88C7                         mov bh, al
24096 6278           BA                   03DA    mov dx, # 0x3da
24097 627B           EC                           in al, dx
24098 627C           BA                   03C0    mov dx, # 0x3c0
24099 627F           B0                     20    mov al, #0x20
24100 6281           EE                           out dx, al
24101 6282           5A                           pop dx
24102 6283           58                           pop ax
24103                       00006284            no_actl_reg2:
24104 6284           C3                           ret
24105                                           ! 2916 endasm
24106                                           !BCC_ENDASM
24107                                           ! 2917 #asm
24108                                           !BCC_ASM
24109                       00000008            _biosfn_write_teletype.flag	set	8
24110                       00000006            _biosfn_write_teletype.attr	set	6
24111                       00000004            _biosfn_write_teletype.page	set	4
24112                       00000002            _biosfn_write_teletype.car	set	2
24113                       00006285            biosfn_read_overscan_border_color:
24114 6285           50                           push ax
24115 6286           53                           push bx
24116 6287           B3                     11    mov bl, #0x11
24117 6289           E8         FFD5              call biosfn_get_single_palette_reg
24118 628C           88F8                         mov al, bh
24119 628E           5B                           pop bx
24120 628F           88C7                         mov bh, al
24121 6291           58                           pop ax
24122 6292           C3                           ret
24123                                           ! 2928 endasm
24124                                           !BCC_ENDASM
24125                                           ! 2929 #asm
24126                                           !BCC_ASM
24127                       00000008            _biosfn_write_teletype.flag	set	8
24128                       00000006            _biosfn_write_teletype.attr	set	6
24129                       00000004            _biosfn_write_teletype.page	set	4
24130                       00000002            _biosfn_write_teletype.car	set	2
24131                       00006293            biosfn_get_all_palette_reg:
24132 6293           50                           push ax
24133 6294           53                           push bx
24134 6295           51                           push cx
24135 6296           52                           push dx
24136 6297           89D3                         mov bx, dx
24137 6299           B1                     00    mov cl, #0x00
24138                       0000629B            get_palette_loop:
24139 629B           BA                   03DA    mov dx, # 0x3da
24140 629E           EC                           in al, dx
24141 629F           BA                   03C0    mov dx, # 0x3c0
24142 62A2           88C8                         mov al, cl
24143 62A4           EE                           out dx, al
24144 62A5           BA                   03C1    mov dx, # 0x3c1
24145 62A8           EC                           in al, dx
24146 62A9           26                           seg es
24147 62AA           8807                         mov [bx], al
24148 62AC           43                           inc bx
24149 62AD           FEC1                         inc cl
24150 62AF           80F9                   10    cmp cl, #0x10
24151 62B2           75           E7              jne get_palette_loop
24152 62B4           BA                   03DA    mov dx, # 0x3da
24153 62B7           EC                           in al, dx
24154 62B8           BA                   03C0    mov dx, # 0x3c0
24155 62BB           B0                     11    mov al, #0x11
24156 62BD           EE                           out dx, al
24157 62BE           BA                   03C1    mov dx, # 0x3c1
24158 62C1           EC                           in al, dx
24159 62C2           26                           seg es
24160 62C3           8807                         mov [bx], al
24161 62C5           BA                   03DA    mov dx, # 0x3da
24162 62C8           EC                           in al, dx
24163 62C9           BA                   03C0    mov dx, # 0x3c0
24164 62CC           B0                     20    mov al, #0x20
24165 62CE           EE                           out dx, al
24166 62CF           5A                           pop dx
24167 62D0           59                           pop cx
24168 62D1           5B                           pop bx
24169 62D2           58                           pop ax
24170 62D3           C3                           ret
24171                                           ! 2970 endasm
24172                                           !BCC_ENDASM
24173                                           ! 2971 #asm
24174                                           !BCC_ASM
24175                       00000008            _biosfn_write_teletype.flag	set	8
24176                       00000006            _biosfn_write_teletype.attr	set	6
24177                       00000004            _biosfn_write_teletype.page	set	4
24178                       00000002            _biosfn_write_teletype.car	set	2
24179                       000062D4            biosfn_set_single_dac_reg:
24180 62D4           50                           push ax
24181 62D5           52                           push dx
24182 62D6           BA                   03C8    mov dx, # 0x3c8
24183 62D9           88D8                         mov al, bl
24184 62DB           EE                           out dx, al
24185 62DC           BA                   03C9    mov dx, # 0x3c9
24186 62DF           58                           pop ax
24187 62E0           50                           push ax
24188 62E1           88E0                         mov al, ah
24189 62E3           EE                           out dx, al
24190 62E4           88E8                         mov al, ch
24191 62E6           EE                           out dx, al
24192 62E7           88C8                         mov al, cl
24193 62E9           EE                           out dx, al
24194 62EA           5A                           pop dx
24195 62EB           58                           pop ax
24196 62EC           C3                           ret
24197                                           ! 2990 endasm
24198                                           !BCC_ENDASM
24199                                           ! 2991 #asm
24200                                           !BCC_ASM
24201                       00000008            _biosfn_write_teletype.flag	set	8
24202                       00000006            _biosfn_write_teletype.attr	set	6
24203                       00000004            _biosfn_write_teletype.page	set	4
24204                       00000002            _biosfn_write_teletype.car	set	2
24205                       000062ED            biosfn_set_all_dac_reg:
24206 62ED           50                           push ax
24207 62EE           53                           push bx
24208 62EF           51                           push cx
24209 62F0           52                           push dx
24210 62F1           BA                   03C8    mov dx, # 0x3c8
24211 62F4           88D8                         mov al, bl
24212 62F6           EE                           out dx, al
24213 62F7           5A                           pop dx
24214 62F8           52                           push dx
24215 62F9           89D3                         mov bx, dx
24216 62FB           BA                   03C9    mov dx, # 0x3c9
24217                       000062FE            set_dac_loop:
24218 62FE           26                           seg es
24219 62FF           8A07                         mov al, [bx]
24220 6301           EE                           out dx, al
24221 6302           43                           inc bx
24222 6303           26                           seg es
24223 6304           8A07                         mov al, [bx]
24224 6306           EE                           out dx, al
24225 6307           43                           inc bx
24226 6308           26                           seg es
24227 6309           8A07                         mov al, [bx]
24228 630B           EE                           out dx, al
24229 630C           43                           inc bx
24230 630D           49                           dec cx
24231 630E           75           EE              jnz set_dac_loop
24232 6310           5A                           pop dx
24233 6311           59                           pop cx
24234 6312           5B                           pop bx
24235 6313           58                           pop ax
24236 6314           C3                           ret
24237                                           ! 3024 endasm
24238                                           !BCC_ENDASM
24239                                           ! 3025 #asm
24240                                           !BCC_ASM
24241                       00000008            _biosfn_write_teletype.flag	set	8
24242                       00000006            _biosfn_write_teletype.attr	set	6
24243                       00000004            _biosfn_write_teletype.page	set	4
24244                       00000002            _biosfn_write_teletype.car	set	2
24245                       00006315            biosfn_select_video_dac_color_page:
24246 6315           50                           push ax
24247 6316           53                           push bx
24248 6317           52                           push dx
24249 6318           BA                   03DA    mov dx, # 0x3da
24250 631B           EC                           in al, dx
24251 631C           BA                   03C0    mov dx, # 0x3c0
24252 631F           B0                     10    mov al, #0x10
24253 6321           EE                           out dx, al
24254 6322           BA                   03C1    mov dx, # 0x3c1
24255 6325           EC                           in al, dx
24256 6326           80E3                   01    and bl, #0x01
24257 6329           75           0D              jnz set_dac_page
24258 632B           24                     7F    and al, #0x7f
24259 632D           C0E7                   07    shl bh, 7
24260 6330           08F8                         or al, bh
24261 6332           BA                   03C0    mov dx, # 0x3c0
24262 6335           EE                           out dx, al
24263 6336           EB           19              jmp set_actl_normal
24264                       00006338            set_dac_page:
24265 6338           50                           push ax
24266 6339           BA                   03DA    mov dx, # 0x3da
24267 633C           EC                           in al, dx
24268 633D           BA                   03C0    mov dx, # 0x3c0
24269 6340           B0                     14    mov al, #0x14
24270 6342           EE                           out dx, al
24271 6343           58                           pop ax
24272 6344           24                     80    and al, #0x80
24273 6346           75           03              jnz set_dac_16_page
24274 6348           C0E7                   02    shl bh, 2
24275                       0000634B            set_dac_16_page:
24276 634B           80E7                   0F    and bh, #0x0f
24277 634E           88F8                         mov al, bh
24278 6350           EE                           out dx, al
24279                       00006351            set_actl_normal:
24280 6351           B0                     20    mov al, #0x20
24281 6353           EE                           out dx, al
24282 6354           5A                           pop dx
24283 6355           5B                           pop bx
24284 6356           58                           pop ax
24285 6357           C3                           ret
24286                                           ! 3067 endasm
24287                                           !BCC_ENDASM
24288                                           ! 3068 #asm
24289                                           !BCC_ASM
24290                       00000008            _biosfn_write_teletype.flag	set	8
24291                       00000006            _biosfn_write_teletype.attr	set	6
24292                       00000004            _biosfn_write_teletype.page	set	4
24293                       00000002            _biosfn_write_teletype.car	set	2
24294                       00006358            biosfn_read_single_dac_reg:
24295 6358           50                           push ax
24296 6359           52                           push dx
24297 635A           BA                   03C7    mov dx, # 0x3c7
24298 635D           88D8                         mov al, bl
24299 635F           EE                           out dx, al
24300 6360           58                           pop ax
24301 6361           88C4                         mov ah, al
24302 6363           BA                   03C9    mov dx, # 0x3c9
24303 6366           EC                           in al, dx
24304 6367           86E0                         xchg al, ah
24305 6369           50                           push ax
24306 636A           EC                           in al, dx
24307 636B           88C5                         mov ch, al
24308 636D           EC                           in al, dx
24309 636E           88C1                         mov cl, al
24310 6370           5A                           pop dx
24311 6371           58                           pop ax
24312 6372           C3                           ret
24313                                           ! 3088 endasm
24314                                           !BCC_ENDASM
24315                                           ! 3089 #asm
24316                                           !BCC_ASM
24317                       00000008            _biosfn_write_teletype.flag	set	8
24318                       00000006            _biosfn_write_teletype.attr	set	6
24319                       00000004            _biosfn_write_teletype.page	set	4
24320                       00000002            _biosfn_write_teletype.car	set	2
24321                       00006373            biosfn_read_all_dac_reg:
24322 6373           50                           push ax
24323 6374           53                           push bx
24324 6375           51                           push cx
24325 6376           52                           push dx
24326 6377           BA                   03C7    mov dx, # 0x3c7
24327 637A           88D8                         mov al, bl
24328 637C           EE                           out dx, al
24329 637D           5A                           pop dx
24330 637E           52                           push dx
24331 637F           89D3                         mov bx, dx
24332 6381           BA                   03C9    mov dx, # 0x3c9
24333                       00006384            read_dac_loop:
24334 6384           EC                           in al, dx
24335 6385           26                           seg es
24336 6386           8807                         mov [bx], al
24337 6388           43                           inc bx
24338 6389           EC                           in al, dx
24339 638A           26                           seg es
24340 638B           8807                         mov [bx], al
24341 638D           43                           inc bx
24342 638E           EC                           in al, dx
24343 638F           26                           seg es
24344 6390           8807                         mov [bx], al
24345 6392           43                           inc bx
24346 6393           49                           dec cx
24347 6394           75           EE              jnz read_dac_loop
24348 6396           5A                           pop dx
24349 6397           59                           pop cx
24350 6398           5B                           pop bx
24351 6399           58                           pop ax
24352 639A           C3                           ret
24353                                           ! 3122 endasm
24354                                           !BCC_ENDASM
24355                                           ! 3123 #asm
24356                                           !BCC_ASM
24357                       00000008            _biosfn_write_teletype.flag	set	8
24358                       00000006            _biosfn_write_teletype.attr	set	6
24359                       00000004            _biosfn_write_teletype.page	set	4
24360                       00000002            _biosfn_write_teletype.car	set	2
24361                       0000639B            biosfn_set_pel_mask:
24362 639B           50                           push ax
24363 639C           52                           push dx
24364 639D           BA                   03C6    mov dx, # 0x3c6
24365 63A0           88D8                         mov al, bl
24366 63A2           EE                           out dx, al
24367 63A3           5A                           pop dx
24368 63A4           58                           pop ax
24369 63A5           C3                           ret
24370                                           ! 3133 endasm
24371                                           !BCC_ENDASM
24372                                           ! 3134 #asm
24373                                           !BCC_ASM
24374                       00000008            _biosfn_write_teletype.flag	set	8
24375                       00000006            _biosfn_write_teletype.attr	set	6
24376                       00000004            _biosfn_write_teletype.page	set	4
24377                       00000002            _biosfn_write_teletype.car	set	2
24378                       000063A6            biosfn_read_pel_mask:
24379 63A6           50                           push ax
24380 63A7           52                           push dx
24381 63A8           BA                   03C6    mov dx, # 0x3c6
24382 63AB           EC                           in al, dx
24383 63AC           88C3                         mov bl, al
24384 63AE           5A                           pop dx
24385 63AF           58                           pop ax
24386 63B0           C3                           ret
24387                                           ! 3144 endasm
24388                                           !BCC_ENDASM
24389                                           ! 3145 #asm
24390                                           !BCC_ASM
24391                       00000008            _biosfn_write_teletype.flag	set	8
24392                       00000006            _biosfn_write_teletype.attr	set	6
24393                       00000004            _biosfn_write_teletype.page	set	4
24394                       00000002            _biosfn_write_teletype.car	set	2
24395                       000063B1            biosfn_read_video_dac_state:
24396 63B1           50                           push ax
24397 63B2           52                           push dx
24398 63B3           BA                   03DA    mov dx, # 0x3da
24399 63B6           EC                           in al, dx
24400 63B7           BA                   03C0    mov dx, # 0x3c0
24401 63BA           B0                     10    mov al, #0x10
24402 63BC           EE                           out dx, al
24403 63BD           BA                   03C1    mov dx, # 0x3c1
24404 63C0           EC                           in al, dx
24405 63C1           88C3                         mov bl, al
24406 63C3           C0EB                   07    shr bl, 7
24407 63C6           BA                   03DA    mov dx, # 0x3da
24408 63C9           EC                           in al, dx
24409 63CA           BA                   03C0    mov dx, # 0x3c0
24410 63CD           B0                     14    mov al, #0x14
24411 63CF           EE                           out dx, al
24412 63D0           BA                   03C1    mov dx, # 0x3c1
24413 63D3           EC                           in al, dx
24414 63D4           88C7                         mov bh, al
24415 63D6           80E7                   0F    and bh, #0x0f
24416 63D9           F6C3                   01    test bl, #0x01
24417 63DC           75           03              jnz get_dac_16_page
24418 63DE           C0EF                   02    shr bh, 2
24419                       000063E1            get_dac_16_page:
24420 63E1           BA                   03DA    mov dx, # 0x3da
24421 63E4           EC                           in al, dx
24422 63E5           BA                   03C0    mov dx, # 0x3c0
24423 63E8           B0                     20    mov al, #0x20
24424 63EA           EE                           out dx, al
24425 63EB           5A                           pop dx
24426 63EC           58                           pop ax
24427 63ED           C3                           ret
24428                                           ! 3179 endasm
24429                                           !BCC_ENDASM
24430                                           ! 3180 static void biosfn_perform_gray_scale_summing (start,count)
24431                                           ! Register BX used in function biosfn_write_teletype
24432                                           ! 3181 Bit16u start;Bit16u count;
24433                       000063EE            _biosfn_perform_gray_scale_summing:
24434                                           !BCC_EOS
24435                                           !BCC_EOS
24436                                           ! 3182 {Bit8u r,g,b;
24437                                           !BCC_EOS
24438                                           ! 3183  Bit16u i;
24439                                           !BCC_EOS
24440                                           ! 3184  Bit16u index;
24441                                           !BCC_EOS
24442                                           ! 3185  inb(0x3da);
24443 63EE           55                         push	bp
24444 63EF           89E5                       mov	bp,sp
24445 63F1           83C4                   F8  add	sp,*-8
24446                                           ! Debug: list int = const $3DA (used reg = )
24447 63F4           B8                   03DA  mov	ax,#$3DA
24448 63F7           50                         push	ax
24449                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24450 63F8           E8         1750            call	_inb
24451 63FB           44                         inc	sp
24452 63FC           44                         inc	sp
24453                                           !BCC_EOS
24454                                           ! 3186  outb(0x3c0,0x00);
24455                                           ! Debug: list int = const 0 (used reg = )
24456 63FD           31C0                       xor	ax,ax
24457 63FF           50                         push	ax
24458                                           ! Debug: list int = const $3C0 (used reg = )
24459 6400           B8                   03C0  mov	ax,#$3C0
24460 6403           50                         push	ax
24461                                           ! Debug: func () void = outb+0 (used reg = )
24462 6404           E8         175A            call	_outb
24463 6407           83C4                   04  add	sp,*4
24464                                           !BCC_EOS
24465                                           ! 3187  for( index = 0; index < count; index++ )
24466                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24467 640A           31C0                       xor	ax,ax
24468 640C           8946         F8            mov	-8[bp],ax
24469                                           !BCC_EOS
24470                                           !BCC_EOS
24471                                           ! 3188   {
24472 640F           E9         00BE            br 	.1F7
24473                       00006412            .1F8:
24474                                           ! 3189    outb(0x3c7,start);
24475                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24476 6412           FF76         04            push	4[bp]
24477                                           ! Debug: list int = const $3C7 (used reg = )
24478 6415           B8                   03C7  mov	ax,#$3C7
24479 6418           50                         push	ax
24480                                           ! Debug: func () void = outb+0 (used reg = )
24481 6419           E8         1745            call	_outb
24482 641C           83C4                   04  add	sp,*4
24483                                           !BCC_EOS
24484                                           ! 3190    r=inb( 0x3c9 );
24485                                           ! Debug: list int = const $3C9 (used reg = )
24486 641F           B8                   03C9  mov	ax,#$3C9
24487 6422           50                         push	ax
24488                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24489 6423           E8         1725            call	_inb
24490 6426           44                         inc	sp
24491 6427           44                         inc	sp
24492                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24493 6428           8846         FF            mov	-1[bp],al
24494                                           !BCC_EOS
24495                                           ! 3191    g=inb( 0x3c9 );
24496                                           ! Debug: list int = const $3C9 (used reg = )
24497 642B           B8                   03C9  mov	ax,#$3C9
24498 642E           50                         push	ax
24499                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24500 642F           E8         1719            call	_inb
24501 6432           44                         inc	sp
24502 6433           44                         inc	sp
24503                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24504 6434           8846         FE            mov	-2[bp],al
24505                                           !BCC_EOS
24506                                           ! 3192    b=inb( 0x3c9 );
24507                                           ! Debug: list int = const $3C9 (used reg = )
24508 6437           B8                   03C9  mov	ax,#$3C9
24509 643A           50                         push	ax
24510                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24511 643B           E8         170D            call	_inb
24512 643E           44                         inc	sp
24513 643F           44                         inc	sp
24514                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24515 6440           8846         FD            mov	-3[bp],al
24516                                           !BCC_EOS
24517                                           ! 3193    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24518                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24519                                           ! Debug: expression subtree swapping
24520 6443           8A46         FD            mov	al,-3[bp]
24521 6446           30E4                       xor	ah,ah
24522 6448           B9                   001C  mov	cx,*$1C
24523 644B           F7E9                       imul	cx
24524 644D           50                         push	ax
24525                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24526                                           ! Debug: expression subtree swapping
24527 644E           8A46         FE            mov	al,-2[bp]
24528 6451           30E4                       xor	ah,ah
24529 6453           B9                   0097  mov	cx,#$97
24530 6456           F7E9                       imul	cx
24531 6458           50                         push	ax
24532                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24533                                           ! Debug: expression subtree swapping
24534 6459           8A46         FF            mov	al,-1[bp]
24535 645C           30E4                       xor	ah,ah
24536 645E           B9                   004D  mov	cx,*$4D
24537 6461           F7E9                       imul	cx
24538                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24539 6463           0346         F4            add	ax,-$C[bp]
24540 6466           44                         inc	sp
24541 6467           44                         inc	sp
24542                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24543 6468           0346         F6            add	ax,-$A[bp]
24544 646B           44                         inc	sp
24545 646C           44                         inc	sp
24546                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24547                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24548 646D           05                   0080  add	ax,#$80
24549 6470           88E0                       mov	al,ah
24550 6472           30E4                       xor	ah,ah
24551                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24552 6474           8946         FA            mov	-6[bp],ax
24553                                           !BCC_EOS
24554                                           ! 3194    if(i>0x3f)i=0x3f;
24555                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24556 6477           8B46         FA            mov	ax,-6[bp]
24557 647A           3D                   003F  cmp	ax,*$3F
24558 647D           76           06            jbe 	.1F9
24559                       0000647F            .1FA:
24560                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24561 647F           B8                   003F  mov	ax,*$3F
24562 6482           8946         FA            mov	-6[bp],ax
24563                                           !BCC_EOS
24564                                           ! 3195    outb(0x3c8,start);
24565                       00006485            .1F9:
24566                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24567 6485           FF76         04            push	4[bp]
24568                                           ! Debug: list int = const $3C8 (used reg = )
24569 6488           B8                   03C8  mov	ax,#$3C8
24570 648B           50                         push	ax
24571                                           ! Debug: func () void = outb+0 (used reg = )
24572 648C           E8         16D2            call	_outb
24573 648F           83C4                   04  add	sp,*4
24574                                           !BCC_EOS
24575                                           ! 3196    outb( 0x3c9, i&0xff );
24576                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24577 6492           8A46         FA            mov	al,-6[bp]
24578                                           ! Debug: list unsigned char = al+0 (used reg = )
24579 6495           30E4                       xor	ah,ah
24580 6497           50                         push	ax
24581                                           ! Debug: list int = const $3C9 (used reg = )
24582 6498           B8                   03C9  mov	ax,#$3C9
24583 649B           50                         push	ax
24584                                           ! Debug: func () void = outb+0 (used reg = )
24585 649C           E8         16C2            call	_outb
24586 649F           83C4                   04  add	sp,*4
24587                                           !BCC_EOS
24588                                           ! 3197    outb( 0x3c9, i&0xff );
24589                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24590 64A2           8A46         FA            mov	al,-6[bp]
24591                                           ! Debug: list unsigned char = al+0 (used reg = )
24592 64A5           30E4                       xor	ah,ah
24593 64A7           50                         push	ax
24594                                           ! Debug: list int = const $3C9 (used reg = )
24595 64A8           B8                   03C9  mov	ax,#$3C9
24596 64AB           50                         push	ax
24597                                           ! Debug: func () void = outb+0 (used reg = )
24598 64AC           E8         16B2            call	_outb
24599 64AF           83C4                   04  add	sp,*4
24600                                           !BCC_EOS
24601                                           ! 3198    outb( 0x3c9, i&0xff );
24602                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24603 64B2           8A46         FA            mov	al,-6[bp]
24604                                           ! Debug: list unsigned char = al+0 (used reg = )
24605 64B5           30E4                       xor	ah,ah
24606 64B7           50                         push	ax
24607                                           ! Debug: list int = const $3C9 (used reg = )
24608 64B8           B8                   03C9  mov	ax,#$3C9
24609 64BB           50                         push	ax
24610                                           ! Debug: func () void = outb+0 (used reg = )
24611 64BC           E8         16A2            call	_outb
24612 64BF           83C4                   04  add	sp,*4
24613                                           !BCC_EOS
24614                                           ! 3199    start++;
24615                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
24616 64C2           8B46         04            mov	ax,4[bp]
24617 64C5           40                         inc	ax
24618 64C6           8946         04            mov	4[bp],ax
24619                                           !BCC_EOS
24620                                           ! 3200   }
24621                                           ! 3201  inb(0x3da);
24622                       000064C9            .1F6:
24623                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
24624 64C9           8B46         F8            mov	ax,-8[bp]
24625 64CC           40                         inc	ax
24626 64CD           8946         F8            mov	-8[bp],ax
24627                       000064D0            .1F7:
24628                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
24629 64D0           8B46         F8            mov	ax,-8[bp]
24630 64D3           3B46         06            cmp	ax,6[bp]
24631 64D6         0F82         FF38            blo 	.1F8
24632                       000064DA            .1FB:
24633                       000064DA            .1F5:
24634                                           ! Debug: list int = const $3DA (used reg = )
24635 64DA           B8                   03DA  mov	ax,#$3DA
24636 64DD           50                         push	ax
24637                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24638 64DE           E8         166A            call	_inb
24639 64E1           44                         inc	sp
24640 64E2           44                         inc	sp
24641                                           !BCC_EOS
24642                                           ! 3202  outb(0x3c0,0x20);
24643                                           ! Debug: list int = const $20 (used reg = )
24644 64E3           B8                   0020  mov	ax,*$20
24645 64E6           50                         push	ax
24646                                           ! Debug: list int = const $3C0 (used reg = )
24647 64E7           B8                   03C0  mov	ax,#$3C0
24648 64EA           50                         push	ax
24649                                           ! Debug: func () void = outb+0 (used reg = )
24650 64EB           E8         1673            call	_outb
24651 64EE           83C4                   04  add	sp,*4
24652                                           !BCC_EOS
24653                                           ! 3203 }
24654 64F1           89EC                       mov	sp,bp
24655 64F3           5D                         pop	bp
24656 64F4           C3                         ret
24657                                           ! 3204 static void get_font_access()
24658                                           ! 3205 {
24659                       000064F5            _get_font_access:
24660                                           ! 3206 #asm
24661                                           !BCC_ASM
24662 64F5           BA                   03C4   mov dx, # 0x3c4
24663 64F8           B8                   0100   mov ax, #0x0100
24664 64FB           EF                          out dx, ax
24665 64FC           B8                   0402   mov ax, #0x0402
24666 64FF           EF                          out dx, ax
24667 6500           B8                   0704   mov ax, #0x0704
24668 6503           EF                          out dx, ax
24669 6504           B8                   0300   mov ax, #0x0300
24670 6507           EF                          out dx, ax
24671 6508           BA                   03CE   mov dx, # 0x3ce
24672 650B           B8                   0204   mov ax, #0x0204
24673 650E           EF                          out dx, ax
24674 650F           B8                   0005   mov ax, #0x0005
24675 6512           EF                          out dx, ax
24676 6513           B8                   0406   mov ax, #0x0406
24677 6516           EF                          out dx, ax
24678                                           ! 3223 endasm
24679                                           !BCC_ENDASM
24680                                           ! 3224 }
24681 6517           C3                         ret
24682                                           ! 3225 static void release_font_access()
24683                                           ! 3226 {
24684                       00006518            _release_font_access:
24685                                           ! 3227 #asm
24686                                           !BCC_ASM
24687 6518           BA                   03C4   mov dx, # 0x3c4
24688 651B           B8                   0100   mov ax, #0x0100
24689 651E           EF                          out dx, ax
24690 651F           B8                   0302   mov ax, #0x0302
24691 6522           EF                          out dx, ax
24692 6523           B8                   0304   mov ax, #0x0304
24693 6526           EF                          out dx, ax
24694 6527           B8                   0300   mov ax, #0x0300
24695 652A           EF                          out dx, ax
24696 652B           BA                   03CC   mov dx, # 0x3cc
24697 652E           EC                          in al, dx
24698 652F           24                     01   and al, #0x01
24699 6531           C0E0                   02   shl al, 2
24700 6534           0C                     0A   or al, #0x0a
24701 6536           88C4                        mov ah, al
24702 6538           B0                     06   mov al, #0x06
24703 653A           BA                   03CE   mov dx, # 0x3ce
24704 653D           EF                          out dx, ax
24705 653E           B8                   0004   mov ax, #0x0004
24706 6541           EF                          out dx, ax
24707 6542           B8                   1005   mov ax, #0x1005
24708 6545           EF                          out dx, ax
24709                                           ! 3250 endasm
24710                                           !BCC_ENDASM
24711                                           ! 3251 }
24712 6546           C3                         ret
24713                                           ! 3252 #asm
24714                                           !BCC_ASM
24715                       00006547            idiv_u:
24716 6547           31D2                         xor dx,dx
24717 6549           F7F3                         div bx
24718 654B           C3                           ret
24719                                           ! 3257 endasm
24720                                           !BCC_ENDASM
24721                                           ! 3258 static void set_scan_lines(lines) Bit8u lines;
24722                       0000654C            _set_scan_lines:
24723                                           !BCC_EOS
24724                                           ! 3259 {
24725                                           ! 3260  Bit16u crtc_addr,cols,page,vde;
24726                                           !BCC_EOS
24727                                           ! 3261  Bit8u crtc_r9,ovl,rows;
24728                                           !BCC_EOS
24729                                           ! 3262  crtc_addr = read_word(0x40,0x63);
24730 654C           55                         push	bp
24731 654D           89E5                       mov	bp,sp
24732 654F           83C4                   F4  add	sp,*-$C
24733                                           ! Debug: list int = const $63 (used reg = )
24734 6552           B8                   0063  mov	ax,*$63
24735 6555           50                         push	ax
24736                                           ! Debug: list int = const $40 (used reg = )
24737 6556           B8                   0040  mov	ax,*$40
24738 6559           50                         push	ax
24739                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24740 655A           E8         15AB            call	_read_word
24741 655D           83C4                   04  add	sp,*4
24742                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24743 6560           8946         FE            mov	-2[bp],ax
24744                                           !BCC_EOS
24745                                           ! 3263  outb(crtc_addr, 0x09);
24746                                           ! Debug: list int = const 9 (used reg = )
24747 6563           B8                   0009  mov	ax,*9
24748 6566           50                         push	ax
24749                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24750 6567           FF76         FE            push	-2[bp]
24751                                           ! Debug: func () void = outb+0 (used reg = )
24752 656A           E8         15F4            call	_outb
24753 656D           83C4                   04  add	sp,*4
24754                                           !BCC_EOS
24755                                           ! 3264  crtc_r9 = inb(crtc_addr+1);
24756                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24757 6570           8B46         FE            mov	ax,-2[bp]
24758                                           ! Debug: list unsigned int = ax+1 (used reg = )
24759 6573           40                         inc	ax
24760 6574           50                         push	ax
24761                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24762 6575           E8         15D3            call	_inb
24763 6578           44                         inc	sp
24764 6579           44                         inc	sp
24765                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24766 657A           8846         F7            mov	-9[bp],al
24767                                           !BCC_EOS
24768                                           ! 3265  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
24769                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
24770 657D           8A46         04            mov	al,4[bp]
24771 6580           30E4                       xor	ah,ah
24772 6582           48                         dec	ax
24773 6583           50                         push	ax
24774                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
24775 6584           8A46         F7            mov	al,-9[bp]
24776 6587           24                     E0  and	al,#$E0
24777                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
24778 6589           30E4                       xor	ah,ah
24779 658B           0B46         F2            or	ax,-$E[bp]
24780 658E           44                         inc	sp
24781 658F           44                         inc	sp
24782                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24783 6590           8846         F7            mov	-9[bp],al
24784                                           !BCC_EOS
24785                                           ! 3266  outb(crtc_addr+1, crtc_r9);
24786                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24787 6593           8A46         F7            mov	al,-9[bp]
24788 6596           30E4                       xor	ah,ah
24789 6598           50                         push	ax
24790                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
24791 6599           8B46         FE            mov	ax,-2[bp]
24792                                           ! Debug: list unsigned int = ax+1 (used reg = )
24793 659C           40                         inc	ax
24794 659D           50                         push	ax
24795                                           ! Debug: func () void = outb+0 (used reg = )
24796 659E           E8         15C0            call	_outb
24797 65A1           83C4                   04  add	sp,*4
24798                                           !BCC_EOS
24799                                           ! 3267  if(lines==8)
24800                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
24801 65A4           8A46         04            mov	al,4[bp]
24802 65A7           3C                     08  cmp	al,*8
24803 65A9           75           10            jne 	.1FC
24804                       000065AB            .1FD:
24805                                           ! 3268   {
24806                                           ! 3269    biosfn_set_cursor_shape(0x06,0x07);
24807                                           ! Debug: list int = const 7 (used reg = )
24808 65AB           B8                   0007  mov	ax,*7
24809 65AE           50                         push	ax
24810                                           ! Debug: list int = const 6 (used reg = )
24811 65AF           B8                   0006  mov	ax,*6
24812 65B2           50                         push	ax
24813                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24814 65B3           E8         DB85            call	_biosfn_set_cursor_shape
24815 65B6           83C4                   04  add	sp,*4
24816                                           !BCC_EOS
24817                                           ! 3270   }
24818                                           ! 3271  else
24819                                           ! 3272   {
24820 65B9           EB           18            jmp .1FE
24821                       000065BB            .1FC:
24822                                           ! 3273    biosfn_set_cursor_shape(lines-4,lines-3);
24823                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
24824 65BB           8A46         04            mov	al,4[bp]
24825 65BE           30E4                       xor	ah,ah
24826                                           ! Debug: list unsigned int = ax-3 (used reg = )
24827 65C0           05                   FFFD  add	ax,*-3
24828 65C3           50                         push	ax
24829                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
24830 65C4           8A46         04            mov	al,4[bp]
24831 65C7           30E4                       xor	ah,ah
24832                                           ! Debug: list unsigned int = ax-4 (used reg = )
24833 65C9           05                   FFFC  add	ax,*-4
24834 65CC           50                         push	ax
24835                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24836 65CD           E8         DB6B            call	_biosfn_set_cursor_shape
24837 65D0           83C4                   04  add	sp,*4
24838                                           !BCC_EOS
24839                                           ! 3274   }
24840                                           ! 3275  write_word(0x40,0x85, lines);
24841                       000065D3            .1FE:
24842                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
24843 65D3           8A46         04            mov	al,4[bp]
24844 65D6           30E4                       xor	ah,ah
24845 65D8           50                         push	ax
24846                                           ! Debug: list int = const $85 (used reg = )
24847 65D9           B8                   0085  mov	ax,#$85
24848 65DC           50                         push	ax
24849                                           ! Debug: list int = const $40 (used reg = )
24850 65DD           B8                   0040  mov	ax,*$40
24851 65E0           50                         push	ax
24852                                           ! Debug: func () void = write_word+0 (used reg = )
24853 65E1           E8         154F            call	_write_word
24854 65E4           83C4                   06  add	sp,*6
24855                                           !BCC_EOS
24856                                           ! 3276  outb(crtc_addr, 0x12);
24857                                           ! Debug: list int = const $12 (used reg = )
24858 65E7           B8                   0012  mov	ax,*$12
24859 65EA           50                         push	ax
24860                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24861 65EB           FF76         FE            push	-2[bp]
24862                                           ! Debug: func () void = outb+0 (used reg = )
24863 65EE           E8         1570            call	_outb
24864 65F1           83C4                   04  add	sp,*4
24865                                           !BCC_EOS
24866                                           ! 3277  vde = inb(crtc_addr+1);
24867                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24868 65F4           8B46         FE            mov	ax,-2[bp]
24869                                           ! Debug: list unsigned int = ax+1 (used reg = )
24870 65F7           40                         inc	ax
24871 65F8           50                         push	ax
24872                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24873 65F9           E8         154F            call	_inb
24874 65FC           44                         inc	sp
24875 65FD           44                         inc	sp
24876                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
24877 65FE           30E4                       xor	ah,ah
24878 6600           8946         F8            mov	-8[bp],ax
24879                                           !BCC_EOS
24880                                           ! 3278  outb(crtc_addr, 0x07);
24881                                           ! Debug: list int = const 7 (used reg = )
24882 6603           B8                   0007  mov	ax,*7
24883 6606           50                         push	ax
24884                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24885 6607           FF76         FE            push	-2[bp]
24886                                           ! Debug: func () void = outb+0 (used reg = )
24887 660A           E8         1554            call	_outb
24888 660D           83C4                   04  add	sp,*4
24889                                           !BCC_EOS
24890                                           ! 3279  ovl = inb(crtc_addr+1);
24891                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24892 6610           8B46         FE            mov	ax,-2[bp]
24893                                           ! Debug: list unsigned int = ax+1 (used reg = )
24894 6613           40                         inc	ax
24895 6614           50                         push	ax
24896                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24897 6615           E8         1533            call	_inb
24898 6618           44                         inc	sp
24899 6619           44                         inc	sp
24900                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
24901 661A           8846         F6            mov	-$A[bp],al
24902                                           !BCC_EOS
24903                                           ! 3280  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
24904                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
24905 661D           8A46         F6            mov	al,-$A[bp]
24906 6620           24                     40  and	al,*$40
24907                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
24908 6622           30E4                       xor	ah,ah
24909 6624           B1                     03  mov	cl,*3
24910 6626           D3E0                       shl	ax,cl
24911 6628           50                         push	ax
24912                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
24913 6629           8A46         F6            mov	al,-$A[bp]
24914 662C           24                     02  and	al,*2
24915                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
24916 662E           30E4                       xor	ah,ah
24917 6630           B1                     07  mov	cl,*7
24918 6632           D3E0                       shl	ax,cl
24919                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
24920 6634           0346         F2            add	ax,-$E[bp]
24921 6637           44                         inc	sp
24922 6638           44                         inc	sp
24923                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24924                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
24925 6639           40                         inc	ax
24926 663A           0346         F8            add	ax,-8[bp]
24927 663D           8946         F8            mov	-8[bp],ax
24928                                           !BCC_EOS
24929                                           ! 3281  rows = vde / lines;
24930                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
24931 6640           8A46         04            mov	al,4[bp]
24932 6643           30E4                       xor	ah,ah
24933 6645           89C3                       mov	bx,ax
24934 6647           8B46         F8            mov	ax,-8[bp]
24935 664A           E8         FEFA            call	idiv_u
24936                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
24937 664D           8846         F5            mov	-$B[bp],al
24938                                           !BCC_EOS
24939                                           ! 3282  write_byte(0x40,0x84, rows-1);
24940                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
24941 6650           8A46         F5            mov	al,-$B[bp]
24942 6653           30E4                       xor	ah,ah
24943                                           ! Debug: list unsigned int = ax-1 (used reg = )
24944 6655           48                         dec	ax
24945 6656           50                         push	ax
24946                                           ! Debug: list int = const $84 (used reg = )
24947 6657           B8                   0084  mov	ax,#$84
24948 665A           50                         push	ax
24949                                           ! Debug: list int = const $40 (used reg = )
24950 665B           B8                   0040  mov	ax,*$40
24951 665E           50                         push	ax
24952                                           ! Debug: func () void = write_byte+0 (used reg = )
24953 665F           E8         14B9            call	_write_byte
24954 6662           83C4                   06  add	sp,*6
24955                                           !BCC_EOS
24956                                           ! 3283  cols = read_word(0x40,0x4A);
24957                                           ! Debug: list int = const $4A (used reg = )
24958 6665           B8                   004A  mov	ax,*$4A
24959 6668           50                         push	ax
24960                                           ! Debug: list int = const $40 (used reg = )
24961 6669           B8                   0040  mov	ax,*$40
24962 666C           50                         push	ax
24963                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24964 666D           E8         1498            call	_read_word
24965 6670           83C4                   04  add	sp,*4
24966                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
24967 6673           8946         FC            mov	-4[bp],ax
24968                                           !BCC_EOS
24969                                           ! 3284  write_word(0x40,0x4C, rows * cols * 2);
24970                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
24971 6676           8A46         F5            mov	al,-$B[bp]
24972 6679           30E4                       xor	ah,ah
24973 667B           8B4E         FC            mov	cx,-4[bp]
24974 667E           F7E9                       imul	cx
24975                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24976 6680           D1E0                       shl	ax,*1
24977                                           ! Debug: list unsigned int = ax+0 (used reg = )
24978 6682           50                         push	ax
24979                                           ! Debug: list int = const $4C (used reg = )
24980 6683           B8                   004C  mov	ax,*$4C
24981 6686           50                         push	ax
24982                                           ! Debug: list int = const $40 (used reg = )
24983 6687           B8                   0040  mov	ax,*$40
24984 668A           50                         push	ax
24985                                           ! Debug: func () void = write_word+0 (used reg = )
24986 668B           E8         14A5            call	_write_word
24987 668E           83C4                   06  add	sp,*6
24988                                           !BCC_EOS
24989                                           ! 3285 }
24990 6691           89EC                       mov	sp,bp
24991 6693           5D                         pop	bp
24992 6694           C3                         ret
24993                                           ! 3286 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
24994                                           ! Register BX used in function set_scan_lines
24995                       00006695            _biosfn_load_text_user_pat:
24996                                           !BCC_EOS
24997                                           !BCC_EOS
24998                                           !BCC_EOS
24999                                           !BCC_EOS
25000                                           !BCC_EOS
25001                                           !BCC_EOS
25002                                           !BCC_EOS
25003                                           ! 3287 {
25004                                           ! 3288  Bit16u blockaddr,dest,i,src;
25005                                           !BCC_EOS
25006                                           ! 3289  get_font_access();
25007 6695           55                         push	bp
25008 6696           89E5                       mov	bp,sp
25009 6698           83C4                   F8  add	sp,*-8
25010                                           ! Debug: func () void = get_font_access+0 (used reg = )
25011 669B           E8         FE57            call	_get_font_access
25012                                           !BCC_EOS
25013                                           ! 3290  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25014                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25015 669E           8A46         0E            mov	al,$E[bp]
25016 66A1           24                     04  and	al,*4
25017                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25018 66A3           30E4                       xor	ah,ah
25019 66A5           88C4                       mov	ah,al
25020 66A7           30C0                       xor	al,al
25021 66A9           B1                     03  mov	cl,*3
25022 66AB           D3E0                       shl	ax,cl
25023 66AD           50                         push	ax
25024                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25025 66AE           8A46         0E            mov	al,$E[bp]
25026 66B1           24                     03  and	al,*3
25027                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25028 66B3           30E4                       xor	ah,ah
25029 66B5           88C4                       mov	ah,al
25030 66B7           30C0                       xor	al,al
25031 66B9           B1                     06  mov	cl,*6
25032 66BB           D3E0                       shl	ax,cl
25033                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25034 66BD           0346         F6            add	ax,-$A[bp]
25035 66C0           44                         inc	sp
25036 66C1           44                         inc	sp
25037                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25038 66C2           8946         FE            mov	-2[bp],ax
25039                                           !BCC_EOS
25040                                           ! 3291  for(i=0;i<CX;i++)
25041                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25042 66C5           31C0                       xor	ax,ax
25043 66C7           8946         FA            mov	-6[bp],ax
25044                                           !BCC_EOS
25045                                           !BCC_EOS
25046                                           ! 3292   {
25047 66CA           EB           44            jmp .201
25048                       000066CC            .202:
25049                                           ! 3293    src = BP + i * BH;
25050                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25051 66CC           8A46         10            mov	al,$10[bp]
25052 66CF           30E4                       xor	ah,ah
25053 66D1           89C3                       mov	bx,ax
25054 66D3           8B46         FA            mov	ax,-6[bp]
25055 66D6           89D9                       mov	cx,bx
25056 66D8           F7E9                       imul	cx
25057                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25058                                           ! Debug: expression subtree swapping
25059 66DA           0346         08            add	ax,8[bp]
25060                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25061 66DD           8946         F8            mov	-8[bp],ax
25062                                           !BCC_EOS
25063                                           ! 3294    dest = blockaddr + (DX + i) * 32;
25064                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25065 66E0           8B46         0C            mov	ax,$C[bp]
25066 66E3           0346         FA            add	ax,-6[bp]
25067                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25068 66E6           B1                     05  mov	cl,*5
25069 66E8           D3E0                       shl	ax,cl
25070                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25071                                           ! Debug: expression subtree swapping
25072 66EA           0346         FE            add	ax,-2[bp]
25073                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25074 66ED           8946         FC            mov	-4[bp],ax
25075                                           !BCC_EOS
25076                                           ! 3295    memcpyb(0xA000, dest, ES, src, BH);
25077                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25078 66F0           8A46         10            mov	al,$10[bp]
25079 66F3           30E4                       xor	ah,ah
25080 66F5           50                         push	ax
25081                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25082 66F6           FF76         F8            push	-8[bp]
25083                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25084 66F9           FF76         06            push	6[bp]
25085                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25086 66FC           FF76         FC            push	-4[bp]
25087                                           ! Debug: list unsigned int = const $A000 (used reg = )
25088 66FF           B8                   A000  mov	ax,#$A000
25089 6702           50                         push	ax
25090                                           ! Debug: func () void = memcpyb+0 (used reg = )
25091 6703           E8         138F            call	_memcpyb
25092 6706           83C4                   0A  add	sp,*$A
25093                                           !BCC_EOS
25094                                           ! 3296   }
25095                                           ! 3297  release_font_access();
25096                       00006709            .200:
25097                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25098 6709           8B46         FA            mov	ax,-6[bp]
25099 670C           40                         inc	ax
25100 670D           8946         FA            mov	-6[bp],ax
25101                       00006710            .201:
25102                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25103 6710           8B46         FA            mov	ax,-6[bp]
25104 6713           3B46         0A            cmp	ax,$A[bp]
25105 6716           72           B4            jb 	.202
25106                       00006718            .203:
25107                       00006718            .1FF:
25108                                           ! Debug: func () void = release_font_access+0 (used reg = )
25109 6718           E8         FDFD            call	_release_font_access
25110                                           !BCC_EOS
25111                                           ! 3298  if(AL>=0x10)
25112                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25113 671B           8A46         04            mov	al,4[bp]
25114 671E           3C                     10  cmp	al,*$10
25115 6720           72           0B            jb  	.204
25116                       00006722            .205:
25117                                           ! 3299   {
25118                                           ! 3300    set_scan_lines(BH);
25119                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25120 6722           8A46         10            mov	al,$10[bp]
25121 6725           30E4                       xor	ah,ah
25122 6727           50                         push	ax
25123                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25124 6728           E8         FE21            call	_set_scan_lines
25125 672B           44                         inc	sp
25126 672C           44                         inc	sp
25127                                           !BCC_EOS
25128                                           ! 3301   }
25129                                           ! 3302 }
25130                       0000672D            .204:
25131 672D           89EC                       mov	sp,bp
25132 672F           5D                         pop	bp
25133 6730           C3                         ret
25134                                           ! 3303 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25135                                           ! Register BX used in function biosfn_load_text_user_pat
25136                       00006731            _biosfn_load_text_8_14_pat:
25137                                           !BCC_EOS
25138                                           !BCC_EOS
25139                                           ! 3304 {
25140                                           ! 3305  Bit16u blockaddr,dest,i,src;
25141                                           !BCC_EOS
25142                                           ! 3306  get_font_access();
25143 6731           55                         push	bp
25144 6732           89E5                       mov	bp,sp
25145 6734           83C4                   F8  add	sp,*-8
25146                                           ! Debug: func () void = get_font_access+0 (used reg = )
25147 6737           E8         FDBB            call	_get_font_access
25148                                           !BCC_EOS
25149                                           ! 3307  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25150                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25151 673A           8A46         06            mov	al,6[bp]
25152 673D           24                     04  and	al,*4
25153                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25154 673F           30E4                       xor	ah,ah
25155 6741           88C4                       mov	ah,al
25156 6743           30C0                       xor	al,al
25157 6745           B1                     03  mov	cl,*3
25158 6747           D3E0                       shl	ax,cl
25159 6749           50                         push	ax
25160                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25161 674A           8A46         06            mov	al,6[bp]
25162 674D           24                     03  and	al,*3
25163                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25164 674F           30E4                       xor	ah,ah
25165 6751           88C4                       mov	ah,al
25166 6753           30C0                       xor	al,al
25167 6755           B1                     06  mov	cl,*6
25168 6757           D3E0                       shl	ax,cl
25169                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25170 6759           0346         F6            add	ax,-$A[bp]
25171 675C           44                         inc	sp
25172 675D           44                         inc	sp
25173                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25174 675E           8946         FE            mov	-2[bp],ax
25175                                           !BCC_EOS
25176                                           ! 3308  for(i=0;i<0x100;i++)
25177                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25178 6761           31C0                       xor	ax,ax
25179 6763           8946         FA            mov	-6[bp],ax
25180                                           !BCC_EOS
25181                                           !BCC_EOS
25182                                           ! 3309   {
25183 6766           EB           41            jmp .208
25184                       00006768            .209:
25185                                           ! 3310    src = i * 14;
25186                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25187 6768           8B46         FA            mov	ax,-6[bp]
25188 676B           89C2                       mov	dx,ax
25189 676D           B1                     03  mov	cl,*3
25190 676F           D3E0                       shl	ax,cl
25191 6771           29D0                       sub	ax,dx
25192 6773           D1E0                       shl	ax,*1
25193                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25194 6775           8946         F8            mov	-8[bp],ax
25195                                           !BCC_EOS
25196                                           ! 3311    dest = blockaddr + i * 32;
25197                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25198 6778           8B46         FA            mov	ax,-6[bp]
25199 677B           B1                     05  mov	cl,*5
25200 677D           D3E0                       shl	ax,cl
25201                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25202                                           ! Debug: expression subtree swapping
25203 677F           0346         FE            add	ax,-2[bp]
25204                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25205 6782           8946         FC            mov	-4[bp],ax
25206                                           !BCC_EOS
25207                                           ! 3312    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25208                                           ! Debug: list int = const $E (used reg = )
25209 6785           B8                   000E  mov	ax,*$E
25210 6788           50                         push	ax
25211                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25212 6789           8B5E         F8            mov	bx,-8[bp]
25213                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25214                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25215 678C           81C3                 1737  add	bx,#_vgafont14
25216 6790           53                         push	bx
25217                                           ! Debug: list unsigned int = const $C000 (used reg = )
25218 6791           B8                   C000  mov	ax,#$C000
25219 6794           50                         push	ax
25220                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25221 6795           FF76         FC            push	-4[bp]
25222                                           ! Debug: list unsigned int = const $A000 (used reg = )
25223 6798           B8                   A000  mov	ax,#$A000
25224 679B           50                         push	ax
25225                                           ! Debug: func () void = memcpyb+0 (used reg = )
25226 679C           E8         12F6            call	_memcpyb
25227 679F           83C4                   0A  add	sp,*$A
25228                                           !BCC_EOS
25229                                           ! 3313  
25230                                           ! 3313  }
25231                                           ! 3314  release_font_access();
25232                       000067A2            .207:
25233                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25234 67A2           8B46         FA            mov	ax,-6[bp]
25235 67A5           40                         inc	ax
25236 67A6           8946         FA            mov	-6[bp],ax
25237                       000067A9            .208:
25238                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25239 67A9           8B46         FA            mov	ax,-6[bp]
25240 67AC           3D                   0100  cmp	ax,#$100
25241 67AF           72           B7            jb 	.209
25242                       000067B1            .20A:
25243                       000067B1            .206:
25244                                           ! Debug: func () void = release_font_access+0 (used reg = )
25245 67B1           E8         FD64            call	_release_font_access
25246                                           !BCC_EOS
25247                                           ! 3315  if(AL>=0x10)
25248                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25249 67B4           8A46         04            mov	al,4[bp]
25250 67B7           3C                     10  cmp	al,*$10
25251 67B9           72           09            jb  	.20B
25252                       000067BB            .20C:
25253                                           ! 3316   {
25254                                           ! 3317    set_scan_lines(14);
25255                                           ! Debug: list int = const $E (used reg = )
25256 67BB           B8                   000E  mov	ax,*$E
25257 67BE           50                         push	ax
25258                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25259 67BF           E8         FD8A            call	_set_scan_lines
25260 67C2           44                         inc	sp
25261 67C3           44                         inc	sp
25262                                           !BCC_EOS
25263                                           ! 3318   }
25264                                           ! 3319 }
25265                       000067C4            .20B:
25266 67C4           89EC                       mov	sp,bp
25267 67C6           5D                         pop	bp
25268 67C7           C3                         ret
25269                                           ! 3320 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25270                                           ! Register BX used in function biosfn_load_text_8_14_pat
25271                       000067C8            _biosfn_load_text_8_8_pat:
25272                                           !BCC_EOS
25273                                           !BCC_EOS
25274                                           ! 3321 {
25275                                           ! 3322  Bit16u blockaddr,dest,i,src;
25276                                           !BCC_EOS
25277                                           ! 3323  get_font_access();
25278 67C8           55                         push	bp
25279 67C9           89E5                       mov	bp,sp
25280 67CB           83C4                   F8  add	sp,*-8
25281                                           ! Debug: func () void = get_font_access+0 (used reg = )
25282 67CE           E8         FD24            call	_get_font_access
25283                                           !BCC_EOS
25284                                           ! 3324  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25285                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25286 67D1           8A46         06            mov	al,6[bp]
25287 67D4           24                     04  and	al,*4
25288                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25289 67D6           30E4                       xor	ah,ah
25290 67D8           88C4                       mov	ah,al
25291 67DA           30C0                       xor	al,al
25292 67DC           B1                     03  mov	cl,*3
25293 67DE           D3E0                       shl	ax,cl
25294 67E0           50                         push	ax
25295                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25296 67E1           8A46         06            mov	al,6[bp]
25297 67E4           24                     03  and	al,*3
25298                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25299 67E6           30E4                       xor	ah,ah
25300 67E8           88C4                       mov	ah,al
25301 67EA           30C0                       xor	al,al
25302 67EC           B1                     06  mov	cl,*6
25303 67EE           D3E0                       shl	ax,cl
25304                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25305 67F0           0346         F6            add	ax,-$A[bp]
25306 67F3           44                         inc	sp
25307 67F4           44                         inc	sp
25308                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25309 67F5           8946         FE            mov	-2[bp],ax
25310                                           !BCC_EOS
25311                                           ! 3325  for(i=0;i<0x100;i++)
25312                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25313 67F8           31C0                       xor	ax,ax
25314 67FA           8946         FA            mov	-6[bp],ax
25315                                           !BCC_EOS
25316                                           !BCC_EOS
25317                                           ! 3326   {
25318 67FD           EB           3B            jmp .20F
25319                       000067FF            .210:
25320                                           ! 3327    src = i * 8;
25321                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25322 67FF           8B46         FA            mov	ax,-6[bp]
25323 6802           B1                     03  mov	cl,*3
25324 6804           D3E0                       shl	ax,cl
25325                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25326 6806           8946         F8            mov	-8[bp],ax
25327                                           !BCC_EOS
25328                                           ! 3328    dest = blockaddr + i * 32;
25329                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25330 6809           8B46         FA            mov	ax,-6[bp]
25331 680C           B1                     05  mov	cl,*5
25332 680E           D3E0                       shl	ax,cl
25333                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25334                                           ! Debug: expression subtree swapping
25335 6810           0346         FE            add	ax,-2[bp]
25336                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25337 6813           8946         FC            mov	-4[bp],ax
25338                                           !BCC_EOS
25339                                           ! 3329    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25340                                           ! Debug: list int = const 8 (used reg = )
25341 6816           B8                   0008  mov	ax,*8
25342 6819           50                         push	ax
25343                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25344 681A           8B5E         F8            mov	bx,-8[bp]
25345                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25346                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25347 681D           81C3                 0F37  add	bx,#_vgafont8
25348 6821           53                         push	bx
25349                                           ! Debug: list unsigned int = const $C000 (used reg = )
25350 6822           B8                   C000  mov	ax,#$C000
25351 6825           50                         push	ax
25352                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25353 6826           FF76         FC            push	-4[bp]
25354                                           ! Debug: list unsigned int = const $A000 (used reg = )
25355 6829           B8                   A000  mov	ax,#$A000
25356 682C           50                         push	ax
25357                                           ! Debug: func () void = memcpyb+0 (used reg = )
25358 682D           E8         1265            call	_memcpyb
25359 6830           83C4                   0A  add	sp,*$A
25360                                           !BCC_EOS
25361                                           ! 3330   }
25362                                           ! 3331  release_font_access();
25363                       00006833            .20E:
25364                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25365 6833           8B46         FA            mov	ax,-6[bp]
25366 6836           40                         inc	ax
25367 6837           8946         FA            mov	-6[bp],ax
25368                       0000683A            .20F:
25369                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25370 683A           8B46         FA            mov	ax,-6[bp]
25371 683D           3D                   0100  cmp	ax,#$100
25372 6840           72           BD            jb 	.210
25373                       00006842            .211:
25374                       00006842            .20D:
25375                                           ! Debug: func () void = release_font_access+0 (used reg = )
25376 6842           E8         FCD3            call	_release_font_access
25377                                           !BCC_EOS
25378                                           ! 3332  if(AL>=0x10)
25379                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25380 6845           8A46         04            mov	al,4[bp]
25381 6848           3C                     10  cmp	al,*$10
25382 684A           72           09            jb  	.212
25383                       0000684C            .213:
25384                                           ! 3333   {
25385                                           ! 3334    set_scan_lines(8);
25386                                           ! Debug: list int = const 8 (used reg = )
25387 684C           B8                   0008  mov	ax,*8
25388 684F           50                         push	ax
25389                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25390 6850           E8         FCF9            call	_set_scan_lines
25391 6853           44                         inc	sp
25392 6854           44                         inc	sp
25393                                           !BCC_EOS
25394                                           ! 3335   }
25395                                           ! 3336 }
25396                       00006855            .212:
25397 6855           89EC                       mov	sp,bp
25398 6857           5D                         pop	bp
25399 6858           C3                         ret
25400                                           ! 3337 #asm
25401                                           !BCC_ASM
25402                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25403                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25404                       00006859            biosfn_set_text_block_specifier:
25405 6859           50                           push ax
25406 685A           52                           push dx
25407 685B           BA                   03C4    mov dx, # 0x3c4
25408 685E           88DC                         mov ah, bl
25409 6860           B0                     03    mov al, #0x03
25410 6862           EF                           out dx, ax
25411 6863           5A                           pop dx
25412 6864           58                           pop ax
25413 6865           C3                           ret
25414                                           ! 3348 endasm
25415                                           !BCC_ENDASM
25416                                           ! 3349 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25417                                           ! Register BX used in function biosfn_load_text_8_8_pat
25418                       00006866            _biosfn_load_text_8_16_pat:
25419                                           !BCC_EOS
25420                                           !BCC_EOS
25421                                           ! 3350 {
25422                                           ! 3351  Bit16u blockaddr,dest,i,src;
25423                                           !BCC_EOS
25424                                           ! 3352  get_font_access();
25425 6866           55                         push	bp
25426 6867           89E5                       mov	bp,sp
25427 6869           83C4                   F8  add	sp,*-8
25428                                           ! Debug: func () void = get_font_access+0 (used reg = )
25429 686C           E8         FC86            call	_get_font_access
25430                                           !BCC_EOS
25431                                           ! 3353  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25432                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25433 686F           8A46         06            mov	al,6[bp]
25434 6872           24                     04  and	al,*4
25435                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25436 6874           30E4                       xor	ah,ah
25437 6876           88C4                       mov	ah,al
25438 6878           30C0                       xor	al,al
25439 687A           B1                     03  mov	cl,*3
25440 687C           D3E0                       shl	ax,cl
25441 687E           50                         push	ax
25442                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25443 687F           8A46         06            mov	al,6[bp]
25444 6882           24                     03  and	al,*3
25445                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25446 6884           30E4                       xor	ah,ah
25447 6886           88C4                       mov	ah,al
25448 6888           30C0                       xor	al,al
25449 688A           B1                     06  mov	cl,*6
25450 688C           D3E0                       shl	ax,cl
25451                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25452 688E           0346         F6            add	ax,-$A[bp]
25453 6891           44                         inc	sp
25454 6892           44                         inc	sp
25455                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25456 6893           8946         FE            mov	-2[bp],ax
25457                                           !BCC_EOS
25458                                           ! 3354  for(i=0;i<0x100;i++)
25459                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25460 6896           31C0                       xor	ax,ax
25461 6898           8946         FA            mov	-6[bp],ax
25462                                           !BCC_EOS
25463                                           !BCC_EOS
25464                                           ! 3355   {
25465 689B           EB           3B            jmp .216
25466                       0000689D            .217:
25467                                           ! 3356    src = i * 16;
25468                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25469 689D           8B46         FA            mov	ax,-6[bp]
25470 68A0           B1                     04  mov	cl,*4
25471 68A2           D3E0                       shl	ax,cl
25472                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25473 68A4           8946         F8            mov	-8[bp],ax
25474                                           !BCC_EOS
25475                                           ! 3357    dest = blockaddr + i * 32;
25476                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25477 68A7           8B46         FA            mov	ax,-6[bp]
25478 68AA           B1                     05  mov	cl,*5
25479 68AC           D3E0                       shl	ax,cl
25480                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25481                                           ! Debug: expression subtree swapping
25482 68AE           0346         FE            add	ax,-2[bp]
25483                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25484 68B1           8946         FC            mov	-4[bp],ax
25485                                           !BCC_EOS
25486                                           ! 3358    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25487                                           ! Debug: list int = const $10 (used reg = )
25488 68B4           B8                   0010  mov	ax,*$10
25489 68B7           50                         push	ax
25490                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25491 68B8           8B5E         F8            mov	bx,-8[bp]
25492                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25493                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25494 68BB           81C3                 2537  add	bx,#_vgafont16
25495 68BF           53                         push	bx
25496                                           ! Debug: list unsigned int = const $C000 (used reg = )
25497 68C0           B8                   C000  mov	ax,#$C000
25498 68C3           50                         push	ax
25499                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25500 68C4           FF76         FC            push	-4[bp]
25501                                           ! Debug: list unsigned int = const $A000 (used reg = )
25502 68C7           B8                   A000  mov	ax,#$A000
25503 68CA           50                         push	ax
25504                                           ! Debug: func () void = memcpyb+0 (used reg = )
25505 68CB           E8         11C7            call	_memcpyb
25506 68CE           83C4                   0A  add	sp,*$A
25507                                           !BCC_EOS
25508                                           ! 3359   }
25509                                           ! 3360  release_font_access();
25510                       000068D1            .215:
25511                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25512 68D1           8B46         FA            mov	ax,-6[bp]
25513 68D4           40                         inc	ax
25514 68D5           8946         FA            mov	-6[bp],ax
25515                       000068D8            .216:
25516                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25517 68D8           8B46         FA            mov	ax,-6[bp]
25518 68DB           3D                   0100  cmp	ax,#$100
25519 68DE           72           BD            jb 	.217
25520                       000068E0            .218:
25521                       000068E0            .214:
25522                                           ! Debug: func () void = release_font_access+0 (used reg = )
25523 68E0           E8         FC35            call	_release_font_access
25524                                           !BCC_EOS
25525                                           ! 3361  if(AL>=0x10)
25526                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25527 68E3           8A46         04            mov	al,4[bp]
25528 68E6           3C                     10  cmp	al,*$10
25529 68E8           72           09            jb  	.219
25530                       000068EA            .21A:
25531                                           ! 3362   {
25532                                           ! 3363    set_scan_lines(16);
25533                                           ! Debug: list int = const $10 (used reg = )
25534 68EA           B8                   0010  mov	ax,*$10
25535 68ED           50                         push	ax
25536                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25537 68EE           E8         FC5B            call	_set_scan_lines
25538 68F1           44                         inc	sp
25539 68F2           44                         inc	sp
25540                                           !BCC_EOS
25541                                           ! 3364   }
25542                                           ! 3365 }
25543                       000068F3            .219:
25544 68F3           89EC                       mov	sp,bp
25545 68F5           5D                         pop	bp
25546 68F6           C3                         ret
25547                                           ! 3366 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25548                                           ! Register BX used in function biosfn_load_text_8_16_pat
25549                       000068F7            _biosfn_load_gfx_8_8_chars:
25550                                           !BCC_EOS
25551                                           !BCC_EOS
25552                                           ! 3367 {
25553                                           ! 3368 }
25554 68F7           C3                         ret
25555                                           ! 3369 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25556                       000068F8            _biosfn_load_gfx_user_chars:
25557                                           !BCC_EOS
25558                                           !BCC_EOS
25559                                           !BCC_EOS
25560                                           !BCC_EOS
25561                                           !BCC_EOS
25562                                           ! 3370 {
25563                                           ! 3371 }
25564 68F8           C3                         ret
25565                                           ! 3372 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25566                       000068F9            _biosfn_load_gfx_8_14_chars:
25567                                           !BCC_EOS
25568                                           ! 3373 {
25569                                           ! 3374 }
25570 68F9           C3                         ret
25571                                           ! 3375 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
25572                       000068FA            _biosfn_load_gfx_8_8_dd_chars:
25573                                           !BCC_EOS
25574                                           ! 3376 {
25575                                           ! 3377 }
25576 68FA           C3                         ret
25577                                           ! 3378 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
25578                       000068FB            _biosfn_load_gfx_8_16_chars:
25579                                           !BCC_EOS
25580                                           ! 3379 {
25581                                           ! 3380 }
25582 68FB           C3                         ret
25583                                           ! 3381 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
25584                                           ! 3382 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
25585                       000068FC            _biosfn_get_font_info:
25586                                           !BCC_EOS
25587                                           !BCC_EOS
25588                                           !BCC_EOS
25589                                           !BCC_EOS
25590                                           !BCC_EOS
25591                                           ! 3383 {Bit16u ss=get_SS();
25592 68FC           55                         push	bp
25593 68FD           89E5                       mov	bp,sp
25594 68FF           4C                         dec	sp
25595 6900           4C                         dec	sp
25596                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
25597 6901           E8         127D            call	_get_SS
25598                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
25599 6904           8946         FE            mov	-2[bp],ax
25600                                           !BCC_EOS
25601                                           ! 3384  switch(BH)
25602 6907           8A46         04            mov	al,4[bp]
25603                                           ! 3385   {case 0x00:
25604 690A           E9         0143            br 	.21D
25605                                           ! 3386     write_word(ss,ES,read_word(0x00,0x1f*4));
25606                       0000690D            .21E:
25607                                           ! Debug: list int = const $7C (used reg = )
25608 690D           B8                   007C  mov	ax,*$7C
25609 6910           50                         push	ax
25610                                           ! Debug: list int = const 0 (used reg = )
25611 6911           31C0                       xor	ax,ax
25612 6913           50                         push	ax
25613                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25614 6914           E8         11F1            call	_read_word
25615 6917           83C4                   04  add	sp,*4
25616                                           ! Debug: list unsigned short = ax+0 (used reg = )
25617 691A           50                         push	ax
25618                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25619 691B           FF76         06            push	6[bp]
25620                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25621 691E           FF76         FE            push	-2[bp]
25622                                           ! Debug: func () void = write_word+0 (used reg = )
25623 6921           E8         120F            call	_write_word
25624 6924           83C4                   06  add	sp,*6
25625                                           !BCC_EOS
25626                                           ! 3387     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
25627                                           ! Debug: list int = const $7E (used reg = )
25628 6927           B8                   007E  mov	ax,*$7E
25629 692A           50                         push	ax
25630                                           ! Debug: list int = const 0 (used reg = )
25631 692B           31C0                       xor	ax,ax
25632 692D           50                         push	ax
25633                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25634 692E           E8         11D7            call	_read_word
25635 6931           83C4                   04  add	sp,*4
25636                                           ! Debug: list unsigned short = ax+0 (used reg = )
25637 6934           50                         push	ax
25638                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25639 6935           FF76         08            push	8[bp]
25640                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25641 6938           FF76         FE            push	-2[bp]
25642                                           ! Debug: func () void = write_word+0 (used reg = )
25643 693B           E8         11F5            call	_write_word
25644 693E           83C4                   06  add	sp,*6
25645                                           !BCC_EOS
25646                                           ! 3388     break;
25647 6941           E9         0131            br 	.21B
25648                                           !BCC_EOS
25649                                           ! 3389    case 0x01:
25650                                           ! 3390     write_word(ss,ES,read_word(0x00,0x43*4));
25651                       00006944            .21F:
25652                                           ! Debug: list int = const $10C (used reg = )
25653 6944           B8                   010C  mov	ax,#$10C
25654 6947           50                         push	ax
25655                                           ! Debug: list int = const 0 (used reg = )
25656 6948           31C0                       xor	ax,ax
25657 694A           50                         push	ax
25658                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25659 694B           E8         11BA            call	_read_word
25660 694E           83C4                   04  add	sp,*4
25661                                           ! Debug: list unsigned short = ax+0 (used reg = )
25662 6951           50                         push	ax
25663                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25664 6952           FF76         06            push	6[bp]
25665                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25666 6955           FF76         FE            push	-2[bp]
25667                                           ! Debug: func () void = write_word+0 (used reg = )
25668 6958           E8         11D8            call	_write_word
25669 695B           83C4                   06  add	sp,*6
25670                                           !BCC_EOS
25671                                           ! 3391     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
25672                                           ! Debug: list int = const $10E (used reg = )
25673 695E           B8                   010E  mov	ax,#$10E
25674 6961           50                         push	ax
25675                                           ! Debug: list int = const 0 (used reg = )
25676 6962           31C0                       xor	ax,ax
25677 6964           50                         push	ax
25678                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25679 6965           E8         11A0            call	_read_word
25680 6968           83C4                   04  add	sp,*4
25681                                           ! Debug: list unsigned short = ax+0 (used reg = )
25682 696B           50                         push	ax
25683                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25684 696C           FF76         08            push	8[bp]
25685                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25686 696F           FF76         FE            push	-2[bp]
25687                                           ! Debug: func () void = write_word+0 (used reg = )
25688 6972           E8         11BE            call	_write_word
25689 6975           83C4                   06  add	sp,*6
25690                                           !BCC_EOS
25691                                           ! 3392     break;
25692 6978           E9         00FA            br 	.21B
25693                                           !BCC_EOS
25694                                           ! 3393    case 0x02:
25695                                           ! 3394     write_word(ss,ES,0xC000);
25696                       0000697B            .220:
25697                                           ! Debug: list unsigned int = const $C000 (used reg = )
25698 697B           B8                   C000  mov	ax,#$C000
25699 697E           50                         push	ax
25700                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25701 697F           FF76         06            push	6[bp]
25702                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25703 6982           FF76         FE            push	-2[bp]
25704                                           ! Debug: func () void = write_word+0 (used reg = )
25705 6985           E8         11AB            call	_write_word
25706 6988           83C4                   06  add	sp,*6
25707                                           !BCC_EOS
25708                                           ! 3395     write_word(ss,BP,vgafont14);
25709                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
25710 698B           BB                   1737  mov	bx,#_vgafont14
25711 698E           53                         push	bx
25712                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25713 698F           FF76         08            push	8[bp]
25714                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25715 6992           FF76         FE            push	-2[bp]
25716                                           ! Debug: func () void = write_word+0 (used reg = )
25717 6995           E8         119B            call	_write_word
25718 6998           83C4                   06  add	sp,*6
25719                                           !BCC_EOS
25720                                           ! 3396     break;
25721 699B           E9         00D7            br 	.21B
25722                                           !BCC_EOS
25723                                           ! 3397    case 0x03:
25724                                           ! 3398     write_word(ss,ES,0xC000);
25725                       0000699E            .221:
25726                                           ! Debug: list unsigned int = const $C000 (used reg = )
25727 699E           B8                   C000  mov	ax,#$C000
25728 69A1           50                         push	ax
25729                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25730 69A2           FF76         06            push	6[bp]
25731                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25732 69A5           FF76         FE            push	-2[bp]
25733                                           ! Debug: func () void = write_word+0 (used reg = )
25734 69A8           E8         1188            call	_write_word
25735 69AB           83C4                   06  add	sp,*6
25736                                           !BCC_EOS
25737                                           ! 3399     write_word(ss,BP,vgafont8);
25738                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
25739 69AE           BB                   0F37  mov	bx,#_vgafont8
25740 69B1           53                         push	bx
25741                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25742 69B2           FF76         08            push	8[bp]
25743                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25744 69B5           FF76         FE            push	-2[bp]
25745                                           ! Debug: func () void = write_word+0 (used reg = )
25746 69B8           E8         1178            call	_write_word
25747 69BB           83C4                   06  add	sp,*6
25748                                           !BCC_EOS
25749                                           ! 3400     break;
25750 69BE           E9         00B4            br 	.21B
25751                                           !BCC_EOS
25752                                           ! 3401    case 0x04:
25753                                           ! 3402     write_word(ss,ES,0xC000);
25754                       000069C1            .222:
25755                                           ! Debug: list unsigned int = const $C000 (used reg = )
25756 69C1           B8                   C000  mov	ax,#$C000
25757 69C4           50                         push	ax
25758                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25759 69C5           FF76         06            push	6[bp]
25760                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25761 69C8           FF76         FE            push	-2[bp]
25762                                           ! Debug: func () void = write_word+0 (used reg = )
25763 69CB           E8         1165            call	_write_word
25764 69CE           83C4                   06  add	sp,*6
25765                                           !BCC_EOS
25766                                           ! 3403     write_word(ss,BP,vgafont8+128*8);
25767                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
25768 69D1           BB                   1337  mov	bx,#_vgafont8+$400
25769 69D4           53                         push	bx
25770                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25771 69D5           FF76         08            push	8[bp]
25772                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25773 69D8           FF76         FE            push	-2[bp]
25774                                           ! Debug: func () void = write_word+0 (used reg = )
25775 69DB           E8         1155            call	_write_word
25776 69DE           83C4                   06  add	sp,*6
25777                                           !BCC_EOS
25778                                           ! 3404     break;
25779 69E1           E9         0091            br 	.21B
25780                                           !BCC_EOS
25781                                           ! 3405    case 0x05:
25782                                           ! 3406     write_word(ss,ES,0xC000);
25783                       000069E4            .223:
25784                                           ! Debug: list unsigned int = const $C000 (used reg = )
25785 69E4           B8                   C000  mov	ax,#$C000
25786 69E7           50                         push	ax
25787                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25788 69E8           FF76         06            push	6[bp]
25789                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25790 69EB           FF76         FE            push	-2[bp]
25791                                           ! Debug: func () void = write_word+0 (used reg = )
25792 69EE           E8         1142            call	_write_word
25793 69F1           83C4                   06  add	sp,*6
25794                                           !BCC_EOS
25795                                           ! 3407     write_word(ss,BP,vgafont14alt)
25796                                           ! 3407 ;
25797                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
25798 69F4           BB                   3537  mov	bx,#_vgafont14alt
25799 69F7           53                         push	bx
25800                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25801 69F8           FF76         08            push	8[bp]
25802                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25803 69FB           FF76         FE            push	-2[bp]
25804                                           ! Debug: func () void = write_word+0 (used reg = )
25805 69FE           E8         1132            call	_write_word
25806 6A01           83C4                   06  add	sp,*6
25807                                           !BCC_EOS
25808                                           ! 3408     break;
25809 6A04           EB           6F            jmp .21B
25810                                           !BCC_EOS
25811                                           ! 3409    case 0x06:
25812                                           ! 3410     write_word(ss,ES,0xC000);
25813                       00006A06            .224:
25814                                           ! Debug: list unsigned int = const $C000 (used reg = )
25815 6A06           B8                   C000  mov	ax,#$C000
25816 6A09           50                         push	ax
25817                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25818 6A0A           FF76         06            push	6[bp]
25819                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25820 6A0D           FF76         FE            push	-2[bp]
25821                                           ! Debug: func () void = write_word+0 (used reg = )
25822 6A10           E8         1120            call	_write_word
25823 6A13           83C4                   06  add	sp,*6
25824                                           !BCC_EOS
25825                                           ! 3411     write_word(ss,BP,vgafont16);
25826                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
25827 6A16           BB                   2537  mov	bx,#_vgafont16
25828 6A19           53                         push	bx
25829                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25830 6A1A           FF76         08            push	8[bp]
25831                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25832 6A1D           FF76         FE            push	-2[bp]
25833                                           ! Debug: func () void = write_word+0 (used reg = )
25834 6A20           E8         1110            call	_write_word
25835 6A23           83C4                   06  add	sp,*6
25836                                           !BCC_EOS
25837                                           ! 3412     break;
25838 6A26           EB           4D            jmp .21B
25839                                           !BCC_EOS
25840                                           ! 3413    case 0x07:
25841                                           ! 3414     write_word(ss,ES,0xC000);
25842                       00006A28            .225:
25843                                           ! Debug: list unsigned int = const $C000 (used reg = )
25844 6A28           B8                   C000  mov	ax,#$C000
25845 6A2B           50                         push	ax
25846                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25847 6A2C           FF76         06            push	6[bp]
25848                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25849 6A2F           FF76         FE            push	-2[bp]
25850                                           ! Debug: func () void = write_word+0 (used reg = )
25851 6A32           E8         10FE            call	_write_word
25852 6A35           83C4                   06  add	sp,*6
25853                                           !BCC_EOS
25854                                           ! 3415     write_word(ss,BP,vgafont16alt);
25855                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
25856 6A38           BB                   3538  mov	bx,#_vgafont16alt
25857 6A3B           53                         push	bx
25858                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25859 6A3C           FF76         08            push	8[bp]
25860                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25861 6A3F           FF76         FE            push	-2[bp]
25862                                           ! Debug: func () void = write_word+0 (used reg = )
25863 6A42           E8         10EE            call	_write_word
25864 6A45           83C4                   06  add	sp,*6
25865                                           !BCC_EOS
25866                                           ! 3416     break;
25867 6A48           EB           2B            jmp .21B
25868                                           !BCC_EOS
25869                                           ! 3417    default:
25870                                           ! 3418     return;
25871                       00006A4A            .226:
25872 6A4A           89EC                       mov	sp,bp
25873 6A4C           5D                         pop	bp
25874 6A4D           C3                         ret
25875                                           !BCC_EOS
25876                                           ! 3419   }
25877                                           ! 3420  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
25878 6A4E           EB           25            jmp .21B
25879                       00006A50            .21D:
25880 6A50           2C                     00  sub	al,*0
25881 6A52           72           F6            jb 	.226
25882 6A54           3C                     07  cmp	al,*7
25883 6A56           77           1B            ja  	.227
25884 6A58           30E4                       xor	ah,ah
25885 6A5A           D1E0                       shl	ax,*1
25886 6A5C           89C3                       mov	bx,ax
25887 6A5E           2E                         seg	cs
25888 6A5F           FFA7       6A63            br	.228[bx]
25889                       00006A63            .228:
25890 6A63                      690D            .word	.21E
25891 6A65                      6944            .word	.21F
25892 6A67                      697B            .word	.220
25893 6A69                      699E            .word	.221
25894 6A6B                      69C1            .word	.222
25895 6A6D                      69E4            .word	.223
25896 6A6F                      6A06            .word	.224
25897 6A71                      6A28            .word	.225
25898                       00006A73            .227:
25899 6A73           EB           D5            jmp	.226
25900                       00006A75            .21B:
25901                       FFFFFFFC            ..FFF5	=	-4
25902                                           ! Debug: list int = const $85 (used reg = )
25903 6A75           B8                   0085  mov	ax,#$85
25904 6A78           50                         push	ax
25905                                           ! Debug: list int = const $40 (used reg = )
25906 6A79           B8                   0040  mov	ax,*$40
25907 6A7C           50                         push	ax
25908                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25909 6A7D           E8         1075            call	_read_byte
25910 6A80           83C4                   04  add	sp,*4
25911                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25912 6A83           30E4                       xor	ah,ah
25913                                           ! Debug: list unsigned short = ax+0 (used reg = )
25914 6A85           50                         push	ax
25915                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
25916 6A86           FF76         0A            push	$A[bp]
25917                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25918 6A89           FF76         FE            push	-2[bp]
25919                                           ! Debug: func () void = write_word+0 (used reg = )
25920 6A8C           E8         10A4            call	_write_word
25921 6A8F           83C4                   06  add	sp,*6
25922                                           !BCC_EOS
25923                                           ! 3421  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
25924                                           ! Debug: list int = const $84 (used reg = )
25925 6A92           B8                   0084  mov	ax,#$84
25926 6A95           50                         push	ax
25927                                           ! Debug: list int = const $40 (used reg = )
25928 6A96           B8                   0040  mov	ax,*$40
25929 6A99           50                         push	ax
25930                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25931 6A9A           E8         1058            call	_read_byte
25932 6A9D           83C4                   04  add	sp,*4
25933                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25934 6AA0           30E4                       xor	ah,ah
25935                                           ! Debug: list unsigned short = ax+0 (used reg = )
25936 6AA2           50                         push	ax
25937                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
25938 6AA3           FF76         0C            push	$C[bp]
25939                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25940 6AA6           FF76         FE            push	-2[bp]
25941                                           ! Debug: func () void = write_word+0 (used reg = )
25942 6AA9           E8         1087            call	_write_word
25943 6AAC           83C4                   06  add	sp,*6
25944                                           !BCC_EOS
25945                                           ! 3422 }
25946 6AAF           89EC                       mov	sp,bp
25947 6AB1           5D                         pop	bp
25948 6AB2           C3                         ret
25949                                           ! 3423 #asm
25950                                           !BCC_ASM
25951                       00000006            _biosfn_get_font_info.BP	set	6
25952                       00000002            _biosfn_get_font_info.BH	set	2
25953                       00000008            _biosfn_get_font_info.CX	set	8
25954                       0000000A            _biosfn_get_font_info.DX	set	$A
25955                       00000004            _biosfn_get_font_info.ES	set	4
25956                       00006AB3            biosfn_get_ega_info:
25957 6AB3           1E                           push ds
25958 6AB4           50                           push ax
25959 6AB5           B8                   0040    mov ax, # 0x40
25960 6AB8           8ED8                         mov ds, ax
25961 6ABA           30ED                         xor ch, ch
25962 6ABC           BB                   0088    mov bx, # 0x88
25963 6ABF           8A0F                         mov cl, [bx]
25964 6AC1           80E1                   0F    and cl, #0x0f
25965 6AC4           BB                   0063    mov bx, # 0x63
25966 6AC7           8B07                         mov ax, [bx]
25967 6AC9           BB                   0003    mov bx, #0x0003
25968 6ACC           3D                   03B4    cmp ax, # 0x3b4
25969 6ACF           75           02              jne mode_ega_color
25970 6AD1           B7                     01    mov bh, #0x01
25971                       00006AD3            mode_ega_color:
25972 6AD3           58                           pop ax
25973 6AD4           1F                           pop ds
25974 6AD5           C3                           ret
25975                                           ! 3443 endasm
25976                                           !BCC_ENDASM
25977                                           ! 3444 static void biosfn_alternate_prtsc()
25978                                           ! Register BX used in function biosfn_get_font_info
25979                                           ! 3445 {
25980                       00006AD6            _biosfn_alternate_prtsc:
25981                                           ! 3446 }
25982 6AD6           C3                         ret
25983                                           ! 3447 #asm
25984                                           !BCC_ASM
25985                       00006AD7            biosfn_select_vert_res:
25986                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
25987 6AD7           1E                           push ds
25988 6AD8           53                           push bx
25989 6AD9           52                           push dx
25990 6ADA           88C2                         mov dl, al
25991 6ADC           B8                   0040    mov ax, # 0x40
25992 6ADF           8ED8                         mov ds, ax
25993 6AE1           BB                   0089    mov bx, # 0x89
25994 6AE4           8A07                         mov al, [bx]
25995 6AE6           BB                   0088    mov bx, # 0x88
25996 6AE9           8A27                         mov ah, [bx]
25997 6AEB           80FA                   01    cmp dl, #0x01
25998 6AEE           74           15              je vert_res_350
25999 6AF0           72           1D              jb vert_res_200
26000 6AF2           80FA                   02    cmp dl, #0x02
26001 6AF5           74           02              je vert_res_400
26002 6AF7           EB           2A              jmp set_retcode
26003                       00006AF9            vert_res_400:
26004                                             ; reset modeset ctl bit 7 and set bit 4
26005                                             ; set switches bit 3-0 to 0x09
26006 6AF9           24                     7F    and al, #0x7f
26007 6AFB           0C                     10    or al, #0x10
26008 6AFD           80E4                   F0    and ah, #0xf0
26009 6B00           80CC                   09    or ah, #0x09
26010 6B03           75           14              jnz set_vert_res
26011                       00006B05            vert_res_350:
26012                                             ; reset modeset ctl bit 7 and bit 4
26013                                             ; set switches bit 3-0 to 0x09
26014 6B05           24                     6F    and al, #0x6f
26015 6B07           80E4                   F0    and ah, #0xf0
26016 6B0A           80CC                   09    or ah, #0x09
26017 6B0D           75           0A              jnz set_vert_res
26018                       00006B0F            vert_res_200:
26019                                             ; set modeset ctl bit 7 and reset bit 4
26020                                             ; set switches bit 3-0 to 0x08
26021 6B0F           24                     EF    and al, #0xef
26022 6B11           0C                     80    or al, #0x80
26023 6B13           80E4                   F0    and ah, #0xf0
26024 6B16           80CC                   08    or ah, #0x08
26025                       00006B19            set_vert_res:
26026 6B19           BB                   0089    mov bx, # 0x89
26027 6B1C           8807                         mov [bx], al
26028 6B1E           BB                   0088    mov bx, # 0x88
26029 6B21           8827                         mov [bx], ah
26030                       00006B23            set_retcode:
26031 6B23           B8                   1212    mov ax, #0x1212
26032 6B26           5A                           pop dx
26033 6B27           5B                           pop bx
26034 6B28           1F                           pop ds
26035 6B29           C3                           ret
26036                       00006B2A            biosfn_enable_default_palette_loading:
26037 6B2A           1E                           push ds
26038 6B2B           53                           push bx
26039 6B2C           52                           push dx
26040 6B2D           88C2                         mov dl, al
26041 6B2F           80E2                   01    and dl, #0x01
26042 6B32           C0E2                   03    shl dl, 3
26043 6B35           B8                   0040    mov ax, # 0x40
26044 6B38           8ED8                         mov ds, ax
26045 6B3A           BB                   0089    mov bx, # 0x89
26046 6B3D           8A07                         mov al, [bx]
26047 6B3F           24                     F7    and al, #0xf7
26048 6B41           08D0                         or al, dl
26049 6B43           8807                         mov [bx], al
26050 6B45           B8                   1212    mov ax, #0x1212
26051 6B48           5A                           pop dx
26052 6B49           5B                           pop bx
26053 6B4A           1F                           pop ds
26054 6B4B           C3                           ret
26055                       00006B4C            biosfn_enable_video_addressing:
26056 6B4C           53                           push bx
26057 6B4D           52                           push dx
26058 6B4E           88C3                         mov bl, al
26059 6B50           80E3                   01    and bl, #0x01
26060 6B53           80F3                   01    xor bl, #0x01
26061 6B56           D0E3                         shl bl, 1
26062 6B58           BA                   03CC    mov dx, # 0x3cc
26063 6B5B           EC                           in al, dx
26064 6B5C           24                     FD    and al, #0xfd
26065 6B5E           08D8                         or al, bl
26066 6B60           BA                   03C2    mov dx, # 0x3c2
26067 6B63           EE                           out dx, al
26068 6B64           B8                   1212    mov ax, #0x1212
26069 6B67           5A                           pop dx
26070 6B68           5B                           pop bx
26071 6B69           C3                           ret
26072                       00006B6A            biosfn_enable_grayscale_summing:
26073 6B6A           1E                           push ds
26074 6B6B           53                           push bx
26075 6B6C           52                           push dx
26076 6B6D           88C2                         mov dl, al
26077 6B6F           80E2                   01    and dl, #0x01
26078 6B72           80F2                   01    xor dl, #0x01
26079 6B75           D0E2                         shl dl, 1
26080 6B77           B8                   0040    mov ax, # 0x40
26081 6B7A           8ED8                         mov ds, ax
26082 6B7C           BB                   0089    mov bx, # 0x89
26083 6B7F           8A07                         mov al, [bx]
26084 6B81           24                     FD    and al, #0xfd
26085 6B83           08D0                         or al, dl
26086 6B85           8807                         mov [bx], al
26087 6B87           B8                   1212    mov ax, #0x1212
26088 6B8A           5A                           pop dx
26089 6B8B           5B                           pop bx
26090 6B8C           1F                           pop ds
26091 6B8D           C3                           ret
26092                       00006B8E            biosfn_enable_cursor_emulation:
26093 6B8E           1E                           push ds
26094 6B8F           53                           push bx
26095 6B90           52                           push dx
26096 6B91           88C2                         mov dl, al
26097 6B93           80E2                   01    and dl, #0x01
26098 6B96           80F2                   01    xor dl, #0x01
26099 6B99           B8                   0040    mov ax, # 0x40
26100 6B9C           8ED8                         mov ds, ax
26101 6B9E           BB                   0089    mov bx, # 0x89
26102 6BA1           8A07                         mov al, [bx]
26103 6BA3           24                     FE    and al, #0xfe
26104 6BA5           08D0                         or al, dl
26105 6BA7           8807                         mov [bx], al
26106 6BA9           B8                   1212    mov ax, #0x1212
26107 6BAC           5A                           pop dx
26108 6BAD           5B                           pop bx
26109 6BAE           1F                           pop ds
26110 6BAF           C3                           ret
26111                                           ! 3574 endasm
26112                                           !BCC_ENDASM
26113                                           ! 3575 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26114                       00006BB0            _biosfn_switch_video_interface:
26115                                           !BCC_EOS
26116                                           !BCC_EOS
26117                                           !BCC_EOS
26118                                           ! 3576 {
26119                                           ! 3577 }
26120 6BB0           C3                         ret
26121                                           ! 3578 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26122                       00006BB1            _biosfn_enable_video_refresh_control:
26123                                           !BCC_EOS
26124                                           ! 3579 {
26125                                           ! 3580 }
26126 6BB1           C3                         ret
26127                                           ! 3581 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26128                                           ! 3582 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26129                       00006BB2            _biosfn_write_string:
26130                                           !BCC_EOS
26131                                           !BCC_EOS
26132                                           !BCC_EOS
26133                                           !BCC_EOS
26134                                           !BCC_EOS
26135                                           !BCC_EOS
26136                                           !BCC_EOS
26137                                           !BCC_EOS
26138                                           ! 3583 {
26139                                           ! 3584  Bit16u newcurs,oldcurs,dummy;
26140                                           !BCC_EOS
26141                                           ! 3585  Bit8u car,carattr;
26142                                           !BCC_EOS
26143                                           ! 3586  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26144 6BB2           55                         push	bp
26145 6BB3           89E5                       mov	bp,sp
26146 6BB5           83C4                   F8  add	sp,*-8
26147                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26148 6BB8           8D5E         FC            lea	bx,-4[bp]
26149 6BBB           53                         push	bx
26150                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26151 6BBC           8D5E         FA            lea	bx,-6[bp]
26152 6BBF           53                         push	bx
26153                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26154 6BC0           8A46         06            mov	al,6[bp]
26155 6BC3           30E4                       xor	ah,ah
26156 6BC5           50                         push	ax
26157                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26158 6BC6           E8         D78D            call	_biosfn_get_cursor_pos
26159 6BC9           83C4                   06  add	sp,*6
26160                                           !BCC_EOS
26161                                           ! 3587  if(row==0xff)
26162                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26163 6BCC           8A46         0C            mov	al,$C[bp]
26164 6BCF           3C                     FF  cmp	al,#$FF
26165 6BD1           75           12            jne 	.229
26166                       00006BD3            .22A:
26167                                           ! 3588   {col=oldcurs&0x00ff;
26168                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26169 6BD3           8A46         FC            mov	al,-4[bp]
26170                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26171 6BD6           8846         0E            mov	$E[bp],al
26172                                           !BCC_EOS
26173                                           ! 3589    row=(oldcurs&0xff00)>>8;
26174                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26175 6BD9           8B46         FC            mov	ax,-4[bp]
26176 6BDC           30C0                       xor	al,al
26177                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26178 6BDE           88E0                       mov	al,ah
26179 6BE0           30E4                       xor	ah,ah
26180                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26181 6BE2           8846         0C            mov	$C[bp],al
26182                                           !BCC_EOS
26183                                           ! 3590   }
26184                                           ! 3591  newcurs=row; newcurs<<=8; newcurs+=col;
26185                       00006BE5            .229:
26186                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26187 6BE5           8A46         0C            mov	al,$C[bp]
26188 6BE8           30E4                       xor	ah,ah
26189 6BEA           8946         FE            mov	-2[bp],ax
26190                                           !BCC_EOS
26191                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26192 6BED           8B46         FE            mov	ax,-2[bp]
26193 6BF0           88C4                       mov	ah,al
26194 6BF2           30C0                       xor	al,al
26195 6BF4           8946         FE            mov	-2[bp],ax
26196                                           !BCC_EOS
26197                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26198 6BF7           8B46         FE            mov	ax,-2[bp]
26199 6BFA           0246         0E            add	al,$E[bp]
26200 6BFD           80D4                   00  adc	ah,*0
26201 6C00           8946         FE            mov	-2[bp],ax
26202                                           !BCC_EOS
26203                                           ! 3592  biosfn_set_cursor_pos(page,newcurs);
26204                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26205 6C03           FF76         FE            push	-2[bp]
26206                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26207 6C06           8A46         06            mov	al,6[bp]
26208 6C09           30E4                       xor	ah,ah
26209 6C0B           50                         push	ax
26210                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26211 6C0C           E8         D647            call	_biosfn_set_cursor_pos
26212 6C0F           83C4                   04  add	sp,*4
26213                                           !BCC_EOS
26214                                           ! 3593  while(count--!=0)
26215                                           ! 3594   {
26216 6C12           EB           4F            jmp .22C
26217                       00006C14            .22D:
26218                                           ! 3595    car=read_byte(seg,offset++);
26219                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26220 6C14           8B46         12            mov	ax,$12[bp]
26221 6C17           40                         inc	ax
26222 6C18           8946         12            mov	$12[bp],ax
26223                                           ! Debug: list unsigned short = ax-1 (used reg = )
26224 6C1B           48                         dec	ax
26225 6C1C           50                         push	ax
26226                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26227 6C1D           FF76         10            push	$10[bp]
26228                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26229 6C20           E8         0ED2            call	_read_byte
26230 6C23           83C4                   04  add	sp,*4
26231                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26232 6C26           8846         F9            mov	-7[bp],al
26233                                           !BCC_EOS
26234                                           ! 3596    if((flag&0x02)!=0)
26235                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26236 6C29           8A46         04            mov	al,4[bp]
26237 6C2C           24                     02  and	al,*2
26238                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26239 6C2E           84C0                       test	al,al
26240 6C30           74           15            je  	.22E
26241                       00006C32            .22F:
26242                                           ! 3597     attr=read_byte(seg,offset++);
26243                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26244 6C32           8B46         12            mov	ax,$12[bp]
26245 6C35           40                         inc	ax
26246 6C36           8946         12            mov	$12[bp],ax
26247                                           ! Debug: list unsigned short = ax-1 (used reg = )
26248 6C39           48                         dec	ax
26249 6C3A           50                         push	ax
26250                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26251 6C3B           FF76         10            push	$10[bp]
26252                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26253 6C3E           E8         0EB4            call	_read_byte
26254 6C41           83C4                   04  add	sp,*4
26255                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26256 6C44           8846         08            mov	8[bp],al
26257                                           !BCC_EOS
26258                                           ! 3598    biosfn_write_teletype(car,page,attr,3);
26259                       00006C47            .22E:
26260                                           ! Debug: list int = const 3 (used reg = )
26261 6C47           B8                   0003  mov	ax,*3
26262 6C4A           50                         push	ax
26263                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26264 6C4B           8A46         08            mov	al,8[bp]
26265 6C4E           30E4                       xor	ah,ah
26266 6C50           50                         push	ax
26267                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26268 6C51           8A46         06            mov	al,6[bp]
26269 6C54           30E4                       xor	ah,ah
26270 6C56           50                         push	ax
26271                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26272 6C57           8A46         F9            mov	al,-7[bp]
26273 6C5A           30E4                       xor	ah,ah
26274 6C5C           50                         push	ax
26275                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26276 6C5D           E8         F13D            call	_biosfn_write_teletype
26277 6C60           83C4                   08  add	sp,*8
26278                                           !BCC_EOS
26279                                           ! 3599   }
26280                                           ! 3600  if((flag&0x01)==0)
26281                       00006C63            .22C:
26282                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26283 6C63           8B46         0A            mov	ax,$A[bp]
26284 6C66           48                         dec	ax
26285 6C67           8946         0A            mov	$A[bp],ax
26286                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26287 6C6A           3D                   FFFF  cmp	ax,*-1
26288 6C6D           75           A5            jne	.22D
26289                       00006C6F            .230:
26290                       00006C6F            .22B:
26291                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26292 6C6F           8A46         04            mov	al,4[bp]
26293 6C72           24                     01  and	al,*1
26294                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26295 6C74           84C0                       test	al,al
26296 6C76           75           0F            jne 	.231
26297                       00006C78            .232:
26298                                           ! 3601   biosfn_set_cursor_pos(page,oldcurs);
26299                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26300 6C78           FF76         FC            push	-4[bp]
26301                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26302 6C7B           8A46         06            mov	al,6[bp]
26303 6C7E           30E4                       xor	ah,ah
26304 6C80           50                         push	ax
26305                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26306 6C81           E8         D5D2            call	_biosfn_set_cursor_pos
26307 6C84           83C4                   04  add	sp,*4
26308                                           !BCC_EOS
26309                                           ! 3602 }
26310                       00006C87            .231:
26311 6C87           89EC                       mov	sp,bp
26312 6C89           5D                         pop	bp
26313 6C8A           C3                         ret
26314                                           ! 3603 #asm
26315                                           !BCC_ASM
26316                       00000008            _biosfn_write_string.count	set	8
26317                       0000000E            _biosfn_write_string.seg	set	$E
26318                       0000000C            _biosfn_write_string.col	set	$C
26319                       00000002            _biosfn_write_string.flag	set	2
26320                       00000006            _biosfn_write_string.attr	set	6
26321                       00000004            _biosfn_write_string.page	set	4
26322                       0000000A            _biosfn_write_string.row	set	$A
26323                       00000010            _biosfn_write_string.offset	set	$10
26324                       00006C8B            biosfn_group_1A:
26325 6C8B           3C                     00    cmp al, #0x00
26326 6C8D           74           05              je biosfn_read_display_code
26327 6C8F           3C                     01    cmp al, #0x01
26328 6C91           74           16              je biosfn_set_display_code
26329 6C93           C3                           ret
26330                       00006C94            biosfn_read_display_code:
26331 6C94           1E                           push ds
26332 6C95           50                           push ax
26333 6C96           B8                   0040    mov ax, # 0x40
26334 6C99           8ED8                         mov ds, ax
26335 6C9B           BB                   008A    mov bx, # 0x8A
26336 6C9E           8A07                         mov al, [bx]
26337 6CA0           88C3                         mov bl, al
26338 6CA2           30FF                         xor bh, bh
26339 6CA4           58                           pop ax
26340 6CA5           88E0                         mov al, ah
26341 6CA7           1F                           pop ds
26342 6CA8           C3                           ret
26343                       00006CA9            biosfn_set_display_code:
26344 6CA9           1E                           push ds
26345 6CAA           50                           push ax
26346 6CAB           53                           push bx
26347 6CAC           B8                   0040    mov ax, # 0x40
26348 6CAF           8ED8                         mov ds, ax
26349 6CB1           89D8                         mov ax, bx
26350 6CB3           BB                   008A    mov bx, # 0x8A
26351 6CB6           8807                         mov [bx], al
26352 6CB8           5B                           pop bx
26353 6CB9           58                           pop ax
26354 6CBA           88E0                         mov al, ah
26355 6CBC           1F                           pop ds
26356 6CBD           C3                           ret
26357                                           ! 3637 endasm
26358                                           !BCC_ENDASM
26359                                           ! 3638 static void biosfn_read_state_info (BX,ES,DI)
26360                                           ! Register BX used in function biosfn_write_string
26361                                           ! 3639 Bit16u BX;Bit16u ES;Bit16u DI;
26362                       00006CBE            _biosfn_read_state_info:
26363                                           !BCC_EOS
26364                                           !BCC_EOS
26365                                           !BCC_EOS
26366                                           ! 3640 {
26367                                           ! 3641  write_word(ES,DI+0x00,&static_functionality);
26368 6CBE           55                         push	bp
26369 6CBF           89E5                       mov	bp,sp
26370                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26371 6CC1           BB                   0F27  mov	bx,#_static_functionality
26372 6CC4           53                         push	bx
26373                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26374 6CC5           8B46         08            mov	ax,8[bp]
26375                                           ! Debug: list unsigned int = ax+0 (used reg = )
26376 6CC8           50                         push	ax
26377                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26378 6CC9           FF76         06            push	6[bp]
26379                                           ! Debug: func () void = write_word+0 (used reg = )
26380 6CCC           E8         0E64            call	_write_word
26381 6CCF           89EC                       mov	sp,bp
26382                                           !BCC_EOS
26383                                           ! 3642  write_word(ES,DI+0x02,0xC000);
26384                                           ! Debug: list unsigned int = const $C000 (used reg = )
26385 6CD1           B8                   C000  mov	ax,#$C000
26386 6CD4           50                         push	ax
26387                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26388 6CD5           8B46         08            mov	ax,8[bp]
26389                                           ! Debug: list unsigned int = ax+2 (used reg = )
26390 6CD8           40                         inc	ax
26391 6CD9           40                         inc	ax
26392 6CDA           50                         push	ax
26393                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26394 6CDB           FF76         06            push	6[bp]
26395                                           ! Debug: func () void = write_word+0 (used reg = )
26396 6CDE           E8         0E52            call	_write_word
26397 6CE1           89EC                       mov	sp,bp
26398                                           !BCC_EOS
26399                                           ! 3643  memcpyb(ES,DI+0x04,0x40,0x49,30);
26400                                           ! Debug: list int = const $1E (used reg = )
26401 6CE3           B8                   001E  mov	ax,*$1E
26402 6CE6           50                         push	ax
26403                                           ! Debug: list int = const $49 (used reg = )
26404 6CE7           B8                   0049  mov	ax,*$49
26405 6CEA           50                         push	ax
26406                                           ! Debug: list int = const $40 (used reg = )
26407 6CEB           B8                   0040  mov	ax,*$40
26408 6CEE           50                         push	ax
26409                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26410 6CEF           8B46         08            mov	ax,8[bp]
26411                                           ! Debug: list unsigned int = ax+4 (used reg = )
26412 6CF2           05                   0004  add	ax,*4
26413 6CF5           50                         push	ax
26414                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26415 6CF6           FF76         06            push	6[bp]
26416                                           ! Debug: func () void = memcpyb+0 (used reg = )
26417 6CF9           E8         0D99            call	_memcpyb
26418 6CFC           89EC                       mov	sp,bp
26419                                           !BCC_EOS
26420                                           ! 3644  memc
26421                                           ! 3644 pyb(ES,DI+0x22,0x40,0x84,3);
26422                                           ! Debug: list int = const 3 (used reg = )
26423 6CFE           B8                   0003  mov	ax,*3
26424 6D01           50                         push	ax
26425                                           ! Debug: list int = const $84 (used reg = )
26426 6D02           B8                   0084  mov	ax,#$84
26427 6D05           50                         push	ax
26428                                           ! Debug: list int = const $40 (used reg = )
26429 6D06           B8                   0040  mov	ax,*$40
26430 6D09           50                         push	ax
26431                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26432 6D0A           8B46         08            mov	ax,8[bp]
26433                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26434 6D0D           05                   0022  add	ax,*$22
26435 6D10           50                         push	ax
26436                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26437 6D11           FF76         06            push	6[bp]
26438                                           ! Debug: func () void = memcpyb+0 (used reg = )
26439 6D14           E8         0D7E            call	_memcpyb
26440 6D17           89EC                       mov	sp,bp
26441                                           !BCC_EOS
26442                                           ! 3645  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26443                                           ! Debug: list int = const $8A (used reg = )
26444 6D19           B8                   008A  mov	ax,#$8A
26445 6D1C           50                         push	ax
26446                                           ! Debug: list int = const $40 (used reg = )
26447 6D1D           B8                   0040  mov	ax,*$40
26448 6D20           50                         push	ax
26449                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26450 6D21           E8         0DD1            call	_read_byte
26451 6D24           89EC                       mov	sp,bp
26452                                           ! Debug: list unsigned char = al+0 (used reg = )
26453 6D26           30E4                       xor	ah,ah
26454 6D28           50                         push	ax
26455                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26456 6D29           8B46         08            mov	ax,8[bp]
26457                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26458 6D2C           05                   0025  add	ax,*$25
26459 6D2F           50                         push	ax
26460                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26461 6D30           FF76         06            push	6[bp]
26462                                           ! Debug: func () void = write_byte+0 (used reg = )
26463 6D33           E8         0DE5            call	_write_byte
26464 6D36           89EC                       mov	sp,bp
26465                                           !BCC_EOS
26466                                           ! 3646  write_byte(ES,DI+0x26,0);
26467                                           ! Debug: list int = const 0 (used reg = )
26468 6D38           31C0                       xor	ax,ax
26469 6D3A           50                         push	ax
26470                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26471 6D3B           8B46         08            mov	ax,8[bp]
26472                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26473 6D3E           05                   0026  add	ax,*$26
26474 6D41           50                         push	ax
26475                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26476 6D42           FF76         06            push	6[bp]
26477                                           ! Debug: func () void = write_byte+0 (used reg = )
26478 6D45           E8         0DD3            call	_write_byte
26479 6D48           89EC                       mov	sp,bp
26480                                           !BCC_EOS
26481                                           ! 3647  write_byte(ES,DI+0x27,16);
26482                                           ! Debug: list int = const $10 (used reg = )
26483 6D4A           B8                   0010  mov	ax,*$10
26484 6D4D           50                         push	ax
26485                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26486 6D4E           8B46         08            mov	ax,8[bp]
26487                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26488 6D51           05                   0027  add	ax,*$27
26489 6D54           50                         push	ax
26490                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26491 6D55           FF76         06            push	6[bp]
26492                                           ! Debug: func () void = write_byte+0 (used reg = )
26493 6D58           E8         0DC0            call	_write_byte
26494 6D5B           89EC                       mov	sp,bp
26495                                           !BCC_EOS
26496                                           ! 3648  write_byte(ES,DI+0x28,0);
26497                                           ! Debug: list int = const 0 (used reg = )
26498 6D5D           31C0                       xor	ax,ax
26499 6D5F           50                         push	ax
26500                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26501 6D60           8B46         08            mov	ax,8[bp]
26502                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26503 6D63           05                   0028  add	ax,*$28
26504 6D66           50                         push	ax
26505                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26506 6D67           FF76         06            push	6[bp]
26507                                           ! Debug: func () void = write_byte+0 (used reg = )
26508 6D6A           E8         0DAE            call	_write_byte
26509 6D6D           89EC                       mov	sp,bp
26510                                           !BCC_EOS
26511                                           ! 3649  write_byte(ES,DI+0x29,8);
26512                                           ! Debug: list int = const 8 (used reg = )
26513 6D6F           B8                   0008  mov	ax,*8
26514 6D72           50                         push	ax
26515                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26516 6D73           8B46         08            mov	ax,8[bp]
26517                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26518 6D76           05                   0029  add	ax,*$29
26519 6D79           50                         push	ax
26520                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26521 6D7A           FF76         06            push	6[bp]
26522                                           ! Debug: func () void = write_byte+0 (used reg = )
26523 6D7D           E8         0D9B            call	_write_byte
26524 6D80           89EC                       mov	sp,bp
26525                                           !BCC_EOS
26526                                           ! 3650  write_byte(ES,DI+0x2a,2);
26527                                           ! Debug: list int = const 2 (used reg = )
26528 6D82           B8                   0002  mov	ax,*2
26529 6D85           50                         push	ax
26530                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26531 6D86           8B46         08            mov	ax,8[bp]
26532                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26533 6D89           05                   002A  add	ax,*$2A
26534 6D8C           50                         push	ax
26535                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26536 6D8D           FF76         06            push	6[bp]
26537                                           ! Debug: func () void = write_byte+0 (used reg = )
26538 6D90           E8         0D88            call	_write_byte
26539 6D93           89EC                       mov	sp,bp
26540                                           !BCC_EOS
26541                                           ! 3651  write_byte(ES,DI+0x2b,0);
26542                                           ! Debug: list int = const 0 (used reg = )
26543 6D95           31C0                       xor	ax,ax
26544 6D97           50                         push	ax
26545                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26546 6D98           8B46         08            mov	ax,8[bp]
26547                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26548 6D9B           05                   002B  add	ax,*$2B
26549 6D9E           50                         push	ax
26550                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26551 6D9F           FF76         06            push	6[bp]
26552                                           ! Debug: func () void = write_byte+0 (used reg = )
26553 6DA2           E8         0D76            call	_write_byte
26554 6DA5           89EC                       mov	sp,bp
26555                                           !BCC_EOS
26556                                           ! 3652  write_byte(ES,DI+0x2c,0);
26557                                           ! Debug: list int = const 0 (used reg = )
26558 6DA7           31C0                       xor	ax,ax
26559 6DA9           50                         push	ax
26560                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
26561 6DAA           8B46         08            mov	ax,8[bp]
26562                                           ! Debug: list unsigned int = ax+$2C (used reg = )
26563 6DAD           05                   002C  add	ax,*$2C
26564 6DB0           50                         push	ax
26565                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26566 6DB1           FF76         06            push	6[bp]
26567                                           ! Debug: func () void = write_byte+0 (used reg = )
26568 6DB4           E8         0D64            call	_write_byte
26569 6DB7           89EC                       mov	sp,bp
26570                                           !BCC_EOS
26571                                           ! 3653  write_byte(ES,DI+0x31,3);
26572                                           ! Debug: list int = const 3 (used reg = )
26573 6DB9           B8                   0003  mov	ax,*3
26574 6DBC           50                         push	ax
26575                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
26576 6DBD           8B46         08            mov	ax,8[bp]
26577                                           ! Debug: list unsigned int = ax+$31 (used reg = )
26578 6DC0           05                   0031  add	ax,*$31
26579 6DC3           50                         push	ax
26580                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26581 6DC4           FF76         06            push	6[bp]
26582                                           ! Debug: func () void = write_byte+0 (used reg = )
26583 6DC7           E8         0D51            call	_write_byte
26584 6DCA           89EC                       mov	sp,bp
26585                                           !BCC_EOS
26586                                           ! 3654  write_byte(ES,DI+0x32,0);
26587                                           ! Debug: list int = const 0 (used reg = )
26588 6DCC           31C0                       xor	ax,ax
26589 6DCE           50                         push	ax
26590                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
26591 6DCF           8B46         08            mov	ax,8[bp]
26592                                           ! Debug: list unsigned int = ax+$32 (used reg = )
26593 6DD2           05                   0032  add	ax,*$32
26594 6DD5           50                         push	ax
26595                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26596 6DD6           FF76         06            push	6[bp]
26597                                           ! Debug: func () void = write_byte+0 (used reg = )
26598 6DD9           E8         0D3F            call	_write_byte
26599 6DDC           89EC                       mov	sp,bp
26600                                           !BCC_EOS
26601                                           ! 3655  memsetb(ES,DI+0x33,0,13);
26602                                           ! Debug: list int = const $D (used reg = )
26603 6DDE           B8                   000D  mov	ax,*$D
26604 6DE1           50                         push	ax
26605                                           ! Debug: list int = const 0 (used reg = )
26606 6DE2           31C0                       xor	ax,ax
26607 6DE4           50                         push	ax
26608                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
26609 6DE5           8B46         08            mov	ax,8[bp]
26610                                           ! Debug: list unsigned int = ax+$33 (used reg = )
26611 6DE8           05                   0033  add	ax,*$33
26612 6DEB           50                         push	ax
26613                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
26614 6DEC           FF76         06            push	6[bp]
26615                                           ! Debug: func () void = memsetb+0 (used reg = )
26616 6DEF           E8         0C59            call	_memsetb
26617 6DF2           89EC                       mov	sp,bp
26618                                           !BCC_EOS
26619                                           ! 3656 }
26620 6DF4           5D                         pop	bp
26621 6DF5           C3                         ret
26622                                           ! 3657 static Bit16u biosfn_read_video_state_size2 (CX)
26623                                           ! Register BX used in function biosfn_read_state_info
26624                                           ! 3658      Bit16u CX;
26625                       00006DF6            _biosfn_read_video_state_size2:
26626                                           !BCC_EOS
26627                                           ! 3659 {
26628                                           ! 3660     Bit16u size;
26629                                           !BCC_EOS
26630                                           ! 3661     size = 0;
26631 6DF6           55                         push	bp
26632 6DF7           89E5                       mov	bp,sp
26633 6DF9           4C                         dec	sp
26634 6DFA           4C                         dec	sp
26635                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
26636 6DFB           31C0                       xor	ax,ax
26637 6DFD           8946         FE            mov	-2[bp],ax
26638                                           !BCC_EOS
26639                                           ! 3662     if (CX & 1) {
26640                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
26641 6E00           8A46         04            mov	al,4[bp]
26642 6E03           24                     01  and	al,*1
26643 6E05           84C0                       test	al,al
26644 6E07           74           09            je  	.233
26645                       00006E09            .234:
26646                                           ! 3663         size += 0x46;
26647                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
26648 6E09           8B46         FE            mov	ax,-2[bp]
26649 6E0C           05                   0046  add	ax,*$46
26650 6E0F           8946         FE            mov	-2[bp],ax
26651                                           !BCC_EOS
26652                                           ! 3664     }
26653                                           ! 3665     if (CX & 2) {
26654                       00006E12            .233:
26655                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
26656 6E12           8A46         04            mov	al,4[bp]
26657 6E15           24                     02  and	al,*2
26658 6E17           84C0                       test	al,al
26659 6E19           74           09            je  	.235
26660                       00006E1B            .236:
26661                                           ! 3666         size += (5 + 8 + 5) * 2 + 6;
26662                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
26663 6E1B           8B46         FE            mov	ax,-2[bp]
26664 6E1E           05                   002A  add	ax,*$2A
26665 6E21           8946         FE            mov	-2[bp],ax
26666                                           !BCC_EOS
26667                                           ! 3667     }
26668                                           ! 3668     if (CX & 4) {
26669                       00006E24            .235:
26670                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
26671 6E24           8A46         04            mov	al,4[bp]
26672 6E27           24                     04  and	al,*4
26673 6E29           84C0                       test	al,al
26674 6E2B           74           09            je  	.237
26675                       00006E2D            .238:
26676                                           ! 3669         size += 3 + 256 * 3 + 1;
26677                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
26678 6E2D           8B46         FE            mov	ax,-2[bp]
26679 6E30           05                   0304  add	ax,#$304
26680 6E33           8946         FE            mov	-2[bp],ax
26681                                           !BCC_EOS
26682                                           ! 3670 }
26683                                           ! 3671     return size;
26684                       00006E36            .237:
26685 6E36           8B46         FE            mov	ax,-2[bp]
26686 6E39           89EC                       mov	sp,bp
26687 6E3B           5D                         pop	bp
26688 6E3C           C3                         ret
26689                                           !BCC_EOS
26690                                           ! 3672 }
26691                                           ! 3673 static void biosfn_read_video_state_size (CX, BX)
26692                                           ! 3674      Bit16u CX; Bit16u *BX;
26693                       00006E3D            _biosfn_read_video_state_size:
26694                                           !BCC_EOS
26695                                           !BCC_EOS
26696                                           ! 3675 {
26697                                           ! 3676     Bit16u ss=get_SS();
26698 6E3D           55                         push	bp
26699 6E3E           89E5                       mov	bp,sp
26700 6E40           4C                         dec	sp
26701 6E41           4C                         dec	sp
26702                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26703 6E42           E8         0D3C            call	_get_SS
26704                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26705 6E45           8946         FE            mov	-2[bp],ax
26706                                           !BCC_EOS
26707                                           ! 3677     write_word(ss, BX, biosfn_read_video_state_size2(CX));
26708                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
26709 6E48           FF76         04            push	4[bp]
26710                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
26711 6E4B           E8         FFA8            call	_biosfn_read_video_state_size2
26712 6E4E           44                         inc	sp
26713 6E4F           44                         inc	sp
26714                                           ! Debug: list unsigned short = ax+0 (used reg = )
26715 6E50           50                         push	ax
26716                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
26717 6E51           FF76         06            push	6[bp]
26718                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26719 6E54           FF76         FE            push	-2[bp]
26720                                           ! Debug: func () void = write_word+0 (used reg = )
26721 6E57           E8         0CD9            call	_write_word
26722 6E5A           83C4                   06  add	sp,*6
26723                                           !BCC_EOS
26724                                           ! 3678 }
26725 6E5D           89EC                       mov	sp,bp
26726 6E5F           5D                         pop	bp
26727 6E60           C3                         ret
26728                                           ! 3679 static Bit16u biosfn_save_video_state (CX,ES,BX)
26729                                           ! 3680      Bit16u CX;Bit16u ES;Bit16u BX;
26730                       00006E61            _biosfn_save_video_state:
26731                                           !BCC_EOS
26732                                           !BCC_EOS
26733                                           !BCC_EOS
26734                                           ! 3681 {
26735                                           ! 3682     Bit16u i, v, crtc_addr, ar_index;
26736                                           !BCC_EOS
26737                                           ! 3683     crtc_addr = read_word(0x40, 0x63);
26738 6E61           55                         push	bp
26739 6E62           89E5                       mov	bp,sp
26740 6E64           83C4                   F8  add	sp,*-8
26741                                           ! Debug: list int = const $63 (used reg = )
26742 6E67           B8                   0063  mov	ax,*$63
26743 6E6A           50                         push	ax
26744                                           ! Debug: list int = const $40 (used reg = )
26745 6E6B           B8                   0040  mov	ax,*$40
26746 6E6E           50                         push	ax
26747                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26748 6E6F           E8         0C96            call	_read_word
26749 6E72           83C4                   04  add	sp,*4
26750                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
26751 6E75           8946         FA            mov	-6[bp],ax
26752                                           !BCC_EOS
26753                                           ! 3684     if (CX & 1) {
26754                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
26755 6E78           8A46         04            mov	al,4[bp]
26756 6E7B           24                     01  and	al,*1
26757 6E7D           84C0                       test	al,al
26758 6E7F         0F84         0266            beq 	.239
26759                       00006E83            .23A:
26760                                           ! 3685         write_byte(ES, BX, inb(0x3c4)); BX++;
26761                                           ! Debug: list int = const $3C4 (used reg = )
26762 6E83           B8                   03C4  mov	ax,#$3C4
26763 6E86           50                         push	ax
26764                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26765 6E87           E8         0CC1            call	_inb
26766 6E8A           44                         inc	sp
26767 6E8B           44                         inc	sp
26768                                           ! Debug: list unsigned char = al+0 (used reg = )
26769 6E8C           30E4                       xor	ah,ah
26770 6E8E           50                         push	ax
26771                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26772 6E8F           FF76         08            push	8[bp]
26773                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26774 6E92           FF76         06            push	6[bp]
26775                                           ! Debug: func () void = write_byte+0 (used reg = )
26776 6E95           E8         0C83            call	_write_byte
26777 6E98           83C4                   06  add	sp,*6
26778                                           !BCC_EOS
26779                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26780 6E9B           8B46         08            mov	ax,8[bp]
26781 6E9E           40                         inc	ax
26782 6E9F           8946         08            mov	8[bp],ax
26783                                           !BCC_EOS
26784                                           ! 3686         write_byte(ES, BX, inb(crtc_addr)); BX++;
26785                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
26786 6EA2           FF76         FA            push	-6[bp]
26787                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26788 6EA5           E8         0CA3            call	_inb
26789 6EA8           44                         inc	sp
26790 6EA9           44                         inc	sp
26791                                           ! Debug: list unsigned char = al+0 (used reg = )
26792 6EAA           30E4                       xor	ah,ah
26793 6EAC           50                         push	ax
26794                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26795 6EAD           FF76         08            push	8[bp]
26796                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26797 6EB0           FF76         06            push	6[bp]
26798                                           ! Debug: func () void = write_byte+0 (used reg = )
26799 6EB3           E8         0C65            call	_write_byte
26800 6EB6           83C4                   06  add	sp,*6
26801                                           !BCC_EOS
26802                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26803 6EB9           8B46         08            mov	ax,8[bp]
26804 6EBC           40                         inc	ax
26805 6EBD           8946         08            mov	8[bp],ax
26806                                           !BCC_EOS
26807                                           ! 3687         write_byte(ES, BX, inb(0x3ce)); BX++;
26808                                           ! Debug: list int = const $3CE (used reg = )
26809 6EC0           B8                   03CE  mov	ax,#$3CE
26810 6EC3           50                         push	ax
26811                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26812 6EC4           E8         0C84            call	_inb
26813 6EC7           44                         inc	sp
26814 6EC8           44                         inc	sp
26815                                           ! Debug: list unsigned char = al+0 (used reg = )
26816 6EC9           30E4                       xor	ah,ah
26817 6ECB           50                         push	ax
26818                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26819 6ECC           FF76         08            push	8[bp]
26820                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26821 6ECF           FF76         06            push	6[bp]
26822                                           ! Debug: func () void = write_byte+0 (used reg = )
26823 6ED2           E8         0C46            call	_write_byte
26824 6ED5           83C4                   06  add	sp,*6
26825                                           !BCC_EOS
26826                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26827 6ED8           8B46         08            mov	ax,8[bp]
26828 6EDB           40                         inc	ax
26829 6EDC           8946         08            mov	8[bp],ax
26830                                           !BCC_EOS
26831                                           ! 3688         inb(0x3da);
26832                                           ! Debug: list int = const $3DA (used reg = )
26833 6EDF           B8                   03DA  mov	ax,#$3DA
26834 6EE2           50                         push	ax
26835                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26836 6EE3           E8         0C65            call	_inb
26837 6EE6           44                         inc	sp
26838 6EE7           44                         inc	sp
26839                                           !BCC_EOS
26840                                           ! 3689         ar_index = inb(0x3c0);
26841                                           ! Debug: list int = const $3C0 (used reg = )
26842 6EE8           B8                   03C0  mov	ax,#$3C0
26843 6EEB           50                         push	ax
26844                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26845 6EEC           E8         0C5C            call	_inb
26846 6EEF           44                         inc	sp
26847 6EF0           44                         inc	sp
26848                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
26849 6EF1           30E4                       xor	ah,ah
26850 6EF3           8946         F8            mov	-8[bp],ax
26851                                           !BCC_EOS
26852                                           ! 3690         write_byte(ES, BX, ar_index); BX++;
26853                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
26854 6EF6           FF76         F8            push	-8[bp]
26855                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26856 6EF9           FF76         08            push	8[bp]
26857                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26858 6EFC           FF76         06            push	6[bp]
26859                                           ! Debug: func () void = write_byte+0 (used reg = )
26860 6EFF           E8         0C19            call	_write_byte
26861 6F02           83C4                   06  add	sp,*6
26862                                           !BCC_EOS
26863                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26864 6F05           8B46         08            mov	ax,8[bp]
26865 6F08           40                         inc	ax
26866 6F09           8946         08            mov	8[bp],ax
26867                                           !BCC_EOS
26868                                           ! 3691         write_byte(ES, BX, inb(0x3ca)); BX++;
26869                                           ! Debug: list int = const $3CA (used reg = )
26870 6F0C           B8                   03CA  mov	ax,#$3CA
26871 6F0F           50                         push	ax
26872                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26873 6F10           E8         0C38            call	_inb
26874 6F13           44                         inc	sp
26875 6F14           44                         inc	sp
26876                                           ! Debug: list unsigned char = al+0 (used reg = )
26877 6F15           30E4                       xor	ah,ah
26878 6F17           50                         push	ax
26879                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26880 6F18           FF76         08            push	8[bp]
26881                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26882 6F1B           FF76         06            push	6[bp]
26883                                           ! Debug: func () void = write_byte+0 (used reg = )
26884 6F1E           E8         0BFA            call	_write_byte
26885 6F21           83C4                   06  add	sp,*6
26886                                           !BCC_EOS
26887                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26888 6F24           8B46         08            mov	ax,8[bp]
26889 6F27           40                         inc	ax
26890 6F28           8946         08            mov	8[bp],ax
26891                                           !BCC_EOS
26892                                           ! 3692         for(i=1;i<=4;i++){
26893                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
26894 6F2B           B8                   0001  mov	ax,*1
26895 6F2E           8946         FE            mov	-2[bp],ax
26896                                           !BCC_EOS
26897                                           !BCC_EOS
26898 6F31           EB           33            jmp .23D
26899                       00006F33            .23E:
26900                                           ! 3693             outb(0x3c4, i);
26901                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
26902 6F33           FF76         FE            push	-2[bp]
26903                                           ! Debug: list int = const $3C4 (used reg = )
26904 6F36           B8                   03C4  mov	ax,#$3C4
26905 6F39           50                         push	ax
26906                                           ! Debug: func () void = outb+0 (used reg = )
26907 6F3A           E8         0C24            call	_outb
26908 6F3D           83C4                   04  add	sp,*4
26909                                           !BCC_EOS
26910                                           ! 3694             write_byte(ES, BX, inb(0x3c5)); BX++;
26911                                           ! Debug: list int = const $3C5 (used reg = )
26912 6F40           B8                   03C5  mov	ax,#$3C5
26913 6F43           50                         push	ax
26914                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26915 6F44           E8         0C04            call	_inb
26916 6F47           44                         inc	sp
26917 6F48           44                         inc	sp
26918                                           ! Debug: list unsigned char = al+0 (used reg = )
26919 6F49           30E4                       xor	ah,ah
26920 6F4B           50                         push	ax
26921                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26922 6F4C           FF76         08            push	8[bp]
26923                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26924 6F4F           FF76         06            push	6[bp]
26925                                           ! Debug: func () void = write_byte+0 (used reg = )
26926 6F52           E8         0BC6            call	_write_byte
26927 6F55           83C4                   06  add	sp,*6
26928                                           !BCC_EOS
26929                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26930 6F58           8B46         08            mov	ax,8[bp]
26931 6F5B           40                         inc	ax
26932 6F5C           8946         08            mov	8[bp],ax
26933                                           !BCC_EOS
26934                                           ! 3695         }
26935                                           ! 3696         outb(0x3c4, 0);
26936                       00006F5F            .23C:
26937                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
26938 6F5F           8B46         FE            mov	ax,-2[bp]
26939 6F62           40                         inc	ax
26940 6F63           8946         FE            mov	-2[bp],ax
26941                       00006F66            .23D:
26942                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
26943 6F66           8B46         FE            mov	ax,-2[bp]
26944 6F69           3D                   0004  cmp	ax,*4
26945 6F6C           76           C5            jbe	.23E
26946                       00006F6E            .23F:
26947                       00006F6E            .23B:
26948                                           ! Debug: list int = const 0 (used reg = )
26949 6F6E           31C0                       xor	ax,ax
26950 6F70           50                         push	ax
26951                                           ! Debug: list int = const $3C4 (used reg = )
26952 6F71           B8                   03C4  mov	ax,#$3C4
26953 6F74           50                         push	ax
26954                                           ! Debug: func () void = outb+0 (used reg = )
26955 6F75           E8         0BE9            call	_outb
26956 6F78           83C4                   04  add	sp,*4
26957                                           !BCC_EOS
26958                                           ! 3697         write_byte(ES, BX, inb(0x3c5)); BX++;
26959                                           ! Debug: list int = const $3C5 (used reg = )
26960 6F7B           B8                   03C5  mov	ax,#$3C5
26961 6F7E           50                         push	ax
26962                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26963 6F7F           E8         0BC9            call	_inb
26964 6F82           44                         inc	sp
26965 6F83           44                         inc	sp
26966                                           ! Debug: list unsigned char = al+0 (used reg = )
26967 6F84           30E4                       xor	ah,ah
26968 6F86           50                         push	ax
26969                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26970 6F87           FF76         08            push	8[bp]
26971                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26972 6F8A           FF76         06            push	6[bp]
26973                                           ! Debug: func () void = write_byte+0 (used reg = )
26974 6F8D           E8         0B8B            call	_write_byte
26975 6F90           83C4                   06  add	sp,*6
26976                                           !BCC_EOS
26977                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26978 6F93           8B46         08            mov	ax,8[bp]
26979 6F96           40                         inc	ax
26980 6F97           8946         08            mov	8[bp],ax
26981                                           !BCC_EOS
26982                                           ! 3698         for(i=0;i<=0x18;i++) {
26983                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
26984 6F9A           31C0                       xor	ax,ax
26985 6F9C           8946         FE            mov	-2[bp],ax
26986                                           !BCC_EOS
26987                                           !BCC_EOS
26988 6F9F           EB           33            jmp .242
26989                       00006FA1            .243:
26990                                           ! 3699             outb(crtc_addr,i);
26991                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
26992 6FA1           FF76         FE            push	-2[bp]
26993                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
26994 6FA4           FF76         FA            push	-6[bp]
26995                                           ! Debug: func () void = outb+0 (used reg = )
26996 6FA7           E8         0BB7            call	_outb
26997 6FAA           83C4                   04  add	sp,*4
26998                                           !BCC_EOS
26999                                           ! 3700             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27000                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27001 6FAD           8B46         FA            mov	ax,-6[bp]
27002                                           ! Debug: list unsigned int = ax+1 (used reg = )
27003 6FB0           40                         inc	ax
27004 6FB1           50                         push	ax
27005                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27006 6FB2           E8         0B96            call	_inb
27007 6FB5           44                         inc	sp
27008 6FB6           44                         inc	sp
27009                                           ! Debug: list unsigned char = al+0 (used reg = )
27010 6FB7           30E4                       xor	ah,ah
27011 6FB9           50                         push	ax
27012                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27013 6FBA           FF76         08            push	8[bp]
27014                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27015 6FBD           FF76         06            push	6[bp]
27016                                           ! Debug: func () void = write_byte+0 (used reg = )
27017 6FC0           E8         0B58            call	_write_byte
27018 6FC3           83C4                   06  add	sp,*6
27019                                           !BCC_EOS
27020                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27021 6FC6           8B46         08            mov	ax,8[bp]
27022 6FC9           40                         inc	ax
27023 6FCA           8946         08            mov	8[bp],ax
27024                                           !BCC_EOS
27025                                           ! 3701         }
27026                                           ! 3702         for(i=0;i<=0x13;i++) {
27027                       00006FCD            .241:
27028                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27029 6FCD           8B46         FE            mov	ax,-2[bp]
27030 6FD0           40                         inc	ax
27031 6FD1           8946         FE            mov	-2[bp],ax
27032                       00006FD4            .242:
27033                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27034 6FD4           8B46         FE            mov	ax,-2[bp]
27035 6FD7           3D                   0018  cmp	ax,*$18
27036 6FDA           76           C5            jbe	.243
27037                       00006FDC            .244:
27038                       00006FDC            .240:
27039                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27040 6FDC           31C0                       xor	ax,ax
27041 6FDE           8946         FE            mov	-2[bp],ax
27042                                           !BCC_EOS
27043                                           !BCC_EOS
27044 6FE1           EB           44            jmp .247
27045                       00006FE3            .248:
27046                                           ! 3703             inb(0x3da);
27047                                           ! Debug: list int = const $3DA (used reg = )
27048 6FE3           B8                   03DA  mov	ax,#$3DA
27049 6FE6           50                         push	ax
27050                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27051 6FE7           E8         0B61            call	_inb
27052 6FEA           44                         inc	sp
27053 6FEB           44                         inc	sp
27054                                           !BCC_EOS
27055                                           ! 3704             outb(0x3c0, i | (ar_index & 0x20));
27056                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27057 6FEC           8A46         F8            mov	al,-8[bp]
27058 6FEF           24                     20  and	al,*$20
27059                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27060                                           ! Debug: expression subtree swapping
27061 6FF1           30E4                       xor	ah,ah
27062 6FF3           0B46         FE            or	ax,-2[bp]
27063                                           ! Debug: list unsigned int = ax+0 (used reg = )
27064 6FF6           50                         push	ax
27065                                           ! Debug: list int = const $3C0 (used reg = )
27066 6FF7           B8                   03C0  mov	ax,#$3C0
27067 6FFA           50                         push	ax
27068                                           ! Debug: func () void = outb+0 (used reg = )
27069 6FFB           E8         0B63            call	_outb
27070 6FFE           83C4                   04  add	sp,*4
27071                                           !BCC_EOS
27072                                           ! 3705             write_byte(ES, BX, inb(0x3c1)); BX++;
27073                                           ! Debug: list int = const $3C1 (used reg = )
27074 7001           B8                   03C1  mov	ax,#$3C1
27075 7004           50                         push	ax
27076                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27077 7005           E8         0B43            call	_inb
27078 7008           44                         inc	sp
27079 7009           44                         inc	sp
27080                                           ! Debug: list unsigned char = al+0 (used reg = )
27081 700A           30E4                       xor	ah,ah
27082 700C           50                         push	ax
27083                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27084 700D           FF76         08            push	8[bp]
27085                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27086 7010           FF76         06            push	6[bp]
27087                                           ! Debug: func () void = write_byte+0 (used reg = )
27088 7013           E8         0B05            call	_write_byte
27089 7016           83C4                   06  add	sp,*6
27090                                           !BCC_EOS
27091                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27092 7019           8B46         08            mov	ax,8[bp]
27093 701C           40                         inc	ax
27094 701D           8946         08            mov	8[bp],ax
27095                                           !BCC_EOS
27096                                           ! 3706         }
27097                                           ! 3707         inb(0x3da);
27098                       00007020            .246:
27099                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27100 7020           8B46         FE            mov	ax,-2[bp]
27101 7023           40                         inc	ax
27102 7024           8946         FE            mov	-2[bp],ax
27103                       00007027            .247:
27104                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27105 7027           8B46         FE            mov	ax,-2[bp]
27106 702A           3D                   0013  cmp	ax,*$13
27107 702D           76           B4            jbe	.248
27108                       0000702F            .249:
27109                       0000702F            .245:
27110                                           ! Debug: list int = const $3DA (used reg = )
27111 702F           B8                   03DA  mov	ax,#$3DA
27112 7032           50                         push	ax
27113                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27114 7033           E8         0B15            call	_inb
27115 7036           44                         inc	sp
27116 7037           44                         inc	sp
27117                                           !BCC_EOS
27118                                           ! 3708         for(i=0;i<=8;i++) {
27119                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27120 7038           31C0                       xor	ax,ax
27121 703A           8946         FE            mov	-2[bp],ax
27122                                           !BCC_EOS
27123                                           !BCC_EOS
27124 703D           EB           33            jmp .24C
27125                       0000703F            .24D:
27126                                           ! 3709             outb(0x3ce,i);
27127                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27128 703F           FF76         FE            push	-2[bp]
27129                                           ! Debug: list int = const $3CE (used reg = )
27130 7042           B8                   03CE  mov	ax,#$3CE
27131 7045           50                         push	ax
27132                                           ! Debug: func () void = outb+0 (used reg = )
27133 7046           E8         0B18            call	_outb
27134 7049           83C4                   04  add	sp,*4
27135                                           !BCC_EOS
27136                                           ! 3710             write_byte(ES, BX, inb(0x3cf)); BX++;
27137                                           ! Debug: list int = const $3CF (used reg = )
27138 704C           B8                   03CF  mov	ax,#$3CF
27139 704F           50                         push	ax
27140                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27141 7050           E8         0AF8            call	_inb
27142 7053           44                         inc	sp
27143 7054           44                         inc	sp
27144                                           ! Debug: list unsigned char = al+0 (used reg = )
27145 7055           30E4                       xor	ah,ah
27146 7057           50                         push	ax
27147                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27148 7058           FF76         08            push	8[bp]
27149                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27150 705B           FF76         06            push	6[bp]
27151                                           ! Debug: func () void = write_byte+0 (used reg = )
27152 705E           E8         0ABA            call	_write_byte
27153 7061           83C4                   06  add	sp,*6
27154                                           !BCC_EOS
27155                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27156 7064           8B46         08            mov	ax,8[bp]
27157 7067           40                         inc	ax
27158 7068           8946         08            mov	8[bp],ax
27159                                           !BCC_EOS
27160                                           ! 3711         }
27161                                           ! 3712         write_word(ES, BX, crtc_addr); BX+= 2;
27162                       0000706B            .24B:
27163                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27164 706B           8B46         FE            mov	ax,-2[bp]
27165 706E           40                         inc	ax
27166 706F           8946         FE            mov	-2[bp],ax
27167                       00007072            .24C:
27168                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27169 7072           8B46         FE            mov	ax,-2[bp]
27170 7075           3D                   0008  cmp	ax,*8
27171 7078           76           C5            jbe	.24D
27172                       0000707A            .24E:
27173                       0000707A            .24A:
27174                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27175 707A           FF76         FA            push	-6[bp]
27176                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27177 707D           FF76         08            push	8[bp]
27178                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27179 7080           FF76         06            push	6[bp]
27180                                           ! Debug: func () void = write_word+0 (used reg = )
27181 7083           E8         0AAD            call	_write_word
27182 7086           83C4                   06  add	sp,*6
27183                                           !BCC_EOS
27184                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27185 7089           8B46         08            mov	ax,8[bp]
27186 708C           40                         inc	ax
27187 708D           40                         inc	ax
27188 708E           8946         08            mov	8[bp],ax
27189                                           !BCC_EOS
27190                                           ! 3713         write_byte(ES, BX, 0); BX++;
27191                                           ! Debug: list int = const 0 (used reg = )
27192 7091           31C0                       xor	ax,ax
27193 7093           50                         push	ax
27194                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27195 7094           FF76         08            push	8[bp]
27196                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27197 7097           FF76         06            push	6[bp]
27198                                           ! Debug: func () void = write_byte+0 (used reg = )
27199 709A           E8         0A7E            call	_write_byte
27200 709D           83C4                   06  add	sp,*6
27201                                           !BCC_EOS
27202                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27203 70A0           8B46         08            mov	ax,8[bp]
27204 70A3           40                         inc	ax
27205 70A4           8946         08            mov	8[bp],ax
27206                                           !BCC_EOS
27207                                           ! 3714         write_byte(ES, BX, 0); BX++;
27208                                           ! Debug: list int = const 0 (used reg = )
27209 70A7           31C0                       xor	ax,ax
27210 70A9           50                         push	ax
27211                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27212 70AA           FF76         08            push	8[bp]
27213                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27214 70AD           FF76         06            push	6[bp]
27215                                           ! Debug: func () void = write_byte+0 (used reg = )
27216 70B0           E8         0A68            call	_write_byte
27217 70B3           83C4                   06  add	sp,*6
27218                                           !BCC_EOS
27219                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27220 70B6           8B46         08            mov	ax,8[bp]
27221 70B9           40                         inc	ax
27222 70BA           8946         08            mov	8[bp],ax
27223                                           !BCC_EOS
27224                                           ! 3715         write_byte(ES, BX, 0); BX++;
27225                                           ! Debug: list int = const 0 (used reg = )
27226 70BD           31C0                       xor	ax,ax
27227 70BF           50                         push	ax
27228                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27229 70C0           FF76         08            push	8[bp]
27230                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27231 70C3           FF76         06            push	6[bp]
27232                                           ! Debug: func () void = write_byte+0 (used reg = )
27233 70C6           E8         0A52            call	_write_byte
27234 70C9           83C4                   06  add	sp,*6
27235                                           !BCC_EOS
27236                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27237 70CC           8B46         08            mov	ax,8[bp]
27238 70CF           40                         inc	ax
27239 70D0           8946         08            mov	8[bp],ax
27240                                           !BCC_EOS
27241                                           ! 3716         write_byte(ES, B
27242                                           ! 3716 X, 0); BX++;
27243                                           ! Debug: list int = const 0 (used reg = )
27244 70D3           31C0                       xor	ax,ax
27245 70D5           50                         push	ax
27246                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27247 70D6           FF76         08            push	8[bp]
27248                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27249 70D9           FF76         06            push	6[bp]
27250                                           ! Debug: func () void = write_byte+0 (used reg = )
27251 70DC           E8         0A3C            call	_write_byte
27252 70DF           83C4                   06  add	sp,*6
27253                                           !BCC_EOS
27254                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27255 70E2           8B46         08            mov	ax,8[bp]
27256 70E5           40                         inc	ax
27257 70E6           8946         08            mov	8[bp],ax
27258                                           !BCC_EOS
27259                                           ! 3717     }
27260                                           ! 3718     if (CX & 2) {
27261                       000070E9            .239:
27262                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27263 70E9           8A46         04            mov	al,4[bp]
27264 70EC           24                     02  and	al,*2
27265 70EE           84C0                       test	al,al
27266 70F0         0F84         0270            beq 	.24F
27267                       000070F4            .250:
27268                                           ! 3719         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27269                                           ! Debug: list int = const $49 (used reg = )
27270 70F4           B8                   0049  mov	ax,*$49
27271 70F7           50                         push	ax
27272                                           ! Debug: list int = const $40 (used reg = )
27273 70F8           B8                   0040  mov	ax,*$40
27274 70FB           50                         push	ax
27275                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27276 70FC           E8         09F6            call	_read_byte
27277 70FF           83C4                   04  add	sp,*4
27278                                           ! Debug: list unsigned char = al+0 (used reg = )
27279 7102           30E4                       xor	ah,ah
27280 7104           50                         push	ax
27281                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27282 7105           FF76         08            push	8[bp]
27283                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27284 7108           FF76         06            push	6[bp]
27285                                           ! Debug: func () void = write_byte+0 (used reg = )
27286 710B           E8         0A0D            call	_write_byte
27287 710E           83C4                   06  add	sp,*6
27288                                           !BCC_EOS
27289                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27290 7111           8B46         08            mov	ax,8[bp]
27291 7114           40                         inc	ax
27292 7115           8946         08            mov	8[bp],ax
27293                                           !BCC_EOS
27294                                           ! 3720         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27295                                           ! Debug: list int = const $4A (used reg = )
27296 7118           B8                   004A  mov	ax,*$4A
27297 711B           50                         push	ax
27298                                           ! Debug: list int = const $40 (used reg = )
27299 711C           B8                   0040  mov	ax,*$40
27300 711F           50                         push	ax
27301                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27302 7120           E8         09E5            call	_read_word
27303 7123           83C4                   04  add	sp,*4
27304                                           ! Debug: list unsigned short = ax+0 (used reg = )
27305 7126           50                         push	ax
27306                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27307 7127           FF76         08            push	8[bp]
27308                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27309 712A           FF76         06            push	6[bp]
27310                                           ! Debug: func () void = write_word+0 (used reg = )
27311 712D           E8         0A03            call	_write_word
27312 7130           83C4                   06  add	sp,*6
27313                                           !BCC_EOS
27314                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27315 7133           8B46         08            mov	ax,8[bp]
27316 7136           40                         inc	ax
27317 7137           40                         inc	ax
27318 7138           8946         08            mov	8[bp],ax
27319                                           !BCC_EOS
27320                                           ! 3721         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27321                                           ! Debug: list int = const $4C (used reg = )
27322 713B           B8                   004C  mov	ax,*$4C
27323 713E           50                         push	ax
27324                                           ! Debug: list int = const $40 (used reg = )
27325 713F           B8                   0040  mov	ax,*$40
27326 7142           50                         push	ax
27327                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27328 7143           E8         09C2            call	_read_word
27329 7146           83C4                   04  add	sp,*4
27330                                           ! Debug: list unsigned short = ax+0 (used reg = )
27331 7149           50                         push	ax
27332                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27333 714A           FF76         08            push	8[bp]
27334                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27335 714D           FF76         06            push	6[bp]
27336                                           ! Debug: func () void = write_word+0 (used reg = )
27337 7150           E8         09E0            call	_write_word
27338 7153           83C4                   06  add	sp,*6
27339                                           !BCC_EOS
27340                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27341 7156           8B46         08            mov	ax,8[bp]
27342 7159           40                         inc	ax
27343 715A           40                         inc	ax
27344 715B           8946         08            mov	8[bp],ax
27345                                           !BCC_EOS
27346                                           ! 3722         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27347                                           ! Debug: list int = const $63 (used reg = )
27348 715E           B8                   0063  mov	ax,*$63
27349 7161           50                         push	ax
27350                                           ! Debug: list int = const $40 (used reg = )
27351 7162           B8                   0040  mov	ax,*$40
27352 7165           50                         push	ax
27353                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27354 7166           E8         099F            call	_read_word
27355 7169           83C4                   04  add	sp,*4
27356                                           ! Debug: list unsigned short = ax+0 (used reg = )
27357 716C           50                         push	ax
27358                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27359 716D           FF76         08            push	8[bp]
27360                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27361 7170           FF76         06            push	6[bp]
27362                                           ! Debug: func () void = write_word+0 (used reg = )
27363 7173           E8         09BD            call	_write_word
27364 7176           83C4                   06  add	sp,*6
27365                                           !BCC_EOS
27366                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27367 7179           8B46         08            mov	ax,8[bp]
27368 717C           40                         inc	ax
27369 717D           40                         inc	ax
27370 717E           8946         08            mov	8[bp],ax
27371                                           !BCC_EOS
27372                                           ! 3723         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27373                                           ! Debug: list int = const $84 (used reg = )
27374 7181           B8                   0084  mov	ax,#$84
27375 7184           50                         push	ax
27376                                           ! Debug: list int = const $40 (used reg = )
27377 7185           B8                   0040  mov	ax,*$40
27378 7188           50                         push	ax
27379                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27380 7189           E8         0969            call	_read_byte
27381 718C           83C4                   04  add	sp,*4
27382                                           ! Debug: list unsigned char = al+0 (used reg = )
27383 718F           30E4                       xor	ah,ah
27384 7191           50                         push	ax
27385                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27386 7192           FF76         08            push	8[bp]
27387                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27388 7195           FF76         06            push	6[bp]
27389                                           ! Debug: func () void = write_byte+0 (used reg = )
27390 7198           E8         0980            call	_write_byte
27391 719B           83C4                   06  add	sp,*6
27392                                           !BCC_EOS
27393                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27394 719E           8B46         08            mov	ax,8[bp]
27395 71A1           40                         inc	ax
27396 71A2           8946         08            mov	8[bp],ax
27397                                           !BCC_EOS
27398                                           ! 3724         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27399                                           ! Debug: list int = const $85 (used reg = )
27400 71A5           B8                   0085  mov	ax,#$85
27401 71A8           50                         push	ax
27402                                           ! Debug: list int = const $40 (used reg = )
27403 71A9           B8                   0040  mov	ax,*$40
27404 71AC           50                         push	ax
27405                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27406 71AD           E8         0958            call	_read_word
27407 71B0           83C4                   04  add	sp,*4
27408                                           ! Debug: list unsigned short = ax+0 (used reg = )
27409 71B3           50                         push	ax
27410                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27411 71B4           FF76         08            push	8[bp]
27412                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27413 71B7           FF76         06            push	6[bp]
27414                                           ! Debug: func () void = write_word+0 (used reg = )
27415 71BA           E8         0976            call	_write_word
27416 71BD           83C4                   06  add	sp,*6
27417                                           !BCC_EOS
27418                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27419 71C0           8B46         08            mov	ax,8[bp]
27420 71C3           40                         inc	ax
27421 71C4           40                         inc	ax
27422 71C5           8946         08            mov	8[bp],ax
27423                                           !BCC_EOS
27424                                           ! 3725         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27425                                           ! Debug: list int = const $87 (used reg = )
27426 71C8           B8                   0087  mov	ax,#$87
27427 71CB           50                         push	ax
27428                                           ! Debug: list int = const $40 (used reg = )
27429 71CC           B8                   0040  mov	ax,*$40
27430 71CF           50                         push	ax
27431                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27432 71D0           E8         0922            call	_read_byte
27433 71D3           83C4                   04  add	sp,*4
27434                                           ! Debug: list unsigned char = al+0 (used reg = )
27435 71D6           30E4                       xor	ah,ah
27436 71D8           50                         push	ax
27437                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27438 71D9           FF76         08            push	8[bp]
27439                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27440 71DC           FF76         06            push	6[bp]
27441                                           ! Debug: func () void = write_byte+0 (used reg = )
27442 71DF           E8         0939            call	_write_byte
27443 71E2           83C4                   06  add	sp,*6
27444                                           !BCC_EOS
27445                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27446 71E5           8B46         08            mov	ax,8[bp]
27447 71E8           40                         inc	ax
27448 71E9           8946         08            mov	8[bp],ax
27449                                           !BCC_EOS
27450                                           ! 3726         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27451                                           ! Debug: list int = const $88 (used reg = )
27452 71EC           B8                   0088  mov	ax,#$88
27453 71EF           50                         push	ax
27454                                           ! Debug: list int = const $40 (used reg = )
27455 71F0           B8                   0040  mov	ax,*$40
27456 71F3           50                         push	ax
27457                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27458 71F4           E8         08FE            call	_read_byte
27459 71F7           83C4                   04  add	sp,*4
27460                                           ! Debug: list unsigned char = al+0 (used reg = )
27461 71FA           30E4                       xor	ah,ah
27462 71FC           50                         push	ax
27463                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27464 71FD           FF76         08            push	8[bp]
27465                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27466 7200           FF76         06            push	6[bp]
27467                                           ! Debug: func () void = write_byte+0 (used reg = )
27468 7203           E8         0915            call	_write_byte
27469 7206           83C4                   06  add	sp,*6
27470                                           !BCC_EOS
27471                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27472 7209           8B46         08            mov	ax,8[bp]
27473 720C           40                         inc	ax
27474 720D           8946         08            mov	8[bp],ax
27475                                           !BCC_EOS
27476                                           ! 3727         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27477                                           ! Debug: list int = const $89 (used reg = )
27478 7210           B8                   0089  mov	ax,#$89
27479 7213           50                         push	ax
27480                                           ! Debug: list int = const $40 (used reg = )
27481 7214           B8                   0040  mov	ax,*$40
27482 7217           50                         push	ax
27483                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27484 7218           E8         08DA            call	_read_byte
27485 721B           83C4                   04  add	sp,*4
27486                                           ! Debug: list unsigned char = al+0 (used reg = )
27487 721E           30E4                       xor	ah,ah
27488 7220           50                         push	ax
27489                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27490 7221           FF76         08            push	8[bp]
27491                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27492 7224           FF76         06            push	6[bp]
27493                                           ! Debug: func () void = write_byte+0 (used reg = )
27494 7227           E8         08F1            call	_write_byte
27495 722A           83C4                   06  add	sp,*6
27496                                           !BCC_EOS
27497                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27498 722D           8B46         08            mov	ax,8[bp]
27499 7230           40                         inc	ax
27500 7231           8946         08            mov	8[bp],ax
27501                                           !BCC_EOS
27502                                           ! 3728         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27503                                           ! Debug: list int = const $60 (used reg = )
27504 7234           B8                   0060  mov	ax,*$60
27505 7237           50                         push	ax
27506                                           ! Debug: list int = const $40 (used reg = )
27507 7238           B8                   0040  mov	ax,*$40
27508 723B           50                         push	ax
27509                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27510 723C           E8         08C9            call	_read_word
27511 723F           83C4                   04  add	sp,*4
27512                                           ! Debug: list unsigned short = ax+0 (used reg = )
27513 7242           50                         push	ax
27514                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27515 7243           FF76         08            push	8[bp]
27516                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27517 7246           FF76         06            push	6[bp]
27518                                           ! Debug: func () void = write_word+0 (used reg = )
27519 7249           E8         08E7            call	_write_word
27520 724C           83C4                   06  add	sp,*6
27521                                           !BCC_EOS
27522                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27523 724F           8B46         08            mov	ax,8[bp]
27524 7252           40                         inc	ax
27525 7253           40                         inc	ax
27526 7254           8946         08            mov	8[bp],ax
27527                                           !BCC_EOS
27528                                           ! 3729         for(i=0;i<8;i++) {
27529                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27530 7257           31C0                       xor	ax,ax
27531 7259           8946         FE            mov	-2[bp],ax
27532                                           !BCC_EOS
27533                                           !BCC_EOS
27534 725C           EB           2F            jmp .253
27535                       0000725E            .254:
27536                                           ! 3730             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27537                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27538                                           ! Debug: expression subtree swapping
27539 725E           8B46         FE            mov	ax,-2[bp]
27540 7261           D1E0                       shl	ax,*1
27541                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27542                                           ! Debug: expression subtree swapping
27543                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27544 7263           05                   0050  add	ax,*$50
27545 7266           50                         push	ax
27546                                           ! Debug: list int = const $40 (used reg = )
27547 7267           B8                   0040  mov	ax,*$40
27548 726A           50                         push	ax
27549                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27550 726B           E8         089A            call	_read_word
27551 726E           83C4                   04  add	sp,*4
27552                                           ! Debug: list unsigned short = ax+0 (used reg = )
27553 7271           50                         push	ax
27554                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27555 7272           FF76         08            push	8[bp]
27556                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27557 7275           FF76         06            push	6[bp]
27558                                           ! Debug: func () void = write_word+0 (used reg = )
27559 7278           E8         08B8            call	_write_word
27560 727B           83C4                   06  add	sp,*6
27561                                           !BCC_EOS
27562                                           ! 3731             BX += 2;
27563                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27564 727E           8B46         08            mov	ax,8[bp]
27565 7281           40                         inc	ax
27566 7282           40                         inc	ax
27567 7283           8946         08            mov	8[bp],ax
27568                                           !BCC_EOS
27569                                           ! 3732         }
27570                                           ! 3733         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
27571                       00007286            .252:
27572                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27573 7286           8B46         FE            mov	ax,-2[bp]
27574 7289           40                         inc	ax
27575 728A           8946         FE            mov	-2[bp],ax
27576                       0000728D            .253:
27577                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27578 728D           8B46         FE            mov	ax,-2[bp]
27579 7290           3D                   0008  cmp	ax,*8
27580 7293           72           C9            jb 	.254
27581                       00007295            .255:
27582                       00007295            .251:
27583                                           ! Debug: list int = const $4E (used reg = )
27584 7295           B8                   004E  mov	ax,*$4E
27585 7298           50                         push	ax
27586                                           ! Debug: list int = const $40 (used reg = )
27587 7299           B8                   0040  mov	ax,*$40
27588 729C           50                         push	ax
27589                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27590 729D           E8         0868            call	_read_word
27591 72A0           83C4                   04  add	sp,*4
27592                                           ! Debug: list unsigned short = ax+0 (used reg = )
27593 72A3           50                         push	ax
27594                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27595 72A4           FF76         08            push	8[bp]
27596                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27597 72A7           FF76         06            push	6[bp]
27598                                           ! Debug: func () void = write_word+0 (used reg = )
27599 72AA           E8         0886            call	_write_word
27600 72AD           83C4                   06  add	sp,*6
27601                                           !BCC_EOS
27602                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27603 72B0           8B46         08            mov	ax,8[bp]
27604 72B3           40                         inc	ax
27605 72B4           40                         inc	ax
27606 72B5           8946         08            mov	8[bp],ax
27607                                           !BCC_EOS
27608                                           ! 3734         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
27609                                           ! Debug: list int = const $62 (used reg = )
27610 72B8           B8                   0062  mov	ax,*$62
27611 72BB           50                         push	ax
27612                                           ! Debug: list int = const $40 (used reg = )
27613 72BC           B8                   0040  mov	ax,*$40
27614 72BF           50                         push	ax
27615                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27616 72C0           E8         0832            call	_read_byte
27617 72C3           83C4                   04  add	sp,*4
27618                                           ! Debug: list unsigned char = al+0 (used reg = )
27619 72C6           30E4                       xor	ah,ah
27620 72C8           50                         push	ax
27621                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27622 72C9           FF76         08            push	8[bp]
27623                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27624 72CC           FF76         06            push	6[bp]
27625                                           ! Debug: func () void = write_byte+0 (used reg = )
27626 72CF           E8         0849            call	_write_byte
27627 72D2           83C4                   06  add	sp,*6
27628                                           !BCC_EOS
27629                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27630 72D5           8B46         08            mov	ax,8[bp]
27631 72D8           40                         inc	ax
27632 72D9           8946         08            mov	8[bp],ax
27633                                           !BCC_EOS
27634                                           ! 3735         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
27635                                           ! Debug: list int = const $7C (used reg = )
27636 72DC           B8                   007C  mov	ax,*$7C
27637 72DF           50                         push	ax
27638                                           ! Debug: list int = const 0 (used reg = )
27639 72E0           31C0                       xor	ax,ax
27640 72E2           50                         push	ax
27641                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27642 72E3           E8         0822            call	_read_word
27643 72E6           83C4                   04  add	sp,*4
27644                                           ! Debug: list unsigned short = ax+0 (used reg = )
27645 72E9           50                         push	ax
27646                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27647 72EA           FF76         08            push	8[bp]
27648                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27649 72ED           FF76         06            push	6[bp]
27650                                           ! Debug: func () void = write_word+0 (used reg = )
27651 72F0           E8         0840            call	_write_word
27652 72F3           83C4                   06  add	sp,*6
27653                                           !BCC_EOS
27654                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27655 72F6           8B46         08            mov	ax,8[bp]
27656 72F9           40                         inc	ax
27657 72FA           40                         inc	ax
27658 72FB           8946         08            mov	8[bp],ax
27659                                           !BCC_EOS
27660                                           ! 3736         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
27661                                           ! Debug: list int = const $7E (used reg = )
27662 72FE           B8                   007E  mov	ax,*$7E
27663 7301           50                         push	ax
27664                                           ! Debug: list int = const 0 (used reg = )
27665 7302           31C0                       xor	ax,ax
27666 7304           50                         push	ax
27667                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27668 7305           E8         0800            call	_read_word
27669 7308           83C4                   04  add	sp,*4
27670                                           ! Debug: list unsigned short = ax+0 (used reg = )
27671 730B           50                         push	ax
27672                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27673 730C           FF76         08            push	8[bp]
27674                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27675 730F           FF76         06            push	6[bp]
27676                                           ! Debug: func () void = write_word+0 (used reg = )
27677 7312           E8         081E            call	_write_word
27678 7315           83C4                   06  add	sp,*6
27679                                           !BCC_EOS
27680                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27681 7318           8B46         08            mov	ax,8[bp]
27682 731B           40                         inc	ax
27683 731C           40                         inc	ax
27684 731D           8946         08            mov	8[bp],ax
27685                                           !BCC_EOS
27686                                           ! 3737         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
27687                                           ! Debug: list int = const $10C (used reg = )
27688 7320           B8                   010C  mov	ax,#$10C
27689 7323           50                         push	ax
27690                                           ! Debug: list int = const 0 (used reg = )
27691 7324           31C0                       xor	ax,ax
27692 7326           50                         push	ax
27693                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27694 7327           E8         07DE            call	_read_word
27695 732A           83C4                   04  add	sp,*4
27696                                           ! Debug: list unsigned short = ax+0 (used reg = )
27697 732D           50                         push	ax
27698                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27699 732E           FF76         08            push	8[bp]
27700                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27701 7331           FF76         06            push	6[bp]
27702                                           ! Debug: func () void = write_word+0 (used reg = )
27703 7334           E8         07FC            call	_write_word
27704 7337           83C4                   06  add	sp,*6
27705                                           !BCC_EOS
27706                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27707 733A           8B46         08            mov	ax,8[bp]
27708 733D           40                         inc	ax
27709 733E           40                         inc	ax
27710 733F           8946         08            mov	8[bp],ax
27711                                           !BCC_EOS
27712                                           ! 3738         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
27713                                           ! Debug: list int = const $10E (used reg = )
27714 7342           B8                   010E  mov	ax,#$10E
27715 7345           50                         push	ax
27716                                           ! Debug: list int = const 0 (used reg = )
27717 7346           31C0                       xor	ax,ax
27718 7348           50                         push	ax
27719                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27720 7349           E8         07BC            call	_read_word
27721 734C           83C4                   04  add	sp,*4
27722                                           ! Debug: list unsigned short = ax+0 (used reg = )
27723 734F           50                         push	ax
27724                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27725 7350           FF76         08            push	8[bp]
27726                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27727 7353           FF76         06            push	6[bp]
27728                                           ! Debug: func () void = write_word+0 (used reg = )
27729 7356           E8         07DA            call	_write_word
27730 7359           83C4                   06  add	sp,*6
27731                                           !BCC_EOS
27732                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27733 735C           8B46         08            mov	ax,8[bp]
27734 735F           40                         inc	ax
27735 7360           40                         inc	ax
27736 7361           8946         08            mov	8[bp],ax
27737                                           !BCC_EOS
27738                                           ! 3739     }
27739                                           ! 3740     if (CX & 4) {
27740                       00007364            .24F:
27741                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
27742 7364           8A46         04            mov	al,4[bp]
27743 7367           24                     04  and	al,*4
27744 7369           84C0                       test	al,al
27745 736B         0F84         00B5            beq 	.256
27746                       0000736F            .257:
27747                                           ! 3741         write_byte(ES, BX, inb(0x3c7)); BX++;
27748                                           ! Debug: list int = const $3C7 (used reg = )
27749 736F           B8                   03C7  mov	ax,#$3C7
27750 7372           50                         push	ax
27751                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27752 7373           E8         07D5            call	_inb
27753 7376           44                         inc	sp
27754 7377           44                         inc	sp
27755                                           ! Debug: list unsigned char = al+0 (used reg = )
27756 7378           30E4                       xor	ah,ah
27757 737A           50                         push	ax
27758                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27759 737B           FF76         08            push	8[bp]
27760                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27761 737E           FF76         06            push	6[bp]
27762                                           ! Debug: func () void = write_byte+0 (used reg = )
27763 7381           E8         0797            call	_write_byte
27764 7384           83C4                   06  add	sp,*6
27765                                           !BCC_EOS
27766                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27767 7387           8B46         08            mov	ax,8[bp]
27768 738A           40                         inc	ax
27769 738B           8946         08            mov	8[bp],ax
27770                                           !BCC_EOS
27771                                           ! 3742         write_byte(ES, BX, inb(0x3c8)); BX++;
27772                                           ! Debug: list int = const $3C8 (used reg = )
27773 738E           B8                   03C8  mov	ax,#$3C8
27774 7391           50                         push	ax
27775                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27776 7392           E8         07B6            call	_inb
27777 7395           44                         inc	sp
27778 7396           44                         inc	sp
27779                                           ! Debug: list unsigned char = al+0 (used reg = )
27780 7397           30E4                       xor	ah,ah
27781 7399           50                         push	ax
27782                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27783 739A           FF76         08            push	8[bp]
27784                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27785 739D           FF76         06            push	6[bp]
27786                                           ! Debug: func () void = write_byte+0 (used reg = )
27787 73A0           E8         0778            call	_write_byte
27788 73A3           83C4                   06  add	sp,*6
27789                                           !BCC_EOS
27790                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27791 73A6           8B46         08            mov	ax,8[bp]
27792 73A9           40                         inc	ax
27793 73AA           8946         08            mov	8[bp],ax
27794                                           !BCC_EOS
27795                                           ! 3743         write_byte(ES, BX, inb(0x3c6)); BX++;
27796                                           ! Debug: list int = const $3C6 (used reg = )
27797 73AD           B8                   03C6  mov	ax,#$3C6
27798 73B0           50                         push	ax
27799                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27800 73B1           E8         0797            call	_inb
27801 73B4           44                         inc	sp
27802 73B5           44                         inc	sp
27803                                           ! Debug: list unsigned char = al+0 (used reg = )
27804 73B6           30E4                       xor	ah,ah
27805 73B8           50                         push	ax
27806                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27807 73B9           FF76         08            push	8[bp]
27808                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27809 73BC           FF76         06            push	6[bp]
27810                                           ! Debug: func () void = write_byte+0 (used reg = )
27811 73BF           E8         0759            call	_write_byte
27812 73C2           83C4                   06  add	sp,*6
27813                                           !BCC_EOS
27814                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27815 73C5           8B46         08            mov	ax,8[bp]
27816 73C8           40                         inc	ax
27817 73C9           8946         08            mov	8[bp],ax
27818                                           !BCC_EOS
27819                                           ! 3744         outb(0x3c8,0x00);
27820                                           ! Debug: list int = const 0 (used reg = )
27821 73CC           31C0                       xor	ax,ax
27822 73CE           50                         push	ax
27823                                           ! Debug: list int = const $3C8 (used reg = )
27824 73CF           B8                   03C8  mov	ax,#$3C8
27825 73D2           50                         push	ax
27826                                           ! Debug: func () void = outb+0 (used reg = )
27827 73D3           E8         078B            call	_outb
27828 73D6           83C4                   04  add	sp,*4
27829                                           !BCC_EOS
27830                                           ! 3745         for(i=0;i<256*3;i++) {
27831                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27832 73D9           31C0                       xor	ax,ax
27833 73DB           8946         FE            mov	-2[bp],ax
27834                                           !BCC_EOS
27835                                           !BCC_EOS
27836 73DE           EB           26            jmp .25A
27837                       000073E0            .25B:
27838                                           ! 3746             write_byte(ES, BX, inb(0x3c9)); BX++;
27839                                           ! Debug: list int = const $3C9 (used reg = )
27840 73E0           B8                   03C9  mov	ax,#$3C9
27841 73E3           50                         push	ax
27842                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27843 73E4           E8         0764            call	_inb
27844 73E7           44                         inc	sp
27845 73E8           44                         inc	sp
27846                                           ! Debug: list unsigned char = al+0 (used reg = )
27847 73E9           30E4                       xor	ah,ah
27848 73EB           50                         push	ax
27849                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27850 73EC           FF76         08            push	8[bp]
27851                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27852 73EF           FF76         06            push	6[bp]
27853                                           ! Debug: func () void = write_byte+0 (used reg = )
27854 73F2           E8         0726            call	_write_byte
27855 73F5           83C4                   06  add	sp,*6
27856                                           !BCC_EOS
27857                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27858 73F8           8B46         08            mov	ax,8[bp]
27859 73FB           40                         inc	ax
27860 73FC           8946         08            mov	8[bp],ax
27861                                           !BCC_EOS
27862                                           ! 3747         }
27863                                           ! 3748         write_byte(ES, BX, 0); BX++;
27864                       000073FF            .259:
27865                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27866 73FF           8B46         FE            mov	ax,-2[bp]
27867 7402           40                         inc	ax
27868 7403           8946         FE            mov	-2[bp],ax
27869                       00007406            .25A:
27870                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
27871 7406           8B46         FE            mov	ax,-2[bp]
27872 7409           3D                   0300  cmp	ax,#$300
27873 740C           72           D2            jb 	.25B
27874                       0000740E            .25C:
27875                       0000740E            .258:
27876                                           ! Debug: list int = const 0 (used reg = )
27877 740E           31C0                       xor	ax,ax
27878 7410           50                         push	ax
27879                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27880 7411           FF76         08            push	8[bp]
27881                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27882 7414           FF76         06            push	6[bp]
27883                                           ! Debug: func () void = write_byte+0 (used reg = )
27884 7417           E8         0701            call	_write_byte
27885 741A           83C4                   06  add	sp,*6
27886                                           !BCC_EOS
27887                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27888 741D           8B46         08            mov	ax,8[bp]
27889 7420           40                         inc	ax
27890 7421           8946         08            mov	8[bp],ax
27891                                           !BCC_EOS
27892                                           ! 3749     }
27893                                           ! 3750     return BX;
27894                       00007424            .256:
27895 7424           8B46         08            mov	ax,8[bp]
27896 7427           89EC                       mov	sp,bp
27897 7429           5D                         pop	bp
27898 742A           C3                         ret
27899                                           !BCC_EOS
27900                                           ! 3751 }
27901                                           ! 3752 static Bit16u biosfn_restore_video_state (CX,ES,BX)
27902                                           ! 3753      Bit16u CX;Bit16u ES;Bit16u BX;
27903                       0000742B            _biosfn_restore_video_state:
27904                                           !BCC_EOS
27905                                           !BCC_EOS
27906                                           !BCC_EOS
27907                                           ! 3754 {
27908                                           ! 3755     Bit16u i, crtc_addr, v, addr1, ar_index;
27909                                           !BCC_EOS
27910                                           ! 3756     if (CX & 1) {
27911 742B           55                         push	bp
27912 742C           89E5                       mov	bp,sp
27913 742E           83C4                   F6  add	sp,*-$A
27914                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
27915 7431           8A46         04            mov	al,4[bp]
27916 7434           24                     01  and	al,*1
27917 7436           84C0                       test	al,al
27918 7438         0F84         02AA            beq 	.25D
27919                       0000743C            .25E:
27920                                           ! 3757         inb(0x3da);
27921                                           ! Debug: list int = const $3DA (used reg = )
27922 743C           B8                   03DA  mov	ax,#$3DA
27923 743F           50                         push	ax
27924                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27925 7440           E8         0708            call	_inb
27926 7443           44                         inc	sp
27927 7444           44                         inc	sp
27928                                           !BCC_EOS
27929                                           ! 3758         crtc_addr = read_word(ES, BX + 0x40);
27930                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
27931 7445           8B46         08            mov	ax,8[bp]
27932                                           ! Debug: list unsigned int = ax+$40 (used reg = )
27933 7448           05                   0040  add	ax,*$40
27934 744B           50                         push	ax
27935                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27936 744C           FF76         06            push	6[bp]
27937                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27938 744F           E8         06B6            call	_read_word
27939 7452           83C4                   04  add	sp,*4
27940                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
27941 7455           8946         FC            mov	-4[bp],ax
27942                                           !BCC_EOS
27943                                           ! 3759         addr1 = BX;
27944                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
27945 7458           8B46         08            mov	ax,8[bp]
27946 745B           8946         F8            mov	-8[bp],ax
27947                                           !BCC_EOS
27948                                           ! 3760         BX += 5;
27949                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
27950 745E           8B46         08            mov	ax,8[bp]
27951 7461           05                   0005  add	ax,*5
27952 7464           8946         08            mov	8[bp],ax
27953                                           !BCC_EOS
27954                                           ! 3761         for(i=1;i<=4;i++){
27955                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
27956 7467           B8                   0001  mov	ax,*1
27957 746A           8946         FE            mov	-2[bp],ax
27958                                           !BCC_EOS
27959                                           !BCC_EOS
27960 746D           EB           34            jmp .261
27961                       0000746F            .262:
27962                                           ! 3762             outb(0x3c4, i);
27963                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
27964 746F           FF76         FE            push	-2[bp]
27965                                           ! Debug: list int = const $3C4 (used reg = )
27966 7472           B8                   03C4  mov	ax,#$3C4
27967 7475           50                         push	ax
27968                                           ! Debug: func () void = outb+0 (used reg = )
27969 7476           E8         06E8            call	_outb
27970 7479           83C4                   04  add	sp,*4
27971                                           !BCC_EOS
27972                                           ! 3763             outb(0x3c5, read_byte(ES, BX)); BX++;
27973                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27974 747C           FF76         08            push	8[bp]
27975                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27976 747F           FF76         06            push	6[bp]
27977                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27978 7482           E8         0670            call	_read_byte
27979 7485           83C4                   04  add	sp,*4
27980                                           ! Debug: list unsigned char = al+0 (used reg = )
27981 7488           30E4                       xor	ah,ah
27982 748A           50                         push	ax
27983                                           ! Debug: list int = const $3C5 (used reg = )
27984 748B           B8                   03C5  mov	ax,#$3C5
27985 748E           50                         push	ax
27986                                           ! Debug: func () void = outb+0 (used reg = )
27987 748F           E8         06CF            call	_outb
27988 7492           83C4                   04  add	sp,*4
27989                                           !BCC_EOS
27990                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
27991 7495           8B46         08            mov	ax,8[bp]
27992 7498           40                         inc	ax
27993 7499           8946         08            mov	8[bp],ax
27994                                           !BCC_EOS
27995                                           ! 3764         }
27996                                           ! 3765         outb(0x3c4, 0);
27997                       0000749C            .260:
27998                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
27999 749C           8B46         FE            mov	ax,-2[bp]
28000 749F           40                         inc	ax
28001 74A0           8946         FE            mov	-2[bp],ax
28002                       000074A3            .261:
28003                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28004 74A3           8B46         FE            mov	ax,-2[bp]
28005 74A6           3D                   0004  cmp	ax,*4
28006 74A9           76           C4            jbe	.262
28007                       000074AB            .263:
28008                       000074AB            .25F:
28009                                           ! Debug: list int = const 0 (used reg = )
28010 74AB           31C0                       xor	ax,ax
28011 74AD           50                         push	ax
28012                                           ! Debug: list int = const $3C4 (used reg = )
28013 74AE           B8                   03C4  mov	ax,#$3C4
28014 74B1           50                         push	ax
28015                                           ! Debug: func () void = outb+0 (used reg = )
28016 74B2           E8         06AC            call	_outb
28017 74B5           83C4                   04  add	sp,*4
28018                                           !BCC_EOS
28019                                           ! 3766         outb(0x3c5, read_byte(ES, BX)); BX++;
28020                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28021 74B8           FF76         08            push	8[bp]
28022                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28023 74BB           FF76         06            push	6[bp]
28024                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28025 74BE           E8         0634            call	_read_byte
28026 74C1           83C4                   04  add	sp,*4
28027                                           ! Debug: list unsigned char = al+0 (used reg = )
28028 74C4           30E4                       xor	ah,ah
28029 74C6           50                         push	ax
28030                                           ! Debug: list int = const $3C5 (used reg = )
28031 74C7           B8                   03C5  mov	ax,#$3C5
28032 74CA           50                         push	ax
28033                                           ! Debug: func () void = outb+0 (used reg = )
28034 74CB           E8         0693            call	_outb
28035 74CE           83C4                   04  add	sp,*4
28036                                           !BCC_EOS
28037                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28038 74D1           8B46         08            mov	ax,8[bp]
28039 74D4           40                         inc	ax
28040 74D5           8946         08            mov	8[bp],ax
28041                                           !BCC_EOS
28042                                           ! 3767         outw(crtc_addr,0x0011);
28043                                           ! Debug: list int = const $11 (used reg = )
28044 74D8           B8                   0011  mov	ax,*$11
28045 74DB           50                         push	ax
28046                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28047 74DC           FF76         FC            push	-4[bp]
28048                                           ! Debug: func () void = outw+0 (used reg = )
28049 74DF           E8         068F            call	_outw
28050 74E2           83C4                   04  add	sp,*4
28051                                           !BCC_EOS
28052                                           ! 3768         for(i=0;i<=0x18;i++) {
28053                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28054 74E5           31C0                       xor	ax,ax
28055 74E7           8946         FE            mov	-2[bp],ax
28056                                           !BCC_EOS
28057                                           !BCC_EOS
28058 74EA           EB           3C            jmp .266
28059                       000074EC            .267:
28060                                           ! 3769             if (i != 0x11) {
28061                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28062 74EC           8B46         FE            mov	ax,-2[bp]
28063 74EF           3D                   0011  cmp	ax,*$11
28064 74F2           74           26            je  	.268
28065                       000074F4            .269:
28066                                           ! 3770                 outb(crtc_addr,i);
28067                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28068 74F4           FF76         FE            push	-2[bp]
28069                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28070 74F7           FF76         FC            push	-4[bp]
28071                                           ! Debug: func () void = outb+0 (used reg = )
28072 74FA           E8         0664            call	_outb
28073 74FD           83C4                   04  add	sp,*4
28074                                           !BCC_EOS
28075                                           ! 3771                 outb(crtc_addr+1, read_byte(
28076                                           ! 3771 ES, BX));
28077                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28078 7500           FF76         08            push	8[bp]
28079                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28080 7503           FF76         06            push	6[bp]
28081                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28082 7506           E8         05EC            call	_read_byte
28083 7509           83C4                   04  add	sp,*4
28084                                           ! Debug: list unsigned char = al+0 (used reg = )
28085 750C           30E4                       xor	ah,ah
28086 750E           50                         push	ax
28087                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28088 750F           8B46         FC            mov	ax,-4[bp]
28089                                           ! Debug: list unsigned int = ax+1 (used reg = )
28090 7512           40                         inc	ax
28091 7513           50                         push	ax
28092                                           ! Debug: func () void = outb+0 (used reg = )
28093 7514           E8         064A            call	_outb
28094 7517           83C4                   04  add	sp,*4
28095                                           !BCC_EOS
28096                                           ! 3772             }
28097                                           ! 3773             BX++;
28098                       0000751A            .268:
28099                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28100 751A           8B46         08            mov	ax,8[bp]
28101 751D           40                         inc	ax
28102 751E           8946         08            mov	8[bp],ax
28103                                           !BCC_EOS
28104                                           ! 3774         }
28105                                           ! 3775         v = inb(0x3cc) & ~0x01;
28106                       00007521            .265:
28107                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28108 7521           8B46         FE            mov	ax,-2[bp]
28109 7524           40                         inc	ax
28110 7525           8946         FE            mov	-2[bp],ax
28111                       00007528            .266:
28112                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28113 7528           8B46         FE            mov	ax,-2[bp]
28114 752B           3D                   0018  cmp	ax,*$18
28115 752E           76           BC            jbe	.267
28116                       00007530            .26A:
28117                       00007530            .264:
28118                                           ! Debug: list int = const $3CC (used reg = )
28119 7530           B8                   03CC  mov	ax,#$3CC
28120 7533           50                         push	ax
28121                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28122 7534           E8         0614            call	_inb
28123 7537           44                         inc	sp
28124 7538           44                         inc	sp
28125                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28126 7539           24                     FE  and	al,#$FE
28127                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28128 753B           30E4                       xor	ah,ah
28129 753D           8946         FA            mov	-6[bp],ax
28130                                           !BCC_EOS
28131                                           ! 3776         if (crtc_addr = 0x3d4)
28132                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28133 7540           B8                   03D4  mov	ax,#$3D4
28134 7543           8946         FC            mov	-4[bp],ax
28135 7546           85C0                       test	ax,ax
28136 7548           74           08            je  	.26B
28137                       0000754A            .26C:
28138                                           ! 3777             v |= 0x01;
28139                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28140 754A           8B46         FA            mov	ax,-6[bp]
28141 754D           0C                     01  or	al,*1
28142 754F           8946         FA            mov	-6[bp],ax
28143                                           !BCC_EOS
28144                                           ! 3778         outb(0x3c2, v);
28145                       00007552            .26B:
28146                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28147 7552           FF76         FA            push	-6[bp]
28148                                           ! Debug: list int = const $3C2 (used reg = )
28149 7555           B8                   03C2  mov	ax,#$3C2
28150 7558           50                         push	ax
28151                                           ! Debug: func () void = outb+0 (used reg = )
28152 7559           E8         0605            call	_outb
28153 755C           83C4                   04  add	sp,*4
28154                                           !BCC_EOS
28155                                           ! 3779         outb(crtc_addr, 0x11);
28156                                           ! Debug: list int = const $11 (used reg = )
28157 755F           B8                   0011  mov	ax,*$11
28158 7562           50                         push	ax
28159                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28160 7563           FF76         FC            push	-4[bp]
28161                                           ! Debug: func () void = outb+0 (used reg = )
28162 7566           E8         05F8            call	_outb
28163 7569           83C4                   04  add	sp,*4
28164                                           !BCC_EOS
28165                                           ! 3780         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28166                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28167 756C           8B46         08            mov	ax,8[bp]
28168                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28169                                           ! Debug: list unsigned int = ax-7 (used reg = )
28170 756F           05                   FFF9  add	ax,*-7
28171 7572           50                         push	ax
28172                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28173 7573           FF76         06            push	6[bp]
28174                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28175 7576           E8         057C            call	_read_byte
28176 7579           83C4                   04  add	sp,*4
28177                                           ! Debug: list unsigned char = al+0 (used reg = )
28178 757C           30E4                       xor	ah,ah
28179 757E           50                         push	ax
28180                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28181 757F           8B46         FC            mov	ax,-4[bp]
28182                                           ! Debug: list unsigned int = ax+1 (used reg = )
28183 7582           40                         inc	ax
28184 7583           50                         push	ax
28185                                           ! Debug: func () void = outb+0 (used reg = )
28186 7584           E8         05DA            call	_outb
28187 7587           83C4                   04  add	sp,*4
28188                                           !BCC_EOS
28189                                           ! 3781         ar_index = read_byte(ES, addr1 + 0x03);
28190                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28191 758A           8B46         F8            mov	ax,-8[bp]
28192                                           ! Debug: list unsigned int = ax+3 (used reg = )
28193 758D           05                   0003  add	ax,*3
28194 7590           50                         push	ax
28195                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28196 7591           FF76         06            push	6[bp]
28197                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28198 7594           E8         055E            call	_read_byte
28199 7597           83C4                   04  add	sp,*4
28200                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28201 759A           30E4                       xor	ah,ah
28202 759C           8946         F6            mov	-$A[bp],ax
28203                                           !BCC_EOS
28204                                           ! 3782         inb(0x3da);
28205                                           ! Debug: list int = const $3DA (used reg = )
28206 759F           B8                   03DA  mov	ax,#$3DA
28207 75A2           50                         push	ax
28208                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28209 75A3           E8         05A5            call	_inb
28210 75A6           44                         inc	sp
28211 75A7           44                         inc	sp
28212                                           !BCC_EOS
28213                                           ! 3783         for(i=0;i<=0x13;i++) {
28214                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28215 75A8           31C0                       xor	ax,ax
28216 75AA           8946         FE            mov	-2[bp],ax
28217                                           !BCC_EOS
28218                                           !BCC_EOS
28219 75AD           EB           3C            jmp .26F
28220                       000075AF            .270:
28221                                           ! 3784             outb(0x3c0, i | (ar_index & 0x20));
28222                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28223 75AF           8A46         F6            mov	al,-$A[bp]
28224 75B2           24                     20  and	al,*$20
28225                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28226                                           ! Debug: expression subtree swapping
28227 75B4           30E4                       xor	ah,ah
28228 75B6           0B46         FE            or	ax,-2[bp]
28229                                           ! Debug: list unsigned int = ax+0 (used reg = )
28230 75B9           50                         push	ax
28231                                           ! Debug: list int = const $3C0 (used reg = )
28232 75BA           B8                   03C0  mov	ax,#$3C0
28233 75BD           50                         push	ax
28234                                           ! Debug: func () void = outb+0 (used reg = )
28235 75BE           E8         05A0            call	_outb
28236 75C1           83C4                   04  add	sp,*4
28237                                           !BCC_EOS
28238                                           ! 3785             outb(0x3c0, read_byte(ES, BX)); BX++;
28239                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28240 75C4           FF76         08            push	8[bp]
28241                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28242 75C7           FF76         06            push	6[bp]
28243                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28244 75CA           E8         0528            call	_read_byte
28245 75CD           83C4                   04  add	sp,*4
28246                                           ! Debug: list unsigned char = al+0 (used reg = )
28247 75D0           30E4                       xor	ah,ah
28248 75D2           50                         push	ax
28249                                           ! Debug: list int = const $3C0 (used reg = )
28250 75D3           B8                   03C0  mov	ax,#$3C0
28251 75D6           50                         push	ax
28252                                           ! Debug: func () void = outb+0 (used reg = )
28253 75D7           E8         0587            call	_outb
28254 75DA           83C4                   04  add	sp,*4
28255                                           !BCC_EOS
28256                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28257 75DD           8B46         08            mov	ax,8[bp]
28258 75E0           40                         inc	ax
28259 75E1           8946         08            mov	8[bp],ax
28260                                           !BCC_EOS
28261                                           ! 3786         }
28262                                           ! 3787         outb(0x3c0, ar_index);
28263                       000075E4            .26E:
28264                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28265 75E4           8B46         FE            mov	ax,-2[bp]
28266 75E7           40                         inc	ax
28267 75E8           8946         FE            mov	-2[bp],ax
28268                       000075EB            .26F:
28269                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28270 75EB           8B46         FE            mov	ax,-2[bp]
28271 75EE           3D                   0013  cmp	ax,*$13
28272 75F1           76           BC            jbe	.270
28273                       000075F3            .271:
28274                       000075F3            .26D:
28275                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28276 75F3           FF76         F6            push	-$A[bp]
28277                                           ! Debug: list int = const $3C0 (used reg = )
28278 75F6           B8                   03C0  mov	ax,#$3C0
28279 75F9           50                         push	ax
28280                                           ! Debug: func () void = outb+0 (used reg = )
28281 75FA           E8         0564            call	_outb
28282 75FD           83C4                   04  add	sp,*4
28283                                           !BCC_EOS
28284                                           ! 3788         inb(0x3da);
28285                                           ! Debug: list int = const $3DA (used reg = )
28286 7600           B8                   03DA  mov	ax,#$3DA
28287 7603           50                         push	ax
28288                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28289 7604           E8         0544            call	_inb
28290 7607           44                         inc	sp
28291 7608           44                         inc	sp
28292                                           !BCC_EOS
28293                                           ! 3789         for(i=0;i<=8;i++) {
28294                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28295 7609           31C0                       xor	ax,ax
28296 760B           8946         FE            mov	-2[bp],ax
28297                                           !BCC_EOS
28298                                           !BCC_EOS
28299 760E           EB           34            jmp .274
28300                       00007610            .275:
28301                                           ! 3790             outb(0x3ce,i);
28302                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28303 7610           FF76         FE            push	-2[bp]
28304                                           ! Debug: list int = const $3CE (used reg = )
28305 7613           B8                   03CE  mov	ax,#$3CE
28306 7616           50                         push	ax
28307                                           ! Debug: func () void = outb+0 (used reg = )
28308 7617           E8         0547            call	_outb
28309 761A           83C4                   04  add	sp,*4
28310                                           !BCC_EOS
28311                                           ! 3791             outb(0x3cf, read_byte(ES, BX)); BX++;
28312                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28313 761D           FF76         08            push	8[bp]
28314                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28315 7620           FF76         06            push	6[bp]
28316                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28317 7623           E8         04CF            call	_read_byte
28318 7626           83C4                   04  add	sp,*4
28319                                           ! Debug: list unsigned char = al+0 (used reg = )
28320 7629           30E4                       xor	ah,ah
28321 762B           50                         push	ax
28322                                           ! Debug: list int = const $3CF (used reg = )
28323 762C           B8                   03CF  mov	ax,#$3CF
28324 762F           50                         push	ax
28325                                           ! Debug: func () void = outb+0 (used reg = )
28326 7630           E8         052E            call	_outb
28327 7633           83C4                   04  add	sp,*4
28328                                           !BCC_EOS
28329                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28330 7636           8B46         08            mov	ax,8[bp]
28331 7639           40                         inc	ax
28332 763A           8946         08            mov	8[bp],ax
28333                                           !BCC_EOS
28334                                           ! 3792         }
28335                                           ! 3793         BX += 2;
28336                       0000763D            .273:
28337                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28338 763D           8B46         FE            mov	ax,-2[bp]
28339 7640           40                         inc	ax
28340 7641           8946         FE            mov	-2[bp],ax
28341                       00007644            .274:
28342                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28343 7644           8B46         FE            mov	ax,-2[bp]
28344 7647           3D                   0008  cmp	ax,*8
28345 764A           76           C4            jbe	.275
28346                       0000764C            .276:
28347                       0000764C            .272:
28348                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28349 764C           8B46         08            mov	ax,8[bp]
28350 764F           40                         inc	ax
28351 7650           40                         inc	ax
28352 7651           8946         08            mov	8[bp],ax
28353                                           !BCC_EOS
28354                                           ! 3794         BX += 4;
28355                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28356 7654           8B46         08            mov	ax,8[bp]
28357 7657           05                   0004  add	ax,*4
28358 765A           8946         08            mov	8[bp],ax
28359                                           !BCC_EOS
28360                                           ! 3795         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28361                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28362 765D           FF76         F8            push	-8[bp]
28363                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28364 7660           FF76         06            push	6[bp]
28365                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28366 7663           E8         048F            call	_read_byte
28367 7666           83C4                   04  add	sp,*4
28368                                           ! Debug: list unsigned char = al+0 (used reg = )
28369 7669           30E4                       xor	ah,ah
28370 766B           50                         push	ax
28371                                           ! Debug: list int = const $3C4 (used reg = )
28372 766C           B8                   03C4  mov	ax,#$3C4
28373 766F           50                         push	ax
28374                                           ! Debug: func () void = outb+0 (used reg = )
28375 7670           E8         04EE            call	_outb
28376 7673           83C4                   04  add	sp,*4
28377                                           !BCC_EOS
28378                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28379 7676           8B46         F8            mov	ax,-8[bp]
28380 7679           40                         inc	ax
28381 767A           8946         F8            mov	-8[bp],ax
28382                                           !BCC_EOS
28383                                           ! 3796         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28384                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28385 767D           FF76         F8            push	-8[bp]
28386                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28387 7680           FF76         06            push	6[bp]
28388                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28389 7683           E8         046F            call	_read_byte
28390 7686           83C4                   04  add	sp,*4
28391                                           ! Debug: list unsigned char = al+0 (used reg = )
28392 7689           30E4                       xor	ah,ah
28393 768B           50                         push	ax
28394                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28395 768C           FF76         FC            push	-4[bp]
28396                                           ! Debug: func () void = outb+0 (used reg = )
28397 768F           E8         04CF            call	_outb
28398 7692           83C4                   04  add	sp,*4
28399                                           !BCC_EOS
28400                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28401 7695           8B46         F8            mov	ax,-8[bp]
28402 7698           40                         inc	ax
28403 7699           8946         F8            mov	-8[bp],ax
28404                                           !BCC_EOS
28405                                           ! 3797         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28406                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28407 769C           FF76         F8            push	-8[bp]
28408                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28409 769F           FF76         06            push	6[bp]
28410                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28411 76A2           E8         0450            call	_read_byte
28412 76A5           83C4                   04  add	sp,*4
28413                                           ! Debug: list unsigned char = al+0 (used reg = )
28414 76A8           30E4                       xor	ah,ah
28415 76AA           50                         push	ax
28416                                           ! Debug: list int = const $3CE (used reg = )
28417 76AB           B8                   03CE  mov	ax,#$3CE
28418 76AE           50                         push	ax
28419                                           ! Debug: func () void = outb+0 (used reg = )
28420 76AF           E8         04AF            call	_outb
28421 76B2           83C4                   04  add	sp,*4
28422                                           !BCC_EOS
28423                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28424 76B5           8B46         F8            mov	ax,-8[bp]
28425 76B8           40                         inc	ax
28426 76B9           8946         F8            mov	-8[bp],ax
28427                                           !BCC_EOS
28428                                           ! 3798         addr1++;
28429                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28430 76BC           8B46         F8            mov	ax,-8[bp]
28431 76BF           40                         inc	ax
28432 76C0           8946         F8            mov	-8[bp],ax
28433                                           !BCC_EOS
28434                                           ! 3799         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28435                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28436 76C3           FF76         F8            push	-8[bp]
28437                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28438 76C6           FF76         06            push	6[bp]
28439                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28440 76C9           E8         0429            call	_read_byte
28441 76CC           83C4                   04  add	sp,*4
28442                                           ! Debug: list unsigned char = al+0 (used reg = )
28443 76CF           30E4                       xor	ah,ah
28444 76D1           50                         push	ax
28445                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28446 76D2           8B46         FC            mov	ax,-4[bp]
28447                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28448                                           ! Debug: list unsigned int = ax+6 (used reg = )
28449 76D5           05                   0006  add	ax,*6
28450 76D8           50                         push	ax
28451                                           ! Debug: func () void = outb+0 (used reg = )
28452 76D9           E8         0485            call	_outb
28453 76DC           83C4                   04  add	sp,*4
28454                                           !BCC_EOS
28455                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28456 76DF           8B46         F8            mov	ax,-8[bp]
28457 76E2           40                         inc	ax
28458 76E3           8946         F8            mov	-8[bp],ax
28459                                           !BCC_EOS
28460                                           ! 3800     }
28461                                           ! 3801     if (CX & 2) {
28462                       000076E6            .25D:
28463                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28464 76E6           8A46         04            mov	al,4[bp]
28465 76E9           24                     02  and	al,*2
28466 76EB           84C0                       test	al,al
28467 76ED         0F84         0270            beq 	.277
28468                       000076F1            .278:
28469                                           ! 3802         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28470                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28471 76F1           FF76         08            push	8[bp]
28472                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28473 76F4           FF76         06            push	6[bp]
28474                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28475 76F7           E8         03FB            call	_read_byte
28476 76FA           83C4                   04  add	sp,*4
28477                                           ! Debug: list unsigned char = al+0 (used reg = )
28478 76FD           30E4                       xor	ah,ah
28479 76FF           50                         push	ax
28480                                           ! Debug: list int = const $49 (used reg = )
28481 7700           B8                   0049  mov	ax,*$49
28482 7703           50                         push	ax
28483                                           ! Debug: list int = const $40 (used reg = )
28484 7704           B8                   0040  mov	ax,*$40
28485 7707           50                         push	ax
28486                                           ! Debug: func () void = write_byte+0 (used reg = )
28487 7708           E8         0410            call	_write_byte
28488 770B           83C4                   06  add	sp,*6
28489                                           !BCC_EOS
28490                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28491 770E           8B46         08            mov	ax,8[bp]
28492 7711           40                         inc	ax
28493 7712           8946         08            mov	8[bp],ax
28494                                           !BCC_EOS
28495                                           ! 3803         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28496                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28497 7715           FF76         08            push	8[bp]
28498                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28499 7718           FF76         06            push	6[bp]
28500                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28501 771B           E8         03EA            call	_read_word
28502 771E           83C4                   04  add	sp,*4
28503                                           ! Debug: list unsigned short = ax+0 (used reg = )
28504 7721           50                         push	ax
28505                                           ! Debug: list int = const $4A (used reg = )
28506 7722           B8                   004A  mov	ax,*$4A
28507 7725           50                         push	ax
28508                                           ! Debug: list int = const $40 (used reg = )
28509 7726           B8                   0040  mov	ax,*$40
28510 7729           50                         push	ax
28511                                           ! Debug: func () void = write_word+0 (used reg = )
28512 772A           E8         0406            call	_write_word
28513 772D           83C4                   06  add	sp,*6
28514                                           !BCC_EOS
28515                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28516 7730           8B46         08            mov	ax,8[bp]
28517 7733           40                         inc	ax
28518 7734           40                         inc	ax
28519 7735           8946         08            mov	8[bp],ax
28520                                           !BCC_EOS
28521                                           ! 3804         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28522                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28523 7738           FF76         08            push	8[bp]
28524                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28525 773B           FF76         06            push	6[bp]
28526                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28527 773E           E8         03C7            call	_read_word
28528 7741           83C4                   04  add	sp,*4
28529                                           ! Debug: list unsigned short = ax+0 (used reg = )
28530 7744           50                         push	ax
28531                                           ! Debug: list int = const $4C (used reg = )
28532 7745           B8                   004C  mov	ax,*$4C
28533 7748           50                         push	ax
28534                                           ! Debug: list int = const $40 (used reg = )
28535 7749           B8                   0040  mov	ax,*$40
28536 774C           50                         push	ax
28537                                           ! Debug: func () void = write_word+0 (used reg = )
28538 774D           E8         03E3            call	_write_word
28539 7750           83C4                   06  add	sp,*6
28540                                           !BCC_EOS
28541                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28542 7753           8B46         08            mov	ax,8[bp]
28543 7756           40                         inc	ax
28544 7757           40                         inc	ax
28545 7758           8946         08            mov	8[bp],ax
28546                                           !BCC_EOS
28547                                           ! 3805         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28548                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28549 775B           FF76         08            push	8[bp]
28550                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28551 775E           FF76         06            push	6[bp]
28552                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28553 7761           E8         03A4            call	_read_word
28554 7764           83C4                   04  add	sp,*4
28555                                           ! Debug: list unsigned short = ax+0 (used reg = )
28556 7767           50                         push	ax
28557                                           ! Debug: list int = const $63 (used reg = )
28558 7768           B8                   0063  mov	ax,*$63
28559 776B           50                         push	ax
28560                                           ! Debug: list int = const $40 (used reg = )
28561 776C           B8                   0040  mov	ax,*$40
28562 776F           50                         push	ax
28563                                           ! Debug: func () void = write_word+0 (used reg = )
28564 7770           E8         03C0            call	_write_word
28565 7773           83C4                   06  add	sp,*6
28566                                           !BCC_EOS
28567                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28568 7776           8B46         08            mov	ax,8[bp]
28569 7779           40                         inc	ax
28570 777A           40                         inc	ax
28571 777B           8946         08            mov	8[bp],ax
28572                                           !BCC_EOS
28573                                           ! 3806         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
28574                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28575 777E           FF76         08            push	8[bp]
28576                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28577 7781           FF76         06            push	6[bp]
28578                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28579 7784           E8         036E            call	_read_byte
28580 7787           83C4                   04  add	sp,*4
28581                                           ! Debug: list unsigned char = al+0 (used reg = )
28582 778A           30E4                       xor	ah,ah
28583 778C           50                         push	ax
28584                                           ! Debug: list int = const $84 (used reg = )
28585 778D           B8                   0084  mov	ax,#$84
28586 7790           50                         push	ax
28587                                           ! Debug: list int = const $40 (used reg = )
28588 7791           B8                   0040  mov	ax,*$40
28589 7794           50                         push	ax
28590                                           ! Debug: func () void = write_byte+0 (used reg = )
28591 7795           E8         0383            call	_write_byte
28592 7798           83C4                   06  add	sp,*6
28593                                           !BCC_EOS
28594                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28595 779B           8B46         08            mov	ax,8[bp]
28596 779E           40                         inc	ax
28597 779F           8946         08            mov	8[bp],ax
28598                                           !BCC_EOS
28599                                           ! 3807         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
28600                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28601 77A2           FF76         08            push	8[bp]
28602                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28603 77A5           FF76         06            push	6[bp]
28604                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28605 77A8           E8         035D            call	_read_word
28606 77AB           83C4                   04  add	sp,*4
28607                                           ! Debug: list unsigned short = ax+0 (used reg = )
28608 77AE           50                         push	ax
28609                                           ! Debug: list int = const $85 (used reg = )
28610 77AF           B8                   0085  mov	ax,#$85
28611 77B2           50                         push	ax
28612                                           ! Debug: list int = const $40 (used reg = )
28613 77B3           B8                   0040  mov	ax,*$40
28614 77B6           50                         push	ax
28615                                           ! Debug: func () void = write_word+0 (used reg = )
28616 77B7           E8         0379            call	_write_word
28617 77BA           83C4                   06  add	sp,*6
28618                                           !BCC_EOS
28619                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28620 77BD           8B46         08            mov	ax,8[bp]
28621 77C0           40                         inc	ax
28622 77C1           40                         inc	ax
28623 77C2           8946         08            mov	8[bp],ax
28624                                           !BCC_EOS
28625                                           ! 3808         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
28626                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28627 77C5           FF76         08            push	8[bp]
28628                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28629 77C8           FF76         06            push	6[bp]
28630                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28631 77CB           E8         0327            call	_read_byte
28632 77CE           83C4                   04  add	sp,*4
28633                                           ! Debug: list unsigned char = al+0 (used reg = )
28634 77D1           30E4                       xor	ah,ah
28635 77D3           50                         push	ax
28636                                           ! Debug: list int = const $87 (used reg = )
28637 77D4           B8                   0087  mov	ax,#$87
28638 77D7           50                         push	ax
28639                                           ! Debug: list int = const $40 (used reg = )
28640 77D8           B8                   0040  mov	ax,*$40
28641 77DB           50                         push	ax
28642                                           ! Debug: func () void = write_byte+0 (used reg = )
28643 77DC           E8         033C            call	_write_byte
28644 77DF           83C4                   06  add	sp,*6
28645                                           !BCC_EOS
28646                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28647 77E2           8B46         08            mov	ax,8[bp]
28648 77E5           40                         inc	ax
28649 77E6           8946         08            mov	8[bp],ax
28650                                           !BCC_EOS
28651                                           ! 3809         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
28652                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28653 77E9           FF76         08            push	8[bp]
28654                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28655 77EC           FF76         06            push	6[bp]
28656                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28657 77EF           E8         0303            call	_read_byte
28658 77F2           83C4                   04  add	sp,*4
28659                                           ! Debug: list unsigned char = al+0 (used reg = )
28660 77F5           30E4                       xor	ah,ah
28661 77F7           50                         push	ax
28662                                           ! Debug: list int = const $88 (used reg = )
28663 77F8           B8                   0088  mov	ax,#$88
28664 77FB           50                         push	ax
28665                                           ! Debug: list int = const $40 (used reg = )
28666 77FC           B8                   0040  mov	ax,*$40
28667 77FF           50                         push	ax
28668                                           ! Debug: func () void = write_byte+0 (used reg = )
28669 7800           E8         0318            call	_write_byte
28670 7803           83C4                   06  add	sp,*6
28671                                           !BCC_EOS
28672                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28673 7806           8B46         08            mov	ax,8[bp]
28674 7809           40                         inc	ax
28675 780A           8946         08            mov	8[bp],ax
28676                                           !BCC_EOS
28677                                           ! 3810         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
28678                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28679 780D           FF76         08            push	8[bp]
28680                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28681 7810           FF76         06            push	6[bp]
28682                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28683 7813           E8         02DF            call	_read_byte
28684 7816           83C4                   04  add	sp,*4
28685                                           ! Debug: list unsigned char = al+0 (used reg = )
28686 7819           30E4                       xor	ah,ah
28687 781B           50                         push	ax
28688                                           ! Debug: list int = const $89 (used reg = )
28689 781C           B8                   0089  mov	ax,#$89
28690 781F           50                         push	ax
28691                                           ! Debug: list int = const $40 (used reg = )
28692 7820           B8                   0040  mov	ax,*$40
28693 7823           50                         push	ax
28694                                           ! Debug: func () void = write_byte+0 (used reg = )
28695 7824           E8         02F4            call	_write_byte
28696 7827           83C4                   06  add	sp,*6
28697                                           !BCC_EOS
28698                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28699 782A           8B46         08            mov	ax,8[bp]
28700 782D           40                         inc	ax
28701 782E           8946         08            mov	8[bp],ax
28702                                           !BCC_EOS
28703                                           ! 3811         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
28704                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28705 7831           FF76         08            push	8[bp]
28706                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28707 7834           FF76         06            push	6[bp]
28708                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28709 7837           E8         02CE            call	_read_word
28710 783A           83C4                   04  add	sp,*4
28711                                           ! Debug: list unsigned short = ax+0 (used reg = )
28712 783D           50                         push	ax
28713                                           ! Debug: list int = const $60 (used reg = )
28714 783E           B8                   0060  mov	ax,*$60
28715 7841           50                         push	ax
28716                                           ! Debug: list int = const $40 (used reg = )
28717 7842           B8                   0040  mov	ax,*$40
28718 7845           50                         push	ax
28719                                           ! Debug: func () void = write_word+0 (used reg = )
28720 7846           E8         02EA            call	_write_word
28721 7849           83C4                   06  add	sp,*6
28722                                           !BCC_EOS
28723                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28724 784C           8B46         08            mov	ax,8[bp]
28725 784F           40                         inc	ax
28726 7850           40                         inc	ax
28727 7851           8946         08            mov	8[bp],ax
28728                                           !BCC_EOS
28729                                           ! 3812         for(i=0;i<8;i++) {
28730                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28731 7854           31C0                       xor	ax,ax
28732 7856           8946         FE            mov	-2[bp],ax
28733                                           !BCC_EOS
28734                                           !BCC_EOS
28735 7859           EB           2F            jmp .27B
28736                       0000785B            .27C:
28737                                           ! 3813             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
28738                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28739 785B           FF76         08            push	8[bp]
28740                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28741 785E           FF76         06            push	6[bp]
28742                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28743 7861           E8         02A4            call	_read_word
28744 7864           83C4                   04  add	sp,*4
28745                                           ! Debug: list unsigned short = ax+0 (used reg = )
28746 7867           50                         push	ax
28747                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
28748                                           ! Debug: expression subtree swapping
28749 7868           8B46         FE            mov	ax,-2[bp]
28750 786B           D1E0                       shl	ax,*1
28751                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28752                                           ! Debug: expression subtree swapping
28753                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28754 786D           05                   0050  add	ax,*$50
28755 7870           50                         push	ax
28756                                           ! Debug: list int = const $40 (used reg = )
28757 7871           B8                   0040  mov	ax,*$40
28758 7874           50                         push	ax
28759                                           ! Debug: func () void = write_word+0 (used reg = )
28760 7875           E8         02BB            call	_write_word
28761 7878           83C4                   06  add	sp,*6
28762                                           !BCC_EOS
28763                                           ! 3814             BX += 2;
28764                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28765 787B           8B46         08            mov	ax,8[bp]
28766 787E           40                         inc	ax
28767 787F           40                         inc	ax
28768 7880           8946         08            mov	8[bp],ax
28769                                           !BCC_EOS
28770                                           ! 3815         }
28771                                           ! 3816         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
28772                       00007883            .27A:
28773                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28774 7883           8B46         FE            mov	ax,-2[bp]
28775 7886           40                         inc	ax
28776 7887           8946         FE            mov	-2[bp],ax
28777                       0000788A            .27B:
28778                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28779 788A           8B46         FE            mov	ax,-2[bp]
28780 788D           3D                   0008  cmp	ax,*8
28781 7890           72           C9            jb 	.27C
28782                       00007892            .27D:
28783                       00007892            .279:
28784                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28785 7892           FF76         08            push	8[bp]
28786                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28787 7895           FF76         06            push	6[bp]
28788                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28789 7898           E8         026D            call	_read_word
28790 789B           83C4                   04  add	sp,*4
28791                                           ! Debug: list unsigned short = ax+0 (used reg = )
28792 789E           50                         push	ax
28793                                           ! Debug: list int = const $4E (used reg = )
28794 789F           B8                   004E  mov	ax,*$4E
28795 78A2           50                         push	ax
28796                                           ! Debug: list int = const $40 (used reg = )
28797 78A3           B8                   0040  mov	ax,*$40
28798 78A6           50                         push	ax
28799                                           ! Debug: func () void = write_word+0 (used reg = )
28800 78A7           E8         0289            call	_write_word
28801 78AA           83C4                   06  add	sp,*6
28802                                           !BCC_EOS
28803                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28804 78AD           8B46         08            mov	ax,8[bp]
28805 78B0           40                         inc	ax
28806 78B1           40                         inc	ax
28807 78B2           8946         08            mov	8[bp],ax
28808                                           !BCC_EOS
28809                                           ! 3817         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
28810                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28811 78B5           FF76         08            push	8[bp]
28812                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28813 78B8           FF76         06            push	6[bp]
28814                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28815 78BB           E8         0237            call	_read_byte
28816 78BE           83C4                   04  add	sp,*4
28817                                           ! Debug: list unsigned char = al+0 (used reg = )
28818 78C1           30E4                       xor	ah,ah
28819 78C3           50                         push	ax
28820                                           ! Debug: list int = const $62 (used reg = )
28821 78C4           B8                   0062  mov	ax,*$62
28822 78C7           50                         push	ax
28823                                           ! Debug: list int = const $40 (used reg = )
28824 78C8           B8                   0040  mov	ax,*$40
28825 78CB           50                         push	ax
28826                                           ! Debug: func () void = write_byte+0 (used reg = )
28827 78CC           E8         024C            call	_write_byte
28828 78CF           83C4                   06  add	sp,*6
28829                                           !BCC_EOS
28830                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28831 78D2           8B46         08            mov	ax,8[bp]
28832 78D5           40                         inc	ax
28833 78D6           8946         08            mov	8[bp],ax
28834                                           !BCC_EOS
28835                                           ! 3818         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
28836                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28837 78D9           FF76         08            push	8[bp]
28838                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28839 78DC           FF76         06            push	6[bp]
28840                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28841 78DF           E8         0226            call	_read_word
28842 78E2           83C4                   04  add	sp,*4
28843                                           ! Debug: list unsigned short = ax+0 (used reg = )
28844 78E5           50                         push	ax
28845                                           ! Debug: list int = const $7C (used reg = )
28846 78E6           B8                   007C  mov	ax,*$7C
28847 78E9           50                         push	ax
28848                                           ! Debug: list int = const 0 (used reg = )
28849 78EA           31C0                       xor	ax,ax
28850 78EC           50                         push	ax
28851                                           ! Debug: func () void = write_word+0 (used reg = )
28852 78ED           E8         0243            call	_write_word
28853 78F0           83C4                   06  add	sp,*6
28854                                           !BCC_EOS
28855                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28856 78F3           8B46         08            mov	ax,8[bp]
28857 78F6           40                         inc	ax
28858 78F7           40                         inc	ax
28859 78F8           8946         08            mov	8[bp],ax
28860                                           !BCC_EOS
28861                                           ! 3819         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
28862                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28863 78FB           FF76         08            push	8[bp]
28864                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28865 78FE           FF76         06            push	6[bp]
28866                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28867 7901           E8         0204            call	_read_word
28868 7904           83C4                   04  add	sp,*4
28869                                           ! Debug: list unsigned short = ax+0 (used reg = )
28870 7907           50                         push	ax
28871                                           ! Debug: list int = const $7E (used reg = )
28872 7908           B8                   007E  mov	ax,*$7E
28873 790B           50                         push	ax
28874                                           ! Debug: list int = const 0 (used reg = )
28875 790C           31C0                       xor	ax,ax
28876 790E           50                         push	ax
28877                                           ! Debug: func () void = write_word+0 (used reg = )
28878 790F           E8         0221            call	_write_word
28879 7912           83C4                   06  add	sp,*6
28880                                           !BCC_EOS
28881                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28882 7915           8B46         08            mov	ax,8[bp]
28883 7918           40                         inc	ax
28884 7919           40                         inc	ax
28885 791A           8946         08            mov	8[bp],ax
28886                                           !BCC_EOS
28887                                           ! 3820         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
28888                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28889 791D           FF76         08            push	8[bp]
28890                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28891 7920           FF76         06            push	6[bp]
28892                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28893 7923           E8         01E2            call	_read_word
28894 7926           83C4                   04  add	sp,*4
28895                                           ! Debug: list unsigned short = ax+0 (used reg = )
28896 7929           50                         push	ax
28897                                           ! Debug: list int = const $10C (used reg = )
28898 792A           B8                   010C  mov	ax,#$10C
28899 792D           50                         push	ax
28900                                           ! Debug: list int = const 0 (used reg = )
28901 792E           31C0                       xor	ax,ax
28902 7930           50                         push	ax
28903                                           ! Debug: func () void = write_word+0 (used reg = )
28904 7931           E8         01FF            call	_write_word
28905 7934           83C4                   06  add	sp,*6
28906                                           !BCC_EOS
28907                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28908 7937           8B46         08            mov	ax,8[bp]
28909 793A           40                         inc	ax
28910 793B           40                         inc	ax
28911 793C           8946         08            mov	8[bp],ax
28912                                           !BCC_EOS
28913                                           ! 3821         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
28914                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28915 793F           FF76         08            push	8[bp]
28916                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28917 7942           FF76         06            push	6[bp]
28918                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28919 7945           E8         01C0            call	_read_word
28920 7948           83C4                   04  add	sp,*4
28921                                           ! Debug: list unsigned short = ax+0 (used reg = )
28922 794B           50                         push	ax
28923                                           ! Debug: list int = const $10E (used reg = )
28924 794C           B8                   010E  mov	ax,#$10E
28925 794F           50                         push	ax
28926                                           ! Debug: list int = const 0 (used reg = )
28927 7950           31C0                       xor	ax,ax
28928 7952           50                         push	ax
28929                                           ! Debug: func () void = write_word+0 (used reg = )
28930 7953           E8         01DD            call	_write_word
28931 7956           83C4                   06  add	sp,*6
28932                                           !BCC_EOS
28933                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28934 7959           8B46         08            mov	ax,8[bp]
28935 795C           40                         inc	ax
28936 795D           40                         inc	ax
28937 795E           8946         08            mov	8[bp],ax
28938                                           !BCC_EOS
28939                                           ! 3822     }
28940                                           ! 3823     if (CX & 4) {
28941                       00007961            .277:
28942                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
28943 7961           8A46         04            mov	al,4[bp]
28944 7964           24                     04  and	al,*4
28945 7966           84C0                       test	al,al
28946 7968         0F84         0096            beq 	.27E
28947                       0000796C            .27F:
28948                                           ! 3824         BX++;
28949                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28950 796C           8B46         08            mov	ax,8[bp]
28951 796F           40                         inc	ax
28952 7970           8946         08            mov	8[bp],ax
28953                                           !BCC_EOS
28954                                           ! 3825         v = read_byte
28955                                           ! 3825 (ES, BX); BX++;
28956                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28957 7973           FF76         08            push	8[bp]
28958                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28959 7976           FF76         06            push	6[bp]
28960                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28961 7979           E8         0179            call	_read_byte
28962 797C           83C4                   04  add	sp,*4
28963                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28964 797F           30E4                       xor	ah,ah
28965 7981           8946         FA            mov	-6[bp],ax
28966                                           !BCC_EOS
28967                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28968 7984           8B46         08            mov	ax,8[bp]
28969 7987           40                         inc	ax
28970 7988           8946         08            mov	8[bp],ax
28971                                           !BCC_EOS
28972                                           ! 3826         outb(0x3c6, read_byte(ES, BX)); BX++;
28973                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28974 798B           FF76         08            push	8[bp]
28975                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28976 798E           FF76         06            push	6[bp]
28977                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28978 7991           E8         0161            call	_read_byte
28979 7994           83C4                   04  add	sp,*4
28980                                           ! Debug: list unsigned char = al+0 (used reg = )
28981 7997           30E4                       xor	ah,ah
28982 7999           50                         push	ax
28983                                           ! Debug: list int = const $3C6 (used reg = )
28984 799A           B8                   03C6  mov	ax,#$3C6
28985 799D           50                         push	ax
28986                                           ! Debug: func () void = outb+0 (used reg = )
28987 799E           E8         01C0            call	_outb
28988 79A1           83C4                   04  add	sp,*4
28989                                           !BCC_EOS
28990                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28991 79A4           8B46         08            mov	ax,8[bp]
28992 79A7           40                         inc	ax
28993 79A8           8946         08            mov	8[bp],ax
28994                                           !BCC_EOS
28995                                           ! 3827         outb(0x3c8,0x00);
28996                                           ! Debug: list int = const 0 (used reg = )
28997 79AB           31C0                       xor	ax,ax
28998 79AD           50                         push	ax
28999                                           ! Debug: list int = const $3C8 (used reg = )
29000 79AE           B8                   03C8  mov	ax,#$3C8
29001 79B1           50                         push	ax
29002                                           ! Debug: func () void = outb+0 (used reg = )
29003 79B2           E8         01AC            call	_outb
29004 79B5           83C4                   04  add	sp,*4
29005                                           !BCC_EOS
29006                                           ! 3828         for(i=0;i<256*3;i++) {
29007                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29008 79B8           31C0                       xor	ax,ax
29009 79BA           8946         FE            mov	-2[bp],ax
29010                                           !BCC_EOS
29011                                           !BCC_EOS
29012 79BD           EB           27            jmp .282
29013                       000079BF            .283:
29014                                           ! 3829             outb(0x3c9, read_byte(ES, BX)); BX++;
29015                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29016 79BF           FF76         08            push	8[bp]
29017                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29018 79C2           FF76         06            push	6[bp]
29019                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29020 79C5           E8         012D            call	_read_byte
29021 79C8           83C4                   04  add	sp,*4
29022                                           ! Debug: list unsigned char = al+0 (used reg = )
29023 79CB           30E4                       xor	ah,ah
29024 79CD           50                         push	ax
29025                                           ! Debug: list int = const $3C9 (used reg = )
29026 79CE           B8                   03C9  mov	ax,#$3C9
29027 79D1           50                         push	ax
29028                                           ! Debug: func () void = outb+0 (used reg = )
29029 79D2           E8         018C            call	_outb
29030 79D5           83C4                   04  add	sp,*4
29031                                           !BCC_EOS
29032                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29033 79D8           8B46         08            mov	ax,8[bp]
29034 79DB           40                         inc	ax
29035 79DC           8946         08            mov	8[bp],ax
29036                                           !BCC_EOS
29037                                           ! 3830         }
29038                                           ! 3831         BX++;
29039                       000079DF            .281:
29040                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29041 79DF           8B46         FE            mov	ax,-2[bp]
29042 79E2           40                         inc	ax
29043 79E3           8946         FE            mov	-2[bp],ax
29044                       000079E6            .282:
29045                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29046 79E6           8B46         FE            mov	ax,-2[bp]
29047 79E9           3D                   0300  cmp	ax,#$300
29048 79EC           72           D1            jb 	.283
29049                       000079EE            .284:
29050                       000079EE            .280:
29051                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29052 79EE           8B46         08            mov	ax,8[bp]
29053 79F1           40                         inc	ax
29054 79F2           8946         08            mov	8[bp],ax
29055                                           !BCC_EOS
29056                                           ! 3832         outb(0x3c8, v);
29057                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29058 79F5           FF76         FA            push	-6[bp]
29059                                           ! Debug: list int = const $3C8 (used reg = )
29060 79F8           B8                   03C8  mov	ax,#$3C8
29061 79FB           50                         push	ax
29062                                           ! Debug: func () void = outb+0 (used reg = )
29063 79FC           E8         0162            call	_outb
29064 79FF           83C4                   04  add	sp,*4
29065                                           !BCC_EOS
29066                                           ! 3833     }
29067                                           ! 3834     return BX;
29068                       00007A02            .27E:
29069 7A02           8B46         08            mov	ax,8[bp]
29070 7A05           89EC                       mov	sp,bp
29071 7A07           5D                         pop	bp
29072 7A08           C3                         ret
29073                                           !BCC_EOS
29074                                           ! 3835 }
29075                                           ! 3836 static Bit8u find_vga_entry(mode)
29076                                           ! 3837 Bit8u mode;
29077                       00007A09            _find_vga_entry:
29078                                           !BCC_EOS
29079                                           ! 3838 {
29080                                           ! 3839  Bit8u i,line=0xFF;
29081 7A09           55                         push	bp
29082 7A0A           89E5                       mov	bp,sp
29083 7A0C           4C                         dec	sp
29084 7A0D           4C                         dec	sp
29085                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29086 7A0E           B0                     FF  mov	al,#$FF
29087 7A10           8846         FE            mov	-2[bp],al
29088                                           !BCC_EOS
29089                                           ! 3840  for(i=0;i<=15;i++)
29090                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29091 7A13           30C0                       xor	al,al
29092 7A15           8846         FF            mov	-1[bp],al
29093                                           !BCC_EOS
29094                                           !BCC_EOS
29095                                           ! 3841   if(vga_modes[i].svgamode==mode)
29096 7A18           EB           23            jmp .287
29097                       00007A1A            .288:
29098                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29099 7A1A           8A46         FF            mov	al,-1[bp]
29100 7A1D           30E4                       xor	ah,ah
29101 7A1F           B1                     03  mov	cl,*3
29102 7A21           D3E0                       shl	ax,cl
29103 7A23           89C3                       mov	bx,ax
29104                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29105 7A25           8A87       01D3            mov	al,_vga_modes[bx]
29106 7A29           3A46         04            cmp	al,4[bp]
29107 7A2C           75           08            jne 	.289
29108                       00007A2E            .28A:
29109                                           ! 3842    {line=i;
29110                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29111 7A2E           8A46         FF            mov	al,-1[bp]
29112 7A31           8846         FE            mov	-2[bp],al
29113                                           !BCC_EOS
29114                                           ! 3843     break;
29115 7A34           EB           0E            jmp .285
29116                                           !BCC_EOS
29117                                           ! 3844    }
29118                                           ! 3845  return line;
29119                       00007A36            .289:
29120                       00007A36            .286:
29121                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29122 7A36           8A46         FF            mov	al,-1[bp]
29123 7A39           40                         inc	ax
29124 7A3A           8846         FF            mov	-1[bp],al
29125                       00007A3D            .287:
29126                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29127 7A3D           8A46         FF            mov	al,-1[bp]
29128 7A40           3C                     0F  cmp	al,*$F
29129 7A42           76           D6            jbe	.288
29130                       00007A44            .28B:
29131                       00007A44            .285:
29132 7A44           8A46         FE            mov	al,-2[bp]
29133 7A47           89EC                       mov	sp,bp
29134 7A49           5D                         pop	bp
29135 7A4A           C3                         ret
29136                                           !BCC_EOS
29137                                           ! 3846 }
29138                                           ! 3847 static void memsetb(seg,offset,value,count)
29139                                           ! Register BX used in function find_vga_entry
29140                                           ! 3848   Bit16u seg;
29141                       00007A4B            _memsetb:
29142                                           !BCC_EOS
29143                                           ! 3849   Bit16u offset;
29144                                           !BCC_EOS
29145                                           ! 3850   Bit16u value;
29146                                           !BCC_EOS
29147                                           ! 3851   Bit16u count;
29148                                           !BCC_EOS
29149                                           ! 3852 {
29150                                           ! 3853 #asm
29151                                           !BCC_ASM
29152                       00000008            _memsetb.count	set	8
29153                       00000002            _memsetb.seg	set	2
29154                       00000006            _memsetb.value	set	6
29155                       00000004            _memsetb.offset	set	4
29156 7A4B           55                           push bp
29157 7A4C           89E5                         mov bp, sp
29158 7A4E           50                             push ax
29159 7A4F           51                             push cx
29160 7A50           06                             push es
29161 7A51           57                             push di
29162 7A52           8B4E         0A                mov cx, 10[bp] ; count
29163 7A55           83F9                   00      cmp cx, #0x00
29164 7A58           74           10                je memsetb_end
29165 7A5A           8B46         04                mov ax, 4[bp] ; segment
29166 7A5D           8EC0                           mov es, ax
29167 7A5F           8B46         06                mov ax, 6[bp] ; offset
29168 7A62           89C7                           mov di, ax
29169 7A64           8A46         08                mov al, 8[bp] ; value
29170 7A67           FC                             cld
29171 7A68           F3                             rep
29172 7A69           AA                              stosb
29173                       00007A6A            memsetb_end:
29174 7A6A           5F                             pop di
29175 7A6B           07                             pop es
29176 7A6C           59                             pop cx
29177 7A6D           58                             pop ax
29178 7A6E           5D                           pop bp
29179                                           ! 3877 endasm
29180                                           !BCC_ENDASM
29181                                           ! 3878 }
29182 7A6F           C3                         ret
29183                                           ! 3879 static void memsetw(seg,offset,value,count)
29184                                           ! 3880   Bit16u seg;
29185                       00007A70            _memsetw:
29186                                           !BCC_EOS
29187                                           ! 3881   Bit16u offset;
29188                                           !BCC_EOS
29189                                           ! 3882   Bit16u value;
29190                                           !BCC_EOS
29191                                           ! 3883   Bit16u count;
29192                                           !BCC_EOS
29193                                           ! 3884 {
29194                                           ! 3885 #asm
29195                                           !BCC_ASM
29196                       00000008            _memsetw.count	set	8
29197                       00000002            _memsetw.seg	set	2
29198                       00000006            _memsetw.value	set	6
29199                       00000004            _memsetw.offset	set	4
29200 7A70           55                           push bp
29201 7A71           89E5                         mov bp, sp
29202 7A73           50                             push ax
29203 7A74           51                             push cx
29204 7A75           06                             push es
29205 7A76           57                             push di
29206 7A77           8B4E         0A                mov cx, 10[bp] ; count
29207 7A7A           83F9                   00      cmp cx, #0x00
29208 7A7D           74           10                je memsetw_end
29209 7A7F           8B46         04                mov ax, 4[bp] ; segment
29210 7A82           8EC0                           mov es, ax
29211 7A84           8B46         06                mov ax, 6[bp] ; offset
29212 7A87           89C7                           mov di, ax
29213 7A89           8B46         08                mov ax, 8[bp] ; value
29214 7A8C           FC                             cld
29215 7A8D           F3                             rep
29216 7A8E           AB                              stosw
29217                       00007A8F            memsetw_end:
29218 7A8F           5F                             pop di
29219 7A90           07                             pop es
29220 7A91           59                             pop cx
29221 7A92           58                             pop ax
29222 7A93           5D                           pop bp
29223                                           ! 3909 endasm
29224                                           !BCC_ENDASM
29225                                           ! 3910 }
29226 7A94           C3                         ret
29227                                           ! 3911 static void memcpyb(dseg,doffset,sseg,soffset,count)
29228                                           ! 3912   Bit16u dseg;
29229                       00007A95            _memcpyb:
29230                                           !BCC_EOS
29231                                           ! 3913   Bit16u doffset;
29232                                           !BCC_EOS
29233                                           ! 3914   Bit16u sseg;
29234                                           !BCC_EOS
29235                                           ! 3915   Bit16u soffset;
29236                                           !BCC_EOS
29237                                           ! 3916   Bit16u count;
29238                                           !BCC_EOS
29239                                           ! 3917 {
29240                                           ! 3918 #asm
29241                                           !BCC_ASM
29242                       0000000A            _memcpyb.count	set	$A
29243                       00000006            _memcpyb.sseg	set	6
29244                       00000008            _memcpyb.soffset	set	8
29245                       00000002            _memcpyb.dseg	set	2
29246                       00000004            _memcpyb.doffset	set	4
29247 7A95           55                           push bp
29248 7A96           89E5                         mov bp, sp
29249 7A98           50                             push ax
29250 7A99           51                             push cx
29251 7A9A           06                             push es
29252 7A9B           57                             push di
29253 7A9C           1E                             push ds
29254 7A9D           56                             push si
29255 7A9E           8B4E         0C                mov cx, 12[bp] ; count
29256 7AA1           83F9                   00      cmp cx, #0x0000
29257 7AA4           74           17                je memcpyb_end
29258 7AA6           8B46         04                mov ax, 4[bp] ; dsegment
29259 7AA9           8EC0                           mov es, ax
29260 7AAB           8B46         06                mov ax, 6[bp] ; doffset
29261 7AAE           89C7                           mov di, ax
29262 7AB0           8B46         08                mov ax, 8[bp] ; ssegment
29263 7AB3           8ED8                           mov ds, ax
29264 7AB5           8B46         0A                mov ax, 10[bp] ; soffset
29265 7AB8           89C6                           mov si, ax
29266 7ABA           FC                             cld
29267 7ABB           F3                             rep
29268 7ABC           A4                              movsb
29269                       00007ABD            memcpyb_end:
29270 7ABD           5E                             pop si
29271 7ABE           1F                             pop ds
29272 7ABF           5F                             pop di
29273 7AC0           07                             pop es
29274 7AC1           59                             pop cx
29275 7AC2           58                             pop ax
29276 7AC3           5D                           pop bp
29277                                           ! 3949 endasm
29278                                           !BCC_ENDASM
29279                                           ! 3950 }
29280 7AC4           C3                         ret
29281                                           ! 3951 static void memcpyw(dseg,doffset,sseg,soffset,count)
29282                                           ! 3952   Bit16u dseg;
29283                       00007AC5            _memcpyw:
29284                                           !BCC_EOS
29285                                           ! 3953   Bit16u doffset;
29286                                           !BCC_EOS
29287                                           ! 3954   Bit16u sseg;
29288                                           !BCC_EOS
29289                                           ! 3955   Bit16u sof
29290                                           ! 3955 fset;
29291                                           !BCC_EOS
29292                                           ! 3956   Bit16u count;
29293                                           !BCC_EOS
29294                                           ! 3957 {
29295                                           ! 3958 #asm
29296                                           !BCC_ASM
29297                       0000000A            _memcpyw.count	set	$A
29298                       00000006            _memcpyw.sseg	set	6
29299                       00000008            _memcpyw.soffset	set	8
29300                       00000002            _memcpyw.dseg	set	2
29301                       00000004            _memcpyw.doffset	set	4
29302 7AC5           55                           push bp
29303 7AC6           89E5                         mov bp, sp
29304 7AC8           50                             push ax
29305 7AC9           51                             push cx
29306 7ACA           06                             push es
29307 7ACB           57                             push di
29308 7ACC           1E                             push ds
29309 7ACD           56                             push si
29310 7ACE           8B4E         0C                mov cx, 12[bp] ; count
29311 7AD1           83F9                   00      cmp cx, #0x0000
29312 7AD4           74           17                je memcpyw_end
29313 7AD6           8B46         04                mov ax, 4[bp] ; dsegment
29314 7AD9           8EC0                           mov es, ax
29315 7ADB           8B46         06                mov ax, 6[bp] ; doffset
29316 7ADE           89C7                           mov di, ax
29317 7AE0           8B46         08                mov ax, 8[bp] ; ssegment
29318 7AE3           8ED8                           mov ds, ax
29319 7AE5           8B46         0A                mov ax, 10[bp] ; soffset
29320 7AE8           89C6                           mov si, ax
29321 7AEA           FC                             cld
29322 7AEB           F3                             rep
29323 7AEC           A5                              movsw
29324                       00007AED            memcpyw_end:
29325 7AED           5E                             pop si
29326 7AEE           1F                             pop ds
29327 7AEF           5F                             pop di
29328 7AF0           07                             pop es
29329 7AF1           59                             pop cx
29330 7AF2           58                             pop ax
29331 7AF3           5D                           pop bp
29332                                           ! 3989 endasm
29333                                           !BCC_ENDASM
29334                                           ! 3990 }
29335 7AF4           C3                         ret
29336                                           ! 3991 static Bit8u
29337                                           ! 3992 read_byte(seg, offset)
29338                                           ! 3993   Bit16u seg;
29339                       00007AF5            _read_byte:
29340                                           !BCC_EOS
29341                                           ! 3994   Bit16u offset;
29342                                           !BCC_EOS
29343                                           ! 3995 {
29344                                           ! 3996 #asm
29345                                           !BCC_ASM
29346                       00000002            _read_byte.seg	set	2
29347                       00000004            _read_byte.offset	set	4
29348 7AF5           55                           push bp
29349 7AF6           89E5                         mov bp, sp
29350 7AF8           53                             push bx
29351 7AF9           1E                             push ds
29352 7AFA           8B46         04                mov ax, 4[bp] ; segment
29353 7AFD           8ED8                           mov ds, ax
29354 7AFF           8B5E         06                mov bx, 6[bp] ; offset
29355 7B02           8A07                           mov al, [bx]
29356                                               ;; al = return value (byte)
29357 7B04           1F                             pop ds
29358 7B05           5B                             pop bx
29359 7B06           5D                           pop bp
29360                                           ! 4009 endasm
29361                                           !BCC_ENDASM
29362                                           ! 4010 }
29363 7B07           C3                         ret
29364                                           ! 4011 static Bit16u
29365                                           ! 4012 read_word(seg, offset)
29366                                           ! 4013   Bit16u seg;
29367                       00007B08            _read_word:
29368                                           !BCC_EOS
29369                                           ! 4014   Bit16u offset;
29370                                           !BCC_EOS
29371                                           ! 4015 {
29372                                           ! 4016 #asm
29373                                           !BCC_ASM
29374                       00000002            _read_word.seg	set	2
29375                       00000004            _read_word.offset	set	4
29376 7B08           55                           push bp
29377 7B09           89E5                         mov bp, sp
29378 7B0B           53                             push bx
29379 7B0C           1E                             push ds
29380 7B0D           8B46         04                mov ax, 4[bp] ; segment
29381 7B10           8ED8                           mov ds, ax
29382 7B12           8B5E         06                mov bx, 6[bp] ; offset
29383 7B15           8B07                           mov ax, [bx]
29384                                               ;; ax = return value (word)
29385 7B17           1F                             pop ds
29386 7B18           5B                             pop bx
29387 7B19           5D                           pop bp
29388                                           ! 4029 endasm
29389                                           !BCC_ENDASM
29390                                           ! 4030 }
29391 7B1A           C3                         ret
29392                                           ! 4031 static void
29393                                           ! 4032 write_byte(seg, offset, data)
29394                                           ! 4033   Bit16u seg;
29395                       00007B1B            _write_byte:
29396                                           !BCC_EOS
29397                                           ! 4034   Bit16u offset;
29398                                           !BCC_EOS
29399                                           ! 4035   Bit8u data;
29400                                           !BCC_EOS
29401                                           ! 4036 {
29402                                           ! 4037 #asm
29403                                           !BCC_ASM
29404                       00000002            _write_byte.seg	set	2
29405                       00000006            _write_byte.data	set	6
29406                       00000004            _write_byte.offset	set	4
29407 7B1B           55                           push bp
29408 7B1C           89E5                         mov bp, sp
29409 7B1E           50                             push ax
29410 7B1F           53                             push bx
29411 7B20           1E                             push ds
29412 7B21           8B46         04                mov ax, 4[bp] ; segment
29413 7B24           8ED8                           mov ds, ax
29414 7B26           8B5E         06                mov bx, 6[bp] ; offset
29415 7B29           8A46         08                mov al, 8[bp] ; data byte
29416 7B2C           8807                           mov [bx], al ; write data byte
29417 7B2E           1F                             pop ds
29418 7B2F           5B                             pop bx
29419 7B30           58                             pop ax
29420 7B31           5D                           pop bp
29421                                           ! 4052 endasm
29422                                           !BCC_ENDASM
29423                                           ! 4053 }
29424 7B32           C3                         ret
29425                                           ! 4054 static void
29426                                           ! 4055 write_word(seg, offset, data)
29427                                           ! 4056   Bit16u seg;
29428                       00007B33            _write_word:
29429                                           !BCC_EOS
29430                                           ! 4057   Bit16u offset;
29431                                           !BCC_EOS
29432                                           ! 4058   Bit16u data;
29433                                           !BCC_EOS
29434                                           ! 4059 {
29435                                           ! 4060 #asm
29436                                           !BCC_ASM
29437                       00000002            _write_word.seg	set	2
29438                       00000006            _write_word.data	set	6
29439                       00000004            _write_word.offset	set	4
29440 7B33           55                           push bp
29441 7B34           89E5                         mov bp, sp
29442 7B36           50                             push ax
29443 7B37           53                             push bx
29444 7B38           1E                             push ds
29445 7B39           8B46         04                mov ax, 4[bp] ; segment
29446 7B3C           8ED8                           mov ds, ax
29447 7B3E           8B5E         06                mov bx, 6[bp] ; offset
29448 7B41           8B46         08                mov ax, 8[bp] ; data word
29449 7B44           8907                           mov [bx], ax ; write data word
29450 7B46           1F                             pop ds
29451 7B47           5B                             pop bx
29452 7B48           58                             pop ax
29453 7B49           5D                           pop bp
29454                                           ! 4075 endasm
29455                                           !BCC_ENDASM
29456                                           ! 4076 }
29457 7B4A           C3                         ret
29458                                           ! 4077  Bit8u
29459                                           ! 4078 inb(port)
29460                                           ! 4079   Bit16u port;
29461                                           export	_inb
29462                       00007B4B            _inb:
29463                                           !BCC_EOS
29464                                           ! 4080 {
29465                                           ! 4081 #asm
29466                                           !BCC_ASM
29467                       00000002            _inb.port	set	2
29468 7B4B           55                           push bp
29469 7B4C           89E5                         mov bp, sp
29470 7B4E           52                             push dx
29471 7B4F           8B56         04                mov dx, 4[bp]
29472 7B52           EC                             in al, dx
29473 7B53           5A                             pop dx
29474 7B54           5D                           pop bp
29475                                           ! 4089 endasm
29476                                           !BCC_ENDASM
29477                                           ! 4090 }
29478 7B55           C3                         ret
29479                                           ! 4091   Bit16u
29480                                           ! 4092 inw(port)
29481                                           ! 4093   Bit16u port;
29482                                           export	_inw
29483                       00007B56            _inw:
29484                                           !BCC_EOS
29485                                           ! 4094 {
29486                                           ! 4095 #asm
29487                                           !BCC_ASM
29488                       00000002            _inw.port	set	2
29489 7B56           55                           push bp
29490 7B57           89E5                         mov bp, sp
29491 7B59           52                             push dx
29492 7B5A           8B56         04                mov dx, 4[bp]
29493 7B5D           ED                             in ax, dx
29494 7B5E           5A                             pop dx
29495 7B5F           5D                           pop bp
29496                                           ! 4103 endasm
29497                                           !BCC_ENDASM
29498                                           ! 4104 }
29499 7B60           C3                         ret
29500                                           ! 4105   void
29501                                           ! 4106 outb(port, val)
29502                                           ! 4107   Bit16u port;
29503                                           export	_outb
29504                       00007B61            _outb:
29505                                           !BCC_EOS
29506                                           ! 4108   
29507                                           ! 4108 Bit8u val;
29508                                           !BCC_EOS
29509                                           ! 4109 {
29510                                           ! 4110 #asm
29511                                           !BCC_ASM
29512                       00000004            _outb.val	set	4
29513                       00000002            _outb.port	set	2
29514 7B61           55                           push bp
29515 7B62           89E5                         mov bp, sp
29516 7B64           50                             push ax
29517 7B65           52                             push dx
29518 7B66           8B56         04                mov dx, 4[bp]
29519 7B69           8A46         06                mov al, 6[bp]
29520 7B6C           EE                             out dx, al
29521 7B6D           5A                             pop dx
29522 7B6E           58                             pop ax
29523 7B6F           5D                           pop bp
29524                                           ! 4121 endasm
29525                                           !BCC_ENDASM
29526                                           ! 4122 }
29527 7B70           C3                         ret
29528                                           ! 4123   void
29529                                           ! 4124 outw(port, val)
29530                                           ! 4125   Bit16u port;
29531                                           export	_outw
29532                       00007B71            _outw:
29533                                           !BCC_EOS
29534                                           ! 4126   Bit16u val;
29535                                           !BCC_EOS
29536                                           ! 4127 {
29537                                           ! 4128 #asm
29538                                           !BCC_ASM
29539                       00000004            _outw.val	set	4
29540                       00000002            _outw.port	set	2
29541 7B71           55                           push bp
29542 7B72           89E5                         mov bp, sp
29543 7B74           50                             push ax
29544 7B75           52                             push dx
29545 7B76           8B56         04                mov dx, 4[bp]
29546 7B79           8B46         06                mov ax, 6[bp]
29547 7B7C           EF                             out dx, ax
29548 7B7D           5A                             pop dx
29549 7B7E           58                             pop ax
29550 7B7F           5D                           pop bp
29551                                           ! 4139 endasm
29552                                           !BCC_ENDASM
29553                                           ! 4140 }
29554 7B80           C3                         ret
29555                                           ! 4141 Bit16u get_SS()
29556                                           ! 4142 {
29557                                           export	_get_SS
29558                       00007B81            _get_SS:
29559                                           ! 4143 #asm
29560                                           !BCC_ASM
29561 7B81           8CD0                         mov ax, ss
29562                                           ! 4145 endasm
29563                                           !BCC_ENDASM
29564                                           ! 4146 }
29565 7B83           C3                         ret
29566                                           ! 4147 void printf(s)
29567                                           ! 4148   Bit8u *s;
29568                                           export	_printf
29569                       00007B84            _printf:
29570                                           !BCC_EOS
29571                                           ! 4149 {
29572                                           ! 4150   Bit8u c, format_char;
29573                                           !BCC_EOS
29574                                           ! 4151   Boolean in_format;
29575                                           !BCC_EOS
29576                                           ! 4152   unsigned format_width, i;
29577                                           !BCC_EOS
29578                                           ! 4153   Bit16u *arg_ptr;
29579                                           !BCC_EOS
29580                                           ! 4154   Bit16u arg_seg, arg, digit, nibble, shift_count;
29581                                           !BCC_EOS
29582                                           ! 4155   arg_ptr = &s;
29583 7B84           55                         push	bp
29584 7B85           89E5                       mov	bp,sp
29585 7B87           83C4                   EC  add	sp,*-$14
29586                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29587 7B8A           8D5E         04            lea	bx,4[bp]
29588 7B8D           895E         F6            mov	-$A[bp],bx
29589                                           !BCC_EOS
29590                                           ! 4156   arg_seg = get_SS();
29591                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
29592 7B90           E8         FFEE            call	_get_SS
29593                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
29594 7B93           8946         F4            mov	-$C[bp],ax
29595                                           !BCC_EOS
29596                                           ! 4157   in_format = 0;
29597                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29598 7B96           31C0                       xor	ax,ax
29599 7B98           8946         FC            mov	-4[bp],ax
29600                                           !BCC_EOS
29601                                           ! 4158   format_width = 0;
29602                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29603 7B9B           31C0                       xor	ax,ax
29604 7B9D           8946         FA            mov	-6[bp],ax
29605                                           !BCC_EOS
29606                                           ! 4159   while (c = read_byte(0xc000, s)) {
29607 7BA0           E9         0104            br 	.28D
29608                       00007BA3            .28E:
29609                                           ! 4160     if ( c == '%' ) {
29610                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
29611 7BA3           8A46         FF            mov	al,-1[bp]
29612 7BA6           3C                     25  cmp	al,*$25
29613 7BA8           75           0E            jne 	.28F
29614                       00007BAA            .290:
29615                                           ! 4161       in_format = 1;
29616                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
29617 7BAA           B8                   0001  mov	ax,*1
29618 7BAD           8946         FC            mov	-4[bp],ax
29619                                           !BCC_EOS
29620                                           ! 4162       format_width = 0;
29621                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29622 7BB0           31C0                       xor	ax,ax
29623 7BB2           8946         FA            mov	-6[bp],ax
29624                                           !BCC_EOS
29625                                           ! 4163       }
29626                                           ! 4164     else if (in_format) {
29627 7BB5           E9         00E8            br 	.291
29628                       00007BB8            .28F:
29629 7BB8           8B46         FC            mov	ax,-4[bp]
29630 7BBB           85C0                       test	ax,ax
29631 7BBD         0F84         00CF            beq 	.292
29632                       00007BC1            .293:
29633                                           ! 4165       if ( (c>='0') && (c<='9') ) {
29634                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29635 7BC1           8A46         FF            mov	al,-1[bp]
29636 7BC4           3C                     30  cmp	al,*$30
29637 7BC6           72           28            jb  	.294
29638                       00007BC8            .296:
29639                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
29640 7BC8           8A46         FF            mov	al,-1[bp]
29641 7BCB           3C                     39  cmp	al,*$39
29642 7BCD           77           21            ja  	.294
29643                       00007BCF            .295:
29644                                           ! 4166         format_width = (format_width * 10) + (c - '0');
29645                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29646 7BCF           8A46         FF            mov	al,-1[bp]
29647 7BD2           30E4                       xor	ah,ah
29648 7BD4           05                   FFD0  add	ax,*-$30
29649 7BD7           50                         push	ax
29650                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
29651 7BD8           8B46         FA            mov	ax,-6[bp]
29652 7BDB           89C2                       mov	dx,ax
29653 7BDD           D1E0                       shl	ax,*1
29654 7BDF           D1E0                       shl	ax,*1
29655 7BE1           01D0                       add	ax,dx
29656 7BE3           D1E0                       shl	ax,*1
29657                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
29658 7BE5           0346         EA            add	ax,-$16[bp]
29659 7BE8           44                         inc	sp
29660 7BE9           44                         inc	sp
29661                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
29662 7BEA           8946         FA            mov	-6[bp],ax
29663                                           !BCC_EOS
29664                                           ! 4167         }
29665                                           ! 4168       else if (c == 'x') {
29666 7BED           E9         009E            br 	.297
29667                       00007BF0            .294:
29668                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
29669 7BF0           8A46         FF            mov	al,-1[bp]
29670 7BF3           3C                     78  cmp	al,*$78
29671 7BF5         0F85         0095            bne 	.298
29672                       00007BF9            .299:
29673                                           ! 4169         arg_ptr++;
29674                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29675 7BF9           8B5E         F6            mov	bx,-$A[bp]
29676 7BFC           43                         inc	bx
29677 7BFD           43                         inc	bx
29678 7BFE           895E         F6            mov	-$A[bp],bx
29679                                           !BCC_EOS
29680                                           ! 4170         arg = read_word(arg_seg, arg_ptr);
29681                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29682 7C01           FF76         F6            push	-$A[bp]
29683                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
29684 7C04           FF76         F4            push	-$C[bp]
29685                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29686 7C07           E8         FEFE            call	_read_word
29687 7C0A           83C4                   04  add	sp,*4
29688                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29689 7C0D           8946         F2            mov	-$E[bp],ax
29690                                           !BCC_EOS
29691                                           ! 4171         if (format_width == 0)
29692                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29693 7C10           8B46         FA            mov	ax,-6[bp]
29694 7C13           85C0                       test	ax,ax
29695 7C15           75           06            jne 	.29A
29696                       00007C17            .29B:
29697                                           ! 4172           format_width = 4;
29698                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
29699 7C17           B8                   0004  mov	ax,*4
29700 7C1A           8946         FA            mov	-6[bp],ax
29701                                           !BCC_EOS
29702                                           ! 4173         i = 0;
29703                       00007C1D            .29A:
29704                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29705 7C1D           31C0                       xor	ax,ax
29706 7C1F           8946         F8            mov	-8[bp],ax
29707                                           !BCC_EOS
29708                                           ! 4174         digit = format_width - 1;
29709                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
29710 7C22           8B46         FA            mov	ax,-6[bp]
29711                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
29712 7C25           48                         dec	ax
29713 7C26           8946         F0            mov	-$10[bp],ax
29714                                           !BCC_EOS
29715                                           ! 4175         for (i=0; i<format_width; i++) {
29716                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29717 7C29           31C0                       xor	ax,ax
29718 7C2B           8946         F8            mov	-8[bp],ax
29719                                           !BCC_EOS
29720                                           !BCC_EOS
29721 7C2E           EB           51            jmp .29E
29722                       00007C30            .29F:
29723                                           ! 4176           nibble = (arg >> (4 * digit)) & 0x000f;
29724                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
29725                                           ! Debug: expression subtree swapping
29726 7C30           8B46         F0            mov	ax,-$10[bp]
29727 7C33           D1E0                       shl	ax,*1
29728 7C35           D1E0                       shl	ax,*1
29729                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29730 7C37           89C3                       mov	bx,ax
29731 7C39           8B46         F2            mov	ax,-$E[bp]
29732 7C3C           89D9                       mov	cx,bx
29733 7C3E           D3E8                       shr	ax,cl
29734                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
29735 7C40           24                     0F  and	al,*$F
29736                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
29737 7C42           30E4                       xor	ah,ah
29738 7C44           8946         EE            mov	-$12[bp],ax
29739                                           !BCC_EOS
29740                                           ! 4177           if (nibble <= 9)
29741                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
29742 7C47           8B46         EE            mov	ax,-$12[bp]
29743 7C4A           3D                   0009  cmp	ax,*9
29744 7C4D           77           13            ja  	.2A0
29745                       00007C4F            .2A1:
29746                                           ! 4178             outb(0x0500, nibble + '0');
29747                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
29748 7C4F           8B46         EE            mov	ax,-$12[bp]
29749                                           ! Debug: list unsigned int = ax+$30 (used reg = )
29750 7C52           05                   0030  add	ax,*$30
29751 7C55           50                         push	ax
29752                                           ! Debug: list int = const $500 (used reg = )
29753 7C56           B8                   0500  mov	ax,#$500
29754 7C59           50                         push	ax
29755                                           ! Debug: func () void = outb+0 (used reg = )
29756 7C5A           E8         FF04            call	_outb
29757 7C5D           83C4                   04  add	sp,*4
29758                                           !BCC_EOS
29759                                           ! 4179           else
29760                                           ! 4180             outb(0x0500, (nibble - 10) + 'A');
29761 7C60           EB           11            jmp .2A2
29762                       00007C62            .2A0:
29763                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
29764 7C62           8B46         EE            mov	ax,-$12[bp]
29765                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
29766                                           ! Debug: list unsigned int = ax+$37 (used reg = )
29767 7C65           05                   0037  add	ax,*$37
29768 7C68           50                         push	ax
29769                                           ! Debug: list int = const $500 (used reg = )
29770 7C69           B8                   0500  mov	ax,#$500
29771 7C6C           50                         push	ax
29772                                           ! Debug: func () void = outb+0 (used reg = )
29773 7C6D           E8         FEF1            call	_outb
29774 7C70           83C4                   04  add	sp,*4
29775                                           !BCC_EOS
29776                                           ! 4181           digit--;
29777                       00007C73            .2A2:
29778                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
29779 7C73           8B46         F0            mov	ax,-$10[bp]
29780 7C76           48                         dec	ax
29781 7C77           8946         F0            mov	-$10[bp],ax
29782                                           !BCC_EOS
29783                                           ! 4182           }
29784                                           ! 4183         in_format = 0;
29785                       00007C7A            .29D:
29786                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
29787 7C7A           8B46         F8            mov	ax,-8[bp]
29788 7C7D           40                         inc	ax
29789 7C7E           8946         F8            mov	-8[bp],ax
29790                       00007C81            .29E:
29791                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
29792 7C81           8B46         F8            mov	ax,-8[bp]
29793 7C84           3B46         FA            cmp	ax,-6[bp]
29794 7C87           72           A7            jb 	.29F
29795                       00007C89            .2A3:
29796                       00007C89            .29C:
29797                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29798 7C89           31C0                       xor	ax,ax
29799 7C8B           8946         FC            mov	-4[bp],ax
29800                                           !BCC_EOS
29801                                           ! 4184         }
29802                                           ! 4185       }
29803                       00007C8E            .298:
29804                       00007C8E            .297:
29805                                           ! 4186     else {
29806 7C8E           EB           10            jmp .2A4
29807                       00007C90            .292:
29808                                           ! 4187       outb(0x0500, c);
29809                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
29810 7C90           8A46         FF            mov	al,-1[bp]
29811 7C93           30E4                       xor	ah,ah
29812 7C95           50                         push	ax
29813                                           ! Debug: list int = const $500 (used reg = )
29814 7C96           B8                   0500  mov	ax,#$500
29815 7C99           50                         push	ax
29816                                           ! Debug: func () void = outb+0 (used reg = )
29817 7C9A           E8         FEC4            call	_outb
29818 7C9D           83C4                   04  add	sp,*4
29819                                           !BCC_EOS
29820                                           ! 4188       }
29821                                           ! 4189     s ++;
29822                       00007CA0            .2A4:
29823                       00007CA0            .291:
29824                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
29825 7CA0           8B5E         04            mov	bx,4[bp]
29826 7CA3           43                         inc	bx
29827 7CA4           895E         04            mov	4[bp],bx
29828                                           !BCC_EOS
29829                                           ! 4190     }
29830                                           ! 4191 }
29831                       00007CA7            .28D:
29832                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
29833 7CA7           FF76         04            push	4[bp]
29834                                           ! Debug: list unsigned int = const $C000 (used reg = )
29835 7CAA           B8                   C000  mov	ax,#$C000
29836 7CAD           50                         push	ax
29837                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29838 7CAE           E8         FE44            call	_read_byte
29839 7CB1           83C4                   04  add	sp,*4
29840                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
29841 7CB4           8846         FF            mov	-1[bp],al
29842 7CB7           84C0                       test	al,al
29843 7CB9         0F85         FEE6            bne 	.28E
29844                       00007CBD            .2A5:
29845                       00007CBD            .28C:
29846 7CBD           89EC                       mov	sp,bp
29847 7CBF           5D                         pop	bp
29848 7CC0           C3                         ret
29849                                           ! 4192 #asm
29850                                           !BCC_ASM
29851                       00000002            _printf.s	set	2
29852                                             ; get LFB address from PCI
29853                                             ; in - ax: PCI device vendor
29854                                             ; out - ax: LFB address (high 16 bit)
29855                                             ;; NOTE - may be called in protected mode
29856                       00007CC1            _pci_get_lfb_addr:
29857 7CC1           53                           push bx
29858 7CC2           51                           push cx
29859 7CC3           52                           push dx
29860 7CC4     66    50                           push eax
29861 7CC6           89C3                           mov bx, ax
29862 7CC8           31C9                           xor cx, cx
29863 7CCA           B2                     00      mov dl, #0x00
29864 7CCC           E8         0033                call pci_read_reg
29865 7CCF           3D                   FFFF      cmp ax, #0xffff
29866 7CD2           74           12                jz pci_get_lfb_addr_5
29867                       00007CD4             pci_get_lfb_addr_3:
29868 7CD4           B2                     00      mov dl, #0x00
29869 7CD6           E8         0029                call pci_read_reg
29870 7CD9           39D8                           cmp ax, bx ;; check vendor
29871 7CDB           74           0D                jz pci_get_lfb_addr_4
29872 7CDD           83C1                   08      add cx, #0x8
29873 7CE0           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
29874 7CE4           72           EE                jb pci_get_lfb_addr_3
29875                       00007CE6             pci_get_lfb_addr_5:
29876 7CE6           31D2                           xor dx, dx ;; no LFB
29877 7CE8           EB           10                jmp pci_get_lfb_addr_6
29878                       00007CEA             pci_get_lfb_addr_4:
29879 7CEA           B2                     10      mov dl, #0x10 ;; I/O space #0
29880 7CEC           E8         0013                call pci_read_reg
29881 7CEF           A9                   FFF1      test ax, #0xfff1
29882 7CF2           75           F2                jnz pci_get_lfb_addr_5
29883 7CF4     66    C1E8                   10      shr eax, #16
29884 7CF8           89C2                           mov dx, ax ;; LFB address
29885                       00007CFA             pci_get_lfb_addr_6:
29886 7CFA     66    58                           pop eax
29887 7CFC           89D0                         mov ax, dx
29888 7CFE           5A                           pop dx
29889 7CFF           59                           pop cx
29890 7D00           5B                           pop bx
29891 7D01           C3                           ret
29892                                             ; read PCI register
29893                                             ; in - cx: device/function
29894                                             ; in - dl: register
29895                                             ; out - eax: value
29896                       00007D02            pci_read_reg:
29897 7D02     66    B8               00800000    mov eax, #0x00800000
29898 7D08           89C8                         mov ax, cx
29899 7D0A     66    C1E0                   08    shl eax, #8
29900 7D0E           88D0                         mov al, dl
29901 7D10           BA                   0CF8    mov dx, #0xcf8
29902 7D13     66    EF                           out dx, eax
29903 7D15           80C2                   04    add dl, #4
29904 7D18     66    ED                           in eax, dx
29905 7D1A           C3                           ret
29906                                           ! 4247 endasm
29907                                           !BCC_ENDASM
29908                                           ! 4248 typedef struct
29909                                           ! Register BX used in function printf
29910                                           ! 4249 {
29911                                           ! 4250   unsigned short mode;
29912                                           !BCC_EOS
29913                                           ! 4251   unsigned short width;
29914                                           !BCC_EOS
29915                                           ! 4252   unsigned short height;
29916                                           !BCC_EOS
29917                                           ! 4253   unsigned short depth;
29918                                           !BCC_EOS
29919                                           ! 4254   unsigned short hidden_dac;
29920                                           !BCC_EOS
29921                                           ! 4255   unsigned short *seq;
29922                                           !BCC_EOS
29923                                           ! 4256   unsigned short *graph;
29924                                           !BCC_EOS
29925                                           ! 4257   unsigned short *crtc;
29926                                           !BCC_EOS
29927                                           ! 4258   unsigned char bitsperpixel;
29928                                           !BCC_EOS
29929                                           ! 4259   unsigned char vesacolortype;
29930                                           !BCC_EOS
29931                                           ! 4260   unsigned char vesaredmask;
29932                                           !BCC_EOS
29933                                           ! 4261   unsigned char vesaredpos;
29934                                           !BCC_EOS
29935                                           ! 4262   unsigned char vesagreenmask;
29936                                           !BCC_EOS
29937                                           ! 4263   unsigned char vesagreenpos;
29938                                           !BCC_EOS
29939                                           ! 4264   unsigned char vesabluemask;
29940                                           !BCC_EOS
29941                                           ! 4265   unsigned char vesabluepos;
29942                                           !BCC_EOS
29943                                           ! 4266   unsigned char vesareservedmask;
29944                                           !BCC_EOS
29945                                           ! 4267   unsigned char vesareservedpos;
29946                                           !BCC_EOS
29947                                           ! 4268 } cirrus_mode_t;
29948                                           !BCC_EOS
29949                                           ! 4269 unsigned short cseq_vga[] = {0x0007,0xffff};
29950                                           
29951                                           export	_cseq_vga
29952                       00007D1B            _cseq_vga:
29953 7D1B                      0007            .word	7
29954 7D1D                      FFFF            .word	$FFFF
29955                                           !BCC_EOS
29956                                           ! 4270 unsigned short cgraph_vga[] = {0x0009,0x000a,0x000b,0xffff};
29957                                           export	_cgraph_vga
29958                       00007D1F            _cgraph_vga:
29959 7D1F                      0009            .word	9
29960 7D21                      000A            .word	$A
29961 7D23                      000B            .word	$B
29962 7D25                      FFFF            .word	$FFFF
29963                                           !BCC_EOS
29964                                           ! 4271 unsigned short ccrtc_vga[] = {0x001a,0x001b,0x001d,0xffff};
29965                                           export	_ccrtc_vga
29966                       00007D27            _ccrtc_vga:
29967 7D27                      001A            .word	$1A
29968 7D29                      001B            .word	$1B
29969 7D2B                      001D            .word	$1D
29970 7D2D                      FFFF            .word	$FFFF
29971                                           !BCC_EOS
29972                                           ! 4272 unsigned short cgraph_svgacolor[] = {
29973                                           export	_cgraph_svgacolor
29974                       00007D2F            _cgraph_svgacolor:
29975                                           ! 4273 0x0000,0x0001,0x0002,0x0003,0x0004,0x4005,0x0506,0x0f07,0xff08,
29976 7D2F                      0000            .word	0
29977 7D31                      0001            .word	1
29978 7D33                      0002            .word	2
29979 7D35                      0003            .word	3
29980 7D37                      0004            .word	4
29981 7D39                      4005            .word	$4005
29982 7D3B                      0506            .word	$506
29983 7D3D                      0F07            .word	$F07
29984 7D3F                      FF08            .word	$FF08
29985                                           ! 4274 0x0009,0x000a,0x000b,
29986 7D41                      0009            .word	9
29987 7D43                      000A            .word	$A
29988 7D45                      000B            .word	$B
29989                                           ! 4275 0xffff
29990                                           ! 4276 };
29991 7D47                      FFFF            .word	$FFFF
29992                                           !BCC_EOS
29993                                           ! 4277 unsigned short cseq_640x480x8[] = {
29994                                           export	_cseq_640x480x8
29995                       00007D49            _cseq_640x480x8:
29996                                           ! 4278 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
29997 7D49                      0300            .word	$300
29998 7D4B                      2101            .word	$2101
29999 7D4D                      0F02            .word	$F02
30000 7D4F                      0003            .word	3
30001 7D51                      0E04            .word	$E04
30002 7D53                      1107            .word	$1107
30003                                           ! 4279 0x580b,0x580c,0x580d,0x580e,
30004 7D55                      580B            .word	$580B
30005 7D57                      580C            .word	$580C
30006 7D59                      580D            .word	$580D
30007 7D5B                      580E            .word	$580E
30008                                           ! 4280 0x0412,0x0013,0x2017,
30009 7D5D                      0412            .word	$412
30010 7D5F                      0013            .word	$13
30011 7D61                      2017            .word	$2017
30012                                           ! 4281 0x331b,0x331c,0x331d,0x331e,
30013 7D63                      331B            .word	$331B
30014 7D65                      331C            .word	$331C
30015 7D67                      331D            .word	$331D
30016 7D69                      331E            .word	$331E
30017                                           ! 4282 0xffff
30018                                           ! 4283 };
30019 7D6B                      FFFF            .word	$FFFF
30020                                           !BCC_EOS
30021                                           ! 4284 unsigned short ccrtc_640x480x8[] = {
30022                                           export	_ccrtc_640x480x8
30023                       00007D6D            _ccrtc_640x480x8:
30024                                           ! 4285 0x2c11,
30025 7D6D                      2C11            .word	$2C11
30026                                           ! 4286 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
30027 7D6F                      5F00            .word	$5F00
30028 7D71                      4F01            .word	$4F01
30029 7D73                      4F02            .word	$4F02
30030 7D75                      8003            .word	$8003
30031 7D77                      5204            .word	$5204
30032 7D79                      1E05            .word	$1E05
30033 7D7B                      0B06            .word	$B06
30034 7D7D                      3E07            .word	$3E07
30035                                           ! 4287 0x4009,0x000c,0x000d,
30036 7D7F                      4009            .word	$4009
30037 7D81                      000C            .word	$C
30038 7D83                      000D            .word	$D
30039                                           ! 4288 0xea10,0xdf12,0x5013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
30040 7D85                      EA10            .word	$EA10
30041 7D87                      DF12            .word	$DF12
30042 7D89                      5013            .word	$5013
30043 7D8B                      4014            .word	$4014
30044 7D8D                      DF15            .word	$DF15
30045 7D8F                      0B16            .word	$B16
30046 7D91                      C317            .word	$C317
30047 7D93                      FF18            .word	$FF18
30048                                           ! 4289 0x001a,0x221b,0x001d,
30049 7D95                      001A            .word	$1A
30050 7D97                      221B            .word	$221B
30051 7D99                      001D            .word	$1D
30052                                           ! 4290 0xffff
30053                                           ! 4291 };
30054 7D9B                      FFFF            .word	$FFFF
30055                                           !BCC_EOS
30056                                           ! 4292 unsigned short cseq_640x480x16[] = {
30057                                           export	_cseq_640x480x16
30058                       00007D9D            _cseq_640x480x16:
30059                                           ! 4293 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30060 7D9D                      0300            .word	$300
30061 7D9F                      2101            .word	$2101
30062 7DA1                      0F02            .word	$F02
30063 7DA3                      0003            .word	3
30064 7DA5                      0E04            .word	$E04
30065 7DA7                      1707            .word	$1707
30066                                           ! 4294 0x580b,0x580c,0x580d,0x580e,
30067 7DA9                      580B            .word	$580B
30068 7DAB                      580C            .word	$580C
30069 7DAD                      580D            .word	$580D
30070 7DAF                      580E            .word	$580E
30071                                           ! 4295 0x0412,0x0013,0x2017,
30072 7DB1                      0412            .word	$412
30073 7DB3                      0013            .word	$13
30074 7DB5                      2017            .word	$2017
30075                                           ! 4296 0x331b,0x331c,0x331d,0x331e,
30076 7DB7                      331B            .word	$331B
30077 7DB9                      331C            .word	$331C
30078 7DBB                      331D            .word	$331D
30079 7DBD                      331E            .word	$331E
30080                                           ! 4297 0xffff
30081                                           ! 4298 };
30082 7DBF                      FFFF            .word	$FFFF
30083                                           !BCC_EOS
30084                                           ! 4299 unsigned short ccrtc_640x480x16[] = {
30085                                           export	_ccrtc_640x480x16
30086                       00007DC1            _ccrtc_640x480x16:
30087                                           ! 4300 0x2c11,
30088 7DC1                      2C11            .word	$2C11
30089                                           ! 4301 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
30090 7DC3                      5F00            .word	$5F00
30091 7DC5                      4F01            .word	$4F01
30092 7DC7                      4F02            .word	$4F02
30093 7DC9                      8003            .word	$8003
30094 7DCB                      5204            .word	$5204
30095 7DCD                      1E05            .word	$1E05
30096 7DCF                      0B06            .word	$B06
30097 7DD1                      3E07            .word	$3E07
30098                                           ! 4302 0x4009,0x000c,0x000d,
30099 7DD3                      4009            .word	$4009
30100 7DD5                      000C            .word	$C
30101 7DD7                      000D            .word	$D
30102                                           ! 4303 0xea10,0xdf12,0xa013,0x4014,0xdf15,0x0b16,0xc317,0xff
30103 7DD9                      EA10            .word	$EA10
30104 7DDB                      DF12            .word	$DF12
30105 7DDD                      A013            .word	$A013
30106 7DDF                      4014            .word	$4014
30107 7DE1                      DF15            .word	$DF15
30108 7DE3                      0B16            .word	$B16
30109 7DE5                      C317            .word	$C317
30110                                           ! 4303 18,
30111 7DE7                      FF18            .word	$FF18
30112                                           ! 4304 0x001a,0x221b,0x001d,
30113 7DE9                      001A            .word	$1A
30114 7DEB                      221B            .word	$221B
30115 7DED                      001D            .word	$1D
30116                                           ! 4305 0xffff
30117                                           ! 4306 };
30118 7DEF                      FFFF            .word	$FFFF
30119                                           !BCC_EOS
30120                                           ! 4307 unsigned short cseq_640x480x24[] = {
30121                                           export	_cseq_640x480x24
30122                       00007DF1            _cseq_640x480x24:
30123                                           ! 4308 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1507,
30124 7DF1                      0300            .word	$300
30125 7DF3                      2101            .word	$2101
30126 7DF5                      0F02            .word	$F02
30127 7DF7                      0003            .word	3
30128 7DF9                      0E04            .word	$E04
30129 7DFB                      1507            .word	$1507
30130                                           ! 4309 0x580b,0x580c,0x580d,0x580e,
30131 7DFD                      580B            .word	$580B
30132 7DFF                      580C            .word	$580C
30133 7E01                      580D            .word	$580D
30134 7E03                      580E            .word	$580E
30135                                           ! 4310 0x0412,0x0013,0x2017,
30136 7E05                      0412            .word	$412
30137 7E07                      0013            .word	$13
30138 7E09                      2017            .word	$2017
30139                                           ! 4311 0x331b,0x331c,0x331d,0x331e,
30140 7E0B                      331B            .word	$331B
30141 7E0D                      331C            .word	$331C
30142 7E0F                      331D            .word	$331D
30143 7E11                      331E            .word	$331E
30144                                           ! 4312 0xffff
30145                                           ! 4313 };
30146 7E13                      FFFF            .word	$FFFF
30147                                           !BCC_EOS
30148                                           ! 4314 unsigned short ccrtc_640x480x24[] = {
30149                                           export	_ccrtc_640x480x24
30150                       00007E15            _ccrtc_640x480x24:
30151                                           ! 4315 0x2c11,
30152 7E15                      2C11            .word	$2C11
30153                                           ! 4316 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
30154 7E17                      5F00            .word	$5F00
30155 7E19                      4F01            .word	$4F01
30156 7E1B                      4F02            .word	$4F02
30157 7E1D                      8003            .word	$8003
30158 7E1F                      5204            .word	$5204
30159 7E21                      1E05            .word	$1E05
30160 7E23                      0B06            .word	$B06
30161 7E25                      3E07            .word	$3E07
30162                                           ! 4317 0x4009,0x000c,0x000d,
30163 7E27                      4009            .word	$4009
30164 7E29                      000C            .word	$C
30165 7E2B                      000D            .word	$D
30166                                           ! 4318 0xea10,0xdf12,0x0013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
30167 7E2D                      EA10            .word	$EA10
30168 7E2F                      DF12            .word	$DF12
30169 7E31                      0013            .word	$13
30170 7E33                      4014            .word	$4014
30171 7E35                      DF15            .word	$DF15
30172 7E37                      0B16            .word	$B16
30173 7E39                      C317            .word	$C317
30174 7E3B                      FF18            .word	$FF18
30175                                           ! 4319 0x001a,0x321b,0x001d,
30176 7E3D                      001A            .word	$1A
30177 7E3F                      321B            .word	$321B
30178 7E41                      001D            .word	$1D
30179                                           ! 4320 0xffff
30180                                           ! 4321 };
30181 7E43                      FFFF            .word	$FFFF
30182                                           !BCC_EOS
30183                                           ! 4322 unsigned short cseq_800x600x8[] = {
30184                                           export	_cseq_800x600x8
30185                       00007E45            _cseq_800x600x8:
30186                                           ! 4323 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30187 7E45                      0300            .word	$300
30188 7E47                      2101            .word	$2101
30189 7E49                      0F02            .word	$F02
30190 7E4B                      0003            .word	3
30191 7E4D                      0E04            .word	$E04
30192 7E4F                      1107            .word	$1107
30193                                           ! 4324 0x230b,0x230c,0x230d,0x230e,
30194 7E51                      230B            .word	$230B
30195 7E53                      230C            .word	$230C
30196 7E55                      230D            .word	$230D
30197 7E57                      230E            .word	$230E
30198                                           ! 4325 0x0412,0x0013,0x2017,
30199 7E59                      0412            .word	$412
30200 7E5B                      0013            .word	$13
30201 7E5D                      2017            .word	$2017
30202                                           ! 4326 0x141b,0x141c,0x141d,0x141e,
30203 7E5F                      141B            .word	$141B
30204 7E61                      141C            .word	$141C
30205 7E63                      141D            .word	$141D
30206 7E65                      141E            .word	$141E
30207                                           ! 4327 0xffff
30208                                           ! 4328 };
30209 7E67                      FFFF            .word	$FFFF
30210                                           !BCC_EOS
30211                                           ! 4329 unsigned short ccrtc_800x600x8[] = {
30212                                           export	_ccrtc_800x600x8
30213                       00007E69            _ccrtc_800x600x8:
30214                                           ! 4330 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30215 7E69                      2311            .word	$2311
30216 7E6B                      7D00            .word	$7D00
30217 7E6D                      6301            .word	$6301
30218 7E6F                      6302            .word	$6302
30219 7E71                      8003            .word	$8003
30220 7E73                      6B04            .word	$6B04
30221 7E75                      1A05            .word	$1A05
30222 7E77                      9806            .word	$9806
30223 7E79                      F007            .word	$F007
30224                                           ! 4331 0x6009,0x000c,0x000d,
30225 7E7B                      6009            .word	$6009
30226 7E7D                      000C            .word	$C
30227 7E7F                      000D            .word	$D
30228                                           ! 4332 0x7d10,0x5712,0x6413,0x4014,0x5715,0x9816,0xc317,0xff18,
30229 7E81                      7D10            .word	$7D10
30230 7E83                      5712            .word	$5712
30231 7E85                      6413            .word	$6413
30232 7E87                      4014            .word	$4014
30233 7E89                      5715            .word	$5715
30234 7E8B                      9816            .word	$9816
30235 7E8D                      C317            .word	$C317
30236 7E8F                      FF18            .word	$FF18
30237                                           ! 4333 0x001a,0x221b,0x001d,
30238 7E91                      001A            .word	$1A
30239 7E93                      221B            .word	$221B
30240 7E95                      001D            .word	$1D
30241                                           ! 4334 0xffff
30242                                           ! 4335 };
30243 7E97                      FFFF            .word	$FFFF
30244                                           !BCC_EOS
30245                                           ! 4336 unsigned short cseq_800x600x16[] = {
30246                                           export	_cseq_800x600x16
30247                       00007E99            _cseq_800x600x16:
30248                                           ! 4337 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30249 7E99                      0300            .word	$300
30250 7E9B                      2101            .word	$2101
30251 7E9D                      0F02            .word	$F02
30252 7E9F                      0003            .word	3
30253 7EA1                      0E04            .word	$E04
30254 7EA3                      1707            .word	$1707
30255                                           ! 4338 0x230b,0x230c,0x230d,0x230e,
30256 7EA5                      230B            .word	$230B
30257 7EA7                      230C            .word	$230C
30258 7EA9                      230D            .word	$230D
30259 7EAB                      230E            .word	$230E
30260                                           ! 4339 0x0412,0x0013,0x2017,
30261 7EAD                      0412            .word	$412
30262 7EAF                      0013            .word	$13
30263 7EB1                      2017            .word	$2017
30264                                           ! 4340 0x141b,0x141c,0x141d,0x141e,
30265 7EB3                      141B            .word	$141B
30266 7EB5                      141C            .word	$141C
30267 7EB7                      141D            .word	$141D
30268 7EB9                      141E            .word	$141E
30269                                           ! 4341 0xffff
30270                                           ! 4342 };
30271 7EBB                      FFFF            .word	$FFFF
30272                                           !BCC_EOS
30273                                           ! 4343 unsigned short ccrtc_800x600x16[] = {
30274                                           export	_ccrtc_800x600x16
30275                       00007EBD            _ccrtc_800x600x16:
30276                                           ! 4344 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30277 7EBD                      2311            .word	$2311
30278 7EBF                      7D00            .word	$7D00
30279 7EC1                      6301            .word	$6301
30280 7EC3                      6302            .word	$6302
30281 7EC5                      8003            .word	$8003
30282 7EC7                      6B04            .word	$6B04
30283 7EC9                      1A05            .word	$1A05
30284 7ECB                      9806            .word	$9806
30285 7ECD                      F007            .word	$F007
30286                                           ! 4345 0x6009,0x000c,0x000d,
30287 7ECF                      6009            .word	$6009
30288 7ED1                      000C            .word	$C
30289 7ED3                      000D            .word	$D
30290                                           ! 4346 0x7d10,0x5712,0xc813,0x4014,0x5715,0x9816,0xc317,0xff18,
30291 7ED5                      7D10            .word	$7D10
30292 7ED7                      5712            .word	$5712
30293 7ED9                      C813            .word	$C813
30294 7EDB                      4014            .word	$4014
30295 7EDD                      5715            .word	$5715
30296 7EDF                      9816            .word	$9816
30297 7EE1                      C317            .word	$C317
30298 7EE3                      FF18            .word	$FF18
30299                                           ! 4347 0x001a,0x221b,0x001d,
30300 7EE5                      001A            .word	$1A
30301 7EE7                      221B            .word	$221B
30302 7EE9                      001D            .word	$1D
30303                                           ! 4348 0xffff
30304                                           ! 4349 };
30305 7EEB                      FFFF            .word	$FFFF
30306                                           !BCC_EOS
30307                                           ! 4350 unsigned short cseq_800x600x24[] = {
30308                                           export	_cseq_800x600x24
30309                       00007EED            _cseq_800x600x24:
30310                                           ! 4351 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1507,
30311 7EED                      0300            .word	$300
30312 7EEF                      2101            .word	$2101
30313 7EF1                      0F02            .word	$F02
30314 7EF3                      0003            .word	3
30315 7EF5                      0E04            .word	$E04
30316 7EF7                      1507            .word	$1507
30317                                           ! 4352 0x230b,0x230c,0x230d,0x230e,
30318 7EF9                      230B            .word	$230B
30319 7EFB                      230C            .word	$230C
30320 7EFD                      230D            .word	$230D
30321 7EFF                      230E            .word	$230E
30322                                           ! 4353 0x0412,0x0013,0x2017,
30323 7F01                      0412            .word	$412
30324 7F03                      0013            .word	$13
30325 7F05                      2017            .word	$2017
30326                                           ! 4354 0x141b,0x141c,0x141d,0x141e,
30327 7F07                      141B            .word	$141B
30328 7F09                      141C            .word	$141C
30329 7F0B                      141D            .word	$141D
30330 7F0D                      141E            .word	$141E
30331                                           ! 4355 0xffff
30332                                           ! 4356 };
30333 7F0F                      FFFF            .word	$FFFF
30334                                           !BCC_EOS
30335                                           ! 4357 unsigned short ccrtc_800x600x24[] = {
30336                                           export	_ccrtc_800x600x24
30337                       00007F11            _ccrtc_800x600x24:
30338                                           ! 4358 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30339 7F11                      2311            .word	$2311
30340 7F13                      7D00            .word	$7D00
30341 7F15                      6301            .word	$6301
30342 7F17                      6302            .word	$6302
30343 7F19                      8003            .word	$8003
30344 7F1B                      6B04            .word	$6B04
30345 7F1D                      1A05            .word	$1A05
30346 7F1F                      9806            .word	$9806
30347 7F21                      F007            .word	$F007
30348                                           ! 4359 0x6009,0x000c,0x000d,
30349 7F23                      6009            .word	$6009
30350 7F25                      000C            .word	$C
30351 7F27                      000D            .word	$D
30352                                           ! 4360 0x7d10,0x5712,0x2c13,0x4014,0x5715,0x9816,0xc317,0xff18,
30353 7F29                      7D10            .word	$7D10
30354 7F2B                      5712            .word	$5712
30355 7F2D                      2C13            .word	$2C13
30356 7F2F                      4014            .word	$4014
30357 7F31                      5715            .word	$5715
30358 7F33                      9816            .word	$9816
30359 7F35                      C317            .word	$C317
30360 7F37                      FF18            .word	$FF18
30361                                           ! 4361 0x001a,0x321b,0x001d,
30362 7F39                      001A            .word	$1A
30363 7F3B                      321B            .word	$321B
30364 7F3D                      001D            .word	$1D
30365                                           ! 4362 0xffff
30366                                           ! 4363 };
30367 7F3F                      FFFF            .word	$FFFF
30368                                           !BCC_EOS
30369                                           ! 4364 unsigned short cseq_1024x768x8[] = {
30370                                           export	_cseq_1024x768x8
30371                       00007F41            _cseq_1024x768x8:
30372                                           ! 4365 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30373 7F41                      0300            .word	$300
30374 7F43                      2101            .word	$2101
30375 7F45                      0F02            .word	$F02
30376 7F47                      0003            .word	3
30377 7F49                      0E04            .word	$E04
30378 7F4B                      1107            .word	$1107
30379                                           ! 4366 0x760b,0x760c,0x760d,0x760e,
30380 7F4D                      760B            .word	$760B
30381 7F4F                      760C            .word	$760C
30382 7F51                      760D            .word	$760D
30383 7F53                      760E            .word	$760E
30384                                           ! 4367 0x0412,0x0013,0x2017,
30385 7F55                      0412            .word	$412
30386 7F57                      0013            .word	$13
30387 7F59                      2017            .word	$2017
30388                                           ! 4368 0x341b,0x341c,0x341d,0x341e,
30389 7F5B                      341B            .word	$341B
30390 7F5D                      341C            .word	$341C
30391 7F5F                      341D            .word	$341D
30392 7F61                      341E            .word	$341E
30393                                           ! 4369 0xffff
30394                                           ! 4370 };
30395 7F63                      FFFF            .word	$FFFF
30396                                           !BCC_EOS
30397                                           ! 4371 unsigned short ccrtc_1024x768x8[] = {
30398                                           export	_ccrtc_1024x768x8
30399                       00007F65            _ccrtc_1024x768x8:
30400                                           ! 4372 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30401 7F65                      2911            .word	$2911
30402 7F67                      A300            .word	$A300
30403 7F69                      7F01            .word	$7F01
30404 7F6B                      7F02            .word	$7F02
30405 7F6D                      8603            .word	$8603
30406 7F6F                      8304            .word	$8304
30407 7F71                      9405            .word	$9405
30408 7F73                      2406            .word	$2406
30409 7F75                      F507            .word	$F507
30410                                           ! 4373 0x6009,0x000c,0x000d,
30411 7F77                      6009            .word	$6009
30412 7F79                      000C            .word	$C
30413 7F7B                      000D            .word	$D
30414                                           ! 4374 0x0310,0xff12,0x8013,0x4014,0xff15,0x2416,0xc317,0xff18,
30415 7F7D                      0310            .word	$310
30416 7F7F                      FF12            .word	$FF12
30417 7F81                      8013            .word	$8013
30418 7F83                      4014            .word	$4014
30419 7F85                      FF15            .word	$FF15
30420 7F87                      2416            .word	$2416
30421 7F89                      C317            .word	$C317
30422 7F8B                      FF18            .word	$FF18
30423                                           ! 4375 0x001a,0x221b,0x001d,
30424 7F8D                      001A            .word	$1A
30425 7F8F                      221B            .word	$221B
30426 7F91                      001D            .word	$1D
30427                                           ! 4376 0xffff
30428                                           ! 4377 };
30429 7F93                      FFFF            .word	$FFFF
30430                                           !BCC_EOS
30431                                           ! 4378 unsigned short cseq_1024x768x16[] = {
30432                                           export	_cseq_1024x768x16
30433                       00007F95            _cseq_1024x768x16:
30434                                           ! 4379 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30435 7F95                      0300            .word	$300
30436 7F97                      2101            .word	$2101
30437 7F99                      0F02            .word	$F02
30438 7F9B                      0003            .word	3
30439 7F9D                      0E04            .word	$E04
30440 7F9F                      1707            .word	$1707
30441                                           ! 4380 0x760b,0x760c,0x7
30442 7FA1                      760B            .word	$760B
30443 7FA3                      760C            .word	$760C
30444                                           ! 4380 60d,0x760e,
30445 7FA5                      760D            .word	$760D
30446 7FA7                      760E            .word	$760E
30447                                           ! 4381 0x0412,0x0013,0x2017,
30448 7FA9                      0412            .word	$412
30449 7FAB                      0013            .word	$13
30450 7FAD                      2017            .word	$2017
30451                                           ! 4382 0x341b,0x341c,0x341d,0x341e,
30452 7FAF                      341B            .word	$341B
30453 7FB1                      341C            .word	$341C
30454 7FB3                      341D            .word	$341D
30455 7FB5                      341E            .word	$341E
30456                                           ! 4383 0xffff
30457                                           ! 4384 };
30458 7FB7                      FFFF            .word	$FFFF
30459                                           !BCC_EOS
30460                                           ! 4385 unsigned short ccrtc_1024x768x16[] = {
30461                                           export	_ccrtc_1024x768x16
30462                       00007FB9            _ccrtc_1024x768x16:
30463                                           ! 4386 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30464 7FB9                      2911            .word	$2911
30465 7FBB                      A300            .word	$A300
30466 7FBD                      7F01            .word	$7F01
30467 7FBF                      7F02            .word	$7F02
30468 7FC1                      8603            .word	$8603
30469 7FC3                      8304            .word	$8304
30470 7FC5                      9405            .word	$9405
30471 7FC7                      2406            .word	$2406
30472 7FC9                      F507            .word	$F507
30473                                           ! 4387 0x6009,0x000c,0x000d,
30474 7FCB                      6009            .word	$6009
30475 7FCD                      000C            .word	$C
30476 7FCF                      000D            .word	$D
30477                                           ! 4388 0x0310,0xff12,0x0013,0x4014,0xff15,0x2416,0xc317,0xff18,
30478 7FD1                      0310            .word	$310
30479 7FD3                      FF12            .word	$FF12
30480 7FD5                      0013            .word	$13
30481 7FD7                      4014            .word	$4014
30482 7FD9                      FF15            .word	$FF15
30483 7FDB                      2416            .word	$2416
30484 7FDD                      C317            .word	$C317
30485 7FDF                      FF18            .word	$FF18
30486                                           ! 4389 0x001a,0x321b,0x001d,
30487 7FE1                      001A            .word	$1A
30488 7FE3                      321B            .word	$321B
30489 7FE5                      001D            .word	$1D
30490                                           ! 4390 0xffff
30491                                           ! 4391 };
30492 7FE7                      FFFF            .word	$FFFF
30493                                           !BCC_EOS
30494                                           ! 4392 unsigned short cseq_1024x768x24[] = {
30495                                           export	_cseq_1024x768x24
30496                       00007FE9            _cseq_1024x768x24:
30497                                           ! 4393 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1507,
30498 7FE9                      0300            .word	$300
30499 7FEB                      2101            .word	$2101
30500 7FED                      0F02            .word	$F02
30501 7FEF                      0003            .word	3
30502 7FF1                      0E04            .word	$E04
30503 7FF3                      1507            .word	$1507
30504                                           ! 4394 0x760b,0x760c,0x760d,0x760e,
30505 7FF5                      760B            .word	$760B
30506 7FF7                      760C            .word	$760C
30507 7FF9                      760D            .word	$760D
30508 7FFB                      760E            .word	$760E
30509                                           ! 4395 0x0412,0x0013,0x2017,
30510 7FFD                      0412            .word	$412
30511 7FFF                      0013            .word	$13
30512 8001                      2017            .word	$2017
30513                                           ! 4396 0x341b,0x341c,0x341d,0x341e,
30514 8003                      341B            .word	$341B
30515 8005                      341C            .word	$341C
30516 8007                      341D            .word	$341D
30517 8009                      341E            .word	$341E
30518                                           ! 4397 0xffff
30519                                           ! 4398 };
30520 800B                      FFFF            .word	$FFFF
30521                                           !BCC_EOS
30522                                           ! 4399 unsigned short ccrtc_1024x768x24[] = {
30523                                           export	_ccrtc_1024x768x24
30524                       0000800D            _ccrtc_1024x768x24:
30525                                           ! 4400 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30526 800D                      2911            .word	$2911
30527 800F                      A300            .word	$A300
30528 8011                      7F01            .word	$7F01
30529 8013                      7F02            .word	$7F02
30530 8015                      8603            .word	$8603
30531 8017                      8304            .word	$8304
30532 8019                      9405            .word	$9405
30533 801B                      2406            .word	$2406
30534 801D                      F507            .word	$F507
30535                                           ! 4401 0x6009,0x000c,0x000d,
30536 801F                      6009            .word	$6009
30537 8021                      000C            .word	$C
30538 8023                      000D            .word	$D
30539                                           ! 4402 0x0310,0xff12,0x8013,0x4014,0xff15,0x2416,0xc317,0xff18,
30540 8025                      0310            .word	$310
30541 8027                      FF12            .word	$FF12
30542 8029                      8013            .word	$8013
30543 802B                      4014            .word	$4014
30544 802D                      FF15            .word	$FF15
30545 802F                      2416            .word	$2416
30546 8031                      C317            .word	$C317
30547 8033                      FF18            .word	$FF18
30548                                           ! 4403 0x001a,0x321b,0x001d,
30549 8035                      001A            .word	$1A
30550 8037                      321B            .word	$321B
30551 8039                      001D            .word	$1D
30552                                           ! 4404 0xffff
30553                                           ! 4405 };
30554 803B                      FFFF            .word	$FFFF
30555                                           !BCC_EOS
30556                                           ! 4406 unsigned short cseq_1280x1024x8[] = {
30557                                           export	_cseq_1280x1024x8
30558                       0000803D            _cseq_1280x1024x8:
30559                                           ! 4407 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30560 803D                      0300            .word	$300
30561 803F                      2101            .word	$2101
30562 8041                      0F02            .word	$F02
30563 8043                      0003            .word	3
30564 8045                      0E04            .word	$E04
30565 8047                      1107            .word	$1107
30566                                           ! 4408 0x760b,0x760c,0x760d,0x760e,
30567 8049                      760B            .word	$760B
30568 804B                      760C            .word	$760C
30569 804D                      760D            .word	$760D
30570 804F                      760E            .word	$760E
30571                                           ! 4409 0x0412,0x0013,0x2017,
30572 8051                      0412            .word	$412
30573 8053                      0013            .word	$13
30574 8055                      2017            .word	$2017
30575                                           ! 4410 0x341b,0x341c,0x341d,0x341e,
30576 8057                      341B            .word	$341B
30577 8059                      341C            .word	$341C
30578 805B                      341D            .word	$341D
30579 805D                      341E            .word	$341E
30580                                           ! 4411 0xffff
30581                                           ! 4412 };
30582 805F                      FFFF            .word	$FFFF
30583                                           !BCC_EOS
30584                                           ! 4413 unsigned short ccrtc_1280x1024x8[] = {
30585                                           export	_ccrtc_1280x1024x8
30586                       00008061            _ccrtc_1280x1024x8:
30587                                           ! 4414 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
30588 8061                      2911            .word	$2911
30589 8063                      C300            .word	$C300
30590 8065                      9F01            .word	$9F01
30591 8067                      9F02            .word	$9F02
30592 8069                      8603            .word	$8603
30593 806B                      8304            .word	$8304
30594 806D                      9405            .word	$9405
30595 806F                      2406            .word	$2406
30596 8071                      F707            .word	$F707
30597                                           ! 4415 0x6009,0x000c,0x000d,
30598 8073                      6009            .word	$6009
30599 8075                      000C            .word	$C
30600 8077                      000D            .word	$D
30601                                           ! 4416 0x0310,0xff12,0xa013,0x4014,0xff15,0x2416,0xc317,0xff18,
30602 8079                      0310            .word	$310
30603 807B                      FF12            .word	$FF12
30604 807D                      A013            .word	$A013
30605 807F                      4014            .word	$4014
30606 8081                      FF15            .word	$FF15
30607 8083                      2416            .word	$2416
30608 8085                      C317            .word	$C317
30609 8087                      FF18            .word	$FF18
30610                                           ! 4417 0x001a,0x221b,0x001d,
30611 8089                      001A            .word	$1A
30612 808B                      221B            .word	$221B
30613 808D                      001D            .word	$1D
30614                                           ! 4418 0xffff
30615                                           ! 4419 };
30616 808F                      FFFF            .word	$FFFF
30617                                           !BCC_EOS
30618                                           ! 4420 unsigned short cseq_1280x1024x16[] = {
30619                                           export	_cseq_1280x1024x16
30620                       00008091            _cseq_1280x1024x16:
30621                                           ! 4421 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30622 8091                      0300            .word	$300
30623 8093                      2101            .word	$2101
30624 8095                      0F02            .word	$F02
30625 8097                      0003            .word	3
30626 8099                      0E04            .word	$E04
30627 809B                      1707            .word	$1707
30628                                           ! 4422 0x760b,0x760c,0x760d,0x760e,
30629 809D                      760B            .word	$760B
30630 809F                      760C            .word	$760C
30631 80A1                      760D            .word	$760D
30632 80A3                      760E            .word	$760E
30633                                           ! 4423 0x0412,0x0013,0x2017,
30634 80A5                      0412            .word	$412
30635 80A7                      0013            .word	$13
30636 80A9                      2017            .word	$2017
30637                                           ! 4424 0x341b,0x341c,0x341d,0x341e,
30638 80AB                      341B            .word	$341B
30639 80AD                      341C            .word	$341C
30640 80AF                      341D            .word	$341D
30641 80B1                      341E            .word	$341E
30642                                           ! 4425 0xffff
30643                                           ! 4426 };
30644 80B3                      FFFF            .word	$FFFF
30645                                           !BCC_EOS
30646                                           ! 4427 unsigned short ccrtc_1280x1024x16[] = {
30647                                           export	_ccrtc_1280x1024x16
30648                       000080B5            _ccrtc_1280x1024x16:
30649                                           ! 4428 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
30650 80B5                      2911            .word	$2911
30651 80B7                      C300            .word	$C300
30652 80B9                      9F01            .word	$9F01
30653 80BB                      9F02            .word	$9F02
30654 80BD                      8603            .word	$8603
30655 80BF                      8304            .word	$8304
30656 80C1                      9405            .word	$9405
30657 80C3                      2406            .word	$2406
30658 80C5                      F707            .word	$F707
30659                                           ! 4429 0x6009,0x000c,0x000d,
30660 80C7                      6009            .word	$6009
30661 80C9                      000C            .word	$C
30662 80CB                      000D            .word	$D
30663                                           ! 4430 0x0310,0xff12,0x4013,0x4014,0xff15,0x2416,0xc317,0xff18,
30664 80CD                      0310            .word	$310
30665 80CF                      FF12            .word	$FF12
30666 80D1                      4013            .word	$4013
30667 80D3                      4014            .word	$4014
30668 80D5                      FF15            .word	$FF15
30669 80D7                      2416            .word	$2416
30670 80D9                      C317            .word	$C317
30671 80DB                      FF18            .word	$FF18
30672                                           ! 4431 0x001a,0x321b,0x001d,
30673 80DD                      001A            .word	$1A
30674 80DF                      321B            .word	$321B
30675 80E1                      001D            .word	$1D
30676                                           ! 4432 0xffff
30677                                           ! 4433 };
30678 80E3                      FFFF            .word	$FFFF
30679                                           !BCC_EOS
30680                                           ! 4434 unsigned short cseq_1600x1200x8[] = {
30681                                           export	_cseq_1600x1200x8
30682                       000080E5            _cseq_1600x1200x8:
30683                                           ! 4435 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30684 80E5                      0300            .word	$300
30685 80E7                      2101            .word	$2101
30686 80E9                      0F02            .word	$F02
30687 80EB                      0003            .word	3
30688 80ED                      0E04            .word	$E04
30689 80EF                      1107            .word	$1107
30690                                           ! 4436 0x760b,0x760c,0x760d,0x760e,
30691 80F1                      760B            .word	$760B
30692 80F3                      760C            .word	$760C
30693 80F5                      760D            .word	$760D
30694 80F7                      760E            .word	$760E
30695                                           ! 4437 0x0412,0x0013,0x2017,
30696 80F9                      0412            .word	$412
30697 80FB                      0013            .word	$13
30698 80FD                      2017            .word	$2017
30699                                           ! 4438 0x341b,0x341c,0x341d,0x341e,
30700 80FF                      341B            .word	$341B
30701 8101                      341C            .word	$341C
30702 8103                      341D            .word	$341D
30703 8105                      341E            .word	$341E
30704                                           ! 4439 0xffff
30705                                           ! 4440 };
30706 8107                      FFFF            .word	$FFFF
30707                                           !BCC_EOS
30708                                           ! 4441 unsigned short ccrtc_1600x1200x8[] = {
30709                                           export	_ccrtc_1600x1200x8
30710                       00008109            _ccrtc_1600x1200x8:
30711                                           ! 4442 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
30712 8109                      2911            .word	$2911
30713 810B                      C300            .word	$C300
30714 810D                      9F01            .word	$9F01
30715 810F                      9F02            .word	$9F02
30716 8111                      8603            .word	$8603
30717 8113                      8304            .word	$8304
30718 8115                      9405            .word	$9405
30719 8117                      2406            .word	$2406
30720 8119                      F707            .word	$F707
30721                                           ! 4443 0x6009,0x000c,0x000d,
30722 811B                      6009            .word	$6009
30723 811D                      000C            .word	$C
30724 811F                      000D            .word	$D
30725                                           ! 4444 0x0310,0xff12,0xa013,0x4014,0xff15,0x2416,0xc317,0xff18,
30726 8121                      0310            .word	$310
30727 8123                      FF12            .word	$FF12
30728 8125                      A013            .word	$A013
30729 8127                      4014            .word	$4014
30730 8129                      FF15            .word	$FF15
30731 812B                      2416            .word	$2416
30732 812D                      C317            .word	$C317
30733 812F                      FF18            .word	$FF18
30734                                           ! 4445 0x001a,0x221b,0x001d,
30735 8131                      001A            .word	$1A
30736 8133                      221B            .word	$221B
30737 8135                      001D            .word	$1D
30738                                           ! 4446 0xffff
30739                                           ! 4447 };
30740 8137                      FFFF            .word	$FFFF
30741                                           !BCC_EOS
30742                                           ! 4448 cirrus_mode_t cirrus_modes[] =
30743                                           ! 4449 {
30744                                           export	_cirrus_modes
30745                       00008139            _cirrus_modes:
30746                                           ! 4450  {0x5f,640,480,8,0x00,
30747 8139                      005F            .word	$5F
30748 813B                      0280            .word	$280
30749 813D                      01E0            .word	$1E0
30750 813F                      0008            .word	8
30751 8141                      0000            .word	0
30752                                           ! 4451    cseq_640x480x8,cgraph_svgacolor,ccrtc_640x480x8,8,
30753 8143                      7D49            .word	_cseq_640x480x8
30754 8145                      7D2F            .word	_cgraph_svgacolor
30755 8147                      7D6D            .word	_ccrtc_640x480x8
30756 8149                        08            .byte	8
30757                                           ! 4452    4,0,0,0,0,0,0,0,0},
30758 814A                        04            .byte	4
30759 814B                        00            .byte	0
30760 814C                        00            .byte	0
30761 814D                        00            .byte	0
30762 814E                        00            .byte	0
30763 814F                        00            .byte	0
30764 8150                        00            .byte	0
30765 8151                        00            .byte	0
30766 8152                        00            .byte	0
30767                                           ! 4453  {0x64,640,480,16,0xe1,
30768 8153                      0064            .word	$64
30769 8155                      0280            .word	$280
30770 8157                      01E0            .word	$1E0
30771 8159                      0010            .word	$10
30772 815B                      00E1            .word	$E1
30773                                           ! 4454    cseq_640x480x16,cgraph_svgacolor,ccrtc_640x480x16,16,
30774 815D                      7D9D            .word	_cseq_640x480x16
30775 815F                      7D2F            .word	_cgraph_svgacolor
30776 8161                      7DC1            .word	_ccrtc_640x480x16
30777 8163                        10            .byte	$10
30778                                           ! 4455    6,
30779                                           ! 4455 5,11,6,5,5,0,0,0},
30780 8164                        06            .byte	6
30781 8165                        05            .byte	5
30782 8166                        0B            .byte	$B
30783 8167                        06            .byte	6
30784 8168                        05            .byte	5
30785 8169                        05            .byte	5
30786 816A                        00            .byte	0
30787 816B                        00            .byte	0
30788 816C                        00            .byte	0
30789                                           ! 4456  {0x66,640,480,15,0xf0,
30790 816D                      0066            .word	$66
30791 816F                      0280            .word	$280
30792 8171                      01E0            .word	$1E0
30793 8173                      000F            .word	$F
30794 8175                      00F0            .word	$F0
30795                                           ! 4457    cseq_640x480x16,cgraph_svgacolor,ccrtc_640x480x16,16,
30796 8177                      7D9D            .word	_cseq_640x480x16
30797 8179                      7D2F            .word	_cgraph_svgacolor
30798 817B                      7DC1            .word	_ccrtc_640x480x16
30799 817D                        10            .byte	$10
30800                                           ! 4458    6,5,10,5,5,5,0,1,15},
30801 817E                        06            .byte	6
30802 817F                        05            .byte	5
30803 8180                        0A            .byte	$A
30804 8181                        05            .byte	5
30805 8182                        05            .byte	5
30806 8183                        05            .byte	5
30807 8184                        00            .byte	0
30808 8185                        01            .byte	1
30809 8186                        0F            .byte	$F
30810                                           ! 4459  {0x71,640,480,24,0xe5,
30811 8187                      0071            .word	$71
30812 8189                      0280            .word	$280
30813 818B                      01E0            .word	$1E0
30814 818D                      0018            .word	$18
30815 818F                      00E5            .word	$E5
30816                                           ! 4460    cseq_640x480x24,cgraph_svgacolor,ccrtc_640x480x24,24,
30817 8191                      7DF1            .word	_cseq_640x480x24
30818 8193                      7D2F            .word	_cgraph_svgacolor
30819 8195                      7E15            .word	_ccrtc_640x480x24
30820 8197                        18            .byte	$18
30821                                           ! 4461    6,8,16,8,8,8,0,0,0},
30822 8198                        06            .byte	6
30823 8199                        08            .byte	8
30824 819A                        10            .byte	$10
30825 819B                        08            .byte	8
30826 819C                        08            .byte	8
30827 819D                        08            .byte	8
30828 819E                        00            .byte	0
30829 819F                        00            .byte	0
30830 81A0                        00            .byte	0
30831                                           ! 4462  {0x5c,800,600,8,0x00,
30832 81A1                      005C            .word	$5C
30833 81A3                      0320            .word	$320
30834 81A5                      0258            .word	$258
30835 81A7                      0008            .word	8
30836 81A9                      0000            .word	0
30837                                           ! 4463    cseq_800x600x8,cgraph_svgacolor,ccrtc_800x600x8,8,
30838 81AB                      7E45            .word	_cseq_800x600x8
30839 81AD                      7D2F            .word	_cgraph_svgacolor
30840 81AF                      7E69            .word	_ccrtc_800x600x8
30841 81B1                        08            .byte	8
30842                                           ! 4464    4,0,0,0,0,0,0,0,0},
30843 81B2                        04            .byte	4
30844 81B3                        00            .byte	0
30845 81B4                        00            .byte	0
30846 81B5                        00            .byte	0
30847 81B6                        00            .byte	0
30848 81B7                        00            .byte	0
30849 81B8                        00            .byte	0
30850 81B9                        00            .byte	0
30851 81BA                        00            .byte	0
30852                                           ! 4465  {0x65,800,600,16,0xe1,
30853 81BB                      0065            .word	$65
30854 81BD                      0320            .word	$320
30855 81BF                      0258            .word	$258
30856 81C1                      0010            .word	$10
30857 81C3                      00E1            .word	$E1
30858                                           ! 4466    cseq_800x600x16,cgraph_svgacolor,ccrtc_800x600x16,16,
30859 81C5                      7E99            .word	_cseq_800x600x16
30860 81C7                      7D2F            .word	_cgraph_svgacolor
30861 81C9                      7EBD            .word	_ccrtc_800x600x16
30862 81CB                        10            .byte	$10
30863                                           ! 4467    6,5,11,6,5,5,0,0,0},
30864 81CC                        06            .byte	6
30865 81CD                        05            .byte	5
30866 81CE                        0B            .byte	$B
30867 81CF                        06            .byte	6
30868 81D0                        05            .byte	5
30869 81D1                        05            .byte	5
30870 81D2                        00            .byte	0
30871 81D3                        00            .byte	0
30872 81D4                        00            .byte	0
30873                                           ! 4468  {0x67,800,600,15,0xf0,
30874 81D5                      0067            .word	$67
30875 81D7                      0320            .word	$320
30876 81D9                      0258            .word	$258
30877 81DB                      000F            .word	$F
30878 81DD                      00F0            .word	$F0
30879                                           ! 4469    cseq_800x600x16,cgraph_svgacolor,ccrtc_800x600x16,16,
30880 81DF                      7E99            .word	_cseq_800x600x16
30881 81E1                      7D2F            .word	_cgraph_svgacolor
30882 81E3                      7EBD            .word	_ccrtc_800x600x16
30883 81E5                        10            .byte	$10
30884                                           ! 4470    6,5,10,5,5,5,0,1,15},
30885 81E6                        06            .byte	6
30886 81E7                        05            .byte	5
30887 81E8                        0A            .byte	$A
30888 81E9                        05            .byte	5
30889 81EA                        05            .byte	5
30890 81EB                        05            .byte	5
30891 81EC                        00            .byte	0
30892 81ED                        01            .byte	1
30893 81EE                        0F            .byte	$F
30894                                           ! 4471  {0x60,1024,768,8,0x00,
30895 81EF                      0060            .word	$60
30896 81F1                      0400            .word	$400
30897 81F3                      0300            .word	$300
30898 81F5                      0008            .word	8
30899 81F7                      0000            .word	0
30900                                           ! 4472    cseq_1024x768x8,cgraph_svgacolor,ccrtc_1024x768x8,8,
30901 81F9                      7F41            .word	_cseq_1024x768x8
30902 81FB                      7D2F            .word	_cgraph_svgacolor
30903 81FD                      7F65            .word	_ccrtc_1024x768x8
30904 81FF                        08            .byte	8
30905                                           ! 4473    4,0,0,0,0,0,0,0,0},
30906 8200                        04            .byte	4
30907 8201                        00            .byte	0
30908 8202                        00            .byte	0
30909 8203                        00            .byte	0
30910 8204                        00            .byte	0
30911 8205                        00            .byte	0
30912 8206                        00            .byte	0
30913 8207                        00            .byte	0
30914 8208                        00            .byte	0
30915                                           ! 4474  {0x74,1024,768,16,0xe1,
30916 8209                      0074            .word	$74
30917 820B                      0400            .word	$400
30918 820D                      0300            .word	$300
30919 820F                      0010            .word	$10
30920 8211                      00E1            .word	$E1
30921                                           ! 4475    cseq_1024x768x16,cgraph_svgacolor,ccrtc_1024x768x16,16,
30922 8213                      7F95            .word	_cseq_1024x768x16
30923 8215                      7D2F            .word	_cgraph_svgacolor
30924 8217                      7FB9            .word	_ccrtc_1024x768x16
30925 8219                        10            .byte	$10
30926                                           ! 4476    6,5,11,6,5,5,0,0,0},
30927 821A                        06            .byte	6
30928 821B                        05            .byte	5
30929 821C                        0B            .byte	$B
30930 821D                        06            .byte	6
30931 821E                        05            .byte	5
30932 821F                        05            .byte	5
30933 8220                        00            .byte	0
30934 8221                        00            .byte	0
30935 8222                        00            .byte	0
30936                                           ! 4477  {0x68,1024,768,15,0xf0,
30937 8223                      0068            .word	$68
30938 8225                      0400            .word	$400
30939 8227                      0300            .word	$300
30940 8229                      000F            .word	$F
30941 822B                      00F0            .word	$F0
30942                                           ! 4478    cseq_1024x768x16,cgraph_svgacolor,ccrtc_1024x768x16,16,
30943 822D                      7F95            .word	_cseq_1024x768x16
30944 822F                      7D2F            .word	_cgraph_svgacolor
30945 8231                      7FB9            .word	_ccrtc_1024x768x16
30946 8233                        10            .byte	$10
30947                                           ! 4479    6,5,10,5,5,5,0,1,15},
30948 8234                        06            .byte	6
30949 8235                        05            .byte	5
30950 8236                        0A            .byte	$A
30951 8237                        05            .byte	5
30952 8238                        05            .byte	5
30953 8239                        05            .byte	5
30954 823A                        00            .byte	0
30955 823B                        01            .byte	1
30956 823C                        0F            .byte	$F
30957                                           ! 4480  {0x78,800,600,24,0xe5,
30958 823D                      0078            .word	$78
30959 823F                      0320            .word	$320
30960 8241                      0258            .word	$258
30961 8243                      0018            .word	$18
30962 8245                      00E5            .word	$E5
30963                                           ! 4481    cseq_800x600x24,cgraph_svgacolor,ccrtc_800x600x24,24,
30964 8247                      7EED            .word	_cseq_800x600x24
30965 8249                      7D2F            .word	_cgraph_svgacolor
30966 824B                      7F11            .word	_ccrtc_800x600x24
30967 824D                        18            .byte	$18
30968                                           ! 4482    6,8,16,8,8,8,0,0,0},
30969 824E                        06            .byte	6
30970 824F                        08            .byte	8
30971 8250                        10            .byte	$10
30972 8251                        08            .byte	8
30973 8252                        08            .byte	8
30974 8253                        08            .byte	8
30975 8254                        00            .byte	0
30976 8255                        00            .byte	0
30977 8256                        00            .byte	0
30978                                           ! 4483  {0x79,1024,768,24,0xe5,
30979 8257                      0079            .word	$79
30980 8259                      0400            .word	$400
30981 825B                      0300            .word	$300
30982 825D                      0018            .word	$18
30983 825F                      00E5            .word	$E5
30984                                           ! 4484    cseq_1024x768x24,cgraph_svgacolor,ccrtc_1024x768x24,24,
30985 8261                      7FE9            .word	_cseq_1024x768x24
30986 8263                      7D2F            .word	_cgraph_svgacolor
30987 8265                      800D            .word	_ccrtc_1024x768x24
30988 8267                        18            .byte	$18
30989                                           ! 4485    6,8,16,8,8,8,0,0,0},
30990 8268                        06            .byte	6
30991 8269                        08            .byte	8
30992 826A                        10            .byte	$10
30993 826B                        08            .byte	8
30994 826C                        08            .byte	8
30995 826D                        08            .byte	8
30996 826E                        00            .byte	0
30997 826F                        00            .byte	0
30998 8270                        00            .byte	0
30999                                           ! 4486  {0x6d,1280,1024,8,0x00,
31000 8271                      006D            .word	$6D
31001 8273                      0500            .word	$500
31002 8275                      0400            .word	$400
31003 8277                      0008            .word	8
31004 8279                      0000            .word	0
31005                                           ! 4487    cseq_1280x1024x8,cgraph_svgacolor,ccrtc_1280x1024x8,8,
31006 827B                      803D            .word	_cseq_1280x1024x8
31007 827D                      7D2F            .word	_cgraph_svgacolor
31008 827F                      8061            .word	_ccrtc_1280x1024x8
31009 8281                        08            .byte	8
31010                                           ! 4488    4,0,0,0,0,0,0,0,0},
31011 8282                        04            .byte	4
31012 8283                        00            .byte	0
31013 8284                        00            .byte	0
31014 8285                        00            .byte	0
31015 8286                        00            .byte	0
31016 8287                        00            .byte	0
31017 8288                        00            .byte	0
31018 8289                        00            .byte	0
31019 828A                        00            .byte	0
31020                                           ! 4489  {0x69,1280,1024,15,0xf0,
31021 828B                      0069            .word	$69
31022 828D                      0500            .word	$500
31023 828F                      0400            .word	$400
31024 8291                      000F            .word	$F
31025 8293                      00F0            .word	$F0
31026                                           ! 4490    cseq_1280x1024x16,cgraph_svgacolor,ccrtc_1280x1024x16,16,
31027 8295                      8091            .word	_cseq_1280x1024x16
31028 8297                      7D2F            .word	_cgraph_svgacolor
31029 8299                      80B5            .word	_ccrtc_1280x1024x16
31030 829B                        10            .byte	$10
31031                                           ! 4491    6,5,10,5,5,5,0,1,15},
31032 829C                        06            .byte	6
31033 829D                        05            .byte	5
31034 829E                        0A            .byte	$A
31035 829F                        05            .byte	5
31036 82A0                        05            .byte	5
31037 82A1                        05            .byte	5
31038 82A2                        00            .byte	0
31039 82A3                        01            .byte	1
31040 82A4                        0F            .byte	$F
31041                                           ! 4492  {0x75,1280,1024,16,0xe1,
31042 82A5                      0075            .word	$75
31043 82A7                      0500            .word	$500
31044 82A9                      0400            .word	$400
31045 82AB                      0010            .word	$10
31046 82AD                      00E1            .word	$E1
31047                                           ! 4493    cseq_1280x1024x16,cgraph_svgacolor,ccrtc_1280x1024x16,16,
31048 82AF                      8091            .word	_cseq_1280x1024x16
31049 82B1                      7D2F            .word	_cgraph_svgacolor
31050 82B3                      80B5            .word	_ccrtc_1280x1024x16
31051 82B5                        10            .byte	$10
31052                                           ! 4494    6,5,11,6,5,5,0,0,0},
31053 82B6                        06            .byte	6
31054 82B7                        05            .byte	5
31055 82B8                        0B            .byte	$B
31056 82B9                        06            .byte	6
31057 82BA                        05            .byte	5
31058 82BB                        05            .byte	5
31059 82BC                        00            .byte	0
31060 82BD                        00            .byte	0
31061 82BE                        00            .byte	0
31062                                           ! 4495  {0x7b,1600,1200,8,0x00,
31063 82BF                      007B            .word	$7B
31064 82C1                      0640            .word	$640
31065 82C3                      04B0            .word	$4B0
31066 82C5                      0008            .word	8
31067 82C7                      0000            .word	0
31068                                           ! 4496    cseq_1600x1200x8,cgraph_svgacolor,ccrtc_1600x1200x8,8,
31069 82C9                      80E5            .word	_cseq_1600x1200x8
31070 82CB                      7D2F            .word	_cgraph_svgacolor
31071 82CD                      8109            .word	_ccrtc_1600x1200x8
31072 82CF                        08            .byte	8
31073                                           ! 4497    4,0,0,0,0,0,0,0,0},
31074 82D0                        04            .byte	4
31075 82D1                        00            .byte	0
31076 82D2                        00            .byte	0
31077 82D3                        00            .byte	0
31078 82D4                        00            .byte	0
31079 82D5                        00            .byte	0
31080 82D6                        00            .byte	0
31081 82D7                        00            .byte	0
31082 82D8                        00            .byte	0
31083                                           ! 4498  {0xfe,0,0,0,0,cseq_vga,cgraph_vga,ccrtc_vga,0,
31084 82D9                      00FE            .word	$FE
31085 82DB                      0000            .word	0
31086 82DD                      0000            .word	0
31087 82DF                      0000            .word	0
31088 82E1                      0000            .word	0
31089 82E3                      7D1B            .word	_cseq_vga
31090 82E5                      7D1F            .word	_cgraph_vga
31091 82E7                      7D27            .word	_ccrtc_vga
31092 82E9                        00            .byte	0
31093                                           ! 4499    0xff,0,0,0,0,0,0,0,0},
31094 82EA                        FF            .byte	$FF
31095 82EB                        00            .byte	0
31096 82EC                        00            .byte	0
31097 82ED                        00            .byte	0
31098 82EE                        00            .byte	0
31099 82EF                        00            .byte	0
31100 82F0                        00            .byte	0
31101 82F1                        00            .byte	0
31102 82F2                        00            .byte	0
31103                                           ! 4500  {0xff,0,0,0,0,0,0,0,0,
31104 82F3                      00FF            .word	$FF
31105 82F5                      0000            .word	0
31106 82F7                      0000            .word	0
31107 82F9                      0000            .word	0
31108 82FB                      0000            .word	0
31109 82FD                      0000            .word	0
31110 82FF                      0000            .word	0
31111 8301                      0000            .word	0
31112 8303                        00            .byte	0
31113                                           ! 4501    0xff,0,0,0,0,0,0,0,0},
31114 8304                        FF            .byte	$FF
31115 8305                        00            .byte	0
31116 8306                        00            .byte	0
31117 8307                        00            .byte	0
31118 8308                        00            .byte	0
31119 8309                        00            .byte	0
31120 830A                        00            .byte	0
31121 830B                        00            .byte	0
31122 830C                        00            .byte	0
31123                                           ! 4502 };
31124                                           !BCC_EOS
31125                                           ! 4503 unsigned char cirrus_id_table[] = {
31126                                           export	_cirrus_id_table
31127                       0000830D            _cirrus_id_table:
31128                                           ! 4504   0xA0, 0x32,
31129 830D                        A0            .byte	$A0
31130 830E                        32            .byte	$32
31131                                           ! 4505   0xB8, 0x39,
31132 830F                        B8            .byte	$B8
31133 8310                        39            .byte	$39
31134                                           ! 4506   0xff, 0xff
31135 8311                        FF            .byte	$FF
31136                                           ! 4507 };
31137 8312                        FF            .byte	$FF
31138                                           !BCC_EOS
31139                                           ! 4508 unsigned short cirrus_vesa_modelist[] = {
31140                                           export	_cirrus_vesa_modelist
31141                       00008313            _cirrus_vesa_modelist:
31142                                           ! 4509   0x101, 0x5f,
31143 8313                      0101            .word	$101
31144 8315                      005F            .word	$5F
31145                                           ! 4510   0x110, 0x66,
31146 8317                      0110            .word	$110
31147 8319                      0066            .word	$66
31148                                           ! 4511   0x111, 0x64,
31149 831B                      0111            .word	$111
31150 831D                      0064            .word	$64
31151                                           ! 4512   0x112, 0x71,
31152 831F                      0112            .word	$112
31153 8321                      0071            .word	$71
31154                                           ! 4513   0x103, 0x5c,
31155 8323                      0103            .word	$103
31156 8325                      005C            .word	$5C
31157                                           ! 4514   0x113, 0x67,
31158 8327                      0113            .word	$113
31159 8329                      0067            .word	$67
31160                                           ! 4515   0x114, 0x65,
31161 832B                      0114            .word	$114
31162 832D                      0065            .word	$65
31163                                           ! 4516   0x115, 0x78,
31164 832F                      0115            .word	$115
31165 8331                      0078            .word	$78
31166                                           ! 4517   0x105, 0x60,
31167 8333                      0105            .word	$105
31168 8335                      0060            .word	$60
31169                                           ! 4518   0x116, 0x68,
31170 8337                      0116            .word	$116
31171 8339                      0068            .word	$68
31172                                           ! 4519   0x117, 0x74,
31173 833B                      0117            .word	$117
31174 833D                      0074            .word	$74
31175                                           ! 4520   0x118, 0x79,
31176 833F                      0118            .word	$118
31177 8341                      0079            .word	$79
31178                                           ! 4521   0x107, 0x6d,
31179 8343                      0107            .word	$107
31180 8345                      006D            .word	$6D
31181                                           ! 4522   0x119, 0x69,
31182 8347                      0119            .word	$119
31183 8349                      0069            .word	$69
31184                                           ! 4523   0x11a, 0x75,
31185 834B                      011A            .word	$11A
31186 834D                      0075            .word	$75
31187                                           ! 4524   0xffff,0xffff
31188 834F                      FFFF            .word	$FFFF
31189                                           ! 4525 };
31190 8351                      FFFF            .word	$FFFF
31191                                           !BCC_EOS
31192                                           ! 4526 #asm
31193                                           !BCC_ASM
31194                       00008353            cirrus_installed:
31195 8353                        63            .ascii "cirrus-compatible VGA is detected"
31196 8374                        0D            .byte 0x0d,0x0a
31197 8376                        0D            .byte 0x0d,0x0a,0x00
31198                       00008379            cirrus_not_installed:
31199 8379                        63            .ascii "cirrus-compatible VGA is not detected"
31200 839E                        0D            .byte 0x0d,0x0a
31201 83A0                        0D            .byte 0x0d,0x0a,0x00
31202                       000083A3            cirrus_vesa_vendorname:
31203                       000083A3            cirrus_vesa_productname:
31204                       000083A3            cirrus_vesa_oemname:
31205 83A3                        56            .ascii "VGABIOS Cirrus extension"
31206 83BB                        00            .byte 0
31207                       000083BC            cirrus_vesa_productrevision:
31208 83BC                        31            .ascii "1.0"
31209 83BF                        00            .byte 0
31210                       000083C0            cirrus_init:
31211 83C0           E8         0049              call cirrus_check
31212 83C3           75           31              jnz no_cirrus
31213                                             SET_INT_VECTOR(0x10, #0xC000, #cirrus_int10_handler)
 +a   83C5           1E                           push ds
 +a   83C6           31C0                         xor ax, ax
 +a   83C8           8ED8                         mov ds, ax
 +a   83CA           B8                   841C    mov ax,  #cirrus_int10_handler
 +a   83CD           A3         0040              mov 0x10*4, ax
 +a   83D0           B8                   C000    mov ax,  #0xC000
 +a   83D3           A3         0042              mov 0x10*4+2, ax
 +a   83D6           1F                           pop ds
31214 83D7           B0                     0F    mov al, #0x0f ; memory setup
31215 83D9           BA                   03C4    mov dx, #0x3C4
31216 83DC           EE                           out dx, al
31217 83DD           42                           inc dx
31218 83DE           EC                           in al, dx
31219 83DF           24                     18    and al, #0x18
31220 83E1           88C4                         mov ah, al
31221 83E3           B0                     0A    mov al, #0x0a
31222 83E5           4A                           dec dx
31223 83E6           EF                           out dx, ax
31224 83E7           B8                   0007    mov ax, #0x0007 ; set vga mode
31225 83EA           EF                           out dx, ax
31226 83EB           B8                   0431    mov ax, #0x0431 ; reset bitblt
31227 83EE           BA                   03CE    mov dx, #0x3CE
31228 83F1           EF                           out dx, ax
31229 83F2           B8                   0031    mov ax, #0x0031
31230 83F5           EF                           out dx, ax
31231                       000083F6            no_cirrus:
31232 83F6           C3                           ret
31233                       000083F7            cirrus_display_info:
31234 83F7           1E                           push ds
31235 83F8           56                           push si
31236 83F9           0E                           push cs
31237 83FA           1F                           pop ds
31238 83FB           E8         000E              call cirrus_check
31239 83FE           BE                   8379    mov si, #cirrus_not_installed
31240 8401           75           03              jnz cirrus_msgnotinstalled
31241 8403           BE                   8353    mov si, #cirrus_installed
31242                       00008406            cirrus_msgnotinstalled:
31243 8406           E8         B202              call _display_string
31244 8409           5E                           pop si
31245 840A           1F                           pop ds
31246 840B           C3                           ret
31247                       0000840C            cirrus_check:
31248 840C           50                           push ax
31249 840D           52                           push dx
31250 840E           B8                   9206    mov ax, #0x9206
31251 8411           BA                   03C4    mov dx, #0x3C4
31252 8414           EF                           out dx, ax
31253 8415           42                           inc dx
31254 8416           EC                           in al, dx
31255 8417           3C                     12    cmp al, #0x12
31256 8419           5A                           pop dx
31257 841A           58                           pop ax
31258 841B           C3                           ret
31259                       0000841C            cirrus_int10_handler:
31260 841C           9C                           pushf
31261 841D           55                           push bp
31262 841E           80FC                   00    cmp ah, #0x00 ;; set video mode
31263 8421           74           15              jz cirrus_set_video_mode
31264 8423           80FC                   12    cmp ah, #0x12 ;; cirrus extension
31265 8426           74           34              jz cirrus_extbios
31266 8428           80FC                   4F    cmp ah, #0x4F ;; VESA extension
31267 842B           74           4D              jz cirrus_vesa
31268                       0000842D            cirrus_unhandled:
31269 842D           5D                           pop bp
31270 842E           9D                           popf
31271 842F           E9         7D18              jmp vgabios_int10_handler
31272                       00008432            cirrus_return:
31273 8432           E8         0063              call cirrus_debug_dump
31274 8435           5D                           pop bp
31275 8436           9D                           popf
31276 8437           CF                           iret
31277                       00008438            cirrus_set_video_mode:
31278 8438           E8         005D              call cirrus_debug_dump
31279 843B           56                           push si
31280 843C           50                           push ax
31281 843D           53                           push bx
31282 843E           1E                           push ds
31283 843F           31F6                         xor si, si
31284 8441           8EDE                         mov ds, si
31285 8443           31DB                         xor bx, bx
31286 8445           891E       04BA              mov [0x4BA], bx
31287 8449           1F                           pop ds
31288 844A           5B                           pop bx
31289 844B           E8         04AF              call cirrus_get_modeentry
31290 844E           73           54              jnc cirrus_set_video_mode_extended
31291 8450           B0                     FE    mov al, #0xfe
31292 8452           E8         04AA              call cirrus_get_modeentry_nomask
31293 8455           E8         0091              call cirrus_switch_mode
31294 8458           58                           pop ax
31295 8459           5E                           pop si
31296 845A           EB           D1              jmp cirrus_unhandled
31297                       0000845C            cirrus_extbios:
31298 845C           E8         0039              call cirrus_debug_dump
31299 845F           80FB                   80    cmp bl, #0x80
31300 8462           72           C9              jb cirrus_unhandled
31301 8464           80FB                   AF    cmp bl, #0xAF
31302 8467           77           C4              ja cirrus_unhandled
31303 8469           53                           push bx
31304 846A           83E3                   7F    and bx, #0x7F
31305 846D           D1E3                         shl bx, 1
31306 846F                        2E             db 0x2e ;; cs:
31307 8470           8BAF       8A4C              mov bp, cirrus_extbios_handlers[bx]
31308 8474           5B                           pop bx
31309 8475           68                   8432    push #cirrus_return
31310 8478           55                           push bp
31311 8479           C3                           ret
31312                       0000847A            cirrus_vesa:
31313 847A           E8         001B              call cirrus_debug_dump
31314 847D           3C                     10    cmp al, #0x10
31315 847F           77           12              ja cirrus_vesa_not_handled
31316 8481           53                           push bx
31317 8482           31DB                         xor bx, bx
31318 8484           88C3                         mov bl, al
31319 8486           D1E3                         shl bx, 1
31320 8488                        2E             db 0x2e ;; cs:
31321 8489           8BAF       8AAC              mov bp, cirrus_vesa_handlers[bx]
31322 848D           5B                           pop bx
31323 848E           68                   8432    push #cirrus_return
31324 8491           55                           push bp
31325 8492           C3                           ret
31326                       00008493            cirrus_vesa_not_handled:
31327 8493           B8                   014F    mov ax, #0x014F ;; not implemented
31328 8496           EB           9A              jmp cirrus_return
31329                       00008498            cirrus_debug_dump:
31330 8498           06                           push es
31331 8499           1E                           push ds
31332 849A           60                           pusha
31333 849B           0E                           push cs
31334 849C           1F                           pop ds
31335 849D           E8         062E              call _cirrus_debugmsg
31336 84A0           61                           popa
31337 84A1           1F                           pop ds
31338 84A2           07                           pop es
31339 84A3           C3                           ret
31340                       000084A4            cirrus_set_video_mode_extended:
31341 84A4           E8         0042              call cirrus_switch_mode
31342 84A7           58                           pop ax ;; mode
31343 84A8           A8                     80    test al, #0x80
31344 84AA           75           08              jnz cirrus_set_video_mode_extended_1
31345 84AC           50                           push ax
31346 84AD           B8                   FFFF    mov ax, #0xffff ; set to 0xff to keep win 2K happy
31347 84B0           E8         0562              call cirrus_clear_vram
31348 84B3           58                           pop ax
31349                       000084B4            cirrus_set_video_mode_extended_1:
31350 84B4           24                     7F    and al, #0x7f
31351 84B6           1E                           push ds
31352 84B7           31F6                         xor si, si
31353 84B9           8EDE                         mov ds, si
31354 84BB           A2         0449              mov [0x449], al
31355 84BE           1F                           pop ds
31356 84BF           B0                     20    mov al, #0x20
31357 84C1           5E                           pop si
31358 84C2           E9         FF6D              jmp cirrus_return
31359                       000084C5            cirrus_vesa_pmbios_init:
31360 84C5           CB                           retf
31361                       000084C6            cirrus_vesa_pmbios_entry:
31362 84C6           9C                           pushf
31363 84C7           55                           push bp
31364 84C8           80FC                   4F    cmp ah, #0x4F
31365 84CB           75           16              jnz cirrus_vesa_pmbios_unimplemented
31366 84CD           3C                     0F    cmp al, #0x0F
31367 84CF           77           12              ja cirrus_vesa_pmbios_unimplemented
31368 84D1           53                           push bx
31369 84D2           31DB                         xor bx, bx
31370 84D4           88C3                         mov bl, al
31371 84D6           D1E3                         shl bx, 1
31372 84D8                        2E             db 0x2e ;; cs:
31373 84D9           8BAF       8AAC              mov bp, cirrus_vesa_handlers[bx]
31374 84DD           5B                           pop bx
31375 84DE           68                   84E6    push #cirrus_vesa_pmbios_return
31376 84E1           55                           push bp
31377 84E2           C3                           ret
31378                       000084E3            cirrus_vesa_pmbios_unimplemented:
31379 84E3           B8                   014F    mov ax, #0x014F
31380                       000084E6            cirrus_vesa_pmbios_return:
31381 84E6           5D                           pop bp
31382 84E7           9D                           popf
31383 84E8           CB                           retf
31384                                           ; in si:mode table
31385                       000084E9            cirrus_switch_mode:
31386 84E9           1E                           push ds
31387 84EA           53                           push bx
31388 84EB           52                           push dx
31389 84EC           0E                           push cs
31390 84ED           1F                           pop ds
31391 84EE           8B5C         0A              mov bx, [si+10] ;; seq
31392 84F1           BA                   03C4    mov dx, #0x3c4
31393 84F4           B8                   1206    mov ax, #0x1206
31394 84F7           EF                           out dx, ax ;; Unlock cirrus special
31395 84F8           E8         0056              call cirrus_switch_mode_setregs
31396 84FB           8B5C         0C              mov bx, [si+12] ;; graph
31397 84FE           BA                   03CE    mov dx, #0x3ce
31398 8501           E8         004D              call cirrus_switch_mode_setregs
31399 8504           8B5C         0E              mov bx, [si+14] ;; crtc
31400 8507           E8         03E0              call cirrus_get_crtc
31401 850A           E8         0044              call cirrus_switch_mode_setregs
31402 850D           BA                   03C6    mov dx, #0x3c6
31403 8510           B0                     00    mov al, #0x00
31404 8512           EE                           out dx, al
31405 8513           EC                           in al, dx
31406 8514           EC                           in al, dx
31407 8515           EC                           in al, dx
31408 8516           EC                           in al, dx
31409 8517           8A44         08              mov al, [si+8] ;; hidden dac
31410 851A           EE                           out dx, al
31411 851B           B0                     FF    mov al, #0xff
31412 851D           EE                           out dx, al
31413 851E           B0                     00    mov al, #0x00
31414 8520           8A5C         11              mov bl, [si+17] ;; memory model
31415 8523           08DB                         or bl, bl
31416 8525           74           09              jz is_text_mode
31417 8527           B0                     01    mov al, #0x01
31418 8529           80FB                   03    cmp bl, #0x03
31419 852C           75           02              jnz is_text_mode
31420 852E           0C                     40    or al, #0x40
31421                       00008530            is_text_mode:
31422 8530           B3                     10    mov bl, #0x10
31423 8532           E8         DD2C              call biosfn_get_single_palette_reg
31424 8535           80E7                   FE    and bh, #0xfe
31425 8538           08C7                         or bh, al
31426 853A           E8         DCAF              call biosfn_set_single_palette_reg
31427 853D           5A                           pop dx
31428 853E           5B                           pop bx
31429 853F           1F                           pop ds
31430 8540           C3                           ret
31431                       00008541            cirrus_enable_16k_granularity:
31432 8541           50                           push ax
31433 8542           52                           push dx
31434 8543           BA                   03CE    mov dx, #0x3ce
31435 8546           B0                     0B    mov al, #0x0b
31436 8548           EE                           out dx, al
31437 8549           42                           inc dx
31438 854A           EC                           in al, dx
31439 854B           0C                     20    or al, #0x20 ;; enable 16k
31440 854D           EE                           out dx, al
31441 854E           5A                           pop dx
31442 854F           58                           pop ax
31443 8550           C3                           ret
31444                       00008551            cirrus_switch_mode_setregs:
31445                       00008551            csms_1:
31446 8551           8B07                         mov ax, [bx]
31447 8553           3D                   FFFF    cmp ax, #0xffff
31448 8556           74           06              jz csms_2
31449 8558           EF                           out dx, ax
31450 8559           83C3                   02    add bx, #0x2
31451 855C           EB           F3              jmp csms_1
31452                       0000855E            csms_2:
31453 855E           C3                           ret
31454                       0000855F            cirrus_extbios_80h:
31455 855F           52                           push dx
31456 8560           E8         0387              call cirrus_get_crtc
31457 8563           B0                     27    mov al, #0x27
31458 8565           EE                           out dx, al
31459 8566           42                           inc dx
31460 8567           EC                           in al, dx
31461 8568           BB                   830D    mov bx, #_cirrus_id_table
31462                       0000856B            c80h_1:
31463 856B                        2E             db 0x2e ;; cs:
31464 856C           8A27                         mov ah, [bx]
31465 856E           38C4                         cmp ah, al
31466 8570           74           09              jz c80h_2
31467 8572           80FC                   FF    cmp ah, #0xff
31468 8575           74           04              jz c80h_2
31469 8577           43                           inc bx
31470 8578           43                           inc bx
31471 8579           EB           F0              jmp c80h_1
31472                       0000857B            c80h_2:
31473 857B                        2E             db 0x2e ;; cs:
31474 857C           8A47         01              mov al, 0x1[bx]
31475 857F           5A                           pop dx
31476 8580           B4                     00    mov ah, #0x00
31477 8582           31DB                         xor bx, bx
31478 8584           C3                           ret
31479                       00008585            cirrus_extbios_81h:
31480 8585           B8                   0100    mov ax, #0x100 ;; XXX
31481 8588           C3                           ret
31482                       00008589            cirrus_extbios_82h:
31483 8589           52                           push dx
31484 858A           E8         035D              call cirrus_get_crtc
31485 858D           31C0                         xor ax, ax
31486 858F           B0                     27    mov al, #0x27
31487 8591           EE                           out dx, al
31488 8592           42                           inc dx
31489 8593           EC                           in al, dx
31490 8594           24                     03    and al, #0x03
31491 8596           B4                     AF    mov ah, #0xAF
31492 8598           5A                           pop dx
31493 8599           C3                           ret
31494                       0000859A            cirrus_extbios_85h:
31495 859A           51                           push cx
31496 859B           52                           push dx
31497 859C           BA                   03C4    mov dx, #0x3C4
31498 859F           B0                     0F    mov al, #0x0f ;; get DRAM band width
31499 85A1           EE                           out dx, al
31500 85A2           42                           inc dx
31501 85A3           EC                           in al, dx
31502                                             ;; al = 4 << bandwidth
31503 85A4           88C1                         mov cl, al
31504 85A6           C0E9                   03    shr cl, #0x03
31505 85A9           80E1                   03    and cl, #0x03
31506 85AC           80F9                   03    cmp cl, #0x03
31507 85AF           74           06              je c85h2
31508 85B1           B0                     04    mov al, #0x04
31509 85B3           D2E0                         shl al, cl
31510 85B5           EB           08              jmp c85h3
31511                       000085B7            c85h2:
31512                                           ;; 4MB or 2MB
31513 85B7           24                     80    and al, #0x80
31514 85B9           B0                     20    mov al, #0x20 ;; 2 MB
31515 85BB           74           02              je c85h3
31516 85BD           B0                     40    mov al, #0x40 ;; 4 MB
31517                       000085BF            c85h3:
31518 85BF           5A                           pop dx
31519 85C0           59                           pop cx
31520 85C1           C3                           ret
31521                       000085C2            cirrus_extbios_9Ah:
31522 85C2           B8                   4060    mov ax, #0x4060
31523 85C5           B9                   1132    mov cx, #0x1132
31524 85C8           C3                           ret
31525                       000085C9            cirrus_extbios_A0h:
31526 85C9           E8         0331              call cirrus_get_modeentry
31527 85CC           B4                     01    mov ah, #0x01
31528 85CE           80DC                   00    sbb ah, #0x00
31529 85D1           8B1E       85DF              mov bx, cirrus_extbios_A0h_callback
31530 85D5           BE                   FFFF    mov si, #0xffff
31531 85D8           89DF                         mov di, bx
31532 85DA           8EDB                         mov ds, bx
31533 85DC           8EC3                         mov es, bx
31534 85DE           C3                           ret
31535                       000085DF            cirrus_extbios_A0h_callback:
31536                                             ;; fatal: not implemented yet
31537 85DF           FA                           cli
31538 85E0           F4                           hlt
31539 85E1           CB                           retf
31540                       000085E2            cirrus_extbios_A1h:
31541 85E2           BB                   0E00    mov bx, #0x0E00 ;; IBM 8512/8513, color
31542 85E5           C3                           ret
31543                       000085E6            cirrus_extbios_A2h:
31544 85E6           B0                     07    mov al, #0x07 ;; HSync 31.5 - 64.0 kHz
31545 85E8           C3                           ret
31546                       000085E9            cirrus_extbios_AEh:
31547 85E9           B0                     01    mov al, #0x01 ;; High Refresh 75Hz
31548 85EB           C3                           ret
31549                       000085EC            cirrus_extbios_unimplemented:
31550 85EC           C3                           ret
31551                       000085ED            cirrus_vesa_00h:
31552 85ED           1E                           push ds
31553 85EE           56                           push si
31554 85EF           89FD                         mov bp, di
31555 85F1           06                           push es
31556 85F2           1F                           pop ds
31557 85F3           FC                           cld
31558 85F4           8B05                         mov ax, [di]
31559 85F6           3D                   4256    cmp ax, #0x4256 ;; VB
31560 85F9           75           24              jnz cv00_1
31561 85FB           8B45         02              mov ax, [di+2]
31562 85FE           3D                   3245    cmp ax, #0x3245 ;; E2
31563 8601           75           1C              jnz cv00_1
31564                                             ;; VBE2
31565 8603           8D7E         14              lea di, 0x14[bp]
31566 8606           B8                   0100    mov ax, #0x0100 ;; soft ver.
31567 8609           AB                           stosw
31568 860A           B8                   83A3    mov ax, # cirrus_vesa_vendorname
31569 860D           AB                           stosw
31570 860E           8CC8                         mov ax, cs
31571 8610           AB                           stosw
31572 8611           B8                   83A3    mov ax, # cirrus_vesa_productname
31573 8614           AB                           stosw
31574 8615           8CC8                         mov ax, cs
31575 8617           AB                           stosw
31576 8618           B8                   83BC    mov ax, # cirrus_vesa_productrevision
31577 861B           AB                           stosw
31578 861C           8CC8                         mov ax, cs
31579 861E           AB                           stosw
31580                       0000861F            cv00_1:
31581 861F           89EF                         mov di, bp
31582 8621           B8                   4556    mov ax, #0x4556 ;; VE
31583 8624           AB                           stosw
31584 8625           B8                   4153    mov ax, #0x4153 ;; SA
31585 8628           AB                           stosw
31586 8629           B8                   0200    mov ax, #0x0200 ;; v2.00
31587 862C           AB                           stosw
31588 862D           B8                   83A3    mov ax, # cirrus_vesa_oemname
31589 8630           AB                           stosw
31590 8631           8CC8                         mov ax, cs
31591 8633           AB                           stosw
31592 8634           31C0                         xor ax, ax ;; caps
31593 8636           AB                           stosw
31594 8637           AB                           stosw
31595 8638           8D46         40              lea ax, 0x40[bp]
31596 863B           AB                           stosw
31597 863C           8CC0                         mov ax, es
31598 863E           AB                           stosw
31599 863F           E8         FF58              call cirrus_extbios_85h ;; vram in 64k
31600 8642           B4                     00    mov ah, #0x00
31601 8644           AB                           stosw
31602 8645           0E                           push cs
31603 8646           1F                           pop ds
31604 8647           8D7E         40              lea di, 0x40[bp]
31605 864A           BE                   8313    mov si, #_cirrus_vesa_modelist
31606                       0000864D            cv00_2:
31607 864D           AD                           lodsw
31608 864E           AB                           stosw
31609 864F           83C6                   02    add si, #2
31610 8652           3D                   FFFF    cmp ax, #0xffff
31611 8655           75           F6              jnz cv00_2
31612 8657           B8                   004F    mov ax, #0x004F
31613 865A           89EF                         mov di, bp
31614 865C           5E                           pop si
31615 865D           1F                           pop ds
31616 865E           C3                           ret
31617                       0000865F            cirrus_vesa_01h:
31618 865F           89C8                         mov ax, cx
31619 8661           25                   3FFF    and ax, #0x3fff
31620 8664           E8         0264              call cirrus_vesamode_to_mode
31621 8667           3D                   FFFF    cmp ax, #0xffff
31622 866A           75           03              jnz cirrus_vesa_01h_1
31623 866C           E9         0258              jmp cirrus_vesa_unimplemented
31624                       0000866F            cirrus_vesa_01h_1:
31625 866F           1E                           push ds
31626 8670           56                           push si
31627 8671           51                           push cx
31628 8672           52                           push dx
31629 8673           53                           push bx
31630 8674           89FD                         mov bp, di
31631 8676           FC                           cld
31632 8677           0E                           push cs
31633 8678           1F                           pop ds
31634 8679           E8         0283              call cirrus_get_modeentry_nomask
31635 867C           57                           push di
31636 867D           31C0                         xor ax, ax
31637 867F           B9                   0080    mov cx, #0x80
31638 8682           F3                           rep
31639 8683           AB                             stosw ;; clear buffer
31640 8684           5F                           pop di
31641 8685           B8                   003B    mov ax, #0x003b ;; mode
31642 8688           AB                           stosw
31643 8689           B8                   0007    mov ax, #0x0007 ;; attr
31644 868C           AB                           stosw
31645 868D           B8                   0010    mov ax, #0x0010 ;; granularity =16K
31646 8690           AB                           stosw
31647 8691           B8                   0040    mov ax, #0x0040 ;; size =64K
31648 8694           AB                           stosw
31649 8695           B8                   A000    mov ax, #0xA000 ;; segment A
31650 8698           AB                           stosw
31651 8699           31C0                         xor ax, ax ;; no segment B
31652 869B           AB                           stosw
31653 869C           B8                   87A6    mov ax, #cirrus_vesa_05h_farentry
31654 869F           AB                           stosw
31655 86A0           8CC8                         mov ax, cs
31656 86A2           AB                           stosw
31657 86A3           E8         02CD              call cirrus_get_line_offset_entry
31658 86A6           AB                           stosw ;; bytes per scan line
31659 86A7           8B44         02              mov ax, [si+2] ;; width
31660 86AA           AB                           stosw
31661 86AB           8B44         04              mov ax, [si+4] ;; height
31662 86AE           AB                           stosw
31663 86AF           B8                   0008    mov ax, #0x08
31664 86B2           AA                           stosb
31665 86B3           B8                   0010    mov ax, #0x10
31666 86B6           AA                           stosb
31667 86B7           B0                     01    mov al, #1 ;; count of planes
31668 86B9           AA                           stosb
31669 86BA           8A44         06              mov al, [si+6] ;; bpp
31670 86BD           AA                           stosb
31671 86BE           B0                     01    mov al, #0x1 ;; XXX number of banks
31672 86C0           AA                           stosb
31673 86C1           8A44         11              mov al, [si+17]
31674 86C4           AA                           stosb ;; memory model
31675 86C5           B0                     00    mov al, #0x0 ;; XXX size of bank in K
31676 86C7           AA                           stosb
31677 86C8           E8         02A8              call cirrus_get_line_offset_entry
31678 86CB           8B5C         04              mov bx, [si+4]
31679 86CE           F7E3                         mul bx ;; dx:ax=vramdisp
31680 86D0           09C0                         or ax, ax
31681 86D2           74           01              jz cirrus_vesa_01h_3
31682 86D4           42                           inc dx
31683                       000086D5            cirrus_vesa_01h_3:
31684 86D5           E8         FEC2              call cirrus_extbios_85h ;; al=vram in 64k
31685 86D8           B4                     00    mov ah, #0x00
31686 86DA           89D1                         mov cx, dx
31687 86DC           31D2                         xor dx, dx
31688 86DE           F7F1                         div cx
31689 86E0           48                           dec ax
31690 86E1           AA                           stosb ;; number of image pages = vramtotal/vramdisp-1
31691 86E2           B0                     00    mov al, #0x00
31692 86E4           AA                           stosb
31693                                             ;; v1.2+ stuffs
31694 86E5           56                           push si
31695 86E6           83C6                   12    add si, #18
31696 86E9           A5                           movsw
31697 86EA           A5                           movsw
31698 86EB           A5                           movsw
31699 86EC           A5                           movsw
31700 86ED           5E                           pop si
31701 86EE           8A64         10              mov ah, [si+16]
31702 86F1           B0                     00    mov al, #0x0
31703 86F3           80EC                   09    sub ah, #9
31704 86F6           D0D0                         rcl al, #1 ; bit 0=palette flag
31705 86F8           AA                           stosb ;; direct screen mode info
31706                                             ;; v2.0+ stuffs
31707                                             ;; 32-bit LFB address
31708 86F9           31C0                         xor ax, ax
31709 86FB           AB                           stosw
31710 86FC           B8                   1013    mov ax, #0x1013 ;; vendor Cirrus
31711 86FF           E8         F5BF              call _pci_get_lfb_addr
31712 8702           AB                           stosw
31713 8703           09C0                         or ax, ax
31714 8705           74           0B              jz cirrus_vesa_01h_4
31715 8707           57                           push di
31716 8708           89EF                         mov di, bp
31717 870A                        26             db 0x26 ;; es:
31718 870B           8B05                         mov ax, [di]
31719 870D           0D                   0080    or ax, #0x0080 ;; mode bit 7:LFB
31720 8710           AB                           stosw
31721 8711           5F                           pop di
31722                       00008712            cirrus_vesa_01h_4:
31723 8712           31C0                         xor ax, ax
31724 8714           AB                           stosw ; reserved
31725 8715           AB                           stosw ; reserved
31726 8716           AB                           stosw ; reserved
31727 8717           B8                   004F    mov ax, #0x004F
31728 871A           89EF                         mov di, bp
31729 871C           5B                           pop bx
31730 871D           5A                           pop dx
31731 871E           59                           pop cx
31732 871F           5E                           pop si
31733 8720           1F                           pop ds
31734 8721           F7C1                 4000    test cx, #0x4000 ;; LFB flag
31735 8725           74           0E              jz cirrus_vesa_01h_5
31736 8727           51                           push cx
31737 8728                        26             db 0x26 ;; es:
31738 8729           8B0D                         mov cx, [di]
31739 872B           81F9                 0080    cmp cx, #0x0080 ;; is LFB supported?
31740 872F           75           03              jnz cirrus_vesa_01h_6
31741 8731           B8                   014F    mov ax, #0x014F ;; error - no LFB
31742                       00008734            cirrus_vesa_01h_6:
31743 8734           59                           pop cx
31744                       00008735            cirrus_vesa_01h_5:
31745 8735           C3                           ret
31746                       00008736            cirrus_vesa_02h:
31747                                             ;; XXX support CRTC registers
31748 8736           F7C3                 3E00    test bx, #0x3e00
31749 873A           75           12              jnz cirrus_vesa_02h_2 ;; unknown flags
31750 873C           89D8                         mov ax, bx
31751 873E           25                   01FF    and ax, #0x1ff ;; bit 8-0 mode
31752 8741           3D                   0100    cmp ax, #0x100 ;; legacy VGA mode
31753 8744           72           0B              jb cirrus_vesa_02h_legacy
31754 8746           E8         0182              call cirrus_vesamode_to_mode
31755 8749           3D                   FFFF    cmp ax, #0xffff
31756 874C           75           09              jnz cirrus_vesa_02h_1
31757                       0000874E            cirrus_vesa_02h_2:
31758 874E           E9         0176              jmp cirrus_vesa_unimplemented
31759                       00008751            cirrus_vesa_02h_legacy:
31760 8751           CD                     10    int #0x10
31761 8753           B8                   004F    mov ax, #0x004F
31762 8756           C3                           ret
31763                       00008757            cirrus_vesa_02h_1:
31764 8757           56                           push si
31765 8758           50                           push ax
31766 8759           E8         01A3              call cirrus_get_modeentry_nomask
31767 875C           E8         FD8A              call cirrus_switch_mode
31768 875F           F7C3                 4000    test bx, #0x4000 ;; LFB
31769 8763           75           03              jnz cirrus_vesa_02h_3
31770 8765           E8         FDD9              call cirrus_enable_16k_granularity
31771                       00008768            cirrus_vesa_02h_3:
31772 8768           F7C3                 8000    test bx, #0x8000 ;; no clear
31773 876C           75           07              jnz cirrus_vesa_02h_4
31774 876E           50                           push ax
31775 876F           31C0                         xor ax,ax
31776 8771           E8         02A1              call cirrus_clear_vram
31777 8774           58                           pop ax
31778                       00008775            cirrus_vesa_02h_4:
31779 8775           58                           pop ax
31780 8776           1E                           push ds
31781 8777           31F6                         xor si, si
31782 8779           8EDE                         mov ds, si
31783 877B           A2         0449              mov [0x449], al
31784 877E           891E       04BA              mov [0x4BA], bx
31785 8782           1F                           pop ds
31786 8783           5E                           pop si
31787 8784           B8                   004F    mov ax, #0x004F
31788 8787           C3                           ret
31789                       00008788            cirrus_vesa_03h:
31790 8788           1E                           push ds
31791 8789           31C0                         xor ax, ax
31792 878B           8ED8                         mov ds, ax
31793 878D           BB                   04BA    mov bx, # 0x4BA
31794 8790           8B07                         mov ax, [bx]
31795 8792           89C3                         mov bx, ax
31796 8794           85DB                         test bx, bx
31797 8796           75           09              jnz cirrus_vesa_03h_1
31798 8798           BB                   0449    mov bx, # 0x449
31799 879B           8A07                         mov al, [bx]
31800 879D           88C3                         mov bl, al
31801 879F           30FF                         xor bh, bh
31802                       000087A1            cirrus_vesa_03h_1:
31803 87A1           B8                   004F    mov ax, #0x004f
31804 87A4           1F                           pop ds
31805 87A5           C3                           ret
31806                       000087A6            cirrus_vesa_05h_farentry:
31807 87A6           E8         0001              call cirrus_vesa_05h
31808 87A9           CB                           retf
31809                       000087AA            cirrus_vesa_05h:
31810 87AA           80FB                   01    cmp bl, #0x01
31811 87AD           77           0A              ja cirrus_vesa_05h_1
31812 87AF           80FF                   00    cmp bh, #0x00
31813 87B2           74           08              jz cirrus_vesa_05h_setmempage
31814 87B4           80FF                   01    cmp bh, #0x01
31815 87B7           74           17              jz cirrus_vesa_05h_getmempage
31816                       000087B9            cirrus_vesa_05h_1:
31817 87B9           E9         010B              jmp cirrus_vesa_unimplemented
31818                       000087BC            cirrus_vesa_05h_setmempage:
31819 87BC           08F6                         or dh, dh ; address must be < 0x100
31820 87BE           75           F9              jnz cirrus_vesa_05h_1
31821 87C0           52                           push dx
31822 87C1           88D8                         mov al, bl ;; bl=bank number
31823 87C3           04                     09    add al, #0x09
31824 87C5           88D4                         mov ah, dl ;; dx=window address in granularity
31825 87C7           BA                   03CE    mov dx, #0x3ce
31826 87CA           EF                           out dx, ax
31827 87CB           5A                           pop dx
31828 87CC           B8                   004F    mov ax, #0x004F
31829 87CF           C3                           ret
31830                       000087D0            cirrus_vesa_05h_getmempage:
31831 87D0           88D8                         mov al, bl ;; bl=bank number
31832 87D2           04                     09    add al, #0x09
31833 87D4           BA                   03CE    mov dx, #0x3ce
31834 87D7           EE                           out dx, al
31835 87D8           42                           inc dx
31836 87D9           EC                           in al, dx
31837 87DA           31D2                         xor dx, dx
31838 87DC           88C2                         mov dl, al ;; dx=window address in granularity
31839 87DE           B8                   004F    mov ax, #0x004F
31840 87E1           C3                           ret
31841                       000087E2            cirrus_vesa_06h:
31842 87E2           89C8                         mov ax, cx
31843 87E4           80FB                   01    cmp bl, #0x01
31844 87E7           74           19              je cirrus_vesa_06h_3
31845 87E9           80FB                   02    cmp bl, #0x02
31846 87EC           74           11              je cirrus_vesa_06h_2
31847 87EE           72           04              jb cirrus_vesa_06h_1
31848 87F0           B8                   0100    mov ax, #0x0100
31849 87F3           C3                           ret
31850                       000087F4            cirrus_vesa_06h_1:
31851 87F4           E8         0123              call cirrus_get_bpp_bytes
31852 87F7           88C3                         mov bl, al
31853 87F9           30FF                         xor bh, bh
31854 87FB           89C8                         mov ax, cx
31855 87FD           F7E3                         mul bx
31856                       000087FF            cirrus_vesa_06h_2:
31857 87FF           E8         0133              call cirrus_set_line_offset
31858                       00008802            cirrus_vesa_06h_3:
31859 8802           E8         0115              call cirrus_get_bpp_bytes
31860 8805           88C3                         mov bl, al
31861 8807           30FF                         xor bh, bh
31862 8809           31D2                         xor dx, dx
31863 880B           E8         0143              call cirrus_get_line_offset
31864 880E           50                           push ax
31865 880F           F7F3                         div bx
31866 8811           89C1                         mov cx, ax
31867 8813           5B                           pop bx
31868 8814           E8         FD83              call cirrus_extbios_85h ;; al=vram in 64k
31869 8817           31D2                         xor dx, dx
31870 8819           88C2                         mov dl, al
31871 881B           31C0                         xor ax, ax
31872 881D           F7F3                         div bx
31873 881F           89C2                         mov dx, ax
31874 8821           B8                   004F    mov ax, #0x004f
31875 8824           C3                           ret
31876                       00008825            cirrus_vesa_07h:
31877 8825           80FB                   80    cmp bl, #0x80
31878 8828           74           0B              je cirrus_vesa_07h_1
31879 882A           80FB                   01    cmp bl, #0x01
31880 882D           74           33              je cirrus_vesa_07h_2
31881 882F           72           04              jb cirrus_vesa_07h_1
31882 8831           B8                   0100    mov ax, #0x0100
31883 8834           C3                           ret
31884                       00008835            cirrus_vesa_07h_1:
31885 8835           52                           push dx
31886 8836           E8         00E1              call cirrus_get_bpp_bytes
31887 8839           88C3                         mov bl, al
31888 883B           30FF                         xor bh, bh
31889 883D           89C8                         mov ax, cx
31890 883F           F7E3                         mul bx
31891 8841           5B                           pop bx
31892 8842           50                           push ax
31893 8843           E8         010B              call cirrus_get_line_offset
31894 8846           F7E3                         mul bx
31895 8848           5B                           pop bx
31896 8849           01D8                         add ax, bx
31897 884B           73           01              jnc cirrus_vesa_07h_3
31898 884D           42                           inc dx
31899                       0000884E            cirrus_vesa_07h_3:
31900 884E           52                           push dx
31901 884F           83E2                   03    and dx, #0x0003
31902 8852           BB                   0004    mov bx, #0x04
31903 8855           F7F3                         div bx
31904 8857           5A                           pop dx
31905 8858           C1EA                   02    shr dx, #2
31906 885B           E8         013F              call cirrus_set_start_addr
31907 885E           B8                   004F    mov ax, #0x004f
31908 8861           C3                           ret
31909                       00008862            cirrus_vesa_07h_2:
31910 8862           E8         0179              call cirrus_get_start_addr
31911 8865           C1E2                   02    shl dx, #2
31912 8868           52                           push dx
31913 8869           BB                   0004    mov bx, #0x04
31914 886C           F7E3                         mul bx
31915 886E           5B                           pop bx
31916 886F           09DA                         or dx, bx
31917 8871           50                           push ax
31918 8872           E8         00DC              call cirrus_get_line_offset
31919 8875           89C3                         mov bx, ax
31920 8877           58                           pop ax
31921 8878           F7F3                         div bx
31922 887A           50                           push ax
31923 887B           52                           push dx
31924 887C           E8         009B              call cirrus_get_bpp_bytes
31925 887F           88C3                         mov bl, al
31926 8881           30FF                         xor bh, bh
31927 8883           58                           pop ax
31928 8884           31D2                         xor dx, dx
31929 8886           F7F3                         div bx
31930 8888           89C1                         mov cx, ax
31931 888A           5A                           pop dx
31932 888B           B8                   004F    mov ax, #0x004f
31933 888E           C3                           ret
31934                       0000888F            cirrus_vesa_10h:
31935 888F           80FB                   00    cmp bl, #0x00
31936 8892           75           07              jne cirrus_vesa_10h_01
31937 8894           BB                   0F30    mov bx, #0x0f30
31938 8897           B8                   004F    mov ax, #0x004f
31939 889A           C3                           ret
31940                       0000889B            cirrus_vesa_10h_01:
31941 889B           80FB                   01    cmp bl, #0x01
31942 889E           75           11              jne cirrus_vesa_10h_02
31943 88A0           52                           push dx
31944 88A1           1E                           push ds
31945 88A2           BA                   0040    mov dx, #0x40
31946 88A5           8EDA                         mov ds, dx
31947 88A7           883E       00B9              mov [0xb9], bh
31948 88AB           1F                           pop ds
31949 88AC           5A                           pop dx
31950 88AD           B8                   004F    mov ax, #0x004f
31951 88B0           C3                           ret
31952                       000088B1            cirrus_vesa_10h_02:
31953 88B1           80FB                   02    cmp bl, #0x02
31954 88B4           75           11              jne cirrus_vesa_unimplemented
31955 88B6           52                           push dx
31956 88B7           1E                           push ds
31957 88B8           BA                   0040    mov dx, #0x40
31958 88BB           8EDA                         mov ds, dx
31959 88BD           8A3E       00B9              mov bh, [0xb9]
31960 88C1           1F                           pop ds
31961 88C2           5A                           pop dx
31962 88C3           B8                   004F    mov ax, #0x004f
31963 88C6           C3                           ret
31964                       000088C7            cirrus_vesa_unimplemented:
31965 88C7           B8                   014F    mov ax, #0x014F ;; not implemented
31966 88CA           C3                           ret
31967                                           ;; in ax:vesamode, out ax:cirrusmode
31968                       000088CB            cirrus_vesamode_to_mode:
31969 88CB           1E                           push ds
31970 88CC           51                           push cx
31971 88CD           56                           push si
31972 88CE           0E                           push cs
31973 88CF           1F                           pop ds
31974 88D0           B9                   FFFF    mov cx, #0xffff
31975 88D3           BE                   8313    mov si, #_cirrus_vesa_modelist
31976                       000088D6            cvtm_1:
31977 88D6           3904                         cmp [si],ax
31978 88D8           74           09              jz cvtm_2
31979 88DA           390C                         cmp [si],cx
31980 88DC           74           05              jz cvtm_2
31981 88DE           83C6                   04    add si, #4
31982 88E1           EB           F3              jmp cvtm_1
31983                       000088E3            cvtm_2:
31984 88E3           8B44         02              mov ax,[si+2]
31985 88E6           5E                           pop si
31986 88E7           59                           pop cx
31987 88E8           1F                           pop ds
31988 88E9           C3                           ret
31989                                             ; cirrus_get_crtc
31990                                             ;; NOTE - may be called in protected mode
31991                       000088EA            cirrus_get_crtc:
31992 88EA           1E                           push ds
31993 88EB           50                           push ax
31994 88EC           BA                   03CC    mov dx, #0x3cc
31995 88EF           EC                           in al, dx
31996 88F0           24                     01    and al, #0x01
31997 88F2           C0E0                   05    shl al, #5
31998 88F5           BA                   03B4    mov dx, #0x3b4
31999 88F8           00C2                         add dl, al
32000 88FA           58                           pop ax
32001 88FB           1F                           pop ds
32002 88FC           C3                           ret
32003                                           ;; in - al:mode, out - cflag:result, si:table, ax:destroyed
32004                       000088FD            cirrus_get_modeentry:
32005 88FD           24                     7F    and al, #0x7f
32006                       000088FF            cirrus_get_modeentry_nomask:
32007 88FF           BE                   8139    mov si, #_cirrus_modes
32008                       00008902            cgm_1:
32009 8902                        2E             db 0x2e ;; cs:
32010 8903           8A24                         mov ah, [si]
32011 8905           38E0                         cmp al, ah
32012 8907           74           0F              jz cgm_2
32013 8909           80FC                   FF    cmp ah, #0xff
32014 890C           74           05              jz cgm_4
32015 890E           83C6                   1A    add si, # 26
32016 8911           EB           EF              jmp cgm_1
32017                       00008913            cgm_4:
32018 8913           31F6                         xor si, si
32019 8915           F9                           stc ;; video mode is not supported
32020 8916           EB           01              jmp cgm_3
32021                       00008918            cgm_2:
32022 8918           F8                           clc ;; video mode is supported
32023                       00008919            cgm_3:
32024 8919           C3                           ret
32025                                           ;; out - al:bytes per pixel
32026                       0000891A            cirrus_get_bpp_bytes:
32027 891A           52                           push dx
32028 891B           BA                   03C4    mov dx, #0x03c4
32029 891E           B0                     07    mov al, #0x07
32030 8920           EE                           out dx, al
32031 8921           42                           inc dx
32032 8922           EC                           in al, dx
32033 8923           24                     0E    and al, #0x0e
32034 8925           3C                     06    cmp al, #0x06
32035 8927           75           02              jne cirrus_get_bpp_bytes_1
32036 8929           24                     02    and al, #0x02
32037                       0000892B            cirrus_get_bpp_bytes_1:
32038 892B           D0E8                         shr al, #1
32039 892D           3C                     04    cmp al, #0x04
32040 892F           74           02              je cirrus_get_bpp_bytes_2
32041 8931           FEC0                         inc al
32042                       00008933            cirrus_get_bpp_bytes_2:
32043 8933           5A                           pop dx
32044 8934           C3                           ret
32045                                           ;; in - ax: new line offset
32046                       00008935            cirrus_set_line_offset:
32047 8935           C1E8                   03    shr ax, #3
32048 8938           50                           push ax
32049 8939           E8         FFAE              call cirrus_get_crtc
32050 893C           B0                     13    mov al, #0x13
32051 893E           EE                           out dx, al
32052 893F           42                           inc dx
32053 8940           58                           pop ax
32054 8941           EE                           out dx, al
32055 8942           4A                           dec dx
32056 8943           B0                     1B    mov al, #0x1b
32057 8945           EE                           out dx, al
32058 8946           42                           inc dx
32059 8947           C0E4                   04    shl ah, #4
32060 894A           EC                           in al, dx
32061 894B           24                     00>   and al, #ef
32062 894D           08E0                         or al, ah
32063 894F           EE                           out dx, al
32064 8950           C3                           ret
32065                                           ;; out - ax: active line offset
32066                       00008951            cirrus_get_line_offset:
32067 8951           52                           push dx
32068 8952           53                           push bx
32069 8953           E8         FF94              call cirrus_get_crtc
32070 8956           B0                     13    mov al, #0x13
32071 8958           EE                           out dx, al
32072 8959           42                           inc dx
32073 895A           EC                           in al, dx
32074 895B           88C3                         mov bl, al
32075 895D           4A                           dec dx
32076 895E           B0                     1B    mov al, #0x1b
32077 8960           EE                           out dx, al
32078 8961           42                           inc dx
32079 8962           EC                           in al, dx
32080 8963           88C4                         mov ah, al
32081 8965           C0EC                   04    shr ah, #4
32082 8968           80E4                   01    and ah, #0x01
32083 896B           88D8                         mov al, bl
32084 896D           C1E0                   03    shl ax, #3
32085 8970           5B                           pop bx
32086 8971           5A                           pop dx
32087 8972           C3                           ret
32088                                           ;; in - si: table
32089                                           ;; out - ax: line offset for mode
32090                       00008973            cirrus_get_line_offset_entry:
32091 8973           53                           push bx
32092 8974           8B5C         0E              mov bx, [si+14] ;; crtc table
32093 8977           53                           push bx
32094                       00008978            offset_loop1:
32095 8978           8B07                         mov ax, [bx]
32096 897A           3C                     13    cmp al, #0x13
32097 897C           74           04              je offset_found1
32098 897E           43                           inc bx
32099 897F           43                           inc bx
32100 8980           75           F6              jnz offset_loop1
32101                       00008982            offset_found1:
32102 8982           30C0                         xor al, al
32103 8984           C1E8                   05    shr ax, #5
32104 8987           5B                           pop bx
32105 8988           50                           push ax
32106                       00008989            offset_loop2:
32107 8989           8B07                         mov ax, [bx]
32108 898B           3C                     1B    cmp al, #0x1b
32109 898D           74           04              je offset_found2
32110 898F           43                           inc bx
32111 8990           43                           inc bx
32112 8991           75           F6              jnz offset_loop2
32113                       00008993            offset_found2:
32114 8993           5B                           pop bx
32115 8994           25                   1000    and ax, #0x1000
32116 8997           D1E8                         shr ax, #1
32117 8999           09D8                         or ax, bx
32118 899B           5B                           pop bx
32119 899C           C3                           ret
32120                                           ;; in - new address in DX:AX
32121                       0000899D            cirrus_set_start_addr:
32122 899D           53                           push bx
32123 899E           52                           push dx
32124 899F           50                           push ax
32125 89A0           E8         FF47              call cirrus_get_crtc
32126 89A3           B0                     0D    mov al, #0x0d
32127 89A5           EE                           out dx, al
32128 89A6           42                           inc dx
32129 89A7           58                           pop ax
32130 89A8           EE                           out dx, al
32131 89A9           4A                           dec dx
32132 89AA           B0                     0C    mov al, #0x0c
32133 89AC           EE                           out dx, al
32134 89AD           42                           inc dx
32135 89AE           88E0                         mov al, ah
32136 89B0           EE                           out dx, al
32137 89B1           4A                           dec dx
32138 89B2           B0                     1D    mov al, #0x1d
32139 89B4           EE                           out dx, al
32140 89B5           42                           inc dx
32141 89B6           EC                           in al, dx
32142 89B7           24                     7F    and al, #0x7f
32143 89B9           5B                           pop bx
32144 89BA           88DC                         mov ah, bl
32145 89BC           C0E3                   04    shl bl, #4
32146 89BF           80E3                   80    and bl, #0x80
32147 89C2           08D8                         or al, bl
32148 89C4           EE                           out dx, al
32149 89C5           4A                           dec dx
32150 89C6           88E3                         mov bl, ah
32151 89C8           80E4                   01    and ah, #0x01
32152 89CB           D0E3                         shl bl, #1
32153 89CD           80E3                   0C    and bl, #0x0c
32154 89D0           08DC                         or ah, bl
32155 89D2           B0                     1B    mov al, #0x1b
32156 89D4           EE                           out dx, al
32157 89D5           42                           inc dx
32158 89D6           EC                           in al, dx
32159 89D7           24                     F2    and al, #0xf2
32160 89D9           08E0                         or al, ah
32161 89DB           EE                           out dx, al
32162 89DC           5B                           pop bx
32163 89DD           C3                           ret
32164                                           ;; out - current address in DX:AX
32165                       000089DE            cirrus_get_start_addr:
32166 89DE           53                           push bx
32167 89DF           E8         FF08              call cirrus_get_crtc
32168 89E2           B0                     0C    mov al, #0x0c
32169 89E4           EE                           out dx, al
32170 89E5           42                           inc dx
32171 89E6           EC                           in al, dx
32172 89E7           88C4                         mov ah, al
32173 89E9           4A                           dec dx
32174 89EA           B0                     0D    mov al, #0x0d
32175 89EC           EE                           out dx, al
32176 89ED           42                           inc dx
32177 89EE           EC                           in al, dx
32178 89EF           50                           push ax
32179 89F0           4A                           dec dx
32180 89F1           B0                     1B    mov al, #0x1b
32181 89F3           EE                           out dx, al
32182 89F4           42                           inc dx
32183 89F5           EC                           in al, dx
32184 89F6           4A                           dec dx
32185 89F7           88C3                         mov bl, al
32186 89F9           24                     01    and al, #0x01
32187 89FB           80E3                   0C    and bl, #0x0c
32188 89FE           D0EB                         shr bl, #1
32189 8A00           08C3                         or bl, al
32190 8A02           B0                     1D    mov al, #0x1d
32191 8A04           EE                           out dx, al
32192 8A05           42                           inc dx
32193 8A06           EC                           in al, dx
32194 8A07           24                     80    and al, #0x80
32195 8A09           C0E8                   04    shr al, #4
32196 8A0C           08C3                         or bl, al
32197 8A0E           88DA                         mov dl, bl
32198 8A10           30F6                         xor dh, dh
32199 8A12           58                           pop ax
32200 8A13           5B                           pop bx
32201 8A14           C3                           ret
32202                       00008A15            cirrus_clear_vram:
32203 8A15           60                           pusha
32204 8A16           06                           push es
32205 8A17           89C6                         mov si, ax
32206 8A19           E8         FB25              call cirrus_enable_16k_granularity
32207 8A1C           E8         FB7B              call cirrus_extbios_85h
32208 8A1F           C0E0                   02    shl al, #2
32209 8A22           88C3                         mov bl, al
32210 8A24           30E4                         xor ah,ah
32211                       00008A26            cirrus_clear_vram_1:
32212 8A26           B0                     09    mov al, #0x09
32213 8A28           BA                   03CE    mov dx, #0x3ce
32214 8A2B           EF                           out dx, ax
32215 8A2C           50                           push ax
32216 8A2D           B9                   A000    mov cx, #0xa000
32217 8A30           8EC1                         mov es, cx
32218 8A32           31FF                         xor di, di
32219 8A34           89F0                         mov ax, si
32220 8A36           B9                   2000    mov cx, #8192
32221 8A39           FC                           cld
32222 8A3A           F3                           rep
32223 8A3B           AB                               stosw
32224 8A3C           58                           pop ax
32225 8A3D           FEC4                         inc ah
32226 8A3F           38DC                         cmp ah, bl
32227 8A41           75           E3              jne cirrus_clear_vram_1
32228 8A43           30E4                         xor ah,ah
32229 8A45           BA                   03CE    mov dx, #0x3ce
32230 8A48           EF                           out dx, ax
32231 8A49           07                           pop es
32232 8A4A           61                           popa
32233 8A4B           C3                           ret
32234                       00008A4C            cirrus_extbios_handlers:
32235                                             ;; 80h
32236 8A4C                      855F              dw cirrus_extbios_80h
32237 8A4E                      8585              dw cirrus_extbios_81h
32238 8A50                      8589              dw cirrus_extbios_82h
32239 8A52                      85EC              dw cirrus_extbios_unimplemented
32240                                             ;; 84h
32241 8A54                      85EC              dw cirrus_extbios_unimplemented
32242 8A56                      859A              dw cirrus_extbios_85h
32243 8A58                      85EC              dw cirrus_extbios_unimplemented
32244 8A5A                      85EC              dw cirrus_extbios_unimplemented
32245                                             ;; 88h
32246 8A5C                      85EC              dw cirrus_extbios_unimplemented
32247 8A5E                      85EC              dw cirrus_extbios_unimplemented
32248 8A60                      85EC              dw cirrus_extbios_unimplemented
32249 8A62                      85EC              dw cirrus_extbios_unimplemented
32250                                             ;; 8Ch
32251 8A64                      85EC              dw cirrus_extbios_unimplemented
32252 8A66                      85EC              dw cirrus_extbios_unimplemented
32253 8A68                      85EC              dw cirrus_extbios_unimplemented
32254 8A6A                      85EC              dw cirrus_extbios_unimplemented
32255                                             ;; 90h
32256 8A6C                      85EC              dw cirrus_extbios_unimplemented
32257 8A6E                      85EC              dw cirrus_extbios_unimplemented
32258 8A70                      85EC              dw cirrus_extbios_unimplemented
32259 8A72                      85EC              dw cirrus_extbios_unimplemented
32260                                             ;; 94h
32261 8A74                      85EC              dw cirrus_extbios_unimplemented
32262 8A76                      85EC              dw cirrus_extbios_unimplemented
32263 8A78                      85EC              dw cirrus_extbios_unimplemented
32264 8A7A                      85EC              dw cirrus_extbios_unimplemented
32265                                             ;; 98h
32266 8A7C                      85EC              dw cirrus_extbios_unimplemented
32267 8A7E                      85EC              dw cirrus_extbios_unimplemented
32268 8A80                      85C2              dw cirrus_extbios_9Ah
32269 8A82                      85EC              dw cirrus_extbios_unimplemented
32270                                             ;; 9Ch
32271 8A84                      85EC              dw cirrus_extbios_unimplemented
32272 8A86                      85EC              dw cirrus_extbios_unimplemented
32273 8A88                      85EC              dw cirrus_extbios_unimplemented
32274 8A8A                      85EC              dw cirrus_extbios_unimplemented
32275                                             ;; A0h
32276 8A8C                      85C9              dw cirrus_extbios_A0h
32277 8A8E                      85E2              dw cirrus_extbios_A1h
32278 8A90                      85E6              dw cirrus_extbios_A2h
32279 8A92                      85EC              dw cirrus_extbios_unimplemented
32280                                             ;; A4h
32281 8A94                      85EC              dw cirrus_extbios_unimplemented
32282 8A96                      85EC              dw cirrus_extbios_unimplemented
32283 8A98                      85EC              dw cirrus_extbios_unimplemented
32284 8A9A                      85EC              dw cirrus_extbios_unimplemented
32285                                             ;; A8h
32286 8A9C                      85EC              dw cirrus_extbios_unimplemented
32287 8A9E                      85EC              dw cirrus_extbios_unimplemented
32288 8AA0                      85EC              dw cirrus_extbios_unimplemented
32289 8AA2                      85EC              dw cirrus_extbios_unimplemented
32290                                             ;; ACh
32291 8AA4                      85EC              dw cirrus_extbios_unimplemented
32292 8AA6                      85EC              dw cirrus_extbios_unimplemented
32293 8AA8                      85E9              dw cirrus_extbios_AEh
32294 8AAA                      85EC              dw cirrus_extbios_unimplemented
32295                       00008AAC            cirrus_vesa_handlers:
32296                                             ;; 00h
32297 8AAC                      85ED              dw cirrus_vesa_00h
32298 8AAE                      865F              dw cirrus_vesa_01h
32299 8AB0                      8736              dw cirrus_vesa_02h
32300 8AB2                      8788              dw cirrus_vesa_03h
32301                                             ;; 04h
32302 8AB4                      88C7              dw cirrus_vesa_unimplemented
32303 8AB6                      87AA              dw cirrus_vesa_05h
32304 8AB8                      87E2              dw cirrus_vesa_06h
32305 8ABA                      8825              dw cirrus_vesa_07h
32306                                             ;; 08h
32307 8ABC                      88C7              dw cirrus_vesa_unimplemented
32308 8ABE                      88C7              dw cirrus_vesa_unimplemented
32309 8AC0                      88C7              dw cirrus_vesa_unimplemented
32310 8AC2                      88C7              dw cirrus_vesa_unimplemented
32311                                             ;; 0Ch
32312 8AC4                      88C7              dw cirrus_vesa_unimplemented
32313 8AC6                      88C7              dw cirrus_vesa_unimplemented
32314 8AC8                      88C7              dw cirrus_vesa_unimplemented
32315 8ACA                      88C7              dw cirrus_vesa_unimplemented
32316                                             ;; 10h
32317 8ACC                      888F              dw cirrus_vesa_10h
32318                                           ! 5651 endasm
32319                                           !BCC_ENDASM
32320                                           ! 5652 static void cirrus_debugmsg(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
32321                                           ! 5653   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
32322                                           
32323                       00008ACE            _cirrus_debugmsg:
32324                                           !BCC_EOS
32325                                           ! 5654 {
32326                                           ! 5655  if((( AX >> 8 )!=0x0E)&&(( AX >> 8 )!=0x02)&&(( AX >> 8 )!=0x09)&&(AX!=0x4F05))
32327 8ACE           55                         push	bp
32328 8ACF           89E5                       mov	bp,sp
32329                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
32330 8AD1           8B46         12            mov	ax,$12[bp]
32331 8AD4           88E0                       mov	al,ah
32332 8AD6           30E4                       xor	ah,ah
32333                                           ! Debug: ne int = const $E to unsigned int = ax+0 (used reg = )
32334 8AD8           3D                   000E  cmp	ax,*$E
32335 8ADB           74           40            je  	.2A6
32336                       00008ADD            .2AA:
32337                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
32338 8ADD           8B46         12            mov	ax,$12[bp]
32339 8AE0           88E0                       mov	al,ah
32340 8AE2           30E4                       xor	ah,ah
32341                                           ! Debug: ne int = const 2 to unsigned int = ax+0 (used reg = )
32342 8AE4           3D                   0002  cmp	ax,*2
32343 8AE7           74           34            je  	.2A6
32344                       00008AE9            .2A9:
32345                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
32346 8AE9           8B46         12            mov	ax,$12[bp]
32347 8AEC           88E0                       mov	al,ah
32348 8AEE           30E4                       xor	ah,ah
32349                                           ! Debug: ne int = const 9 to unsigned int = ax+0 (used reg = )
32350 8AF0           3D                   0009  cmp	ax,*9
32351 8AF3           74           28            je  	.2A6
32352                       00008AF5            .2A8:
32353                                           ! Debug: ne int = const $4F05 to unsigned short AX = [S+2+$10] (used reg = )
32354 8AF5           8B46         12            mov	ax,$12[bp]
32355 8AF8           3D                   4F05  cmp	ax,#$4F05
32356 8AFB           74           20            je  	.2A6
32357                       00008AFD            .2A7:
32358                                           ! 5656   printf("vgabios call ah%02x al%02x bx%04x cx%04x dx%04x\n",( AX >> 8 ),( AX & 0x00ff ),BX,CX,DX);
32359                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
32360 8AFD           FF76         0E            push	$E[bp]
32361                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
32362 8B00           FF76         10            push	$10[bp]
32363                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
32364 8B03           FF76         0C            push	$C[bp]
32365                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
32366 8B06           8A46         12            mov	al,$12[bp]
32367                                           ! Debug: list unsigned char = al+0 (used reg = )
32368 8B09           30E4                       xor	ah,ah
32369 8B0B           50                         push	ax
32370                                           ! Debug: sr int = const 8 to unsigned short AX = [S+$A+$10] (used reg = )
32371 8B0C           8B46         12            mov	ax,$12[bp]
32372 8B0F           88E0                       mov	al,ah
32373 8B11           30E4                       xor	ah,ah
32374                                           ! Debug: list unsigned int = ax+0 (used reg = )
32375 8B13           50                         push	ax
32376                                           ! Debug: list * char = .2AB+0 (used reg = )
32377 8B14           BB                   8B32  mov	bx,#.2AB
32378 8B17           53                         push	bx
32379                                           ! Debug: func () void = printf+0 (used reg = )
32380 8B18           E8         F069            call	_printf
32381 8B1B           89EC                       mov	sp,bp
32382                                           !BCC_EOS
32383                                           ! 5657 }
32384                       00008B1D            .2A6:
32385 8B1D           5D                         pop	bp
32386 8B1E           C3                         ret
32387                                           ! 5658 #asm
32388                                           !BCC_ASM
32389                       00000006            _cirrus_debugmsg.BP	set	6
32390                       0000000E            _cirrus_debugmsg.CX	set	$E
32391                       00000002            _cirrus_debugmsg.DI	set	2
32392                       00000016            _cirrus_debugmsg.FLAGS	set	$16
32393                       00000012            _cirrus_debugmsg.DS	set	$12
32394                       0000000C            _cirrus_debugmsg.DX	set	$C
32395                       00000014            _cirrus_debugmsg.ES	set	$14
32396                       00000004            _cirrus_debugmsg.SI	set	4
32397                       00000010            _cirrus_debugmsg.AX	set	$10
32398                       00000008            _cirrus_debugmsg.SP	set	8
32399                       0000000A            _cirrus_debugmsg.BX	set	$A
32400                                           ;; DATA_SEG_DEFS_HERE
32401                                           ! 5660 endasm
32402                                           !BCC_ENDASM
32403                                           ! 5661 #asm
32404                                           !BCC_ASM
32405                       00000006            _cirrus_debugmsg.BP	set	6
32406                       0000000E            _cirrus_debugmsg.CX	set	$E
32407                       00000002            _cirrus_debugmsg.DI	set	2
32408                       00000016            _cirrus_debugmsg.FLAGS	set	$16
32409                       00000012            _cirrus_debugmsg.DS	set	$12
32410                       0000000C            _cirrus_debugmsg.DX	set	$C
32411                       00000014            _cirrus_debugmsg.ES	set	$14
32412                       00000004            _cirrus_debugmsg.SI	set	4
32413                       00000010            _cirrus_debugmsg.AX	set	$10
32414                       00000008            _cirrus_debugmsg.SP	set	8
32415                       0000000A            _cirrus_debugmsg.BX	set	$A
32416 8B1F                        76            .ascii "vgabios ends here"
32417 8B30                        00            .byte 0x00
32418                       00008B31            vgabios_end:
32419 8B31                        CB            .byte 0xCB
32420                                           ;; BLOCK_STRINGS_BEGIN
32421                                           ! 5667 endasm
32422                                           !BCC_ENDASM
32423                                           ! 5668 
32424                                           ! Register BX used in function cirrus_debugmsg
32425                                           
32426                       00008B32            .2AB:
32427                       00008B32            .2AC:
32428 8B32                        76            .ascii	"vgabios call ah%02x al%02x bx%04x cx%04x"
32429 8B5A                        20            .ascii	" dx%04x"
32430 8B61                        0A            .byte	$A
32431 8B62                        00            .byte	0
32432 8B63                                      .bss
32433                                           
32434                                           ! 0 errors detected

Symbols:
..FFF5                      0 FFFC A   ..FFF6                      0 FFEE A   
..FFF7                      0 FFF4 A   ..FFF8                      0 FFF6 A   
..FFF9                      0 FFEE A   ..FFFA                      0 FFEE A   
..FFFB                      0 FFF2 A   ..FFFC                      0 FFF0 A   
..FFFD                      0 FFE8 A   ..FFFE                      0 FFE8 A   
..FFFF                      0 FFFE A   .1                          0 3AB1 A   
.10                         0 3669 A   .100                        0 4D54 A   
.101                        0 4CDC A   .102                        0 4D19 A   
.103                        0 4CF3 A   .104                        0 4CEC A   
.105                        0 4D41 A   .106                        0 4D4D A   
.107                        0 4D4B A   .108                        0 4D60 A   
.109                        0 4D63 A   .10A                        0 4DF6 A   
.10B                        0 4DB1 A   .10C                        0 4D9F A   
.10D                        0 4D8D A   .10E                        0 4D86 A   
.10F                        0 4D7F A   .11                         0 3698 A   
.110                        0 4F3A A   .111                        0 4E19 A   
.112                        0 4DFD A   .113                        0 4EAC A   
.114                        0 4E22 A   .115                        0 4EA9 A   
.116                        0 4E98 A   .117                        0 4E9F A   
.118                        0 4E2C A   .119                        0 4E70 A   
.11A                        0 4E4A A   .11B                        0 4E43 A   
.11C                        0 4E98 A   .11D                        0 4EA9 A   
.11E                        0 4F3A A   .11F                        0 4F3A A   
.12                         0 3688 A   .120                        0 4F27 A   
.121                        0 4F2E A   .122                        0 4EB6 A   
.123                        0 4EF3 A   .124                        0 4ECD A   
.125                        0 4EC6 A   .126                        0 4F1B A   
.127                        0 4F27 A   .128                        0 4F25 A   
.129                        0 4F3A A   .12A                        0 4F8C A   
.12B                        0 4F88 A   .12C                        0 504B A   
.12D                        0 4FED A   .12E                        0 504B A   
.12F                        0 507C A   .13                         0 369D A   
.131                        0 5072 A   .132                        0 505A A   
.133                        0 5062 A   .134                        0 506A A   
.135                        0 50E9 A   .136                        0 50D9 A   
.137                        0 50F7 A   .138                        0 51AF A   
.139                        0 519E A   .13A                        0 51A5 A   
.13B                        0 50FF A   .13C                        0 519E A   
.13D                        0 518E A   .13E                        0 5195 A   
.13F                        0 511C A   .14                         0 36B4 A   
.140                        0 517E A   .141                        0 5167 A   
.142                        0 518E A   .143                        0 519E A   
.144                        0 51AF A   .145                        0 53C3 A   
.146                        0 53B3 A   .147                        0 53BA A   
.148                        0 5205 A   .149                        0 5229 A   
.14A                        0 5220 A   .14B                        0 52EA A   
.14C                        0 5237 A   .14D                        0 5252 A   
.14E                        0 5240 A   .14F                        0 5257 A   
.15                         0 36C8 A   .150                        0 52D4 A   
.151                        0 52C6 A   .152                        0 52CD A   
.153                        0 525E A   .154                        0 52BC A   
.155                        0 5275 A   .156                        0 529E A   
.157                        0 527E A   .158                        0 52BC A   
.159                        0 52D4 A   .15A                        0 53B3 A   
.15B                        0 53B3 A   .15C                        0 53AA A   
.15D                        0 52ED A   .15E                        0 5308 A   
.15F                        0 52F6 A   .16                         0 36E1 A   
.160                        0 530D A   .161                        0 5390 A   
.162                        0 5382 A   .163                        0 5389 A   
.164                        0 5314 A   .165                        0 5378 A   
.166                        0 532B A   .167                        0 5358 A   
.168                        0 5336 A   .169                        0 5378 A   
.16A                        0 5390 A   .16B                        0 53B3 A   
.16C                        0 53C3 A   .16D                        0 5497 A   
.16E                        0 5487 A   .16F                        0 548E A   
.17                         0 36F8 A   .170                        0 540D A   
.171                        0 5487 A   .172                        0 5479 A   
.173                        0 5480 A   .174                        0 5433 A   
.175                        0 5455 A   .176                        0 544F A   
.177                        0 5487 A   .178                        0 5497 A   
.179                        0 54CB A   .17A                        0 54C7 A   
.17B                        0 5596 A   .17C                        0 552C A   
.17D                        0 5689 A   .17E                        0 5689 A   
.17F                        0 5671 A   .18                         0 3706 A   
.180                        0 55CB A   .181                        0 566A A   
.183                        0 5656 A   .184                        0 55DF A   
.185                        0 55DF A   .186                        0 5608 A   
.187                        0 5631 A   .188                        0 5689 A   
.189                        0 567D A   .18A                        0 56BD A   
.18B                        0 56B9 A   .18C                        0 578C A   
.18D                        0 571E A   .18E                        0 5789 A   
.18F                        0 577D A   .19                         0 3741 A   
.190                        0 5754 A   .191                        0 5789 A   
.192                        0 587F A   .193                        0 587F A   
.194                        0 5867 A   .195                        0 57C1 A   
.196                        0 5860 A   .198                        0 584C A   
.199                        0 57D5 A   .19A                        0 57D5 A   
.19B                        0 57FE A   .19C                        0 5827 A   
.19D                        0 587F A   .19E                        0 5873 A   
.19F                        0 592B A   .1A                         0 377B A   
.1A0                        0 5927 A   .1A1                        0 5945 A   
.1A2                        0 5941 A   .1A3                        0 5B93 A   
.1A5                        0 5B7D A   .1A6                        0 595A A   
.1A7                        0 595A A   .1A8                        0 59DB A   
.1A9                        0 59CD A   .1AA                        0 5A00 A   
.1AB                        0 5A32 A   .1AC                        0 5A16 A   
.1AD                        0 5A4C A   .1AE                        0 5A5E A   
.1AF                        0 5A55 A   .1B                         0 3790 A   
.1B0                        0 5ACA A   .1B1                        0 5A84 A   
.1B2                        0 5B0A A   .1B3                        0 5B1E A   
.1B4                        0 5B13 A   .1B5                        0 5B34 A   
.1B6                        0 5B49 A   .1B7                        0 5BCD A   
.1B8                        0 5BC9 A   .1B9                        0 5BE7 A   
.1BA                        0 5BE3 A   .1BB                        0 5D7B A   
.1BD                        0 5D63 A   .1BE                        0 5BFC A   
.1BF                        0 5BFC A   .1C                         0 37B0 A   
.1C0                        0 5C90 A   .1C1                        0 5C82 A   
.1C2                        0 5C89 A   .1C3                        0 5C3E A   
.1C4                        0 5C82 A   .1C5                        0 5C6E A   
.1C6                        0 5C90 A   .1C7                        0 5C93 A   
.1C8                        0 5CBF A   .1C9                        0 5CB6 A   
.1CA                        0 5D0A A   .1CB                        0 5CE5 A   
.1CC                        0 5D2B A   .1CD                        0 5D2D A   
.1CE                        0 5D5C A   .1CF                        0 5DBB A   
.1D                         0 37D0 A   .1D0                        0 5DAA A   
.1D1                        0 5DE5 A   .1D2                        0 5DE1 A   
.1D3                        0 6042 A   .1D5                        0 6021 A   
.1D6                        0 5E36 A   .1D7                        0 5E39 A   
.1D8                        0 5E47 A   .1D9                        0 5E40 A   
.1DA                        0 5E4A A   .1DB                        0 5E52 A   
.1DC                        0 5E5C A   .1DD                        0 5EA9 A   
.1DE                        0 5E9E A   .1DF                        0 5E5C A   
.1E                         0 37ED A   .1E0                        0 5EA9 A   
.1E1                        0 5EAC A   .1E2                        0 5F46 A   
.1E3                        0 5EC4 A   .1E4                        0 5F43 A   
.1E5                        0 5F20 A   .1E6                        0 6018 A   
.1E7                        0 6018 A   .1E9                        0 6004 A   
.1EA                        0 5F8D A   .1EB                        0 5F8D A   
.1EC                        0 5FB6 A   .1ED                        0 5FDF A   
.1EE                        0 6058 A   .1EF                        0 604C A   
.1F                         0 3808 A   .1F0                        0 612D A   
.1F1                        0 6064 A   .1F2                        0 60FD A   
.1F3                        0 607C A   .1F4                        0 6124 A   
.1F5                        0 64DA A   .1F6                        0 64C9 A   
.1F7                        0 64D0 A   .1F8                        0 6412 A   
.1F9                        0 6485 A   .1FA                        0 647F A   
.1FB                        0 64DA A   .1FC                        0 65BB A   
.1FD                        0 65AB A   .1FE                        0 65D3 A   
.1FF                        0 6718 A   .20                         0 3825 A   
.200                        0 6709 A   .201                        0 6710 A   
.202                        0 66CC A   .203                        0 6718 A   
.204                        0 672D A   .205                        0 6722 A   
.206                        0 67B1 A   .207                        0 67A2 A   
.208                        0 67A9 A   .209                        0 6768 A   
.20A                        0 67B1 A   .20B                        0 67C4 A   
.20C                        0 67BB A   .20D                        0 6842 A   
.20E                        0 6833 A   .20F                        0 683A A   
.21                         0 3834 A   .210                        0 67FF A   
.211                        0 6842 A   .212                        0 6855 A   
.213                        0 684C A   .214                        0 68E0 A   
.215                        0 68D1 A   .216                        0 68D8 A   
.217                        0 689D A   .218                        0 68E0 A   
.219                        0 68F3 A   .21A                        0 68EA A   
.21B                        0 6A75 A   .21D                        0 6A50 A   
.21E                        0 690D A   .21F                        0 6944 A   
.22                         0 396F A   .220                        0 697B A   
.221                        0 699E A   .222                        0 69C1 A   
.223                        0 69E4 A   .224                        0 6A06 A   
.225                        0 6A28 A   .226                        0 6A4A A   
.227                        0 6A73 A   .228                        0 6A63 A   
.229                        0 6BE5 A   .22A                        0 6BD3 A   
.22B                        0 6C6F A   .22C                        0 6C63 A   
.22D                        0 6C14 A   .22E                        0 6C47 A   
.22F                        0 6C32 A   .230                        0 6C6F A   
.231                        0 6C87 A   .232                        0 6C78 A   
.233                        0 6E12 A   .234                        0 6E09 A   
.235                        0 6E24 A   .236                        0 6E1B A   
.237                        0 6E36 A   .238                        0 6E2D A   
.239                        0 70E9 A   .23A                        0 6E83 A   
.23B                        0 6F6E A   .23C                        0 6F5F A   
.23D                        0 6F66 A   .23E                        0 6F33 A   
.23F                        0 6F6E A   .24                         0 391B A   
.240                        0 6FDC A   .241                        0 6FCD A   
.242                        0 6FD4 A   .243                        0 6FA1 A   
.244                        0 6FDC A   .245                        0 702F A   
.246                        0 7020 A   .247                        0 7027 A   
.248                        0 6FE3 A   .249                        0 702F A   
.24A                        0 707A A   .24B                        0 706B A   
.24C                        0 7072 A   .24D                        0 703F A   
.24E                        0 707A A   .24F                        0 7364 A   
.25                         0 383A A   .250                        0 70F4 A   
.251                        0 7295 A   .252                        0 7286 A   
.253                        0 728D A   .254                        0 725E A   
.255                        0 7295 A   .256                        0 7424 A   
.257                        0 736F A   .258                        0 740E A   
.259                        0 73FF A   .25A                        0 7406 A   
.25B                        0 73E0 A   .25C                        0 740E A   
.25D                        0 76E6 A   .25E                        0 743C A   
.25F                        0 74AB A   .26                         0 383A A   
.260                        0 749C A   .261                        0 74A3 A   
.262                        0 746F A   .263                        0 74AB A   
.264                        0 7530 A   .265                        0 7521 A   
.266                        0 7528 A   .267                        0 74EC A   
.268                        0 751A A   .269                        0 74F4 A   
.26A                        0 7530 A   .26B                        0 7552 A   
.26C                        0 754A A   .26D                        0 75F3 A   
.26E                        0 75E4 A   .26F                        0 75EB A   
.27                         0 3863 A   .270                        0 75AF A   
.271                        0 75F3 A   .272                        0 764C A   
.273                        0 763D A   .274                        0 7644 A   
.275                        0 7610 A   .276                        0 764C A   
.277                        0 7961 A   .278                        0 76F1 A   
.279                        0 7892 A   .27A                        0 7883 A   
.27B                        0 788A A   .27C                        0 785B A   
.27D                        0 7892 A   .27E                        0 7A02 A   
.27F                        0 796C A   .28                         0 3863 A   
.280                        0 79EE A   .281                        0 79DF A   
.282                        0 79E6 A   .283                        0 79BF A   
.284                        0 79EE A   .285                        0 7A44 A   
.286                        0 7A36 A   .287                        0 7A3D A   
.288                        0 7A1A A   .289                        0 7A36 A   
.28A                        0 7A2E A   .28B                        0 7A44 A   
.28C                        0 7CBD A   .28D                        0 7CA7 A   
.28E                        0 7BA3 A   .28F                        0 7BB8 A   
.29                         0 3878 A   .290                        0 7BAA A   
.291                        0 7CA0 A   .292                        0 7C90 A   
.293                        0 7BC1 A   .294                        0 7BF0 A   
.295                        0 7BCF A   .296                        0 7BC8 A   
.297                        0 7C8E A   .298                        0 7C8E A   
.299                        0 7BF9 A   .29A                        0 7C1D A   
.29B                        0 7C17 A   .29C                        0 7C89 A   
.29D                        0 7C7A A   .29E                        0 7C81 A   
.29F                        0 7C30 A   .2A                         0 3878 A   
.2A0                        0 7C62 A   .2A1                        0 7C4F A   
.2A2                        0 7C73 A   .2A3                        0 7C89 A   
.2A4                        0 7CA0 A   .2A5                        0 7CBD A   
.2A6                        0 8B1D A   .2A7                        0 8AFD A   
.2A8                        0 8AF5 A   .2A9                        0 8AE9 A   
.2AA                        0 8ADD A   .2AB                        0 8B32 A   
.2AC                        0 8B32 A   .2B                         0 388D A   
.2C                         0 388D A   .2D                         0 38A2 A   
.2E                         0 38B1 A   .2F                         0 38CF A   
.3                          0 3A64 A   .30                         0 38DD A   
.31                         0 38EB A   .32                         0 38F9 A   
.33                         0 3972 A   .34                         0 39BF A   
.36                         0 39B3 A   .37                         0 3977 A   
.38                         0 397C A   .39                         0 399A A   
.3A                         0 39C2 A   .3B                         0 39F6 A   
.3C                         0 3A12 A   .3D                         0 3A56 A   
.3F                         0 3A4A A   .4                          0 363F A   
.40                         0 3A17 A   .41                         0 3A26 A   
.42                         0 3A37 A   .43                         0 3AB1 A   
.44                         0 3A77 A   .45                         0 3AE3 A   
.46                         0 3ADF A   .47                         0 3CB6 A   
.48                         0 3B71 A   .49                         0 3BE3 A   
.4B                         0 3BD3 A   .4C                         0 3BB1 A   
.4D                         0 3BB9 A   .4E                         0 3BC1 A   
.4F                         0 3BC9 A   .5                          0 369A A   
.50                         0 3CA0 A   .51                         0 3C8F A   
.52                         0 3C96 A   .53                         0 3BEB A   
.54                         0 3C68 A   .55                         0 3C0C A   
.56                         0 3C8F A   .57                         0 3CA0 A   
.58                         0 3CB6 A   .59                         0 3CA9 A   
.5A                         0 3D06 A   .5B                         0 3CF7 A   
.5C                         0 3CFE A   .5D                         0 3CC6 A   
.5E                         0 3D06 A   .5F                         0 3D8B A   
.60                         0 3D7C A   .61                         0 3D83 A   
.62                         0 3D44 A   .63                         0 3D8B A   
.64                         0 3DD2 A   .65                         0 3DC3 A   
.66                         0 3DCA A   .67                         0 3D92 A   
.68                         0 3DD2 A   .69                         0 3DED A   
.6A                         0 3DE8 A   .6B                         0 3DF0 A   
.6C                         0 3E47 A   .6D                         0 3E38 A   
.6E                         0 3E3F A   .6F                         0 3E07 A   
.7                          0 3675 A   .70                         0 3E47 A   
.71                         0 3F47 A   .72                         0 3E86 A   
.73                         0 3EC2 A   .74                         0 3E9C A   
.75                         0 3F47 A   .76                         0 3EED A   
.77                         0 3EC9 A   .78                         0 3F47 A   
.79                         0 4084 A   .7A                         0 4076 A   
.7B                         0 40A6 A   .7C                         0 4097 A   
.7D                         0 409E A   .7E                         0 408B A   
.7F                         0 40A6 A   .8                          0 3651 A   
.80                         0 40D2 A   .81                         0 40C4 A   
.82                         0 4137 A   .84                         0 4128 A   
.85                         0 40EA A   .86                         0 40FE A   
.87                         0 4112 A   .88                         0 4205 A   
.89                         0 41B5 A   .8A                         0 41AE A   
.8B                         0 41A7 A   .8C                         0 419F A   
.8D                         0 41DE A   .8E                         0 41C9 A   
.8F                         0 41F2 A   .9                          0 365D A   
.90                         0 4267 A   .91                         0 4263 A   
.92                         0 4352 A   .93                         0 429A A   
.94                         0 438A A   .95                         0 4386 A   
.96                         0 43DC A   .97                         0 43D8 A   
.98                         0 4406 A   .99                         0 4402 A   
.9A                         0 449E A   .9B                         0 4430 A   
.9C                         0 44C2 A   .9D                         0 45EA A   
.9E                         0 45DB A   .9F                         0 45E2 A   
.A                          0 365D A   .A0                         0 459F A   
.A1                         0 45EA A   .A2                         0 4675 A   
.A3                         0 4666 A   .A4                         0 466D A   
.A5                         0 463C A   .A6                         0 4675 A   
.A7                         0 4795 A   .A8                         0 4784 A   
.A9                         0 478B A   .AA                         0 46E3 A   
.AB                         0 4742 A   .AC                         0 46EC A   
.AD                         0 4784 A   .AE                         0 4795 A   
.AF                         0 484A A   .B                          0 365D A   
.B0                         0 483B A   .B1                         0 4842 A   
.B2                         0 47CD A   .B3                         0 480E A   
.B4                         0 47D6 A   .B5                         0 483B A   
.B6                         0 484A A   .B7                         0 4860 A   
.B8                         0 485C A   .B9                         0 486C A   
.BA                         0 4868 A   .BB                         0 4896 A   
.BC                         0 4892 A   .BD                         0 48D3 A   
.BE                         0 48C2 A   .BF                         0 48E4 A   
.C                          0 365D A   .C0                         0 48DD A   
.C1                         0 48F5 A   .C2                         0 48EE A   
.C3                         0 4904 A   .C4                         0 48FF A   
.C5                         0 4B7B A   .C6                         0 492B A   
.C7                         0 49B5 A   .C8                         0 4980 A   
.C9                         0 496E A   .CA                         0 495C A   
.CB                         0 4955 A   .CC                         0 494E A   
.CD                         0 4B78 A   .CE                         0 4A9A A   
.CF                         0 49BE A   .D                          0 365D A   
.D0                         0 4A97 A   .D1                         0 4A84 A   
.D2                         0 4A8B A   .D3                         0 49C9 A   
.D4                         0 4A29 A   .D5                         0 49E7 A   
.D6                         0 49E0 A   .D7                         0 4A84 A   
.D8                         0 4A97 A   .D9                         0 4B78 A   
.DA                         0 4B78 A   .DB                         0 4B65 A   
.DC                         0 4B6C A   .DD                         0 4AA5 A   
.DE                         0 4AFE A   .DF                         0 4ABC A   
.E                          0 365D A   .E0                         0 4AB5 A   
.E1                         0 4B59 A   .E2                         0 4B65 A   
.E3                         0 4B63 A   .E4                         0 4B78 A   
.E5                         0 4F50 A   .E6                         0 4F50 A   
.E8                         0 4F3E A   .E9                         0 4BAD A   
.EA                         0 4BAD A   .EB                         0 4C3F A   
.EC                         0 4BEA A   .ED                         0 4BD8 A   
.EE                         0 4BC6 A   .EF                         0 4BBF A   
.F                          0 365D A   .F0                         0 4BB6 A   
.F1                         0 4D60 A   .F2                         0 4CD2 A   
.F3                         0 4C48 A   .F4                         0 4CCF A   
.F5                         0 4CBE A   .F6                         0 4CC5 A   
.F7                         0 4C52 A   .F8                         0 4C96 A   
.F9                         0 4C70 A   .FA                         0 4C69 A   
.FB                         0 4CBE A   .FC                         0 4CCF A   
.FD                         0 4D60 A   .FE                         0 4D60 A   
.FF                         0 4D4D A   _biosfn_alternate_prtsc     0 6AD6 A   
_biosfn_enable_video_refre+ 0 6BB1 A   _biosfn_get_cursor_pos      0 4356 A   
_biosfn_get_font_info       0 68FC A   _biosfn_load_gfx_8_14_char+ 0 68F9 A   
_biosfn_load_gfx_8_16_char+ 0 68FB A   _biosfn_load_gfx_8_8_chars  0 68F7 A   
_biosfn_load_gfx_8_8_dd_ch+ 0 68FA A   _biosfn_load_gfx_user_char+ 0 68F8 A   
_biosfn_load_text_8_14_pat  0 6731 A   _biosfn_load_text_8_16_pat  0 6866 A   
_biosfn_load_text_8_8_pat   0 67C8 A   _biosfn_load_text_user_pat  0 6695 A   
_biosfn_perform_gray_scale+ 0 63EE A   _biosfn_read_char_attr      0 4F54 A   
_biosfn_read_pixel          0 5B97 A   _biosfn_read_state_info     0 6CBE A   
_biosfn_read_video_state_s+ 0 6E3D A   _biosfn_read_video_state_s+ 0 6DF6 A   
_biosfn_restore_video_stat+ 0 742B A   _biosfn_save_video_state    0 6E61 A   
_biosfn_scroll              0 484E A   _biosfn_set_active_page     0 43CB A   
_biosfn_set_cursor_pos      0 4256 A   _biosfn_set_cursor_shape    0 413B A   
_biosfn_set_video_mode      0 3AB3 A   _biosfn_switch_video_inter+ 0 6BB0 A   
_biosfn_write_char_attr     0 549B A   _biosfn_write_char_only     0 568D A   
_biosfn_write_pixel         0 58FB A   _biosfn_write_string        0 6BB2 A   
_biosfn_write_teletype      0 5D9D A   _ccrtc_1024x768x16          0 7FB9 A E 
_ccrtc_1024x768x24          0 800D A E _ccrtc_1024x768x8           0 7F65 A E 
_ccrtc_1280x1024x16         0 80B5 A E _ccrtc_1280x1024x8          0 8061 A E 
_ccrtc_1600x1200x8          0 8109 A E _ccrtc_640x480x16           0 7DC1 A E 
_ccrtc_640x480x24           0 7E15 A E _ccrtc_640x480x8            0 7D6D A E 
_ccrtc_800x600x16           0 7EBD A E _ccrtc_800x600x24           0 7F11 A E 
_ccrtc_800x600x8            0 7E69 A E _ccrtc_vga                  0 7D27 A E 
_cgraph_svgacolor           0 7D2F A E _cgraph_vga                 0 7D1F A E 
_cirrus_debugmsg            0 8ACE A   _cirrus_id_table            0 830D A E 
_cirrus_modes               0 8139 A E _cirrus_vesa_modelist       0 8313 A E 
_cseq_1024x768x16           0 7F95 A E _cseq_1024x768x24           0 7FE9 A E 
_cseq_1024x768x8            0 7F41 A E _cseq_1280x1024x16          0 8091 A E 
_cseq_1280x1024x8           0 803D A E _cseq_1600x1200x8           0 80E5 A E 
_cseq_640x480x16            0 7D9D A E _cseq_640x480x24            0 7DF1 A E 
_cseq_640x480x8             0 7D49 A E _cseq_800x600x16            0 7E99 A E 
_cseq_800x600x24            0 7EED A E _cseq_800x600x8             0 7E45 A E 
_cseq_vga                   0 7D1B A E _dac_regs                   0 0263 A   
_display_info               0 35ED A   _display_splash_screen      0 35EC A   
_display_string             0 360B A   _find_vga_entry             0 7A09 A   
_get_SS                     0 7B81 A E _get_font_access            0 64F5 A   
_inb                        0 7B4B A E _int10_func                 0 3632 A   
_inw                        0 7B56 A E _line_to_vpti               0 0253 A   
_memcpyb                    0 7A95 A   _memcpyw                    0 7AC5 A   
_memsetb                    0 7A4B A   _memsetw                    0 7A70 A   
_outb                       0 7B61 A E _outw                       0 7B71 A E 
_palette0                   0 09E7 A   _palette1                   0 0AA7 A   
_palette2                   0 0B67 A   _palette3                   0 0C27 A   
_pci_get_lfb_addr           0 7CC1 A   _printf                     0 7B84 A E 
_read_byte                  0 7AF5 A   _read_word                  0 7B08 A   
_release_font_access        0 6518 A   _set_scan_lines             0 654C A   
_static_functionality       0 0F27 A   _vga_modes                  0 01D3 A   
_vgafont14                  0 1737 A   _vgafont14alt               0 3537 A   
_vgafont16                  0 2537 A   _vgafont16alt               0 3538 A   
_vgafont8                   0 0F37 A   _vgamem_copy_cga            0 4687 A   
_vgamem_copy_pl4            0 453A A   _vgamem_fill_cga            0 4799 A   
_vgamem_fill_pl4            0 45FC A   _video_param_table          0 0267 A   
_video_save_pointer_table   0 35D0 A   _write_byte                 0 7B1B A   
_write_gfx_char_cga         0 51C2 A   _write_gfx_char_lin         0 53C7 A   
_write_gfx_char_pl4         0 504F A   _write_word                 0 7B33 A   
biosfn_enable_cursor_emula+ 0 6B8E A   biosfn_enable_default_pale+ 0 6B2A A   
biosfn_enable_grayscale_su+ 0 6B6A A   biosfn_enable_video_addres+ 0 6B4C A   
biosfn_get_all_palette_reg  0 6293 A   biosfn_get_ega_info         0 6AB3 A   
biosfn_get_single_palette_+ 0 6261 A   biosfn_get_video_mode       0 615E A   
biosfn_group_0B             0 5883 A   biosfn_group_10             0 6185 A   
biosfn_group_1A             0 6C8B A   biosfn_read_all_dac_reg     0 6373 A   
biosfn_read_display_code    0 6C94 A   biosfn_read_overscan_borde+ 0 6285 A   
biosfn_read_pel_mask        0 63A6 A   biosfn_read_single_dac_reg  0 6358 A   
biosfn_read_video_dac_stat+ 0 63B1 A   biosfn_select_vert_res      0 6AD7 A   
biosfn_select_video_dac_co+ 0 6315 A   biosfn_set_all_dac_reg      0 62ED A   
biosfn_set_all_palette_reg  0 620E A   biosfn_set_border_color     0 588E A   
biosfn_set_display_code     0 6CA9 A   biosfn_set_overscan_border+ 0 6206 A   
biosfn_set_palette          0 58CD A   biosfn_set_pel_mask         0 639B A   
biosfn_set_single_dac_reg   0 62D4 A   biosfn_set_single_palette_+ 0 61EC A   
biosfn_set_text_block_spec+ 0 6859 A   biosfn_toggle_intensity     0 623B A   
c80h_1                      0 856B A   c80h_2                      0 857B A   
c85h2                       0 85B7 A   c85h3                       0 85BF A   
cgm_1                       0 8902 A   cgm_2                       0 8918 A   
cgm_3                       0 8919 A   cgm_4                       0 8913 A   
cirrus_check                0 840C A   cirrus_clear_vram           0 8A15 A   
cirrus_clear_vram_1         0 8A26 A   cirrus_debug_dump           0 8498 A   
cirrus_display_info         0 83F7 A   cirrus_enable_16k_granular+ 0 8541 A   
cirrus_extbios              0 845C A   cirrus_extbios_80h          0 855F A   
cirrus_extbios_81h          0 8585 A   cirrus_extbios_82h          0 8589 A   
cirrus_extbios_85h          0 859A A   cirrus_extbios_9Ah          0 85C2 A   
cirrus_extbios_A0h          0 85C9 A   cirrus_extbios_A0h_callbac+ 0 85DF A   
cirrus_extbios_A1h          0 85E2 A   cirrus_extbios_A2h          0 85E6 A   
cirrus_extbios_AEh          0 85E9 A   cirrus_extbios_handlers     0 8A4C A   
cirrus_extbios_unimplement+ 0 85EC A   cirrus_get_bpp_bytes        0 891A A   
cirrus_get_bpp_bytes_1      0 892B A   cirrus_get_bpp_bytes_2      0 8933 A   
cirrus_get_crtc             0 88EA A   cirrus_get_line_offset      0 8951 A   
cirrus_get_line_offset_ent+ 0 8973 A   cirrus_get_modeentry        0 88FD A   
cirrus_get_modeentry_nomas+ 0 88FF A   cirrus_get_start_addr       0 89DE A   
cirrus_init                 0 83C0 A   cirrus_installed            0 8353 A   
cirrus_int10_handler        0 841C A   cirrus_msgnotinstalled      0 8406 A   
cirrus_not_installed        0 8379 A   cirrus_return               0 8432 A   
cirrus_set_line_offset      0 8935 A   cirrus_set_start_addr       0 899D A   
cirrus_set_video_mode       0 8438 A   cirrus_set_video_mode_exte+ 0 84A4 A   
cirrus_set_video_mode_exte+ 0 84B4 A   cirrus_switch_mode          0 84E9 A   
cirrus_switch_mode_setregs  0 8551 A   cirrus_unhandled            0 842D A   
cirrus_vesa                 0 847A A   cirrus_vesa_00h             0 85ED A   
cirrus_vesa_01h             0 865F A   cirrus_vesa_01h_1           0 866F A   
cirrus_vesa_01h_3           0 86D5 A   cirrus_vesa_01h_4           0 8712 A   
cirrus_vesa_01h_5           0 8735 A   cirrus_vesa_01h_6           0 8734 A   
cirrus_vesa_02h             0 8736 A   cirrus_vesa_02h_1           0 8757 A   
cirrus_vesa_02h_2           0 874E A   cirrus_vesa_02h_3           0 8768 A   
cirrus_vesa_02h_4           0 8775 A   cirrus_vesa_02h_legacy      0 8751 A   
cirrus_vesa_03h             0 8788 A   cirrus_vesa_03h_1           0 87A1 A   
cirrus_vesa_05h             0 87AA A   cirrus_vesa_05h_1           0 87B9 A   
cirrus_vesa_05h_farentry    0 87A6 A   cirrus_vesa_05h_getmempage  0 87D0 A   
cirrus_vesa_05h_setmempage  0 87BC A   cirrus_vesa_06h             0 87E2 A   
cirrus_vesa_06h_1           0 87F4 A   cirrus_vesa_06h_2           0 87FF A   
cirrus_vesa_06h_3           0 8802 A   cirrus_vesa_07h             0 8825 A   
cirrus_vesa_07h_1           0 8835 A   cirrus_vesa_07h_2           0 8862 A   
cirrus_vesa_07h_3           0 884E A   cirrus_vesa_10h             0 888F A   
cirrus_vesa_10h_01          0 889B A   cirrus_vesa_10h_02          0 88B1 A   
cirrus_vesa_handlers        0 8AAC A   cirrus_vesa_not_handled     0 8493 A   
cirrus_vesa_oemname         0 83A3 A   cirrus_vesa_pmbios_entry    0 84C6 A   
cirrus_vesa_pmbios_init     0 84C5 A   cirrus_vesa_pmbios_return   0 84E6 A   
cirrus_vesa_pmbios_unimple+ 0 84E3 A   cirrus_vesa_productname     0 83A3 A   
cirrus_vesa_productrevisio+ 0 83BC A   cirrus_vesa_unimplemented   0 88C7 A   
cirrus_vesa_vendorname      0 83A3 A   cirrus_vesamode_to_mode     0 88CB A   
csms_1                      0 8551 A   csms_2                      0 855E A   
cv00_1                      0 861F A   cv00_2                      0 864D A   
cvtm_1                      0 88D6 A   cvtm_2                      0 88E3 A   
ef                          E 0000 R I get_dac_16_page             0 63E1 A   
get_palette_loop            0 629B A   idiv_u                      0 6547 A   
init_bios_area              0 3598 A   init_vga_card               0 3539 A   
int10_end                   0 01D1 A   int10_group_10_unknown      0 61EB A   
int10_normal                0 01C3 A   int10_test_0B               0 015F A   
int10_test_1001             0 618B A   int10_test_1002             0 6191 A   
int10_test_1003             0 6197 A   int10_test_1007             0 619E A   
int10_test_1008             0 61A5 A   int10_test_1009             0 61AC A   
int10_test_1010             0 61B3 A   int10_test_1012             0 61BA A   
int10_test_1013             0 61C1 A   int10_test_1015             0 61C8 A   
int10_test_1017             0 61CF A   int10_test_1018             0 61D6 A   
int10_test_1019             0 61DD A   int10_test_101A             0 61E4 A   
int10_test_101B             0 01B4 A   int10_test_1103             0 0169 A   
int10_test_12               0 0173 A   int10_test_1A               0 0155 A   
int10_test_BL30             0 0182 A   int10_test_BL31             0 018C A   
int10_test_BL32             0 0196 A   int10_test_BL33             0 01A0 A   
int10_test_BL34             0 01AA A   is_text_mode                0 8530 A   
memcpyb_end                 0 7ABD A   memcpyw_end                 0 7AED A   
memsetb_end                 0 7A6A A   memsetw_end                 0 7A8F A   
mode_ega_color              0 6AD3 A   msg_vga_init                0 3555 A   
no_actl_reg1                0 6205 A   no_actl_reg2                0 6284 A   
no_cirrus                   0 83F6 A   offset_found1               0 8982 A   
offset_found2               0 8993 A   offset_loop1                0 8978 A   
offset_loop2                0 8989 A   pci_get_lfb_addr_3          0 7CD4 A   
pci_get_lfb_addr_4          0 7CEA A   pci_get_lfb_addr_5          0 7CE6 A   
pci_get_lfb_addr_6          0 7CFA A   pci_read_reg                0 7D02 A   
read_dac_loop               0 6384 A   set_actl_normal             0 6351 A   
set_cga_palette_loop        0 58DA A   set_dac_16_page             0 634B A   
set_dac_loop                0 62FE A   set_dac_page                0 6338 A   
set_intensity_loop          0 58AC A   set_low_border              0 58A6 A   
set_palette_loop            0 621D A   set_retcode                 0 6B23 A   
set_vert_res                0 6B19 A   vert_res_200                0 6B0F A   
vert_res_350                0 6B05 A   vert_res_400                0 6AF9 A   
vgabios_copyright           0 0051 A   vgabios_date                0 0043 A   
vgabios_end                 0 8B31 A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0120 A   vgabios_int10_handler       0 014A A   
vgabios_license             0 007D A   vgabios_name                0 0022 A   
vgabios_pci_data            0 0108 A   vgabios_start               0 0000 A   
vgabios_version             0 003E A   vgabios_website             0 00B2 A   

00000 errors
00000 warnings
