00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios.debug_.c"
00003                                           ! 1 # 5
00004                                           ! 5 typedef unsigned char Bit8u;
00005                                           !BCC_EOS
00006                                           ! 6 typedef unsigned short Bit16u;
00007                                           !BCC_EOS
00008                                           ! 7 typedef unsigned long Bit32u;
00009                                           !BCC_EOS
00010                                           ! 8 typedef unsigned short Boolean;
00011                                           !BCC_EOS
00012                                           ! 9 void dispi_set_enable(enable);
00013                                           !BCC_EOS
00014                                           ! 10 
00015                                           ! 11 
00016                                           ! 12 
00017                                           ! 13 Boolean vbe_has_vbe_display();
00018                                           !BCC_EOS
00019                                           ! 14 void vbe_biosfn_return_controller_information(AX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 15 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00022                                           !BCC_EOS
00023                                           ! 16 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00024                                           !BCC_EOS
00025                                           ! 17 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00026                                           !BCC_EOS
00027                                           ! 18 void vbe_biosfn_set_get_palette_data(AX);
00028                                           !BCC_EOS
00029                                           ! 19 void vbe_biosfn_return_protected_mode_interface(AX);
00030                                           !BCC_EOS
00031                                           ! 20 
00032                                           ! 21 
00033                                           ! 22 typedef struct VbeInfoBlock
00034                                           ! 23 {
00035                                           ! 24    Bit8u VbeSignature[4];
00036                                           !BCC_EOS
00037                                           ! 25    Bit16u VbeVersion;
00038                                           !BCC_EOS
00039                                           ! 26    Bit16u OemStringPtr_Off;
00040                                           !BCC_EOS
00041                                           ! 27    Bit16u OemStringPtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 28    Bit8u Capabilities[4];
00044                                           !BCC_EOS
00045                                           ! 29    Bit16u VideoModePtr_Off;
00046                                           !BCC_EOS
00047                                           ! 30    Bit16u VideoModePtr_Seg;
00048                                           !BCC_EOS
00049                                           ! 31    Bit16u TotalMemory;
00050                                           !BCC_EOS
00051                                           ! 32    Bit16u OemSoftwareRev;
00052                                           !BCC_EOS
00053                                           ! 33    Bit16u OemVendorNamePtr_Off;
00054                                           !BCC_EOS
00055                                           ! 34    Bit16u OemVendorNamePtr_Seg;
00056                                           !BCC_EOS
00057                                           ! 35    Bit16u OemProductNamePtr_Off;
00058                                           !BCC_EOS
00059                                           ! 36    Bit16u OemProductNamePtr_Seg;
00060                                           !BCC_EOS
00061                                           ! 37    Bit16u OemProductRevPtr_Off;
00062                                           !BCC_EOS
00063                                           ! 38    Bit16u OemProductRevPtr_Seg;
00064                                           !BCC_EOS
00065                                           ! 39    Bit16u Reserved[111];
00066                                           !BCC_EOS
00067                                           ! 40    Bit8u OemData[256];
00068                                           !BCC_EOS
00069                                           ! 41 } VbeInfoBlock;
00070                                           !BCC_EOS
00071                                           ! 42 # 46
00072                                           ! 46 typedef struct ModeInfoBlockCompact
00073                                           ! 47 {
00074                                           ! 48 
00075                                           ! 49    Bit16u ModeAttributes;
00076                                           !BCC_EOS
00077                                           ! 50    Bit8u WinAAttributes;
00078                                           !BCC_EOS
00079                                           ! 51    Bit8u WinBAttributes;
00080                                           !BCC_EOS
00081                                           ! 52    Bit16u WinGranularity;
00082                                           !BCC_EOS
00083                                           ! 53    Bit16u WinSize;
00084                                           !BCC_EOS
00085                                           ! 54    Bit16u WinASegment;
00086                                           !BCC_EOS
00087                                           ! 55    Bit16u WinBSegment;
00088                                           !BCC_EOS
00089                                           ! 56    Bit32u WinFuncPtr;
00090                                           !BCC_EOS
00091                                           ! 57    Bit16u BytesPerScanLine;
00092                                           !BCC_EOS
00093                                           ! 58 
00094                                           ! 59    Bit16u XResolution;
00095                                           !BCC_EOS
00096                                           ! 60    Bit16u YResolution;
00097                                           !BCC_EOS
00098                                           ! 61    Bit8u XCharSize;
00099                                           !BCC_EOS
00100                                           ! 62    Bit8u YCharSize;
00101                                           !BCC_EOS
00102                                           ! 63    Bit8u NumberOfPlanes;
00103                                           !BCC_EOS
00104                                           ! 64    Bit8u BitsPerPixel;
00105                                           !BCC_EOS
00106                                           ! 65    Bit8u NumberOfBanks;
00107                                           !BCC_EOS
00108                                           ! 66    Bit8u MemoryModel;
00109                                           !BCC_EOS
00110                                           ! 67    Bit8u BankSize;
00111                                           !BCC_EOS
00112                                           ! 68    Bit8u NumberOfImagePages;
00113                                           !BCC_EOS
00114                                           ! 69    Bit8u Reserved_page;
00115                                           !BCC_EOS
00116                                           ! 70 
00117                                           ! 71    Bit8u RedMaskSize;
00118                                           !BCC_EOS
00119                                           ! 72    Bit8u RedFieldPosition;
00120                                           !BCC_EOS
00121                                           ! 73    Bit8u GreenMaskSize;
00122                                           !BCC_EOS
00123                                           ! 74    Bit8u GreenFieldPosition;
00124                                           !BCC_EOS
00125                                           ! 75    Bit8u BlueMaskSize;
00126                                           !BCC_EOS
00127                                           ! 76    Bit8u BlueFieldPosition;
00128                                           !BCC_EOS
00129                                           ! 77    Bit8u RsvdMaskSize;
00130                                           !BCC_EOS
00131                                           ! 78    Bit8u RsvdFieldPosition;
00132                                           !BCC_EOS
00133                                           ! 79    Bit8u DirectColorModeInfo;
00134                                           !BCC_EOS
00135                                           ! 80 
00136                                           ! 81    Bit32u PhysBasePtr;
00137                                           !BCC_EOS
00138                                           ! 82    Bit32u OffScreenMemOffset;
00139                                           !BCC_EOS
00140                                           ! 83    Bit16u OffScreenMemSize;
00141                                           !BCC_EOS
00142                                           ! 84 
00143                                           ! 85    Bit16u LinBytesPerScanLine;
00144                                           !BCC_EOS
00145                                           ! 86    Bit8u BnkNumberOfPages;
00146                                           !BCC_EOS
00147                                           ! 87    Bit8u LinNumberOfPages;
00148                                           !BCC_EOS
00149                                           ! 88    Bit8u LinRedMaskSize;
00150                                           !BCC_EOS
00151                                           ! 89    Bit8u LinRedFieldPosition;
00152                                           !BCC_EOS
00153                                           ! 90    Bit8u LinGreenMaskSize;
00154                                           !BCC_EOS
00155                                           ! 91 
00156                                           ! 91    Bit8u LinGreenFieldPosition;
00157                                           !BCC_EOS
00158                                           ! 92    Bit8u LinBlueMaskSize;
00159                                           !BCC_EOS
00160                                           ! 93    Bit8u LinBlueFieldPosition;
00161                                           !BCC_EOS
00162                                           ! 94    Bit8u LinRsvdMaskSize;
00163                                           !BCC_EOS
00164                                           ! 95    Bit8u LinRsvdFieldPosition;
00165                                           !BCC_EOS
00166                                           ! 96    Bit32u MaxPixelClock;
00167                                           !BCC_EOS
00168                                           ! 97 
00169                                           ! 98 } ModeInfoBlockCompact;
00170                                           !BCC_EOS
00171                                           ! 99 
00172                                           ! 100 typedef struct ModeInfoBlock
00173                                           ! 101 {
00174                                           ! 102 
00175                                           ! 103    Bit16u ModeAttributes;
00176                                           !BCC_EOS
00177                                           ! 104    Bit8u WinAAttributes;
00178                                           !BCC_EOS
00179                                           ! 105    Bit8u WinBAttributes;
00180                                           !BCC_EOS
00181                                           ! 106    Bit16u WinGranularity;
00182                                           !BCC_EOS
00183                                           ! 107    Bit16u WinSize;
00184                                           !BCC_EOS
00185                                           ! 108    Bit16u WinASegment;
00186                                           !BCC_EOS
00187                                           ! 109    Bit16u WinBSegment;
00188                                           !BCC_EOS
00189                                           ! 110    Bit32u WinFuncPtr;
00190                                           !BCC_EOS
00191                                           ! 111    Bit16u BytesPerScanLine;
00192                                           !BCC_EOS
00193                                           ! 112 
00194                                           ! 113    Bit16u XResolution;
00195                                           !BCC_EOS
00196                                           ! 114    Bit16u YResolution;
00197                                           !BCC_EOS
00198                                           ! 115    Bit8u XCharSize;
00199                                           !BCC_EOS
00200                                           ! 116    Bit8u YCharSize;
00201                                           !BCC_EOS
00202                                           ! 117    Bit8u NumberOfPlanes;
00203                                           !BCC_EOS
00204                                           ! 118    Bit8u BitsPerPixel;
00205                                           !BCC_EOS
00206                                           ! 119    Bit8u NumberOfBanks;
00207                                           !BCC_EOS
00208                                           ! 120    Bit8u MemoryModel;
00209                                           !BCC_EOS
00210                                           ! 121    Bit8u BankSize;
00211                                           !BCC_EOS
00212                                           ! 122    Bit8u NumberOfImagePages;
00213                                           !BCC_EOS
00214                                           ! 123    Bit8u Reserved_page;
00215                                           !BCC_EOS
00216                                           ! 124 
00217                                           ! 125    Bit8u RedMaskSize;
00218                                           !BCC_EOS
00219                                           ! 126    Bit8u RedFieldPosition;
00220                                           !BCC_EOS
00221                                           ! 127    Bit8u GreenMaskSize;
00222                                           !BCC_EOS
00223                                           ! 128    Bit8u GreenFieldPosition;
00224                                           !BCC_EOS
00225                                           ! 129    Bit8u BlueMaskSize;
00226                                           !BCC_EOS
00227                                           ! 130    Bit8u BlueFieldPosition;
00228                                           !BCC_EOS
00229                                           ! 131    Bit8u RsvdMaskSize;
00230                                           !BCC_EOS
00231                                           ! 132    Bit8u RsvdFieldPosition;
00232                                           !BCC_EOS
00233                                           ! 133    Bit8u DirectColorModeInfo;
00234                                           !BCC_EOS
00235                                           ! 134 
00236                                           ! 135    Bit32u PhysBasePtr;
00237                                           !BCC_EOS
00238                                           ! 136    Bit32u OffScreenMemOffset;
00239                                           !BCC_EOS
00240                                           ! 137    Bit16u OffScreenMemSize;
00241                                           !BCC_EOS
00242                                           ! 138 
00243                                           ! 139    Bit16u LinBytesPerScanLine;
00244                                           !BCC_EOS
00245                                           ! 140    Bit8u BnkNumberOfPages;
00246                                           !BCC_EOS
00247                                           ! 141    Bit8u LinNumberOfPages;
00248                                           !BCC_EOS
00249                                           ! 142    Bit8u LinRedMaskSize;
00250                                           !BCC_EOS
00251                                           ! 143    Bit8u LinRedFieldPosition;
00252                                           !BCC_EOS
00253                                           ! 144    Bit8u LinGreenMaskSize;
00254                                           !BCC_EOS
00255                                           ! 145    Bit8u LinGreenFieldPosition;
00256                                           !BCC_EOS
00257                                           ! 146    Bit8u LinBlueMaskSize;
00258                                           !BCC_EOS
00259                                           ! 147    Bit8u LinBlueFieldPosition;
00260                                           !BCC_EOS
00261                                           ! 148    Bit8u LinRsvdMaskSize;
00262                                           !BCC_EOS
00263                                           ! 149    Bit8u LinRsvdFieldPosition;
00264                                           !BCC_EOS
00265                                           ! 150    Bit32u MaxPixelClock;
00266                                           !BCC_EOS
00267                                           ! 151    Bit8u Reserved[189];
00268                                           !BCC_EOS
00269                                           ! 152 } ModeInfoBlock;
00270                                           !BCC_EOS
00271                                           ! 153 
00272                                           ! 154 typedef struct ModeInfoListItem
00273                                           ! 155 {
00274                                           ! 156   Bit16u mode;
00275                                           !BCC_EOS
00276                                           ! 157   ModeInfoBlockCompact info;
00277                                           !BCC_EOS
00278                                           ! 158 } ModeInfoListItem;
00279                                           !BCC_EOS
00280                                           ! 159 static Bit8u read_byte();
00281                                           !BCC_EOS
00282                                           ! 160 static Bit16u read_word();
00283                                           !BCC_EOS
00284                                           ! 161 static void write_byte();
00285                                           !BCC_EOS
00286                                           ! 162 static void write_word();
00287                                           !BCC_EOS
00288                                           ! 163 static Bit8u inb();
00289                                           !BCC_EOS
00290                                           ! 164 static Bit16u inw();
00291                                           !BCC_EOS
00292                                           ! 165 static void outb();
00293                                           !BCC_EOS
00294                                           ! 166 static void outw();
00295                                           !BCC_EOS
00296                                           ! 167 static Bit16u get_SS();
00297                                           !BCC_EOS
00298                                           ! 168 static void printf();
00299                                           !BCC_EOS
00300                                           ! 169 static void unimplemented();
00301                                           !BCC_EOS
00302                                           ! 170 static void unknown();
00303                                           !BCC_EOS
00304                                           ! 171 static Bit8u find_vga_entry();
00305                                           !BCC_EOS
00306                                           ! 172 static void memsetb();
00307                                           !BCC_EOS
00308                                           ! 173 static void memsetw();
00309                                           !BCC_EOS
00310                                           ! 174 static void memcpyb();
00311                                           !BCC_EOS
00312                                           ! 175 static void memcpyw();
00313                                           !BCC_EOS
00314                                           ! 176 static void biosfn_set_video_mode();
00315                                           !BCC_EOS
00316                                           ! 177 static void biosfn_set_cursor_shape();
00317                                           !BCC_EOS
00318                                           ! 178 static void biosfn_set_cursor_pos();
00319                                           !BCC_EOS
00320                                           ! 179 static void biosfn_get_cursor_pos
00321                                           ! 179 ();
00322                                           !BCC_EOS
00323                                           ! 180 static void biosfn_set_active_page();
00324                                           !BCC_EOS
00325                                           ! 181 static void biosfn_scroll();
00326                                           !BCC_EOS
00327                                           ! 182 static void biosfn_read_char_attr();
00328                                           !BCC_EOS
00329                                           ! 183 static void biosfn_write_char_attr();
00330                                           !BCC_EOS
00331                                           ! 184 static void biosfn_write_char_only();
00332                                           !BCC_EOS
00333                                           ! 185 static void biosfn_write_pixel();
00334                                           !BCC_EOS
00335                                           ! 186 static void biosfn_read_pixel();
00336                                           !BCC_EOS
00337                                           ! 187 static void biosfn_write_teletype();
00338                                           !BCC_EOS
00339                                           ! 188 static void biosfn_perform_gray_scale_summing();
00340                                           !BCC_EOS
00341                                           ! 189 static void biosfn_load_text_user_pat();
00342                                           !BCC_EOS
00343                                           ! 190 static void biosfn_load_text_8_14_pat();
00344                                           !BCC_EOS
00345                                           ! 191 static void biosfn_load_text_8_8_pat();
00346                                           !BCC_EOS
00347                                           ! 192 static void biosfn_load_text_8_16_pat();
00348                                           !BCC_EOS
00349                                           ! 193 static void biosfn_load_gfx_8_8_chars();
00350                                           !BCC_EOS
00351                                           ! 194 static void biosfn_load_gfx_user_chars();
00352                                           !BCC_EOS
00353                                           ! 195 static void biosfn_load_gfx_8_14_chars();
00354                                           !BCC_EOS
00355                                           ! 196 static void biosfn_load_gfx_8_8_dd_chars();
00356                                           !BCC_EOS
00357                                           ! 197 static void biosfn_load_gfx_8_16_chars();
00358                                           !BCC_EOS
00359                                           ! 198 static void biosfn_get_font_info();
00360                                           !BCC_EOS
00361                                           ! 199 static void biosfn_alternate_prtsc();
00362                                           !BCC_EOS
00363                                           ! 200 static void biosfn_switch_video_interface();
00364                                           !BCC_EOS
00365                                           ! 201 static void biosfn_enable_video_refresh_control();
00366                                           !BCC_EOS
00367                                           ! 202 static void biosfn_write_string();
00368                                           !BCC_EOS
00369                                           ! 203 static void biosfn_read_state_info();
00370                                           !BCC_EOS
00371                                           ! 204 static void biosfn_read_video_state_size();
00372                                           !BCC_EOS
00373                                           ! 205 static Bit16u biosfn_save_video_state();
00374                                           !BCC_EOS
00375                                           ! 206 static Bit16u biosfn_restore_video_state();
00376                                           !BCC_EOS
00377                                           ! 207 extern Bit8u video_save_pointer_table[];
00378                                           !BCC_EOS
00379                                           ! 208 #asm
00380                                           !BCC_ASM
00381                                           MACRO SET_INT_VECTOR
00382                                             push ds
00383                                             xor ax, ax
00384                                             mov ds, ax
00385                                             mov ax, ?3
00386                                             mov ?1*4, ax
00387                                             mov ax, ?2
00388                                             mov ?1*4+2, ax
00389                                             pop ds
00390                                           MEND
00391                                           ! 219 endasm
00392                                           !BCC_ENDASM
00393                                           ! 220 #asm
00394                                           !BCC_ASM
00395                                           
00396 0000                                      .rom
00397 0000                                      .org 0
00398                                           use16 386
00399                       00000000            vgabios_start:
00400 0000                        55            .byte 0x55, 0xaa
00401 0002                        40            .byte 0x40
00402                       00000003            vgabios_entry_point:
00403 0003           E9         00FE              jmp vgabios_init_func
00404 001E                                      .org 0x1e
00405 001E                        49            .ascii "IBM"
00406 0021                        00            .byte 0x00
00407                       00000022            vgabios_name:
00408 0022                        50            .ascii "Plex86/Bochs VGABios"
00409 0036                        20            .ascii " "
00410 0037                        00            .byte 0x00
00411                       00000038            vgabios_version:
00412 0038                        74            .ascii "tryout"
00413 003E                        20            .ascii " "
00414                       0000003F            vgabios_date:
00415 003F                        30            .ascii "08 Dec 2011"
00416 004A                        0A            .byte 0x0a,0x0d
00417 004C                        00            .byte 0x00
00418                       0000004D            vgabios_copyright:
00419 004D                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00420 0076                        0A            .byte 0x0a,0x0d
00421 0078                        00            .byte 0x00
00422                       00000079            vgabios_license:
00423 0079                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00424 00A9                        0A            .byte 0x0a,0x0d
00425 00AB                        0A            .byte 0x0a,0x0d
00426 00AD                        00            .byte 0x00
00427                       000000AE            vgabios_website:
00428 00AE                        50            .ascii "Please visit :"
00429 00BC                        0A            .byte 0x0a,0x0d
00430                                           ;;.ascii " . http://www.plex86.org"
00431                                           ;;.byte 0x0a,0x0d
00432 00BE                        20            .ascii " . http://bochs.sourceforge.net"
00433 00DD                        0A            .byte 0x0a,0x0d
00434 00DF                        20            .ascii " . http://www.nongnu.org/vgabios"
00435 00FF                        0A            .byte 0x0a,0x0d
00436 0101                        0A            .byte 0x0a,0x0d
00437 0103                        00            .byte 0x00
00438                                           ;; ============================================================================================
00439                                           ;;
00440                                           ;; Init Entry point
00441                                           ;;
00442                                           ;; ============================================================================================
00443                       00000104            vgabios_init_func:
00444                                           ;; init vga card
00445 0104           E8         3465              call init_vga_card
00446                                           ;; init basic bios vars
00447 0107           E8         348D              call init_bios_area
00448                                           ;; init vbe functions
00449 010A           E8         98A4              call vbe_init
00450                                           ;; set int10 vect
00451                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   010D           1E                           push ds
 +a   010E           31C0                         xor ax, ax
 +a   0110           8ED8                         mov ds, ax
 +a   0112           B8                   012E    mov ax,  #vgabios_int10_handler
 +a   0115           A3         0040              mov 0x10*4, ax
 +a   0118           B8                   C000    mov ax,  #0xC000
 +a   011B           A3         0042              mov 0x10*4+2, ax
 +a   011E           1F                           pop ds
00452                                           ;; display splash screen
00453 011F           E8         34C9              call _display_splash_screen
00454                                           ;; init video mode and clear the screen
00455 0122           B8                   0003    mov ax,#0x0003
00456 0125           CD                     10    int #0x10
00457                                           ;; show info
00458 0127           E8         34C2              call _display_info
00459                                           ;; show vbe info
00460 012A           E8         98B2              call vbe_display_info
00461 012D           CB                           retf
00462                                           ! 288 endasm
00463                                           !BCC_ENDASM
00464                                           ! 289 #asm
00465                                           !BCC_ASM
00466                       0000012E            vgabios_int10_handler:
00467 012E           9C                           pushf
00468 012F           06                           push es
00469 0130           1E                           push ds
00470 0131           60                           pusha
00471 0132           BB                   C000    mov bx, #0xc000
00472 0135           8EDB                         mov ds, bx
00473 0137           E8         34F7              call _int10_debugmsg
00474 013A           61                           popa
00475 013B           1F                           pop ds
00476 013C           07                           pop es
00477 013D           80FC                   0F    cmp ah, #0x0f
00478 0140           75           06              jne int10_test_1A
00479 0142           E8         619C              call biosfn_get_video_mode
00480 0145           E9         00BC              jmp int10_end
00481                       00000148            int10_test_1A:
00482 0148           80FC                   1A    cmp ah, #0x1a
00483 014B           75           06              jne int10_test_0B
00484 014D           E8         6D40              call biosfn_group_1A
00485 0150           E9         00B1              jmp int10_end
00486                       00000153            int10_test_0B:
00487 0153           80FC                   0B    cmp ah, #0x0b
00488 0156           75           06              jne int10_test_1103
00489 0158           E8         589C              call biosfn_group_0B
00490 015B           E9         00A6              jmp int10_end
00491                       0000015E            int10_test_1103:
00492 015E           3D                   1103    cmp ax, #0x1103
00493 0161           75           06              jne int10_test_12
00494 0163           E8         6879              call biosfn_set_text_block_specifier
00495 0166           E9         009B              jmp int10_end
00496                       00000169            int10_test_12:
00497 0169           80FC                   12    cmp ah, #0x12
00498 016C           75           3E              jne int10_test_101B
00499 016E           80FB                   10    cmp bl, #0x10
00500 0171           75           06              jne int10_test_BL30
00501 0173           E8         6AF7              call biosfn_get_ega_info
00502 0176           E9         008B              jmp int10_end
00503                       00000179            int10_test_BL30:
00504 0179           80FB                   30    cmp bl, #0x30
00505 017C           75           06              jne int10_test_BL31
00506 017E           E8         6B17              call biosfn_select_vert_res
00507 0181           E9         0080              jmp int10_end
00508                       00000184            int10_test_BL31:
00509 0184           80FB                   31    cmp bl, #0x31
00510 0187           75           05              jne int10_test_BL32
00511 0189           E8         6B95              call biosfn_enable_default_palette_loading
00512 018C           EB           76              jmp int10_end
00513                       0000018E            int10_test_BL32:
00514 018E           80FB                   32    cmp bl, #0x32
00515 0191           75           05              jne int10_test_BL33
00516 0193           E8         6BAD              call biosfn_enable_video_addressing
00517 0196           EB           6C              jmp int10_end
00518                       00000198            int10_test_BL33:
00519 0198           80FB                   33    cmp bl, #0x33
00520 019B           75           05              jne int10_test_BL34
00521 019D           E8         6BC1              call biosfn_enable_grayscale_summing
00522 01A0           EB           62              jmp int10_end
00523                       000001A2            int10_test_BL34:
00524 01A2           80FB                   34    cmp bl, #0x34
00525 01A5           75           4F              jne int10_normal
00526 01A7           E8         6BDB              call biosfn_enable_cursor_emulation
00527 01AA           EB           58              jmp int10_end
00528                       000001AC            int10_test_101B:
00529 01AC           3D                   101B    cmp ax, #0x101b
00530 01AF           74           45              je int10_normal
00531 01B1           80FC                   10    cmp ah, #0x10
00532 01B4           75           05              jne int10_test_4F
00533                                           
00534 01B6           E8         614F              call biosfn_group_10
00535 01B9           EB           49              jmp int10_end
00536                                           
00537                       000001BB            int10_test_4F:
00538 01BB           80FC                   4F    cmp ah, #0x4f
00539 01BE           75           36              jne int10_normal
00540 01C0           3C                     03    cmp al, #0x03
00541 01C2           75           05              jne int10_test_vbe_05
00542 01C4           E8         9DC2              call vbe_biosfn_return_current_mode
00543 01C7           EB           3B              jmp int10_end
00544                       000001C9            int10_test_vbe_05:
00545 01C9           3C                     05    cmp al, #0x05
00546 01CB           75           05              jne int10_test_vbe_06
00547 01CD           E8         A0B4              call vbe_biosfn_display_window_control
00548 01D0           EB           32              jmp int10_end
00549                       000001D2            int10_test_vbe_06:
00550 01D2           3C                     06    cmp al, #0x06
00551 01D4           75           05              jne int10_test_vbe_07
00552 01D6           E8         A0D8              call vbe_biosfn_set_get_logical_scan_line_length
00553 01D9           EB           29              jmp int10_end
00554                       000001DB            int10_test_vbe_07:
00555 01DB           3C                     07    cmp al, #0x07
00556 01DD           75           05              jne int10_test_vbe_08
00557 01DF           E8         A11C              call vbe_biosfn_set_get_display_start
00558 01E2           EB           20              jmp int10_end
00559                       000001E4            int10_test_vbe_08:
00560 01E4           3C                     08    cmp al, #0x08
00561 01E6           75           05              jne int10_test_vbe_0A
00562 01E8           E8         A141              call vbe_biosfn_set_get_dac_palette_format
00563 01EB           EB           17              jmp int10_end
00564                       000001ED            int10_test_vbe_0A:
00565 01ED           3C                     0A    cmp al, #0x0A
00566 01EF           75           05              jne int10_normal
00567 01F1           E8         A170              call vbe_biosfn_return_protected_mode_interface
00568 01F4           EB           0E              jmp int10_end
00569                                           
00570                                           
00571                       000001F6            int10_normal:
00572 01F6           06                           push es
00573 01F7           1E                           push ds
00574 01F8           60                           pusha
00575                                           
00576                                           ;; We have to set ds to access the right data segment
00577 01F9           BB                   C000    mov bx, #0xc000
00578 01FC           8EDB                         mov ds, bx
00579 01FE           E8         3461              call _int10_func
00580                                           
00581 0201           61                           popa
00582 0202           1F                           pop ds
00583 0203           07                           pop es
00584                       00000204            int10_end:
00585 0204           9D                           popf
00586 0205           CF                           iret
00587                                           ! 411 endasm
00588                                           !BCC_ENDASM
00589                                           ! 412 typedef struct
00590                                           ! 413 {Bit8u svgamode;
00591                                           !BCC_EOS
00592                                           ! 414  Bit8u class;
00593                                           !BCC_EOS
00594                                           ! 415  Bit8u memmodel;
00595                                           !BCC_EOS
00596                                           ! 416  Bit8u pixbits;
00597                                           !BCC_EOS
00598                                           ! 417  Bit16u sstart;
00599                                           !BCC_EOS
00600                                           ! 418  Bit8u pelmask;
00601                                           !BCC_EOS
00602                                           ! 419  Bit8u dacmodel;
00603                                           !BCC_EOS
00604                                           ! 420 } VGAMODES;
00605                                           !BCC_EOS
00606                                           ! 421 static VGAMODES vga_modes[15 +1]=
00607                                           ! 422 {
00608                                           
00609                       00000206            _vga_modes:
00610                                           ! 423  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00611 0206                        00            .byte	0
00612 0207                        00            .byte	0
00613 0208                        00            .byte	0
00614 0209                        04            .byte	4
00615 020A                      B800            .word	$B800
00616 020C                        FF            .byte	$FF
00617 020D                        02            .byte	2
00618                                           ! 424  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00619 020E                        01            .byte	1
00620 020F                        00            .byte	0
00621 0210                        00            .byte	0
00622 0211                        04            .byte	4
00623 0212                      B800            .word	$B800
00624 0214                        FF            .byte	$FF
00625 0215                        02            .byte	2
00626                                           ! 425  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00627 0216                        02            .byte	2
00628 0217                        00            .byte	0
00629 0218                        00            .byte	0
00630 0219                        04            .byte	4
00631 021A                      B800            .word	$B800
00632 021C                        FF            .byte	$FF
00633 021D                        02            .byte	2
00634                                           ! 426  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00635 021E                        03            .byte	3
00636 021F                        00            .byte	0
00637 0220                        00            .byte	0
00638 0221                        04            .byte	4
00639 0222                      B800            .word	$B800
00640 0224                        FF            .byte	$FF
00641 0225                        02            .byte	2
00642                                           ! 427  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00643 0226                        04            .byte	4
00644 0227                        01            .byte	1
00645 0228                        02            .byte	2
00646 0229                        02            .byte	2
00647 022A                      B800            .word	$B800
00648 022C                        FF            .byte	$FF
00649 022D                        01            .byte	1
00650                                           ! 428  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00651 022E                        05            .byte	5
00652 022F                        01            .byte	1
00653 0230                        02            .byte	2
00654 0231                        02            .byte	2
00655 0232                      B800            .word	$B800
00656 0234                        FF            .byte	$FF
00657 0235                        01            .byte	1
00658                                           ! 429  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00659 0236                        06            .byte	6
00660 0237                        01            .byte	1
00661 0238                        02            .byte	2
00662 0239                        01            .byte	1
00663 023A                      B800            .word	$B800
00664 023C                        FF            .byte	$FF
00665 023D                        01            .byte	1
00666                                           ! 430  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00667 023E                        07            .byte	7
00668 023F                        00            .byte	0
00669 0240                        01            .byte	1
00670 0241                        04            .byte	4
00671 0242                      B000            .word	$B000
00672 0244                        FF            .byte	$FF
00673 0245                        00            .byte	0
00674                                           ! 431  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00675 0246                        0D            .byte	$D
00676 0247                        01            .byte	1
00677 0248                        04            .byte	4
00678 0249                        04            .byte	4
00679 024A                      A000            .word	$A000
00680 024C                        FF            .byte	$FF
00681 024D                        01            .byte	1
00682                                           ! 432  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00683 024E                        0E            .byte	$E
00684 024F                        01            .byte	1
00685 0250                        04            .byte	4
00686 0251                        04            .byte	4
00687 0252                      A000            .word	$A000
00688 0254                        FF            .byte	$FF
00689 0255                        01            .byte	1
00690                                           ! 433  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00691 0256                        0F            .byte	$F
00692 0257                        01            .byte	1
00693 0258                        03            .byte	3
00694 0259                        01            .byte	1
00695 025A                      A000            .word	$A000
00696 025C                        FF            .byte	$FF
00697 025D                        00            .byte	0
00698                                           ! 434  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00699 025E                        10            .byte	$10
00700 025F                        01            .byte	1
00701 0260                        04            .byte	4
00702 0261                        04            .byte	4
00703 0262                      A000            .word	$A000
00704 0264                        FF            .byte	$FF
00705 0265                        02            .byte	2
00706                                           ! 435  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00707 0266                        11            .byte	$11
00708 0267                        01            .byte	1
00709 0268                        03            .byte	3
00710 0269                        01            .byte	1
00711 026A                      A000            .word	$A000
00712 026C                        FF            .byte	$FF
00713 026D                        02            .byte	2
00714                                           ! 436  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00715 026E                        12            .byte	$12
00716 026F                        01            .byte	1
00717 0270                        04            .byte	4
00718 0271                        04            .byte	4
00719 0272                      A000            .word	$A000
00720 0274                        FF            .byte	$FF
00721 0275                        02            .byte	2
00722                                           ! 437  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00723 0276                        13            .byte	$13
00724 0277                        01            .byte	1
00725 0278                        05            .byte	5
00726 0279                        08            .byte	8
00727 027A                      A000            .word	$A000
00728 027C                        FF            .byte	$FF
00729 027D                        03            .byte	3
00730                                           ! 438  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00731 027E                        6A            .byte	$6A
00732 027F                        01            .byte	1
00733 0280                        04            .byte	4
00734 0281                        04            .byte	4
00735 0282                      A000            .word	$A000
00736 0284                        FF            .byte	$FF
00737 0285                        02            .byte	2
00738                                           ! 439 };
00739                                           !BCC_EOS
00740                                           ! 440 static Bit8u line_to_vpti[15 +1]={
00741                       00000286            _line_to_vpti:
00742                                           ! 441     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00743 0286                        17            .byte	$17
00744 0287                        17            .byte	$17
00745 0288                        18            .byte	$18
00746 0289                        18            .byte	$18
00747 028A                        04            .byte	4
00748 028B                        05            .byte	5
00749 028C                        06            .byte	6
00750 028D                        07            .byte	7
00751                                           ! 442     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00752 028E                        0D            .byte	$D
00753 028F                        0E            .byte	$E
00754 0290                        11            .byte	$11
00755 0291                        12            .byte	$12
00756 0292                        1A            .byte	$1A
00757 0293                        1B            .byte	$1B
00758 0294                        1C            .byte	$1C
00759 0295                        1D            .byte	$1D
00760                                           ! 443 };
00761                                           !BCC_EOS
00762                                           ! 444 static Bit8u dac_regs[3 +1]=
00763                                           ! 445 {0x3f,0x3f,0x3f,0xff};
00764                       00000296            _dac_regs:
00765 0296                        3F            .byte	$3F
00766 0297                        3F            .byte	$3F
00767 0298                        3F            .byte	$3F
00768 0299                        FF            .byte	$FF
00769                                           !BCC_EOS
00770                                           ! 446 typedef struct {
00771                                           ! 447     Bit8u twidth;
00772                                           !BCC_EOS
00773                                           ! 448     Bit8u theightm1;
00774                                           !BCC_EOS
00775                                           ! 449     Bit8u cheight;
00776                                           !BCC_EOS
00777                                           ! 450     Bit8u slen
00778                                           ! 450 gth_l;
00779                                           !BCC_EOS
00780                                           ! 451     Bit8u slength_h;
00781                                           !BCC_EOS
00782                                           ! 452     Bit8u sequ_regs[4];
00783                                           !BCC_EOS
00784                                           ! 453     Bit8u miscreg;
00785                                           !BCC_EOS
00786                                           ! 454     Bit8u crtc_regs[25];
00787                                           !BCC_EOS
00788                                           ! 455     Bit8u actl_regs[20];
00789                                           !BCC_EOS
00790                                           ! 456     Bit8u grdc_regs[9];
00791                                           !BCC_EOS
00792                                           ! 457 } VideoParamTableEntry;
00793                                           !BCC_EOS
00794                                           ! 458 static VideoParamTableEntry video_param_table[30] = {
00795                       0000029A            _video_param_table:
00796                                           ! 459 {
00797                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00798 029A                        00            .byte	0
00799 029B                        00            .byte	0
00800 029C                        00            .byte	0
00801 029D                        00            .byte	0
00802 029E                        00            .byte	0
00803 029F                        00            .byte	0
00804 02A0                        00            .byte	0
00805 02A1                        00            .byte	0
00806                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00807 02A2                        00            .byte	0
00808 02A3                        00            .byte	0
00809 02A4                        00            .byte	0
00810 02A5                        00            .byte	0
00811 02A6                        00            .byte	0
00812 02A7                        00            .byte	0
00813 02A8                        00            .byte	0
00814 02A9                        00            .byte	0
00815                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00816 02AA                        00            .byte	0
00817 02AB                        00            .byte	0
00818 02AC                        00            .byte	0
00819 02AD                        00            .byte	0
00820 02AE                        00            .byte	0
00821 02AF                        00            .byte	0
00822 02B0                        00            .byte	0
00823 02B1                        00            .byte	0
00824                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00825 02B2                        00            .byte	0
00826 02B3                        00            .byte	0
00827 02B4                        00            .byte	0
00828 02B5                        00            .byte	0
00829 02B6                        00            .byte	0
00830 02B7                        00            .byte	0
00831 02B8                        00            .byte	0
00832 02B9                        00            .byte	0
00833                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00834 02BA                        00            .byte	0
00835 02BB                        00            .byte	0
00836 02BC                        00            .byte	0
00837 02BD                        00            .byte	0
00838 02BE                        00            .byte	0
00839 02BF                        00            .byte	0
00840 02C0                        00            .byte	0
00841 02C1                        00            .byte	0
00842                                           ! 465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00843 02C2                        00            .byte	0
00844 02C3                        00            .byte	0
00845 02C4                        00            .byte	0
00846 02C5                        00            .byte	0
00847 02C6                        00            .byte	0
00848 02C7                        00            .byte	0
00849 02C8                        00            .byte	0
00850 02C9                        00            .byte	0
00851                                           ! 466  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00852 02CA                        00            .byte	0
00853 02CB                        00            .byte	0
00854 02CC                        00            .byte	0
00855 02CD                        00            .byte	0
00856 02CE                        00            .byte	0
00857 02CF                        00            .byte	0
00858 02D0                        00            .byte	0
00859 02D1                        00            .byte	0
00860                                           ! 467  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00861 02D2                        00            .byte	0
00862 02D3                        00            .byte	0
00863 02D4                        00            .byte	0
00864 02D5                        00            .byte	0
00865 02D6                        00            .byte	0
00866 02D7                        00            .byte	0
00867 02D8                        00            .byte	0
00868 02D9                        00            .byte	0
00869                                           ! 468 },
00870                                           ! 469 {
00871                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00872 02DA                        00            .byte	0
00873 02DB                        00            .byte	0
00874 02DC                        00            .byte	0
00875 02DD                        00            .byte	0
00876 02DE                        00            .byte	0
00877 02DF                        00            .byte	0
00878 02E0                        00            .byte	0
00879 02E1                        00            .byte	0
00880                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00881 02E2                        00            .byte	0
00882 02E3                        00            .byte	0
00883 02E4                        00            .byte	0
00884 02E5                        00            .byte	0
00885 02E6                        00            .byte	0
00886 02E7                        00            .byte	0
00887 02E8                        00            .byte	0
00888 02E9                        00            .byte	0
00889                                           ! 472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00890 02EA                        00            .byte	0
00891 02EB                        00            .byte	0
00892 02EC                        00            .byte	0
00893 02ED                        00            .byte	0
00894 02EE                        00            .byte	0
00895 02EF                        00            .byte	0
00896 02F0                        00            .byte	0
00897 02F1                        00            .byte	0
00898                                           ! 473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00899 02F2                        00            .byte	0
00900 02F3                        00            .byte	0
00901 02F4                        00            .byte	0
00902 02F5                        00            .byte	0
00903 02F6                        00            .byte	0
00904 02F7                        00            .byte	0
00905 02F8                        00            .byte	0
00906 02F9                        00            .byte	0
00907                                           ! 474  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00908 02FA                        00            .byte	0
00909 02FB                        00            .byte	0
00910 02FC                        00            .byte	0
00911 02FD                        00            .byte	0
00912 02FE                        00            .byte	0
00913 02FF                        00            .byte	0
00914 0300                        00            .byte	0
00915 0301                        00            .byte	0
00916                                           ! 475  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00917 0302                        00            .byte	0
00918 0303                        00            .byte	0
00919 0304                        00            .byte	0
00920 0305                        00            .byte	0
00921 0306                        00            .byte	0
00922 0307                        00            .byte	0
00923 0308                        00            .byte	0
00924 0309                        00            .byte	0
00925                                           ! 476  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00926 030A                        00            .byte	0
00927 030B                        00            .byte	0
00928 030C                        00            .byte	0
00929 030D                        00            .byte	0
00930 030E                        00            .byte	0
00931 030F                        00            .byte	0
00932 0310                        00            .byte	0
00933 0311                        00            .byte	0
00934                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00935 0312                        00            .byte	0
00936 0313                        00            .byte	0
00937 0314                        00            .byte	0
00938 0315                        00            .byte	0
00939 0316                        00            .byte	0
00940 0317                        00            .byte	0
00941 0318                        00            .byte	0
00942 0319                        00            .byte	0
00943                                           ! 478 },
00944                                           ! 479 {
00945                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00946 031A                        00            .byte	0
00947 031B                        00            .byte	0
00948 031C                        00            .byte	0
00949 031D                        00            .byte	0
00950 031E                        00            .byte	0
00951 031F                        00            .byte	0
00952 0320                        00            .byte	0
00953 0321                        00            .byte	0
00954                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00955 0322                        00            .byte	0
00956 0323                        00            .byte	0
00957 0324                        00            .byte	0
00958 0325                        00            .byte	0
00959 0326                        00            .byte	0
00960 0327                        00            .byte	0
00961 0328                        00            .byte	0
00962 0329                        00            .byte	0
00963                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00964 032A                        00            .byte	0
00965 032B                        00            .byte	0
00966 032C                        00            .byte	0
00967 032D                        00            .byte	0
00968 032E                        00            .byte	0
00969 032F                        00            .byte	0
00970 0330                        00            .byte	0
00971 0331                        00            .byte	0
00972                                           ! 483  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00973 0332                        00            .byte	0
00974 0333                        00            .byte	0
00975 0334                        00            .byte	0
00976 0335                        00            .byte	0
00977 0336                        00            .byte	0
00978 0337                        00            .byte	0
00979 0338                        00            .byte	0
00980 0339                        00            .byte	0
00981                                           ! 484  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00982 033A                        00            .byte	0
00983 033B                        00            .byte	0
00984 033C                        00            .byte	0
00985 033D                        00            .byte	0
00986 033E                        00            .byte	0
00987 033F                        00            .byte	0
00988 0340                        00            .byte	0
00989 0341                        00            .byte	0
00990                                           ! 485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00991 0342                        00            .byte	0
00992 0343                        00            .byte	0
00993 0344                        00            .byte	0
00994 0345                        00            .byte	0
00995 0346                        00            .byte	0
00996 0347                        00            .byte	0
00997 0348                        00            .byte	0
00998 0349                        00            .byte	0
00999                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01000 034A                        00            .byte	0
01001 034B                        00            .byte	0
01002 034C                        00            .byte	0
01003 034D                        00            .byte	0
01004 034E                        00            .byte	0
01005 034F                        00            .byte	0
01006 0350                        00            .byte	0
01007 0351                        00            .byte	0
01008                                           ! 487  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01009 0352                        00            .byte	0
01010 0353                        00            .byte	0
01011 0354                        00            .byte	0
01012 0355                        00            .byte	0
01013 0356                        00            .byte	0
01014 0357                        00            .byte	0
01015 0358                        00            .byte	0
01016 0359                        00            .byte	0
01017                                           ! 488 },
01018                                           ! 489 {
01019                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01020 035A                        00            .byte	0
01021 035B                        00            .byte	0
01022 035C                        00            .byte	0
01023 035D                        00            .byte	0
01024 035E                        00            .byte	0
01025 035F                        00            .byte	0
01026 0360                        00            .byte	0
01027 0361                        00            .byte	0
01028                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01029 0362                        00            .byte	0
01030 0363                        00            .byte	0
01031 0364                        00            .byte	0
01032 0365                        00            .byte	0
01033 0366                        00            .byte	0
01034 0367                        00            .byte	0
01035 0368                        00            .byte	0
01036 0369                        00            .byte	0
01037                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01038 036A                        00            .byte	0
01039 036B                        00            .byte	0
01040 036C                        00            .byte	0
01041 036D                        00            .byte	0
01042 036E                        00            .byte	0
01043 036F                        00            .byte	0
01044 0370                        00            .byte	0
01045 0371                        00            .byte	0
01046                                           ! 493  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01047 0372                        00            .byte	0
01048 0373                        00            .byte	0
01049 0374                        00            .byte	0
01050 0375                        00            .byte	0
01051 0376                        00            .byte	0
01052 0377                        00            .byte	0
01053 0378                        00            .byte	0
01054 0379                        00            .byte	0
01055                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01056 037A                        00            .byte	0
01057 037B                        00            .byte	0
01058 037C                        00            .byte	0
01059 037D                        00            .byte	0
01060 037E                        00            .byte	0
01061 037F                        00            .byte	0
01062 0380                        00            .byte	0
01063 0381                        00            .byte	0
01064                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01065 0382                        00            .byte	0
01066 0383                        00            .byte	0
01067 0384                        00            .byte	0
01068 0385                        00            .byte	0
01069 0386                        00            .byte	0
01070 0387                        00            .byte	0
01071 0388                        00            .byte	0
01072 0389                        00            .byte	0
01073                                           ! 496  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01074 038A                        00            .byte	0
01075 038B                        00            .byte	0
01076 038C                        00            .byte	0
01077 038D                        00            .byte	0
01078 038E                        00            .byte	0
01079 038F                        00            .byte	0
01080 0390                        00            .byte	0
01081 0391                        00            .byte	0
01082                                           ! 497  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01083 0392                        00            .byte	0
01084 0393                        00            .byte	0
01085 0394                        00            .byte	0
01086 0395                        00            .byte	0
01087 0396                        00            .byte	0
01088 0397                        00            .byte	0
01089 0398                        00            .byte	0
01090 0399                        00            .byte	0
01091                                           ! 498 },
01092                                           ! 499 {
01093                                           ! 500  40, 24, 8, 0x00, 0x08,
01094 039A                        28            .byte	$28
01095 039B                        18            .byte	$18
01096 039C                        08            .byte	8
01097 039D                        00            .byte	0
01098 039E                        08            .byte	8
01099                                           ! 501  0x09, 0x03, 0x00, 0x02,
01100 039F                        09            .byte	9
01101 03A0                        03            .byte	3
01102 03A1                        00            .byte	0
01103 03A2                        02            .byte	2
01104                                           ! 502  0x63,
01105 03A3                        63            .byte	$63
01106                                           ! 503  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01107 03A4                        2D            .byte	$2D
01108 03A5                        27            .byte	$27
01109 03A6                        28            .byte	$28
01110 03A7                        90            .byte	$90
01111 03A8                        2B            .byte	$2B
01112 03A9                        80            .byte	$80
01113 03AA                        BF            .byte	$BF
01114 03AB                        1F            .byte	$1F
01115                                           ! 504  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01116 03AC                        00            .byte	0
01117 03AD                        C1            .byte	$C1
01118 03AE                        00            .byte	0
01119 03AF                        00            .byte	0
01120 03B0                        00            .byte	0
01121 03B1                        00            .byte	0
01122 03B2                        00            .byte	0
01123 03B3                        00            .byte	0
01124                                           ! 505  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01125 03B4                        9C            .byte	$9C
01126 03B5                        8E            .byte	$8E
01127 03B6                        8F            .byte	$8F
01128 03B7                        14            .byte	$14
01129 03B8                        00            .byte	0
01130 03B9                        96            .byte	$96
01131 03BA                        B9            .byte	$B9
01132 03BB                        A2            .byte	$A2
01133                                           ! 506  0xff,
01134 03BC                        FF            .byte	$FF
01135                                           ! 507  0x00, 0x13, 0x15, 0x17, 
01136 03BD                        00            .byte	0
01137 03BE                        13            .byte	$13
01138 03BF                        15            .byte	$15
01139 03C0                        17            .byte	$17
01140                                           ! 507 0x02, 0x04, 0x06, 0x07,
01141 03C1                        02            .byte	2
01142 03C2                        04            .byte	4
01143 03C3                        06            .byte	6
01144 03C4                        07            .byte	7
01145                                           ! 508  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01146 03C5                        10            .byte	$10
01147 03C6                        11            .byte	$11
01148 03C7                        12            .byte	$12
01149 03C8                        13            .byte	$13
01150 03C9                        14            .byte	$14
01151 03CA                        15            .byte	$15
01152 03CB                        16            .byte	$16
01153 03CC                        17            .byte	$17
01154                                           ! 509  0x01, 0x00, 0x03, 0x00,
01155 03CD                        01            .byte	1
01156 03CE                        00            .byte	0
01157 03CF                        03            .byte	3
01158 03D0                        00            .byte	0
01159                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01160 03D1                        00            .byte	0
01161 03D2                        00            .byte	0
01162 03D3                        00            .byte	0
01163 03D4                        00            .byte	0
01164 03D5                        00            .byte	0
01165 03D6                        30            .byte	$30
01166 03D7                        0F            .byte	$F
01167 03D8                        0F            .byte	$F
01168 03D9                        FF            .byte	$FF
01169                                           ! 511 },
01170                                           ! 512 {
01171                                           ! 513  40, 24, 8, 0x00, 0x08,
01172 03DA                        28            .byte	$28
01173 03DB                        18            .byte	$18
01174 03DC                        08            .byte	8
01175 03DD                        00            .byte	0
01176 03DE                        08            .byte	8
01177                                           ! 514  0x09, 0x03, 0x00, 0x02,
01178 03DF                        09            .byte	9
01179 03E0                        03            .byte	3
01180 03E1                        00            .byte	0
01181 03E2                        02            .byte	2
01182                                           ! 515  0x63,
01183 03E3                        63            .byte	$63
01184                                           ! 516  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01185 03E4                        2D            .byte	$2D
01186 03E5                        27            .byte	$27
01187 03E6                        28            .byte	$28
01188 03E7                        90            .byte	$90
01189 03E8                        2B            .byte	$2B
01190 03E9                        80            .byte	$80
01191 03EA                        BF            .byte	$BF
01192 03EB                        1F            .byte	$1F
01193                                           ! 517  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01194 03EC                        00            .byte	0
01195 03ED                        C1            .byte	$C1
01196 03EE                        00            .byte	0
01197 03EF                        00            .byte	0
01198 03F0                        00            .byte	0
01199 03F1                        00            .byte	0
01200 03F2                        00            .byte	0
01201 03F3                        00            .byte	0
01202                                           ! 518  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01203 03F4                        9C            .byte	$9C
01204 03F5                        8E            .byte	$8E
01205 03F6                        8F            .byte	$8F
01206 03F7                        14            .byte	$14
01207 03F8                        00            .byte	0
01208 03F9                        96            .byte	$96
01209 03FA                        B9            .byte	$B9
01210 03FB                        A2            .byte	$A2
01211                                           ! 519  0xff,
01212 03FC                        FF            .byte	$FF
01213                                           ! 520  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01214 03FD                        00            .byte	0
01215 03FE                        13            .byte	$13
01216 03FF                        15            .byte	$15
01217 0400                        17            .byte	$17
01218 0401                        02            .byte	2
01219 0402                        04            .byte	4
01220 0403                        06            .byte	6
01221 0404                        07            .byte	7
01222                                           ! 521  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01223 0405                        10            .byte	$10
01224 0406                        11            .byte	$11
01225 0407                        12            .byte	$12
01226 0408                        13            .byte	$13
01227 0409                        14            .byte	$14
01228 040A                        15            .byte	$15
01229 040B                        16            .byte	$16
01230 040C                        17            .byte	$17
01231                                           ! 522  0x01, 0x00, 0x03, 0x00,
01232 040D                        01            .byte	1
01233 040E                        00            .byte	0
01234 040F                        03            .byte	3
01235 0410                        00            .byte	0
01236                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01237 0411                        00            .byte	0
01238 0412                        00            .byte	0
01239 0413                        00            .byte	0
01240 0414                        00            .byte	0
01241 0415                        00            .byte	0
01242 0416                        30            .byte	$30
01243 0417                        0F            .byte	$F
01244 0418                        0F            .byte	$F
01245 0419                        FF            .byte	$FF
01246                                           ! 524 },
01247                                           ! 525 {
01248                                           ! 526  80, 24, 8, 0x00, 0x10,
01249 041A                        50            .byte	$50
01250 041B                        18            .byte	$18
01251 041C                        08            .byte	8
01252 041D                        00            .byte	0
01253 041E                        10            .byte	$10
01254                                           ! 527  0x01, 0x01, 0x00, 0x06,
01255 041F                        01            .byte	1
01256 0420                        01            .byte	1
01257 0421                        00            .byte	0
01258 0422                        06            .byte	6
01259                                           ! 528  0x63,
01260 0423                        63            .byte	$63
01261                                           ! 529  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01262 0424                        5F            .byte	$5F
01263 0425                        4F            .byte	$4F
01264 0426                        50            .byte	$50
01265 0427                        82            .byte	$82
01266 0428                        54            .byte	$54
01267 0429                        80            .byte	$80
01268 042A                        BF            .byte	$BF
01269 042B                        1F            .byte	$1F
01270                                           ! 530  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01271 042C                        00            .byte	0
01272 042D                        C1            .byte	$C1
01273 042E                        00            .byte	0
01274 042F                        00            .byte	0
01275 0430                        00            .byte	0
01276 0431                        00            .byte	0
01277 0432                        00            .byte	0
01278 0433                        00            .byte	0
01279                                           ! 531  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01280 0434                        9C            .byte	$9C
01281 0435                        8E            .byte	$8E
01282 0436                        8F            .byte	$8F
01283 0437                        28            .byte	$28
01284 0438                        00            .byte	0
01285 0439                        96            .byte	$96
01286 043A                        B9            .byte	$B9
01287 043B                        C2            .byte	$C2
01288                                           ! 532  0xff,
01289 043C                        FF            .byte	$FF
01290                                           ! 533  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01291 043D                        00            .byte	0
01292 043E                        17            .byte	$17
01293 043F                        17            .byte	$17
01294 0440                        17            .byte	$17
01295 0441                        17            .byte	$17
01296 0442                        17            .byte	$17
01297 0443                        17            .byte	$17
01298 0444                        17            .byte	$17
01299                                           ! 534  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01300 0445                        17            .byte	$17
01301 0446                        17            .byte	$17
01302 0447                        17            .byte	$17
01303 0448                        17            .byte	$17
01304 0449                        17            .byte	$17
01305 044A                        17            .byte	$17
01306 044B                        17            .byte	$17
01307 044C                        17            .byte	$17
01308                                           ! 535  0x01, 0x00, 0x01, 0x00,
01309 044D                        01            .byte	1
01310 044E                        00            .byte	0
01311 044F                        01            .byte	1
01312 0450                        00            .byte	0
01313                                           ! 536  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01314 0451                        00            .byte	0
01315 0452                        00            .byte	0
01316 0453                        00            .byte	0
01317 0454                        00            .byte	0
01318 0455                        00            .byte	0
01319 0456                        00            .byte	0
01320 0457                        0D            .byte	$D
01321 0458                        0F            .byte	$F
01322 0459                        FF            .byte	$FF
01323                                           ! 537 },
01324                                           ! 538 {
01325                                           ! 539  80, 24, 16, 0x00, 0x10,
01326 045A                        50            .byte	$50
01327 045B                        18            .byte	$18
01328 045C                        10            .byte	$10
01329 045D                        00            .byte	0
01330 045E                        10            .byte	$10
01331                                           ! 540  0x00, 0x03, 0x00, 0x02,
01332 045F                        00            .byte	0
01333 0460                        03            .byte	3
01334 0461                        00            .byte	0
01335 0462                        02            .byte	2
01336                                           ! 541  0x66,
01337 0463                        66            .byte	$66
01338                                           ! 542  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01339 0464                        5F            .byte	$5F
01340 0465                        4F            .byte	$4F
01341 0466                        50            .byte	$50
01342 0467                        82            .byte	$82
01343 0468                        55            .byte	$55
01344 0469                        81            .byte	$81
01345 046A                        BF            .byte	$BF
01346 046B                        1F            .byte	$1F
01347                                           ! 543  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01348 046C                        00            .byte	0
01349 046D                        4F            .byte	$4F
01350 046E                        0D            .byte	$D
01351 046F                        0E            .byte	$E
01352 0470                        00            .byte	0
01353 0471                        00            .byte	0
01354 0472                        00            .byte	0
01355 0473                        00            .byte	0
01356                                           ! 544  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01357 0474                        9C            .byte	$9C
01358 0475                        8E            .byte	$8E
01359 0476                        8F            .byte	$8F
01360 0477                        28            .byte	$28
01361 0478                        0F            .byte	$F
01362 0479                        96            .byte	$96
01363 047A                        B9            .byte	$B9
01364 047B                        A3            .byte	$A3
01365                                           ! 545  0xff,
01366 047C                        FF            .byte	$FF
01367                                           ! 546  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01368 047D                        00            .byte	0
01369 047E                        08            .byte	8
01370 047F                        08            .byte	8
01371 0480                        08            .byte	8
01372 0481                        08            .byte	8
01373 0482                        08            .byte	8
01374 0483                        08            .byte	8
01375 0484                        08            .byte	8
01376                                           ! 547  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01377 0485                        10            .byte	$10
01378 0486                        18            .byte	$18
01379 0487                        18            .byte	$18
01380 0488                        18            .byte	$18
01381 0489                        18            .byte	$18
01382 048A                        18            .byte	$18
01383 048B                        18            .byte	$18
01384 048C                        18            .byte	$18
01385                                           ! 548  0x0e, 0x00, 0x0f, 0x08,
01386 048D                        0E            .byte	$E
01387 048E                        00            .byte	0
01388 048F                        0F            .byte	$F
01389 0490                        08            .byte	8
01390                                           ! 549  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01391 0491                        00            .byte	0
01392 0492                        00            .byte	0
01393 0493                        00            .byte	0
01394 0494                        00            .byte	0
01395 0495                        00            .byte	0
01396 0496                        10            .byte	$10
01397 0497                        0A            .byte	$A
01398 0498                        0F            .byte	$F
01399 0499                        FF            .byte	$FF
01400                                           ! 550 },
01401                                           ! 551 {
01402                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01403 049A                        00            .byte	0
01404 049B                        00            .byte	0
01405 049C                        00            .byte	0
01406 049D                        00            .byte	0
01407 049E                        00            .byte	0
01408 049F                        00            .byte	0
01409 04A0                        00            .byte	0
01410 04A1                        00            .byte	0
01411                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01412 04A2                        00            .byte	0
01413 04A3                        00            .byte	0
01414 04A4                        00            .byte	0
01415 04A5                        00            .byte	0
01416 04A6                        00            .byte	0
01417 04A7                        00            .byte	0
01418 04A8                        00            .byte	0
01419 04A9                        00            .byte	0
01420                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01421 04AA                        00            .byte	0
01422 04AB                        00            .byte	0
01423 04AC                        00            .byte	0
01424 04AD                        00            .byte	0
01425 04AE                        00            .byte	0
01426 04AF                        00            .byte	0
01427 04B0                        00            .byte	0
01428 04B1                        00            .byte	0
01429                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01430 04B2                        00            .byte	0
01431 04B3                        00            .byte	0
01432 04B4                        00            .byte	0
01433 04B5                        00            .byte	0
01434 04B6                        00            .byte	0
01435 04B7                        00            .byte	0
01436 04B8                        00            .byte	0
01437 04B9                        00            .byte	0
01438                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01439 04BA                        00            .byte	0
01440 04BB                        00            .byte	0
01441 04BC                        00            .byte	0
01442 04BD                        00            .byte	0
01443 04BE                        00            .byte	0
01444 04BF                        00            .byte	0
01445 04C0                        00            .byte	0
01446 04C1                        00            .byte	0
01447                                           ! 557  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01448 04C2                        00            .byte	0
01449 04C3                        00            .byte	0
01450 04C4                        00            .byte	0
01451 04C5                        00            .byte	0
01452 04C6                        00            .byte	0
01453 04C7                        00            .byte	0
01454 04C8                        00            .byte	0
01455 04C9                        00            .byte	0
01456                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01457 04CA                        00            .byte	0
01458 04CB                        00            .byte	0
01459 04CC                        00            .byte	0
01460 04CD                        00            .byte	0
01461 04CE                        00            .byte	0
01462 04CF                        00            .byte	0
01463 04D0                        00            .byte	0
01464 04D1                        00            .byte	0
01465                                           ! 559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01466 04D2                        00            .byte	0
01467 04D3                        00            .byte	0
01468 04D4                        00            .byte	0
01469 04D5                        00            .byte	0
01470 04D6                        00            .byte	0
01471 04D7                        00            .byte	0
01472 04D8                        00            .byte	0
01473 04D9                        00            .byte	0
01474                                           ! 560 },
01475                                           ! 561 {
01476                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01477 04DA                        00            .byte	0
01478 04DB                        00            .byte	0
01479 04DC                        00            .byte	0
01480 04DD                        00            .byte	0
01481 04DE                        00            .byte	0
01482 04DF                        00            .byte	0
01483 04E0                        00            .byte	0
01484 04E1                        00            .byte	0
01485                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01486 04E2                        00            .byte	0
01487 04E3                        00            .byte	0
01488 04E4                        00            .byte	0
01489 04E5                        00            .byte	0
01490 04E6                        00            .byte	0
01491 04E7                        00            .byte	0
01492 04E8                        00            .byte	0
01493 04E9                        00            .byte	0
01494                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01495 04EA                        00            .byte	0
01496 04EB                        00            .byte	0
01497 04EC                        00            .byte	0
01498 04ED                        00            .byte	0
01499 04EE                        00            .byte	0
01500 04EF                        00            .byte	0
01501 04F0                        00            .byte	0
01502 04F1                        00            .byte	0
01503                                           ! 565  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01504 04F2                        00            .byte	0
01505 04F3                        00            .byte	0
01506 04F4                        00            .byte	0
01507 04F5                        00            .byte	0
01508 04F6                        00            .byte	0
01509 04F7                        00            .byte	0
01510 04F8                        00            .byte	0
01511 04F9                        00            .byte	0
01512                                           ! 566  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01513 04FA                        00            .byte	0
01514 04FB                        00            .byte	0
01515 04FC                        00            .byte	0
01516 04FD                        00            .byte	0
01517 04FE                        00            .byte	0
01518 04FF                        00            .byte	0
01519 0500                        00            .byte	0
01520 0501                        00            .byte	0
01521                                           ! 567  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01522 0502                        00            .byte	0
01523 0503                        00            .byte	0
01524 0504                        00            .byte	0
01525 0505                        00            .byte	0
01526 0506                        00            .byte	0
01527 0507                        00            .byte	0
01528 0508                        00            .byte	0
01529 0509                        00            .byte	0
01530                                           ! 568  0x00, 0x00, 0x00, 
01531 050A                        00            .byte	0
01532 050B                        00            .byte	0
01533 050C                        00            .byte	0
01534                                           ! 568 0x00, 0x00, 0x00, 0x00, 0x00,
01535 050D                        00            .byte	0
01536 050E                        00            .byte	0
01537 050F                        00            .byte	0
01538 0510                        00            .byte	0
01539 0511                        00            .byte	0
01540                                           ! 569  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01541 0512                        00            .byte	0
01542 0513                        00            .byte	0
01543 0514                        00            .byte	0
01544 0515                        00            .byte	0
01545 0516                        00            .byte	0
01546 0517                        00            .byte	0
01547 0518                        00            .byte	0
01548 0519                        00            .byte	0
01549                                           ! 570 },
01550                                           ! 571 {
01551                                           ! 572  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01552 051A                        00            .byte	0
01553 051B                        00            .byte	0
01554 051C                        00            .byte	0
01555 051D                        00            .byte	0
01556 051E                        00            .byte	0
01557 051F                        00            .byte	0
01558 0520                        00            .byte	0
01559 0521                        00            .byte	0
01560                                           ! 573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01561 0522                        00            .byte	0
01562 0523                        00            .byte	0
01563 0524                        00            .byte	0
01564 0525                        00            .byte	0
01565 0526                        00            .byte	0
01566 0527                        00            .byte	0
01567 0528                        00            .byte	0
01568 0529                        00            .byte	0
01569                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01570 052A                        00            .byte	0
01571 052B                        00            .byte	0
01572 052C                        00            .byte	0
01573 052D                        00            .byte	0
01574 052E                        00            .byte	0
01575 052F                        00            .byte	0
01576 0530                        00            .byte	0
01577 0531                        00            .byte	0
01578                                           ! 575  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01579 0532                        00            .byte	0
01580 0533                        00            .byte	0
01581 0534                        00            .byte	0
01582 0535                        00            .byte	0
01583 0536                        00            .byte	0
01584 0537                        00            .byte	0
01585 0538                        00            .byte	0
01586 0539                        00            .byte	0
01587                                           ! 576  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01588 053A                        00            .byte	0
01589 053B                        00            .byte	0
01590 053C                        00            .byte	0
01591 053D                        00            .byte	0
01592 053E                        00            .byte	0
01593 053F                        00            .byte	0
01594 0540                        00            .byte	0
01595 0541                        00            .byte	0
01596                                           ! 577  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01597 0542                        00            .byte	0
01598 0543                        00            .byte	0
01599 0544                        00            .byte	0
01600 0545                        00            .byte	0
01601 0546                        00            .byte	0
01602 0547                        00            .byte	0
01603 0548                        00            .byte	0
01604 0549                        00            .byte	0
01605                                           ! 578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01606 054A                        00            .byte	0
01607 054B                        00            .byte	0
01608 054C                        00            .byte	0
01609 054D                        00            .byte	0
01610 054E                        00            .byte	0
01611 054F                        00            .byte	0
01612 0550                        00            .byte	0
01613 0551                        00            .byte	0
01614                                           ! 579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01615 0552                        00            .byte	0
01616 0553                        00            .byte	0
01617 0554                        00            .byte	0
01618 0555                        00            .byte	0
01619 0556                        00            .byte	0
01620 0557                        00            .byte	0
01621 0558                        00            .byte	0
01622 0559                        00            .byte	0
01623                                           ! 580 },
01624                                           ! 581 {
01625                                           ! 582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01626 055A                        00            .byte	0
01627 055B                        00            .byte	0
01628 055C                        00            .byte	0
01629 055D                        00            .byte	0
01630 055E                        00            .byte	0
01631 055F                        00            .byte	0
01632 0560                        00            .byte	0
01633 0561                        00            .byte	0
01634                                           ! 583  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01635 0562                        00            .byte	0
01636 0563                        00            .byte	0
01637 0564                        00            .byte	0
01638 0565                        00            .byte	0
01639 0566                        00            .byte	0
01640 0567                        00            .byte	0
01641 0568                        00            .byte	0
01642 0569                        00            .byte	0
01643                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01644 056A                        00            .byte	0
01645 056B                        00            .byte	0
01646 056C                        00            .byte	0
01647 056D                        00            .byte	0
01648 056E                        00            .byte	0
01649 056F                        00            .byte	0
01650 0570                        00            .byte	0
01651 0571                        00            .byte	0
01652                                           ! 585  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01653 0572                        00            .byte	0
01654 0573                        00            .byte	0
01655 0574                        00            .byte	0
01656 0575                        00            .byte	0
01657 0576                        00            .byte	0
01658 0577                        00            .byte	0
01659 0578                        00            .byte	0
01660 0579                        00            .byte	0
01661                                           ! 586  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01662 057A                        00            .byte	0
01663 057B                        00            .byte	0
01664 057C                        00            .byte	0
01665 057D                        00            .byte	0
01666 057E                        00            .byte	0
01667 057F                        00            .byte	0
01668 0580                        00            .byte	0
01669 0581                        00            .byte	0
01670                                           ! 587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01671 0582                        00            .byte	0
01672 0583                        00            .byte	0
01673 0584                        00            .byte	0
01674 0585                        00            .byte	0
01675 0586                        00            .byte	0
01676 0587                        00            .byte	0
01677 0588                        00            .byte	0
01678 0589                        00            .byte	0
01679                                           ! 588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01680 058A                        00            .byte	0
01681 058B                        00            .byte	0
01682 058C                        00            .byte	0
01683 058D                        00            .byte	0
01684 058E                        00            .byte	0
01685 058F                        00            .byte	0
01686 0590                        00            .byte	0
01687 0591                        00            .byte	0
01688                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01689 0592                        00            .byte	0
01690 0593                        00            .byte	0
01691 0594                        00            .byte	0
01692 0595                        00            .byte	0
01693 0596                        00            .byte	0
01694 0597                        00            .byte	0
01695 0598                        00            .byte	0
01696 0599                        00            .byte	0
01697                                           ! 590 },
01698                                           ! 591 {
01699                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01700 059A                        00            .byte	0
01701 059B                        00            .byte	0
01702 059C                        00            .byte	0
01703 059D                        00            .byte	0
01704 059E                        00            .byte	0
01705 059F                        00            .byte	0
01706 05A0                        00            .byte	0
01707 05A1                        00            .byte	0
01708                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01709 05A2                        00            .byte	0
01710 05A3                        00            .byte	0
01711 05A4                        00            .byte	0
01712 05A5                        00            .byte	0
01713 05A6                        00            .byte	0
01714 05A7                        00            .byte	0
01715 05A8                        00            .byte	0
01716 05A9                        00            .byte	0
01717                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01718 05AA                        00            .byte	0
01719 05AB                        00            .byte	0
01720 05AC                        00            .byte	0
01721 05AD                        00            .byte	0
01722 05AE                        00            .byte	0
01723 05AF                        00            .byte	0
01724 05B0                        00            .byte	0
01725 05B1                        00            .byte	0
01726                                           ! 595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01727 05B2                        00            .byte	0
01728 05B3                        00            .byte	0
01729 05B4                        00            .byte	0
01730 05B5                        00            .byte	0
01731 05B6                        00            .byte	0
01732 05B7                        00            .byte	0
01733 05B8                        00            .byte	0
01734 05B9                        00            .byte	0
01735                                           ! 596  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01736 05BA                        00            .byte	0
01737 05BB                        00            .byte	0
01738 05BC                        00            .byte	0
01739 05BD                        00            .byte	0
01740 05BE                        00            .byte	0
01741 05BF                        00            .byte	0
01742 05C0                        00            .byte	0
01743 05C1                        00            .byte	0
01744                                           ! 597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01745 05C2                        00            .byte	0
01746 05C3                        00            .byte	0
01747 05C4                        00            .byte	0
01748 05C5                        00            .byte	0
01749 05C6                        00            .byte	0
01750 05C7                        00            .byte	0
01751 05C8                        00            .byte	0
01752 05C9                        00            .byte	0
01753                                           ! 598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01754 05CA                        00            .byte	0
01755 05CB                        00            .byte	0
01756 05CC                        00            .byte	0
01757 05CD                        00            .byte	0
01758 05CE                        00            .byte	0
01759 05CF                        00            .byte	0
01760 05D0                        00            .byte	0
01761 05D1                        00            .byte	0
01762                                           ! 599  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01763 05D2                        00            .byte	0
01764 05D3                        00            .byte	0
01765 05D4                        00            .byte	0
01766 05D5                        00            .byte	0
01767 05D6                        00            .byte	0
01768 05D7                        00            .byte	0
01769 05D8                        00            .byte	0
01770 05D9                        00            .byte	0
01771                                           ! 600 },
01772                                           ! 601 {
01773                                           ! 602  40, 24, 8, 0x00, 0x20,
01774 05DA                        28            .byte	$28
01775 05DB                        18            .byte	$18
01776 05DC                        08            .byte	8
01777 05DD                        00            .byte	0
01778 05DE                        20            .byte	$20
01779                                           ! 603  0x09, 0x0f, 0x00, 0x06,
01780 05DF                        09            .byte	9
01781 05E0                        0F            .byte	$F
01782 05E1                        00            .byte	0
01783 05E2                        06            .byte	6
01784                                           ! 604  0x63,
01785 05E3                        63            .byte	$63
01786                                           ! 605  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01787 05E4                        2D            .byte	$2D
01788 05E5                        27            .byte	$27
01789 05E6                        28            .byte	$28
01790 05E7                        90            .byte	$90
01791 05E8                        2B            .byte	$2B
01792 05E9                        80            .byte	$80
01793 05EA                        BF            .byte	$BF
01794 05EB                        1F            .byte	$1F
01795                                           ! 606  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01796 05EC                        00            .byte	0
01797 05ED                        C0            .byte	$C0
01798 05EE                        00            .byte	0
01799 05EF                        00            .byte	0
01800 05F0                        00            .byte	0
01801 05F1                        00            .byte	0
01802 05F2                        00            .byte	0
01803 05F3                        00            .byte	0
01804                                           ! 607  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01805 05F4                        9C            .byte	$9C
01806 05F5                        8E            .byte	$8E
01807 05F6                        8F            .byte	$8F
01808 05F7                        14            .byte	$14
01809 05F8                        00            .byte	0
01810 05F9                        96            .byte	$96
01811 05FA                        B9            .byte	$B9
01812 05FB                        E3            .byte	$E3
01813                                           ! 608  0xff,
01814 05FC                        FF            .byte	$FF
01815                                           ! 609  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01816 05FD                        00            .byte	0
01817 05FE                        01            .byte	1
01818 05FF                        02            .byte	2
01819 0600                        03            .byte	3
01820 0601                        04            .byte	4
01821 0602                        05            .byte	5
01822 0603                        06            .byte	6
01823 0604                        07            .byte	7
01824                                           ! 610  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01825 0605                        10            .byte	$10
01826 0606                        11            .byte	$11
01827 0607                        12            .byte	$12
01828 0608                        13            .byte	$13
01829 0609                        14            .byte	$14
01830 060A                        15            .byte	$15
01831 060B                        16            .byte	$16
01832 060C                        17            .byte	$17
01833                                           ! 611  0x01, 0x00, 0x0f, 0x00,
01834 060D                        01            .byte	1
01835 060E                        00            .byte	0
01836 060F                        0F            .byte	$F
01837 0610                        00            .byte	0
01838                                           ! 612  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01839 0611                        00            .byte	0
01840 0612                        00            .byte	0
01841 0613                        00            .byte	0
01842 0614                        00            .byte	0
01843 0615                        00            .byte	0
01844 0616                        00            .byte	0
01845 0617                        05            .byte	5
01846 0618                        0F            .byte	$F
01847 0619                        FF            .byte	$FF
01848                                           ! 613 },
01849                                           ! 614 {
01850                                           ! 615  80, 24, 8, 0x00, 0x40,
01851 061A                        50            .byte	$50
01852 061B                        18            .byte	$18
01853 061C                        08            .byte	8
01854 061D                        00            .byte	0
01855 061E                        40            .byte	$40
01856                                           ! 616  0x01, 0x0f, 0x00, 0x06,
01857 061F                        01            .byte	1
01858 0620                        0F            .byte	$F
01859 0621                        00            .byte	0
01860 0622                        06            .byte	6
01861                                           ! 617  0x63,
01862 0623                        63            .byte	$63
01863                                           ! 618  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01864 0624                        5F            .byte	$5F
01865 0625                        4F            .byte	$4F
01866 0626                        50            .byte	$50
01867 0627                        82            .byte	$82
01868 0628                        54            .byte	$54
01869 0629                        80            .byte	$80
01870 062A                        BF            .byte	$BF
01871 062B                        1F            .byte	$1F
01872                                           ! 619  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01873 062C                        00            .byte	0
01874 062D                        C0            .byte	$C0
01875 062E                        00            .byte	0
01876 062F                        00            .byte	0
01877 0630                        00            .byte	0
01878 0631                        00            .byte	0
01879 0632                        00            .byte	0
01880 0633                        00            .byte	0
01881                                           ! 620  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01882 0634                        9C            .byte	$9C
01883 0635                        8E            .byte	$8E
01884 0636                        8F            .byte	$8F
01885 0637                        28            .byte	$28
01886 0638                        00            .byte	0
01887 0639                        96            .byte	$96
01888 063A                        B9            .byte	$B9
01889 063B                        E3            .byte	$E3
01890                                           ! 621  0xff,
01891 063C                        FF            .byte	$FF
01892                                           ! 622  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01893 063D                        00            .byte	0
01894 063E                        01            .byte	1
01895 063F                        02            .byte	2
01896 0640                        03            .byte	3
01897 0641                        04            .byte	4
01898 0642                        05            .byte	5
01899 0643                        06            .byte	6
01900 0644                        07            .byte	7
01901                                           ! 623  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01902 0645                        10            .byte	$10
01903 0646                        11            .byte	$11
01904 0647                        12            .byte	$12
01905 0648                        13            .byte	$13
01906 0649                        14            .byte	$14
01907 064A                        15            .byte	$15
01908 064B                        16            .byte	$16
01909 064C                        17            .byte	$17
01910                                           ! 624  0x01, 0x00, 0x0f, 0x00,
01911 064D                        01            .byte	1
01912 064E                        00            .byte	0
01913 064F                        0F            .byte	$F
01914 0650                        00            .byte	0
01915                                           ! 625  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f
01916 0651                        00            .byte	0
01917 0652                        00            .byte	0
01918 0653                        00            .byte	0
01919 0654                        00            .byte	0
01920 0655                        00            .byte	0
01921 0656                        00            .byte	0
01922 0657                        05            .byte	5
01923                                           ! 625 , 0xff,
01924 0658                        0F            .byte	$F
01925 0659                        FF            .byte	$FF
01926                                           ! 626 },
01927                                           ! 627 {
01928                                           ! 628  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01929 065A                        00            .byte	0
01930 065B                        00            .byte	0
01931 065C                        00            .byte	0
01932 065D                        00            .byte	0
01933 065E                        00            .byte	0
01934 065F                        00            .byte	0
01935 0660                        00            .byte	0
01936 0661                        00            .byte	0
01937                                           ! 629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01938 0662                        00            .byte	0
01939 0663                        00            .byte	0
01940 0664                        00            .byte	0
01941 0665                        00            .byte	0
01942 0666                        00            .byte	0
01943 0667                        00            .byte	0
01944 0668                        00            .byte	0
01945 0669                        00            .byte	0
01946                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01947 066A                        00            .byte	0
01948 066B                        00            .byte	0
01949 066C                        00            .byte	0
01950 066D                        00            .byte	0
01951 066E                        00            .byte	0
01952 066F                        00            .byte	0
01953 0670                        00            .byte	0
01954 0671                        00            .byte	0
01955                                           ! 631  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01956 0672                        00            .byte	0
01957 0673                        00            .byte	0
01958 0674                        00            .byte	0
01959 0675                        00            .byte	0
01960 0676                        00            .byte	0
01961 0677                        00            .byte	0
01962 0678                        00            .byte	0
01963 0679                        00            .byte	0
01964                                           ! 632  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01965 067A                        00            .byte	0
01966 067B                        00            .byte	0
01967 067C                        00            .byte	0
01968 067D                        00            .byte	0
01969 067E                        00            .byte	0
01970 067F                        00            .byte	0
01971 0680                        00            .byte	0
01972 0681                        00            .byte	0
01973                                           ! 633  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01974 0682                        00            .byte	0
01975 0683                        00            .byte	0
01976 0684                        00            .byte	0
01977 0685                        00            .byte	0
01978 0686                        00            .byte	0
01979 0687                        00            .byte	0
01980 0688                        00            .byte	0
01981 0689                        00            .byte	0
01982                                           ! 634  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01983 068A                        00            .byte	0
01984 068B                        00            .byte	0
01985 068C                        00            .byte	0
01986 068D                        00            .byte	0
01987 068E                        00            .byte	0
01988 068F                        00            .byte	0
01989 0690                        00            .byte	0
01990 0691                        00            .byte	0
01991                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01992 0692                        00            .byte	0
01993 0693                        00            .byte	0
01994 0694                        00            .byte	0
01995 0695                        00            .byte	0
01996 0696                        00            .byte	0
01997 0697                        00            .byte	0
01998 0698                        00            .byte	0
01999 0699                        00            .byte	0
02000                                           ! 636 },
02001                                           ! 637 {
02002                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02003 069A                        00            .byte	0
02004 069B                        00            .byte	0
02005 069C                        00            .byte	0
02006 069D                        00            .byte	0
02007 069E                        00            .byte	0
02008 069F                        00            .byte	0
02009 06A0                        00            .byte	0
02010 06A1                        00            .byte	0
02011                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02012 06A2                        00            .byte	0
02013 06A3                        00            .byte	0
02014 06A4                        00            .byte	0
02015 06A5                        00            .byte	0
02016 06A6                        00            .byte	0
02017 06A7                        00            .byte	0
02018 06A8                        00            .byte	0
02019 06A9                        00            .byte	0
02020                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02021 06AA                        00            .byte	0
02022 06AB                        00            .byte	0
02023 06AC                        00            .byte	0
02024 06AD                        00            .byte	0
02025 06AE                        00            .byte	0
02026 06AF                        00            .byte	0
02027 06B0                        00            .byte	0
02028 06B1                        00            .byte	0
02029                                           ! 641  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02030 06B2                        00            .byte	0
02031 06B3                        00            .byte	0
02032 06B4                        00            .byte	0
02033 06B5                        00            .byte	0
02034 06B6                        00            .byte	0
02035 06B7                        00            .byte	0
02036 06B8                        00            .byte	0
02037 06B9                        00            .byte	0
02038                                           ! 642  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02039 06BA                        00            .byte	0
02040 06BB                        00            .byte	0
02041 06BC                        00            .byte	0
02042 06BD                        00            .byte	0
02043 06BE                        00            .byte	0
02044 06BF                        00            .byte	0
02045 06C0                        00            .byte	0
02046 06C1                        00            .byte	0
02047                                           ! 643  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02048 06C2                        00            .byte	0
02049 06C3                        00            .byte	0
02050 06C4                        00            .byte	0
02051 06C5                        00            .byte	0
02052 06C6                        00            .byte	0
02053 06C7                        00            .byte	0
02054 06C8                        00            .byte	0
02055 06C9                        00            .byte	0
02056                                           ! 644  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02057 06CA                        00            .byte	0
02058 06CB                        00            .byte	0
02059 06CC                        00            .byte	0
02060 06CD                        00            .byte	0
02061 06CE                        00            .byte	0
02062 06CF                        00            .byte	0
02063 06D0                        00            .byte	0
02064 06D1                        00            .byte	0
02065                                           ! 645  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02066 06D2                        00            .byte	0
02067 06D3                        00            .byte	0
02068 06D4                        00            .byte	0
02069 06D5                        00            .byte	0
02070 06D6                        00            .byte	0
02071 06D7                        00            .byte	0
02072 06D8                        00            .byte	0
02073 06D9                        00            .byte	0
02074                                           ! 646 },
02075                                           ! 647 {
02076                                           ! 648  80, 24, 14, 0x00, 0x80,
02077 06DA                        50            .byte	$50
02078 06DB                        18            .byte	$18
02079 06DC                        0E            .byte	$E
02080 06DD                        00            .byte	0
02081 06DE                        80            .byte	$80
02082                                           ! 649  0x01, 0x0f, 0x00, 0x06,
02083 06DF                        01            .byte	1
02084 06E0                        0F            .byte	$F
02085 06E1                        00            .byte	0
02086 06E2                        06            .byte	6
02087                                           ! 650  0xa3,
02088 06E3                        A3            .byte	$A3
02089                                           ! 651  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02090 06E4                        5F            .byte	$5F
02091 06E5                        4F            .byte	$4F
02092 06E6                        50            .byte	$50
02093 06E7                        82            .byte	$82
02094 06E8                        54            .byte	$54
02095 06E9                        80            .byte	$80
02096 06EA                        BF            .byte	$BF
02097 06EB                        1F            .byte	$1F
02098                                           ! 652  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02099 06EC                        00            .byte	0
02100 06ED                        40            .byte	$40
02101 06EE                        00            .byte	0
02102 06EF                        00            .byte	0
02103 06F0                        00            .byte	0
02104 06F1                        00            .byte	0
02105 06F2                        00            .byte	0
02106 06F3                        00            .byte	0
02107                                           ! 653  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02108 06F4                        83            .byte	$83
02109 06F5                        85            .byte	$85
02110 06F6                        5D            .byte	$5D
02111 06F7                        28            .byte	$28
02112 06F8                        0F            .byte	$F
02113 06F9                        63            .byte	$63
02114 06FA                        BA            .byte	$BA
02115 06FB                        E3            .byte	$E3
02116                                           ! 654  0xff,
02117 06FC                        FF            .byte	$FF
02118                                           ! 655  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02119 06FD                        00            .byte	0
02120 06FE                        08            .byte	8
02121 06FF                        00            .byte	0
02122 0700                        00            .byte	0
02123 0701                        18            .byte	$18
02124 0702                        18            .byte	$18
02125 0703                        00            .byte	0
02126 0704                        00            .byte	0
02127                                           ! 656  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02128 0705                        00            .byte	0
02129 0706                        08            .byte	8
02130 0707                        00            .byte	0
02131 0708                        00            .byte	0
02132 0709                        00            .byte	0
02133 070A                        18            .byte	$18
02134 070B                        00            .byte	0
02135 070C                        00            .byte	0
02136                                           ! 657  0x01, 0x00, 0x01, 0x00,
02137 070D                        01            .byte	1
02138 070E                        00            .byte	0
02139 070F                        01            .byte	1
02140 0710                        00            .byte	0
02141                                           ! 658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02142 0711                        00            .byte	0
02143 0712                        00            .byte	0
02144 0713                        00            .byte	0
02145 0714                        00            .byte	0
02146 0715                        00            .byte	0
02147 0716                        00            .byte	0
02148 0717                        05            .byte	5
02149 0718                        0F            .byte	$F
02150 0719                        FF            .byte	$FF
02151                                           ! 659 },
02152                                           ! 660 {
02153                                           ! 661  80, 24, 14, 0x00, 0x80,
02154 071A                        50            .byte	$50
02155 071B                        18            .byte	$18
02156 071C                        0E            .byte	$E
02157 071D                        00            .byte	0
02158 071E                        80            .byte	$80
02159                                           ! 662  0x01, 0x0f, 0x00, 0x06,
02160 071F                        01            .byte	1
02161 0720                        0F            .byte	$F
02162 0721                        00            .byte	0
02163 0722                        06            .byte	6
02164                                           ! 663  0xa3,
02165 0723                        A3            .byte	$A3
02166                                           ! 664  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02167 0724                        5F            .byte	$5F
02168 0725                        4F            .byte	$4F
02169 0726                        50            .byte	$50
02170 0727                        82            .byte	$82
02171 0728                        54            .byte	$54
02172 0729                        80            .byte	$80
02173 072A                        BF            .byte	$BF
02174 072B                        1F            .byte	$1F
02175                                           ! 665  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02176 072C                        00            .byte	0
02177 072D                        40            .byte	$40
02178 072E                        00            .byte	0
02179 072F                        00            .byte	0
02180 0730                        00            .byte	0
02181 0731                        00            .byte	0
02182 0732                        00            .byte	0
02183 0733                        00            .byte	0
02184                                           ! 666  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02185 0734                        83            .byte	$83
02186 0735                        85            .byte	$85
02187 0736                        5D            .byte	$5D
02188 0737                        28            .byte	$28
02189 0738                        0F            .byte	$F
02190 0739                        63            .byte	$63
02191 073A                        BA            .byte	$BA
02192 073B                        E3            .byte	$E3
02193                                           ! 667  0xff,
02194 073C                        FF            .byte	$FF
02195                                           ! 668  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02196 073D                        00            .byte	0
02197 073E                        01            .byte	1
02198 073F                        02            .byte	2
02199 0740                        03            .byte	3
02200 0741                        04            .byte	4
02201 0742                        05            .byte	5
02202 0743                        14            .byte	$14
02203 0744                        07            .byte	7
02204                                           ! 669  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02205 0745                        38            .byte	$38
02206 0746                        39            .byte	$39
02207 0747                        3A            .byte	$3A
02208 0748                        3B            .byte	$3B
02209 0749                        3C            .byte	$3C
02210 074A                        3D            .byte	$3D
02211 074B                        3E            .byte	$3E
02212 074C                        3F            .byte	$3F
02213                                           ! 670  0x01, 0x00, 0x0f, 0x00,
02214 074D                        01            .byte	1
02215 074E                        00            .byte	0
02216 074F                        0F            .byte	$F
02217 0750                        00            .byte	0
02218                                           ! 671  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02219 0751                        00            .byte	0
02220 0752                        00            .byte	0
02221 0753                        00            .byte	0
02222 0754                        00            .byte	0
02223 0755                        00            .byte	0
02224 0756                        00            .byte	0
02225 0757                        05            .byte	5
02226 0758                        0F            .byte	$F
02227 0759                        FF            .byte	$FF
02228                                           ! 672 },
02229                                           ! 673 {
02230                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02231 075A                        00            .byte	0
02232 075B                        00            .byte	0
02233 075C                        00            .byte	0
02234 075D                        00            .byte	0
02235 075E                        00            .byte	0
02236 075F                        00            .byte	0
02237 0760                        00            .byte	0
02238 0761                        00            .byte	0
02239                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02240 0762                        00            .byte	0
02241 0763                        00            .byte	0
02242 0764                        00            .byte	0
02243 0765                        00            .byte	0
02244 0766                        00            .byte	0
02245 0767                        00            .byte	0
02246 0768                        00            .byte	0
02247 0769                        00            .byte	0
02248                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02249 076A                        00            .byte	0
02250 076B                        00            .byte	0
02251 076C                        00            .byte	0
02252 076D                        00            .byte	0
02253 076E                        00            .byte	0
02254 076F                        00            .byte	0
02255 0770                        00            .byte	0
02256 0771                        00            .byte	0
02257                                           ! 677  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02258 0772                        00            .byte	0
02259 0773                        00            .byte	0
02260 0774                        00            .byte	0
02261 0775                        00            .byte	0
02262 0776                        00            .byte	0
02263 0777                        00            .byte	0
02264 0778                        00            .byte	0
02265 0779                        00            .byte	0
02266                                           ! 678  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02267 077A                        00            .byte	0
02268 077B                        00            .byte	0
02269 077C                        00            .byte	0
02270 077D                        00            .byte	0
02271 077E                        00            .byte	0
02272 077F                        00            .byte	0
02273 0780                        00            .byte	0
02274 0781                        00            .byte	0
02275                                           ! 679  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02276 0782                        00            .byte	0
02277 0783                        00            .byte	0
02278 0784                        00            .byte	0
02279 0785                        00            .byte	0
02280 0786                        00            .byte	0
02281 0787                        00            .byte	0
02282 0788                        00            .byte	0
02283 0789                        00            .byte	0
02284                                           ! 680  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02285 078A                        00            .byte	0
02286 078B                        00            .byte	0
02287 078C                        00            .byte	0
02288 078D                        00            .byte	0
02289 078E                        00            .byte	0
02290 078F                        00            .byte	0
02291 0790                        00            .byte	0
02292 0791                        00            .byte	0
02293                                           ! 681  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02294 0792                        00            .byte	0
02295 0793                        00            .byte	0
02296 0794                        00            .byte	0
02297 0795                        00            .byte	0
02298 0796                        00            .byte	0
02299 0797                        00            .byte	0
02300 0798                        00            .byte	0
02301 0799                        00            .byte	0
02302                                           ! 682 },
02303                                           ! 683 {
02304                                           ! 684  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02305 079A                        00            .byte	0
02306 079B                        00            .byte	0
02307 079C                        00            .byte	0
02308 079D                        00            .byte	0
02309 079E                        00            .byte	0
02310 079F                        00            .byte	0
02311 07A0                        00            .byte	0
02312 07A1                        00            .byte	0
02313                                           ! 685  0x00, 
02314 07A2                        00            .byte	0
02315                                           ! 685 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02316 07A3                        00            .byte	0
02317 07A4                        00            .byte	0
02318 07A5                        00            .byte	0
02319 07A6                        00            .byte	0
02320 07A7                        00            .byte	0
02321 07A8                        00            .byte	0
02322 07A9                        00            .byte	0
02323                                           ! 686  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02324 07AA                        00            .byte	0
02325 07AB                        00            .byte	0
02326 07AC                        00            .byte	0
02327 07AD                        00            .byte	0
02328 07AE                        00            .byte	0
02329 07AF                        00            .byte	0
02330 07B0                        00            .byte	0
02331 07B1                        00            .byte	0
02332                                           ! 687  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02333 07B2                        00            .byte	0
02334 07B3                        00            .byte	0
02335 07B4                        00            .byte	0
02336 07B5                        00            .byte	0
02337 07B6                        00            .byte	0
02338 07B7                        00            .byte	0
02339 07B8                        00            .byte	0
02340 07B9                        00            .byte	0
02341                                           ! 688  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02342 07BA                        00            .byte	0
02343 07BB                        00            .byte	0
02344 07BC                        00            .byte	0
02345 07BD                        00            .byte	0
02346 07BE                        00            .byte	0
02347 07BF                        00            .byte	0
02348 07C0                        00            .byte	0
02349 07C1                        00            .byte	0
02350                                           ! 689  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02351 07C2                        00            .byte	0
02352 07C3                        00            .byte	0
02353 07C4                        00            .byte	0
02354 07C5                        00            .byte	0
02355 07C6                        00            .byte	0
02356 07C7                        00            .byte	0
02357 07C8                        00            .byte	0
02358 07C9                        00            .byte	0
02359                                           ! 690  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02360 07CA                        00            .byte	0
02361 07CB                        00            .byte	0
02362 07CC                        00            .byte	0
02363 07CD                        00            .byte	0
02364 07CE                        00            .byte	0
02365 07CF                        00            .byte	0
02366 07D0                        00            .byte	0
02367 07D1                        00            .byte	0
02368                                           ! 691  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02369 07D2                        00            .byte	0
02370 07D3                        00            .byte	0
02371 07D4                        00            .byte	0
02372 07D5                        00            .byte	0
02373 07D6                        00            .byte	0
02374 07D7                        00            .byte	0
02375 07D8                        00            .byte	0
02376 07D9                        00            .byte	0
02377                                           ! 692 },
02378                                           ! 693 {
02379                                           ! 694  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02380 07DA                        00            .byte	0
02381 07DB                        00            .byte	0
02382 07DC                        00            .byte	0
02383 07DD                        00            .byte	0
02384 07DE                        00            .byte	0
02385 07DF                        00            .byte	0
02386 07E0                        00            .byte	0
02387 07E1                        00            .byte	0
02388                                           ! 695  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02389 07E2                        00            .byte	0
02390 07E3                        00            .byte	0
02391 07E4                        00            .byte	0
02392 07E5                        00            .byte	0
02393 07E6                        00            .byte	0
02394 07E7                        00            .byte	0
02395 07E8                        00            .byte	0
02396 07E9                        00            .byte	0
02397                                           ! 696  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02398 07EA                        00            .byte	0
02399 07EB                        00            .byte	0
02400 07EC                        00            .byte	0
02401 07ED                        00            .byte	0
02402 07EE                        00            .byte	0
02403 07EF                        00            .byte	0
02404 07F0                        00            .byte	0
02405 07F1                        00            .byte	0
02406                                           ! 697  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02407 07F2                        00            .byte	0
02408 07F3                        00            .byte	0
02409 07F4                        00            .byte	0
02410 07F5                        00            .byte	0
02411 07F6                        00            .byte	0
02412 07F7                        00            .byte	0
02413 07F8                        00            .byte	0
02414 07F9                        00            .byte	0
02415                                           ! 698  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02416 07FA                        00            .byte	0
02417 07FB                        00            .byte	0
02418 07FC                        00            .byte	0
02419 07FD                        00            .byte	0
02420 07FE                        00            .byte	0
02421 07FF                        00            .byte	0
02422 0800                        00            .byte	0
02423 0801                        00            .byte	0
02424                                           ! 699  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02425 0802                        00            .byte	0
02426 0803                        00            .byte	0
02427 0804                        00            .byte	0
02428 0805                        00            .byte	0
02429 0806                        00            .byte	0
02430 0807                        00            .byte	0
02431 0808                        00            .byte	0
02432 0809                        00            .byte	0
02433                                           ! 700  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02434 080A                        00            .byte	0
02435 080B                        00            .byte	0
02436 080C                        00            .byte	0
02437 080D                        00            .byte	0
02438 080E                        00            .byte	0
02439 080F                        00            .byte	0
02440 0810                        00            .byte	0
02441 0811                        00            .byte	0
02442                                           ! 701  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02443 0812                        00            .byte	0
02444 0813                        00            .byte	0
02445 0814                        00            .byte	0
02446 0815                        00            .byte	0
02447 0816                        00            .byte	0
02448 0817                        00            .byte	0
02449 0818                        00            .byte	0
02450 0819                        00            .byte	0
02451                                           ! 702 },
02452                                           ! 703 {
02453                                           ! 704  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02454 081A                        00            .byte	0
02455 081B                        00            .byte	0
02456 081C                        00            .byte	0
02457 081D                        00            .byte	0
02458 081E                        00            .byte	0
02459 081F                        00            .byte	0
02460 0820                        00            .byte	0
02461 0821                        00            .byte	0
02462                                           ! 705  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02463 0822                        00            .byte	0
02464 0823                        00            .byte	0
02465 0824                        00            .byte	0
02466 0825                        00            .byte	0
02467 0826                        00            .byte	0
02468 0827                        00            .byte	0
02469 0828                        00            .byte	0
02470 0829                        00            .byte	0
02471                                           ! 706  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02472 082A                        00            .byte	0
02473 082B                        00            .byte	0
02474 082C                        00            .byte	0
02475 082D                        00            .byte	0
02476 082E                        00            .byte	0
02477 082F                        00            .byte	0
02478 0830                        00            .byte	0
02479 0831                        00            .byte	0
02480                                           ! 707  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02481 0832                        00            .byte	0
02482 0833                        00            .byte	0
02483 0834                        00            .byte	0
02484 0835                        00            .byte	0
02485 0836                        00            .byte	0
02486 0837                        00            .byte	0
02487 0838                        00            .byte	0
02488 0839                        00            .byte	0
02489                                           ! 708  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02490 083A                        00            .byte	0
02491 083B                        00            .byte	0
02492 083C                        00            .byte	0
02493 083D                        00            .byte	0
02494 083E                        00            .byte	0
02495 083F                        00            .byte	0
02496 0840                        00            .byte	0
02497 0841                        00            .byte	0
02498                                           ! 709  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02499 0842                        00            .byte	0
02500 0843                        00            .byte	0
02501 0844                        00            .byte	0
02502 0845                        00            .byte	0
02503 0846                        00            .byte	0
02504 0847                        00            .byte	0
02505 0848                        00            .byte	0
02506 0849                        00            .byte	0
02507                                           ! 710  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02508 084A                        00            .byte	0
02509 084B                        00            .byte	0
02510 084C                        00            .byte	0
02511 084D                        00            .byte	0
02512 084E                        00            .byte	0
02513 084F                        00            .byte	0
02514 0850                        00            .byte	0
02515 0851                        00            .byte	0
02516                                           ! 711  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02517 0852                        00            .byte	0
02518 0853                        00            .byte	0
02519 0854                        00            .byte	0
02520 0855                        00            .byte	0
02521 0856                        00            .byte	0
02522 0857                        00            .byte	0
02523 0858                        00            .byte	0
02524 0859                        00            .byte	0
02525                                           ! 712 },
02526                                           ! 713 {
02527                                           ! 714  40, 24, 16, 0x00, 0x08,
02528 085A                        28            .byte	$28
02529 085B                        18            .byte	$18
02530 085C                        10            .byte	$10
02531 085D                        00            .byte	0
02532 085E                        08            .byte	8
02533                                           ! 715  0x08, 0x03, 0x00, 0x02,
02534 085F                        08            .byte	8
02535 0860                        03            .byte	3
02536 0861                        00            .byte	0
02537 0862                        02            .byte	2
02538                                           ! 716  0x67,
02539 0863                        67            .byte	$67
02540                                           ! 717  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02541 0864                        2D            .byte	$2D
02542 0865                        27            .byte	$27
02543 0866                        28            .byte	$28
02544 0867                        90            .byte	$90
02545 0868                        2B            .byte	$2B
02546 0869                        A0            .byte	$A0
02547 086A                        BF            .byte	$BF
02548 086B                        1F            .byte	$1F
02549                                           ! 718  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02550 086C                        00            .byte	0
02551 086D                        4F            .byte	$4F
02552 086E                        0D            .byte	$D
02553 086F                        0E            .byte	$E
02554 0870                        00            .byte	0
02555 0871                        00            .byte	0
02556 0872                        00            .byte	0
02557 0873                        00            .byte	0
02558                                           ! 719  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02559 0874                        9C            .byte	$9C
02560 0875                        8E            .byte	$8E
02561 0876                        8F            .byte	$8F
02562 0877                        14            .byte	$14
02563 0878                        1F            .byte	$1F
02564 0879                        96            .byte	$96
02565 087A                        B9            .byte	$B9
02566 087B                        A3            .byte	$A3
02567                                           ! 720  0xff,
02568 087C                        FF            .byte	$FF
02569                                           ! 721  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02570 087D                        00            .byte	0
02571 087E                        01            .byte	1
02572 087F                        02            .byte	2
02573 0880                        03            .byte	3
02574 0881                        04            .byte	4
02575 0882                        05            .byte	5
02576 0883                        14            .byte	$14
02577 0884                        07            .byte	7
02578                                           ! 722  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02579 0885                        38            .byte	$38
02580 0886                        39            .byte	$39
02581 0887                        3A            .byte	$3A
02582 0888                        3B            .byte	$3B
02583 0889                        3C            .byte	$3C
02584 088A                        3D            .byte	$3D
02585 088B                        3E            .byte	$3E
02586 088C                        3F            .byte	$3F
02587                                           ! 723  0x0c, 0x00, 0x0f, 0x08,
02588 088D                        0C            .byte	$C
02589 088E                        00            .byte	0
02590 088F                        0F            .byte	$F
02591 0890                        08            .byte	8
02592                                           ! 724  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02593 0891                        00            .byte	0
02594 0892                        00            .byte	0
02595 0893                        00            .byte	0
02596 0894                        00            .byte	0
02597 0895                        00            .byte	0
02598 0896                        10            .byte	$10
02599 0897                        0E            .byte	$E
02600 0898                        0F            .byte	$F
02601 0899                        FF            .byte	$FF
02602                                           ! 725 },
02603                                           ! 726 {
02604                                           ! 727  80, 24, 16, 0x00, 0x10,
02605 089A                        50            .byte	$50
02606 089B                        18            .byte	$18
02607 089C                        10            .byte	$10
02608 089D                        00            .byte	0
02609 089E                        10            .byte	$10
02610                                           ! 728  0x00, 0x03, 0x00, 0x02,
02611 089F                        00            .byte	0
02612 08A0                        03            .byte	3
02613 08A1                        00            .byte	0
02614 08A2                        02            .byte	2
02615                                           ! 729  0x67,
02616 08A3                        67            .byte	$67
02617                                           ! 730  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02618 08A4                        5F            .byte	$5F
02619 08A5                        4F            .byte	$4F
02620 08A6                        50            .byte	$50
02621 08A7                        82            .byte	$82
02622 08A8                        55            .byte	$55
02623 08A9                        81            .byte	$81
02624 08AA                        BF            .byte	$BF
02625 08AB                        1F            .byte	$1F
02626                                           ! 731  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02627 08AC                        00            .byte	0
02628 08AD                        4F            .byte	$4F
02629 08AE                        0D            .byte	$D
02630 08AF                        0E            .byte	$E
02631 08B0                        00            .byte	0
02632 08B1                        00            .byte	0
02633 08B2                        00            .byte	0
02634 08B3                        00            .byte	0
02635                                           ! 732  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02636 08B4                        9C            .byte	$9C
02637 08B5                        8E            .byte	$8E
02638 08B6                        8F            .byte	$8F
02639 08B7                        28            .byte	$28
02640 08B8                        1F            .byte	$1F
02641 08B9                        96            .byte	$96
02642 08BA                        B9            .byte	$B9
02643 08BB                        A3            .byte	$A3
02644                                           ! 733  0xff,
02645 08BC                        FF            .byte	$FF
02646                                           ! 734  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02647 08BD                        00            .byte	0
02648 08BE                        01            .byte	1
02649 08BF                        02            .byte	2
02650 08C0                        03            .byte	3
02651 08C1                        04            .byte	4
02652 08C2                        05            .byte	5
02653 08C3                        14            .byte	$14
02654 08C4                        07            .byte	7
02655                                           ! 735  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02656 08C5                        38            .byte	$38
02657 08C6                        39            .byte	$39
02658 08C7                        3A            .byte	$3A
02659 08C8                        3B            .byte	$3B
02660 08C9                        3C            .byte	$3C
02661 08CA                        3D            .byte	$3D
02662 08CB                        3E            .byte	$3E
02663 08CC                        3F            .byte	$3F
02664                                           ! 736  0x0c, 0x00, 0x0f, 0x08,
02665 08CD                        0C            .byte	$C
02666 08CE                        00            .byte	0
02667 08CF                        0F            .byte	$F
02668 08D0                        08            .byte	8
02669                                           ! 737  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02670 08D1                        00            .byte	0
02671 08D2                        00            .byte	0
02672 08D3                        00            .byte	0
02673 08D4                        00            .byte	0
02674 08D5                        00            .byte	0
02675 08D6                        10            .byte	$10
02676 08D7                        0E            .byte	$E
02677 08D8                        0F            .byte	$F
02678 08D9                        FF            .byte	$FF
02679                                           ! 738 },
02680                                           ! 739 {
02681                                           ! 740  80, 24, 16, 0x00, 0x10,
02682 08DA                        50            .byte	$50
02683 08DB                        18            .byte	$18
02684 08DC                        10            .byte	$10
02685 08DD                        00            .byte	0
02686 08DE                        10            .byte	$10
02687                                           ! 741  0x00, 0x03, 0x00, 0x02,
02688 08DF                        00            .byte	0
02689 08E0                        03            .byte	3
02690 08E1                        00            .byte	0
02691 08E2                        02            .byte	2
02692                                           ! 742  0x66,
02693 08E3                        66            .byte	$66
02694                                           ! 743  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02695 08E4                        5F            .byte	$5F
02696 08E5                        4F            .byte	$4F
02697 08E6                        50            .byte	$50
02698 08E7                        82            .byte	$82
02699 08E8                        55            .byte	$55
02700 08E9                        81            .byte	$81
02701 08EA                        BF            .byte	$BF
02702 08EB                        1F            .byte	$1F
02703                                           ! 744  0x00, 0x4f, 0x0d, 
02704 08EC                        00            .byte	0
02705 08ED                        4F            .byte	$4F
02706 08EE                        0D            .byte	$D
02707                                           ! 744 0x0e, 0x00, 0x00, 0x00, 0x00,
02708 08EF                        0E            .byte	$E
02709 08F0                        00            .byte	0
02710 08F1                        00            .byte	0
02711 08F2                        00            .byte	0
02712 08F3                        00            .byte	0
02713                                           ! 745  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02714 08F4                        9C            .byte	$9C
02715 08F5                        8E            .byte	$8E
02716 08F6                        8F            .byte	$8F
02717 08F7                        28            .byte	$28
02718 08F8                        0F            .byte	$F
02719 08F9                        96            .byte	$96
02720 08FA                        B9            .byte	$B9
02721 08FB                        A3            .byte	$A3
02722                                           ! 746  0xff,
02723 08FC                        FF            .byte	$FF
02724                                           ! 747  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02725 08FD                        00            .byte	0
02726 08FE                        08            .byte	8
02727 08FF                        08            .byte	8
02728 0900                        08            .byte	8
02729 0901                        08            .byte	8
02730 0902                        08            .byte	8
02731 0903                        08            .byte	8
02732 0904                        08            .byte	8
02733                                           ! 748  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02734 0905                        10            .byte	$10
02735 0906                        18            .byte	$18
02736 0907                        18            .byte	$18
02737 0908                        18            .byte	$18
02738 0909                        18            .byte	$18
02739 090A                        18            .byte	$18
02740 090B                        18            .byte	$18
02741 090C                        18            .byte	$18
02742                                           ! 749  0x0e, 0x00, 0x0f, 0x08,
02743 090D                        0E            .byte	$E
02744 090E                        00            .byte	0
02745 090F                        0F            .byte	$F
02746 0910                        08            .byte	8
02747                                           ! 750  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02748 0911                        00            .byte	0
02749 0912                        00            .byte	0
02750 0913                        00            .byte	0
02751 0914                        00            .byte	0
02752 0915                        00            .byte	0
02753 0916                        10            .byte	$10
02754 0917                        0A            .byte	$A
02755 0918                        0F            .byte	$F
02756 0919                        FF            .byte	$FF
02757                                           ! 751 },
02758                                           ! 752 {
02759                                           ! 753  80, 29, 16, 0x00, 0x00,
02760 091A                        50            .byte	$50
02761 091B                        1D            .byte	$1D
02762 091C                        10            .byte	$10
02763 091D                        00            .byte	0
02764 091E                        00            .byte	0
02765                                           ! 754  0x01, 0x0f, 0x00, 0x06,
02766 091F                        01            .byte	1
02767 0920                        0F            .byte	$F
02768 0921                        00            .byte	0
02769 0922                        06            .byte	6
02770                                           ! 755  0xe3,
02771 0923                        E3            .byte	$E3
02772                                           ! 756  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02773 0924                        5F            .byte	$5F
02774 0925                        4F            .byte	$4F
02775 0926                        50            .byte	$50
02776 0927                        82            .byte	$82
02777 0928                        54            .byte	$54
02778 0929                        80            .byte	$80
02779 092A                        0B            .byte	$B
02780 092B                        3E            .byte	$3E
02781                                           ! 757  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02782 092C                        00            .byte	0
02783 092D                        40            .byte	$40
02784 092E                        00            .byte	0
02785 092F                        00            .byte	0
02786 0930                        00            .byte	0
02787 0931                        00            .byte	0
02788 0932                        00            .byte	0
02789 0933                        00            .byte	0
02790                                           ! 758  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02791 0934                        EA            .byte	$EA
02792 0935                        8C            .byte	$8C
02793 0936                        DF            .byte	$DF
02794 0937                        28            .byte	$28
02795 0938                        00            .byte	0
02796 0939                        E7            .byte	$E7
02797 093A                        04            .byte	4
02798 093B                        E3            .byte	$E3
02799                                           ! 759  0xff,
02800 093C                        FF            .byte	$FF
02801                                           ! 760  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02802 093D                        00            .byte	0
02803 093E                        3F            .byte	$3F
02804 093F                        00            .byte	0
02805 0940                        3F            .byte	$3F
02806 0941                        00            .byte	0
02807 0942                        3F            .byte	$3F
02808 0943                        00            .byte	0
02809 0944                        3F            .byte	$3F
02810                                           ! 761  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02811 0945                        00            .byte	0
02812 0946                        3F            .byte	$3F
02813 0947                        00            .byte	0
02814 0948                        3F            .byte	$3F
02815 0949                        00            .byte	0
02816 094A                        3F            .byte	$3F
02817 094B                        00            .byte	0
02818 094C                        3F            .byte	$3F
02819                                           ! 762  0x01, 0x00, 0x0f, 0x00,
02820 094D                        01            .byte	1
02821 094E                        00            .byte	0
02822 094F                        0F            .byte	$F
02823 0950                        00            .byte	0
02824                                           ! 763  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02825 0951                        00            .byte	0
02826 0952                        00            .byte	0
02827 0953                        00            .byte	0
02828 0954                        00            .byte	0
02829 0955                        00            .byte	0
02830 0956                        00            .byte	0
02831 0957                        05            .byte	5
02832 0958                        0F            .byte	$F
02833 0959                        FF            .byte	$FF
02834                                           ! 764 },
02835                                           ! 765 {
02836                                           ! 766  80, 29, 16, 0x00, 0x00,
02837 095A                        50            .byte	$50
02838 095B                        1D            .byte	$1D
02839 095C                        10            .byte	$10
02840 095D                        00            .byte	0
02841 095E                        00            .byte	0
02842                                           ! 767  0x01, 0x0f, 0x00, 0x06,
02843 095F                        01            .byte	1
02844 0960                        0F            .byte	$F
02845 0961                        00            .byte	0
02846 0962                        06            .byte	6
02847                                           ! 768  0xe3,
02848 0963                        E3            .byte	$E3
02849                                           ! 769  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02850 0964                        5F            .byte	$5F
02851 0965                        4F            .byte	$4F
02852 0966                        50            .byte	$50
02853 0967                        82            .byte	$82
02854 0968                        54            .byte	$54
02855 0969                        80            .byte	$80
02856 096A                        0B            .byte	$B
02857 096B                        3E            .byte	$3E
02858                                           ! 770  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02859 096C                        00            .byte	0
02860 096D                        40            .byte	$40
02861 096E                        00            .byte	0
02862 096F                        00            .byte	0
02863 0970                        00            .byte	0
02864 0971                        00            .byte	0
02865 0972                        00            .byte	0
02866 0973                        00            .byte	0
02867                                           ! 771  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02868 0974                        EA            .byte	$EA
02869 0975                        8C            .byte	$8C
02870 0976                        DF            .byte	$DF
02871 0977                        28            .byte	$28
02872 0978                        00            .byte	0
02873 0979                        E7            .byte	$E7
02874 097A                        04            .byte	4
02875 097B                        E3            .byte	$E3
02876                                           ! 772  0xff,
02877 097C                        FF            .byte	$FF
02878                                           ! 773  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02879 097D                        00            .byte	0
02880 097E                        01            .byte	1
02881 097F                        02            .byte	2
02882 0980                        03            .byte	3
02883 0981                        04            .byte	4
02884 0982                        05            .byte	5
02885 0983                        14            .byte	$14
02886 0984                        07            .byte	7
02887                                           ! 774  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02888 0985                        38            .byte	$38
02889 0986                        39            .byte	$39
02890 0987                        3A            .byte	$3A
02891 0988                        3B            .byte	$3B
02892 0989                        3C            .byte	$3C
02893 098A                        3D            .byte	$3D
02894 098B                        3E            .byte	$3E
02895 098C                        3F            .byte	$3F
02896                                           ! 775  0x01, 0x00, 0x0f, 0x00,
02897 098D                        01            .byte	1
02898 098E                        00            .byte	0
02899 098F                        0F            .byte	$F
02900 0990                        00            .byte	0
02901                                           ! 776  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02902 0991                        00            .byte	0
02903 0992                        00            .byte	0
02904 0993                        00            .byte	0
02905 0994                        00            .byte	0
02906 0995                        00            .byte	0
02907 0996                        00            .byte	0
02908 0997                        05            .byte	5
02909 0998                        0F            .byte	$F
02910 0999                        FF            .byte	$FF
02911                                           ! 777 },
02912                                           ! 778 {
02913                                           ! 779  40, 24, 8, 0x00, 0x00,
02914 099A                        28            .byte	$28
02915 099B                        18            .byte	$18
02916 099C                        08            .byte	8
02917 099D                        00            .byte	0
02918 099E                        00            .byte	0
02919                                           ! 780  0x01, 0x0f, 0x00, 0x0e,
02920 099F                        01            .byte	1
02921 09A0                        0F            .byte	$F
02922 09A1                        00            .byte	0
02923 09A2                        0E            .byte	$E
02924                                           ! 781  0x63,
02925 09A3                        63            .byte	$63
02926                                           ! 782  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02927 09A4                        5F            .byte	$5F
02928 09A5                        4F            .byte	$4F
02929 09A6                        50            .byte	$50
02930 09A7                        82            .byte	$82
02931 09A8                        54            .byte	$54
02932 09A9                        80            .byte	$80
02933 09AA                        BF            .byte	$BF
02934 09AB                        1F            .byte	$1F
02935                                           ! 783  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02936 09AC                        00            .byte	0
02937 09AD                        41            .byte	$41
02938 09AE                        00            .byte	0
02939 09AF                        00            .byte	0
02940 09B0                        00            .byte	0
02941 09B1                        00            .byte	0
02942 09B2                        00            .byte	0
02943 09B3                        00            .byte	0
02944                                           ! 784  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02945 09B4                        9C            .byte	$9C
02946 09B5                        8E            .byte	$8E
02947 09B6                        8F            .byte	$8F
02948 09B7                        28            .byte	$28
02949 09B8                        40            .byte	$40
02950 09B9                        96            .byte	$96
02951 09BA                        B9            .byte	$B9
02952 09BB                        A3            .byte	$A3
02953                                           ! 785  0xff,
02954 09BC                        FF            .byte	$FF
02955                                           ! 786  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02956 09BD                        00            .byte	0
02957 09BE                        01            .byte	1
02958 09BF                        02            .byte	2
02959 09C0                        03            .byte	3
02960 09C1                        04            .byte	4
02961 09C2                        05            .byte	5
02962 09C3                        06            .byte	6
02963 09C4                        07            .byte	7
02964                                           ! 787  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02965 09C5                        08            .byte	8
02966 09C6                        09            .byte	9
02967 09C7                        0A            .byte	$A
02968 09C8                        0B            .byte	$B
02969 09C9                        0C            .byte	$C
02970 09CA                        0D            .byte	$D
02971 09CB                        0E            .byte	$E
02972 09CC                        0F            .byte	$F
02973                                           ! 788  0x41, 0x00, 0x0f, 0x00,
02974 09CD                        41            .byte	$41
02975 09CE                        00            .byte	0
02976 09CF                        0F            .byte	$F
02977 09D0                        00            .byte	0
02978                                           ! 789  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02979 09D1                        00            .byte	0
02980 09D2                        00            .byte	0
02981 09D3                        00            .byte	0
02982 09D4                        00            .byte	0
02983 09D5                        00            .byte	0
02984 09D6                        40            .byte	$40
02985 09D7                        05            .byte	5
02986 09D8                        0F            .byte	$F
02987 09D9                        FF            .byte	$FF
02988                                           ! 790 },
02989                                           ! 791 {
02990                                           ! 792  100, 36, 16, 0x00, 0x00,
02991 09DA                        64            .byte	$64
02992 09DB                        24            .byte	$24
02993 09DC                        10            .byte	$10
02994 09DD                        00            .byte	0
02995 09DE                        00            .byte	0
02996                                           ! 793  0x01, 0x0f, 0x00, 0x06,
02997 09DF                        01            .byte	1
02998 09E0                        0F            .byte	$F
02999 09E1                        00            .byte	0
03000 09E2                        06            .byte	6
03001                                           ! 794  0xe3,
03002 09E3                        E3            .byte	$E3
03003                                           ! 795  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
03004 09E4                        7F            .byte	$7F
03005 09E5                        63            .byte	$63
03006 09E6                        63            .byte	$63
03007 09E7                        83            .byte	$83
03008 09E8                        6B            .byte	$6B
03009 09E9                        1B            .byte	$1B
03010 09EA                        72            .byte	$72
03011 09EB                        F0            .byte	$F0
03012                                           ! 796  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
03013 09EC                        00            .byte	0
03014 09ED                        60            .byte	$60
03015 09EE                        00            .byte	0
03016 09EF                        00            .byte	0
03017 09F0                        00            .byte	0
03018 09F1                        00            .byte	0
03019 09F2                        00            .byte	0
03020 09F3                        00            .byte	0
03021                                           ! 797  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
03022 09F4                        59            .byte	$59
03023 09F5                        8D            .byte	$8D
03024 09F6                        57            .byte	$57
03025 09F7                        32            .byte	$32
03026 09F8                        00            .byte	0
03027 09F9                        57            .byte	$57
03028 09FA                        73            .byte	$73
03029 09FB                        E3            .byte	$E3
03030                                           ! 798  0xff,
03031 09FC                        FF            .byte	$FF
03032                                           ! 799  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03033 09FD                        00            .byte	0
03034 09FE                        01            .byte	1
03035 09FF                        02            .byte	2
03036 0A00                        03            .byte	3
03037 0A01                        04            .byte	4
03038 0A02                        05            .byte	5
03039 0A03                        14            .byte	$14
03040 0A04                        07            .byte	7
03041                                           ! 800  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03042 0A05                        38            .byte	$38
03043 0A06                        39            .byte	$39
03044 0A07                        3A            .byte	$3A
03045 0A08                        3B            .byte	$3B
03046 0A09                        3C            .byte	$3C
03047 0A0A                        3D            .byte	$3D
03048 0A0B                        3E            .byte	$3E
03049 0A0C                        3F            .byte	$3F
03050                                           ! 801  0x01, 0x00, 0x0f, 0x00,
03051 0A0D                        01            .byte	1
03052 0A0E                        00            .byte	0
03053 0A0F                        0F            .byte	$F
03054 0A10                        00            .byte	0
03055                                           ! 802  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03056 0A11                        00            .byte	0
03057 0A12                        00            .byte	0
03058 0A13                        00            .byte	0
03059 0A14                        00            .byte	0
03060 0A15                        00            .byte	0
03061 0A16                        00            .byte	0
03062 0A17                        05            .byte	5
03063 0A18                        0F            .byte	$F
03064 0A19                        FF            .byte	$FF
03065                                           ! 803 },
03066                                           ! 804 };
03067                                           !BCC_EOS
03068                                           ! 805 static Bit8u palette0[63+1][3]=
03069                                           ! 806 {
03070                       00000A1A            _palette0:
03071                                           ! 807   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03072 0A1A                        00            .byte	0
03073 0A1B                        00            .byte	0
03074 0A1C                        00            .byte	0
03075 0A1D                        00            .byte	0
03076 0A1E                        00            .byte	0
03077 0A1F                        00            .byte	0
03078 0A20                        00            .byte	0
03079 0A21                        00            .byte	0
03080 0A22                        00            .byte	0
03081 0A23                        00            .byte	0
03082 0A24                        00            .byte	0
03083 0A25                        00            .byte	0
03084 0A26                        00            .byte	0
03085 0A27                        00            .byte	0
03086 0A28                        00            .byte	0
03087 0A29                        00            .byte	0
03088 0A2A                        00            .byte	0
03089 0A2B                        00            .byte	0
03090 0A2C                        00            .byte	0
03091 0A2D                        00            .byte	0
03092 0A2E                        00            .byte	0
03093 0A2F                        00            .byte	0
03094 0A30                        00            .byte	0
03095 0A31                        00            .byte	0
03096                                           ! 808   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a
03097 0A32                        2A            .byte	$2A
03098 0A33                        2A            .byte	$2A
03099 0A34                        2A            .byte	$2A
03100 0A35                        2A            .byte	$2A
03101 0A36                        2A            .byte	$2A
03102 0A37                        2A            .byte	$2A
03103                                           ! 808 ,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03104 0A38                        2A            .byte	$2A
03105 0A39                        2A            .byte	$2A
03106 0A3A                        2A            .byte	$2A
03107 0A3B                        2A            .byte	$2A
03108 0A3C                        2A            .byte	$2A
03109 0A3D                        2A            .byte	$2A
03110 0A3E                        2A            .byte	$2A
03111 0A3F                        2A            .byte	$2A
03112 0A40                        2A            .byte	$2A
03113 0A41                        2A            .byte	$2A
03114 0A42                        2A            .byte	$2A
03115 0A43                        2A            .byte	$2A
03116 0A44                        2A            .byte	$2A
03117 0A45                        2A            .byte	$2A
03118 0A46                        2A            .byte	$2A
03119 0A47                        2A            .byte	$2A
03120 0A48                        2A            .byte	$2A
03121 0A49                        2A            .byte	$2A
03122                                           ! 809   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03123 0A4A                        2A            .byte	$2A
03124 0A4B                        2A            .byte	$2A
03125 0A4C                        2A            .byte	$2A
03126 0A4D                        2A            .byte	$2A
03127 0A4E                        2A            .byte	$2A
03128 0A4F                        2A            .byte	$2A
03129 0A50                        2A            .byte	$2A
03130 0A51                        2A            .byte	$2A
03131 0A52                        2A            .byte	$2A
03132 0A53                        2A            .byte	$2A
03133 0A54                        2A            .byte	$2A
03134 0A55                        2A            .byte	$2A
03135 0A56                        2A            .byte	$2A
03136 0A57                        2A            .byte	$2A
03137 0A58                        2A            .byte	$2A
03138 0A59                        2A            .byte	$2A
03139 0A5A                        2A            .byte	$2A
03140 0A5B                        2A            .byte	$2A
03141 0A5C                        2A            .byte	$2A
03142 0A5D                        2A            .byte	$2A
03143 0A5E                        2A            .byte	$2A
03144 0A5F                        2A            .byte	$2A
03145 0A60                        2A            .byte	$2A
03146 0A61                        2A            .byte	$2A
03147                                           ! 810   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03148 0A62                        3F            .byte	$3F
03149 0A63                        3F            .byte	$3F
03150 0A64                        3F            .byte	$3F
03151 0A65                        3F            .byte	$3F
03152 0A66                        3F            .byte	$3F
03153 0A67                        3F            .byte	$3F
03154 0A68                        3F            .byte	$3F
03155 0A69                        3F            .byte	$3F
03156 0A6A                        3F            .byte	$3F
03157 0A6B                        3F            .byte	$3F
03158 0A6C                        3F            .byte	$3F
03159 0A6D                        3F            .byte	$3F
03160 0A6E                        3F            .byte	$3F
03161 0A6F                        3F            .byte	$3F
03162 0A70                        3F            .byte	$3F
03163 0A71                        3F            .byte	$3F
03164 0A72                        3F            .byte	$3F
03165 0A73                        3F            .byte	$3F
03166 0A74                        3F            .byte	$3F
03167 0A75                        3F            .byte	$3F
03168 0A76                        3F            .byte	$3F
03169 0A77                        3F            .byte	$3F
03170 0A78                        3F            .byte	$3F
03171 0A79                        3F            .byte	$3F
03172                                           ! 811   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03173 0A7A                        00            .byte	0
03174 0A7B                        00            .byte	0
03175 0A7C                        00            .byte	0
03176 0A7D                        00            .byte	0
03177 0A7E                        00            .byte	0
03178 0A7F                        00            .byte	0
03179 0A80                        00            .byte	0
03180 0A81                        00            .byte	0
03181 0A82                        00            .byte	0
03182 0A83                        00            .byte	0
03183 0A84                        00            .byte	0
03184 0A85                        00            .byte	0
03185 0A86                        00            .byte	0
03186 0A87                        00            .byte	0
03187 0A88                        00            .byte	0
03188 0A89                        00            .byte	0
03189 0A8A                        00            .byte	0
03190 0A8B                        00            .byte	0
03191 0A8C                        00            .byte	0
03192 0A8D                        00            .byte	0
03193 0A8E                        00            .byte	0
03194 0A8F                        00            .byte	0
03195 0A90                        00            .byte	0
03196 0A91                        00            .byte	0
03197                                           ! 812   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03198 0A92                        2A            .byte	$2A
03199 0A93                        2A            .byte	$2A
03200 0A94                        2A            .byte	$2A
03201 0A95                        2A            .byte	$2A
03202 0A96                        2A            .byte	$2A
03203 0A97                        2A            .byte	$2A
03204 0A98                        2A            .byte	$2A
03205 0A99                        2A            .byte	$2A
03206 0A9A                        2A            .byte	$2A
03207 0A9B                        2A            .byte	$2A
03208 0A9C                        2A            .byte	$2A
03209 0A9D                        2A            .byte	$2A
03210 0A9E                        2A            .byte	$2A
03211 0A9F                        2A            .byte	$2A
03212 0AA0                        2A            .byte	$2A
03213 0AA1                        2A            .byte	$2A
03214 0AA2                        2A            .byte	$2A
03215 0AA3                        2A            .byte	$2A
03216 0AA4                        2A            .byte	$2A
03217 0AA5                        2A            .byte	$2A
03218 0AA6                        2A            .byte	$2A
03219 0AA7                        2A            .byte	$2A
03220 0AA8                        2A            .byte	$2A
03221 0AA9                        2A            .byte	$2A
03222                                           ! 813   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03223 0AAA                        2A            .byte	$2A
03224 0AAB                        2A            .byte	$2A
03225 0AAC                        2A            .byte	$2A
03226 0AAD                        2A            .byte	$2A
03227 0AAE                        2A            .byte	$2A
03228 0AAF                        2A            .byte	$2A
03229 0AB0                        2A            .byte	$2A
03230 0AB1                        2A            .byte	$2A
03231 0AB2                        2A            .byte	$2A
03232 0AB3                        2A            .byte	$2A
03233 0AB4                        2A            .byte	$2A
03234 0AB5                        2A            .byte	$2A
03235 0AB6                        2A            .byte	$2A
03236 0AB7                        2A            .byte	$2A
03237 0AB8                        2A            .byte	$2A
03238 0AB9                        2A            .byte	$2A
03239 0ABA                        2A            .byte	$2A
03240 0ABB                        2A            .byte	$2A
03241 0ABC                        2A            .byte	$2A
03242 0ABD                        2A            .byte	$2A
03243 0ABE                        2A            .byte	$2A
03244 0ABF                        2A            .byte	$2A
03245 0AC0                        2A            .byte	$2A
03246 0AC1                        2A            .byte	$2A
03247                                           ! 814   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03248 0AC2                        3F            .byte	$3F
03249 0AC3                        3F            .byte	$3F
03250 0AC4                        3F            .byte	$3F
03251 0AC5                        3F            .byte	$3F
03252 0AC6                        3F            .byte	$3F
03253 0AC7                        3F            .byte	$3F
03254 0AC8                        3F            .byte	$3F
03255 0AC9                        3F            .byte	$3F
03256 0ACA                        3F            .byte	$3F
03257 0ACB                        3F            .byte	$3F
03258 0ACC                        3F            .byte	$3F
03259 0ACD                        3F            .byte	$3F
03260 0ACE                        3F            .byte	$3F
03261 0ACF                        3F            .byte	$3F
03262 0AD0                        3F            .byte	$3F
03263 0AD1                        3F            .byte	$3F
03264 0AD2                        3F            .byte	$3F
03265 0AD3                        3F            .byte	$3F
03266 0AD4                        3F            .byte	$3F
03267 0AD5                        3F            .byte	$3F
03268 0AD6                        3F            .byte	$3F
03269 0AD7                        3F            .byte	$3F
03270 0AD8                        3F            .byte	$3F
03271                                           ! 815 };
03272 0AD9                        3F            .byte	$3F
03273                                           !BCC_EOS
03274                                           ! 816 static Bit8u palette1[63+1][3]=
03275                                           ! 817 {
03276                       00000ADA            _palette1:
03277                                           ! 818   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03278 0ADA                        00            .byte	0
03279 0ADB                        00            .byte	0
03280 0ADC                        00            .byte	0
03281 0ADD                        00            .byte	0
03282 0ADE                        00            .byte	0
03283 0ADF                        2A            .byte	$2A
03284 0AE0                        00            .byte	0
03285 0AE1                        2A            .byte	$2A
03286 0AE2                        00            .byte	0
03287 0AE3                        00            .byte	0
03288 0AE4                        2A            .byte	$2A
03289 0AE5                        2A            .byte	$2A
03290 0AE6                        2A            .byte	$2A
03291 0AE7                        00            .byte	0
03292 0AE8                        00            .byte	0
03293 0AE9                        2A            .byte	$2A
03294 0AEA                        00            .byte	0
03295 0AEB                        2A            .byte	$2A
03296 0AEC                        2A            .byte	$2A
03297 0AED                        15            .byte	$15
03298 0AEE                        00            .byte	0
03299 0AEF                        2A            .byte	$2A
03300 0AF0                        2A            .byte	$2A
03301 0AF1                        2A            .byte	$2A
03302                                           ! 819   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03303 0AF2                        00            .byte	0
03304 0AF3                        00            .byte	0
03305 0AF4                        00            .byte	0
03306 0AF5                        00            .byte	0
03307 0AF6                        00            .byte	0
03308 0AF7                        2A            .byte	$2A
03309 0AF8                        00            .byte	0
03310 0AF9                        2A            .byte	$2A
03311 0AFA                        00            .byte	0
03312 0AFB                        00            .byte	0
03313 0AFC                        2A            .byte	$2A
03314 0AFD                        2A            .byte	$2A
03315 0AFE                        2A            .byte	$2A
03316 0AFF                        00            .byte	0
03317 0B00                        00            .byte	0
03318 0B01                        2A            .byte	$2A
03319 0B02                        00            .byte	0
03320 0B03                        2A            .byte	$2A
03321 0B04                        2A            .byte	$2A
03322 0B05                        15            .byte	$15
03323 0B06                        00            .byte	0
03324 0B07                        2A            .byte	$2A
03325 0B08                        2A            .byte	$2A
03326 0B09                        2A            .byte	$2A
03327                                           ! 820   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03328 0B0A                        15            .byte	$15
03329 0B0B                        15            .byte	$15
03330 0B0C                        15            .byte	$15
03331 0B0D                        15            .byte	$15
03332 0B0E                        15            .byte	$15
03333 0B0F                        3F            .byte	$3F
03334 0B10                        15            .byte	$15
03335 0B11                        3F            .byte	$3F
03336 0B12                        15            .byte	$15
03337 0B13                        15            .byte	$15
03338 0B14                        3F            .byte	$3F
03339 0B15                        3F            .byte	$3F
03340 0B16                        3F            .byte	$3F
03341 0B17                        15            .byte	$15
03342 0B18                        15            .byte	$15
03343 0B19                        3F            .byte	$3F
03344 0B1A                        15            .byte	$15
03345 0B1B                        3F            .byte	$3F
03346 0B1C                        3F            .byte	$3F
03347 0B1D                        3F            .byte	$3F
03348 0B1E                        15            .byte	$15
03349 0B1F                        3F            .byte	$3F
03350 0B20                        3F            .byte	$3F
03351 0B21                        3F            .byte	$3F
03352                                           ! 821   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03353 0B22                        15            .byte	$15
03354 0B23                        15            .byte	$15
03355 0B24                        15            .byte	$15
03356 0B25                        15            .byte	$15
03357 0B26                        15            .byte	$15
03358 0B27                        3F            .byte	$3F
03359 0B28                        15            .byte	$15
03360 0B29                        3F            .byte	$3F
03361 0B2A                        15            .byte	$15
03362 0B2B                        15            .byte	$15
03363 0B2C                        3F            .byte	$3F
03364 0B2D                        3F            .byte	$3F
03365 0B2E                        3F            .byte	$3F
03366 0B2F                        15            .byte	$15
03367 0B30                        15            .byte	$15
03368 0B31                        3F            .byte	$3F
03369 0B32                        15            .byte	$15
03370 0B33                        3F            .byte	$3F
03371 0B34                        3F            .byte	$3F
03372 0B35                        3F            .byte	$3F
03373 0B36                        15            .byte	$15
03374 0B37                        3F            .byte	$3F
03375 0B38                        3F            .byte	$3F
03376 0B39                        3F            .byte	$3F
03377                                           ! 822   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03378 0B3A                        00            .byte	0
03379 0B3B                        00            .byte	0
03380 0B3C                        00            .byte	0
03381 0B3D                        00            .byte	0
03382 0B3E                        00            .byte	0
03383 0B3F                        2A            .byte	$2A
03384 0B40                        00            .byte	0
03385 0B41                        2A            .byte	$2A
03386 0B42                        00            .byte	0
03387 0B43                        00            .byte	0
03388 0B44                        2A            .byte	$2A
03389 0B45                        2A            .byte	$2A
03390 0B46                        2A            .byte	$2A
03391 0B47                        00            .byte	0
03392 0B48                        00            .byte	0
03393 0B49                        2A            .byte	$2A
03394 0B4A                        00            .byte	0
03395 0B4B                        2A            .byte	$2A
03396 0B4C                        2A            .byte	$2A
03397 0B4D                        15            .byte	$15
03398 0B4E                        00            .byte	0
03399 0B4F                        2A            .byte	$2A
03400 0B50                        2A            .byte	$2A
03401 0B51                        2A            .byte	$2A
03402                                           ! 823   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03403 0B52                        00            .byte	0
03404 0B53                        00            .byte	0
03405 0B54                        00            .byte	0
03406 0B55                        00            .byte	0
03407 0B56                        00            .byte	0
03408 0B57                        2A            .byte	$2A
03409 0B58                        00            .byte	0
03410 0B59                        2A            .byte	$2A
03411 0B5A                        00            .byte	0
03412 0B5B                        00            .byte	0
03413 0B5C                        2A            .byte	$2A
03414 0B5D                        2A            .byte	$2A
03415 0B5E                        2A            .byte	$2A
03416 0B5F                        00            .byte	0
03417 0B60                        00            .byte	0
03418 0B61                        2A            .byte	$2A
03419 0B62                        00            .byte	0
03420 0B63                        2A            .byte	$2A
03421 0B64                        2A            .byte	$2A
03422 0B65                        15            .byte	$15
03423 0B66                        00            .byte	0
03424 0B67                        2A            .byte	$2A
03425 0B68                        2A            .byte	$2A
03426 0B69                        2A            .byte	$2A
03427                                           ! 824   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03428 0B6A                        15            .byte	$15
03429 0B6B                        15            .byte	$15
03430 0B6C                        15            .byte	$15
03431 0B6D                        15            .byte	$15
03432 0B6E                        15            .byte	$15
03433 0B6F                        3F            .byte	$3F
03434 0B70                        15            .byte	$15
03435 0B71                        3F            .byte	$3F
03436 0B72                        15            .byte	$15
03437 0B73                        15            .byte	$15
03438 0B74                        3F            .byte	$3F
03439 0B75                        3F            .byte	$3F
03440 0B76                        3F            .byte	$3F
03441 0B77                        15            .byte	$15
03442 0B78                        15            .byte	$15
03443 0B79                        3F            .byte	$3F
03444 0B7A                        15            .byte	$15
03445 0B7B                        3F            .byte	$3F
03446 0B7C                        3F            .byte	$3F
03447 0B7D                        3F            .byte	$3F
03448 0B7E                        15            .byte	$15
03449 0B7F                        3F            .byte	$3F
03450 0B80                        3F            .byte	$3F
03451 0B81                        3F            .byte	$3F
03452                                           ! 825   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03453 0B82                        15            .byte	$15
03454 0B83                        15            .byte	$15
03455 0B84                        15            .byte	$15
03456 0B85                        15            .byte	$15
03457 0B86                        15            .byte	$15
03458 0B87                        3F            .byte	$3F
03459 0B88                        15            .byte	$15
03460 0B89                        3F            .byte	$3F
03461 0B8A                        15            .byte	$15
03462 0B8B                        15            .byte	$15
03463 0B8C                        3F            .byte	$3F
03464 0B8D                        3F            .byte	$3F
03465 0B8E                        3F            .byte	$3F
03466 0B8F                        15            .byte	$15
03467 0B90                        15            .byte	$15
03468 0B91                        3F            .byte	$3F
03469 0B92                        15            .byte	$15
03470 0B93                        3F            .byte	$3F
03471 0B94                        3F            .byte	$3F
03472 0B95                        3F            .byte	$3F
03473 0B96                        15            .byte	$15
03474 0B97                        3F            .byte	$3F
03475 0B98                        3F            .byte	$3F
03476                                           ! 826 };
03477 0B99                        3F            .byte	$3F
03478                                           !BCC_EOS
03479                                           ! 827 static Bit8u palette2[63+1][3]=
03480                                           ! 828 {
03481                       00000B9A            _palette2:
03482                                           ! 829   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a
03483 0B9A                        00            .byte	0
03484 0B9B                        00            .byte	0
03485 0B9C                        00            .byte	0
03486 0B9D                        00            .byte	0
03487 0B9E                        00            .byte	0
03488 0B9F                        2A            .byte	$2A
03489 0BA0                        00            .byte	0
03490 0BA1                        2A            .byte	$2A
03491 0BA2                        00            .byte	0
03492 0BA3                        00            .byte	0
03493 0BA4                        2A            .byte	$2A
03494                                           ! 829 , 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03495 0BA5                        2A            .byte	$2A
03496 0BA6                        2A            .byte	$2A
03497 0BA7                        00            .byte	0
03498 0BA8                        00            .byte	0
03499 0BA9                        2A            .byte	$2A
03500 0BAA                        00            .byte	0
03501 0BAB                        2A            .byte	$2A
03502 0BAC                        2A            .byte	$2A
03503 0BAD                        2A            .byte	$2A
03504 0BAE                        00            .byte	0
03505 0BAF                        2A            .byte	$2A
03506 0BB0                        2A            .byte	$2A
03507 0BB1                        2A            .byte	$2A
03508                                           ! 830   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03509 0BB2                        00            .byte	0
03510 0BB3                        00            .byte	0
03511 0BB4                        15            .byte	$15
03512 0BB5                        00            .byte	0
03513 0BB6                        00            .byte	0
03514 0BB7                        3F            .byte	$3F
03515 0BB8                        00            .byte	0
03516 0BB9                        2A            .byte	$2A
03517 0BBA                        15            .byte	$15
03518 0BBB                        00            .byte	0
03519 0BBC                        2A            .byte	$2A
03520 0BBD                        3F            .byte	$3F
03521 0BBE                        2A            .byte	$2A
03522 0BBF                        00            .byte	0
03523 0BC0                        15            .byte	$15
03524 0BC1                        2A            .byte	$2A
03525 0BC2                        00            .byte	0
03526 0BC3                        3F            .byte	$3F
03527 0BC4                        2A            .byte	$2A
03528 0BC5                        2A            .byte	$2A
03529 0BC6                        15            .byte	$15
03530 0BC7                        2A            .byte	$2A
03531 0BC8                        2A            .byte	$2A
03532 0BC9                        3F            .byte	$3F
03533                                           ! 831   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03534 0BCA                        00            .byte	0
03535 0BCB                        15            .byte	$15
03536 0BCC                        00            .byte	0
03537 0BCD                        00            .byte	0
03538 0BCE                        15            .byte	$15
03539 0BCF                        2A            .byte	$2A
03540 0BD0                        00            .byte	0
03541 0BD1                        3F            .byte	$3F
03542 0BD2                        00            .byte	0
03543 0BD3                        00            .byte	0
03544 0BD4                        3F            .byte	$3F
03545 0BD5                        2A            .byte	$2A
03546 0BD6                        2A            .byte	$2A
03547 0BD7                        15            .byte	$15
03548 0BD8                        00            .byte	0
03549 0BD9                        2A            .byte	$2A
03550 0BDA                        15            .byte	$15
03551 0BDB                        2A            .byte	$2A
03552 0BDC                        2A            .byte	$2A
03553 0BDD                        3F            .byte	$3F
03554 0BDE                        00            .byte	0
03555 0BDF                        2A            .byte	$2A
03556 0BE0                        3F            .byte	$3F
03557 0BE1                        2A            .byte	$2A
03558                                           ! 832   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03559 0BE2                        00            .byte	0
03560 0BE3                        15            .byte	$15
03561 0BE4                        15            .byte	$15
03562 0BE5                        00            .byte	0
03563 0BE6                        15            .byte	$15
03564 0BE7                        3F            .byte	$3F
03565 0BE8                        00            .byte	0
03566 0BE9                        3F            .byte	$3F
03567 0BEA                        15            .byte	$15
03568 0BEB                        00            .byte	0
03569 0BEC                        3F            .byte	$3F
03570 0BED                        3F            .byte	$3F
03571 0BEE                        2A            .byte	$2A
03572 0BEF                        15            .byte	$15
03573 0BF0                        15            .byte	$15
03574 0BF1                        2A            .byte	$2A
03575 0BF2                        15            .byte	$15
03576 0BF3                        3F            .byte	$3F
03577 0BF4                        2A            .byte	$2A
03578 0BF5                        3F            .byte	$3F
03579 0BF6                        15            .byte	$15
03580 0BF7                        2A            .byte	$2A
03581 0BF8                        3F            .byte	$3F
03582 0BF9                        3F            .byte	$3F
03583                                           ! 833   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03584 0BFA                        15            .byte	$15
03585 0BFB                        00            .byte	0
03586 0BFC                        00            .byte	0
03587 0BFD                        15            .byte	$15
03588 0BFE                        00            .byte	0
03589 0BFF                        2A            .byte	$2A
03590 0C00                        15            .byte	$15
03591 0C01                        2A            .byte	$2A
03592 0C02                        00            .byte	0
03593 0C03                        15            .byte	$15
03594 0C04                        2A            .byte	$2A
03595 0C05                        2A            .byte	$2A
03596 0C06                        3F            .byte	$3F
03597 0C07                        00            .byte	0
03598 0C08                        00            .byte	0
03599 0C09                        3F            .byte	$3F
03600 0C0A                        00            .byte	0
03601 0C0B                        2A            .byte	$2A
03602 0C0C                        3F            .byte	$3F
03603 0C0D                        2A            .byte	$2A
03604 0C0E                        00            .byte	0
03605 0C0F                        3F            .byte	$3F
03606 0C10                        2A            .byte	$2A
03607 0C11                        2A            .byte	$2A
03608                                           ! 834   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03609 0C12                        15            .byte	$15
03610 0C13                        00            .byte	0
03611 0C14                        15            .byte	$15
03612 0C15                        15            .byte	$15
03613 0C16                        00            .byte	0
03614 0C17                        3F            .byte	$3F
03615 0C18                        15            .byte	$15
03616 0C19                        2A            .byte	$2A
03617 0C1A                        15            .byte	$15
03618 0C1B                        15            .byte	$15
03619 0C1C                        2A            .byte	$2A
03620 0C1D                        3F            .byte	$3F
03621 0C1E                        3F            .byte	$3F
03622 0C1F                        00            .byte	0
03623 0C20                        15            .byte	$15
03624 0C21                        3F            .byte	$3F
03625 0C22                        00            .byte	0
03626 0C23                        3F            .byte	$3F
03627 0C24                        3F            .byte	$3F
03628 0C25                        2A            .byte	$2A
03629 0C26                        15            .byte	$15
03630 0C27                        3F            .byte	$3F
03631 0C28                        2A            .byte	$2A
03632 0C29                        3F            .byte	$3F
03633                                           ! 835   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03634 0C2A                        15            .byte	$15
03635 0C2B                        15            .byte	$15
03636 0C2C                        00            .byte	0
03637 0C2D                        15            .byte	$15
03638 0C2E                        15            .byte	$15
03639 0C2F                        2A            .byte	$2A
03640 0C30                        15            .byte	$15
03641 0C31                        3F            .byte	$3F
03642 0C32                        00            .byte	0
03643 0C33                        15            .byte	$15
03644 0C34                        3F            .byte	$3F
03645 0C35                        2A            .byte	$2A
03646 0C36                        3F            .byte	$3F
03647 0C37                        15            .byte	$15
03648 0C38                        00            .byte	0
03649 0C39                        3F            .byte	$3F
03650 0C3A                        15            .byte	$15
03651 0C3B                        2A            .byte	$2A
03652 0C3C                        3F            .byte	$3F
03653 0C3D                        3F            .byte	$3F
03654 0C3E                        00            .byte	0
03655 0C3F                        3F            .byte	$3F
03656 0C40                        3F            .byte	$3F
03657 0C41                        2A            .byte	$2A
03658                                           ! 836   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03659 0C42                        15            .byte	$15
03660 0C43                        15            .byte	$15
03661 0C44                        15            .byte	$15
03662 0C45                        15            .byte	$15
03663 0C46                        15            .byte	$15
03664 0C47                        3F            .byte	$3F
03665 0C48                        15            .byte	$15
03666 0C49                        3F            .byte	$3F
03667 0C4A                        15            .byte	$15
03668 0C4B                        15            .byte	$15
03669 0C4C                        3F            .byte	$3F
03670 0C4D                        3F            .byte	$3F
03671 0C4E                        3F            .byte	$3F
03672 0C4F                        15            .byte	$15
03673 0C50                        15            .byte	$15
03674 0C51                        3F            .byte	$3F
03675 0C52                        15            .byte	$15
03676 0C53                        3F            .byte	$3F
03677 0C54                        3F            .byte	$3F
03678 0C55                        3F            .byte	$3F
03679 0C56                        15            .byte	$15
03680 0C57                        3F            .byte	$3F
03681 0C58                        3F            .byte	$3F
03682                                           ! 837 };
03683 0C59                        3F            .byte	$3F
03684                                           !BCC_EOS
03685                                           ! 838 static Bit8u palette3[256][3]=
03686                                           ! 839 {
03687                       00000C5A            _palette3:
03688                                           ! 840   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03689 0C5A                        00            .byte	0
03690 0C5B                        00            .byte	0
03691 0C5C                        00            .byte	0
03692 0C5D                        00            .byte	0
03693 0C5E                        00            .byte	0
03694 0C5F                        2A            .byte	$2A
03695 0C60                        00            .byte	0
03696 0C61                        2A            .byte	$2A
03697 0C62                        00            .byte	0
03698 0C63                        00            .byte	0
03699 0C64                        2A            .byte	$2A
03700 0C65                        2A            .byte	$2A
03701 0C66                        2A            .byte	$2A
03702 0C67                        00            .byte	0
03703 0C68                        00            .byte	0
03704 0C69                        2A            .byte	$2A
03705 0C6A                        00            .byte	0
03706 0C6B                        2A            .byte	$2A
03707 0C6C                        2A            .byte	$2A
03708 0C6D                        15            .byte	$15
03709 0C6E                        00            .byte	0
03710 0C6F                        2A            .byte	$2A
03711 0C70                        2A            .byte	$2A
03712 0C71                        2A            .byte	$2A
03713                                           ! 841   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03714 0C72                        15            .byte	$15
03715 0C73                        15            .byte	$15
03716 0C74                        15            .byte	$15
03717 0C75                        15            .byte	$15
03718 0C76                        15            .byte	$15
03719 0C77                        3F            .byte	$3F
03720 0C78                        15            .byte	$15
03721 0C79                        3F            .byte	$3F
03722 0C7A                        15            .byte	$15
03723 0C7B                        15            .byte	$15
03724 0C7C                        3F            .byte	$3F
03725 0C7D                        3F            .byte	$3F
03726 0C7E                        3F            .byte	$3F
03727 0C7F                        15            .byte	$15
03728 0C80                        15            .byte	$15
03729 0C81                        3F            .byte	$3F
03730 0C82                        15            .byte	$15
03731 0C83                        3F            .byte	$3F
03732 0C84                        3F            .byte	$3F
03733 0C85                        3F            .byte	$3F
03734 0C86                        15            .byte	$15
03735 0C87                        3F            .byte	$3F
03736 0C88                        3F            .byte	$3F
03737 0C89                        3F            .byte	$3F
03738                                           ! 842   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03739 0C8A                        00            .byte	0
03740 0C8B                        00            .byte	0
03741 0C8C                        00            .byte	0
03742 0C8D                        05            .byte	5
03743 0C8E                        05            .byte	5
03744 0C8F                        05            .byte	5
03745 0C90                        08            .byte	8
03746 0C91                        08            .byte	8
03747 0C92                        08            .byte	8
03748 0C93                        0B            .byte	$B
03749 0C94                        0B            .byte	$B
03750 0C95                        0B            .byte	$B
03751 0C96                        0E            .byte	$E
03752 0C97                        0E            .byte	$E
03753 0C98                        0E            .byte	$E
03754 0C99                        11            .byte	$11
03755 0C9A                        11            .byte	$11
03756 0C9B                        11            .byte	$11
03757 0C9C                        14            .byte	$14
03758 0C9D                        14            .byte	$14
03759 0C9E                        14            .byte	$14
03760 0C9F                        18            .byte	$18
03761 0CA0                        18            .byte	$18
03762 0CA1                        18            .byte	$18
03763                                           ! 843   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03764 0CA2                        1C            .byte	$1C
03765 0CA3                        1C            .byte	$1C
03766 0CA4                        1C            .byte	$1C
03767 0CA5                        20            .byte	$20
03768 0CA6                        20            .byte	$20
03769 0CA7                        20            .byte	$20
03770 0CA8                        24            .byte	$24
03771 0CA9                        24            .byte	$24
03772 0CAA                        24            .byte	$24
03773 0CAB                        28            .byte	$28
03774 0CAC                        28            .byte	$28
03775 0CAD                        28            .byte	$28
03776 0CAE                        2D            .byte	$2D
03777 0CAF                        2D            .byte	$2D
03778 0CB0                        2D            .byte	$2D
03779 0CB1                        32            .byte	$32
03780 0CB2                        32            .byte	$32
03781 0CB3                        32            .byte	$32
03782 0CB4                        38            .byte	$38
03783 0CB5                        38            .byte	$38
03784 0CB6                        38            .byte	$38
03785 0CB7                        3F            .byte	$3F
03786 0CB8                        3F            .byte	$3F
03787 0CB9                        3F            .byte	$3F
03788                                           ! 844   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03789 0CBA                        00            .byte	0
03790 0CBB                        00            .byte	0
03791 0CBC                        3F            .byte	$3F
03792 0CBD                        10            .byte	$10
03793 0CBE                        00            .byte	0
03794 0CBF                        3F            .byte	$3F
03795 0CC0                        1F            .byte	$1F
03796 0CC1                        00            .byte	0
03797 0CC2                        3F            .byte	$3F
03798 0CC3                        2F            .byte	$2F
03799 0CC4                        00            .byte	0
03800 0CC5                        3F            .byte	$3F
03801 0CC6                        3F            .byte	$3F
03802 0CC7                        00            .byte	0
03803 0CC8                        3F            .byte	$3F
03804 0CC9                        3F            .byte	$3F
03805 0CCA                        00            .byte	0
03806 0CCB                        2F            .byte	$2F
03807 0CCC                        3F            .byte	$3F
03808 0CCD                        00            .byte	0
03809 0CCE                        1F            .byte	$1F
03810 0CCF                        3F            .byte	$3F
03811 0CD0                        00            .byte	0
03812 0CD1                        10            .byte	$10
03813                                           ! 845   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03814 0CD2                        3F            .byte	$3F
03815 0CD3                        00            .byte	0
03816 0CD4                        00            .byte	0
03817 0CD5                        3F            .byte	$3F
03818 0CD6                        10            .byte	$10
03819 0CD7                        00            .byte	0
03820 0CD8                        3F            .byte	$3F
03821 0CD9                        1F            .byte	$1F
03822 0CDA                        00            .byte	0
03823 0CDB                        3F            .byte	$3F
03824 0CDC                        2F            .byte	$2F
03825 0CDD                        00            .byte	0
03826 0CDE                        3F            .byte	$3F
03827 0CDF                        3F            .byte	$3F
03828 0CE0                        00            .byte	0
03829 0CE1                        2F            .byte	$2F
03830 0CE2                        3F            .byte	$3F
03831 0CE3                        00            .byte	0
03832 0CE4                        1F            .byte	$1F
03833 0CE5                        3F            .byte	$3F
03834 0CE6                        00            .byte	0
03835 0CE7                        10            .byte	$10
03836 0CE8                        3F            .byte	$3F
03837 0CE9                        00            .byte	0
03838                                           ! 846   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03839 0CEA                        00            .byte	0
03840 0CEB                        3F            .byte	$3F
03841 0CEC                        00            .byte	0
03842 0CED                        00            .byte	0
03843 0CEE                        3F            .byte	$3F
03844 0CEF                        10            .byte	$10
03845 0CF0                        00            .byte	0
03846 0CF1                        3F            .byte	$3F
03847 0CF2                        1F            .byte	$1F
03848 0CF3                        00            .byte	0
03849 0CF4                        3F            .byte	$3F
03850 0CF5                        2F            .byte	$2F
03851 0CF6                        00            .byte	0
03852 0CF7                        3F            .byte	$3F
03853 0CF8                        3F            .byte	$3F
03854 0CF9                        00            .byte	0
03855 0CFA                        2F            .byte	$2F
03856 0CFB                        3F            .byte	$3F
03857 0CFC                        00            .byte	0
03858 0CFD                        1F            .byte	$1F
03859 0CFE                        3F            .byte	$3F
03860 0CFF                        00            .byte	0
03861 0D00                        10            .byte	$10
03862 0D01                        3F            .byte	$3F
03863                                           ! 847   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x2
03864 0D02                        1F            .byte	$1F
03865 0D03                        1F            .byte	$1F
03866 0D04                        3F            .byte	$3F
03867 0D05                        27            .byte	$27
03868 0D06                        1F            .byte	$1F
03869 0D07                        3F            .byte	$3F
03870 0D08                        2F            .byte	$2F
03871 0D09                        1F            .byte	$1F
03872 0D0A                        3F            .byte	$3F
03873 0D0B                        37            .byte	$37
03874 0D0C                        1F            .byte	$1F
03875 0D0D                        3F            .byte	$3F
03876 0D0E                        3F            .byte	$3F
03877 0D0F                        1F            .byte	$1F
03878 0D10                        3F            .byte	$3F
03879 0D11                        3F            .byte	$3F
03880 0D12                        1F            .byte	$1F
03881 0D13                        37            .byte	$37
03882 0D14                        3F            .byte	$3F
03883 0D15                        1F            .byte	$1F
03884 0D16                        2F            .byte	$2F
03885 0D17                        3F            .byte	$3F
03886 0D18                        1F            .byte	$1F
03887                                           ! 847 7,
03888 0D19                        27            .byte	$27
03889                                           ! 848   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03890 0D1A                        3F            .byte	$3F
03891 0D1B                        1F            .byte	$1F
03892 0D1C                        1F            .byte	$1F
03893 0D1D                        3F            .byte	$3F
03894 0D1E                        27            .byte	$27
03895 0D1F                        1F            .byte	$1F
03896 0D20                        3F            .byte	$3F
03897 0D21                        2F            .byte	$2F
03898 0D22                        1F            .byte	$1F
03899 0D23                        3F            .byte	$3F
03900 0D24                        37            .byte	$37
03901 0D25                        1F            .byte	$1F
03902 0D26                        3F            .byte	$3F
03903 0D27                        3F            .byte	$3F
03904 0D28                        1F            .byte	$1F
03905 0D29                        37            .byte	$37
03906 0D2A                        3F            .byte	$3F
03907 0D2B                        1F            .byte	$1F
03908 0D2C                        2F            .byte	$2F
03909 0D2D                        3F            .byte	$3F
03910 0D2E                        1F            .byte	$1F
03911 0D2F                        27            .byte	$27
03912 0D30                        3F            .byte	$3F
03913 0D31                        1F            .byte	$1F
03914                                           ! 849   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03915 0D32                        1F            .byte	$1F
03916 0D33                        3F            .byte	$3F
03917 0D34                        1F            .byte	$1F
03918 0D35                        1F            .byte	$1F
03919 0D36                        3F            .byte	$3F
03920 0D37                        27            .byte	$27
03921 0D38                        1F            .byte	$1F
03922 0D39                        3F            .byte	$3F
03923 0D3A                        2F            .byte	$2F
03924 0D3B                        1F            .byte	$1F
03925 0D3C                        3F            .byte	$3F
03926 0D3D                        37            .byte	$37
03927 0D3E                        1F            .byte	$1F
03928 0D3F                        3F            .byte	$3F
03929 0D40                        3F            .byte	$3F
03930 0D41                        1F            .byte	$1F
03931 0D42                        37            .byte	$37
03932 0D43                        3F            .byte	$3F
03933 0D44                        1F            .byte	$1F
03934 0D45                        2F            .byte	$2F
03935 0D46                        3F            .byte	$3F
03936 0D47                        1F            .byte	$1F
03937 0D48                        27            .byte	$27
03938 0D49                        3F            .byte	$3F
03939                                           ! 850   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03940 0D4A                        2D            .byte	$2D
03941 0D4B                        2D            .byte	$2D
03942 0D4C                        3F            .byte	$3F
03943 0D4D                        31            .byte	$31
03944 0D4E                        2D            .byte	$2D
03945 0D4F                        3F            .byte	$3F
03946 0D50                        36            .byte	$36
03947 0D51                        2D            .byte	$2D
03948 0D52                        3F            .byte	$3F
03949 0D53                        3A            .byte	$3A
03950 0D54                        2D            .byte	$2D
03951 0D55                        3F            .byte	$3F
03952 0D56                        3F            .byte	$3F
03953 0D57                        2D            .byte	$2D
03954 0D58                        3F            .byte	$3F
03955 0D59                        3F            .byte	$3F
03956 0D5A                        2D            .byte	$2D
03957 0D5B                        3A            .byte	$3A
03958 0D5C                        3F            .byte	$3F
03959 0D5D                        2D            .byte	$2D
03960 0D5E                        36            .byte	$36
03961 0D5F                        3F            .byte	$3F
03962 0D60                        2D            .byte	$2D
03963 0D61                        31            .byte	$31
03964                                           ! 851   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03965 0D62                        3F            .byte	$3F
03966 0D63                        2D            .byte	$2D
03967 0D64                        2D            .byte	$2D
03968 0D65                        3F            .byte	$3F
03969 0D66                        31            .byte	$31
03970 0D67                        2D            .byte	$2D
03971 0D68                        3F            .byte	$3F
03972 0D69                        36            .byte	$36
03973 0D6A                        2D            .byte	$2D
03974 0D6B                        3F            .byte	$3F
03975 0D6C                        3A            .byte	$3A
03976 0D6D                        2D            .byte	$2D
03977 0D6E                        3F            .byte	$3F
03978 0D6F                        3F            .byte	$3F
03979 0D70                        2D            .byte	$2D
03980 0D71                        3A            .byte	$3A
03981 0D72                        3F            .byte	$3F
03982 0D73                        2D            .byte	$2D
03983 0D74                        36            .byte	$36
03984 0D75                        3F            .byte	$3F
03985 0D76                        2D            .byte	$2D
03986 0D77                        31            .byte	$31
03987 0D78                        3F            .byte	$3F
03988 0D79                        2D            .byte	$2D
03989                                           ! 852   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03990 0D7A                        2D            .byte	$2D
03991 0D7B                        3F            .byte	$3F
03992 0D7C                        2D            .byte	$2D
03993 0D7D                        2D            .byte	$2D
03994 0D7E                        3F            .byte	$3F
03995 0D7F                        31            .byte	$31
03996 0D80                        2D            .byte	$2D
03997 0D81                        3F            .byte	$3F
03998 0D82                        36            .byte	$36
03999 0D83                        2D            .byte	$2D
04000 0D84                        3F            .byte	$3F
04001 0D85                        3A            .byte	$3A
04002 0D86                        2D            .byte	$2D
04003 0D87                        3F            .byte	$3F
04004 0D88                        3F            .byte	$3F
04005 0D89                        2D            .byte	$2D
04006 0D8A                        3A            .byte	$3A
04007 0D8B                        3F            .byte	$3F
04008 0D8C                        2D            .byte	$2D
04009 0D8D                        36            .byte	$36
04010 0D8E                        3F            .byte	$3F
04011 0D8F                        2D            .byte	$2D
04012 0D90                        31            .byte	$31
04013 0D91                        3F            .byte	$3F
04014                                           ! 853   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
04015 0D92                        00            .byte	0
04016 0D93                        00            .byte	0
04017 0D94                        1C            .byte	$1C
04018 0D95                        07            .byte	7
04019 0D96                        00            .byte	0
04020 0D97                        1C            .byte	$1C
04021 0D98                        0E            .byte	$E
04022 0D99                        00            .byte	0
04023 0D9A                        1C            .byte	$1C
04024 0D9B                        15            .byte	$15
04025 0D9C                        00            .byte	0
04026 0D9D                        1C            .byte	$1C
04027 0D9E                        1C            .byte	$1C
04028 0D9F                        00            .byte	0
04029 0DA0                        1C            .byte	$1C
04030 0DA1                        1C            .byte	$1C
04031 0DA2                        00            .byte	0
04032 0DA3                        15            .byte	$15
04033 0DA4                        1C            .byte	$1C
04034 0DA5                        00            .byte	0
04035 0DA6                        0E            .byte	$E
04036 0DA7                        1C            .byte	$1C
04037 0DA8                        00            .byte	0
04038 0DA9                        07            .byte	7
04039                                           ! 854   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04040 0DAA                        1C            .byte	$1C
04041 0DAB                        00            .byte	0
04042 0DAC                        00            .byte	0
04043 0DAD                        1C            .byte	$1C
04044 0DAE                        07            .byte	7
04045 0DAF                        00            .byte	0
04046 0DB0                        1C            .byte	$1C
04047 0DB1                        0E            .byte	$E
04048 0DB2                        00            .byte	0
04049 0DB3                        1C            .byte	$1C
04050 0DB4                        15            .byte	$15
04051 0DB5                        00            .byte	0
04052 0DB6                        1C            .byte	$1C
04053 0DB7                        1C            .byte	$1C
04054 0DB8                        00            .byte	0
04055 0DB9                        15            .byte	$15
04056 0DBA                        1C            .byte	$1C
04057 0DBB                        00            .byte	0
04058 0DBC                        0E            .byte	$E
04059 0DBD                        1C            .byte	$1C
04060 0DBE                        00            .byte	0
04061 0DBF                        07            .byte	7
04062 0DC0                        1C            .byte	$1C
04063 0DC1                        00            .byte	0
04064                                           ! 855   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04065 0DC2                        00            .byte	0
04066 0DC3                        1C            .byte	$1C
04067 0DC4                        00            .byte	0
04068 0DC5                        00            .byte	0
04069 0DC6                        1C            .byte	$1C
04070 0DC7                        07            .byte	7
04071 0DC8                        00            .byte	0
04072 0DC9                        1C            .byte	$1C
04073 0DCA                        0E            .byte	$E
04074 0DCB                        00            .byte	0
04075 0DCC                        1C            .byte	$1C
04076 0DCD                        15            .byte	$15
04077 0DCE                        00            .byte	0
04078 0DCF                        1C            .byte	$1C
04079 0DD0                        1C            .byte	$1C
04080 0DD1                        00            .byte	0
04081 0DD2                        15            .byte	$15
04082 0DD3                        1C            .byte	$1C
04083 0DD4                        00            .byte	0
04084 0DD5                        0E            .byte	$E
04085 0DD6                        1C            .byte	$1C
04086 0DD7                        00            .byte	0
04087 0DD8                        07            .byte	7
04088 0DD9                        1C            .byte	$1C
04089                                           ! 856   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04090 0DDA                        0E            .byte	$E
04091 0DDB                        0E            .byte	$E
04092 0DDC                        1C            .byte	$1C
04093 0DDD                        11            .byte	$11
04094 0DDE                        0E            .byte	$E
04095 0DDF                        1C            .byte	$1C
04096 0DE0                        15            .byte	$15
04097 0DE1                        0E            .byte	$E
04098 0DE2                        1C            .byte	$1C
04099 0DE3                        18            .byte	$18
04100 0DE4                        0E            .byte	$E
04101 0DE5                        1C            .byte	$1C
04102 0DE6                        1C            .byte	$1C
04103 0DE7                        0E            .byte	$E
04104 0DE8                        1C            .byte	$1C
04105 0DE9                        1C            .byte	$1C
04106 0DEA                        0E            .byte	$E
04107 0DEB                        18            .byte	$18
04108 0DEC                        1C            .byte	$1C
04109 0DED                        0E            .byte	$E
04110 0DEE                        15            .byte	$15
04111 0DEF                        1C            .byte	$1C
04112 0DF0                        0E            .byte	$E
04113 0DF1                        11            .byte	$11
04114                                           ! 857   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04115 0DF2                        1C            .byte	$1C
04116 0DF3                        0E            .byte	$E
04117 0DF4                        0E            .byte	$E
04118 0DF5                        1C            .byte	$1C
04119 0DF6                        11            .byte	$11
04120 0DF7                        0E            .byte	$E
04121 0DF8                        1C            .byte	$1C
04122 0DF9                        15            .byte	$15
04123 0DFA                        0E            .byte	$E
04124 0DFB                        1C            .byte	$1C
04125 0DFC                        18            .byte	$18
04126 0DFD                        0E            .byte	$E
04127 0DFE                        1C            .byte	$1C
04128 0DFF                        1C            .byte	$1C
04129 0E00                        0E            .byte	$E
04130 0E01                        18            .byte	$18
04131 0E02                        1C            .byte	$1C
04132 0E03                        0E            .byte	$E
04133 0E04                        15            .byte	$15
04134 0E05                        1C            .byte	$1C
04135 0E06                        0E            .byte	$E
04136 0E07                        11            .byte	$11
04137 0E08                        1C            .byte	$1C
04138 0E09                        0E            .byte	$E
04139                                           ! 858   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04140 0E0A                        0E            .byte	$E
04141 0E0B                        1C            .byte	$1C
04142 0E0C                        0E            .byte	$E
04143 0E0D                        0E            .byte	$E
04144 0E0E                        1C            .byte	$1C
04145 0E0F                        11            .byte	$11
04146 0E10                        0E            .byte	$E
04147 0E11                        1C            .byte	$1C
04148 0E12                        15            .byte	$15
04149 0E13                        0E            .byte	$E
04150 0E14                        1C            .byte	$1C
04151 0E15                        18            .byte	$18
04152 0E16                        0E            .byte	$E
04153 0E17                        1C            .byte	$1C
04154 0E18                        1C            .byte	$1C
04155 0E19                        0E            .byte	$E
04156 0E1A                        18            .byte	$18
04157 0E1B                        1C            .byte	$1C
04158 0E1C                        0E            .byte	$E
04159 0E1D                        15            .byte	$15
04160 0E1E                        1C            .byte	$1C
04161 0E1F                        0E            .byte	$E
04162 0E20                        11            .byte	$11
04163 0E21                        1C            .byte	$1C
04164                                           ! 859   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04165 0E22                        14            .byte	$14
04166 0E23                        14            .byte	$14
04167 0E24                        1C            .byte	$1C
04168 0E25                        16            .byte	$16
04169 0E26                        14            .byte	$14
04170 0E27                        1C            .byte	$1C
04171 0E28                        18            .byte	$18
04172 0E29                        14            .byte	$14
04173 0E2A                        1C            .byte	$1C
04174 0E2B                        1A            .byte	$1A
04175 0E2C                        14            .byte	$14
04176 0E2D                        1C            .byte	$1C
04177 0E2E                        1C            .byte	$1C
04178 0E2F                        14            .byte	$14
04179 0E30                        1C            .byte	$1C
04180 0E31                        1C            .byte	$1C
04181 0E32                        14            .byte	$14
04182 0E33                        1A            .byte	$1A
04183 0E34                        1C            .byte	$1C
04184 0E35                        14            .byte	$14
04185 0E36                        18            .byte	$18
04186 0E37                        1C            .byte	$1C
04187 0E38                        14            .byte	$14
04188 0E39                        16            .byte	$16
04189                                           ! 860   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04190 0E3A                        1C            .byte	$1C
04191 0E3B                        14            .byte	$14
04192 0E3C                        14            .byte	$14
04193 0E3D                        1C            .byte	$1C
04194 0E3E                        16            .byte	$16
04195 0E3F                        14            .byte	$14
04196 0E40                        1C            .byte	$1C
04197 0E41                        18            .byte	$18
04198 0E42                        14            .byte	$14
04199 0E43                        1C            .byte	$1C
04200 0E44                        1A            .byte	$1A
04201 0E45                        14            .byte	$14
04202 0E46                        1C            .byte	$1C
04203 0E47                        1C            .byte	$1C
04204 0E48                        14            .byte	$14
04205 0E49                        1A            .byte	$1A
04206 0E4A                        1C            .byte	$1C
04207 0E4B                        14            .byte	$14
04208 0E4C                        18            .byte	$18
04209 0E4D                        1C            .byte	$1C
04210 0E4E                        14            .byte	$14
04211 0E4F                        16            .byte	$16
04212 0E50                        1C            .byte	$1C
04213 0E51                        14            .byte	$14
04214                                           ! 861   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04215 0E52                        14            .byte	$14
04216 0E53                        1C            .byte	$1C
04217 0E54                        14            .byte	$14
04218 0E55                        14            .byte	$14
04219 0E56                        1C            .byte	$1C
04220 0E57                        16            .byte	$16
04221 0E58                        14            .byte	$14
04222 0E59                        1C            .byte	$1C
04223 0E5A                        18            .byte	$18
04224 0E5B                        14            .byte	$14
04225 0E5C                        1C            .byte	$1C
04226 0E5D                        1A            .byte	$1A
04227 0E5E                        14            .byte	$14
04228 0E5F                        1C            .byte	$1C
04229 0E60                        1C            .byte	$1C
04230 0E61                        14            .byte	$14
04231 0E62                        1A            .byte	$1A
04232 0E63                        1C            .byte	$1C
04233 0E64                        14            .byte	$14
04234 0E65                        18            .byte	$18
04235 0E66                        1C            .byte	$1C
04236 0E67                        14            .byte	$14
04237 0E68                        16            .byte	$16
04238 0E69                        1C            .byte	$1C
04239                                           ! 862   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04240 0E6A                        00            .byte	0
04241 0E6B                        00            .byte	0
04242 0E6C                        10            .byte	$10
04243 0E6D                        04            .byte	4
04244 0E6E                        00            .byte	0
04245 0E6F                        10            .byte	$10
04246 0E70                        08            .byte	8
04247 0E71                        00            .byte	0
04248 0E72                        10            .byte	$10
04249 0E73                        0C            .byte	$C
04250 0E74                        00            .byte	0
04251 0E75                        10            .byte	$10
04252 0E76                        10            .byte	$10
04253 0E77                        00            .byte	0
04254 0E78                        10            .byte	$10
04255 0E79                        10            .byte	$10
04256 0E7A                        00            .byte	0
04257 0E7B                        0C            .byte	$C
04258 0E7C                        10            .byte	$10
04259 0E7D                        00            .byte	0
04260 0E7E                        08            .byte	8
04261 0E7F                        10            .byte	$10
04262 0E80                        00            .byte	0
04263 0E81                        04            .byte	4
04264                                           ! 863   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x0
04265 0E82                        10            .byte	$10
04266 0E83                        00            .byte	0
04267 0E84                        00            .byte	0
04268 0E85                        10            .byte	$10
04269 0E86                        04            .byte	4
04270 0E87                        00            .byte	0
04271 0E88                        10            .byte	$10
04272 0E89                        08            .byte	8
04273 0E8A                        00            .byte	0
04274 0E8B                        10            .byte	$10
04275 0E8C                        0C            .byte	$C
04276 0E8D                        00            .byte	0
04277 0E8E                        10            .byte	$10
04278 0E8F                        10            .byte	$10
04279 0E90                        00            .byte	0
04280 0E91                        0C            .byte	$C
04281 0E92                        10            .byte	$10
04282                                           ! 863 0, 0x08,0x10,0x00, 0x04,0x10,0x00,
04283 0E93                        00            .byte	0
04284 0E94                        08            .byte	8
04285 0E95                        10            .byte	$10
04286 0E96                        00            .byte	0
04287 0E97                        04            .byte	4
04288 0E98                        10            .byte	$10
04289 0E99                        00            .byte	0
04290                                           ! 864   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04291 0E9A                        00            .byte	0
04292 0E9B                        10            .byte	$10
04293 0E9C                        00            .byte	0
04294 0E9D                        00            .byte	0
04295 0E9E                        10            .byte	$10
04296 0E9F                        04            .byte	4
04297 0EA0                        00            .byte	0
04298 0EA1                        10            .byte	$10
04299 0EA2                        08            .byte	8
04300 0EA3                        00            .byte	0
04301 0EA4                        10            .byte	$10
04302 0EA5                        0C            .byte	$C
04303 0EA6                        00            .byte	0
04304 0EA7                        10            .byte	$10
04305 0EA8                        10            .byte	$10
04306 0EA9                        00            .byte	0
04307 0EAA                        0C            .byte	$C
04308 0EAB                        10            .byte	$10
04309 0EAC                        00            .byte	0
04310 0EAD                        08            .byte	8
04311 0EAE                        10            .byte	$10
04312 0EAF                        00            .byte	0
04313 0EB0                        04            .byte	4
04314 0EB1                        10            .byte	$10
04315                                           ! 865   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04316 0EB2                        08            .byte	8
04317 0EB3                        08            .byte	8
04318 0EB4                        10            .byte	$10
04319 0EB5                        0A            .byte	$A
04320 0EB6                        08            .byte	8
04321 0EB7                        10            .byte	$10
04322 0EB8                        0C            .byte	$C
04323 0EB9                        08            .byte	8
04324 0EBA                        10            .byte	$10
04325 0EBB                        0E            .byte	$E
04326 0EBC                        08            .byte	8
04327 0EBD                        10            .byte	$10
04328 0EBE                        10            .byte	$10
04329 0EBF                        08            .byte	8
04330 0EC0                        10            .byte	$10
04331 0EC1                        10            .byte	$10
04332 0EC2                        08            .byte	8
04333 0EC3                        0E            .byte	$E
04334 0EC4                        10            .byte	$10
04335 0EC5                        08            .byte	8
04336 0EC6                        0C            .byte	$C
04337 0EC7                        10            .byte	$10
04338 0EC8                        08            .byte	8
04339 0EC9                        0A            .byte	$A
04340                                           ! 866   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04341 0ECA                        10            .byte	$10
04342 0ECB                        08            .byte	8
04343 0ECC                        08            .byte	8
04344 0ECD                        10            .byte	$10
04345 0ECE                        0A            .byte	$A
04346 0ECF                        08            .byte	8
04347 0ED0                        10            .byte	$10
04348 0ED1                        0C            .byte	$C
04349 0ED2                        08            .byte	8
04350 0ED3                        10            .byte	$10
04351 0ED4                        0E            .byte	$E
04352 0ED5                        08            .byte	8
04353 0ED6                        10            .byte	$10
04354 0ED7                        10            .byte	$10
04355 0ED8                        08            .byte	8
04356 0ED9                        0E            .byte	$E
04357 0EDA                        10            .byte	$10
04358 0EDB                        08            .byte	8
04359 0EDC                        0C            .byte	$C
04360 0EDD                        10            .byte	$10
04361 0EDE                        08            .byte	8
04362 0EDF                        0A            .byte	$A
04363 0EE0                        10            .byte	$10
04364 0EE1                        08            .byte	8
04365                                           ! 867   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04366 0EE2                        08            .byte	8
04367 0EE3                        10            .byte	$10
04368 0EE4                        08            .byte	8
04369 0EE5                        08            .byte	8
04370 0EE6                        10            .byte	$10
04371 0EE7                        0A            .byte	$A
04372 0EE8                        08            .byte	8
04373 0EE9                        10            .byte	$10
04374 0EEA                        0C            .byte	$C
04375 0EEB                        08            .byte	8
04376 0EEC                        10            .byte	$10
04377 0EED                        0E            .byte	$E
04378 0EEE                        08            .byte	8
04379 0EEF                        10            .byte	$10
04380 0EF0                        10            .byte	$10
04381 0EF1                        08            .byte	8
04382 0EF2                        0E            .byte	$E
04383 0EF3                        10            .byte	$10
04384 0EF4                        08            .byte	8
04385 0EF5                        0C            .byte	$C
04386 0EF6                        10            .byte	$10
04387 0EF7                        08            .byte	8
04388 0EF8                        0A            .byte	$A
04389 0EF9                        10            .byte	$10
04390                                           ! 868   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04391 0EFA                        0B            .byte	$B
04392 0EFB                        0B            .byte	$B
04393 0EFC                        10            .byte	$10
04394 0EFD                        0C            .byte	$C
04395 0EFE                        0B            .byte	$B
04396 0EFF                        10            .byte	$10
04397 0F00                        0D            .byte	$D
04398 0F01                        0B            .byte	$B
04399 0F02                        10            .byte	$10
04400 0F03                        0F            .byte	$F
04401 0F04                        0B            .byte	$B
04402 0F05                        10            .byte	$10
04403 0F06                        10            .byte	$10
04404 0F07                        0B            .byte	$B
04405 0F08                        10            .byte	$10
04406 0F09                        10            .byte	$10
04407 0F0A                        0B            .byte	$B
04408 0F0B                        0F            .byte	$F
04409 0F0C                        10            .byte	$10
04410 0F0D                        0B            .byte	$B
04411 0F0E                        0D            .byte	$D
04412 0F0F                        10            .byte	$10
04413 0F10                        0B            .byte	$B
04414 0F11                        0C            .byte	$C
04415                                           ! 869   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04416 0F12                        10            .byte	$10
04417 0F13                        0B            .byte	$B
04418 0F14                        0B            .byte	$B
04419 0F15                        10            .byte	$10
04420 0F16                        0C            .byte	$C
04421 0F17                        0B            .byte	$B
04422 0F18                        10            .byte	$10
04423 0F19                        0D            .byte	$D
04424 0F1A                        0B            .byte	$B
04425 0F1B                        10            .byte	$10
04426 0F1C                        0F            .byte	$F
04427 0F1D                        0B            .byte	$B
04428 0F1E                        10            .byte	$10
04429 0F1F                        10            .byte	$10
04430 0F20                        0B            .byte	$B
04431 0F21                        0F            .byte	$F
04432 0F22                        10            .byte	$10
04433 0F23                        0B            .byte	$B
04434 0F24                        0D            .byte	$D
04435 0F25                        10            .byte	$10
04436 0F26                        0B            .byte	$B
04437 0F27                        0C            .byte	$C
04438 0F28                        10            .byte	$10
04439 0F29                        0B            .byte	$B
04440                                           ! 870   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04441 0F2A                        0B            .byte	$B
04442 0F2B                        10            .byte	$10
04443 0F2C                        0B            .byte	$B
04444 0F2D                        0B            .byte	$B
04445 0F2E                        10            .byte	$10
04446 0F2F                        0C            .byte	$C
04447 0F30                        0B            .byte	$B
04448 0F31                        10            .byte	$10
04449 0F32                        0D            .byte	$D
04450 0F33                        0B            .byte	$B
04451 0F34                        10            .byte	$10
04452 0F35                        0F            .byte	$F
04453 0F36                        0B            .byte	$B
04454 0F37                        10            .byte	$10
04455 0F38                        10            .byte	$10
04456 0F39                        0B            .byte	$B
04457 0F3A                        0F            .byte	$F
04458 0F3B                        10            .byte	$10
04459 0F3C                        0B            .byte	$B
04460 0F3D                        0D            .byte	$D
04461 0F3E                        10            .byte	$10
04462 0F3F                        0B            .byte	$B
04463 0F40                        0C            .byte	$C
04464 0F41                        10            .byte	$10
04465                                           ! 871   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04466 0F42                        00            .byte	0
04467 0F43                        00            .byte	0
04468 0F44                        00            .byte	0
04469 0F45                        00            .byte	0
04470 0F46                        00            .byte	0
04471 0F47                        00            .byte	0
04472 0F48                        00            .byte	0
04473 0F49                        00            .byte	0
04474 0F4A                        00            .byte	0
04475 0F4B                        00            .byte	0
04476 0F4C                        00            .byte	0
04477 0F4D                        00            .byte	0
04478 0F4E                        00            .byte	0
04479 0F4F                        00            .byte	0
04480 0F50                        00            .byte	0
04481 0F51                        00            .byte	0
04482 0F52                        00            .byte	0
04483 0F53                        00            .byte	0
04484 0F54                        00            .byte	0
04485 0F55                        00            .byte	0
04486 0F56                        00            .byte	0
04487 0F57                        00            .byte	0
04488 0F58                        00            .byte	0
04489                                           ! 872 };
04490 0F59                        00            .byte	0
04491                                           !BCC_EOS
04492                                           ! 873 static Bit8u static_functionality[0x10]=
04493                                           ! 874 {
04494                       00000F5A            _static_functionality:
04495                                           ! 875          0xff,
04496 0F5A                        FF            .byte	$FF
04497                                           ! 876          0xe0,
04498 0F5B                        E0            .byte	$E0
04499                                           ! 877          0x0f,
04500 0F5C                        0F            .byte	$F
04501                                           ! 878          0x00, 0x00, 0x00, 0x00,
04502 0F5D                        00            .byte	0
04503 0F5E                        00            .byte	0
04504 0F5F                        00            .byte	0
04505 0F60                        00            .byte	0
04506                                           ! 879          0x07,
04507 0F61                        07            .byte	7
04508                                           ! 880          0x02,
04509 0F62                        02            .byte	2
04510                                           ! 881          0x08,
04511 0F63                        08            .byte	8
04512                                           ! 882          0xe7,
04513 0F64                        E7            .byte	$E7
04514                                           ! 883          0x0c,
04515 0F65                        0C            .byte	$C
04516                                           ! 884          0x00,
04517 0F66                        00            .byte	0
04518                                           ! 885          0x00,
04519 0F67                        00            .byte	0
04520                                           ! 886          0x00,
04521 0F68                        00            .byte	0
04522                                           ! 887          0x00
04523                                           ! 888 };
04524 0F69                        00            .byte	0
04525                                           !BCC_EOS
04526                                           ! 889 static Bit8u vgafont8[256*8]=
04527                                           ! 890 {
04528                       00000F6A            _vgafont8:
04529                                           ! 891  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04530 0F6A                        00            .byte	0
04531 0F6B                        00            .byte	0
04532 0F6C                        00            .byte	0
04533 0F6D                        00            .byte	0
04534 0F6E                        00            .byte	0
04535 0F6F                        00            .byte	0
04536 0F70                        00            .byte	0
04537 0F71                        00            .byte	0
04538                                           ! 892  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04539 0F72                        7E            .byte	$7E
04540 0F73                        81            .byte	$81
04541 0F74                        A5            .byte	$A5
04542 0F75                        81            .byte	$81
04543 0F76                        BD            .byte	$BD
04544 0F77                        99            .byte	$99
04545 0F78                        81            .byte	$81
04546 0F79                        7E            .byte	$7E
04547                                           ! 893  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04548 0F7A                        7E            .byte	$7E
04549 0F7B                        FF            .byte	$FF
04550 0F7C                        DB            .byte	$DB
04551 0F7D                        FF            .byte	$FF
04552 0F7E                        C3            .byte	$C3
04553 0F7F                        E7            .byte	$E7
04554 0F80                        FF            .byte	$FF
04555 0F81                        7E            .byte	$7E
04556                                           ! 894  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04557 0F82                        6C            .byte	$6C
04558 0F83                        FE            .byte	$FE
04559 0F84                        FE            .byte	$FE
04560 0F85                        FE            .byte	$FE
04561 0F86                        7C            .byte	$7C
04562 0F87                        38            .byte	$38
04563 0F88                        10            .byte	$10
04564 0F89                        00            .byte	0
04565                                           ! 895  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04566 0F8A                        10            .byte	$10
04567 0F8B                        38            .byte	$38
04568 0F8C                        7C            .byte	$7C
04569 0F8D                        FE            .byte	$FE
04570 0F8E                        7C            .byte	$7C
04571 0F8F                        38            .byte	$38
04572 0F90                        10            .byte	$10
04573 0F91                        00            .byte	0
04574                                           ! 896  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04575 0F92                        38            .byte	$38
04576 0F93                        7C            .byte	$7C
04577 0F94                        38            .byte	$38
04578 0F95                        FE            .byte	$FE
04579 0F96                        FE            .byte	$FE
04580 0F97                        7C            .byte	$7C
04581 0F98                        38            .byte	$38
04582 0F99                        7C            .byte	$7C
04583                                           ! 897  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04584 0F9A                        10            .byte	$10
04585 0F9B                        10            .byte	$10
04586 0F9C                        38            .byte	$38
04587 0F9D                        7C            .byte	$7C
04588 0F9E                        FE            .byte	$FE
04589 0F9F                        7C            .byte	$7C
04590 0FA0                        38            .byte	$38
04591 0FA1                        7C            .byte	$7C
04592                                           ! 898  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04593 0FA2                        00            .byte	0
04594 0FA3                        00            .byte	0
04595 0FA4                        18            .byte	$18
04596 0FA5                        3C            .byte	$3C
04597 0FA6                        3C            .byte	$3C
04598 0FA7                        18            .byte	$18
04599 0FA8                        00            .byte	0
04600 0FA9                        00            .byte	0
04601                                           ! 899  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04602 0FAA                        FF            .byte	$FF
04603 0FAB                        FF            .byte	$FF
04604 0FAC                        E7            .byte	$E7
04605 0FAD                        C3            .byte	$C3
04606 0FAE                        C3            .byte	$C3
04607 0FAF                        E7            .byte	$E7
04608 0FB0                        FF            .byte	$FF
04609 0FB1                        FF            .byte	$FF
04610                                           ! 900  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04611 0FB2                        00            .byte	0
04612 0FB3                        3C            .byte	$3C
04613 0FB4                        66            .byte	$66
04614 0FB5                        42            .byte	$42
04615 0FB6                        42            .byte	$42
04616 0FB7                        66            .byte	$66
04617 0FB8                        3C            .byte	$3C
04618 0FB9                        00            .byte	0
04619                                           ! 901  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04620 0FBA                        FF            .byte	$FF
04621 0FBB                        C3            .byte	$C3
04622 0FBC                        99            .byte	$99
04623 0FBD                        BD            .byte	$BD
04624 0FBE                        BD            .byte	$BD
04625 0FBF                        99            .byte	$99
04626 0FC0                        C3            .byte	$C3
04627 0FC1                        FF            .byte	$FF
04628                                           ! 902  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04629 0FC2                        0F            .byte	$F
04630 0FC3                        07            .byte	7
04631 0FC4                        0F            .byte	$F
04632 0FC5                        7D            .byte	$7D
04633 0FC6                        CC            .byte	$CC
04634 0FC7                        CC            .byte	$CC
04635 0FC8                        CC            .byte	$CC
04636 0FC9                        78            .byte	$78
04637                                           ! 903  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04638 0FCA                        3C            .byte	$3C
04639 0FCB                        66            .byte	$66
04640 0FCC                        66            .byte	$66
04641 0FCD                        66            .byte	$66
04642 0FCE                        3C            .byte	$3C
04643 0FCF                        18            .byte	$18
04644 0FD0                        7E            .byte	$7E
04645 0FD1                        18            .byte	$18
04646                                           ! 904  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0
04647 0FD2                        3F            .byte	$3F
04648 0FD3                        33            .byte	$33
04649 0FD4                        3F            .byte	$3F
04650 0FD5                        30            .byte	$30
04651 0FD6                        30            .byte	$30
04652 0FD7                        70            .byte	$70
04653 0FD8                        F0            .byte	$F0
04654                                           ! 904 xe0,
04655 0FD9                        E0            .byte	$E0
04656                                           ! 905  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04657 0FDA                        7F            .byte	$7F
04658 0FDB                        63            .byte	$63
04659 0FDC                        7F            .byte	$7F
04660 0FDD                        63            .byte	$63
04661 0FDE                        63            .byte	$63
04662 0FDF                        67            .byte	$67
04663 0FE0                        E6            .byte	$E6
04664 0FE1                        C0            .byte	$C0
04665                                           ! 906  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04666 0FE2                        99            .byte	$99
04667 0FE3                        5A            .byte	$5A
04668 0FE4                        3C            .byte	$3C
04669 0FE5                        E7            .byte	$E7
04670 0FE6                        E7            .byte	$E7
04671 0FE7                        3C            .byte	$3C
04672 0FE8                        5A            .byte	$5A
04673 0FE9                        99            .byte	$99
04674                                           ! 907  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04675 0FEA                        80            .byte	$80
04676 0FEB                        E0            .byte	$E0
04677 0FEC                        F8            .byte	$F8
04678 0FED                        FE            .byte	$FE
04679 0FEE                        F8            .byte	$F8
04680 0FEF                        E0            .byte	$E0
04681 0FF0                        80            .byte	$80
04682 0FF1                        00            .byte	0
04683                                           ! 908  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04684 0FF2                        02            .byte	2
04685 0FF3                        0E            .byte	$E
04686 0FF4                        3E            .byte	$3E
04687 0FF5                        FE            .byte	$FE
04688 0FF6                        3E            .byte	$3E
04689 0FF7                        0E            .byte	$E
04690 0FF8                        02            .byte	2
04691 0FF9                        00            .byte	0
04692                                           ! 909  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04693 0FFA                        18            .byte	$18
04694 0FFB                        3C            .byte	$3C
04695 0FFC                        7E            .byte	$7E
04696 0FFD                        18            .byte	$18
04697 0FFE                        18            .byte	$18
04698 0FFF                        7E            .byte	$7E
04699 1000                        3C            .byte	$3C
04700 1001                        18            .byte	$18
04701                                           ! 910  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04702 1002                        66            .byte	$66
04703 1003                        66            .byte	$66
04704 1004                        66            .byte	$66
04705 1005                        66            .byte	$66
04706 1006                        66            .byte	$66
04707 1007                        00            .byte	0
04708 1008                        66            .byte	$66
04709 1009                        00            .byte	0
04710                                           ! 911  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04711 100A                        7F            .byte	$7F
04712 100B                        DB            .byte	$DB
04713 100C                        DB            .byte	$DB
04714 100D                        7B            .byte	$7B
04715 100E                        1B            .byte	$1B
04716 100F                        1B            .byte	$1B
04717 1010                        1B            .byte	$1B
04718 1011                        00            .byte	0
04719                                           ! 912  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04720 1012                        3E            .byte	$3E
04721 1013                        63            .byte	$63
04722 1014                        38            .byte	$38
04723 1015                        6C            .byte	$6C
04724 1016                        6C            .byte	$6C
04725 1017                        38            .byte	$38
04726 1018                        CC            .byte	$CC
04727 1019                        78            .byte	$78
04728                                           ! 913  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04729 101A                        00            .byte	0
04730 101B                        00            .byte	0
04731 101C                        00            .byte	0
04732 101D                        00            .byte	0
04733 101E                        7E            .byte	$7E
04734 101F                        7E            .byte	$7E
04735 1020                        7E            .byte	$7E
04736 1021                        00            .byte	0
04737                                           ! 914  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04738 1022                        18            .byte	$18
04739 1023                        3C            .byte	$3C
04740 1024                        7E            .byte	$7E
04741 1025                        18            .byte	$18
04742 1026                        7E            .byte	$7E
04743 1027                        3C            .byte	$3C
04744 1028                        18            .byte	$18
04745 1029                        FF            .byte	$FF
04746                                           ! 915  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04747 102A                        18            .byte	$18
04748 102B                        3C            .byte	$3C
04749 102C                        7E            .byte	$7E
04750 102D                        18            .byte	$18
04751 102E                        18            .byte	$18
04752 102F                        18            .byte	$18
04753 1030                        18            .byte	$18
04754 1031                        00            .byte	0
04755                                           ! 916  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04756 1032                        18            .byte	$18
04757 1033                        18            .byte	$18
04758 1034                        18            .byte	$18
04759 1035                        18            .byte	$18
04760 1036                        7E            .byte	$7E
04761 1037                        3C            .byte	$3C
04762 1038                        18            .byte	$18
04763 1039                        00            .byte	0
04764                                           ! 917  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04765 103A                        00            .byte	0
04766 103B                        18            .byte	$18
04767 103C                        0C            .byte	$C
04768 103D                        FE            .byte	$FE
04769 103E                        0C            .byte	$C
04770 103F                        18            .byte	$18
04771 1040                        00            .byte	0
04772 1041                        00            .byte	0
04773                                           ! 918  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04774 1042                        00            .byte	0
04775 1043                        30            .byte	$30
04776 1044                        60            .byte	$60
04777 1045                        FE            .byte	$FE
04778 1046                        60            .byte	$60
04779 1047                        30            .byte	$30
04780 1048                        00            .byte	0
04781 1049                        00            .byte	0
04782                                           ! 919  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04783 104A                        00            .byte	0
04784 104B                        00            .byte	0
04785 104C                        C0            .byte	$C0
04786 104D                        C0            .byte	$C0
04787 104E                        C0            .byte	$C0
04788 104F                        FE            .byte	$FE
04789 1050                        00            .byte	0
04790 1051                        00            .byte	0
04791                                           ! 920  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04792 1052                        00            .byte	0
04793 1053                        24            .byte	$24
04794 1054                        66            .byte	$66
04795 1055                        FF            .byte	$FF
04796 1056                        66            .byte	$66
04797 1057                        24            .byte	$24
04798 1058                        00            .byte	0
04799 1059                        00            .byte	0
04800                                           ! 921  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04801 105A                        00            .byte	0
04802 105B                        18            .byte	$18
04803 105C                        3C            .byte	$3C
04804 105D                        7E            .byte	$7E
04805 105E                        FF            .byte	$FF
04806 105F                        FF            .byte	$FF
04807 1060                        00            .byte	0
04808 1061                        00            .byte	0
04809                                           ! 922  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04810 1062                        00            .byte	0
04811 1063                        FF            .byte	$FF
04812 1064                        FF            .byte	$FF
04813 1065                        7E            .byte	$7E
04814 1066                        3C            .byte	$3C
04815 1067                        18            .byte	$18
04816 1068                        00            .byte	0
04817 1069                        00            .byte	0
04818                                           ! 923  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04819 106A                        00            .byte	0
04820 106B                        00            .byte	0
04821 106C                        00            .byte	0
04822 106D                        00            .byte	0
04823 106E                        00            .byte	0
04824 106F                        00            .byte	0
04825 1070                        00            .byte	0
04826 1071                        00            .byte	0
04827                                           ! 924  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04828 1072                        30            .byte	$30
04829 1073                        78            .byte	$78
04830 1074                        78            .byte	$78
04831 1075                        30            .byte	$30
04832 1076                        30            .byte	$30
04833 1077                        00            .byte	0
04834 1078                        30            .byte	$30
04835 1079                        00            .byte	0
04836                                           ! 925  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04837 107A                        6C            .byte	$6C
04838 107B                        6C            .byte	$6C
04839 107C                        6C            .byte	$6C
04840 107D                        00            .byte	0
04841 107E                        00            .byte	0
04842 107F                        00            .byte	0
04843 1080                        00            .byte	0
04844 1081                        00            .byte	0
04845                                           ! 926  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04846 1082                        6C            .byte	$6C
04847 1083                        6C            .byte	$6C
04848 1084                        FE            .byte	$FE
04849 1085                        6C            .byte	$6C
04850 1086                        FE            .byte	$FE
04851 1087                        6C            .byte	$6C
04852 1088                        6C            .byte	$6C
04853 1089                        00            .byte	0
04854                                           ! 927  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04855 108A                        30            .byte	$30
04856 108B                        7C            .byte	$7C
04857 108C                        C0            .byte	$C0
04858 108D                        78            .byte	$78
04859 108E                        0C            .byte	$C
04860 108F                        F8            .byte	$F8
04861 1090                        30            .byte	$30
04862 1091                        00            .byte	0
04863                                           ! 928  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04864 1092                        00            .byte	0
04865 1093                        C6            .byte	$C6
04866 1094                        CC            .byte	$CC
04867 1095                        18            .byte	$18
04868 1096                        30            .byte	$30
04869 1097                        66            .byte	$66
04870 1098                        C6            .byte	$C6
04871 1099                        00            .byte	0
04872                                           ! 929  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04873 109A                        38            .byte	$38
04874 109B                        6C            .byte	$6C
04875 109C                        38            .byte	$38
04876 109D                        76            .byte	$76
04877 109E                        DC            .byte	$DC
04878 109F                        CC            .byte	$CC
04879 10A0                        76            .byte	$76
04880 10A1                        00            .byte	0
04881                                           ! 930  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04882 10A2                        60            .byte	$60
04883 10A3                        60            .byte	$60
04884 10A4                        C0            .byte	$C0
04885 10A5                        00            .byte	0
04886 10A6                        00            .byte	0
04887 10A7                        00            .byte	0
04888 10A8                        00            .byte	0
04889 10A9                        00            .byte	0
04890                                           ! 931  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04891 10AA                        18            .byte	$18
04892 10AB                        30            .byte	$30
04893 10AC                        60            .byte	$60
04894 10AD                        60            .byte	$60
04895 10AE                        60            .byte	$60
04896 10AF                        30            .byte	$30
04897 10B0                        18            .byte	$18
04898 10B1                        00            .byte	0
04899                                           ! 932  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04900 10B2                        60            .byte	$60
04901 10B3                        30            .byte	$30
04902 10B4                        18            .byte	$18
04903 10B5                        18            .byte	$18
04904 10B6                        18            .byte	$18
04905 10B7                        30            .byte	$30
04906 10B8                        60            .byte	$60
04907 10B9                        00            .byte	0
04908                                           ! 933  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04909 10BA                        00            .byte	0
04910 10BB                        66            .byte	$66
04911 10BC                        3C            .byte	$3C
04912 10BD                        FF            .byte	$FF
04913 10BE                        3C            .byte	$3C
04914 10BF                        66            .byte	$66
04915 10C0                        00            .byte	0
04916 10C1                        00            .byte	0
04917                                           ! 934  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04918 10C2                        00            .byte	0
04919 10C3                        30            .byte	$30
04920 10C4                        30            .byte	$30
04921 10C5                        FC            .byte	$FC
04922 10C6                        30            .byte	$30
04923 10C7                        30            .byte	$30
04924 10C8                        00            .byte	0
04925 10C9                        00            .byte	0
04926                                           ! 935  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04927 10CA                        00            .byte	0
04928 10CB                        00            .byte	0
04929 10CC                        00            .byte	0
04930 10CD                        00            .byte	0
04931 10CE                        00            .byte	0
04932 10CF                        30            .byte	$30
04933 10D0                        30            .byte	$30
04934 10D1                        60            .byte	$60
04935                                           ! 936  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04936 10D2                        00            .byte	0
04937 10D3                        00            .byte	0
04938 10D4                        00            .byte	0
04939 10D5                        FC            .byte	$FC
04940 10D6                        00            .byte	0
04941 10D7                        00            .byte	0
04942 10D8                        00            .byte	0
04943 10D9                        00            .byte	0
04944                                           ! 937  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04945 10DA                        00            .byte	0
04946 10DB                        00            .byte	0
04947 10DC                        00            .byte	0
04948 10DD                        00            .byte	0
04949 10DE                        00            .byte	0
04950 10DF                        30            .byte	$30
04951 10E0                        30            .byte	$30
04952 10E1                        00            .byte	0
04953                                           ! 938  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04954 10E2                        06            .byte	6
04955 10E3                        0C            .byte	$C
04956 10E4                        18            .byte	$18
04957 10E5                        30            .byte	$30
04958 10E6                        60            .byte	$60
04959 10E7                        C0            .byte	$C0
04960 10E8                        80            .byte	$80
04961 10E9                        00            .byte	0
04962                                           ! 939  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04963 10EA                        7C            .byte	$7C
04964 10EB                        C6            .byte	$C6
04965 10EC                        CE            .byte	$CE
04966 10ED                        DE            .byte	$DE
04967 10EE                        F6            .byte	$F6
04968 10EF                        E6            .byte	$E6
04969 10F0                        7C            .byte	$7C
04970 10F1                        00            .byte	0
04971                                           ! 940  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04972 10F2                        30            .byte	$30
04973 10F3                        70            .byte	$70
04974 10F4                        30            .byte	$30
04975 10F5                        30            .byte	$30
04976 10F6                        30            .byte	$30
04977 10F7                        30            .byte	$30
04978 10F8                        FC            .byte	$FC
04979 10F9                        00            .byte	0
04980                                           ! 941  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04981 10FA                        78            .byte	$78
04982 10FB                        CC            .byte	$CC
04983 10FC                        0C            .byte	$C
04984 10FD                        38            .byte	$38
04985 10FE                        60            .byte	$60
04986 10FF                        CC            .byte	$CC
04987 1100                        FC            .byte	$FC
04988 1101                        00            .byte	0
04989                                           ! 942  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04990 1102                        78            .byte	$78
04991 1103                        CC            .byte	$CC
04992 1104                        0C            .byte	$C
04993 1105                        38            .byte	$38
04994 1106                        0C            .byte	$C
04995 1107                        CC            .byte	$CC
04996 1108                        78            .byte	$78
04997 1109                        00            .byte	0
04998                                           ! 943  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04999 110A                        1C            .byte	$1C
05000 110B                        3C            .byte	$3C
05001 110C                        6C            .byte	$6C
05002 110D                        CC            .byte	$CC
05003 110E                        FE            .byte	$FE
05004 110F                        0C            .byte	$C
05005 1110                        1E            .byte	$1E
05006 1111                        00            .byte	0
05007                                           ! 944  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
05008 1112                        FC            .byte	$FC
05009 1113                        C0            .byte	$C0
05010 1114                        F8            .byte	$F8
05011 1115                        0C            .byte	$C
05012 1116                        0C            .byte	$C
05013 1117                        CC            .byte	$CC
05014 1118                        78            .byte	$78
05015 1119                        00            .byte	0
05016                                           ! 945  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
05017 111A                        38            .byte	$38
05018 111B                        60            .byte	$60
05019 111C                        C0            .byte	$C0
05020 111D                        F8            .byte	$F8
05021 111E                        CC            .byte	$CC
05022 111F                        CC            .byte	$CC
05023 1120                        78            .byte	$78
05024 1121                        00            .byte	0
05025                                           ! 946  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x3
05026 1122                        FC            .byte	$FC
05027 1123                        CC            .byte	$CC
05028 1124                        0C            .byte	$C
05029 1125                        18            .byte	$18
05030 1126                        30            .byte	$30
05031                                           ! 946 0, 0x30, 0x00,
05032 1127                        30            .byte	$30
05033 1128                        30            .byte	$30
05034 1129                        00            .byte	0
05035                                           ! 947  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05036 112A                        78            .byte	$78
05037 112B                        CC            .byte	$CC
05038 112C                        CC            .byte	$CC
05039 112D                        78            .byte	$78
05040 112E                        CC            .byte	$CC
05041 112F                        CC            .byte	$CC
05042 1130                        78            .byte	$78
05043 1131                        00            .byte	0
05044                                           ! 948  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
05045 1132                        78            .byte	$78
05046 1133                        CC            .byte	$CC
05047 1134                        CC            .byte	$CC
05048 1135                        7C            .byte	$7C
05049 1136                        0C            .byte	$C
05050 1137                        18            .byte	$18
05051 1138                        70            .byte	$70
05052 1139                        00            .byte	0
05053                                           ! 949  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05054 113A                        00            .byte	0
05055 113B                        30            .byte	$30
05056 113C                        30            .byte	$30
05057 113D                        00            .byte	0
05058 113E                        00            .byte	0
05059 113F                        30            .byte	$30
05060 1140                        30            .byte	$30
05061 1141                        00            .byte	0
05062                                           ! 950  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05063 1142                        00            .byte	0
05064 1143                        30            .byte	$30
05065 1144                        30            .byte	$30
05066 1145                        00            .byte	0
05067 1146                        00            .byte	0
05068 1147                        30            .byte	$30
05069 1148                        30            .byte	$30
05070 1149                        60            .byte	$60
05071                                           ! 951  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05072 114A                        18            .byte	$18
05073 114B                        30            .byte	$30
05074 114C                        60            .byte	$60
05075 114D                        C0            .byte	$C0
05076 114E                        60            .byte	$60
05077 114F                        30            .byte	$30
05078 1150                        18            .byte	$18
05079 1151                        00            .byte	0
05080                                           ! 952  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05081 1152                        00            .byte	0
05082 1153                        00            .byte	0
05083 1154                        FC            .byte	$FC
05084 1155                        00            .byte	0
05085 1156                        00            .byte	0
05086 1157                        FC            .byte	$FC
05087 1158                        00            .byte	0
05088 1159                        00            .byte	0
05089                                           ! 953  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05090 115A                        60            .byte	$60
05091 115B                        30            .byte	$30
05092 115C                        18            .byte	$18
05093 115D                        0C            .byte	$C
05094 115E                        18            .byte	$18
05095 115F                        30            .byte	$30
05096 1160                        60            .byte	$60
05097 1161                        00            .byte	0
05098                                           ! 954  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05099 1162                        78            .byte	$78
05100 1163                        CC            .byte	$CC
05101 1164                        0C            .byte	$C
05102 1165                        18            .byte	$18
05103 1166                        30            .byte	$30
05104 1167                        00            .byte	0
05105 1168                        30            .byte	$30
05106 1169                        00            .byte	0
05107                                           ! 955  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05108 116A                        7C            .byte	$7C
05109 116B                        C6            .byte	$C6
05110 116C                        DE            .byte	$DE
05111 116D                        DE            .byte	$DE
05112 116E                        DE            .byte	$DE
05113 116F                        C0            .byte	$C0
05114 1170                        78            .byte	$78
05115 1171                        00            .byte	0
05116                                           ! 956  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05117 1172                        30            .byte	$30
05118 1173                        78            .byte	$78
05119 1174                        CC            .byte	$CC
05120 1175                        CC            .byte	$CC
05121 1176                        FC            .byte	$FC
05122 1177                        CC            .byte	$CC
05123 1178                        CC            .byte	$CC
05124 1179                        00            .byte	0
05125                                           ! 957  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05126 117A                        FC            .byte	$FC
05127 117B                        66            .byte	$66
05128 117C                        66            .byte	$66
05129 117D                        7C            .byte	$7C
05130 117E                        66            .byte	$66
05131 117F                        66            .byte	$66
05132 1180                        FC            .byte	$FC
05133 1181                        00            .byte	0
05134                                           ! 958  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05135 1182                        3C            .byte	$3C
05136 1183                        66            .byte	$66
05137 1184                        C0            .byte	$C0
05138 1185                        C0            .byte	$C0
05139 1186                        C0            .byte	$C0
05140 1187                        66            .byte	$66
05141 1188                        3C            .byte	$3C
05142 1189                        00            .byte	0
05143                                           ! 959  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05144 118A                        F8            .byte	$F8
05145 118B                        6C            .byte	$6C
05146 118C                        66            .byte	$66
05147 118D                        66            .byte	$66
05148 118E                        66            .byte	$66
05149 118F                        6C            .byte	$6C
05150 1190                        F8            .byte	$F8
05151 1191                        00            .byte	0
05152                                           ! 960  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05153 1192                        FE            .byte	$FE
05154 1193                        62            .byte	$62
05155 1194                        68            .byte	$68
05156 1195                        78            .byte	$78
05157 1196                        68            .byte	$68
05158 1197                        62            .byte	$62
05159 1198                        FE            .byte	$FE
05160 1199                        00            .byte	0
05161                                           ! 961  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05162 119A                        FE            .byte	$FE
05163 119B                        62            .byte	$62
05164 119C                        68            .byte	$68
05165 119D                        78            .byte	$78
05166 119E                        68            .byte	$68
05167 119F                        60            .byte	$60
05168 11A0                        F0            .byte	$F0
05169 11A1                        00            .byte	0
05170                                           ! 962  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05171 11A2                        3C            .byte	$3C
05172 11A3                        66            .byte	$66
05173 11A4                        C0            .byte	$C0
05174 11A5                        C0            .byte	$C0
05175 11A6                        CE            .byte	$CE
05176 11A7                        66            .byte	$66
05177 11A8                        3E            .byte	$3E
05178 11A9                        00            .byte	0
05179                                           ! 963  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05180 11AA                        CC            .byte	$CC
05181 11AB                        CC            .byte	$CC
05182 11AC                        CC            .byte	$CC
05183 11AD                        FC            .byte	$FC
05184 11AE                        CC            .byte	$CC
05185 11AF                        CC            .byte	$CC
05186 11B0                        CC            .byte	$CC
05187 11B1                        00            .byte	0
05188                                           ! 964  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05189 11B2                        78            .byte	$78
05190 11B3                        30            .byte	$30
05191 11B4                        30            .byte	$30
05192 11B5                        30            .byte	$30
05193 11B6                        30            .byte	$30
05194 11B7                        30            .byte	$30
05195 11B8                        78            .byte	$78
05196 11B9                        00            .byte	0
05197                                           ! 965  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05198 11BA                        1E            .byte	$1E
05199 11BB                        0C            .byte	$C
05200 11BC                        0C            .byte	$C
05201 11BD                        0C            .byte	$C
05202 11BE                        CC            .byte	$CC
05203 11BF                        CC            .byte	$CC
05204 11C0                        78            .byte	$78
05205 11C1                        00            .byte	0
05206                                           ! 966  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05207 11C2                        E6            .byte	$E6
05208 11C3                        66            .byte	$66
05209 11C4                        6C            .byte	$6C
05210 11C5                        78            .byte	$78
05211 11C6                        6C            .byte	$6C
05212 11C7                        66            .byte	$66
05213 11C8                        E6            .byte	$E6
05214 11C9                        00            .byte	0
05215                                           ! 967  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05216 11CA                        F0            .byte	$F0
05217 11CB                        60            .byte	$60
05218 11CC                        60            .byte	$60
05219 11CD                        60            .byte	$60
05220 11CE                        62            .byte	$62
05221 11CF                        66            .byte	$66
05222 11D0                        FE            .byte	$FE
05223 11D1                        00            .byte	0
05224                                           ! 968  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05225 11D2                        C6            .byte	$C6
05226 11D3                        EE            .byte	$EE
05227 11D4                        FE            .byte	$FE
05228 11D5                        FE            .byte	$FE
05229 11D6                        D6            .byte	$D6
05230 11D7                        C6            .byte	$C6
05231 11D8                        C6            .byte	$C6
05232 11D9                        00            .byte	0
05233                                           ! 969  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05234 11DA                        C6            .byte	$C6
05235 11DB                        E6            .byte	$E6
05236 11DC                        F6            .byte	$F6
05237 11DD                        DE            .byte	$DE
05238 11DE                        CE            .byte	$CE
05239 11DF                        C6            .byte	$C6
05240 11E0                        C6            .byte	$C6
05241 11E1                        00            .byte	0
05242                                           ! 970  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05243 11E2                        38            .byte	$38
05244 11E3                        6C            .byte	$6C
05245 11E4                        C6            .byte	$C6
05246 11E5                        C6            .byte	$C6
05247 11E6                        C6            .byte	$C6
05248 11E7                        6C            .byte	$6C
05249 11E8                        38            .byte	$38
05250 11E9                        00            .byte	0
05251                                           ! 971  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05252 11EA                        FC            .byte	$FC
05253 11EB                        66            .byte	$66
05254 11EC                        66            .byte	$66
05255 11ED                        7C            .byte	$7C
05256 11EE                        60            .byte	$60
05257 11EF                        60            .byte	$60
05258 11F0                        F0            .byte	$F0
05259 11F1                        00            .byte	0
05260                                           ! 972  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05261 11F2                        78            .byte	$78
05262 11F3                        CC            .byte	$CC
05263 11F4                        CC            .byte	$CC
05264 11F5                        CC            .byte	$CC
05265 11F6                        DC            .byte	$DC
05266 11F7                        78            .byte	$78
05267 11F8                        1C            .byte	$1C
05268 11F9                        00            .byte	0
05269                                           ! 973  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05270 11FA                        FC            .byte	$FC
05271 11FB                        66            .byte	$66
05272 11FC                        66            .byte	$66
05273 11FD                        7C            .byte	$7C
05274 11FE                        6C            .byte	$6C
05275 11FF                        66            .byte	$66
05276 1200                        E6            .byte	$E6
05277 1201                        00            .byte	0
05278                                           ! 974  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05279 1202                        78            .byte	$78
05280 1203                        CC            .byte	$CC
05281 1204                        E0            .byte	$E0
05282 1205                        70            .byte	$70
05283 1206                        1C            .byte	$1C
05284 1207                        CC            .byte	$CC
05285 1208                        78            .byte	$78
05286 1209                        00            .byte	0
05287                                           ! 975  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05288 120A                        FC            .byte	$FC
05289 120B                        B4            .byte	$B4
05290 120C                        30            .byte	$30
05291 120D                        30            .byte	$30
05292 120E                        30            .byte	$30
05293 120F                        30            .byte	$30
05294 1210                        78            .byte	$78
05295 1211                        00            .byte	0
05296                                           ! 976  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05297 1212                        CC            .byte	$CC
05298 1213                        CC            .byte	$CC
05299 1214                        CC            .byte	$CC
05300 1215                        CC            .byte	$CC
05301 1216                        CC            .byte	$CC
05302 1217                        CC            .byte	$CC
05303 1218                        FC            .byte	$FC
05304 1219                        00            .byte	0
05305                                           ! 977  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05306 121A                        CC            .byte	$CC
05307 121B                        CC            .byte	$CC
05308 121C                        CC            .byte	$CC
05309 121D                        CC            .byte	$CC
05310 121E                        CC            .byte	$CC
05311 121F                        78            .byte	$78
05312 1220                        30            .byte	$30
05313 1221                        00            .byte	0
05314                                           ! 978  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05315 1222                        C6            .byte	$C6
05316 1223                        C6            .byte	$C6
05317 1224                        C6            .byte	$C6
05318 1225                        D6            .byte	$D6
05319 1226                        FE            .byte	$FE
05320 1227                        EE            .byte	$EE
05321 1228                        C6            .byte	$C6
05322 1229                        00            .byte	0
05323                                           ! 979  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05324 122A                        C6            .byte	$C6
05325 122B                        C6            .byte	$C6
05326 122C                        6C            .byte	$6C
05327 122D                        38            .byte	$38
05328 122E                        38            .byte	$38
05329 122F                        6C            .byte	$6C
05330 1230                        C6            .byte	$C6
05331 1231                        00            .byte	0
05332                                           ! 980  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05333 1232                        CC            .byte	$CC
05334 1233                        CC            .byte	$CC
05335 1234                        CC            .byte	$CC
05336 1235                        78            .byte	$78
05337 1236                        30            .byte	$30
05338 1237                        30            .byte	$30
05339 1238                        78            .byte	$78
05340 1239                        00            .byte	0
05341                                           ! 981  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05342 123A                        FE            .byte	$FE
05343 123B                        C6            .byte	$C6
05344 123C                        8C            .byte	$8C
05345 123D                        18            .byte	$18
05346 123E                        32            .byte	$32
05347 123F                        66            .byte	$66
05348 1240                        FE            .byte	$FE
05349 1241                        00            .byte	0
05350                                           ! 982  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05351 1242                        78            .byte	$78
05352 1243                        60            .byte	$60
05353 1244                        60            .byte	$60
05354 1245                        60            .byte	$60
05355 1246                        60            .byte	$60
05356 1247                        60            .byte	$60
05357 1248                        78            .byte	$78
05358 1249                        00            .byte	0
05359                                           ! 983  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05360 124A                        C0            .byte	$C0
05361 124B                        60            .byte	$60
05362 124C                        30            .byte	$30
05363 124D                        18            .byte	$18
05364 124E                        0C            .byte	$C
05365 124F                        06            .byte	6
05366 1250                        02            .byte	2
05367 1251                        00            .byte	0
05368                                           ! 984  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05369 1252                        78            .byte	$78
05370 1253                        18            .byte	$18
05371 1254                        18            .byte	$18
05372 1255                        18            .byte	$18
05373 1256                        18            .byte	$18
05374 1257                        18            .byte	$18
05375 1258                        78            .byte	$78
05376 1259                        00            .byte	0
05377                                           ! 985  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05378 125A                        10            .byte	$10
05379 125B                        38            .byte	$38
05380 125C                        6C            .byte	$6C
05381 125D                        C6            .byte	$C6
05382 125E                        00            .byte	0
05383 125F                        00            .byte	0
05384 1260                        00            .byte	0
05385 1261                        00            .byte	0
05386                                           ! 986  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05387 1262                        00            .byte	0
05388 1263                        00            .byte	0
05389 1264                        00            .byte	0
05390 1265                        00            .byte	0
05391 1266                        00            .byte	0
05392 1267                        00            .byte	0
05393 1268                        00            .byte	0
05394 1269                        FF            .byte	$FF
05395                                           ! 987  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05396 126A                        30            .byte	$30
05397 126B                        30            .byte	$30
05398 126C                        18            .byte	$18
05399 126D                        00            .byte	0
05400 126E                        00            .byte	0
05401 126F                        00            .byte	0
05402 1270                        00            .byte	0
05403 1271                        00            .byte	0
05404                                           ! 988  0x00, 0x00, 0x78, 0x0c,
05405 1272                        00            .byte	0
05406 1273                        00            .byte	0
05407 1274                        78            .byte	$78
05408                                           ! 988  0x7c, 0xcc, 0x76, 0x00,
05409 1275                        0C            .byte	$C
05410 1276                        7C            .byte	$7C
05411 1277                        CC            .byte	$CC
05412 1278                        76            .byte	$76
05413 1279                        00            .byte	0
05414                                           ! 989  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05415 127A                        E0            .byte	$E0
05416 127B                        60            .byte	$60
05417 127C                        60            .byte	$60
05418 127D                        7C            .byte	$7C
05419 127E                        66            .byte	$66
05420 127F                        66            .byte	$66
05421 1280                        DC            .byte	$DC
05422 1281                        00            .byte	0
05423                                           ! 990  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05424 1282                        00            .byte	0
05425 1283                        00            .byte	0
05426 1284                        78            .byte	$78
05427 1285                        CC            .byte	$CC
05428 1286                        C0            .byte	$C0
05429 1287                        CC            .byte	$CC
05430 1288                        78            .byte	$78
05431 1289                        00            .byte	0
05432                                           ! 991  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05433 128A                        1C            .byte	$1C
05434 128B                        0C            .byte	$C
05435 128C                        0C            .byte	$C
05436 128D                        7C            .byte	$7C
05437 128E                        CC            .byte	$CC
05438 128F                        CC            .byte	$CC
05439 1290                        76            .byte	$76
05440 1291                        00            .byte	0
05441                                           ! 992  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05442 1292                        00            .byte	0
05443 1293                        00            .byte	0
05444 1294                        78            .byte	$78
05445 1295                        CC            .byte	$CC
05446 1296                        FC            .byte	$FC
05447 1297                        C0            .byte	$C0
05448 1298                        78            .byte	$78
05449 1299                        00            .byte	0
05450                                           ! 993  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05451 129A                        38            .byte	$38
05452 129B                        6C            .byte	$6C
05453 129C                        60            .byte	$60
05454 129D                        F0            .byte	$F0
05455 129E                        60            .byte	$60
05456 129F                        60            .byte	$60
05457 12A0                        F0            .byte	$F0
05458 12A1                        00            .byte	0
05459                                           ! 994  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05460 12A2                        00            .byte	0
05461 12A3                        00            .byte	0
05462 12A4                        76            .byte	$76
05463 12A5                        CC            .byte	$CC
05464 12A6                        CC            .byte	$CC
05465 12A7                        7C            .byte	$7C
05466 12A8                        0C            .byte	$C
05467 12A9                        F8            .byte	$F8
05468                                           ! 995  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05469 12AA                        E0            .byte	$E0
05470 12AB                        60            .byte	$60
05471 12AC                        6C            .byte	$6C
05472 12AD                        76            .byte	$76
05473 12AE                        66            .byte	$66
05474 12AF                        66            .byte	$66
05475 12B0                        E6            .byte	$E6
05476 12B1                        00            .byte	0
05477                                           ! 996  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05478 12B2                        30            .byte	$30
05479 12B3                        00            .byte	0
05480 12B4                        70            .byte	$70
05481 12B5                        30            .byte	$30
05482 12B6                        30            .byte	$30
05483 12B7                        30            .byte	$30
05484 12B8                        78            .byte	$78
05485 12B9                        00            .byte	0
05486                                           ! 997  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05487 12BA                        0C            .byte	$C
05488 12BB                        00            .byte	0
05489 12BC                        0C            .byte	$C
05490 12BD                        0C            .byte	$C
05491 12BE                        0C            .byte	$C
05492 12BF                        CC            .byte	$CC
05493 12C0                        CC            .byte	$CC
05494 12C1                        78            .byte	$78
05495                                           ! 998  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05496 12C2                        E0            .byte	$E0
05497 12C3                        60            .byte	$60
05498 12C4                        66            .byte	$66
05499 12C5                        6C            .byte	$6C
05500 12C6                        78            .byte	$78
05501 12C7                        6C            .byte	$6C
05502 12C8                        E6            .byte	$E6
05503 12C9                        00            .byte	0
05504                                           ! 999  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05505 12CA                        70            .byte	$70
05506 12CB                        30            .byte	$30
05507 12CC                        30            .byte	$30
05508 12CD                        30            .byte	$30
05509 12CE                        30            .byte	$30
05510 12CF                        30            .byte	$30
05511 12D0                        78            .byte	$78
05512 12D1                        00            .byte	0
05513                                           ! 1000  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05514 12D2                        00            .byte	0
05515 12D3                        00            .byte	0
05516 12D4                        CC            .byte	$CC
05517 12D5                        FE            .byte	$FE
05518 12D6                        FE            .byte	$FE
05519 12D7                        D6            .byte	$D6
05520 12D8                        C6            .byte	$C6
05521 12D9                        00            .byte	0
05522                                           ! 1001  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05523 12DA                        00            .byte	0
05524 12DB                        00            .byte	0
05525 12DC                        F8            .byte	$F8
05526 12DD                        CC            .byte	$CC
05527 12DE                        CC            .byte	$CC
05528 12DF                        CC            .byte	$CC
05529 12E0                        CC            .byte	$CC
05530 12E1                        00            .byte	0
05531                                           ! 1002  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05532 12E2                        00            .byte	0
05533 12E3                        00            .byte	0
05534 12E4                        78            .byte	$78
05535 12E5                        CC            .byte	$CC
05536 12E6                        CC            .byte	$CC
05537 12E7                        CC            .byte	$CC
05538 12E8                        78            .byte	$78
05539 12E9                        00            .byte	0
05540                                           ! 1003  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05541 12EA                        00            .byte	0
05542 12EB                        00            .byte	0
05543 12EC                        DC            .byte	$DC
05544 12ED                        66            .byte	$66
05545 12EE                        66            .byte	$66
05546 12EF                        7C            .byte	$7C
05547 12F0                        60            .byte	$60
05548 12F1                        F0            .byte	$F0
05549                                           ! 1004  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05550 12F2                        00            .byte	0
05551 12F3                        00            .byte	0
05552 12F4                        76            .byte	$76
05553 12F5                        CC            .byte	$CC
05554 12F6                        CC            .byte	$CC
05555 12F7                        7C            .byte	$7C
05556 12F8                        0C            .byte	$C
05557 12F9                        1E            .byte	$1E
05558                                           ! 1005  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05559 12FA                        00            .byte	0
05560 12FB                        00            .byte	0
05561 12FC                        DC            .byte	$DC
05562 12FD                        76            .byte	$76
05563 12FE                        66            .byte	$66
05564 12FF                        60            .byte	$60
05565 1300                        F0            .byte	$F0
05566 1301                        00            .byte	0
05567                                           ! 1006  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05568 1302                        00            .byte	0
05569 1303                        00            .byte	0
05570 1304                        7C            .byte	$7C
05571 1305                        C0            .byte	$C0
05572 1306                        78            .byte	$78
05573 1307                        0C            .byte	$C
05574 1308                        F8            .byte	$F8
05575 1309                        00            .byte	0
05576                                           ! 1007  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05577 130A                        10            .byte	$10
05578 130B                        30            .byte	$30
05579 130C                        7C            .byte	$7C
05580 130D                        30            .byte	$30
05581 130E                        30            .byte	$30
05582 130F                        34            .byte	$34
05583 1310                        18            .byte	$18
05584 1311                        00            .byte	0
05585                                           ! 1008  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05586 1312                        00            .byte	0
05587 1313                        00            .byte	0
05588 1314                        CC            .byte	$CC
05589 1315                        CC            .byte	$CC
05590 1316                        CC            .byte	$CC
05591 1317                        CC            .byte	$CC
05592 1318                        76            .byte	$76
05593 1319                        00            .byte	0
05594                                           ! 1009  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05595 131A                        00            .byte	0
05596 131B                        00            .byte	0
05597 131C                        CC            .byte	$CC
05598 131D                        CC            .byte	$CC
05599 131E                        CC            .byte	$CC
05600 131F                        78            .byte	$78
05601 1320                        30            .byte	$30
05602 1321                        00            .byte	0
05603                                           ! 1010  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05604 1322                        00            .byte	0
05605 1323                        00            .byte	0
05606 1324                        C6            .byte	$C6
05607 1325                        D6            .byte	$D6
05608 1326                        FE            .byte	$FE
05609 1327                        FE            .byte	$FE
05610 1328                        6C            .byte	$6C
05611 1329                        00            .byte	0
05612                                           ! 1011  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05613 132A                        00            .byte	0
05614 132B                        00            .byte	0
05615 132C                        C6            .byte	$C6
05616 132D                        6C            .byte	$6C
05617 132E                        38            .byte	$38
05618 132F                        6C            .byte	$6C
05619 1330                        C6            .byte	$C6
05620 1331                        00            .byte	0
05621                                           ! 1012  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05622 1332                        00            .byte	0
05623 1333                        00            .byte	0
05624 1334                        CC            .byte	$CC
05625 1335                        CC            .byte	$CC
05626 1336                        CC            .byte	$CC
05627 1337                        7C            .byte	$7C
05628 1338                        0C            .byte	$C
05629 1339                        F8            .byte	$F8
05630                                           ! 1013  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05631 133A                        00            .byte	0
05632 133B                        00            .byte	0
05633 133C                        FC            .byte	$FC
05634 133D                        98            .byte	$98
05635 133E                        30            .byte	$30
05636 133F                        64            .byte	$64
05637 1340                        FC            .byte	$FC
05638 1341                        00            .byte	0
05639                                           ! 1014  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05640 1342                        1C            .byte	$1C
05641 1343                        30            .byte	$30
05642 1344                        30            .byte	$30
05643 1345                        E0            .byte	$E0
05644 1346                        30            .byte	$30
05645 1347                        30            .byte	$30
05646 1348                        1C            .byte	$1C
05647 1349                        00            .byte	0
05648                                           ! 1015  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05649 134A                        18            .byte	$18
05650 134B                        18            .byte	$18
05651 134C                        18            .byte	$18
05652 134D                        00            .byte	0
05653 134E                        18            .byte	$18
05654 134F                        18            .byte	$18
05655 1350                        18            .byte	$18
05656 1351                        00            .byte	0
05657                                           ! 1016  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05658 1352                        E0            .byte	$E0
05659 1353                        30            .byte	$30
05660 1354                        30            .byte	$30
05661 1355                        1C            .byte	$1C
05662 1356                        30            .byte	$30
05663 1357                        30            .byte	$30
05664 1358                        E0            .byte	$E0
05665 1359                        00            .byte	0
05666                                           ! 1017  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05667 135A                        76            .byte	$76
05668 135B                        DC            .byte	$DC
05669 135C                        00            .byte	0
05670 135D                        00            .byte	0
05671 135E                        00            .byte	0
05672 135F                        00            .byte	0
05673 1360                        00            .byte	0
05674 1361                        00            .byte	0
05675                                           ! 1018  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05676 1362                        00            .byte	0
05677 1363                        10            .byte	$10
05678 1364                        38            .byte	$38
05679 1365                        6C            .byte	$6C
05680 1366                        C6            .byte	$C6
05681 1367                        C6            .byte	$C6
05682 1368                        FE            .byte	$FE
05683 1369                        00            .byte	0
05684                                           ! 1019  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05685 136A                        78            .byte	$78
05686 136B                        CC            .byte	$CC
05687 136C                        C0            .byte	$C0
05688 136D                        CC            .byte	$CC
05689 136E                        78            .byte	$78
05690 136F                        18            .byte	$18
05691 1370                        0C            .byte	$C
05692 1371                        78            .byte	$78
05693                                           ! 1020  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05694 1372                        00            .byte	0
05695 1373                        CC            .byte	$CC
05696 1374                        00            .byte	0
05697 1375                        CC            .byte	$CC
05698 1376                        CC            .byte	$CC
05699 1377                        CC            .byte	$CC
05700 1378                        7E            .byte	$7E
05701 1379                        00            .byte	0
05702                                           ! 1021  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05703 137A                        1C            .byte	$1C
05704 137B                        00            .byte	0
05705 137C                        78            .byte	$78
05706 137D                        CC            .byte	$CC
05707 137E                        FC            .byte	$FC
05708 137F                        C0            .byte	$C0
05709 1380                        78            .byte	$78
05710 1381                        00            .byte	0
05711                                           ! 1022  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05712 1382                        7E            .byte	$7E
05713 1383                        C3            .byte	$C3
05714 1384                        3C            .byte	$3C
05715 1385                        06            .byte	6
05716 1386                        3E            .byte	$3E
05717 1387                        66            .byte	$66
05718 1388                        3F            .byte	$3F
05719 1389                        00            .byte	0
05720                                           ! 1023  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05721 138A                        CC            .byte	$CC
05722 138B                        00            .byte	0
05723 138C                        78            .byte	$78
05724 138D                        0C            .byte	$C
05725 138E                        7C            .byte	$7C
05726 138F                        CC            .byte	$CC
05727 1390                        7E            .byte	$7E
05728 1391                        00            .byte	0
05729                                           ! 1024  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05730 1392                        E0            .byte	$E0
05731 1393                        00            .byte	0
05732 1394                        78            .byte	$78
05733 1395                        0C            .byte	$C
05734 1396                        7C            .byte	$7C
05735 1397                        CC            .byte	$CC
05736 1398                        7E            .byte	$7E
05737 1399                        00            .byte	0
05738                                           ! 1025  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05739 139A                        30            .byte	$30
05740 139B                        30            .byte	$30
05741 139C                        78            .byte	$78
05742 139D                        0C            .byte	$C
05743 139E                        7C            .byte	$7C
05744 139F                        CC            .byte	$CC
05745 13A0                        7E            .byte	$7E
05746 13A1                        00            .byte	0
05747                                           ! 1026  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05748 13A2                        00            .byte	0
05749 13A3                        00            .byte	0
05750 13A4                        78            .byte	$78
05751 13A5                        C0            .byte	$C0
05752 13A6                        C0            .byte	$C0
05753 13A7                        78            .byte	$78
05754 13A8                        0C            .byte	$C
05755 13A9                        38            .byte	$38
05756                                           ! 1027  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05757 13AA                        7E            .byte	$7E
05758 13AB                        C3            .byte	$C3
05759 13AC                        3C            .byte	$3C
05760 13AD                        66            .byte	$66
05761 13AE                        7E            .byte	$7E
05762 13AF                        60            .byte	$60
05763 13B0                        3C            .byte	$3C
05764 13B1                        00            .byte	0
05765                                           ! 1028  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05766 13B2                        CC            .byte	$CC
05767 13B3                        00            .byte	0
05768 13B4                        78            .byte	$78
05769 13B5                        CC            .byte	$CC
05770 13B6                        FC            .byte	$FC
05771 13B7                        C0            .byte	$C0
05772 13B8                        78            .byte	$78
05773 13B9                        00            .byte	0
05774                                           ! 1029  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05775 13BA                        E0            .byte	$E0
05776 13BB                        00            .byte	0
05777 13BC                        78            .byte	$78
05778 13BD                        CC            .byte	$CC
05779 13BE                        FC            .byte	$FC
05780 13BF                        C0            .byte	$C0
05781 13C0                        78            .byte	$78
05782 13C1                        00            .byte	0
05783                                           ! 1030  0xcc, 0x00, 0
05784 13C2                        CC            .byte	$CC
05785 13C3                        00            .byte	0
05786                                           ! 1030 x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05787 13C4                        70            .byte	$70
05788 13C5                        30            .byte	$30
05789 13C6                        30            .byte	$30
05790 13C7                        30            .byte	$30
05791 13C8                        78            .byte	$78
05792 13C9                        00            .byte	0
05793                                           ! 1031  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05794 13CA                        7C            .byte	$7C
05795 13CB                        C6            .byte	$C6
05796 13CC                        38            .byte	$38
05797 13CD                        18            .byte	$18
05798 13CE                        18            .byte	$18
05799 13CF                        18            .byte	$18
05800 13D0                        3C            .byte	$3C
05801 13D1                        00            .byte	0
05802                                           ! 1032  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05803 13D2                        E0            .byte	$E0
05804 13D3                        00            .byte	0
05805 13D4                        70            .byte	$70
05806 13D5                        30            .byte	$30
05807 13D6                        30            .byte	$30
05808 13D7                        30            .byte	$30
05809 13D8                        78            .byte	$78
05810 13D9                        00            .byte	0
05811                                           ! 1033  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05812 13DA                        C6            .byte	$C6
05813 13DB                        38            .byte	$38
05814 13DC                        6C            .byte	$6C
05815 13DD                        C6            .byte	$C6
05816 13DE                        FE            .byte	$FE
05817 13DF                        C6            .byte	$C6
05818 13E0                        C6            .byte	$C6
05819 13E1                        00            .byte	0
05820                                           ! 1034  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05821 13E2                        30            .byte	$30
05822 13E3                        30            .byte	$30
05823 13E4                        00            .byte	0
05824 13E5                        78            .byte	$78
05825 13E6                        CC            .byte	$CC
05826 13E7                        FC            .byte	$FC
05827 13E8                        CC            .byte	$CC
05828 13E9                        00            .byte	0
05829                                           ! 1035  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05830 13EA                        1C            .byte	$1C
05831 13EB                        00            .byte	0
05832 13EC                        FC            .byte	$FC
05833 13ED                        60            .byte	$60
05834 13EE                        78            .byte	$78
05835 13EF                        60            .byte	$60
05836 13F0                        FC            .byte	$FC
05837 13F1                        00            .byte	0
05838                                           ! 1036  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05839 13F2                        00            .byte	0
05840 13F3                        00            .byte	0
05841 13F4                        7F            .byte	$7F
05842 13F5                        0C            .byte	$C
05843 13F6                        7F            .byte	$7F
05844 13F7                        CC            .byte	$CC
05845 13F8                        7F            .byte	$7F
05846 13F9                        00            .byte	0
05847                                           ! 1037  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05848 13FA                        3E            .byte	$3E
05849 13FB                        6C            .byte	$6C
05850 13FC                        CC            .byte	$CC
05851 13FD                        FE            .byte	$FE
05852 13FE                        CC            .byte	$CC
05853 13FF                        CC            .byte	$CC
05854 1400                        CE            .byte	$CE
05855 1401                        00            .byte	0
05856                                           ! 1038  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05857 1402                        78            .byte	$78
05858 1403                        CC            .byte	$CC
05859 1404                        00            .byte	0
05860 1405                        78            .byte	$78
05861 1406                        CC            .byte	$CC
05862 1407                        CC            .byte	$CC
05863 1408                        78            .byte	$78
05864 1409                        00            .byte	0
05865                                           ! 1039  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05866 140A                        00            .byte	0
05867 140B                        CC            .byte	$CC
05868 140C                        00            .byte	0
05869 140D                        78            .byte	$78
05870 140E                        CC            .byte	$CC
05871 140F                        CC            .byte	$CC
05872 1410                        78            .byte	$78
05873 1411                        00            .byte	0
05874                                           ! 1040  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05875 1412                        00            .byte	0
05876 1413                        E0            .byte	$E0
05877 1414                        00            .byte	0
05878 1415                        78            .byte	$78
05879 1416                        CC            .byte	$CC
05880 1417                        CC            .byte	$CC
05881 1418                        78            .byte	$78
05882 1419                        00            .byte	0
05883                                           ! 1041  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05884 141A                        78            .byte	$78
05885 141B                        CC            .byte	$CC
05886 141C                        00            .byte	0
05887 141D                        CC            .byte	$CC
05888 141E                        CC            .byte	$CC
05889 141F                        CC            .byte	$CC
05890 1420                        7E            .byte	$7E
05891 1421                        00            .byte	0
05892                                           ! 1042  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05893 1422                        00            .byte	0
05894 1423                        E0            .byte	$E0
05895 1424                        00            .byte	0
05896 1425                        CC            .byte	$CC
05897 1426                        CC            .byte	$CC
05898 1427                        CC            .byte	$CC
05899 1428                        7E            .byte	$7E
05900 1429                        00            .byte	0
05901                                           ! 1043  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05902 142A                        00            .byte	0
05903 142B                        CC            .byte	$CC
05904 142C                        00            .byte	0
05905 142D                        CC            .byte	$CC
05906 142E                        CC            .byte	$CC
05907 142F                        7C            .byte	$7C
05908 1430                        0C            .byte	$C
05909 1431                        F8            .byte	$F8
05910                                           ! 1044  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05911 1432                        C3            .byte	$C3
05912 1433                        18            .byte	$18
05913 1434                        3C            .byte	$3C
05914 1435                        66            .byte	$66
05915 1436                        66            .byte	$66
05916 1437                        3C            .byte	$3C
05917 1438                        18            .byte	$18
05918 1439                        00            .byte	0
05919                                           ! 1045  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05920 143A                        CC            .byte	$CC
05921 143B                        00            .byte	0
05922 143C                        CC            .byte	$CC
05923 143D                        CC            .byte	$CC
05924 143E                        CC            .byte	$CC
05925 143F                        CC            .byte	$CC
05926 1440                        78            .byte	$78
05927 1441                        00            .byte	0
05928                                           ! 1046  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05929 1442                        18            .byte	$18
05930 1443                        18            .byte	$18
05931 1444                        7E            .byte	$7E
05932 1445                        C0            .byte	$C0
05933 1446                        C0            .byte	$C0
05934 1447                        7E            .byte	$7E
05935 1448                        18            .byte	$18
05936 1449                        18            .byte	$18
05937                                           ! 1047  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05938 144A                        38            .byte	$38
05939 144B                        6C            .byte	$6C
05940 144C                        64            .byte	$64
05941 144D                        F0            .byte	$F0
05942 144E                        60            .byte	$60
05943 144F                        E6            .byte	$E6
05944 1450                        FC            .byte	$FC
05945 1451                        00            .byte	0
05946                                           ! 1048  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05947 1452                        CC            .byte	$CC
05948 1453                        CC            .byte	$CC
05949 1454                        78            .byte	$78
05950 1455                        FC            .byte	$FC
05951 1456                        30            .byte	$30
05952 1457                        FC            .byte	$FC
05953 1458                        30            .byte	$30
05954 1459                        30            .byte	$30
05955                                           ! 1049  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05956 145A                        F8            .byte	$F8
05957 145B                        CC            .byte	$CC
05958 145C                        CC            .byte	$CC
05959 145D                        FA            .byte	$FA
05960 145E                        C6            .byte	$C6
05961 145F                        CF            .byte	$CF
05962 1460                        C6            .byte	$C6
05963 1461                        C7            .byte	$C7
05964                                           ! 1050  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05965 1462                        0E            .byte	$E
05966 1463                        1B            .byte	$1B
05967 1464                        18            .byte	$18
05968 1465                        3C            .byte	$3C
05969 1466                        18            .byte	$18
05970 1467                        18            .byte	$18
05971 1468                        D8            .byte	$D8
05972 1469                        70            .byte	$70
05973                                           ! 1051  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05974 146A                        1C            .byte	$1C
05975 146B                        00            .byte	0
05976 146C                        78            .byte	$78
05977 146D                        0C            .byte	$C
05978 146E                        7C            .byte	$7C
05979 146F                        CC            .byte	$CC
05980 1470                        7E            .byte	$7E
05981 1471                        00            .byte	0
05982                                           ! 1052  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05983 1472                        38            .byte	$38
05984 1473                        00            .byte	0
05985 1474                        70            .byte	$70
05986 1475                        30            .byte	$30
05987 1476                        30            .byte	$30
05988 1477                        30            .byte	$30
05989 1478                        78            .byte	$78
05990 1479                        00            .byte	0
05991                                           ! 1053  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05992 147A                        00            .byte	0
05993 147B                        1C            .byte	$1C
05994 147C                        00            .byte	0
05995 147D                        78            .byte	$78
05996 147E                        CC            .byte	$CC
05997 147F                        CC            .byte	$CC
05998 1480                        78            .byte	$78
05999 1481                        00            .byte	0
06000                                           ! 1054  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
06001 1482                        00            .byte	0
06002 1483                        1C            .byte	$1C
06003 1484                        00            .byte	0
06004 1485                        CC            .byte	$CC
06005 1486                        CC            .byte	$CC
06006 1487                        CC            .byte	$CC
06007 1488                        7E            .byte	$7E
06008 1489                        00            .byte	0
06009                                           ! 1055  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
06010 148A                        00            .byte	0
06011 148B                        F8            .byte	$F8
06012 148C                        00            .byte	0
06013 148D                        F8            .byte	$F8
06014 148E                        CC            .byte	$CC
06015 148F                        CC            .byte	$CC
06016 1490                        CC            .byte	$CC
06017 1491                        00            .byte	0
06018                                           ! 1056  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
06019 1492                        FC            .byte	$FC
06020 1493                        00            .byte	0
06021 1494                        CC            .byte	$CC
06022 1495                        EC            .byte	$EC
06023 1496                        FC            .byte	$FC
06024 1497                        DC            .byte	$DC
06025 1498                        CC            .byte	$CC
06026 1499                        00            .byte	0
06027                                           ! 1057  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06028 149A                        3C            .byte	$3C
06029 149B                        6C            .byte	$6C
06030 149C                        6C            .byte	$6C
06031 149D                        3E            .byte	$3E
06032 149E                        00            .byte	0
06033 149F                        7E            .byte	$7E
06034 14A0                        00            .byte	0
06035 14A1                        00            .byte	0
06036                                           ! 1058  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06037 14A2                        38            .byte	$38
06038 14A3                        6C            .byte	$6C
06039 14A4                        6C            .byte	$6C
06040 14A5                        38            .byte	$38
06041 14A6                        00            .byte	0
06042 14A7                        7C            .byte	$7C
06043 14A8                        00            .byte	0
06044 14A9                        00            .byte	0
06045                                           ! 1059  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06046 14AA                        30            .byte	$30
06047 14AB                        00            .byte	0
06048 14AC                        30            .byte	$30
06049 14AD                        60            .byte	$60
06050 14AE                        C0            .byte	$C0
06051 14AF                        CC            .byte	$CC
06052 14B0                        78            .byte	$78
06053 14B1                        00            .byte	0
06054                                           ! 1060  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06055 14B2                        00            .byte	0
06056 14B3                        00            .byte	0
06057 14B4                        00            .byte	0
06058 14B5                        FC            .byte	$FC
06059 14B6                        C0            .byte	$C0
06060 14B7                        C0            .byte	$C0
06061 14B8                        00            .byte	0
06062 14B9                        00            .byte	0
06063                                           ! 1061  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06064 14BA                        00            .byte	0
06065 14BB                        00            .byte	0
06066 14BC                        00            .byte	0
06067 14BD                        FC            .byte	$FC
06068 14BE                        0C            .byte	$C
06069 14BF                        0C            .byte	$C
06070 14C0                        00            .byte	0
06071 14C1                        00            .byte	0
06072                                           ! 1062  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06073 14C2                        C3            .byte	$C3
06074 14C3                        C6            .byte	$C6
06075 14C4                        CC            .byte	$CC
06076 14C5                        DE            .byte	$DE
06077 14C6                        33            .byte	$33
06078 14C7                        66            .byte	$66
06079 14C8                        CC            .byte	$CC
06080 14C9                        0F            .byte	$F
06081                                           ! 1063  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06082 14CA                        C3            .byte	$C3
06083 14CB                        C6            .byte	$C6
06084 14CC                        CC            .byte	$CC
06085 14CD                        DB            .byte	$DB
06086 14CE                        37            .byte	$37
06087 14CF                        6F            .byte	$6F
06088 14D0                        CF            .byte	$CF
06089 14D1                        03            .byte	3
06090                                           ! 1064  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06091 14D2                        18            .byte	$18
06092 14D3                        18            .byte	$18
06093 14D4                        00            .byte	0
06094 14D5                        18            .byte	$18
06095 14D6                        18            .byte	$18
06096 14D7                        18            .byte	$18
06097 14D8                        18            .byte	$18
06098 14D9                        00            .byte	0
06099                                           ! 1065  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06100 14DA                        00            .byte	0
06101 14DB                        33            .byte	$33
06102 14DC                        66            .byte	$66
06103 14DD                        CC            .byte	$CC
06104 14DE                        66            .byte	$66
06105 14DF                        33            .byte	$33
06106 14E0                        00            .byte	0
06107 14E1                        00            .byte	0
06108                                           ! 1066  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06109 14E2                        00            .byte	0
06110 14E3                        CC            .byte	$CC
06111 14E4                        66            .byte	$66
06112 14E5                        33            .byte	$33
06113 14E6                        66            .byte	$66
06114 14E7                        CC            .byte	$CC
06115 14E8                        00            .byte	0
06116 14E9                        00            .byte	0
06117                                           ! 1067  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06118 14EA                        22            .byte	$22
06119 14EB                        88            .byte	$88
06120 14EC                        22            .byte	$22
06121 14ED                        88            .byte	$88
06122 14EE                        22            .byte	$22
06123 14EF                        88            .byte	$88
06124 14F0                        22            .byte	$22
06125 14F1                        88            .byte	$88
06126                                           ! 1068  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06127 14F2                        55            .byte	$55
06128 14F3                        AA            .byte	$AA
06129 14F4                        55            .byte	$55
06130 14F5                        AA            .byte	$AA
06131 14F6                        55            .byte	$55
06132 14F7                        AA            .byte	$AA
06133 14F8                        55            .byte	$55
06134 14F9                        AA            .byte	$AA
06135                                           ! 1069  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06136 14FA                        DB            .byte	$DB
06137 14FB                        77            .byte	$77
06138 14FC                        DB            .byte	$DB
06139 14FD                        EE            .byte	$EE
06140 14FE                        DB            .byte	$DB
06141 14FF                        77            .byte	$77
06142 1500                        DB            .byte	$DB
06143 1501                        EE            .byte	$EE
06144                                           ! 1070  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06145 1502                        18            .byte	$18
06146 1503                        18            .byte	$18
06147 1504                        18            .byte	$18
06148 1505                        18            .byte	$18
06149 1506                        18            .byte	$18
06150 1507                        18            .byte	$18
06151 1508                        18            .byte	$18
06152 1509                        18            .byte	$18
06153                                           ! 1071  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06154 150A                        18            .byte	$18
06155 150B                        18            .byte	$18
06156 150C                        18            .byte	$18
06157 150D                        18            .byte	$18
06158 150E                        F8            .byte	$F8
06159 150F                        18            .byte	$18
06160 1510                        18            .byte	$18
06161 1511                        18            .byte	$18
06162                                           ! 1072  0x1
06163                                           ! 1072 8, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06164 1512                        18            .byte	$18
06165 1513                        18            .byte	$18
06166 1514                        F8            .byte	$F8
06167 1515                        18            .byte	$18
06168 1516                        F8            .byte	$F8
06169 1517                        18            .byte	$18
06170 1518                        18            .byte	$18
06171 1519                        18            .byte	$18
06172                                           ! 1073  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06173 151A                        36            .byte	$36
06174 151B                        36            .byte	$36
06175 151C                        36            .byte	$36
06176 151D                        36            .byte	$36
06177 151E                        F6            .byte	$F6
06178 151F                        36            .byte	$36
06179 1520                        36            .byte	$36
06180 1521                        36            .byte	$36
06181                                           ! 1074  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
06182 1522                        00            .byte	0
06183 1523                        00            .byte	0
06184 1524                        00            .byte	0
06185 1525                        00            .byte	0
06186 1526                        FE            .byte	$FE
06187 1527                        36            .byte	$36
06188 1528                        36            .byte	$36
06189 1529                        36            .byte	$36
06190                                           ! 1075  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06191 152A                        00            .byte	0
06192 152B                        00            .byte	0
06193 152C                        F8            .byte	$F8
06194 152D                        18            .byte	$18
06195 152E                        F8            .byte	$F8
06196 152F                        18            .byte	$18
06197 1530                        18            .byte	$18
06198 1531                        18            .byte	$18
06199                                           ! 1076  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06200 1532                        36            .byte	$36
06201 1533                        36            .byte	$36
06202 1534                        F6            .byte	$F6
06203 1535                        06            .byte	6
06204 1536                        F6            .byte	$F6
06205 1537                        36            .byte	$36
06206 1538                        36            .byte	$36
06207 1539                        36            .byte	$36
06208                                           ! 1077  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06209 153A                        36            .byte	$36
06210 153B                        36            .byte	$36
06211 153C                        36            .byte	$36
06212 153D                        36            .byte	$36
06213 153E                        36            .byte	$36
06214 153F                        36            .byte	$36
06215 1540                        36            .byte	$36
06216 1541                        36            .byte	$36
06217                                           ! 1078  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06218 1542                        00            .byte	0
06219 1543                        00            .byte	0
06220 1544                        FE            .byte	$FE
06221 1545                        06            .byte	6
06222 1546                        F6            .byte	$F6
06223 1547                        36            .byte	$36
06224 1548                        36            .byte	$36
06225 1549                        36            .byte	$36
06226                                           ! 1079  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06227 154A                        36            .byte	$36
06228 154B                        36            .byte	$36
06229 154C                        F6            .byte	$F6
06230 154D                        06            .byte	6
06231 154E                        FE            .byte	$FE
06232 154F                        00            .byte	0
06233 1550                        00            .byte	0
06234 1551                        00            .byte	0
06235                                           ! 1080  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06236 1552                        36            .byte	$36
06237 1553                        36            .byte	$36
06238 1554                        36            .byte	$36
06239 1555                        36            .byte	$36
06240 1556                        FE            .byte	$FE
06241 1557                        00            .byte	0
06242 1558                        00            .byte	0
06243 1559                        00            .byte	0
06244                                           ! 1081  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06245 155A                        18            .byte	$18
06246 155B                        18            .byte	$18
06247 155C                        F8            .byte	$F8
06248 155D                        18            .byte	$18
06249 155E                        F8            .byte	$F8
06250 155F                        00            .byte	0
06251 1560                        00            .byte	0
06252 1561                        00            .byte	0
06253                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06254 1562                        00            .byte	0
06255 1563                        00            .byte	0
06256 1564                        00            .byte	0
06257 1565                        00            .byte	0
06258 1566                        F8            .byte	$F8
06259 1567                        18            .byte	$18
06260 1568                        18            .byte	$18
06261 1569                        18            .byte	$18
06262                                           ! 1083  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06263 156A                        18            .byte	$18
06264 156B                        18            .byte	$18
06265 156C                        18            .byte	$18
06266 156D                        18            .byte	$18
06267 156E                        1F            .byte	$1F
06268 156F                        00            .byte	0
06269 1570                        00            .byte	0
06270 1571                        00            .byte	0
06271                                           ! 1084  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06272 1572                        18            .byte	$18
06273 1573                        18            .byte	$18
06274 1574                        18            .byte	$18
06275 1575                        18            .byte	$18
06276 1576                        FF            .byte	$FF
06277 1577                        00            .byte	0
06278 1578                        00            .byte	0
06279 1579                        00            .byte	0
06280                                           ! 1085  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06281 157A                        00            .byte	0
06282 157B                        00            .byte	0
06283 157C                        00            .byte	0
06284 157D                        00            .byte	0
06285 157E                        FF            .byte	$FF
06286 157F                        18            .byte	$18
06287 1580                        18            .byte	$18
06288 1581                        18            .byte	$18
06289                                           ! 1086  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06290 1582                        18            .byte	$18
06291 1583                        18            .byte	$18
06292 1584                        18            .byte	$18
06293 1585                        18            .byte	$18
06294 1586                        1F            .byte	$1F
06295 1587                        18            .byte	$18
06296 1588                        18            .byte	$18
06297 1589                        18            .byte	$18
06298                                           ! 1087  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06299 158A                        00            .byte	0
06300 158B                        00            .byte	0
06301 158C                        00            .byte	0
06302 158D                        00            .byte	0
06303 158E                        FF            .byte	$FF
06304 158F                        00            .byte	0
06305 1590                        00            .byte	0
06306 1591                        00            .byte	0
06307                                           ! 1088  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06308 1592                        18            .byte	$18
06309 1593                        18            .byte	$18
06310 1594                        18            .byte	$18
06311 1595                        18            .byte	$18
06312 1596                        FF            .byte	$FF
06313 1597                        18            .byte	$18
06314 1598                        18            .byte	$18
06315 1599                        18            .byte	$18
06316                                           ! 1089  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06317 159A                        18            .byte	$18
06318 159B                        18            .byte	$18
06319 159C                        1F            .byte	$1F
06320 159D                        18            .byte	$18
06321 159E                        1F            .byte	$1F
06322 159F                        18            .byte	$18
06323 15A0                        18            .byte	$18
06324 15A1                        18            .byte	$18
06325                                           ! 1090  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06326 15A2                        36            .byte	$36
06327 15A3                        36            .byte	$36
06328 15A4                        36            .byte	$36
06329 15A5                        36            .byte	$36
06330 15A6                        37            .byte	$37
06331 15A7                        36            .byte	$36
06332 15A8                        36            .byte	$36
06333 15A9                        36            .byte	$36
06334                                           ! 1091  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06335 15AA                        36            .byte	$36
06336 15AB                        36            .byte	$36
06337 15AC                        37            .byte	$37
06338 15AD                        30            .byte	$30
06339 15AE                        3F            .byte	$3F
06340 15AF                        00            .byte	0
06341 15B0                        00            .byte	0
06342 15B1                        00            .byte	0
06343                                           ! 1092  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06344 15B2                        00            .byte	0
06345 15B3                        00            .byte	0
06346 15B4                        3F            .byte	$3F
06347 15B5                        30            .byte	$30
06348 15B6                        37            .byte	$37
06349 15B7                        36            .byte	$36
06350 15B8                        36            .byte	$36
06351 15B9                        36            .byte	$36
06352                                           ! 1093  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06353 15BA                        36            .byte	$36
06354 15BB                        36            .byte	$36
06355 15BC                        F7            .byte	$F7
06356 15BD                        00            .byte	0
06357 15BE                        FF            .byte	$FF
06358 15BF                        00            .byte	0
06359 15C0                        00            .byte	0
06360 15C1                        00            .byte	0
06361                                           ! 1094  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06362 15C2                        00            .byte	0
06363 15C3                        00            .byte	0
06364 15C4                        FF            .byte	$FF
06365 15C5                        00            .byte	0
06366 15C6                        F7            .byte	$F7
06367 15C7                        36            .byte	$36
06368 15C8                        36            .byte	$36
06369 15C9                        36            .byte	$36
06370                                           ! 1095  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06371 15CA                        36            .byte	$36
06372 15CB                        36            .byte	$36
06373 15CC                        37            .byte	$37
06374 15CD                        30            .byte	$30
06375 15CE                        37            .byte	$37
06376 15CF                        36            .byte	$36
06377 15D0                        36            .byte	$36
06378 15D1                        36            .byte	$36
06379                                           ! 1096  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06380 15D2                        00            .byte	0
06381 15D3                        00            .byte	0
06382 15D4                        FF            .byte	$FF
06383 15D5                        00            .byte	0
06384 15D6                        FF            .byte	$FF
06385 15D7                        00            .byte	0
06386 15D8                        00            .byte	0
06387 15D9                        00            .byte	0
06388                                           ! 1097  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06389 15DA                        36            .byte	$36
06390 15DB                        36            .byte	$36
06391 15DC                        F7            .byte	$F7
06392 15DD                        00            .byte	0
06393 15DE                        F7            .byte	$F7
06394 15DF                        36            .byte	$36
06395 15E0                        36            .byte	$36
06396 15E1                        36            .byte	$36
06397                                           ! 1098  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06398 15E2                        18            .byte	$18
06399 15E3                        18            .byte	$18
06400 15E4                        FF            .byte	$FF
06401 15E5                        00            .byte	0
06402 15E6                        FF            .byte	$FF
06403 15E7                        00            .byte	0
06404 15E8                        00            .byte	0
06405 15E9                        00            .byte	0
06406                                           ! 1099  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06407 15EA                        36            .byte	$36
06408 15EB                        36            .byte	$36
06409 15EC                        36            .byte	$36
06410 15ED                        36            .byte	$36
06411 15EE                        FF            .byte	$FF
06412 15EF                        00            .byte	0
06413 15F0                        00            .byte	0
06414 15F1                        00            .byte	0
06415                                           ! 1100  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06416 15F2                        00            .byte	0
06417 15F3                        00            .byte	0
06418 15F4                        FF            .byte	$FF
06419 15F5                        00            .byte	0
06420 15F6                        FF            .byte	$FF
06421 15F7                        18            .byte	$18
06422 15F8                        18            .byte	$18
06423 15F9                        18            .byte	$18
06424                                           ! 1101  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06425 15FA                        00            .byte	0
06426 15FB                        00            .byte	0
06427 15FC                        00            .byte	0
06428 15FD                        00            .byte	0
06429 15FE                        FF            .byte	$FF
06430 15FF                        36            .byte	$36
06431 1600                        36            .byte	$36
06432 1601                        36            .byte	$36
06433                                           ! 1102  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06434 1602                        36            .byte	$36
06435 1603                        36            .byte	$36
06436 1604                        36            .byte	$36
06437 1605                        36            .byte	$36
06438 1606                        3F            .byte	$3F
06439 1607                        00            .byte	0
06440 1608                        00            .byte	0
06441 1609                        00            .byte	0
06442                                           ! 1103  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06443 160A                        18            .byte	$18
06444 160B                        18            .byte	$18
06445 160C                        1F            .byte	$1F
06446 160D                        18            .byte	$18
06447 160E                        1F            .byte	$1F
06448 160F                        00            .byte	0
06449 1610                        00            .byte	0
06450 1611                        00            .byte	0
06451                                           ! 1104  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06452 1612                        00            .byte	0
06453 1613                        00            .byte	0
06454 1614                        1F            .byte	$1F
06455 1615                        18            .byte	$18
06456 1616                        1F            .byte	$1F
06457 1617                        18            .byte	$18
06458 1618                        18            .byte	$18
06459 1619                        18            .byte	$18
06460                                           ! 1105  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06461 161A                        00            .byte	0
06462 161B                        00            .byte	0
06463 161C                        00            .byte	0
06464 161D                        00            .byte	0
06465 161E                        3F            .byte	$3F
06466 161F                        36            .byte	$36
06467 1620                        36            .byte	$36
06468 1621                        36            .byte	$36
06469                                           ! 1106  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06470 1622                        36            .byte	$36
06471 1623                        36            .byte	$36
06472 1624                        36            .byte	$36
06473 1625                        36            .byte	$36
06474 1626                        FF            .byte	$FF
06475 1627                        36            .byte	$36
06476 1628                        36            .byte	$36
06477 1629                        36            .byte	$36
06478                                           ! 1107  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06479 162A                        18            .byte	$18
06480 162B                        18            .byte	$18
06481 162C                        FF            .byte	$FF
06482 162D                        18            .byte	$18
06483 162E                        FF            .byte	$FF
06484 162F                        18            .byte	$18
06485 1630                        18            .byte	$18
06486 1631                        18            .byte	$18
06487                                           ! 1108  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06488 1632                        18            .byte	$18
06489 1633                        18            .byte	$18
06490 1634                        18            .byte	$18
06491 1635                        18            .byte	$18
06492 1636                        F8            .byte	$F8
06493 1637                        00            .byte	0
06494 1638                        00            .byte	0
06495 1639                        00            .byte	0
06496                                           ! 1109  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06497 163A                        00            .byte	0
06498 163B                        00            .byte	0
06499 163C                        00            .byte	0
06500 163D                        00            .byte	0
06501 163E                        1F            .byte	$1F
06502 163F                        18            .byte	$18
06503 1640                        18            .byte	$18
06504 1641                        18            .byte	$18
06505                                           ! 1110  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06506 1642                        FF            .byte	$FF
06507 1643                        FF            .byte	$FF
06508 1644                        FF            .byte	$FF
06509 1645                        FF            .byte	$FF
06510 1646                        FF            .byte	$FF
06511 1647                        FF            .byte	$FF
06512 1648                        FF            .byte	$FF
06513 1649                        FF            .byte	$FF
06514                                           ! 1111  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06515 164A                        00            .byte	0
06516 164B                        00            .byte	0
06517 164C                        00            .byte	0
06518 164D                        00            .byte	0
06519 164E                        FF            .byte	$FF
06520 164F                        FF            .byte	$FF
06521 1650                        FF            .byte	$FF
06522 1651                        FF            .byte	$FF
06523                                           ! 1112  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06524 1652                        F0            .byte	$F0
06525 1653                        F0            .byte	$F0
06526 1654                        F0            .byte	$F0
06527 1655                        F0            .byte	$F0
06528 1656                        F0            .byte	$F0
06529 1657                        F0            .byte	$F0
06530 1658                        F0            .byte	$F0
06531 1659                        F0            .byte	$F0
06532                                           ! 1113  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
06533 165A                        0F            .byte	$F
06534 165B                        0F            .byte	$F
06535 165C                        0F            .byte	$F
06536 165D                        0F            .byte	$F
06537 165E                        0F            .byte	$F
06538 165F                        0F            .byte	$F
06539 1660                        0F            .byte	$F
06540                                           ! 1113 0x0f,
06541 1661                        0F            .byte	$F
06542                                           ! 1114  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06543 1662                        FF            .byte	$FF
06544 1663                        FF            .byte	$FF
06545 1664                        FF            .byte	$FF
06546 1665                        FF            .byte	$FF
06547 1666                        00            .byte	0
06548 1667                        00            .byte	0
06549 1668                        00            .byte	0
06550 1669                        00            .byte	0
06551                                           ! 1115  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06552 166A                        00            .byte	0
06553 166B                        00            .byte	0
06554 166C                        76            .byte	$76
06555 166D                        DC            .byte	$DC
06556 166E                        C8            .byte	$C8
06557 166F                        DC            .byte	$DC
06558 1670                        76            .byte	$76
06559 1671                        00            .byte	0
06560                                           ! 1116  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06561 1672                        00            .byte	0
06562 1673                        78            .byte	$78
06563 1674                        CC            .byte	$CC
06564 1675                        F8            .byte	$F8
06565 1676                        CC            .byte	$CC
06566 1677                        F8            .byte	$F8
06567 1678                        C0            .byte	$C0
06568 1679                        C0            .byte	$C0
06569                                           ! 1117  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06570 167A                        00            .byte	0
06571 167B                        FC            .byte	$FC
06572 167C                        CC            .byte	$CC
06573 167D                        C0            .byte	$C0
06574 167E                        C0            .byte	$C0
06575 167F                        C0            .byte	$C0
06576 1680                        C0            .byte	$C0
06577 1681                        00            .byte	0
06578                                           ! 1118  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06579 1682                        00            .byte	0
06580 1683                        FE            .byte	$FE
06581 1684                        6C            .byte	$6C
06582 1685                        6C            .byte	$6C
06583 1686                        6C            .byte	$6C
06584 1687                        6C            .byte	$6C
06585 1688                        6C            .byte	$6C
06586 1689                        00            .byte	0
06587                                           ! 1119  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06588 168A                        FC            .byte	$FC
06589 168B                        CC            .byte	$CC
06590 168C                        60            .byte	$60
06591 168D                        30            .byte	$30
06592 168E                        60            .byte	$60
06593 168F                        CC            .byte	$CC
06594 1690                        FC            .byte	$FC
06595 1691                        00            .byte	0
06596                                           ! 1120  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06597 1692                        00            .byte	0
06598 1693                        00            .byte	0
06599 1694                        7E            .byte	$7E
06600 1695                        D8            .byte	$D8
06601 1696                        D8            .byte	$D8
06602 1697                        D8            .byte	$D8
06603 1698                        70            .byte	$70
06604 1699                        00            .byte	0
06605                                           ! 1121  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06606 169A                        00            .byte	0
06607 169B                        66            .byte	$66
06608 169C                        66            .byte	$66
06609 169D                        66            .byte	$66
06610 169E                        66            .byte	$66
06611 169F                        7C            .byte	$7C
06612 16A0                        60            .byte	$60
06613 16A1                        C0            .byte	$C0
06614                                           ! 1122  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06615 16A2                        00            .byte	0
06616 16A3                        76            .byte	$76
06617 16A4                        DC            .byte	$DC
06618 16A5                        18            .byte	$18
06619 16A6                        18            .byte	$18
06620 16A7                        18            .byte	$18
06621 16A8                        18            .byte	$18
06622 16A9                        00            .byte	0
06623                                           ! 1123  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06624 16AA                        FC            .byte	$FC
06625 16AB                        30            .byte	$30
06626 16AC                        78            .byte	$78
06627 16AD                        CC            .byte	$CC
06628 16AE                        CC            .byte	$CC
06629 16AF                        78            .byte	$78
06630 16B0                        30            .byte	$30
06631 16B1                        FC            .byte	$FC
06632                                           ! 1124  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06633 16B2                        38            .byte	$38
06634 16B3                        6C            .byte	$6C
06635 16B4                        C6            .byte	$C6
06636 16B5                        FE            .byte	$FE
06637 16B6                        C6            .byte	$C6
06638 16B7                        6C            .byte	$6C
06639 16B8                        38            .byte	$38
06640 16B9                        00            .byte	0
06641                                           ! 1125  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06642 16BA                        38            .byte	$38
06643 16BB                        6C            .byte	$6C
06644 16BC                        C6            .byte	$C6
06645 16BD                        C6            .byte	$C6
06646 16BE                        6C            .byte	$6C
06647 16BF                        6C            .byte	$6C
06648 16C0                        EE            .byte	$EE
06649 16C1                        00            .byte	0
06650                                           ! 1126  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06651 16C2                        1C            .byte	$1C
06652 16C3                        30            .byte	$30
06653 16C4                        18            .byte	$18
06654 16C5                        7C            .byte	$7C
06655 16C6                        CC            .byte	$CC
06656 16C7                        CC            .byte	$CC
06657 16C8                        78            .byte	$78
06658 16C9                        00            .byte	0
06659                                           ! 1127  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06660 16CA                        00            .byte	0
06661 16CB                        00            .byte	0
06662 16CC                        7E            .byte	$7E
06663 16CD                        DB            .byte	$DB
06664 16CE                        DB            .byte	$DB
06665 16CF                        7E            .byte	$7E
06666 16D0                        00            .byte	0
06667 16D1                        00            .byte	0
06668                                           ! 1128  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06669 16D2                        06            .byte	6
06670 16D3                        0C            .byte	$C
06671 16D4                        7E            .byte	$7E
06672 16D5                        DB            .byte	$DB
06673 16D6                        DB            .byte	$DB
06674 16D7                        7E            .byte	$7E
06675 16D8                        60            .byte	$60
06676 16D9                        C0            .byte	$C0
06677                                           ! 1129  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06678 16DA                        38            .byte	$38
06679 16DB                        60            .byte	$60
06680 16DC                        C0            .byte	$C0
06681 16DD                        F8            .byte	$F8
06682 16DE                        C0            .byte	$C0
06683 16DF                        60            .byte	$60
06684 16E0                        38            .byte	$38
06685 16E1                        00            .byte	0
06686                                           ! 1130  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06687 16E2                        78            .byte	$78
06688 16E3                        CC            .byte	$CC
06689 16E4                        CC            .byte	$CC
06690 16E5                        CC            .byte	$CC
06691 16E6                        CC            .byte	$CC
06692 16E7                        CC            .byte	$CC
06693 16E8                        CC            .byte	$CC
06694 16E9                        00            .byte	0
06695                                           ! 1131  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06696 16EA                        00            .byte	0
06697 16EB                        FC            .byte	$FC
06698 16EC                        00            .byte	0
06699 16ED                        FC            .byte	$FC
06700 16EE                        00            .byte	0
06701 16EF                        FC            .byte	$FC
06702 16F0                        00            .byte	0
06703 16F1                        00            .byte	0
06704                                           ! 1132  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06705 16F2                        30            .byte	$30
06706 16F3                        30            .byte	$30
06707 16F4                        FC            .byte	$FC
06708 16F5                        30            .byte	$30
06709 16F6                        30            .byte	$30
06710 16F7                        00            .byte	0
06711 16F8                        FC            .byte	$FC
06712 16F9                        00            .byte	0
06713                                           ! 1133  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06714 16FA                        60            .byte	$60
06715 16FB                        30            .byte	$30
06716 16FC                        18            .byte	$18
06717 16FD                        30            .byte	$30
06718 16FE                        60            .byte	$60
06719 16FF                        00            .byte	0
06720 1700                        FC            .byte	$FC
06721 1701                        00            .byte	0
06722                                           ! 1134  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06723 1702                        18            .byte	$18
06724 1703                        30            .byte	$30
06725 1704                        60            .byte	$60
06726 1705                        30            .byte	$30
06727 1706                        18            .byte	$18
06728 1707                        00            .byte	0
06729 1708                        FC            .byte	$FC
06730 1709                        00            .byte	0
06731                                           ! 1135  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06732 170A                        0E            .byte	$E
06733 170B                        1B            .byte	$1B
06734 170C                        1B            .byte	$1B
06735 170D                        18            .byte	$18
06736 170E                        18            .byte	$18
06737 170F                        18            .byte	$18
06738 1710                        18            .byte	$18
06739 1711                        18            .byte	$18
06740                                           ! 1136  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06741 1712                        18            .byte	$18
06742 1713                        18            .byte	$18
06743 1714                        18            .byte	$18
06744 1715                        18            .byte	$18
06745 1716                        18            .byte	$18
06746 1717                        D8            .byte	$D8
06747 1718                        D8            .byte	$D8
06748 1719                        70            .byte	$70
06749                                           ! 1137  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06750 171A                        30            .byte	$30
06751 171B                        30            .byte	$30
06752 171C                        00            .byte	0
06753 171D                        FC            .byte	$FC
06754 171E                        00            .byte	0
06755 171F                        30            .byte	$30
06756 1720                        30            .byte	$30
06757 1721                        00            .byte	0
06758                                           ! 1138  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06759 1722                        00            .byte	0
06760 1723                        76            .byte	$76
06761 1724                        DC            .byte	$DC
06762 1725                        00            .byte	0
06763 1726                        76            .byte	$76
06764 1727                        DC            .byte	$DC
06765 1728                        00            .byte	0
06766 1729                        00            .byte	0
06767                                           ! 1139  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06768 172A                        38            .byte	$38
06769 172B                        6C            .byte	$6C
06770 172C                        6C            .byte	$6C
06771 172D                        38            .byte	$38
06772 172E                        00            .byte	0
06773 172F                        00            .byte	0
06774 1730                        00            .byte	0
06775 1731                        00            .byte	0
06776                                           ! 1140  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06777 1732                        00            .byte	0
06778 1733                        00            .byte	0
06779 1734                        00            .byte	0
06780 1735                        18            .byte	$18
06781 1736                        18            .byte	$18
06782 1737                        00            .byte	0
06783 1738                        00            .byte	0
06784 1739                        00            .byte	0
06785                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06786 173A                        00            .byte	0
06787 173B                        00            .byte	0
06788 173C                        00            .byte	0
06789 173D                        00            .byte	0
06790 173E                        18            .byte	$18
06791 173F                        00            .byte	0
06792 1740                        00            .byte	0
06793 1741                        00            .byte	0
06794                                           ! 1142  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06795 1742                        0F            .byte	$F
06796 1743                        0C            .byte	$C
06797 1744                        0C            .byte	$C
06798 1745                        0C            .byte	$C
06799 1746                        EC            .byte	$EC
06800 1747                        6C            .byte	$6C
06801 1748                        3C            .byte	$3C
06802 1749                        1C            .byte	$1C
06803                                           ! 1143  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06804 174A                        78            .byte	$78
06805 174B                        6C            .byte	$6C
06806 174C                        6C            .byte	$6C
06807 174D                        6C            .byte	$6C
06808 174E                        6C            .byte	$6C
06809 174F                        00            .byte	0
06810 1750                        00            .byte	0
06811 1751                        00            .byte	0
06812                                           ! 1144  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06813 1752                        70            .byte	$70
06814 1753                        18            .byte	$18
06815 1754                        30            .byte	$30
06816 1755                        60            .byte	$60
06817 1756                        78            .byte	$78
06818 1757                        00            .byte	0
06819 1758                        00            .byte	0
06820 1759                        00            .byte	0
06821                                           ! 1145  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06822 175A                        00            .byte	0
06823 175B                        00            .byte	0
06824 175C                        3C            .byte	$3C
06825 175D                        3C            .byte	$3C
06826 175E                        3C            .byte	$3C
06827 175F                        3C            .byte	$3C
06828 1760                        00            .byte	0
06829 1761                        00            .byte	0
06830                                           ! 1146  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06831 1762                        00            .byte	0
06832 1763                        00            .byte	0
06833 1764                        00            .byte	0
06834 1765                        00            .byte	0
06835 1766                        00            .byte	0
06836 1767                        00            .byte	0
06837 1768                        00            .byte	0
06838                                           ! 1147 };
06839 1769                        00            .byte	0
06840                                           !BCC_EOS
06841                                           ! 1148 static Bit8u vgafont14[256*14]=
06842                                           ! 1149 {
06843                       0000176A            _vgafont14:
06844                                           ! 1150  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06845 176A                        00            .byte	0
06846 176B                        00            .byte	0
06847 176C                        00            .byte	0
06848 176D                        00            .byte	0
06849 176E                        00            .byte	0
06850 176F                        00            .byte	0
06851 1770                        00            .byte	0
06852 1771                        00            .byte	0
06853 1772                        00            .byte	0
06854 1773                        00            .byte	0
06855 1774                        00            .byte	0
06856 1775                        00            .byte	0
06857 1776                        00            .byte	0
06858 1777                        00            .byte	0
06859                                           ! 1151  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06860 1778                        00            .byte	0
06861 1779                        00            .byte	0
06862 177A                        7E            .byte	$7E
06863 177B                        81            .byte	$81
06864 177C                        A5            .byte	$A5
06865 177D                        81            .byte	$81
06866 177E                        81            .byte	$81
06867 177F                        BD            .byte	$BD
06868 1780                        99            .byte	$99
06869 1781                        81            .byte	$81
06870 1782                        7E            .byte	$7E
06871 1783                        00            .byte	0
06872 1784                        00            .byte	0
06873 1785                        00            .byte	0
06874                                           ! 1152  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06875 1786                        00            .byte	0
06876 1787                        00            .byte	0
06877 1788                        7E            .byte	$7E
06878 1789                        FF            .byte	$FF
06879 178A                        DB            .byte	$DB
06880 178B                        FF            .byte	$FF
06881 178C                        FF            .byte	$FF
06882 178D                        C3            .byte	$C3
06883 178E                        E7            .byte	$E7
06884 178F                        FF            .byte	$FF
06885 1790                        7E            .byte	$7E
06886 1791                        00            .byte	0
06887 1792                        00            .byte	0
06888 1793                        00            .byte	0
06889                                           ! 1153  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06890 1794                        00            .byte	0
06891 1795                        00            .byte	0
06892 1796                        00            .byte	0
06893 1797                        6C            .byte	$6C
06894 1798                        FE            .byte	$FE
06895 1799                        FE            .byte	$FE
06896 179A                        FE            .byte	$FE
06897 179B                        FE            .byte	$FE
06898 179C                        7C            .byte	$7C
06899 179D                        38            .byte	$38
06900 179E                        10            .byte	$10
06901 179F                        00            .byte	0
06902 17A0                        00            .byte	0
06903 17A1                        00            .byte	0
06904                                           ! 1154  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 
06905 17A2                        00            .byte	0
06906 17A3                        00            .byte	0
06907 17A4                        00            .byte	0
06908 17A5                        10            .byte	$10
06909 17A6                        38            .byte	$38
06910 17A7                        7C            .byte	$7C
06911 17A8                        FE            .byte	$FE
06912 17A9                        7C            .byte	$7C
06913                                           ! 1154 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06914 17AA                        38            .byte	$38
06915 17AB                        10            .byte	$10
06916 17AC                        00            .byte	0
06917 17AD                        00            .byte	0
06918 17AE                        00            .byte	0
06919 17AF                        00            .byte	0
06920                                           ! 1155  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06921 17B0                        00            .byte	0
06922 17B1                        00            .byte	0
06923 17B2                        18            .byte	$18
06924 17B3                        3C            .byte	$3C
06925 17B4                        3C            .byte	$3C
06926 17B5                        E7            .byte	$E7
06927 17B6                        E7            .byte	$E7
06928 17B7                        E7            .byte	$E7
06929 17B8                        18            .byte	$18
06930 17B9                        18            .byte	$18
06931 17BA                        3C            .byte	$3C
06932 17BB                        00            .byte	0
06933 17BC                        00            .byte	0
06934 17BD                        00            .byte	0
06935                                           ! 1156  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06936 17BE                        00            .byte	0
06937 17BF                        00            .byte	0
06938 17C0                        18            .byte	$18
06939 17C1                        3C            .byte	$3C
06940 17C2                        7E            .byte	$7E
06941 17C3                        FF            .byte	$FF
06942 17C4                        FF            .byte	$FF
06943 17C5                        7E            .byte	$7E
06944 17C6                        18            .byte	$18
06945 17C7                        18            .byte	$18
06946 17C8                        3C            .byte	$3C
06947 17C9                        00            .byte	0
06948 17CA                        00            .byte	0
06949 17CB                        00            .byte	0
06950                                           ! 1157  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06951 17CC                        00            .byte	0
06952 17CD                        00            .byte	0
06953 17CE                        00            .byte	0
06954 17CF                        00            .byte	0
06955 17D0                        00            .byte	0
06956 17D1                        18            .byte	$18
06957 17D2                        3C            .byte	$3C
06958 17D3                        3C            .byte	$3C
06959 17D4                        18            .byte	$18
06960 17D5                        00            .byte	0
06961 17D6                        00            .byte	0
06962 17D7                        00            .byte	0
06963 17D8                        00            .byte	0
06964 17D9                        00            .byte	0
06965                                           ! 1158  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06966 17DA                        FF            .byte	$FF
06967 17DB                        FF            .byte	$FF
06968 17DC                        FF            .byte	$FF
06969 17DD                        FF            .byte	$FF
06970 17DE                        FF            .byte	$FF
06971 17DF                        E7            .byte	$E7
06972 17E0                        C3            .byte	$C3
06973 17E1                        C3            .byte	$C3
06974 17E2                        E7            .byte	$E7
06975 17E3                        FF            .byte	$FF
06976 17E4                        FF            .byte	$FF
06977 17E5                        FF            .byte	$FF
06978 17E6                        FF            .byte	$FF
06979 17E7                        FF            .byte	$FF
06980                                           ! 1159  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06981 17E8                        00            .byte	0
06982 17E9                        00            .byte	0
06983 17EA                        00            .byte	0
06984 17EB                        00            .byte	0
06985 17EC                        3C            .byte	$3C
06986 17ED                        66            .byte	$66
06987 17EE                        42            .byte	$42
06988 17EF                        42            .byte	$42
06989 17F0                        66            .byte	$66
06990 17F1                        3C            .byte	$3C
06991 17F2                        00            .byte	0
06992 17F3                        00            .byte	0
06993 17F4                        00            .byte	0
06994 17F5                        00            .byte	0
06995                                           ! 1160  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06996 17F6                        FF            .byte	$FF
06997 17F7                        FF            .byte	$FF
06998 17F8                        FF            .byte	$FF
06999 17F9                        FF            .byte	$FF
07000 17FA                        C3            .byte	$C3
07001 17FB                        99            .byte	$99
07002 17FC                        BD            .byte	$BD
07003 17FD                        BD            .byte	$BD
07004 17FE                        99            .byte	$99
07005 17FF                        C3            .byte	$C3
07006 1800                        FF            .byte	$FF
07007 1801                        FF            .byte	$FF
07008 1802                        FF            .byte	$FF
07009 1803                        FF            .byte	$FF
07010                                           ! 1161  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07011 1804                        00            .byte	0
07012 1805                        00            .byte	0
07013 1806                        1E            .byte	$1E
07014 1807                        0E            .byte	$E
07015 1808                        1A            .byte	$1A
07016 1809                        32            .byte	$32
07017 180A                        78            .byte	$78
07018 180B                        CC            .byte	$CC
07019 180C                        CC            .byte	$CC
07020 180D                        CC            .byte	$CC
07021 180E                        78            .byte	$78
07022 180F                        00            .byte	0
07023 1810                        00            .byte	0
07024 1811                        00            .byte	0
07025                                           ! 1162  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07026 1812                        00            .byte	0
07027 1813                        00            .byte	0
07028 1814                        3C            .byte	$3C
07029 1815                        66            .byte	$66
07030 1816                        66            .byte	$66
07031 1817                        66            .byte	$66
07032 1818                        3C            .byte	$3C
07033 1819                        18            .byte	$18
07034 181A                        7E            .byte	$7E
07035 181B                        18            .byte	$18
07036 181C                        18            .byte	$18
07037 181D                        00            .byte	0
07038 181E                        00            .byte	0
07039 181F                        00            .byte	0
07040                                           ! 1163  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07041 1820                        00            .byte	0
07042 1821                        00            .byte	0
07043 1822                        3F            .byte	$3F
07044 1823                        33            .byte	$33
07045 1824                        3F            .byte	$3F
07046 1825                        30            .byte	$30
07047 1826                        30            .byte	$30
07048 1827                        30            .byte	$30
07049 1828                        70            .byte	$70
07050 1829                        F0            .byte	$F0
07051 182A                        E0            .byte	$E0
07052 182B                        00            .byte	0
07053 182C                        00            .byte	0
07054 182D                        00            .byte	0
07055                                           ! 1164  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07056 182E                        00            .byte	0
07057 182F                        00            .byte	0
07058 1830                        7F            .byte	$7F
07059 1831                        63            .byte	$63
07060 1832                        7F            .byte	$7F
07061 1833                        63            .byte	$63
07062 1834                        63            .byte	$63
07063 1835                        63            .byte	$63
07064 1836                        67            .byte	$67
07065 1837                        E7            .byte	$E7
07066 1838                        E6            .byte	$E6
07067 1839                        C0            .byte	$C0
07068 183A                        00            .byte	0
07069 183B                        00            .byte	0
07070                                           ! 1165  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07071 183C                        00            .byte	0
07072 183D                        00            .byte	0
07073 183E                        18            .byte	$18
07074 183F                        18            .byte	$18
07075 1840                        DB            .byte	$DB
07076 1841                        3C            .byte	$3C
07077 1842                        E7            .byte	$E7
07078 1843                        3C            .byte	$3C
07079 1844                        DB            .byte	$DB
07080 1845                        18            .byte	$18
07081 1846                        18            .byte	$18
07082 1847                        00            .byte	0
07083 1848                        00            .byte	0
07084 1849                        00            .byte	0
07085                                           ! 1166  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07086 184A                        00            .byte	0
07087 184B                        00            .byte	0
07088 184C                        80            .byte	$80
07089 184D                        C0            .byte	$C0
07090 184E                        E0            .byte	$E0
07091 184F                        F8            .byte	$F8
07092 1850                        FE            .byte	$FE
07093 1851                        F8            .byte	$F8
07094 1852                        E0            .byte	$E0
07095 1853                        C0            .byte	$C0
07096 1854                        80            .byte	$80
07097 1855                        00            .byte	0
07098 1856                        00            .byte	0
07099 1857                        00            .byte	0
07100                                           ! 1167  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07101 1858                        00            .byte	0
07102 1859                        00            .byte	0
07103 185A                        02            .byte	2
07104 185B                        06            .byte	6
07105 185C                        0E            .byte	$E
07106 185D                        3E            .byte	$3E
07107 185E                        FE            .byte	$FE
07108 185F                        3E            .byte	$3E
07109 1860                        0E            .byte	$E
07110 1861                        06            .byte	6
07111 1862                        02            .byte	2
07112 1863                        00            .byte	0
07113 1864                        00            .byte	0
07114 1865                        00            .byte	0
07115                                           ! 1168  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07116 1866                        00            .byte	0
07117 1867                        00            .byte	0
07118 1868                        18            .byte	$18
07119 1869                        3C            .byte	$3C
07120 186A                        7E            .byte	$7E
07121 186B                        18            .byte	$18
07122 186C                        18            .byte	$18
07123 186D                        18            .byte	$18
07124 186E                        7E            .byte	$7E
07125 186F                        3C            .byte	$3C
07126 1870                        18            .byte	$18
07127 1871                        00            .byte	0
07128 1872                        00            .byte	0
07129 1873                        00            .byte	0
07130                                           ! 1169  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07131 1874                        00            .byte	0
07132 1875                        00            .byte	0
07133 1876                        66            .byte	$66
07134 1877                        66            .byte	$66
07135 1878                        66            .byte	$66
07136 1879                        66            .byte	$66
07137 187A                        66            .byte	$66
07138 187B                        66            .byte	$66
07139 187C                        00            .byte	0
07140 187D                        66            .byte	$66
07141 187E                        66            .byte	$66
07142 187F                        00            .byte	0
07143 1880                        00            .byte	0
07144 1881                        00            .byte	0
07145                                           ! 1170  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07146 1882                        00            .byte	0
07147 1883                        00            .byte	0
07148 1884                        7F            .byte	$7F
07149 1885                        DB            .byte	$DB
07150 1886                        DB            .byte	$DB
07151 1887                        DB            .byte	$DB
07152 1888                        7B            .byte	$7B
07153 1889                        1B            .byte	$1B
07154 188A                        1B            .byte	$1B
07155 188B                        1B            .byte	$1B
07156 188C                        1B            .byte	$1B
07157 188D                        00            .byte	0
07158 188E                        00            .byte	0
07159 188F                        00            .byte	0
07160                                           ! 1171  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07161 1890                        00            .byte	0
07162 1891                        7C            .byte	$7C
07163 1892                        C6            .byte	$C6
07164 1893                        60            .byte	$60
07165 1894                        38            .byte	$38
07166 1895                        6C            .byte	$6C
07167 1896                        C6            .byte	$C6
07168 1897                        C6            .byte	$C6
07169 1898                        6C            .byte	$6C
07170 1899                        38            .byte	$38
07171 189A                        0C            .byte	$C
07172 189B                        C6            .byte	$C6
07173 189C                        7C            .byte	$7C
07174 189D                        00            .byte	0
07175                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07176 189E                        00            .byte	0
07177 189F                        00            .byte	0
07178 18A0                        00            .byte	0
07179 18A1                        00            .byte	0
07180 18A2                        00            .byte	0
07181 18A3                        00            .byte	0
07182 18A4                        00            .byte	0
07183 18A5                        00            .byte	0
07184 18A6                        FE            .byte	$FE
07185 18A7                        FE            .byte	$FE
07186 18A8                        FE            .byte	$FE
07187 18A9                        00            .byte	0
07188 18AA                        00            .byte	0
07189 18AB                        00            .byte	0
07190                                           ! 1173  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07191 18AC                        00            .byte	0
07192 18AD                        00            .byte	0
07193 18AE                        18            .byte	$18
07194 18AF                        3C            .byte	$3C
07195 18B0                        7E            .byte	$7E
07196 18B1                        18            .byte	$18
07197 18B2                        18            .byte	$18
07198 18B3                        18            .byte	$18
07199 18B4                        7E            .byte	$7E
07200 18B5                        3C            .byte	$3C
07201 18B6                        18            .byte	$18
07202 18B7                        7E            .byte	$7E
07203 18B8                        00            .byte	0
07204 18B9                        00            .byte	0
07205                                           ! 1174  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07206 18BA                        00            .byte	0
07207 18BB                        00            .byte	0
07208 18BC                        18            .byte	$18
07209 18BD                        3C            .byte	$3C
07210 18BE                        7E            .byte	$7E
07211 18BF                        18            .byte	$18
07212 18C0                        18            .byte	$18
07213 18C1                        18            .byte	$18
07214 18C2                        18            .byte	$18
07215 18C3                        18            .byte	$18
07216 18C4                        18            .byte	$18
07217 18C5                        00            .byte	0
07218 18C6                        00            .byte	0
07219 18C7                        00            .byte	0
07220                                           ! 1175  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07221 18C8                        00            .byte	0
07222 18C9                        00            .byte	0
07223 18CA                        18            .byte	$18
07224 18CB                        18            .byte	$18
07225 18CC                        18            .byte	$18
07226 18CD                        18            .byte	$18
07227 18CE                        18            .byte	$18
07228 18CF                        18            .byte	$18
07229 18D0                        7E            .byte	$7E
07230 18D1                        3C            .byte	$3C
07231 18D2                        18            .byte	$18
07232 18D3                        00            .byte	0
07233 18D4                        00            .byte	0
07234 18D5                        00            .byte	0
07235                                           ! 1176  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07236 18D6                        00            .byte	0
07237 18D7                        00            .byte	0
07238 18D8                        00            .byte	0
07239 18D9                        00            .byte	0
07240 18DA                        18            .byte	$18
07241 18DB                        0C            .byte	$C
07242 18DC                        FE            .byte	$FE
07243 18DD                        0C            .byte	$C
07244 18DE                        18            .byte	$18
07245 18DF                        00            .byte	0
07246 18E0                        00            .byte	0
07247 18E1                        00            .byte	0
07248 18E2                        00            .byte	0
07249 18E3                        00            .byte	0
07250                                           ! 1177  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07251 18E4                        00            .byte	0
07252 18E5                        00            .byte	0
07253 18E6                        00            .byte	0
07254 18E7                        00            .byte	0
07255 18E8                        30            .byte	$30
07256 18E9                        60            .byte	$60
07257 18EA                        FE            .byte	$FE
07258 18EB                        60            .byte	$60
07259 18EC                        30            .byte	$30
07260 18ED                        00            .byte	0
07261 18EE                        00            .byte	0
07262 18EF                        00            .byte	0
07263 18F0                        00            .byte	0
07264 18F1                        00            .byte	0
07265                                           ! 1178  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x
07266 18F2                        00            .byte	0
07267 18F3                        00            .byte	0
07268 18F4                        00            .byte	0
07269 18F5                        00            .byte	0
07270 18F6                        00            .byte	0
07271 18F7                        C0            .byte	$C0
07272 18F8                        C0            .byte	$C0
07273 18F9                        C0            .byte	$C0
07274 18FA                        FE            .byte	$FE
07275                                           ! 1178 00, 0x00, 0x00, 0x00, 0x00,
07276 18FB                        00            .byte	0
07277 18FC                        00            .byte	0
07278 18FD                        00            .byte	0
07279 18FE                        00            .byte	0
07280 18FF                        00            .byte	0
07281                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07282 1900                        00            .byte	0
07283 1901                        00            .byte	0
07284 1902                        00            .byte	0
07285 1903                        00            .byte	0
07286 1904                        28            .byte	$28
07287 1905                        6C            .byte	$6C
07288 1906                        FE            .byte	$FE
07289 1907                        6C            .byte	$6C
07290 1908                        28            .byte	$28
07291 1909                        00            .byte	0
07292 190A                        00            .byte	0
07293 190B                        00            .byte	0
07294 190C                        00            .byte	0
07295 190D                        00            .byte	0
07296                                           ! 1180  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07297 190E                        00            .byte	0
07298 190F                        00            .byte	0
07299 1910                        00            .byte	0
07300 1911                        10            .byte	$10
07301 1912                        38            .byte	$38
07302 1913                        38            .byte	$38
07303 1914                        7C            .byte	$7C
07304 1915                        7C            .byte	$7C
07305 1916                        FE            .byte	$FE
07306 1917                        FE            .byte	$FE
07307 1918                        00            .byte	0
07308 1919                        00            .byte	0
07309 191A                        00            .byte	0
07310 191B                        00            .byte	0
07311                                           ! 1181  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07312 191C                        00            .byte	0
07313 191D                        00            .byte	0
07314 191E                        00            .byte	0
07315 191F                        FE            .byte	$FE
07316 1920                        FE            .byte	$FE
07317 1921                        7C            .byte	$7C
07318 1922                        7C            .byte	$7C
07319 1923                        38            .byte	$38
07320 1924                        38            .byte	$38
07321 1925                        10            .byte	$10
07322 1926                        00            .byte	0
07323 1927                        00            .byte	0
07324 1928                        00            .byte	0
07325 1929                        00            .byte	0
07326                                           ! 1182  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07327 192A                        00            .byte	0
07328 192B                        00            .byte	0
07329 192C                        00            .byte	0
07330 192D                        00            .byte	0
07331 192E                        00            .byte	0
07332 192F                        00            .byte	0
07333 1930                        00            .byte	0
07334 1931                        00            .byte	0
07335 1932                        00            .byte	0
07336 1933                        00            .byte	0
07337 1934                        00            .byte	0
07338 1935                        00            .byte	0
07339 1936                        00            .byte	0
07340 1937                        00            .byte	0
07341                                           ! 1183  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07342 1938                        00            .byte	0
07343 1939                        00            .byte	0
07344 193A                        18            .byte	$18
07345 193B                        3C            .byte	$3C
07346 193C                        3C            .byte	$3C
07347 193D                        3C            .byte	$3C
07348 193E                        18            .byte	$18
07349 193F                        18            .byte	$18
07350 1940                        00            .byte	0
07351 1941                        18            .byte	$18
07352 1942                        18            .byte	$18
07353 1943                        00            .byte	0
07354 1944                        00            .byte	0
07355 1945                        00            .byte	0
07356                                           ! 1184  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07357 1946                        00            .byte	0
07358 1947                        66            .byte	$66
07359 1948                        66            .byte	$66
07360 1949                        66            .byte	$66
07361 194A                        24            .byte	$24
07362 194B                        00            .byte	0
07363 194C                        00            .byte	0
07364 194D                        00            .byte	0
07365 194E                        00            .byte	0
07366 194F                        00            .byte	0
07367 1950                        00            .byte	0
07368 1951                        00            .byte	0
07369 1952                        00            .byte	0
07370 1953                        00            .byte	0
07371                                           ! 1185  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07372 1954                        00            .byte	0
07373 1955                        00            .byte	0
07374 1956                        6C            .byte	$6C
07375 1957                        6C            .byte	$6C
07376 1958                        FE            .byte	$FE
07377 1959                        6C            .byte	$6C
07378 195A                        6C            .byte	$6C
07379 195B                        6C            .byte	$6C
07380 195C                        FE            .byte	$FE
07381 195D                        6C            .byte	$6C
07382 195E                        6C            .byte	$6C
07383 195F                        00            .byte	0
07384 1960                        00            .byte	0
07385 1961                        00            .byte	0
07386                                           ! 1186  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07387 1962                        18            .byte	$18
07388 1963                        18            .byte	$18
07389 1964                        7C            .byte	$7C
07390 1965                        C6            .byte	$C6
07391 1966                        C2            .byte	$C2
07392 1967                        C0            .byte	$C0
07393 1968                        7C            .byte	$7C
07394 1969                        06            .byte	6
07395 196A                        86            .byte	$86
07396 196B                        C6            .byte	$C6
07397 196C                        7C            .byte	$7C
07398 196D                        18            .byte	$18
07399 196E                        18            .byte	$18
07400 196F                        00            .byte	0
07401                                           ! 1187  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07402 1970                        00            .byte	0
07403 1971                        00            .byte	0
07404 1972                        00            .byte	0
07405 1973                        00            .byte	0
07406 1974                        C2            .byte	$C2
07407 1975                        C6            .byte	$C6
07408 1976                        0C            .byte	$C
07409 1977                        18            .byte	$18
07410 1978                        30            .byte	$30
07411 1979                        66            .byte	$66
07412 197A                        C6            .byte	$C6
07413 197B                        00            .byte	0
07414 197C                        00            .byte	0
07415 197D                        00            .byte	0
07416                                           ! 1188  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07417 197E                        00            .byte	0
07418 197F                        00            .byte	0
07419 1980                        38            .byte	$38
07420 1981                        6C            .byte	$6C
07421 1982                        6C            .byte	$6C
07422 1983                        38            .byte	$38
07423 1984                        76            .byte	$76
07424 1985                        DC            .byte	$DC
07425 1986                        CC            .byte	$CC
07426 1987                        CC            .byte	$CC
07427 1988                        76            .byte	$76
07428 1989                        00            .byte	0
07429 198A                        00            .byte	0
07430 198B                        00            .byte	0
07431                                           ! 1189  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07432 198C                        00            .byte	0
07433 198D                        30            .byte	$30
07434 198E                        30            .byte	$30
07435 198F                        30            .byte	$30
07436 1990                        60            .byte	$60
07437 1991                        00            .byte	0
07438 1992                        00            .byte	0
07439 1993                        00            .byte	0
07440 1994                        00            .byte	0
07441 1995                        00            .byte	0
07442 1996                        00            .byte	0
07443 1997                        00            .byte	0
07444 1998                        00            .byte	0
07445 1999                        00            .byte	0
07446                                           ! 1190  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07447 199A                        00            .byte	0
07448 199B                        00            .byte	0
07449 199C                        0C            .byte	$C
07450 199D                        18            .byte	$18
07451 199E                        30            .byte	$30
07452 199F                        30            .byte	$30
07453 19A0                        30            .byte	$30
07454 19A1                        30            .byte	$30
07455 19A2                        30            .byte	$30
07456 19A3                        18            .byte	$18
07457 19A4                        0C            .byte	$C
07458 19A5                        00            .byte	0
07459 19A6                        00            .byte	0
07460 19A7                        00            .byte	0
07461                                           ! 1191  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07462 19A8                        00            .byte	0
07463 19A9                        00            .byte	0
07464 19AA                        30            .byte	$30
07465 19AB                        18            .byte	$18
07466 19AC                        0C            .byte	$C
07467 19AD                        0C            .byte	$C
07468 19AE                        0C            .byte	$C
07469 19AF                        0C            .byte	$C
07470 19B0                        0C            .byte	$C
07471 19B1                        18            .byte	$18
07472 19B2                        30            .byte	$30
07473 19B3                        00            .byte	0
07474 19B4                        00            .byte	0
07475 19B5                        00            .byte	0
07476                                           ! 1192  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07477 19B6                        00            .byte	0
07478 19B7                        00            .byte	0
07479 19B8                        00            .byte	0
07480 19B9                        00            .byte	0
07481 19BA                        66            .byte	$66
07482 19BB                        3C            .byte	$3C
07483 19BC                        FF            .byte	$FF
07484 19BD                        3C            .byte	$3C
07485 19BE                        66            .byte	$66
07486 19BF                        00            .byte	0
07487 19C0                        00            .byte	0
07488 19C1                        00            .byte	0
07489 19C2                        00            .byte	0
07490 19C3                        00            .byte	0
07491                                           ! 1193  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07492 19C4                        00            .byte	0
07493 19C5                        00            .byte	0
07494 19C6                        00            .byte	0
07495 19C7                        00            .byte	0
07496 19C8                        18            .byte	$18
07497 19C9                        18            .byte	$18
07498 19CA                        7E            .byte	$7E
07499 19CB                        18            .byte	$18
07500 19CC                        18            .byte	$18
07501 19CD                        00            .byte	0
07502 19CE                        00            .byte	0
07503 19CF                        00            .byte	0
07504 19D0                        00            .byte	0
07505 19D1                        00            .byte	0
07506                                           ! 1194  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07507 19D2                        00            .byte	0
07508 19D3                        00            .byte	0
07509 19D4                        00            .byte	0
07510 19D5                        00            .byte	0
07511 19D6                        00            .byte	0
07512 19D7                        00            .byte	0
07513 19D8                        00            .byte	0
07514 19D9                        00            .byte	0
07515 19DA                        18            .byte	$18
07516 19DB                        18            .byte	$18
07517 19DC                        18            .byte	$18
07518 19DD                        30            .byte	$30
07519 19DE                        00            .byte	0
07520 19DF                        00            .byte	0
07521                                           ! 1195  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07522 19E0                        00            .byte	0
07523 19E1                        00            .byte	0
07524 19E2                        00            .byte	0
07525 19E3                        00            .byte	0
07526 19E4                        00            .byte	0
07527 19E5                        00            .byte	0
07528 19E6                        FE            .byte	$FE
07529 19E7                        00            .byte	0
07530 19E8                        00            .byte	0
07531 19E9                        00            .byte	0
07532 19EA                        00            .byte	0
07533 19EB                        00            .byte	0
07534 19EC                        00            .byte	0
07535 19ED                        00            .byte	0
07536                                           ! 1196  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07537 19EE                        00            .byte	0
07538 19EF                        00            .byte	0
07539 19F0                        00            .byte	0
07540 19F1                        00            .byte	0
07541 19F2                        00            .byte	0
07542 19F3                        00            .byte	0
07543 19F4                        00            .byte	0
07544 19F5                        00            .byte	0
07545 19F6                        00            .byte	0
07546 19F7                        18            .byte	$18
07547 19F8                        18            .byte	$18
07548 19F9                        00            .byte	0
07549 19FA                        00            .byte	0
07550 19FB                        00            .byte	0
07551                                           ! 1197  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07552 19FC                        00            .byte	0
07553 19FD                        00            .byte	0
07554 19FE                        02            .byte	2
07555 19FF                        06            .byte	6
07556 1A00                        0C            .byte	$C
07557 1A01                        18            .byte	$18
07558 1A02                        30            .byte	$30
07559 1A03                        60            .byte	$60
07560 1A04                        C0            .byte	$C0
07561 1A05                        80            .byte	$80
07562 1A06                        00            .byte	0
07563 1A07                        00            .byte	0
07564 1A08                        00            .byte	0
07565 1A09                        00            .byte	0
07566                                           ! 1198  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07567 1A0A                        00            .byte	0
07568 1A0B                        00            .byte	0
07569 1A0C                        7C            .byte	$7C
07570 1A0D                        C6            .byte	$C6
07571 1A0E                        CE            .byte	$CE
07572 1A0F                        DE            .byte	$DE
07573 1A10                        F6            .byte	$F6
07574 1A11                        E6            .byte	$E6
07575 1A12                        C6            .byte	$C6
07576 1A13                        C6            .byte	$C6
07577 1A14                        7C            .byte	$7C
07578 1A15                        00            .byte	0
07579 1A16                        00            .byte	0
07580 1A17                        00            .byte	0
07581                                           ! 1199  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07582 1A18                        00            .byte	0
07583 1A19                        00            .byte	0
07584 1A1A                        18            .byte	$18
07585 1A1B                        38            .byte	$38
07586 1A1C                        78            .byte	$78
07587 1A1D                        18            .byte	$18
07588 1A1E                        18            .byte	$18
07589 1A1F                        18            .byte	$18
07590 1A20                        18            .byte	$18
07591 1A21                        18            .byte	$18
07592 1A22                        7E            .byte	$7E
07593 1A23                        00            .byte	0
07594 1A24                        00            .byte	0
07595 1A25                        00            .byte	0
07596                                           ! 1200  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07597 1A26                        00            .byte	0
07598 1A27                        00            .byte	0
07599 1A28                        7C            .byte	$7C
07600 1A29                        C6            .byte	$C6
07601 1A2A                        06            .byte	6
07602 1A2B                        0C            .byte	$C
07603 1A2C                        18            .byte	$18
07604 1A2D                        30            .byte	$30
07605 1A2E                        60            .byte	$60
07606 1A2F                        C6            .byte	$C6
07607 1A30                        FE            .byte	$FE
07608 1A31                        00            .byte	0
07609 1A32                        00            .byte	0
07610 1A33                        00            .byte	0
07611                                           ! 1201  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07612 1A34                        00            .byte	0
07613 1A35                        00            .byte	0
07614 1A36                        7C            .byte	$7C
07615 1A37                        C6            .byte	$C6
07616 1A38                        06            .byte	6
07617 1A39                        06            .byte	6
07618 1A3A                        3C            .byte	$3C
07619 1A3B                        06            .byte	6
07620 1A3C                        06            .byte	6
07621 1A3D                        C6            .byte	$C6
07622 1A3E                        7C            .byte	$7C
07623 1A3F                        00            .byte	0
07624 1A40                        00            .byte	0
07625 1A41                        00            .byte	0
07626                                           ! 1202  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e
07627 1A42                        00            .byte	0
07628 1A43                        00            .byte	0
07629 1A44                        0C            .byte	$C
07630 1A45                        1C            .byte	$1C
07631 1A46                        3C            .byte	$3C
07632 1A47                        6C            .byte	$6C
07633 1A48                        CC            .byte	$CC
07634 1A49                        FE            .byte	$FE
07635 1A4A                        0C            .byte	$C
07636 1A4B                        0C            .byte	$C
07637                                           ! 1202 , 0x00, 0x00, 0x00,
07638 1A4C                        1E            .byte	$1E
07639 1A4D                        00            .byte	0
07640 1A4E                        00            .byte	0
07641 1A4F                        00            .byte	0
07642                                           ! 1203  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07643 1A50                        00            .byte	0
07644 1A51                        00            .byte	0
07645 1A52                        FE            .byte	$FE
07646 1A53                        C0            .byte	$C0
07647 1A54                        C0            .byte	$C0
07648 1A55                        C0            .byte	$C0
07649 1A56                        FC            .byte	$FC
07650 1A57                        06            .byte	6
07651 1A58                        06            .byte	6
07652 1A59                        C6            .byte	$C6
07653 1A5A                        7C            .byte	$7C
07654 1A5B                        00            .byte	0
07655 1A5C                        00            .byte	0
07656 1A5D                        00            .byte	0
07657                                           ! 1204  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07658 1A5E                        00            .byte	0
07659 1A5F                        00            .byte	0
07660 1A60                        38            .byte	$38
07661 1A61                        60            .byte	$60
07662 1A62                        C0            .byte	$C0
07663 1A63                        C0            .byte	$C0
07664 1A64                        FC            .byte	$FC
07665 1A65                        C6            .byte	$C6
07666 1A66                        C6            .byte	$C6
07667 1A67                        C6            .byte	$C6
07668 1A68                        7C            .byte	$7C
07669 1A69                        00            .byte	0
07670 1A6A                        00            .byte	0
07671 1A6B                        00            .byte	0
07672                                           ! 1205  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07673 1A6C                        00            .byte	0
07674 1A6D                        00            .byte	0
07675 1A6E                        FE            .byte	$FE
07676 1A6F                        C6            .byte	$C6
07677 1A70                        06            .byte	6
07678 1A71                        0C            .byte	$C
07679 1A72                        18            .byte	$18
07680 1A73                        30            .byte	$30
07681 1A74                        30            .byte	$30
07682 1A75                        30            .byte	$30
07683 1A76                        30            .byte	$30
07684 1A77                        00            .byte	0
07685 1A78                        00            .byte	0
07686 1A79                        00            .byte	0
07687                                           ! 1206  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07688 1A7A                        00            .byte	0
07689 1A7B                        00            .byte	0
07690 1A7C                        7C            .byte	$7C
07691 1A7D                        C6            .byte	$C6
07692 1A7E                        C6            .byte	$C6
07693 1A7F                        C6            .byte	$C6
07694 1A80                        7C            .byte	$7C
07695 1A81                        C6            .byte	$C6
07696 1A82                        C6            .byte	$C6
07697 1A83                        C6            .byte	$C6
07698 1A84                        7C            .byte	$7C
07699 1A85                        00            .byte	0
07700 1A86                        00            .byte	0
07701 1A87                        00            .byte	0
07702                                           ! 1207  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07703 1A88                        00            .byte	0
07704 1A89                        00            .byte	0
07705 1A8A                        7C            .byte	$7C
07706 1A8B                        C6            .byte	$C6
07707 1A8C                        C6            .byte	$C6
07708 1A8D                        C6            .byte	$C6
07709 1A8E                        7E            .byte	$7E
07710 1A8F                        06            .byte	6
07711 1A90                        06            .byte	6
07712 1A91                        0C            .byte	$C
07713 1A92                        78            .byte	$78
07714 1A93                        00            .byte	0
07715 1A94                        00            .byte	0
07716 1A95                        00            .byte	0
07717                                           ! 1208  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07718 1A96                        00            .byte	0
07719 1A97                        00            .byte	0
07720 1A98                        00            .byte	0
07721 1A99                        18            .byte	$18
07722 1A9A                        18            .byte	$18
07723 1A9B                        00            .byte	0
07724 1A9C                        00            .byte	0
07725 1A9D                        00            .byte	0
07726 1A9E                        18            .byte	$18
07727 1A9F                        18            .byte	$18
07728 1AA0                        00            .byte	0
07729 1AA1                        00            .byte	0
07730 1AA2                        00            .byte	0
07731 1AA3                        00            .byte	0
07732                                           ! 1209  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07733 1AA4                        00            .byte	0
07734 1AA5                        00            .byte	0
07735 1AA6                        00            .byte	0
07736 1AA7                        18            .byte	$18
07737 1AA8                        18            .byte	$18
07738 1AA9                        00            .byte	0
07739 1AAA                        00            .byte	0
07740 1AAB                        00            .byte	0
07741 1AAC                        18            .byte	$18
07742 1AAD                        18            .byte	$18
07743 1AAE                        30            .byte	$30
07744 1AAF                        00            .byte	0
07745 1AB0                        00            .byte	0
07746 1AB1                        00            .byte	0
07747                                           ! 1210  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07748 1AB2                        00            .byte	0
07749 1AB3                        00            .byte	0
07750 1AB4                        06            .byte	6
07751 1AB5                        0C            .byte	$C
07752 1AB6                        18            .byte	$18
07753 1AB7                        30            .byte	$30
07754 1AB8                        60            .byte	$60
07755 1AB9                        30            .byte	$30
07756 1ABA                        18            .byte	$18
07757 1ABB                        0C            .byte	$C
07758 1ABC                        06            .byte	6
07759 1ABD                        00            .byte	0
07760 1ABE                        00            .byte	0
07761 1ABF                        00            .byte	0
07762                                           ! 1211  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07763 1AC0                        00            .byte	0
07764 1AC1                        00            .byte	0
07765 1AC2                        00            .byte	0
07766 1AC3                        00            .byte	0
07767 1AC4                        00            .byte	0
07768 1AC5                        7E            .byte	$7E
07769 1AC6                        00            .byte	0
07770 1AC7                        00            .byte	0
07771 1AC8                        7E            .byte	$7E
07772 1AC9                        00            .byte	0
07773 1ACA                        00            .byte	0
07774 1ACB                        00            .byte	0
07775 1ACC                        00            .byte	0
07776 1ACD                        00            .byte	0
07777                                           ! 1212  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07778 1ACE                        00            .byte	0
07779 1ACF                        00            .byte	0
07780 1AD0                        60            .byte	$60
07781 1AD1                        30            .byte	$30
07782 1AD2                        18            .byte	$18
07783 1AD3                        0C            .byte	$C
07784 1AD4                        06            .byte	6
07785 1AD5                        0C            .byte	$C
07786 1AD6                        18            .byte	$18
07787 1AD7                        30            .byte	$30
07788 1AD8                        60            .byte	$60
07789 1AD9                        00            .byte	0
07790 1ADA                        00            .byte	0
07791 1ADB                        00            .byte	0
07792                                           ! 1213  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07793 1ADC                        00            .byte	0
07794 1ADD                        00            .byte	0
07795 1ADE                        7C            .byte	$7C
07796 1ADF                        C6            .byte	$C6
07797 1AE0                        C6            .byte	$C6
07798 1AE1                        0C            .byte	$C
07799 1AE2                        18            .byte	$18
07800 1AE3                        18            .byte	$18
07801 1AE4                        00            .byte	0
07802 1AE5                        18            .byte	$18
07803 1AE6                        18            .byte	$18
07804 1AE7                        00            .byte	0
07805 1AE8                        00            .byte	0
07806 1AE9                        00            .byte	0
07807                                           ! 1214  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07808 1AEA                        00            .byte	0
07809 1AEB                        00            .byte	0
07810 1AEC                        7C            .byte	$7C
07811 1AED                        C6            .byte	$C6
07812 1AEE                        C6            .byte	$C6
07813 1AEF                        DE            .byte	$DE
07814 1AF0                        DE            .byte	$DE
07815 1AF1                        DE            .byte	$DE
07816 1AF2                        DC            .byte	$DC
07817 1AF3                        C0            .byte	$C0
07818 1AF4                        7C            .byte	$7C
07819 1AF5                        00            .byte	0
07820 1AF6                        00            .byte	0
07821 1AF7                        00            .byte	0
07822                                           ! 1215  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07823 1AF8                        00            .byte	0
07824 1AF9                        00            .byte	0
07825 1AFA                        10            .byte	$10
07826 1AFB                        38            .byte	$38
07827 1AFC                        6C            .byte	$6C
07828 1AFD                        C6            .byte	$C6
07829 1AFE                        C6            .byte	$C6
07830 1AFF                        FE            .byte	$FE
07831 1B00                        C6            .byte	$C6
07832 1B01                        C6            .byte	$C6
07833 1B02                        C6            .byte	$C6
07834 1B03                        00            .byte	0
07835 1B04                        00            .byte	0
07836 1B05                        00            .byte	0
07837                                           ! 1216  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07838 1B06                        00            .byte	0
07839 1B07                        00            .byte	0
07840 1B08                        FC            .byte	$FC
07841 1B09                        66            .byte	$66
07842 1B0A                        66            .byte	$66
07843 1B0B                        66            .byte	$66
07844 1B0C                        7C            .byte	$7C
07845 1B0D                        66            .byte	$66
07846 1B0E                        66            .byte	$66
07847 1B0F                        66            .byte	$66
07848 1B10                        FC            .byte	$FC
07849 1B11                        00            .byte	0
07850 1B12                        00            .byte	0
07851 1B13                        00            .byte	0
07852                                           ! 1217  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07853 1B14                        00            .byte	0
07854 1B15                        00            .byte	0
07855 1B16                        3C            .byte	$3C
07856 1B17                        66            .byte	$66
07857 1B18                        C2            .byte	$C2
07858 1B19                        C0            .byte	$C0
07859 1B1A                        C0            .byte	$C0
07860 1B1B                        C0            .byte	$C0
07861 1B1C                        C2            .byte	$C2
07862 1B1D                        66            .byte	$66
07863 1B1E                        3C            .byte	$3C
07864 1B1F                        00            .byte	0
07865 1B20                        00            .byte	0
07866 1B21                        00            .byte	0
07867                                           ! 1218  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07868 1B22                        00            .byte	0
07869 1B23                        00            .byte	0
07870 1B24                        F8            .byte	$F8
07871 1B25                        6C            .byte	$6C
07872 1B26                        66            .byte	$66
07873 1B27                        66            .byte	$66
07874 1B28                        66            .byte	$66
07875 1B29                        66            .byte	$66
07876 1B2A                        66            .byte	$66
07877 1B2B                        6C            .byte	$6C
07878 1B2C                        F8            .byte	$F8
07879 1B2D                        00            .byte	0
07880 1B2E                        00            .byte	0
07881 1B2F                        00            .byte	0
07882                                           ! 1219  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07883 1B30                        00            .byte	0
07884 1B31                        00            .byte	0
07885 1B32                        FE            .byte	$FE
07886 1B33                        66            .byte	$66
07887 1B34                        62            .byte	$62
07888 1B35                        68            .byte	$68
07889 1B36                        78            .byte	$78
07890 1B37                        68            .byte	$68
07891 1B38                        62            .byte	$62
07892 1B39                        66            .byte	$66
07893 1B3A                        FE            .byte	$FE
07894 1B3B                        00            .byte	0
07895 1B3C                        00            .byte	0
07896 1B3D                        00            .byte	0
07897                                           ! 1220  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07898 1B3E                        00            .byte	0
07899 1B3F                        00            .byte	0
07900 1B40                        FE            .byte	$FE
07901 1B41                        66            .byte	$66
07902 1B42                        62            .byte	$62
07903 1B43                        68            .byte	$68
07904 1B44                        78            .byte	$78
07905 1B45                        68            .byte	$68
07906 1B46                        60            .byte	$60
07907 1B47                        60            .byte	$60
07908 1B48                        F0            .byte	$F0
07909 1B49                        00            .byte	0
07910 1B4A                        00            .byte	0
07911 1B4B                        00            .byte	0
07912                                           ! 1221  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07913 1B4C                        00            .byte	0
07914 1B4D                        00            .byte	0
07915 1B4E                        3C            .byte	$3C
07916 1B4F                        66            .byte	$66
07917 1B50                        C2            .byte	$C2
07918 1B51                        C0            .byte	$C0
07919 1B52                        C0            .byte	$C0
07920 1B53                        DE            .byte	$DE
07921 1B54                        C6            .byte	$C6
07922 1B55                        66            .byte	$66
07923 1B56                        3A            .byte	$3A
07924 1B57                        00            .byte	0
07925 1B58                        00            .byte	0
07926 1B59                        00            .byte	0
07927                                           ! 1222  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07928 1B5A                        00            .byte	0
07929 1B5B                        00            .byte	0
07930 1B5C                        C6            .byte	$C6
07931 1B5D                        C6            .byte	$C6
07932 1B5E                        C6            .byte	$C6
07933 1B5F                        C6            .byte	$C6
07934 1B60                        FE            .byte	$FE
07935 1B61                        C6            .byte	$C6
07936 1B62                        C6            .byte	$C6
07937 1B63                        C6            .byte	$C6
07938 1B64                        C6            .byte	$C6
07939 1B65                        00            .byte	0
07940 1B66                        00            .byte	0
07941 1B67                        00            .byte	0
07942                                           ! 1223  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07943 1B68                        00            .byte	0
07944 1B69                        00            .byte	0
07945 1B6A                        3C            .byte	$3C
07946 1B6B                        18            .byte	$18
07947 1B6C                        18            .byte	$18
07948 1B6D                        18            .byte	$18
07949 1B6E                        18            .byte	$18
07950 1B6F                        18            .byte	$18
07951 1B70                        18            .byte	$18
07952 1B71                        18            .byte	$18
07953 1B72                        3C            .byte	$3C
07954 1B73                        00            .byte	0
07955 1B74                        00            .byte	0
07956 1B75                        00            .byte	0
07957                                           ! 1224  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07958 1B76                        00            .byte	0
07959 1B77                        00            .byte	0
07960 1B78                        1E            .byte	$1E
07961 1B79                        0C            .byte	$C
07962 1B7A                        0C            .byte	$C
07963 1B7B                        0C            .byte	$C
07964 1B7C                        0C            .byte	$C
07965 1B7D                        0C            .byte	$C
07966 1B7E                        CC            .byte	$CC
07967 1B7F                        CC            .byte	$CC
07968 1B80                        78            .byte	$78
07969 1B81                        00            .byte	0
07970 1B82                        00            .byte	0
07971 1B83                        00            .byte	0
07972                                           ! 1225  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07973 1B84                        00            .byte	0
07974 1B85                        00            .byte	0
07975 1B86                        E6            .byte	$E6
07976 1B87                        66            .byte	$66
07977 1B88                        6C            .byte	$6C
07978 1B89                        6C            .byte	$6C
07979 1B8A                        78            .byte	$78
07980 1B8B                        6C            .byte	$6C
07981 1B8C                        6C            .byte	$6C
07982 1B8D                        66            .byte	$66
07983 1B8E                        E6            .byte	$E6
07984 1B8F                        00            .byte	0
07985 1B90                        00            .byte	0
07986 1B91                        00            .byte	0
07987                                           ! 1226  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 
07988 1B92                        00            .byte	0
07989 1B93                        00            .byte	0
07990 1B94                        F0            .byte	$F0
07991 1B95                        60            .byte	$60
07992 1B96                        60            .byte	$60
07993 1B97                        60            .byte	$60
07994 1B98                        60            .byte	$60
07995 1B99                        60            .byte	$60
07996 1B9A                        62            .byte	$62
07997 1B9B                        66            .byte	$66
07998 1B9C                        FE            .byte	$FE
07999 1B9D                        00            .byte	0
08000                                           ! 1226 0x00, 0x00,
08001 1B9E                        00            .byte	0
08002 1B9F                        00            .byte	0
08003                                           ! 1227  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08004 1BA0                        00            .byte	0
08005 1BA1                        00            .byte	0
08006 1BA2                        C6            .byte	$C6
08007 1BA3                        EE            .byte	$EE
08008 1BA4                        FE            .byte	$FE
08009 1BA5                        FE            .byte	$FE
08010 1BA6                        D6            .byte	$D6
08011 1BA7                        C6            .byte	$C6
08012 1BA8                        C6            .byte	$C6
08013 1BA9                        C6            .byte	$C6
08014 1BAA                        C6            .byte	$C6
08015 1BAB                        00            .byte	0
08016 1BAC                        00            .byte	0
08017 1BAD                        00            .byte	0
08018                                           ! 1228  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08019 1BAE                        00            .byte	0
08020 1BAF                        00            .byte	0
08021 1BB0                        C6            .byte	$C6
08022 1BB1                        E6            .byte	$E6
08023 1BB2                        F6            .byte	$F6
08024 1BB3                        FE            .byte	$FE
08025 1BB4                        DE            .byte	$DE
08026 1BB5                        CE            .byte	$CE
08027 1BB6                        C6            .byte	$C6
08028 1BB7                        C6            .byte	$C6
08029 1BB8                        C6            .byte	$C6
08030 1BB9                        00            .byte	0
08031 1BBA                        00            .byte	0
08032 1BBB                        00            .byte	0
08033                                           ! 1229  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08034 1BBC                        00            .byte	0
08035 1BBD                        00            .byte	0
08036 1BBE                        38            .byte	$38
08037 1BBF                        6C            .byte	$6C
08038 1BC0                        C6            .byte	$C6
08039 1BC1                        C6            .byte	$C6
08040 1BC2                        C6            .byte	$C6
08041 1BC3                        C6            .byte	$C6
08042 1BC4                        C6            .byte	$C6
08043 1BC5                        6C            .byte	$6C
08044 1BC6                        38            .byte	$38
08045 1BC7                        00            .byte	0
08046 1BC8                        00            .byte	0
08047 1BC9                        00            .byte	0
08048                                           ! 1230  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08049 1BCA                        00            .byte	0
08050 1BCB                        00            .byte	0
08051 1BCC                        FC            .byte	$FC
08052 1BCD                        66            .byte	$66
08053 1BCE                        66            .byte	$66
08054 1BCF                        66            .byte	$66
08055 1BD0                        7C            .byte	$7C
08056 1BD1                        60            .byte	$60
08057 1BD2                        60            .byte	$60
08058 1BD3                        60            .byte	$60
08059 1BD4                        F0            .byte	$F0
08060 1BD5                        00            .byte	0
08061 1BD6                        00            .byte	0
08062 1BD7                        00            .byte	0
08063                                           ! 1231  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08064 1BD8                        00            .byte	0
08065 1BD9                        00            .byte	0
08066 1BDA                        7C            .byte	$7C
08067 1BDB                        C6            .byte	$C6
08068 1BDC                        C6            .byte	$C6
08069 1BDD                        C6            .byte	$C6
08070 1BDE                        C6            .byte	$C6
08071 1BDF                        D6            .byte	$D6
08072 1BE0                        DE            .byte	$DE
08073 1BE1                        7C            .byte	$7C
08074 1BE2                        0C            .byte	$C
08075 1BE3                        0E            .byte	$E
08076 1BE4                        00            .byte	0
08077 1BE5                        00            .byte	0
08078                                           ! 1232  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08079 1BE6                        00            .byte	0
08080 1BE7                        00            .byte	0
08081 1BE8                        FC            .byte	$FC
08082 1BE9                        66            .byte	$66
08083 1BEA                        66            .byte	$66
08084 1BEB                        66            .byte	$66
08085 1BEC                        7C            .byte	$7C
08086 1BED                        6C            .byte	$6C
08087 1BEE                        66            .byte	$66
08088 1BEF                        66            .byte	$66
08089 1BF0                        E6            .byte	$E6
08090 1BF1                        00            .byte	0
08091 1BF2                        00            .byte	0
08092 1BF3                        00            .byte	0
08093                                           ! 1233  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08094 1BF4                        00            .byte	0
08095 1BF5                        00            .byte	0
08096 1BF6                        7C            .byte	$7C
08097 1BF7                        C6            .byte	$C6
08098 1BF8                        C6            .byte	$C6
08099 1BF9                        60            .byte	$60
08100 1BFA                        38            .byte	$38
08101 1BFB                        0C            .byte	$C
08102 1BFC                        C6            .byte	$C6
08103 1BFD                        C6            .byte	$C6
08104 1BFE                        7C            .byte	$7C
08105 1BFF                        00            .byte	0
08106 1C00                        00            .byte	0
08107 1C01                        00            .byte	0
08108                                           ! 1234  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08109 1C02                        00            .byte	0
08110 1C03                        00            .byte	0
08111 1C04                        7E            .byte	$7E
08112 1C05                        7E            .byte	$7E
08113 1C06                        5A            .byte	$5A
08114 1C07                        18            .byte	$18
08115 1C08                        18            .byte	$18
08116 1C09                        18            .byte	$18
08117 1C0A                        18            .byte	$18
08118 1C0B                        18            .byte	$18
08119 1C0C                        3C            .byte	$3C
08120 1C0D                        00            .byte	0
08121 1C0E                        00            .byte	0
08122 1C0F                        00            .byte	0
08123                                           ! 1235  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08124 1C10                        00            .byte	0
08125 1C11                        00            .byte	0
08126 1C12                        C6            .byte	$C6
08127 1C13                        C6            .byte	$C6
08128 1C14                        C6            .byte	$C6
08129 1C15                        C6            .byte	$C6
08130 1C16                        C6            .byte	$C6
08131 1C17                        C6            .byte	$C6
08132 1C18                        C6            .byte	$C6
08133 1C19                        C6            .byte	$C6
08134 1C1A                        7C            .byte	$7C
08135 1C1B                        00            .byte	0
08136 1C1C                        00            .byte	0
08137 1C1D                        00            .byte	0
08138                                           ! 1236  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08139 1C1E                        00            .byte	0
08140 1C1F                        00            .byte	0
08141 1C20                        C6            .byte	$C6
08142 1C21                        C6            .byte	$C6
08143 1C22                        C6            .byte	$C6
08144 1C23                        C6            .byte	$C6
08145 1C24                        C6            .byte	$C6
08146 1C25                        C6            .byte	$C6
08147 1C26                        6C            .byte	$6C
08148 1C27                        38            .byte	$38
08149 1C28                        10            .byte	$10
08150 1C29                        00            .byte	0
08151 1C2A                        00            .byte	0
08152 1C2B                        00            .byte	0
08153                                           ! 1237  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08154 1C2C                        00            .byte	0
08155 1C2D                        00            .byte	0
08156 1C2E                        C6            .byte	$C6
08157 1C2F                        C6            .byte	$C6
08158 1C30                        C6            .byte	$C6
08159 1C31                        C6            .byte	$C6
08160 1C32                        D6            .byte	$D6
08161 1C33                        D6            .byte	$D6
08162 1C34                        FE            .byte	$FE
08163 1C35                        7C            .byte	$7C
08164 1C36                        6C            .byte	$6C
08165 1C37                        00            .byte	0
08166 1C38                        00            .byte	0
08167 1C39                        00            .byte	0
08168                                           ! 1238  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08169 1C3A                        00            .byte	0
08170 1C3B                        00            .byte	0
08171 1C3C                        C6            .byte	$C6
08172 1C3D                        C6            .byte	$C6
08173 1C3E                        6C            .byte	$6C
08174 1C3F                        38            .byte	$38
08175 1C40                        38            .byte	$38
08176 1C41                        38            .byte	$38
08177 1C42                        6C            .byte	$6C
08178 1C43                        C6            .byte	$C6
08179 1C44                        C6            .byte	$C6
08180 1C45                        00            .byte	0
08181 1C46                        00            .byte	0
08182 1C47                        00            .byte	0
08183                                           ! 1239  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08184 1C48                        00            .byte	0
08185 1C49                        00            .byte	0
08186 1C4A                        66            .byte	$66
08187 1C4B                        66            .byte	$66
08188 1C4C                        66            .byte	$66
08189 1C4D                        66            .byte	$66
08190 1C4E                        3C            .byte	$3C
08191 1C4F                        18            .byte	$18
08192 1C50                        18            .byte	$18
08193 1C51                        18            .byte	$18
08194 1C52                        3C            .byte	$3C
08195 1C53                        00            .byte	0
08196 1C54                        00            .byte	0
08197 1C55                        00            .byte	0
08198                                           ! 1240  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08199 1C56                        00            .byte	0
08200 1C57                        00            .byte	0
08201 1C58                        FE            .byte	$FE
08202 1C59                        C6            .byte	$C6
08203 1C5A                        8C            .byte	$8C
08204 1C5B                        18            .byte	$18
08205 1C5C                        30            .byte	$30
08206 1C5D                        60            .byte	$60
08207 1C5E                        C2            .byte	$C2
08208 1C5F                        C6            .byte	$C6
08209 1C60                        FE            .byte	$FE
08210 1C61                        00            .byte	0
08211 1C62                        00            .byte	0
08212 1C63                        00            .byte	0
08213                                           ! 1241  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08214 1C64                        00            .byte	0
08215 1C65                        00            .byte	0
08216 1C66                        3C            .byte	$3C
08217 1C67                        30            .byte	$30
08218 1C68                        30            .byte	$30
08219 1C69                        30            .byte	$30
08220 1C6A                        30            .byte	$30
08221 1C6B                        30            .byte	$30
08222 1C6C                        30            .byte	$30
08223 1C6D                        30            .byte	$30
08224 1C6E                        3C            .byte	$3C
08225 1C6F                        00            .byte	0
08226 1C70                        00            .byte	0
08227 1C71                        00            .byte	0
08228                                           ! 1242  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08229 1C72                        00            .byte	0
08230 1C73                        00            .byte	0
08231 1C74                        80            .byte	$80
08232 1C75                        C0            .byte	$C0
08233 1C76                        E0            .byte	$E0
08234 1C77                        70            .byte	$70
08235 1C78                        38            .byte	$38
08236 1C79                        1C            .byte	$1C
08237 1C7A                        0E            .byte	$E
08238 1C7B                        06            .byte	6
08239 1C7C                        02            .byte	2
08240 1C7D                        00            .byte	0
08241 1C7E                        00            .byte	0
08242 1C7F                        00            .byte	0
08243                                           ! 1243  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08244 1C80                        00            .byte	0
08245 1C81                        00            .byte	0
08246 1C82                        3C            .byte	$3C
08247 1C83                        0C            .byte	$C
08248 1C84                        0C            .byte	$C
08249 1C85                        0C            .byte	$C
08250 1C86                        0C            .byte	$C
08251 1C87                        0C            .byte	$C
08252 1C88                        0C            .byte	$C
08253 1C89                        0C            .byte	$C
08254 1C8A                        3C            .byte	$3C
08255 1C8B                        00            .byte	0
08256 1C8C                        00            .byte	0
08257 1C8D                        00            .byte	0
08258                                           ! 1244  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08259 1C8E                        10            .byte	$10
08260 1C8F                        38            .byte	$38
08261 1C90                        6C            .byte	$6C
08262 1C91                        C6            .byte	$C6
08263 1C92                        00            .byte	0
08264 1C93                        00            .byte	0
08265 1C94                        00            .byte	0
08266 1C95                        00            .byte	0
08267 1C96                        00            .byte	0
08268 1C97                        00            .byte	0
08269 1C98                        00            .byte	0
08270 1C99                        00            .byte	0
08271 1C9A                        00            .byte	0
08272 1C9B                        00            .byte	0
08273                                           ! 1245  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08274 1C9C                        00            .byte	0
08275 1C9D                        00            .byte	0
08276 1C9E                        00            .byte	0
08277 1C9F                        00            .byte	0
08278 1CA0                        00            .byte	0
08279 1CA1                        00            .byte	0
08280 1CA2                        00            .byte	0
08281 1CA3                        00            .byte	0
08282 1CA4                        00            .byte	0
08283 1CA5                        00            .byte	0
08284 1CA6                        00            .byte	0
08285 1CA7                        00            .byte	0
08286 1CA8                        FF            .byte	$FF
08287 1CA9                        00            .byte	0
08288                                           ! 1246  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08289 1CAA                        30            .byte	$30
08290 1CAB                        30            .byte	$30
08291 1CAC                        18            .byte	$18
08292 1CAD                        00            .byte	0
08293 1CAE                        00            .byte	0
08294 1CAF                        00            .byte	0
08295 1CB0                        00            .byte	0
08296 1CB1                        00            .byte	0
08297 1CB2                        00            .byte	0
08298 1CB3                        00            .byte	0
08299 1CB4                        00            .byte	0
08300 1CB5                        00            .byte	0
08301 1CB6                        00            .byte	0
08302 1CB7                        00            .byte	0
08303                                           ! 1247  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08304 1CB8                        00            .byte	0
08305 1CB9                        00            .byte	0
08306 1CBA                        00            .byte	0
08307 1CBB                        00            .byte	0
08308 1CBC                        00            .byte	0
08309 1CBD                        78            .byte	$78
08310 1CBE                        0C            .byte	$C
08311 1CBF                        7C            .byte	$7C
08312 1CC0                        CC            .byte	$CC
08313 1CC1                        CC            .byte	$CC
08314 1CC2                        76            .byte	$76
08315 1CC3                        00            .byte	0
08316 1CC4                        00            .byte	0
08317 1CC5                        00            .byte	0
08318                                           ! 1248  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08319 1CC6                        00            .byte	0
08320 1CC7                        00            .byte	0
08321 1CC8                        E0            .byte	$E0
08322 1CC9                        60            .byte	$60
08323 1CCA                        60            .byte	$60
08324 1CCB                        78            .byte	$78
08325 1CCC                        6C            .byte	$6C
08326 1CCD                        66            .byte	$66
08327 1CCE                        66            .byte	$66
08328 1CCF                        66            .byte	$66
08329 1CD0                        7C            .byte	$7C
08330 1CD1                        00            .byte	0
08331 1CD2                        00            .byte	0
08332 1CD3                        00            .byte	0
08333                                           ! 1249  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08334 1CD4                        00            .byte	0
08335 1CD5                        00            .byte	0
08336 1CD6                        00            .byte	0
08337 1CD7                        00            .byte	0
08338 1CD8                        00            .byte	0
08339 1CD9                        7C            .byte	$7C
08340 1CDA                        C6            .byte	$C6
08341 1CDB                        C0            .byte	$C0
08342 1CDC                        C0            .byte	$C0
08343 1CDD                        C6            .byte	$C6
08344 1CDE                        7C            .byte	$7C
08345 1CDF                        00            .byte	0
08346 1CE0                        00            .byte	0
08347 1CE1                        00            .byte	0
08348                                           ! 1250  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x
08349 1CE2                        00            .byte	0
08350 1CE3                        00            .byte	0
08351 1CE4                        1C            .byte	$1C
08352 1CE5                        0C            .byte	$C
08353 1CE6                        0C            .byte	$C
08354 1CE7                        3C            .byte	$3C
08355 1CE8                        6C            .byte	$6C
08356 1CE9                        CC            .byte	$CC
08357 1CEA                        CC            .byte	$CC
08358 1CEB                        CC            .byte	$CC
08359 1CEC                        76            .byte	$76
08360 1CED                        00            .byte	0
08361 1CEE                        00            .byte	0
08362                                           ! 1250 00,
08363 1CEF                        00            .byte	0
08364                                           ! 1251  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08365 1CF0                        00            .byte	0
08366 1CF1                        00            .byte	0
08367 1CF2                        00            .byte	0
08368 1CF3                        00            .byte	0
08369 1CF4                        00            .byte	0
08370 1CF5                        7C            .byte	$7C
08371 1CF6                        C6            .byte	$C6
08372 1CF7                        FE            .byte	$FE
08373 1CF8                        C0            .byte	$C0
08374 1CF9                        C6            .byte	$C6
08375 1CFA                        7C            .byte	$7C
08376 1CFB                        00            .byte	0
08377 1CFC                        00            .byte	0
08378 1CFD                        00            .byte	0
08379                                           ! 1252  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08380 1CFE                        00            .byte	0
08381 1CFF                        00            .byte	0
08382 1D00                        38            .byte	$38
08383 1D01                        6C            .byte	$6C
08384 1D02                        64            .byte	$64
08385 1D03                        60            .byte	$60
08386 1D04                        F0            .byte	$F0
08387 1D05                        60            .byte	$60
08388 1D06                        60            .byte	$60
08389 1D07                        60            .byte	$60
08390 1D08                        F0            .byte	$F0
08391 1D09                        00            .byte	0
08392 1D0A                        00            .byte	0
08393 1D0B                        00            .byte	0
08394                                           ! 1253  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08395 1D0C                        00            .byte	0
08396 1D0D                        00            .byte	0
08397 1D0E                        00            .byte	0
08398 1D0F                        00            .byte	0
08399 1D10                        00            .byte	0
08400 1D11                        76            .byte	$76
08401 1D12                        CC            .byte	$CC
08402 1D13                        CC            .byte	$CC
08403 1D14                        CC            .byte	$CC
08404 1D15                        7C            .byte	$7C
08405 1D16                        0C            .byte	$C
08406 1D17                        CC            .byte	$CC
08407 1D18                        78            .byte	$78
08408 1D19                        00            .byte	0
08409                                           ! 1254  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08410 1D1A                        00            .byte	0
08411 1D1B                        00            .byte	0
08412 1D1C                        E0            .byte	$E0
08413 1D1D                        60            .byte	$60
08414 1D1E                        60            .byte	$60
08415 1D1F                        6C            .byte	$6C
08416 1D20                        76            .byte	$76
08417 1D21                        66            .byte	$66
08418 1D22                        66            .byte	$66
08419 1D23                        66            .byte	$66
08420 1D24                        E6            .byte	$E6
08421 1D25                        00            .byte	0
08422 1D26                        00            .byte	0
08423 1D27                        00            .byte	0
08424                                           ! 1255  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08425 1D28                        00            .byte	0
08426 1D29                        00            .byte	0
08427 1D2A                        18            .byte	$18
08428 1D2B                        18            .byte	$18
08429 1D2C                        00            .byte	0
08430 1D2D                        38            .byte	$38
08431 1D2E                        18            .byte	$18
08432 1D2F                        18            .byte	$18
08433 1D30                        18            .byte	$18
08434 1D31                        18            .byte	$18
08435 1D32                        3C            .byte	$3C
08436 1D33                        00            .byte	0
08437 1D34                        00            .byte	0
08438 1D35                        00            .byte	0
08439                                           ! 1256  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08440 1D36                        00            .byte	0
08441 1D37                        00            .byte	0
08442 1D38                        06            .byte	6
08443 1D39                        06            .byte	6
08444 1D3A                        00            .byte	0
08445 1D3B                        0E            .byte	$E
08446 1D3C                        06            .byte	6
08447 1D3D                        06            .byte	6
08448 1D3E                        06            .byte	6
08449 1D3F                        06            .byte	6
08450 1D40                        66            .byte	$66
08451 1D41                        66            .byte	$66
08452 1D42                        3C            .byte	$3C
08453 1D43                        00            .byte	0
08454                                           ! 1257  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08455 1D44                        00            .byte	0
08456 1D45                        00            .byte	0
08457 1D46                        E0            .byte	$E0
08458 1D47                        60            .byte	$60
08459 1D48                        60            .byte	$60
08460 1D49                        66            .byte	$66
08461 1D4A                        6C            .byte	$6C
08462 1D4B                        78            .byte	$78
08463 1D4C                        6C            .byte	$6C
08464 1D4D                        66            .byte	$66
08465 1D4E                        E6            .byte	$E6
08466 1D4F                        00            .byte	0
08467 1D50                        00            .byte	0
08468 1D51                        00            .byte	0
08469                                           ! 1258  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08470 1D52                        00            .byte	0
08471 1D53                        00            .byte	0
08472 1D54                        38            .byte	$38
08473 1D55                        18            .byte	$18
08474 1D56                        18            .byte	$18
08475 1D57                        18            .byte	$18
08476 1D58                        18            .byte	$18
08477 1D59                        18            .byte	$18
08478 1D5A                        18            .byte	$18
08479 1D5B                        18            .byte	$18
08480 1D5C                        3C            .byte	$3C
08481 1D5D                        00            .byte	0
08482 1D5E                        00            .byte	0
08483 1D5F                        00            .byte	0
08484                                           ! 1259  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08485 1D60                        00            .byte	0
08486 1D61                        00            .byte	0
08487 1D62                        00            .byte	0
08488 1D63                        00            .byte	0
08489 1D64                        00            .byte	0
08490 1D65                        EC            .byte	$EC
08491 1D66                        FE            .byte	$FE
08492 1D67                        D6            .byte	$D6
08493 1D68                        D6            .byte	$D6
08494 1D69                        D6            .byte	$D6
08495 1D6A                        C6            .byte	$C6
08496 1D6B                        00            .byte	0
08497 1D6C                        00            .byte	0
08498 1D6D                        00            .byte	0
08499                                           ! 1260  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08500 1D6E                        00            .byte	0
08501 1D6F                        00            .byte	0
08502 1D70                        00            .byte	0
08503 1D71                        00            .byte	0
08504 1D72                        00            .byte	0
08505 1D73                        DC            .byte	$DC
08506 1D74                        66            .byte	$66
08507 1D75                        66            .byte	$66
08508 1D76                        66            .byte	$66
08509 1D77                        66            .byte	$66
08510 1D78                        66            .byte	$66
08511 1D79                        00            .byte	0
08512 1D7A                        00            .byte	0
08513 1D7B                        00            .byte	0
08514                                           ! 1261  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08515 1D7C                        00            .byte	0
08516 1D7D                        00            .byte	0
08517 1D7E                        00            .byte	0
08518 1D7F                        00            .byte	0
08519 1D80                        00            .byte	0
08520 1D81                        7C            .byte	$7C
08521 1D82                        C6            .byte	$C6
08522 1D83                        C6            .byte	$C6
08523 1D84                        C6            .byte	$C6
08524 1D85                        C6            .byte	$C6
08525 1D86                        7C            .byte	$7C
08526 1D87                        00            .byte	0
08527 1D88                        00            .byte	0
08528 1D89                        00            .byte	0
08529                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08530 1D8A                        00            .byte	0
08531 1D8B                        00            .byte	0
08532 1D8C                        00            .byte	0
08533 1D8D                        00            .byte	0
08534 1D8E                        00            .byte	0
08535 1D8F                        DC            .byte	$DC
08536 1D90                        66            .byte	$66
08537 1D91                        66            .byte	$66
08538 1D92                        66            .byte	$66
08539 1D93                        7C            .byte	$7C
08540 1D94                        60            .byte	$60
08541 1D95                        60            .byte	$60
08542 1D96                        F0            .byte	$F0
08543 1D97                        00            .byte	0
08544                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08545 1D98                        00            .byte	0
08546 1D99                        00            .byte	0
08547 1D9A                        00            .byte	0
08548 1D9B                        00            .byte	0
08549 1D9C                        00            .byte	0
08550 1D9D                        76            .byte	$76
08551 1D9E                        CC            .byte	$CC
08552 1D9F                        CC            .byte	$CC
08553 1DA0                        CC            .byte	$CC
08554 1DA1                        7C            .byte	$7C
08555 1DA2                        0C            .byte	$C
08556 1DA3                        0C            .byte	$C
08557 1DA4                        1E            .byte	$1E
08558 1DA5                        00            .byte	0
08559                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08560 1DA6                        00            .byte	0
08561 1DA7                        00            .byte	0
08562 1DA8                        00            .byte	0
08563 1DA9                        00            .byte	0
08564 1DAA                        00            .byte	0
08565 1DAB                        DC            .byte	$DC
08566 1DAC                        76            .byte	$76
08567 1DAD                        66            .byte	$66
08568 1DAE                        60            .byte	$60
08569 1DAF                        60            .byte	$60
08570 1DB0                        F0            .byte	$F0
08571 1DB1                        00            .byte	0
08572 1DB2                        00            .byte	0
08573 1DB3                        00            .byte	0
08574                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08575 1DB4                        00            .byte	0
08576 1DB5                        00            .byte	0
08577 1DB6                        00            .byte	0
08578 1DB7                        00            .byte	0
08579 1DB8                        00            .byte	0
08580 1DB9                        7C            .byte	$7C
08581 1DBA                        C6            .byte	$C6
08582 1DBB                        70            .byte	$70
08583 1DBC                        1C            .byte	$1C
08584 1DBD                        C6            .byte	$C6
08585 1DBE                        7C            .byte	$7C
08586 1DBF                        00            .byte	0
08587 1DC0                        00            .byte	0
08588 1DC1                        00            .byte	0
08589                                           ! 1266  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08590 1DC2                        00            .byte	0
08591 1DC3                        00            .byte	0
08592 1DC4                        10            .byte	$10
08593 1DC5                        30            .byte	$30
08594 1DC6                        30            .byte	$30
08595 1DC7                        FC            .byte	$FC
08596 1DC8                        30            .byte	$30
08597 1DC9                        30            .byte	$30
08598 1DCA                        30            .byte	$30
08599 1DCB                        36            .byte	$36
08600 1DCC                        1C            .byte	$1C
08601 1DCD                        00            .byte	0
08602 1DCE                        00            .byte	0
08603 1DCF                        00            .byte	0
08604                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08605 1DD0                        00            .byte	0
08606 1DD1                        00            .byte	0
08607 1DD2                        00            .byte	0
08608 1DD3                        00            .byte	0
08609 1DD4                        00            .byte	0
08610 1DD5                        CC            .byte	$CC
08611 1DD6                        CC            .byte	$CC
08612 1DD7                        CC            .byte	$CC
08613 1DD8                        CC            .byte	$CC
08614 1DD9                        CC            .byte	$CC
08615 1DDA                        76            .byte	$76
08616 1DDB                        00            .byte	0
08617 1DDC                        00            .byte	0
08618 1DDD                        00            .byte	0
08619                                           ! 1268  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08620 1DDE                        00            .byte	0
08621 1DDF                        00            .byte	0
08622 1DE0                        00            .byte	0
08623 1DE1                        00            .byte	0
08624 1DE2                        00            .byte	0
08625 1DE3                        66            .byte	$66
08626 1DE4                        66            .byte	$66
08627 1DE5                        66            .byte	$66
08628 1DE6                        66            .byte	$66
08629 1DE7                        3C            .byte	$3C
08630 1DE8                        18            .byte	$18
08631 1DE9                        00            .byte	0
08632 1DEA                        00            .byte	0
08633 1DEB                        00            .byte	0
08634                                           ! 1269  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08635 1DEC                        00            .byte	0
08636 1DED                        00            .byte	0
08637 1DEE                        00            .byte	0
08638 1DEF                        00            .byte	0
08639 1DF0                        00            .byte	0
08640 1DF1                        C6            .byte	$C6
08641 1DF2                        C6            .byte	$C6
08642 1DF3                        D6            .byte	$D6
08643 1DF4                        D6            .byte	$D6
08644 1DF5                        FE            .byte	$FE
08645 1DF6                        6C            .byte	$6C
08646 1DF7                        00            .byte	0
08647 1DF8                        00            .byte	0
08648 1DF9                        00            .byte	0
08649                                           ! 1270  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08650 1DFA                        00            .byte	0
08651 1DFB                        00            .byte	0
08652 1DFC                        00            .byte	0
08653 1DFD                        00            .byte	0
08654 1DFE                        00            .byte	0
08655 1DFF                        C6            .byte	$C6
08656 1E00                        6C            .byte	$6C
08657 1E01                        38            .byte	$38
08658 1E02                        38            .byte	$38
08659 1E03                        6C            .byte	$6C
08660 1E04                        C6            .byte	$C6
08661 1E05                        00            .byte	0
08662 1E06                        00            .byte	0
08663 1E07                        00            .byte	0
08664                                           ! 1271  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08665 1E08                        00            .byte	0
08666 1E09                        00            .byte	0
08667 1E0A                        00            .byte	0
08668 1E0B                        00            .byte	0
08669 1E0C                        00            .byte	0
08670 1E0D                        C6            .byte	$C6
08671 1E0E                        C6            .byte	$C6
08672 1E0F                        C6            .byte	$C6
08673 1E10                        C6            .byte	$C6
08674 1E11                        7E            .byte	$7E
08675 1E12                        06            .byte	6
08676 1E13                        0C            .byte	$C
08677 1E14                        F8            .byte	$F8
08678 1E15                        00            .byte	0
08679                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08680 1E16                        00            .byte	0
08681 1E17                        00            .byte	0
08682 1E18                        00            .byte	0
08683 1E19                        00            .byte	0
08684 1E1A                        00            .byte	0
08685 1E1B                        FE            .byte	$FE
08686 1E1C                        CC            .byte	$CC
08687 1E1D                        18            .byte	$18
08688 1E1E                        30            .byte	$30
08689 1E1F                        66            .byte	$66
08690 1E20                        FE            .byte	$FE
08691 1E21                        00            .byte	0
08692 1E22                        00            .byte	0
08693 1E23                        00            .byte	0
08694                                           ! 1273  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08695 1E24                        00            .byte	0
08696 1E25                        00            .byte	0
08697 1E26                        0E            .byte	$E
08698 1E27                        18            .byte	$18
08699 1E28                        18            .byte	$18
08700 1E29                        18            .byte	$18
08701 1E2A                        70            .byte	$70
08702 1E2B                        18            .byte	$18
08703 1E2C                        18            .byte	$18
08704 1E2D                        18            .byte	$18
08705 1E2E                        0E            .byte	$E
08706 1E2F                        00            .byte	0
08707 1E30                        00            .byte	0
08708 1E31                        00            .byte	0
08709                                           ! 1274  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08710 1E32                        00            .byte	0
08711 1E33                        00            .byte	0
08712 1E34                        18            .byte	$18
08713 1E35                        18            .byte	$18
08714 1E36                        18            .byte	$18
08715 1E37                        18            .byte	$18
08716 1E38                        00            .byte	0
08717 1E39                        18            .byte	$18
08718 1E3A                        18            .byte	$18
08719 1E3B                        18            .byte	$18
08720 1E3C                        18            .byte	$18
08721 1E3D                        00            .byte	0
08722 1E3E                        00            .byte	0
08723 1E3F                        00            .byte	0
08724                                           ! 1275  0x0
08725                                           ! 1275 0, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08726 1E40                        00            .byte	0
08727 1E41                        00            .byte	0
08728 1E42                        70            .byte	$70
08729 1E43                        18            .byte	$18
08730 1E44                        18            .byte	$18
08731 1E45                        18            .byte	$18
08732 1E46                        0E            .byte	$E
08733 1E47                        18            .byte	$18
08734 1E48                        18            .byte	$18
08735 1E49                        18            .byte	$18
08736 1E4A                        70            .byte	$70
08737 1E4B                        00            .byte	0
08738 1E4C                        00            .byte	0
08739 1E4D                        00            .byte	0
08740                                           ! 1276  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08741 1E4E                        00            .byte	0
08742 1E4F                        00            .byte	0
08743 1E50                        76            .byte	$76
08744 1E51                        DC            .byte	$DC
08745 1E52                        00            .byte	0
08746 1E53                        00            .byte	0
08747 1E54                        00            .byte	0
08748 1E55                        00            .byte	0
08749 1E56                        00            .byte	0
08750 1E57                        00            .byte	0
08751 1E58                        00            .byte	0
08752 1E59                        00            .byte	0
08753 1E5A                        00            .byte	0
08754 1E5B                        00            .byte	0
08755                                           ! 1277  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08756 1E5C                        00            .byte	0
08757 1E5D                        00            .byte	0
08758 1E5E                        00            .byte	0
08759 1E5F                        00            .byte	0
08760 1E60                        10            .byte	$10
08761 1E61                        38            .byte	$38
08762 1E62                        6C            .byte	$6C
08763 1E63                        C6            .byte	$C6
08764 1E64                        C6            .byte	$C6
08765 1E65                        FE            .byte	$FE
08766 1E66                        00            .byte	0
08767 1E67                        00            .byte	0
08768 1E68                        00            .byte	0
08769 1E69                        00            .byte	0
08770                                           ! 1278  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08771 1E6A                        00            .byte	0
08772 1E6B                        00            .byte	0
08773 1E6C                        3C            .byte	$3C
08774 1E6D                        66            .byte	$66
08775 1E6E                        C2            .byte	$C2
08776 1E6F                        C0            .byte	$C0
08777 1E70                        C0            .byte	$C0
08778 1E71                        C2            .byte	$C2
08779 1E72                        66            .byte	$66
08780 1E73                        3C            .byte	$3C
08781 1E74                        0C            .byte	$C
08782 1E75                        06            .byte	6
08783 1E76                        7C            .byte	$7C
08784 1E77                        00            .byte	0
08785                                           ! 1279  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08786 1E78                        00            .byte	0
08787 1E79                        00            .byte	0
08788 1E7A                        CC            .byte	$CC
08789 1E7B                        CC            .byte	$CC
08790 1E7C                        00            .byte	0
08791 1E7D                        CC            .byte	$CC
08792 1E7E                        CC            .byte	$CC
08793 1E7F                        CC            .byte	$CC
08794 1E80                        CC            .byte	$CC
08795 1E81                        CC            .byte	$CC
08796 1E82                        76            .byte	$76
08797 1E83                        00            .byte	0
08798 1E84                        00            .byte	0
08799 1E85                        00            .byte	0
08800                                           ! 1280  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08801 1E86                        00            .byte	0
08802 1E87                        0C            .byte	$C
08803 1E88                        18            .byte	$18
08804 1E89                        30            .byte	$30
08805 1E8A                        00            .byte	0
08806 1E8B                        7C            .byte	$7C
08807 1E8C                        C6            .byte	$C6
08808 1E8D                        FE            .byte	$FE
08809 1E8E                        C0            .byte	$C0
08810 1E8F                        C6            .byte	$C6
08811 1E90                        7C            .byte	$7C
08812 1E91                        00            .byte	0
08813 1E92                        00            .byte	0
08814 1E93                        00            .byte	0
08815                                           ! 1281  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08816 1E94                        00            .byte	0
08817 1E95                        10            .byte	$10
08818 1E96                        38            .byte	$38
08819 1E97                        6C            .byte	$6C
08820 1E98                        00            .byte	0
08821 1E99                        78            .byte	$78
08822 1E9A                        0C            .byte	$C
08823 1E9B                        7C            .byte	$7C
08824 1E9C                        CC            .byte	$CC
08825 1E9D                        CC            .byte	$CC
08826 1E9E                        76            .byte	$76
08827 1E9F                        00            .byte	0
08828 1EA0                        00            .byte	0
08829 1EA1                        00            .byte	0
08830                                           ! 1282  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08831 1EA2                        00            .byte	0
08832 1EA3                        00            .byte	0
08833 1EA4                        CC            .byte	$CC
08834 1EA5                        CC            .byte	$CC
08835 1EA6                        00            .byte	0
08836 1EA7                        78            .byte	$78
08837 1EA8                        0C            .byte	$C
08838 1EA9                        7C            .byte	$7C
08839 1EAA                        CC            .byte	$CC
08840 1EAB                        CC            .byte	$CC
08841 1EAC                        76            .byte	$76
08842 1EAD                        00            .byte	0
08843 1EAE                        00            .byte	0
08844 1EAF                        00            .byte	0
08845                                           ! 1283  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08846 1EB0                        00            .byte	0
08847 1EB1                        60            .byte	$60
08848 1EB2                        30            .byte	$30
08849 1EB3                        18            .byte	$18
08850 1EB4                        00            .byte	0
08851 1EB5                        78            .byte	$78
08852 1EB6                        0C            .byte	$C
08853 1EB7                        7C            .byte	$7C
08854 1EB8                        CC            .byte	$CC
08855 1EB9                        CC            .byte	$CC
08856 1EBA                        76            .byte	$76
08857 1EBB                        00            .byte	0
08858 1EBC                        00            .byte	0
08859 1EBD                        00            .byte	0
08860                                           ! 1284  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08861 1EBE                        00            .byte	0
08862 1EBF                        38            .byte	$38
08863 1EC0                        6C            .byte	$6C
08864 1EC1                        38            .byte	$38
08865 1EC2                        00            .byte	0
08866 1EC3                        78            .byte	$78
08867 1EC4                        0C            .byte	$C
08868 1EC5                        7C            .byte	$7C
08869 1EC6                        CC            .byte	$CC
08870 1EC7                        CC            .byte	$CC
08871 1EC8                        76            .byte	$76
08872 1EC9                        00            .byte	0
08873 1ECA                        00            .byte	0
08874 1ECB                        00            .byte	0
08875                                           ! 1285  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08876 1ECC                        00            .byte	0
08877 1ECD                        00            .byte	0
08878 1ECE                        00            .byte	0
08879 1ECF                        00            .byte	0
08880 1ED0                        3C            .byte	$3C
08881 1ED1                        66            .byte	$66
08882 1ED2                        60            .byte	$60
08883 1ED3                        66            .byte	$66
08884 1ED4                        3C            .byte	$3C
08885 1ED5                        0C            .byte	$C
08886 1ED6                        06            .byte	6
08887 1ED7                        3C            .byte	$3C
08888 1ED8                        00            .byte	0
08889 1ED9                        00            .byte	0
08890                                           ! 1286  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08891 1EDA                        00            .byte	0
08892 1EDB                        10            .byte	$10
08893 1EDC                        38            .byte	$38
08894 1EDD                        6C            .byte	$6C
08895 1EDE                        00            .byte	0
08896 1EDF                        7C            .byte	$7C
08897 1EE0                        C6            .byte	$C6
08898 1EE1                        FE            .byte	$FE
08899 1EE2                        C0            .byte	$C0
08900 1EE3                        C6            .byte	$C6
08901 1EE4                        7C            .byte	$7C
08902 1EE5                        00            .byte	0
08903 1EE6                        00            .byte	0
08904 1EE7                        00            .byte	0
08905                                           ! 1287  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08906 1EE8                        00            .byte	0
08907 1EE9                        00            .byte	0
08908 1EEA                        CC            .byte	$CC
08909 1EEB                        CC            .byte	$CC
08910 1EEC                        00            .byte	0
08911 1EED                        7C            .byte	$7C
08912 1EEE                        C6            .byte	$C6
08913 1EEF                        FE            .byte	$FE
08914 1EF0                        C0            .byte	$C0
08915 1EF1                        C6            .byte	$C6
08916 1EF2                        7C            .byte	$7C
08917 1EF3                        00            .byte	0
08918 1EF4                        00            .byte	0
08919 1EF5                        00            .byte	0
08920                                           ! 1288  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08921 1EF6                        00            .byte	0
08922 1EF7                        60            .byte	$60
08923 1EF8                        30            .byte	$30
08924 1EF9                        18            .byte	$18
08925 1EFA                        00            .byte	0
08926 1EFB                        7C            .byte	$7C
08927 1EFC                        C6            .byte	$C6
08928 1EFD                        FE            .byte	$FE
08929 1EFE                        C0            .byte	$C0
08930 1EFF                        C6            .byte	$C6
08931 1F00                        7C            .byte	$7C
08932 1F01                        00            .byte	0
08933 1F02                        00            .byte	0
08934 1F03                        00            .byte	0
08935                                           ! 1289  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08936 1F04                        00            .byte	0
08937 1F05                        00            .byte	0
08938 1F06                        66            .byte	$66
08939 1F07                        66            .byte	$66
08940 1F08                        00            .byte	0
08941 1F09                        38            .byte	$38
08942 1F0A                        18            .byte	$18
08943 1F0B                        18            .byte	$18
08944 1F0C                        18            .byte	$18
08945 1F0D                        18            .byte	$18
08946 1F0E                        3C            .byte	$3C
08947 1F0F                        00            .byte	0
08948 1F10                        00            .byte	0
08949 1F11                        00            .byte	0
08950                                           ! 1290  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08951 1F12                        00            .byte	0
08952 1F13                        18            .byte	$18
08953 1F14                        3C            .byte	$3C
08954 1F15                        66            .byte	$66
08955 1F16                        00            .byte	0
08956 1F17                        38            .byte	$38
08957 1F18                        18            .byte	$18
08958 1F19                        18            .byte	$18
08959 1F1A                        18            .byte	$18
08960 1F1B                        18            .byte	$18
08961 1F1C                        3C            .byte	$3C
08962 1F1D                        00            .byte	0
08963 1F1E                        00            .byte	0
08964 1F1F                        00            .byte	0
08965                                           ! 1291  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08966 1F20                        00            .byte	0
08967 1F21                        60            .byte	$60
08968 1F22                        30            .byte	$30
08969 1F23                        18            .byte	$18
08970 1F24                        00            .byte	0
08971 1F25                        38            .byte	$38
08972 1F26                        18            .byte	$18
08973 1F27                        18            .byte	$18
08974 1F28                        18            .byte	$18
08975 1F29                        18            .byte	$18
08976 1F2A                        3C            .byte	$3C
08977 1F2B                        00            .byte	0
08978 1F2C                        00            .byte	0
08979 1F2D                        00            .byte	0
08980                                           ! 1292  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08981 1F2E                        00            .byte	0
08982 1F2F                        C6            .byte	$C6
08983 1F30                        C6            .byte	$C6
08984 1F31                        10            .byte	$10
08985 1F32                        38            .byte	$38
08986 1F33                        6C            .byte	$6C
08987 1F34                        C6            .byte	$C6
08988 1F35                        C6            .byte	$C6
08989 1F36                        FE            .byte	$FE
08990 1F37                        C6            .byte	$C6
08991 1F38                        C6            .byte	$C6
08992 1F39                        00            .byte	0
08993 1F3A                        00            .byte	0
08994 1F3B                        00            .byte	0
08995                                           ! 1293  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08996 1F3C                        38            .byte	$38
08997 1F3D                        6C            .byte	$6C
08998 1F3E                        38            .byte	$38
08999 1F3F                        00            .byte	0
09000 1F40                        38            .byte	$38
09001 1F41                        6C            .byte	$6C
09002 1F42                        C6            .byte	$C6
09003 1F43                        C6            .byte	$C6
09004 1F44                        FE            .byte	$FE
09005 1F45                        C6            .byte	$C6
09006 1F46                        C6            .byte	$C6
09007 1F47                        00            .byte	0
09008 1F48                        00            .byte	0
09009 1F49                        00            .byte	0
09010                                           ! 1294  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
09011 1F4A                        18            .byte	$18
09012 1F4B                        30            .byte	$30
09013 1F4C                        60            .byte	$60
09014 1F4D                        00            .byte	0
09015 1F4E                        FE            .byte	$FE
09016 1F4F                        66            .byte	$66
09017 1F50                        60            .byte	$60
09018 1F51                        7C            .byte	$7C
09019 1F52                        60            .byte	$60
09020 1F53                        66            .byte	$66
09021 1F54                        FE            .byte	$FE
09022 1F55                        00            .byte	0
09023 1F56                        00            .byte	0
09024 1F57                        00            .byte	0
09025                                           ! 1295  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09026 1F58                        00            .byte	0
09027 1F59                        00            .byte	0
09028 1F5A                        00            .byte	0
09029 1F5B                        00            .byte	0
09030 1F5C                        CC            .byte	$CC
09031 1F5D                        76            .byte	$76
09032 1F5E                        36            .byte	$36
09033 1F5F                        7E            .byte	$7E
09034 1F60                        D8            .byte	$D8
09035 1F61                        D8            .byte	$D8
09036 1F62                        6E            .byte	$6E
09037 1F63                        00            .byte	0
09038 1F64                        00            .byte	0
09039 1F65                        00            .byte	0
09040                                           ! 1296  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09041 1F66                        00            .byte	0
09042 1F67                        00            .byte	0
09043 1F68                        3E            .byte	$3E
09044 1F69                        6C            .byte	$6C
09045 1F6A                        CC            .byte	$CC
09046 1F6B                        CC            .byte	$CC
09047 1F6C                        FE            .byte	$FE
09048 1F6D                        CC            .byte	$CC
09049 1F6E                        CC            .byte	$CC
09050 1F6F                        CC            .byte	$CC
09051 1F70                        CE            .byte	$CE
09052 1F71                        00            .byte	0
09053 1F72                        00            .byte	0
09054 1F73                        00            .byte	0
09055                                           ! 1297  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09056 1F74                        00            .byte	0
09057 1F75                        10            .byte	$10
09058 1F76                        38            .byte	$38
09059 1F77                        6C            .byte	$6C
09060 1F78                        00            .byte	0
09061 1F79                        7C            .byte	$7C
09062 1F7A                        C6            .byte	$C6
09063 1F7B                        C6            .byte	$C6
09064 1F7C                        C6            .byte	$C6
09065 1F7D                        C6            .byte	$C6
09066 1F7E                        7C            .byte	$7C
09067 1F7F                        00            .byte	0
09068 1F80                        00            .byte	0
09069 1F81                        00            .byte	0
09070                                           ! 1298  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09071 1F82                        00            .byte	0
09072 1F83                        00            .byte	0
09073 1F84                        C6            .byte	$C6
09074 1F85                        C6            .byte	$C6
09075 1F86                        00            .byte	0
09076 1F87                        7C            .byte	$7C
09077 1F88                        C6            .byte	$C6
09078 1F89                        C6            .byte	$C6
09079 1F8A                        C6            .byte	$C6
09080 1F8B                        C6            .byte	$C6
09081 1F8C                        7C            .byte	$7C
09082 1F8D                        00            .byte	0
09083 1F8E                        00            .byte	0
09084 1F8F                        00            .byte	0
09085                                           ! 1299  0x00, 0x60,
09086 1F90                        00            .byte	0
09087                                           ! 1299  0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09088 1F91                        60            .byte	$60
09089 1F92                        30            .byte	$30
09090 1F93                        18            .byte	$18
09091 1F94                        00            .byte	0
09092 1F95                        7C            .byte	$7C
09093 1F96                        C6            .byte	$C6
09094 1F97                        C6            .byte	$C6
09095 1F98                        C6            .byte	$C6
09096 1F99                        C6            .byte	$C6
09097 1F9A                        7C            .byte	$7C
09098 1F9B                        00            .byte	0
09099 1F9C                        00            .byte	0
09100 1F9D                        00            .byte	0
09101                                           ! 1300  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09102 1F9E                        00            .byte	0
09103 1F9F                        30            .byte	$30
09104 1FA0                        78            .byte	$78
09105 1FA1                        CC            .byte	$CC
09106 1FA2                        00            .byte	0
09107 1FA3                        CC            .byte	$CC
09108 1FA4                        CC            .byte	$CC
09109 1FA5                        CC            .byte	$CC
09110 1FA6                        CC            .byte	$CC
09111 1FA7                        CC            .byte	$CC
09112 1FA8                        76            .byte	$76
09113 1FA9                        00            .byte	0
09114 1FAA                        00            .byte	0
09115 1FAB                        00            .byte	0
09116                                           ! 1301  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09117 1FAC                        00            .byte	0
09118 1FAD                        60            .byte	$60
09119 1FAE                        30            .byte	$30
09120 1FAF                        18            .byte	$18
09121 1FB0                        00            .byte	0
09122 1FB1                        CC            .byte	$CC
09123 1FB2                        CC            .byte	$CC
09124 1FB3                        CC            .byte	$CC
09125 1FB4                        CC            .byte	$CC
09126 1FB5                        CC            .byte	$CC
09127 1FB6                        76            .byte	$76
09128 1FB7                        00            .byte	0
09129 1FB8                        00            .byte	0
09130 1FB9                        00            .byte	0
09131                                           ! 1302  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09132 1FBA                        00            .byte	0
09133 1FBB                        00            .byte	0
09134 1FBC                        C6            .byte	$C6
09135 1FBD                        C6            .byte	$C6
09136 1FBE                        00            .byte	0
09137 1FBF                        C6            .byte	$C6
09138 1FC0                        C6            .byte	$C6
09139 1FC1                        C6            .byte	$C6
09140 1FC2                        C6            .byte	$C6
09141 1FC3                        7E            .byte	$7E
09142 1FC4                        06            .byte	6
09143 1FC5                        0C            .byte	$C
09144 1FC6                        78            .byte	$78
09145 1FC7                        00            .byte	0
09146                                           ! 1303  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09147 1FC8                        00            .byte	0
09148 1FC9                        C6            .byte	$C6
09149 1FCA                        C6            .byte	$C6
09150 1FCB                        38            .byte	$38
09151 1FCC                        6C            .byte	$6C
09152 1FCD                        C6            .byte	$C6
09153 1FCE                        C6            .byte	$C6
09154 1FCF                        C6            .byte	$C6
09155 1FD0                        C6            .byte	$C6
09156 1FD1                        6C            .byte	$6C
09157 1FD2                        38            .byte	$38
09158 1FD3                        00            .byte	0
09159 1FD4                        00            .byte	0
09160 1FD5                        00            .byte	0
09161                                           ! 1304  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09162 1FD6                        00            .byte	0
09163 1FD7                        C6            .byte	$C6
09164 1FD8                        C6            .byte	$C6
09165 1FD9                        00            .byte	0
09166 1FDA                        C6            .byte	$C6
09167 1FDB                        C6            .byte	$C6
09168 1FDC                        C6            .byte	$C6
09169 1FDD                        C6            .byte	$C6
09170 1FDE                        C6            .byte	$C6
09171 1FDF                        C6            .byte	$C6
09172 1FE0                        7C            .byte	$7C
09173 1FE1                        00            .byte	0
09174 1FE2                        00            .byte	0
09175 1FE3                        00            .byte	0
09176                                           ! 1305  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09177 1FE4                        00            .byte	0
09178 1FE5                        18            .byte	$18
09179 1FE6                        18            .byte	$18
09180 1FE7                        3C            .byte	$3C
09181 1FE8                        66            .byte	$66
09182 1FE9                        60            .byte	$60
09183 1FEA                        60            .byte	$60
09184 1FEB                        66            .byte	$66
09185 1FEC                        3C            .byte	$3C
09186 1FED                        18            .byte	$18
09187 1FEE                        18            .byte	$18
09188 1FEF                        00            .byte	0
09189 1FF0                        00            .byte	0
09190 1FF1                        00            .byte	0
09191                                           ! 1306  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09192 1FF2                        00            .byte	0
09193 1FF3                        38            .byte	$38
09194 1FF4                        6C            .byte	$6C
09195 1FF5                        64            .byte	$64
09196 1FF6                        60            .byte	$60
09197 1FF7                        F0            .byte	$F0
09198 1FF8                        60            .byte	$60
09199 1FF9                        60            .byte	$60
09200 1FFA                        60            .byte	$60
09201 1FFB                        E6            .byte	$E6
09202 1FFC                        FC            .byte	$FC
09203 1FFD                        00            .byte	0
09204 1FFE                        00            .byte	0
09205 1FFF                        00            .byte	0
09206                                           ! 1307  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09207 2000                        00            .byte	0
09208 2001                        00            .byte	0
09209 2002                        66            .byte	$66
09210 2003                        66            .byte	$66
09211 2004                        3C            .byte	$3C
09212 2005                        18            .byte	$18
09213 2006                        7E            .byte	$7E
09214 2007                        18            .byte	$18
09215 2008                        7E            .byte	$7E
09216 2009                        18            .byte	$18
09217 200A                        18            .byte	$18
09218 200B                        00            .byte	0
09219 200C                        00            .byte	0
09220 200D                        00            .byte	0
09221                                           ! 1308  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09222 200E                        00            .byte	0
09223 200F                        F8            .byte	$F8
09224 2010                        CC            .byte	$CC
09225 2011                        CC            .byte	$CC
09226 2012                        F8            .byte	$F8
09227 2013                        C4            .byte	$C4
09228 2014                        CC            .byte	$CC
09229 2015                        DE            .byte	$DE
09230 2016                        CC            .byte	$CC
09231 2017                        CC            .byte	$CC
09232 2018                        C6            .byte	$C6
09233 2019                        00            .byte	0
09234 201A                        00            .byte	0
09235 201B                        00            .byte	0
09236                                           ! 1309  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09237 201C                        00            .byte	0
09238 201D                        0E            .byte	$E
09239 201E                        1B            .byte	$1B
09240 201F                        18            .byte	$18
09241 2020                        18            .byte	$18
09242 2021                        18            .byte	$18
09243 2022                        7E            .byte	$7E
09244 2023                        18            .byte	$18
09245 2024                        18            .byte	$18
09246 2025                        18            .byte	$18
09247 2026                        18            .byte	$18
09248 2027                        D8            .byte	$D8
09249 2028                        70            .byte	$70
09250 2029                        00            .byte	0
09251                                           ! 1310  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09252 202A                        00            .byte	0
09253 202B                        18            .byte	$18
09254 202C                        30            .byte	$30
09255 202D                        60            .byte	$60
09256 202E                        00            .byte	0
09257 202F                        78            .byte	$78
09258 2030                        0C            .byte	$C
09259 2031                        7C            .byte	$7C
09260 2032                        CC            .byte	$CC
09261 2033                        CC            .byte	$CC
09262 2034                        76            .byte	$76
09263 2035                        00            .byte	0
09264 2036                        00            .byte	0
09265 2037                        00            .byte	0
09266                                           ! 1311  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09267 2038                        00            .byte	0
09268 2039                        0C            .byte	$C
09269 203A                        18            .byte	$18
09270 203B                        30            .byte	$30
09271 203C                        00            .byte	0
09272 203D                        38            .byte	$38
09273 203E                        18            .byte	$18
09274 203F                        18            .byte	$18
09275 2040                        18            .byte	$18
09276 2041                        18            .byte	$18
09277 2042                        3C            .byte	$3C
09278 2043                        00            .byte	0
09279 2044                        00            .byte	0
09280 2045                        00            .byte	0
09281                                           ! 1312  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09282 2046                        00            .byte	0
09283 2047                        18            .byte	$18
09284 2048                        30            .byte	$30
09285 2049                        60            .byte	$60
09286 204A                        00            .byte	0
09287 204B                        7C            .byte	$7C
09288 204C                        C6            .byte	$C6
09289 204D                        C6            .byte	$C6
09290 204E                        C6            .byte	$C6
09291 204F                        C6            .byte	$C6
09292 2050                        7C            .byte	$7C
09293 2051                        00            .byte	0
09294 2052                        00            .byte	0
09295 2053                        00            .byte	0
09296                                           ! 1313  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09297 2054                        00            .byte	0
09298 2055                        18            .byte	$18
09299 2056                        30            .byte	$30
09300 2057                        60            .byte	$60
09301 2058                        00            .byte	0
09302 2059                        CC            .byte	$CC
09303 205A                        CC            .byte	$CC
09304 205B                        CC            .byte	$CC
09305 205C                        CC            .byte	$CC
09306 205D                        CC            .byte	$CC
09307 205E                        76            .byte	$76
09308 205F                        00            .byte	0
09309 2060                        00            .byte	0
09310 2061                        00            .byte	0
09311                                           ! 1314  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09312 2062                        00            .byte	0
09313 2063                        00            .byte	0
09314 2064                        76            .byte	$76
09315 2065                        DC            .byte	$DC
09316 2066                        00            .byte	0
09317 2067                        DC            .byte	$DC
09318 2068                        66            .byte	$66
09319 2069                        66            .byte	$66
09320 206A                        66            .byte	$66
09321 206B                        66            .byte	$66
09322 206C                        66            .byte	$66
09323 206D                        00            .byte	0
09324 206E                        00            .byte	0
09325 206F                        00            .byte	0
09326                                           ! 1315  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09327 2070                        76            .byte	$76
09328 2071                        DC            .byte	$DC
09329 2072                        00            .byte	0
09330 2073                        C6            .byte	$C6
09331 2074                        E6            .byte	$E6
09332 2075                        F6            .byte	$F6
09333 2076                        FE            .byte	$FE
09334 2077                        DE            .byte	$DE
09335 2078                        CE            .byte	$CE
09336 2079                        C6            .byte	$C6
09337 207A                        C6            .byte	$C6
09338 207B                        00            .byte	0
09339 207C                        00            .byte	0
09340 207D                        00            .byte	0
09341                                           ! 1316  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09342 207E                        00            .byte	0
09343 207F                        3C            .byte	$3C
09344 2080                        6C            .byte	$6C
09345 2081                        6C            .byte	$6C
09346 2082                        3E            .byte	$3E
09347 2083                        00            .byte	0
09348 2084                        7E            .byte	$7E
09349 2085                        00            .byte	0
09350 2086                        00            .byte	0
09351 2087                        00            .byte	0
09352 2088                        00            .byte	0
09353 2089                        00            .byte	0
09354 208A                        00            .byte	0
09355 208B                        00            .byte	0
09356                                           ! 1317  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09357 208C                        00            .byte	0
09358 208D                        38            .byte	$38
09359 208E                        6C            .byte	$6C
09360 208F                        6C            .byte	$6C
09361 2090                        38            .byte	$38
09362 2091                        00            .byte	0
09363 2092                        7C            .byte	$7C
09364 2093                        00            .byte	0
09365 2094                        00            .byte	0
09366 2095                        00            .byte	0
09367 2096                        00            .byte	0
09368 2097                        00            .byte	0
09369 2098                        00            .byte	0
09370 2099                        00            .byte	0
09371                                           ! 1318  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09372 209A                        00            .byte	0
09373 209B                        00            .byte	0
09374 209C                        30            .byte	$30
09375 209D                        30            .byte	$30
09376 209E                        00            .byte	0
09377 209F                        30            .byte	$30
09378 20A0                        30            .byte	$30
09379 20A1                        60            .byte	$60
09380 20A2                        C6            .byte	$C6
09381 20A3                        C6            .byte	$C6
09382 20A4                        7C            .byte	$7C
09383 20A5                        00            .byte	0
09384 20A6                        00            .byte	0
09385 20A7                        00            .byte	0
09386                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09387 20A8                        00            .byte	0
09388 20A9                        00            .byte	0
09389 20AA                        00            .byte	0
09390 20AB                        00            .byte	0
09391 20AC                        00            .byte	0
09392 20AD                        00            .byte	0
09393 20AE                        FE            .byte	$FE
09394 20AF                        C0            .byte	$C0
09395 20B0                        C0            .byte	$C0
09396 20B1                        C0            .byte	$C0
09397 20B2                        00            .byte	0
09398 20B3                        00            .byte	0
09399 20B4                        00            .byte	0
09400 20B5                        00            .byte	0
09401                                           ! 1320  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09402 20B6                        00            .byte	0
09403 20B7                        00            .byte	0
09404 20B8                        00            .byte	0
09405 20B9                        00            .byte	0
09406 20BA                        00            .byte	0
09407 20BB                        00            .byte	0
09408 20BC                        FE            .byte	$FE
09409 20BD                        06            .byte	6
09410 20BE                        06            .byte	6
09411 20BF                        06            .byte	6
09412 20C0                        00            .byte	0
09413 20C1                        00            .byte	0
09414 20C2                        00            .byte	0
09415 20C3                        00            .byte	0
09416                                           ! 1321  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09417 20C4                        00            .byte	0
09418 20C5                        C0            .byte	$C0
09419 20C6                        C0            .byte	$C0
09420 20C7                        C6            .byte	$C6
09421 20C8                        CC            .byte	$CC
09422 20C9                        D8            .byte	$D8
09423 20CA                        30            .byte	$30
09424 20CB                        60            .byte	$60
09425 20CC                        DC            .byte	$DC
09426 20CD                        86            .byte	$86
09427 20CE                        0C            .byte	$C
09428 20CF                        18            .byte	$18
09429 20D0                        3E            .byte	$3E
09430 20D1                        00            .byte	0
09431                                           ! 1322  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09432 20D2                        00            .byte	0
09433 20D3                        C0            .byte	$C0
09434 20D4                        C0            .byte	$C0
09435 20D5                        C6            .byte	$C6
09436 20D6                        CC            .byte	$CC
09437 20D7                        D8            .byte	$D8
09438 20D8                        30            .byte	$30
09439 20D9                        66            .byte	$66
09440 20DA                        CE            .byte	$CE
09441 20DB                        9E            .byte	$9E
09442 20DC                        3E            .byte	$3E
09443 20DD                        06            .byte	6
09444 20DE                        06            .byte	6
09445 20DF                        00            .byte	0
09446                                           ! 1323  0x00, 0x00, 0x18, 0
09447 20E0                        00            .byte	0
09448 20E1                        00            .byte	0
09449 20E2                        18            .byte	$18
09450                                           ! 1323 x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09451 20E3                        18            .byte	$18
09452 20E4                        00            .byte	0
09453 20E5                        18            .byte	$18
09454 20E6                        18            .byte	$18
09455 20E7                        3C            .byte	$3C
09456 20E8                        3C            .byte	$3C
09457 20E9                        3C            .byte	$3C
09458 20EA                        18            .byte	$18
09459 20EB                        00            .byte	0
09460 20EC                        00            .byte	0
09461 20ED                        00            .byte	0
09462                                           ! 1324  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09463 20EE                        00            .byte	0
09464 20EF                        00            .byte	0
09465 20F0                        00            .byte	0
09466 20F1                        00            .byte	0
09467 20F2                        36            .byte	$36
09468 20F3                        6C            .byte	$6C
09469 20F4                        D8            .byte	$D8
09470 20F5                        6C            .byte	$6C
09471 20F6                        36            .byte	$36
09472 20F7                        00            .byte	0
09473 20F8                        00            .byte	0
09474 20F9                        00            .byte	0
09475 20FA                        00            .byte	0
09476 20FB                        00            .byte	0
09477                                           ! 1325  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09478 20FC                        00            .byte	0
09479 20FD                        00            .byte	0
09480 20FE                        00            .byte	0
09481 20FF                        00            .byte	0
09482 2100                        D8            .byte	$D8
09483 2101                        6C            .byte	$6C
09484 2102                        36            .byte	$36
09485 2103                        6C            .byte	$6C
09486 2104                        D8            .byte	$D8
09487 2105                        00            .byte	0
09488 2106                        00            .byte	0
09489 2107                        00            .byte	0
09490 2108                        00            .byte	0
09491 2109                        00            .byte	0
09492                                           ! 1326  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09493 210A                        11            .byte	$11
09494 210B                        44            .byte	$44
09495 210C                        11            .byte	$11
09496 210D                        44            .byte	$44
09497 210E                        11            .byte	$11
09498 210F                        44            .byte	$44
09499 2110                        11            .byte	$11
09500 2111                        44            .byte	$44
09501 2112                        11            .byte	$11
09502 2113                        44            .byte	$44
09503 2114                        11            .byte	$11
09504 2115                        44            .byte	$44
09505 2116                        11            .byte	$11
09506 2117                        44            .byte	$44
09507                                           ! 1327  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09508 2118                        55            .byte	$55
09509 2119                        AA            .byte	$AA
09510 211A                        55            .byte	$55
09511 211B                        AA            .byte	$AA
09512 211C                        55            .byte	$55
09513 211D                        AA            .byte	$AA
09514 211E                        55            .byte	$55
09515 211F                        AA            .byte	$AA
09516 2120                        55            .byte	$55
09517 2121                        AA            .byte	$AA
09518 2122                        55            .byte	$55
09519 2123                        AA            .byte	$AA
09520 2124                        55            .byte	$55
09521 2125                        AA            .byte	$AA
09522                                           ! 1328  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09523 2126                        DD            .byte	$DD
09524 2127                        77            .byte	$77
09525 2128                        DD            .byte	$DD
09526 2129                        77            .byte	$77
09527 212A                        DD            .byte	$DD
09528 212B                        77            .byte	$77
09529 212C                        DD            .byte	$DD
09530 212D                        77            .byte	$77
09531 212E                        DD            .byte	$DD
09532 212F                        77            .byte	$77
09533 2130                        DD            .byte	$DD
09534 2131                        77            .byte	$77
09535 2132                        DD            .byte	$DD
09536 2133                        77            .byte	$77
09537                                           ! 1329  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09538 2134                        18            .byte	$18
09539 2135                        18            .byte	$18
09540 2136                        18            .byte	$18
09541 2137                        18            .byte	$18
09542 2138                        18            .byte	$18
09543 2139                        18            .byte	$18
09544 213A                        18            .byte	$18
09545 213B                        18            .byte	$18
09546 213C                        18            .byte	$18
09547 213D                        18            .byte	$18
09548 213E                        18            .byte	$18
09549 213F                        18            .byte	$18
09550 2140                        18            .byte	$18
09551 2141                        18            .byte	$18
09552                                           ! 1330  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09553 2142                        18            .byte	$18
09554 2143                        18            .byte	$18
09555 2144                        18            .byte	$18
09556 2145                        18            .byte	$18
09557 2146                        18            .byte	$18
09558 2147                        18            .byte	$18
09559 2148                        18            .byte	$18
09560 2149                        F8            .byte	$F8
09561 214A                        18            .byte	$18
09562 214B                        18            .byte	$18
09563 214C                        18            .byte	$18
09564 214D                        18            .byte	$18
09565 214E                        18            .byte	$18
09566 214F                        18            .byte	$18
09567                                           ! 1331  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09568 2150                        18            .byte	$18
09569 2151                        18            .byte	$18
09570 2152                        18            .byte	$18
09571 2153                        18            .byte	$18
09572 2154                        18            .byte	$18
09573 2155                        F8            .byte	$F8
09574 2156                        18            .byte	$18
09575 2157                        F8            .byte	$F8
09576 2158                        18            .byte	$18
09577 2159                        18            .byte	$18
09578 215A                        18            .byte	$18
09579 215B                        18            .byte	$18
09580 215C                        18            .byte	$18
09581 215D                        18            .byte	$18
09582                                           ! 1332  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09583 215E                        36            .byte	$36
09584 215F                        36            .byte	$36
09585 2160                        36            .byte	$36
09586 2161                        36            .byte	$36
09587 2162                        36            .byte	$36
09588 2163                        36            .byte	$36
09589 2164                        36            .byte	$36
09590 2165                        F6            .byte	$F6
09591 2166                        36            .byte	$36
09592 2167                        36            .byte	$36
09593 2168                        36            .byte	$36
09594 2169                        36            .byte	$36
09595 216A                        36            .byte	$36
09596 216B                        36            .byte	$36
09597                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09598 216C                        00            .byte	0
09599 216D                        00            .byte	0
09600 216E                        00            .byte	0
09601 216F                        00            .byte	0
09602 2170                        00            .byte	0
09603 2171                        00            .byte	0
09604 2172                        00            .byte	0
09605 2173                        FE            .byte	$FE
09606 2174                        36            .byte	$36
09607 2175                        36            .byte	$36
09608 2176                        36            .byte	$36
09609 2177                        36            .byte	$36
09610 2178                        36            .byte	$36
09611 2179                        36            .byte	$36
09612                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09613 217A                        00            .byte	0
09614 217B                        00            .byte	0
09615 217C                        00            .byte	0
09616 217D                        00            .byte	0
09617 217E                        00            .byte	0
09618 217F                        F8            .byte	$F8
09619 2180                        18            .byte	$18
09620 2181                        F8            .byte	$F8
09621 2182                        18            .byte	$18
09622 2183                        18            .byte	$18
09623 2184                        18            .byte	$18
09624 2185                        18            .byte	$18
09625 2186                        18            .byte	$18
09626 2187                        18            .byte	$18
09627                                           ! 1335  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09628 2188                        36            .byte	$36
09629 2189                        36            .byte	$36
09630 218A                        36            .byte	$36
09631 218B                        36            .byte	$36
09632 218C                        36            .byte	$36
09633 218D                        F6            .byte	$F6
09634 218E                        06            .byte	6
09635 218F                        F6            .byte	$F6
09636 2190                        36            .byte	$36
09637 2191                        36            .byte	$36
09638 2192                        36            .byte	$36
09639 2193                        36            .byte	$36
09640 2194                        36            .byte	$36
09641 2195                        36            .byte	$36
09642                                           ! 1336  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09643 2196                        36            .byte	$36
09644 2197                        36            .byte	$36
09645 2198                        36            .byte	$36
09646 2199                        36            .byte	$36
09647 219A                        36            .byte	$36
09648 219B                        36            .byte	$36
09649 219C                        36            .byte	$36
09650 219D                        36            .byte	$36
09651 219E                        36            .byte	$36
09652 219F                        36            .byte	$36
09653 21A0                        36            .byte	$36
09654 21A1                        36            .byte	$36
09655 21A2                        36            .byte	$36
09656 21A3                        36            .byte	$36
09657                                           ! 1337  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09658 21A4                        00            .byte	0
09659 21A5                        00            .byte	0
09660 21A6                        00            .byte	0
09661 21A7                        00            .byte	0
09662 21A8                        00            .byte	0
09663 21A9                        FE            .byte	$FE
09664 21AA                        06            .byte	6
09665 21AB                        F6            .byte	$F6
09666 21AC                        36            .byte	$36
09667 21AD                        36            .byte	$36
09668 21AE                        36            .byte	$36
09669 21AF                        36            .byte	$36
09670 21B0                        36            .byte	$36
09671 21B1                        36            .byte	$36
09672                                           ! 1338  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09673 21B2                        36            .byte	$36
09674 21B3                        36            .byte	$36
09675 21B4                        36            .byte	$36
09676 21B5                        36            .byte	$36
09677 21B6                        36            .byte	$36
09678 21B7                        F6            .byte	$F6
09679 21B8                        06            .byte	6
09680 21B9                        FE            .byte	$FE
09681 21BA                        00            .byte	0
09682 21BB                        00            .byte	0
09683 21BC                        00            .byte	0
09684 21BD                        00            .byte	0
09685 21BE                        00            .byte	0
09686 21BF                        00            .byte	0
09687                                           ! 1339  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09688 21C0                        36            .byte	$36
09689 21C1                        36            .byte	$36
09690 21C2                        36            .byte	$36
09691 21C3                        36            .byte	$36
09692 21C4                        36            .byte	$36
09693 21C5                        36            .byte	$36
09694 21C6                        36            .byte	$36
09695 21C7                        FE            .byte	$FE
09696 21C8                        00            .byte	0
09697 21C9                        00            .byte	0
09698 21CA                        00            .byte	0
09699 21CB                        00            .byte	0
09700 21CC                        00            .byte	0
09701 21CD                        00            .byte	0
09702                                           ! 1340  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09703 21CE                        18            .byte	$18
09704 21CF                        18            .byte	$18
09705 21D0                        18            .byte	$18
09706 21D1                        18            .byte	$18
09707 21D2                        18            .byte	$18
09708 21D3                        F8            .byte	$F8
09709 21D4                        18            .byte	$18
09710 21D5                        F8            .byte	$F8
09711 21D6                        00            .byte	0
09712 21D7                        00            .byte	0
09713 21D8                        00            .byte	0
09714 21D9                        00            .byte	0
09715 21DA                        00            .byte	0
09716 21DB                        00            .byte	0
09717                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09718 21DC                        00            .byte	0
09719 21DD                        00            .byte	0
09720 21DE                        00            .byte	0
09721 21DF                        00            .byte	0
09722 21E0                        00            .byte	0
09723 21E1                        00            .byte	0
09724 21E2                        00            .byte	0
09725 21E3                        F8            .byte	$F8
09726 21E4                        18            .byte	$18
09727 21E5                        18            .byte	$18
09728 21E6                        18            .byte	$18
09729 21E7                        18            .byte	$18
09730 21E8                        18            .byte	$18
09731 21E9                        18            .byte	$18
09732                                           ! 1342  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09733 21EA                        18            .byte	$18
09734 21EB                        18            .byte	$18
09735 21EC                        18            .byte	$18
09736 21ED                        18            .byte	$18
09737 21EE                        18            .byte	$18
09738 21EF                        18            .byte	$18
09739 21F0                        18            .byte	$18
09740 21F1                        1F            .byte	$1F
09741 21F2                        00            .byte	0
09742 21F3                        00            .byte	0
09743 21F4                        00            .byte	0
09744 21F5                        00            .byte	0
09745 21F6                        00            .byte	0
09746 21F7                        00            .byte	0
09747                                           ! 1343  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09748 21F8                        18            .byte	$18
09749 21F9                        18            .byte	$18
09750 21FA                        18            .byte	$18
09751 21FB                        18            .byte	$18
09752 21FC                        18            .byte	$18
09753 21FD                        18            .byte	$18
09754 21FE                        18            .byte	$18
09755 21FF                        FF            .byte	$FF
09756 2200                        00            .byte	0
09757 2201                        00            .byte	0
09758 2202                        00            .byte	0
09759 2203                        00            .byte	0
09760 2204                        00            .byte	0
09761 2205                        00            .byte	0
09762                                           ! 1344  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09763 2206                        00            .byte	0
09764 2207                        00            .byte	0
09765 2208                        00            .byte	0
09766 2209                        00            .byte	0
09767 220A                        00            .byte	0
09768 220B                        00            .byte	0
09769 220C                        00            .byte	0
09770 220D                        FF            .byte	$FF
09771 220E                        18            .byte	$18
09772 220F                        18            .byte	$18
09773 2210                        18            .byte	$18
09774 2211                        18            .byte	$18
09775 2212                        18            .byte	$18
09776 2213                        18            .byte	$18
09777                                           ! 1345  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09778 2214                        18            .byte	$18
09779 2215                        18            .byte	$18
09780 2216                        18            .byte	$18
09781 2217                        18            .byte	$18
09782 2218                        18            .byte	$18
09783 2219                        18            .byte	$18
09784 221A                        18            .byte	$18
09785 221B                        1F            .byte	$1F
09786 221C                        18            .byte	$18
09787 221D                        18            .byte	$18
09788 221E                        18            .byte	$18
09789 221F                        18            .byte	$18
09790 2220                        18            .byte	$18
09791 2221                        18            .byte	$18
09792                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09793 2222                        00            .byte	0
09794 2223                        00            .byte	0
09795 2224                        00            .byte	0
09796 2225                        00            .byte	0
09797 2226                        00            .byte	0
09798 2227                        00            .byte	0
09799 2228                        00            .byte	0
09800 2229                        FF            .byte	$FF
09801 222A                        00            .byte	0
09802 222B                        00            .byte	0
09803 222C                        00            .byte	0
09804 222D                        00            .byte	0
09805 222E                        00            .byte	0
09806 222F                        00            .byte	0
09807                                           ! 1347  0x18, 0x18, 0x18, 0x18, 0x1
09808 2230                        18            .byte	$18
09809 2231                        18            .byte	$18
09810 2232                        18            .byte	$18
09811 2233                        18            .byte	$18
09812                                           ! 1347 8, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09813 2234                        18            .byte	$18
09814 2235                        18            .byte	$18
09815 2236                        18            .byte	$18
09816 2237                        FF            .byte	$FF
09817 2238                        18            .byte	$18
09818 2239                        18            .byte	$18
09819 223A                        18            .byte	$18
09820 223B                        18            .byte	$18
09821 223C                        18            .byte	$18
09822 223D                        18            .byte	$18
09823                                           ! 1348  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09824 223E                        18            .byte	$18
09825 223F                        18            .byte	$18
09826 2240                        18            .byte	$18
09827 2241                        18            .byte	$18
09828 2242                        18            .byte	$18
09829 2243                        1F            .byte	$1F
09830 2244                        18            .byte	$18
09831 2245                        1F            .byte	$1F
09832 2246                        18            .byte	$18
09833 2247                        18            .byte	$18
09834 2248                        18            .byte	$18
09835 2249                        18            .byte	$18
09836 224A                        18            .byte	$18
09837 224B                        18            .byte	$18
09838                                           ! 1349  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09839 224C                        36            .byte	$36
09840 224D                        36            .byte	$36
09841 224E                        36            .byte	$36
09842 224F                        36            .byte	$36
09843 2250                        36            .byte	$36
09844 2251                        36            .byte	$36
09845 2252                        36            .byte	$36
09846 2253                        37            .byte	$37
09847 2254                        36            .byte	$36
09848 2255                        36            .byte	$36
09849 2256                        36            .byte	$36
09850 2257                        36            .byte	$36
09851 2258                        36            .byte	$36
09852 2259                        36            .byte	$36
09853                                           ! 1350  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09854 225A                        36            .byte	$36
09855 225B                        36            .byte	$36
09856 225C                        36            .byte	$36
09857 225D                        36            .byte	$36
09858 225E                        36            .byte	$36
09859 225F                        37            .byte	$37
09860 2260                        30            .byte	$30
09861 2261                        3F            .byte	$3F
09862 2262                        00            .byte	0
09863 2263                        00            .byte	0
09864 2264                        00            .byte	0
09865 2265                        00            .byte	0
09866 2266                        00            .byte	0
09867 2267                        00            .byte	0
09868                                           ! 1351  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09869 2268                        00            .byte	0
09870 2269                        00            .byte	0
09871 226A                        00            .byte	0
09872 226B                        00            .byte	0
09873 226C                        00            .byte	0
09874 226D                        3F            .byte	$3F
09875 226E                        30            .byte	$30
09876 226F                        37            .byte	$37
09877 2270                        36            .byte	$36
09878 2271                        36            .byte	$36
09879 2272                        36            .byte	$36
09880 2273                        36            .byte	$36
09881 2274                        36            .byte	$36
09882 2275                        36            .byte	$36
09883                                           ! 1352  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09884 2276                        36            .byte	$36
09885 2277                        36            .byte	$36
09886 2278                        36            .byte	$36
09887 2279                        36            .byte	$36
09888 227A                        36            .byte	$36
09889 227B                        F7            .byte	$F7
09890 227C                        00            .byte	0
09891 227D                        FF            .byte	$FF
09892 227E                        00            .byte	0
09893 227F                        00            .byte	0
09894 2280                        00            .byte	0
09895 2281                        00            .byte	0
09896 2282                        00            .byte	0
09897 2283                        00            .byte	0
09898                                           ! 1353  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09899 2284                        00            .byte	0
09900 2285                        00            .byte	0
09901 2286                        00            .byte	0
09902 2287                        00            .byte	0
09903 2288                        00            .byte	0
09904 2289                        FF            .byte	$FF
09905 228A                        00            .byte	0
09906 228B                        F7            .byte	$F7
09907 228C                        36            .byte	$36
09908 228D                        36            .byte	$36
09909 228E                        36            .byte	$36
09910 228F                        36            .byte	$36
09911 2290                        36            .byte	$36
09912 2291                        36            .byte	$36
09913                                           ! 1354  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09914 2292                        36            .byte	$36
09915 2293                        36            .byte	$36
09916 2294                        36            .byte	$36
09917 2295                        36            .byte	$36
09918 2296                        36            .byte	$36
09919 2297                        37            .byte	$37
09920 2298                        30            .byte	$30
09921 2299                        37            .byte	$37
09922 229A                        36            .byte	$36
09923 229B                        36            .byte	$36
09924 229C                        36            .byte	$36
09925 229D                        36            .byte	$36
09926 229E                        36            .byte	$36
09927 229F                        36            .byte	$36
09928                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09929 22A0                        00            .byte	0
09930 22A1                        00            .byte	0
09931 22A2                        00            .byte	0
09932 22A3                        00            .byte	0
09933 22A4                        00            .byte	0
09934 22A5                        FF            .byte	$FF
09935 22A6                        00            .byte	0
09936 22A7                        FF            .byte	$FF
09937 22A8                        00            .byte	0
09938 22A9                        00            .byte	0
09939 22AA                        00            .byte	0
09940 22AB                        00            .byte	0
09941 22AC                        00            .byte	0
09942 22AD                        00            .byte	0
09943                                           ! 1356  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09944 22AE                        36            .byte	$36
09945 22AF                        36            .byte	$36
09946 22B0                        36            .byte	$36
09947 22B1                        36            .byte	$36
09948 22B2                        36            .byte	$36
09949 22B3                        F7            .byte	$F7
09950 22B4                        00            .byte	0
09951 22B5                        F7            .byte	$F7
09952 22B6                        36            .byte	$36
09953 22B7                        36            .byte	$36
09954 22B8                        36            .byte	$36
09955 22B9                        36            .byte	$36
09956 22BA                        36            .byte	$36
09957 22BB                        36            .byte	$36
09958                                           ! 1357  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09959 22BC                        18            .byte	$18
09960 22BD                        18            .byte	$18
09961 22BE                        18            .byte	$18
09962 22BF                        18            .byte	$18
09963 22C0                        18            .byte	$18
09964 22C1                        FF            .byte	$FF
09965 22C2                        00            .byte	0
09966 22C3                        FF            .byte	$FF
09967 22C4                        00            .byte	0
09968 22C5                        00            .byte	0
09969 22C6                        00            .byte	0
09970 22C7                        00            .byte	0
09971 22C8                        00            .byte	0
09972 22C9                        00            .byte	0
09973                                           ! 1358  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09974 22CA                        36            .byte	$36
09975 22CB                        36            .byte	$36
09976 22CC                        36            .byte	$36
09977 22CD                        36            .byte	$36
09978 22CE                        36            .byte	$36
09979 22CF                        36            .byte	$36
09980 22D0                        36            .byte	$36
09981 22D1                        FF            .byte	$FF
09982 22D2                        00            .byte	0
09983 22D3                        00            .byte	0
09984 22D4                        00            .byte	0
09985 22D5                        00            .byte	0
09986 22D6                        00            .byte	0
09987 22D7                        00            .byte	0
09988                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09989 22D8                        00            .byte	0
09990 22D9                        00            .byte	0
09991 22DA                        00            .byte	0
09992 22DB                        00            .byte	0
09993 22DC                        00            .byte	0
09994 22DD                        FF            .byte	$FF
09995 22DE                        00            .byte	0
09996 22DF                        FF            .byte	$FF
09997 22E0                        18            .byte	$18
09998 22E1                        18            .byte	$18
09999 22E2                        18            .byte	$18
10000 22E3                        18            .byte	$18
10001 22E4                        18            .byte	$18
10002 22E5                        18            .byte	$18
10003                                           ! 1360  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10004 22E6                        00            .byte	0
10005 22E7                        00            .byte	0
10006 22E8                        00            .byte	0
10007 22E9                        00            .byte	0
10008 22EA                        00            .byte	0
10009 22EB                        00            .byte	0
10010 22EC                        00            .byte	0
10011 22ED                        FF            .byte	$FF
10012 22EE                        36            .byte	$36
10013 22EF                        36            .byte	$36
10014 22F0                        36            .byte	$36
10015 22F1                        36            .byte	$36
10016 22F2                        36            .byte	$36
10017 22F3                        36            .byte	$36
10018                                           ! 1361  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10019 22F4                        36            .byte	$36
10020 22F5                        36            .byte	$36
10021 22F6                        36            .byte	$36
10022 22F7                        36            .byte	$36
10023 22F8                        36            .byte	$36
10024 22F9                        36            .byte	$36
10025 22FA                        36            .byte	$36
10026 22FB                        3F            .byte	$3F
10027 22FC                        00            .byte	0
10028 22FD                        00            .byte	0
10029 22FE                        00            .byte	0
10030 22FF                        00            .byte	0
10031 2300                        00            .byte	0
10032 2301                        00            .byte	0
10033                                           ! 1362  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10034 2302                        18            .byte	$18
10035 2303                        18            .byte	$18
10036 2304                        18            .byte	$18
10037 2305                        18            .byte	$18
10038 2306                        18            .byte	$18
10039 2307                        1F            .byte	$1F
10040 2308                        18            .byte	$18
10041 2309                        1F            .byte	$1F
10042 230A                        00            .byte	0
10043 230B                        00            .byte	0
10044 230C                        00            .byte	0
10045 230D                        00            .byte	0
10046 230E                        00            .byte	0
10047 230F                        00            .byte	0
10048                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10049 2310                        00            .byte	0
10050 2311                        00            .byte	0
10051 2312                        00            .byte	0
10052 2313                        00            .byte	0
10053 2314                        00            .byte	0
10054 2315                        1F            .byte	$1F
10055 2316                        18            .byte	$18
10056 2317                        1F            .byte	$1F
10057 2318                        18            .byte	$18
10058 2319                        18            .byte	$18
10059 231A                        18            .byte	$18
10060 231B                        18            .byte	$18
10061 231C                        18            .byte	$18
10062 231D                        18            .byte	$18
10063                                           ! 1364  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10064 231E                        00            .byte	0
10065 231F                        00            .byte	0
10066 2320                        00            .byte	0
10067 2321                        00            .byte	0
10068 2322                        00            .byte	0
10069 2323                        00            .byte	0
10070 2324                        00            .byte	0
10071 2325                        3F            .byte	$3F
10072 2326                        36            .byte	$36
10073 2327                        36            .byte	$36
10074 2328                        36            .byte	$36
10075 2329                        36            .byte	$36
10076 232A                        36            .byte	$36
10077 232B                        36            .byte	$36
10078                                           ! 1365  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10079 232C                        36            .byte	$36
10080 232D                        36            .byte	$36
10081 232E                        36            .byte	$36
10082 232F                        36            .byte	$36
10083 2330                        36            .byte	$36
10084 2331                        36            .byte	$36
10085 2332                        36            .byte	$36
10086 2333                        FF            .byte	$FF
10087 2334                        36            .byte	$36
10088 2335                        36            .byte	$36
10089 2336                        36            .byte	$36
10090 2337                        36            .byte	$36
10091 2338                        36            .byte	$36
10092 2339                        36            .byte	$36
10093                                           ! 1366  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10094 233A                        18            .byte	$18
10095 233B                        18            .byte	$18
10096 233C                        18            .byte	$18
10097 233D                        18            .byte	$18
10098 233E                        18            .byte	$18
10099 233F                        FF            .byte	$FF
10100 2340                        18            .byte	$18
10101 2341                        FF            .byte	$FF
10102 2342                        18            .byte	$18
10103 2343                        18            .byte	$18
10104 2344                        18            .byte	$18
10105 2345                        18            .byte	$18
10106 2346                        18            .byte	$18
10107 2347                        18            .byte	$18
10108                                           ! 1367  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10109 2348                        18            .byte	$18
10110 2349                        18            .byte	$18
10111 234A                        18            .byte	$18
10112 234B                        18            .byte	$18
10113 234C                        18            .byte	$18
10114 234D                        18            .byte	$18
10115 234E                        18            .byte	$18
10116 234F                        F8            .byte	$F8
10117 2350                        00            .byte	0
10118 2351                        00            .byte	0
10119 2352                        00            .byte	0
10120 2353                        00            .byte	0
10121 2354                        00            .byte	0
10122 2355                        00            .byte	0
10123                                           ! 1368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10124 2356                        00            .byte	0
10125 2357                        00            .byte	0
10126 2358                        00            .byte	0
10127 2359                        00            .byte	0
10128 235A                        00            .byte	0
10129 235B                        00            .byte	0
10130 235C                        00            .byte	0
10131 235D                        1F            .byte	$1F
10132 235E                        18            .byte	$18
10133 235F                        18            .byte	$18
10134 2360                        18            .byte	$18
10135 2361                        18            .byte	$18
10136 2362                        18            .byte	$18
10137 2363                        18            .byte	$18
10138                                           ! 1369  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10139 2364                        FF            .byte	$FF
10140 2365                        FF            .byte	$FF
10141 2366                        FF            .byte	$FF
10142 2367                        FF            .byte	$FF
10143 2368                        FF            .byte	$FF
10144 2369                        FF            .byte	$FF
10145 236A                        FF            .byte	$FF
10146 236B                        FF            .byte	$FF
10147 236C                        FF            .byte	$FF
10148 236D                        FF            .byte	$FF
10149 236E                        FF            .byte	$FF
10150 236F                        FF            .byte	$FF
10151 2370                        FF            .byte	$FF
10152 2371                        FF            .byte	$FF
10153                                           ! 1370  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10154 2372                        00            .byte	0
10155 2373                        00            .byte	0
10156 2374                        00            .byte	0
10157 2375                        00            .byte	0
10158 2376                        00            .byte	0
10159 2377                        00            .byte	0
10160 2378                        00            .byte	0
10161 2379                        FF            .byte	$FF
10162 237A                        FF            .byte	$FF
10163 237B                        FF            .byte	$FF
10164 237C                        FF            .byte	$FF
10165 237D                        FF            .byte	$FF
10166 237E                        FF            .byte	$FF
10167 237F                        FF            .byte	$FF
10168                                           ! 1371  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10169 2380                        F0            .byte	$F0
10170 2381                        F0            .byte	$F0
10171 2382                        F0            .byte	$F0
10172 2383                        F0            .byte	$F0
10173 2384                        F0            .byte	$F0
10174                                           ! 1371  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10175 2385                        F0            .byte	$F0
10176 2386                        F0            .byte	$F0
10177 2387                        F0            .byte	$F0
10178 2388                        F0            .byte	$F0
10179 2389                        F0            .byte	$F0
10180 238A                        F0            .byte	$F0
10181 238B                        F0            .byte	$F0
10182 238C                        F0            .byte	$F0
10183 238D                        F0            .byte	$F0
10184                                           ! 1372  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10185 238E                        0F            .byte	$F
10186 238F                        0F            .byte	$F
10187 2390                        0F            .byte	$F
10188 2391                        0F            .byte	$F
10189 2392                        0F            .byte	$F
10190 2393                        0F            .byte	$F
10191 2394                        0F            .byte	$F
10192 2395                        0F            .byte	$F
10193 2396                        0F            .byte	$F
10194 2397                        0F            .byte	$F
10195 2398                        0F            .byte	$F
10196 2399                        0F            .byte	$F
10197 239A                        0F            .byte	$F
10198 239B                        0F            .byte	$F
10199                                           ! 1373  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10200 239C                        FF            .byte	$FF
10201 239D                        FF            .byte	$FF
10202 239E                        FF            .byte	$FF
10203 239F                        FF            .byte	$FF
10204 23A0                        FF            .byte	$FF
10205 23A1                        FF            .byte	$FF
10206 23A2                        FF            .byte	$FF
10207 23A3                        00            .byte	0
10208 23A4                        00            .byte	0
10209 23A5                        00            .byte	0
10210 23A6                        00            .byte	0
10211 23A7                        00            .byte	0
10212 23A8                        00            .byte	0
10213 23A9                        00            .byte	0
10214                                           ! 1374  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10215 23AA                        00            .byte	0
10216 23AB                        00            .byte	0
10217 23AC                        00            .byte	0
10218 23AD                        00            .byte	0
10219 23AE                        00            .byte	0
10220 23AF                        76            .byte	$76
10221 23B0                        DC            .byte	$DC
10222 23B1                        D8            .byte	$D8
10223 23B2                        D8            .byte	$D8
10224 23B3                        DC            .byte	$DC
10225 23B4                        76            .byte	$76
10226 23B5                        00            .byte	0
10227 23B6                        00            .byte	0
10228 23B7                        00            .byte	0
10229                                           ! 1375  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10230 23B8                        00            .byte	0
10231 23B9                        00            .byte	0
10232 23BA                        00            .byte	0
10233 23BB                        00            .byte	0
10234 23BC                        7C            .byte	$7C
10235 23BD                        C6            .byte	$C6
10236 23BE                        FC            .byte	$FC
10237 23BF                        C6            .byte	$C6
10238 23C0                        C6            .byte	$C6
10239 23C1                        FC            .byte	$FC
10240 23C2                        C0            .byte	$C0
10241 23C3                        C0            .byte	$C0
10242 23C4                        40            .byte	$40
10243 23C5                        00            .byte	0
10244                                           ! 1376  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10245 23C6                        00            .byte	0
10246 23C7                        00            .byte	0
10247 23C8                        FE            .byte	$FE
10248 23C9                        C6            .byte	$C6
10249 23CA                        C6            .byte	$C6
10250 23CB                        C0            .byte	$C0
10251 23CC                        C0            .byte	$C0
10252 23CD                        C0            .byte	$C0
10253 23CE                        C0            .byte	$C0
10254 23CF                        C0            .byte	$C0
10255 23D0                        C0            .byte	$C0
10256 23D1                        00            .byte	0
10257 23D2                        00            .byte	0
10258 23D3                        00            .byte	0
10259                                           ! 1377  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10260 23D4                        00            .byte	0
10261 23D5                        00            .byte	0
10262 23D6                        00            .byte	0
10263 23D7                        00            .byte	0
10264 23D8                        FE            .byte	$FE
10265 23D9                        6C            .byte	$6C
10266 23DA                        6C            .byte	$6C
10267 23DB                        6C            .byte	$6C
10268 23DC                        6C            .byte	$6C
10269 23DD                        6C            .byte	$6C
10270 23DE                        6C            .byte	$6C
10271 23DF                        00            .byte	0
10272 23E0                        00            .byte	0
10273 23E1                        00            .byte	0
10274                                           ! 1378  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10275 23E2                        00            .byte	0
10276 23E3                        00            .byte	0
10277 23E4                        FE            .byte	$FE
10278 23E5                        C6            .byte	$C6
10279 23E6                        60            .byte	$60
10280 23E7                        30            .byte	$30
10281 23E8                        18            .byte	$18
10282 23E9                        30            .byte	$30
10283 23EA                        60            .byte	$60
10284 23EB                        C6            .byte	$C6
10285 23EC                        FE            .byte	$FE
10286 23ED                        00            .byte	0
10287 23EE                        00            .byte	0
10288 23EF                        00            .byte	0
10289                                           ! 1379  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10290 23F0                        00            .byte	0
10291 23F1                        00            .byte	0
10292 23F2                        00            .byte	0
10293 23F3                        00            .byte	0
10294 23F4                        00            .byte	0
10295 23F5                        7E            .byte	$7E
10296 23F6                        D8            .byte	$D8
10297 23F7                        D8            .byte	$D8
10298 23F8                        D8            .byte	$D8
10299 23F9                        D8            .byte	$D8
10300 23FA                        70            .byte	$70
10301 23FB                        00            .byte	0
10302 23FC                        00            .byte	0
10303 23FD                        00            .byte	0
10304                                           ! 1380  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10305 23FE                        00            .byte	0
10306 23FF                        00            .byte	0
10307 2400                        00            .byte	0
10308 2401                        00            .byte	0
10309 2402                        66            .byte	$66
10310 2403                        66            .byte	$66
10311 2404                        66            .byte	$66
10312 2405                        66            .byte	$66
10313 2406                        7C            .byte	$7C
10314 2407                        60            .byte	$60
10315 2408                        60            .byte	$60
10316 2409                        C0            .byte	$C0
10317 240A                        00            .byte	0
10318 240B                        00            .byte	0
10319                                           ! 1381  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10320 240C                        00            .byte	0
10321 240D                        00            .byte	0
10322 240E                        00            .byte	0
10323 240F                        00            .byte	0
10324 2410                        76            .byte	$76
10325 2411                        DC            .byte	$DC
10326 2412                        18            .byte	$18
10327 2413                        18            .byte	$18
10328 2414                        18            .byte	$18
10329 2415                        18            .byte	$18
10330 2416                        18            .byte	$18
10331 2417                        00            .byte	0
10332 2418                        00            .byte	0
10333 2419                        00            .byte	0
10334                                           ! 1382  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10335 241A                        00            .byte	0
10336 241B                        00            .byte	0
10337 241C                        7E            .byte	$7E
10338 241D                        18            .byte	$18
10339 241E                        3C            .byte	$3C
10340 241F                        66            .byte	$66
10341 2420                        66            .byte	$66
10342 2421                        66            .byte	$66
10343 2422                        3C            .byte	$3C
10344 2423                        18            .byte	$18
10345 2424                        7E            .byte	$7E
10346 2425                        00            .byte	0
10347 2426                        00            .byte	0
10348 2427                        00            .byte	0
10349                                           ! 1383  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10350 2428                        00            .byte	0
10351 2429                        00            .byte	0
10352 242A                        38            .byte	$38
10353 242B                        6C            .byte	$6C
10354 242C                        C6            .byte	$C6
10355 242D                        C6            .byte	$C6
10356 242E                        FE            .byte	$FE
10357 242F                        C6            .byte	$C6
10358 2430                        C6            .byte	$C6
10359 2431                        6C            .byte	$6C
10360 2432                        38            .byte	$38
10361 2433                        00            .byte	0
10362 2434                        00            .byte	0
10363 2435                        00            .byte	0
10364                                           ! 1384  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10365 2436                        00            .byte	0
10366 2437                        00            .byte	0
10367 2438                        38            .byte	$38
10368 2439                        6C            .byte	$6C
10369 243A                        C6            .byte	$C6
10370 243B                        C6            .byte	$C6
10371 243C                        C6            .byte	$C6
10372 243D                        6C            .byte	$6C
10373 243E                        6C            .byte	$6C
10374 243F                        6C            .byte	$6C
10375 2440                        EE            .byte	$EE
10376 2441                        00            .byte	0
10377 2442                        00            .byte	0
10378 2443                        00            .byte	0
10379                                           ! 1385  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10380 2444                        00            .byte	0
10381 2445                        00            .byte	0
10382 2446                        1E            .byte	$1E
10383 2447                        30            .byte	$30
10384 2448                        18            .byte	$18
10385 2449                        0C            .byte	$C
10386 244A                        3E            .byte	$3E
10387 244B                        66            .byte	$66
10388 244C                        66            .byte	$66
10389 244D                        66            .byte	$66
10390 244E                        3C            .byte	$3C
10391 244F                        00            .byte	0
10392 2450                        00            .byte	0
10393 2451                        00            .byte	0
10394                                           ! 1386  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10395 2452                        00            .byte	0
10396 2453                        00            .byte	0
10397 2454                        00            .byte	0
10398 2455                        00            .byte	0
10399 2456                        00            .byte	0
10400 2457                        7E            .byte	$7E
10401 2458                        DB            .byte	$DB
10402 2459                        DB            .byte	$DB
10403 245A                        7E            .byte	$7E
10404 245B                        00            .byte	0
10405 245C                        00            .byte	0
10406 245D                        00            .byte	0
10407 245E                        00            .byte	0
10408 245F                        00            .byte	0
10409                                           ! 1387  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10410 2460                        00            .byte	0
10411 2461                        00            .byte	0
10412 2462                        03            .byte	3
10413 2463                        06            .byte	6
10414 2464                        7E            .byte	$7E
10415 2465                        DB            .byte	$DB
10416 2466                        DB            .byte	$DB
10417 2467                        F3            .byte	$F3
10418 2468                        7E            .byte	$7E
10419 2469                        60            .byte	$60
10420 246A                        C0            .byte	$C0
10421 246B                        00            .byte	0
10422 246C                        00            .byte	0
10423 246D                        00            .byte	0
10424                                           ! 1388  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10425 246E                        00            .byte	0
10426 246F                        00            .byte	0
10427 2470                        1C            .byte	$1C
10428 2471                        30            .byte	$30
10429 2472                        60            .byte	$60
10430 2473                        60            .byte	$60
10431 2474                        7C            .byte	$7C
10432 2475                        60            .byte	$60
10433 2476                        60            .byte	$60
10434 2477                        30            .byte	$30
10435 2478                        1C            .byte	$1C
10436 2479                        00            .byte	0
10437 247A                        00            .byte	0
10438 247B                        00            .byte	0
10439                                           ! 1389  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10440 247C                        00            .byte	0
10441 247D                        00            .byte	0
10442 247E                        00            .byte	0
10443 247F                        7C            .byte	$7C
10444 2480                        C6            .byte	$C6
10445 2481                        C6            .byte	$C6
10446 2482                        C6            .byte	$C6
10447 2483                        C6            .byte	$C6
10448 2484                        C6            .byte	$C6
10449 2485                        C6            .byte	$C6
10450 2486                        C6            .byte	$C6
10451 2487                        00            .byte	0
10452 2488                        00            .byte	0
10453 2489                        00            .byte	0
10454                                           ! 1390  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10455 248A                        00            .byte	0
10456 248B                        00            .byte	0
10457 248C                        00            .byte	0
10458 248D                        FE            .byte	$FE
10459 248E                        00            .byte	0
10460 248F                        00            .byte	0
10461 2490                        FE            .byte	$FE
10462 2491                        00            .byte	0
10463 2492                        00            .byte	0
10464 2493                        FE            .byte	$FE
10465 2494                        00            .byte	0
10466 2495                        00            .byte	0
10467 2496                        00            .byte	0
10468 2497                        00            .byte	0
10469                                           ! 1391  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10470 2498                        00            .byte	0
10471 2499                        00            .byte	0
10472 249A                        00            .byte	0
10473 249B                        18            .byte	$18
10474 249C                        18            .byte	$18
10475 249D                        7E            .byte	$7E
10476 249E                        18            .byte	$18
10477 249F                        18            .byte	$18
10478 24A0                        00            .byte	0
10479 24A1                        00            .byte	0
10480 24A2                        FF            .byte	$FF
10481 24A3                        00            .byte	0
10482 24A4                        00            .byte	0
10483 24A5                        00            .byte	0
10484                                           ! 1392  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10485 24A6                        00            .byte	0
10486 24A7                        00            .byte	0
10487 24A8                        30            .byte	$30
10488 24A9                        18            .byte	$18
10489 24AA                        0C            .byte	$C
10490 24AB                        06            .byte	6
10491 24AC                        0C            .byte	$C
10492 24AD                        18            .byte	$18
10493 24AE                        30            .byte	$30
10494 24AF                        00            .byte	0
10495 24B0                        7E            .byte	$7E
10496 24B1                        00            .byte	0
10497 24B2                        00            .byte	0
10498 24B3                        00            .byte	0
10499                                           ! 1393  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10500 24B4                        00            .byte	0
10501 24B5                        00            .byte	0
10502 24B6                        0C            .byte	$C
10503 24B7                        18            .byte	$18
10504 24B8                        30            .byte	$30
10505 24B9                        60            .byte	$60
10506 24BA                        30            .byte	$30
10507 24BB                        18            .byte	$18
10508 24BC                        0C            .byte	$C
10509 24BD                        00            .byte	0
10510 24BE                        7E            .byte	$7E
10511 24BF                        00            .byte	0
10512 24C0                        00            .byte	0
10513 24C1                        00            .byte	0
10514                                           ! 1394  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10515 24C2                        00            .byte	0
10516 24C3                        00            .byte	0
10517 24C4                        0E            .byte	$E
10518 24C5                        1B            .byte	$1B
10519 24C6                        1B            .byte	$1B
10520 24C7                        18            .byte	$18
10521 24C8                        18            .byte	$18
10522 24C9                        18            .byte	$18
10523 24CA                        18            .byte	$18
10524 24CB                        18            .byte	$18
10525 24CC                        18            .byte	$18
10526 24CD                        18            .byte	$18
10527 24CE                        18            .byte	$18
10528 24CF                        18            .byte	$18
10529                                           ! 1395  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0
10530 24D0                        18            .byte	$18
10531 24D1                        18            .byte	$18
10532 24D2                        18            .byte	$18
10533 24D3                        18            .byte	$18
10534 24D4                        18            .byte	$18
10535 24D5                        18            .byte	$18
10536 24D6                        18            .byte	$18
10537                                           ! 1395 x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10538 24D7                        18            .byte	$18
10539 24D8                        D8            .byte	$D8
10540 24D9                        D8            .byte	$D8
10541 24DA                        70            .byte	$70
10542 24DB                        00            .byte	0
10543 24DC                        00            .byte	0
10544 24DD                        00            .byte	0
10545                                           ! 1396  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10546 24DE                        00            .byte	0
10547 24DF                        00            .byte	0
10548 24E0                        00            .byte	0
10549 24E1                        18            .byte	$18
10550 24E2                        18            .byte	$18
10551 24E3                        00            .byte	0
10552 24E4                        7E            .byte	$7E
10553 24E5                        00            .byte	0
10554 24E6                        18            .byte	$18
10555 24E7                        18            .byte	$18
10556 24E8                        00            .byte	0
10557 24E9                        00            .byte	0
10558 24EA                        00            .byte	0
10559 24EB                        00            .byte	0
10560                                           ! 1397  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10561 24EC                        00            .byte	0
10562 24ED                        00            .byte	0
10563 24EE                        00            .byte	0
10564 24EF                        00            .byte	0
10565 24F0                        76            .byte	$76
10566 24F1                        DC            .byte	$DC
10567 24F2                        00            .byte	0
10568 24F3                        76            .byte	$76
10569 24F4                        DC            .byte	$DC
10570 24F5                        00            .byte	0
10571 24F6                        00            .byte	0
10572 24F7                        00            .byte	0
10573 24F8                        00            .byte	0
10574 24F9                        00            .byte	0
10575                                           ! 1398  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10576 24FA                        00            .byte	0
10577 24FB                        38            .byte	$38
10578 24FC                        6C            .byte	$6C
10579 24FD                        6C            .byte	$6C
10580 24FE                        38            .byte	$38
10581 24FF                        00            .byte	0
10582 2500                        00            .byte	0
10583 2501                        00            .byte	0
10584 2502                        00            .byte	0
10585 2503                        00            .byte	0
10586 2504                        00            .byte	0
10587 2505                        00            .byte	0
10588 2506                        00            .byte	0
10589 2507                        00            .byte	0
10590                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10591 2508                        00            .byte	0
10592 2509                        00            .byte	0
10593 250A                        00            .byte	0
10594 250B                        00            .byte	0
10595 250C                        00            .byte	0
10596 250D                        00            .byte	0
10597 250E                        18            .byte	$18
10598 250F                        18            .byte	$18
10599 2510                        00            .byte	0
10600 2511                        00            .byte	0
10601 2512                        00            .byte	0
10602 2513                        00            .byte	0
10603 2514                        00            .byte	0
10604 2515                        00            .byte	0
10605                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10606 2516                        00            .byte	0
10607 2517                        00            .byte	0
10608 2518                        00            .byte	0
10609 2519                        00            .byte	0
10610 251A                        00            .byte	0
10611 251B                        00            .byte	0
10612 251C                        00            .byte	0
10613 251D                        18            .byte	$18
10614 251E                        00            .byte	0
10615 251F                        00            .byte	0
10616 2520                        00            .byte	0
10617 2521                        00            .byte	0
10618 2522                        00            .byte	0
10619 2523                        00            .byte	0
10620                                           ! 1401  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10621 2524                        00            .byte	0
10622 2525                        0F            .byte	$F
10623 2526                        0C            .byte	$C
10624 2527                        0C            .byte	$C
10625 2528                        0C            .byte	$C
10626 2529                        0C            .byte	$C
10627 252A                        0C            .byte	$C
10628 252B                        EC            .byte	$EC
10629 252C                        6C            .byte	$6C
10630 252D                        3C            .byte	$3C
10631 252E                        1C            .byte	$1C
10632 252F                        00            .byte	0
10633 2530                        00            .byte	0
10634 2531                        00            .byte	0
10635                                           ! 1402  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10636 2532                        00            .byte	0
10637 2533                        D8            .byte	$D8
10638 2534                        6C            .byte	$6C
10639 2535                        6C            .byte	$6C
10640 2536                        6C            .byte	$6C
10641 2537                        6C            .byte	$6C
10642 2538                        6C            .byte	$6C
10643 2539                        00            .byte	0
10644 253A                        00            .byte	0
10645 253B                        00            .byte	0
10646 253C                        00            .byte	0
10647 253D                        00            .byte	0
10648 253E                        00            .byte	0
10649 253F                        00            .byte	0
10650                                           ! 1403  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10651 2540                        00            .byte	0
10652 2541                        70            .byte	$70
10653 2542                        D8            .byte	$D8
10654 2543                        30            .byte	$30
10655 2544                        60            .byte	$60
10656 2545                        C8            .byte	$C8
10657 2546                        F8            .byte	$F8
10658 2547                        00            .byte	0
10659 2548                        00            .byte	0
10660 2549                        00            .byte	0
10661 254A                        00            .byte	0
10662 254B                        00            .byte	0
10663 254C                        00            .byte	0
10664 254D                        00            .byte	0
10665                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10666 254E                        00            .byte	0
10667 254F                        00            .byte	0
10668 2550                        00            .byte	0
10669 2551                        00            .byte	0
10670 2552                        7C            .byte	$7C
10671 2553                        7C            .byte	$7C
10672 2554                        7C            .byte	$7C
10673 2555                        7C            .byte	$7C
10674 2556                        7C            .byte	$7C
10675 2557                        7C            .byte	$7C
10676 2558                        00            .byte	0
10677 2559                        00            .byte	0
10678 255A                        00            .byte	0
10679 255B                        00            .byte	0
10680                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10681 255C                        00            .byte	0
10682 255D                        00            .byte	0
10683 255E                        00            .byte	0
10684 255F                        00            .byte	0
10685 2560                        00            .byte	0
10686 2561                        00            .byte	0
10687 2562                        00            .byte	0
10688 2563                        00            .byte	0
10689 2564                        00            .byte	0
10690 2565                        00            .byte	0
10691 2566                        00            .byte	0
10692 2567                        00            .byte	0
10693 2568                        00            .byte	0
10694                                           ! 1406 };
10695 2569                        00            .byte	0
10696                                           !BCC_EOS
10697                                           ! 1407 static Bit8u vgafont16[256*16]=
10698                                           ! 1408 {
10699                       0000256A            _vgafont16:
10700                                           ! 1409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10701 256A                        00            .byte	0
10702 256B                        00            .byte	0
10703 256C                        00            .byte	0
10704 256D                        00            .byte	0
10705 256E                        00            .byte	0
10706 256F                        00            .byte	0
10707 2570                        00            .byte	0
10708 2571                        00            .byte	0
10709 2572                        00            .byte	0
10710 2573                        00            .byte	0
10711 2574                        00            .byte	0
10712 2575                        00            .byte	0
10713 2576                        00            .byte	0
10714 2577                        00            .byte	0
10715 2578                        00            .byte	0
10716 2579                        00            .byte	0
10717                                           ! 1410  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10718 257A                        00            .byte	0
10719 257B                        00            .byte	0
10720 257C                        7E            .byte	$7E
10721 257D                        81            .byte	$81
10722 257E                        A5            .byte	$A5
10723 257F                        81            .byte	$81
10724 2580                        81            .byte	$81
10725 2581                        BD            .byte	$BD
10726 2582                        99            .byte	$99
10727 2583                        81            .byte	$81
10728 2584                        81            .byte	$81
10729 2585                        7E            .byte	$7E
10730 2586                        00            .byte	0
10731 2587                        00            .byte	0
10732 2588                        00            .byte	0
10733 2589                        00            .byte	0
10734                                           ! 1411  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10735 258A                        00            .byte	0
10736 258B                        00            .byte	0
10737 258C                        7E            .byte	$7E
10738 258D                        FF            .byte	$FF
10739 258E                        DB            .byte	$DB
10740 258F                        FF            .byte	$FF
10741 2590                        FF            .byte	$FF
10742 2591                        C3            .byte	$C3
10743 2592                        E7            .byte	$E7
10744 2593                        FF            .byte	$FF
10745 2594                        FF            .byte	$FF
10746 2595                        7E            .byte	$7E
10747 2596                        00            .byte	0
10748 2597                        00            .byte	0
10749 2598                        00            .byte	0
10750 2599                        00            .byte	0
10751                                           ! 1412  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10752 259A                        00            .byte	0
10753 259B                        00            .byte	0
10754 259C                        00            .byte	0
10755 259D                        00            .byte	0
10756 259E                        6C            .byte	$6C
10757 259F                        FE            .byte	$FE
10758 25A0                        FE            .byte	$FE
10759 25A1                        FE            .byte	$FE
10760 25A2                        FE            .byte	$FE
10761 25A3                        7C            .byte	$7C
10762 25A4                        38            .byte	$38
10763 25A5                        10            .byte	$10
10764 25A6                        00            .byte	0
10765 25A7                        00            .byte	0
10766 25A8                        00            .byte	0
10767 25A9                        00            .byte	0
10768                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10769 25AA                        00            .byte	0
10770 25AB                        00            .byte	0
10771 25AC                        00            .byte	0
10772 25AD                        00            .byte	0
10773 25AE                        10            .byte	$10
10774 25AF                        38            .byte	$38
10775 25B0                        7C            .byte	$7C
10776 25B1                        FE            .byte	$FE
10777 25B2                        7C            .byte	$7C
10778 25B3                        38            .byte	$38
10779 25B4                        10            .byte	$10
10780 25B5                        00            .byte	0
10781 25B6                        00            .byte	0
10782 25B7                        00            .byte	0
10783 25B8                        00            .byte	0
10784 25B9                        00            .byte	0
10785                                           ! 1414  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10786 25BA                        00            .byte	0
10787 25BB                        00            .byte	0
10788 25BC                        00            .byte	0
10789 25BD                        18            .byte	$18
10790 25BE                        3C            .byte	$3C
10791 25BF                        3C            .byte	$3C
10792 25C0                        E7            .byte	$E7
10793 25C1                        E7            .byte	$E7
10794 25C2                        E7            .byte	$E7
10795 25C3                        18            .byte	$18
10796 25C4                        18            .byte	$18
10797 25C5                        3C            .byte	$3C
10798 25C6                        00            .byte	0
10799 25C7                        00            .byte	0
10800 25C8                        00            .byte	0
10801 25C9                        00            .byte	0
10802                                           ! 1415  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10803 25CA                        00            .byte	0
10804 25CB                        00            .byte	0
10805 25CC                        00            .byte	0
10806 25CD                        18            .byte	$18
10807 25CE                        3C            .byte	$3C
10808 25CF                        7E            .byte	$7E
10809 25D0                        FF            .byte	$FF
10810 25D1                        FF            .byte	$FF
10811 25D2                        7E            .byte	$7E
10812 25D3                        18            .byte	$18
10813 25D4                        18            .byte	$18
10814 25D5                        3C            .byte	$3C
10815 25D6                        00            .byte	0
10816 25D7                        00            .byte	0
10817 25D8                        00            .byte	0
10818 25D9                        00            .byte	0
10819                                           ! 1416  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10820 25DA                        00            .byte	0
10821 25DB                        00            .byte	0
10822 25DC                        00            .byte	0
10823 25DD                        00            .byte	0
10824 25DE                        00            .byte	0
10825 25DF                        00            .byte	0
10826 25E0                        18            .byte	$18
10827 25E1                        3C            .byte	$3C
10828 25E2                        3C            .byte	$3C
10829 25E3                        18            .byte	$18
10830 25E4                        00            .byte	0
10831 25E5                        00            .byte	0
10832 25E6                        00            .byte	0
10833 25E7                        00            .byte	0
10834 25E8                        00            .byte	0
10835 25E9                        00            .byte	0
10836                                           ! 1417  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10837 25EA                        FF            .byte	$FF
10838 25EB                        FF            .byte	$FF
10839 25EC                        FF            .byte	$FF
10840 25ED                        FF            .byte	$FF
10841 25EE                        FF            .byte	$FF
10842 25EF                        FF            .byte	$FF
10843 25F0                        E7            .byte	$E7
10844 25F1                        C3            .byte	$C3
10845 25F2                        C3            .byte	$C3
10846 25F3                        E7            .byte	$E7
10847 25F4                        FF            .byte	$FF
10848 25F5                        FF            .byte	$FF
10849 25F6                        FF            .byte	$FF
10850 25F7                        FF            .byte	$FF
10851 25F8                        FF            .byte	$FF
10852 25F9                        FF            .byte	$FF
10853                                           ! 1418  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10854 25FA                        00            .byte	0
10855 25FB                        00            .byte	0
10856 25FC                        00            .byte	0
10857 25FD                        00            .byte	0
10858 25FE                        00            .byte	0
10859 25FF                        3C            .byte	$3C
10860 2600                        66            .byte	$66
10861 2601                        42            .byte	$42
10862 2602                        42            .byte	$42
10863 2603                        66            .byte	$66
10864 2604                        3C            .byte	$3C
10865 2605                        00            .byte	0
10866 2606                        00            .byte	0
10867 2607                        00            .byte	0
10868 2608                        00            .byte	0
10869 2609                        00            .byte	0
10870                                           ! 1419  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10871 260A                        FF            .byte	$FF
10872 260B                        FF            .byte	$FF
10873 260C                        FF            .byte	$FF
10874 260D                        FF            .byte	$FF
10875 260E                        FF            .byte	$FF
10876 260F                        C3            .byte	$C3
10877 2610                        99            .byte	$99
10878 2611                        BD            .byte	$BD
10879 2612                        BD            .byte	$BD
10880 2613                        99            .byte	$99
10881 2614                        C3            .byte	$C3
10882 2615                        FF            .byte	$FF
10883 2616                        FF            .byte	$FF
10884 2617                        FF            .byte	$FF
10885 2618                        FF            .byte	$FF
10886 2619                        FF            .byte	$FF
10887                                           ! 1420  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc,
10888 261A                        00            .byte	0
10889 261B                        00            .byte	0
10890 261C                        1E            .byte	$1E
10891 261D                        0E            .byte	$E
10892 261E                        1A            .byte	$1A
10893 261F                        32            .byte	$32
10894 2620                        78            .byte	$78
10895 2621                        CC            .byte	$CC
10896                                           ! 1420  0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10897 2622                        CC            .byte	$CC
10898 2623                        CC            .byte	$CC
10899 2624                        CC            .byte	$CC
10900 2625                        78            .byte	$78
10901 2626                        00            .byte	0
10902 2627                        00            .byte	0
10903 2628                        00            .byte	0
10904 2629                        00            .byte	0
10905                                           ! 1421  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10906 262A                        00            .byte	0
10907 262B                        00            .byte	0
10908 262C                        3C            .byte	$3C
10909 262D                        66            .byte	$66
10910 262E                        66            .byte	$66
10911 262F                        66            .byte	$66
10912 2630                        66            .byte	$66
10913 2631                        3C            .byte	$3C
10914 2632                        18            .byte	$18
10915 2633                        7E            .byte	$7E
10916 2634                        18            .byte	$18
10917 2635                        18            .byte	$18
10918 2636                        00            .byte	0
10919 2637                        00            .byte	0
10920 2638                        00            .byte	0
10921 2639                        00            .byte	0
10922                                           ! 1422  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10923 263A                        00            .byte	0
10924 263B                        00            .byte	0
10925 263C                        3F            .byte	$3F
10926 263D                        33            .byte	$33
10927 263E                        3F            .byte	$3F
10928 263F                        30            .byte	$30
10929 2640                        30            .byte	$30
10930 2641                        30            .byte	$30
10931 2642                        30            .byte	$30
10932 2643                        70            .byte	$70
10933 2644                        F0            .byte	$F0
10934 2645                        E0            .byte	$E0
10935 2646                        00            .byte	0
10936 2647                        00            .byte	0
10937 2648                        00            .byte	0
10938 2649                        00            .byte	0
10939                                           ! 1423  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10940 264A                        00            .byte	0
10941 264B                        00            .byte	0
10942 264C                        7F            .byte	$7F
10943 264D                        63            .byte	$63
10944 264E                        7F            .byte	$7F
10945 264F                        63            .byte	$63
10946 2650                        63            .byte	$63
10947 2651                        63            .byte	$63
10948 2652                        63            .byte	$63
10949 2653                        67            .byte	$67
10950 2654                        E7            .byte	$E7
10951 2655                        E6            .byte	$E6
10952 2656                        C0            .byte	$C0
10953 2657                        00            .byte	0
10954 2658                        00            .byte	0
10955 2659                        00            .byte	0
10956                                           ! 1424  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10957 265A                        00            .byte	0
10958 265B                        00            .byte	0
10959 265C                        00            .byte	0
10960 265D                        18            .byte	$18
10961 265E                        18            .byte	$18
10962 265F                        DB            .byte	$DB
10963 2660                        3C            .byte	$3C
10964 2661                        E7            .byte	$E7
10965 2662                        3C            .byte	$3C
10966 2663                        DB            .byte	$DB
10967 2664                        18            .byte	$18
10968 2665                        18            .byte	$18
10969 2666                        00            .byte	0
10970 2667                        00            .byte	0
10971 2668                        00            .byte	0
10972 2669                        00            .byte	0
10973                                           ! 1425  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10974 266A                        00            .byte	0
10975 266B                        80            .byte	$80
10976 266C                        C0            .byte	$C0
10977 266D                        E0            .byte	$E0
10978 266E                        F0            .byte	$F0
10979 266F                        F8            .byte	$F8
10980 2670                        FE            .byte	$FE
10981 2671                        F8            .byte	$F8
10982 2672                        F0            .byte	$F0
10983 2673                        E0            .byte	$E0
10984 2674                        C0            .byte	$C0
10985 2675                        80            .byte	$80
10986 2676                        00            .byte	0
10987 2677                        00            .byte	0
10988 2678                        00            .byte	0
10989 2679                        00            .byte	0
10990                                           ! 1426  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10991 267A                        00            .byte	0
10992 267B                        02            .byte	2
10993 267C                        06            .byte	6
10994 267D                        0E            .byte	$E
10995 267E                        1E            .byte	$1E
10996 267F                        3E            .byte	$3E
10997 2680                        FE            .byte	$FE
10998 2681                        3E            .byte	$3E
10999 2682                        1E            .byte	$1E
11000 2683                        0E            .byte	$E
11001 2684                        06            .byte	6
11002 2685                        02            .byte	2
11003 2686                        00            .byte	0
11004 2687                        00            .byte	0
11005 2688                        00            .byte	0
11006 2689                        00            .byte	0
11007                                           ! 1427  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11008 268A                        00            .byte	0
11009 268B                        00            .byte	0
11010 268C                        18            .byte	$18
11011 268D                        3C            .byte	$3C
11012 268E                        7E            .byte	$7E
11013 268F                        18            .byte	$18
11014 2690                        18            .byte	$18
11015 2691                        18            .byte	$18
11016 2692                        7E            .byte	$7E
11017 2693                        3C            .byte	$3C
11018 2694                        18            .byte	$18
11019 2695                        00            .byte	0
11020 2696                        00            .byte	0
11021 2697                        00            .byte	0
11022 2698                        00            .byte	0
11023 2699                        00            .byte	0
11024                                           ! 1428  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11025 269A                        00            .byte	0
11026 269B                        00            .byte	0
11027 269C                        66            .byte	$66
11028 269D                        66            .byte	$66
11029 269E                        66            .byte	$66
11030 269F                        66            .byte	$66
11031 26A0                        66            .byte	$66
11032 26A1                        66            .byte	$66
11033 26A2                        66            .byte	$66
11034 26A3                        00            .byte	0
11035 26A4                        66            .byte	$66
11036 26A5                        66            .byte	$66
11037 26A6                        00            .byte	0
11038 26A7                        00            .byte	0
11039 26A8                        00            .byte	0
11040 26A9                        00            .byte	0
11041                                           ! 1429  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11042 26AA                        00            .byte	0
11043 26AB                        00            .byte	0
11044 26AC                        7F            .byte	$7F
11045 26AD                        DB            .byte	$DB
11046 26AE                        DB            .byte	$DB
11047 26AF                        DB            .byte	$DB
11048 26B0                        7B            .byte	$7B
11049 26B1                        1B            .byte	$1B
11050 26B2                        1B            .byte	$1B
11051 26B3                        1B            .byte	$1B
11052 26B4                        1B            .byte	$1B
11053 26B5                        1B            .byte	$1B
11054 26B6                        00            .byte	0
11055 26B7                        00            .byte	0
11056 26B8                        00            .byte	0
11057 26B9                        00            .byte	0
11058                                           ! 1430  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11059 26BA                        00            .byte	0
11060 26BB                        7C            .byte	$7C
11061 26BC                        C6            .byte	$C6
11062 26BD                        60            .byte	$60
11063 26BE                        38            .byte	$38
11064 26BF                        6C            .byte	$6C
11065 26C0                        C6            .byte	$C6
11066 26C1                        C6            .byte	$C6
11067 26C2                        6C            .byte	$6C
11068 26C3                        38            .byte	$38
11069 26C4                        0C            .byte	$C
11070 26C5                        C6            .byte	$C6
11071 26C6                        7C            .byte	$7C
11072 26C7                        00            .byte	0
11073 26C8                        00            .byte	0
11074 26C9                        00            .byte	0
11075                                           ! 1431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11076 26CA                        00            .byte	0
11077 26CB                        00            .byte	0
11078 26CC                        00            .byte	0
11079 26CD                        00            .byte	0
11080 26CE                        00            .byte	0
11081 26CF                        00            .byte	0
11082 26D0                        00            .byte	0
11083 26D1                        00            .byte	0
11084 26D2                        FE            .byte	$FE
11085 26D3                        FE            .byte	$FE
11086 26D4                        FE            .byte	$FE
11087 26D5                        FE            .byte	$FE
11088 26D6                        00            .byte	0
11089 26D7                        00            .byte	0
11090 26D8                        00            .byte	0
11091 26D9                        00            .byte	0
11092                                           ! 1432  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11093 26DA                        00            .byte	0
11094 26DB                        00            .byte	0
11095 26DC                        18            .byte	$18
11096 26DD                        3C            .byte	$3C
11097 26DE                        7E            .byte	$7E
11098 26DF                        18            .byte	$18
11099 26E0                        18            .byte	$18
11100 26E1                        18            .byte	$18
11101 26E2                        7E            .byte	$7E
11102 26E3                        3C            .byte	$3C
11103 26E4                        18            .byte	$18
11104 26E5                        7E            .byte	$7E
11105 26E6                        00            .byte	0
11106 26E7                        00            .byte	0
11107 26E8                        00            .byte	0
11108 26E9                        00            .byte	0
11109                                           ! 1433  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11110 26EA                        00            .byte	0
11111 26EB                        00            .byte	0
11112 26EC                        18            .byte	$18
11113 26ED                        3C            .byte	$3C
11114 26EE                        7E            .byte	$7E
11115 26EF                        18            .byte	$18
11116 26F0                        18            .byte	$18
11117 26F1                        18            .byte	$18
11118 26F2                        18            .byte	$18
11119 26F3                        18            .byte	$18
11120 26F4                        18            .byte	$18
11121 26F5                        18            .byte	$18
11122 26F6                        00            .byte	0
11123 26F7                        00            .byte	0
11124 26F8                        00            .byte	0
11125 26F9                        00            .byte	0
11126                                           ! 1434  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11127 26FA                        00            .byte	0
11128 26FB                        00            .byte	0
11129 26FC                        18            .byte	$18
11130 26FD                        18            .byte	$18
11131 26FE                        18            .byte	$18
11132 26FF                        18            .byte	$18
11133 2700                        18            .byte	$18
11134 2701                        18            .byte	$18
11135 2702                        18            .byte	$18
11136 2703                        7E            .byte	$7E
11137 2704                        3C            .byte	$3C
11138 2705                        18            .byte	$18
11139 2706                        00            .byte	0
11140 2707                        00            .byte	0
11141 2708                        00            .byte	0
11142 2709                        00            .byte	0
11143                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11144 270A                        00            .byte	0
11145 270B                        00            .byte	0
11146 270C                        00            .byte	0
11147 270D                        00            .byte	0
11148 270E                        00            .byte	0
11149 270F                        18            .byte	$18
11150 2710                        0C            .byte	$C
11151 2711                        FE            .byte	$FE
11152 2712                        0C            .byte	$C
11153 2713                        18            .byte	$18
11154 2714                        00            .byte	0
11155 2715                        00            .byte	0
11156 2716                        00            .byte	0
11157 2717                        00            .byte	0
11158 2718                        00            .byte	0
11159 2719                        00            .byte	0
11160                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11161 271A                        00            .byte	0
11162 271B                        00            .byte	0
11163 271C                        00            .byte	0
11164 271D                        00            .byte	0
11165 271E                        00            .byte	0
11166 271F                        30            .byte	$30
11167 2720                        60            .byte	$60
11168 2721                        FE            .byte	$FE
11169 2722                        60            .byte	$60
11170 2723                        30            .byte	$30
11171 2724                        00            .byte	0
11172 2725                        00            .byte	0
11173 2726                        00            .byte	0
11174 2727                        00            .byte	0
11175 2728                        00            .byte	0
11176 2729                        00            .byte	0
11177                                           ! 1437  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11178 272A                        00            .byte	0
11179 272B                        00            .byte	0
11180 272C                        00            .byte	0
11181 272D                        00            .byte	0
11182 272E                        00            .byte	0
11183 272F                        00            .byte	0
11184 2730                        C0            .byte	$C0
11185 2731                        C0            .byte	$C0
11186 2732                        C0            .byte	$C0
11187 2733                        FE            .byte	$FE
11188 2734                        00            .byte	0
11189 2735                        00            .byte	0
11190 2736                        00            .byte	0
11191 2737                        00            .byte	0
11192 2738                        00            .byte	0
11193 2739                        00            .byte	0
11194                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11195 273A                        00            .byte	0
11196 273B                        00            .byte	0
11197 273C                        00            .byte	0
11198 273D                        00            .byte	0
11199 273E                        00            .byte	0
11200 273F                        24            .byte	$24
11201 2740                        66            .byte	$66
11202 2741                        FF            .byte	$FF
11203 2742                        66            .byte	$66
11204 2743                        24            .byte	$24
11205 2744                        00            .byte	0
11206 2745                        00            .byte	0
11207 2746                        00            .byte	0
11208 2747                        00            .byte	0
11209 2748                        00            .byte	0
11210 2749                        00            .byte	0
11211                                           ! 1439  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11212 274A                        00            .byte	0
11213 274B                        00            .byte	0
11214 274C                        00            .byte	0
11215 274D                        00            .byte	0
11216 274E                        10            .byte	$10
11217 274F                        38            .byte	$38
11218 2750                        38            .byte	$38
11219 2751                        7C            .byte	$7C
11220 2752                        7C            .byte	$7C
11221 2753                        FE            .byte	$FE
11222 2754                        FE            .byte	$FE
11223 2755                        00            .byte	0
11224 2756                        00            .byte	0
11225 2757                        00            .byte	0
11226 2758                        00            .byte	0
11227 2759                        00            .byte	0
11228                                           ! 1440  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11229 275A                        00            .byte	0
11230 275B                        00            .byte	0
11231 275C                        00            .byte	0
11232 275D                        00            .byte	0
11233 275E                        FE            .byte	$FE
11234 275F                        FE            .byte	$FE
11235 2760                        7C            .byte	$7C
11236 2761                        7C            .byte	$7C
11237 2762                        38            .byte	$38
11238 2763                        38            .byte	$38
11239 2764                        10            .byte	$10
11240 2765                        00            .byte	0
11241 2766                        00            .byte	0
11242 2767                        00            .byte	0
11243 2768                        00            .byte	0
11244 2769                        00            .byte	0
11245                                           ! 1441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
11246 276A                        00            .byte	0
11247 276B                        00            .byte	0
11248 276C                        00            .byte	0
11249 276D                        00            .byte	0
11250 276E                        00            .byte	0
11251 276F                        00            .byte	0
11252 2770                        00            .byte	0
11253 2771                        00            .byte	0
11254 2772                        00            .byte	0
11255 2773                        00            .byte	0
11256                                           ! 1441 , 0x00, 0x00, 0x00, 0x00, 0x00,
11257 2774                        00            .byte	0
11258 2775                        00            .byte	0
11259 2776                        00            .byte	0
11260 2777                        00            .byte	0
11261 2778                        00            .byte	0
11262 2779                        00            .byte	0
11263                                           ! 1442  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11264 277A                        00            .byte	0
11265 277B                        00            .byte	0
11266 277C                        18            .byte	$18
11267 277D                        3C            .byte	$3C
11268 277E                        3C            .byte	$3C
11269 277F                        3C            .byte	$3C
11270 2780                        18            .byte	$18
11271 2781                        18            .byte	$18
11272 2782                        18            .byte	$18
11273 2783                        00            .byte	0
11274 2784                        18            .byte	$18
11275 2785                        18            .byte	$18
11276 2786                        00            .byte	0
11277 2787                        00            .byte	0
11278 2788                        00            .byte	0
11279 2789                        00            .byte	0
11280                                           ! 1443  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11281 278A                        00            .byte	0
11282 278B                        66            .byte	$66
11283 278C                        66            .byte	$66
11284 278D                        66            .byte	$66
11285 278E                        24            .byte	$24
11286 278F                        00            .byte	0
11287 2790                        00            .byte	0
11288 2791                        00            .byte	0
11289 2792                        00            .byte	0
11290 2793                        00            .byte	0
11291 2794                        00            .byte	0
11292 2795                        00            .byte	0
11293 2796                        00            .byte	0
11294 2797                        00            .byte	0
11295 2798                        00            .byte	0
11296 2799                        00            .byte	0
11297                                           ! 1444  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11298 279A                        00            .byte	0
11299 279B                        00            .byte	0
11300 279C                        00            .byte	0
11301 279D                        6C            .byte	$6C
11302 279E                        6C            .byte	$6C
11303 279F                        FE            .byte	$FE
11304 27A0                        6C            .byte	$6C
11305 27A1                        6C            .byte	$6C
11306 27A2                        6C            .byte	$6C
11307 27A3                        FE            .byte	$FE
11308 27A4                        6C            .byte	$6C
11309 27A5                        6C            .byte	$6C
11310 27A6                        00            .byte	0
11311 27A7                        00            .byte	0
11312 27A8                        00            .byte	0
11313 27A9                        00            .byte	0
11314                                           ! 1445  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11315 27AA                        18            .byte	$18
11316 27AB                        18            .byte	$18
11317 27AC                        7C            .byte	$7C
11318 27AD                        C6            .byte	$C6
11319 27AE                        C2            .byte	$C2
11320 27AF                        C0            .byte	$C0
11321 27B0                        7C            .byte	$7C
11322 27B1                        06            .byte	6
11323 27B2                        06            .byte	6
11324 27B3                        86            .byte	$86
11325 27B4                        C6            .byte	$C6
11326 27B5                        7C            .byte	$7C
11327 27B6                        18            .byte	$18
11328 27B7                        18            .byte	$18
11329 27B8                        00            .byte	0
11330 27B9                        00            .byte	0
11331                                           ! 1446  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11332 27BA                        00            .byte	0
11333 27BB                        00            .byte	0
11334 27BC                        00            .byte	0
11335 27BD                        00            .byte	0
11336 27BE                        C2            .byte	$C2
11337 27BF                        C6            .byte	$C6
11338 27C0                        0C            .byte	$C
11339 27C1                        18            .byte	$18
11340 27C2                        30            .byte	$30
11341 27C3                        60            .byte	$60
11342 27C4                        C6            .byte	$C6
11343 27C5                        86            .byte	$86
11344 27C6                        00            .byte	0
11345 27C7                        00            .byte	0
11346 27C8                        00            .byte	0
11347 27C9                        00            .byte	0
11348                                           ! 1447  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11349 27CA                        00            .byte	0
11350 27CB                        00            .byte	0
11351 27CC                        38            .byte	$38
11352 27CD                        6C            .byte	$6C
11353 27CE                        6C            .byte	$6C
11354 27CF                        38            .byte	$38
11355 27D0                        76            .byte	$76
11356 27D1                        DC            .byte	$DC
11357 27D2                        CC            .byte	$CC
11358 27D3                        CC            .byte	$CC
11359 27D4                        CC            .byte	$CC
11360 27D5                        76            .byte	$76
11361 27D6                        00            .byte	0
11362 27D7                        00            .byte	0
11363 27D8                        00            .byte	0
11364 27D9                        00            .byte	0
11365                                           ! 1448  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11366 27DA                        00            .byte	0
11367 27DB                        30            .byte	$30
11368 27DC                        30            .byte	$30
11369 27DD                        30            .byte	$30
11370 27DE                        60            .byte	$60
11371 27DF                        00            .byte	0
11372 27E0                        00            .byte	0
11373 27E1                        00            .byte	0
11374 27E2                        00            .byte	0
11375 27E3                        00            .byte	0
11376 27E4                        00            .byte	0
11377 27E5                        00            .byte	0
11378 27E6                        00            .byte	0
11379 27E7                        00            .byte	0
11380 27E8                        00            .byte	0
11381 27E9                        00            .byte	0
11382                                           ! 1449  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11383 27EA                        00            .byte	0
11384 27EB                        00            .byte	0
11385 27EC                        0C            .byte	$C
11386 27ED                        18            .byte	$18
11387 27EE                        30            .byte	$30
11388 27EF                        30            .byte	$30
11389 27F0                        30            .byte	$30
11390 27F1                        30            .byte	$30
11391 27F2                        30            .byte	$30
11392 27F3                        30            .byte	$30
11393 27F4                        18            .byte	$18
11394 27F5                        0C            .byte	$C
11395 27F6                        00            .byte	0
11396 27F7                        00            .byte	0
11397 27F8                        00            .byte	0
11398 27F9                        00            .byte	0
11399                                           ! 1450  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11400 27FA                        00            .byte	0
11401 27FB                        00            .byte	0
11402 27FC                        30            .byte	$30
11403 27FD                        18            .byte	$18
11404 27FE                        0C            .byte	$C
11405 27FF                        0C            .byte	$C
11406 2800                        0C            .byte	$C
11407 2801                        0C            .byte	$C
11408 2802                        0C            .byte	$C
11409 2803                        0C            .byte	$C
11410 2804                        18            .byte	$18
11411 2805                        30            .byte	$30
11412 2806                        00            .byte	0
11413 2807                        00            .byte	0
11414 2808                        00            .byte	0
11415 2809                        00            .byte	0
11416                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11417 280A                        00            .byte	0
11418 280B                        00            .byte	0
11419 280C                        00            .byte	0
11420 280D                        00            .byte	0
11421 280E                        00            .byte	0
11422 280F                        66            .byte	$66
11423 2810                        3C            .byte	$3C
11424 2811                        FF            .byte	$FF
11425 2812                        3C            .byte	$3C
11426 2813                        66            .byte	$66
11427 2814                        00            .byte	0
11428 2815                        00            .byte	0
11429 2816                        00            .byte	0
11430 2817                        00            .byte	0
11431 2818                        00            .byte	0
11432 2819                        00            .byte	0
11433                                           ! 1452  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11434 281A                        00            .byte	0
11435 281B                        00            .byte	0
11436 281C                        00            .byte	0
11437 281D                        00            .byte	0
11438 281E                        00            .byte	0
11439 281F                        18            .byte	$18
11440 2820                        18            .byte	$18
11441 2821                        7E            .byte	$7E
11442 2822                        18            .byte	$18
11443 2823                        18            .byte	$18
11444 2824                        00            .byte	0
11445 2825                        00            .byte	0
11446 2826                        00            .byte	0
11447 2827                        00            .byte	0
11448 2828                        00            .byte	0
11449 2829                        00            .byte	0
11450                                           ! 1453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11451 282A                        00            .byte	0
11452 282B                        00            .byte	0
11453 282C                        00            .byte	0
11454 282D                        00            .byte	0
11455 282E                        00            .byte	0
11456 282F                        00            .byte	0
11457 2830                        00            .byte	0
11458 2831                        00            .byte	0
11459 2832                        00            .byte	0
11460 2833                        18            .byte	$18
11461 2834                        18            .byte	$18
11462 2835                        18            .byte	$18
11463 2836                        30            .byte	$30
11464 2837                        00            .byte	0
11465 2838                        00            .byte	0
11466 2839                        00            .byte	0
11467                                           ! 1454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11468 283A                        00            .byte	0
11469 283B                        00            .byte	0
11470 283C                        00            .byte	0
11471 283D                        00            .byte	0
11472 283E                        00            .byte	0
11473 283F                        00            .byte	0
11474 2840                        00            .byte	0
11475 2841                        FE            .byte	$FE
11476 2842                        00            .byte	0
11477 2843                        00            .byte	0
11478 2844                        00            .byte	0
11479 2845                        00            .byte	0
11480 2846                        00            .byte	0
11481 2847                        00            .byte	0
11482 2848                        00            .byte	0
11483 2849                        00            .byte	0
11484                                           ! 1455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11485 284A                        00            .byte	0
11486 284B                        00            .byte	0
11487 284C                        00            .byte	0
11488 284D                        00            .byte	0
11489 284E                        00            .byte	0
11490 284F                        00            .byte	0
11491 2850                        00            .byte	0
11492 2851                        00            .byte	0
11493 2852                        00            .byte	0
11494 2853                        00            .byte	0
11495 2854                        18            .byte	$18
11496 2855                        18            .byte	$18
11497 2856                        00            .byte	0
11498 2857                        00            .byte	0
11499 2858                        00            .byte	0
11500 2859                        00            .byte	0
11501                                           ! 1456  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11502 285A                        00            .byte	0
11503 285B                        00            .byte	0
11504 285C                        00            .byte	0
11505 285D                        00            .byte	0
11506 285E                        02            .byte	2
11507 285F                        06            .byte	6
11508 2860                        0C            .byte	$C
11509 2861                        18            .byte	$18
11510 2862                        30            .byte	$30
11511 2863                        60            .byte	$60
11512 2864                        C0            .byte	$C0
11513 2865                        80            .byte	$80
11514 2866                        00            .byte	0
11515 2867                        00            .byte	0
11516 2868                        00            .byte	0
11517 2869                        00            .byte	0
11518                                           ! 1457  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11519 286A                        00            .byte	0
11520 286B                        00            .byte	0
11521 286C                        3C            .byte	$3C
11522 286D                        66            .byte	$66
11523 286E                        C3            .byte	$C3
11524 286F                        C3            .byte	$C3
11525 2870                        DB            .byte	$DB
11526 2871                        DB            .byte	$DB
11527 2872                        C3            .byte	$C3
11528 2873                        C3            .byte	$C3
11529 2874                        66            .byte	$66
11530 2875                        3C            .byte	$3C
11531 2876                        00            .byte	0
11532 2877                        00            .byte	0
11533 2878                        00            .byte	0
11534 2879                        00            .byte	0
11535                                           ! 1458  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11536 287A                        00            .byte	0
11537 287B                        00            .byte	0
11538 287C                        18            .byte	$18
11539 287D                        38            .byte	$38
11540 287E                        78            .byte	$78
11541 287F                        18            .byte	$18
11542 2880                        18            .byte	$18
11543 2881                        18            .byte	$18
11544 2882                        18            .byte	$18
11545 2883                        18            .byte	$18
11546 2884                        18            .byte	$18
11547 2885                        7E            .byte	$7E
11548 2886                        00            .byte	0
11549 2887                        00            .byte	0
11550 2888                        00            .byte	0
11551 2889                        00            .byte	0
11552                                           ! 1459  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11553 288A                        00            .byte	0
11554 288B                        00            .byte	0
11555 288C                        7C            .byte	$7C
11556 288D                        C6            .byte	$C6
11557 288E                        06            .byte	6
11558 288F                        0C            .byte	$C
11559 2890                        18            .byte	$18
11560 2891                        30            .byte	$30
11561 2892                        60            .byte	$60
11562 2893                        C0            .byte	$C0
11563 2894                        C6            .byte	$C6
11564 2895                        FE            .byte	$FE
11565 2896                        00            .byte	0
11566 2897                        00            .byte	0
11567 2898                        00            .byte	0
11568 2899                        00            .byte	0
11569                                           ! 1460  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11570 289A                        00            .byte	0
11571 289B                        00            .byte	0
11572 289C                        7C            .byte	$7C
11573 289D                        C6            .byte	$C6
11574 289E                        06            .byte	6
11575 289F                        06            .byte	6
11576 28A0                        3C            .byte	$3C
11577 28A1                        06            .byte	6
11578 28A2                        06            .byte	6
11579 28A3                        06            .byte	6
11580 28A4                        C6            .byte	$C6
11581 28A5                        7C            .byte	$7C
11582 28A6                        00            .byte	0
11583 28A7                        00            .byte	0
11584 28A8                        00            .byte	0
11585 28A9                        00            .byte	0
11586                                           ! 1461  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11587 28AA                        00            .byte	0
11588 28AB                        00            .byte	0
11589 28AC                        0C            .byte	$C
11590 28AD                        1C            .byte	$1C
11591 28AE                        3C            .byte	$3C
11592 28AF                        6C            .byte	$6C
11593 28B0                        CC            .byte	$CC
11594 28B1                        FE            .byte	$FE
11595 28B2                        0C            .byte	$C
11596 28B3                        0C            .byte	$C
11597 28B4                        0C            .byte	$C
11598 28B5                        1E            .byte	$1E
11599 28B6                        00            .byte	0
11600 28B7                        00            .byte	0
11601 28B8                        00            .byte	0
11602 28B9                        00            .byte	0
11603                                           ! 1462  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x0
11604 28BA                        00            .byte	0
11605 28BB                        00            .byte	0
11606 28BC                        FE            .byte	$FE
11607 28BD                        C0            .byte	$C0
11608 28BE                        C0            .byte	$C0
11609 28BF                        C0            .byte	$C0
11610 28C0                        FC            .byte	$FC
11611 28C1                        06            .byte	6
11612 28C2                        06            .byte	6
11613 28C3                        06            .byte	6
11614 28C4                        C6            .byte	$C6
11615 28C5                        7C            .byte	$7C
11616                                           ! 1462 0, 0x00, 0x00, 0x00,
11617 28C6                        00            .byte	0
11618 28C7                        00            .byte	0
11619 28C8                        00            .byte	0
11620 28C9                        00            .byte	0
11621                                           ! 1463  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11622 28CA                        00            .byte	0
11623 28CB                        00            .byte	0
11624 28CC                        38            .byte	$38
11625 28CD                        60            .byte	$60
11626 28CE                        C0            .byte	$C0
11627 28CF                        C0            .byte	$C0
11628 28D0                        FC            .byte	$FC
11629 28D1                        C6            .byte	$C6
11630 28D2                        C6            .byte	$C6
11631 28D3                        C6            .byte	$C6
11632 28D4                        C6            .byte	$C6
11633 28D5                        7C            .byte	$7C
11634 28D6                        00            .byte	0
11635 28D7                        00            .byte	0
11636 28D8                        00            .byte	0
11637 28D9                        00            .byte	0
11638                                           ! 1464  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11639 28DA                        00            .byte	0
11640 28DB                        00            .byte	0
11641 28DC                        FE            .byte	$FE
11642 28DD                        C6            .byte	$C6
11643 28DE                        06            .byte	6
11644 28DF                        06            .byte	6
11645 28E0                        0C            .byte	$C
11646 28E1                        18            .byte	$18
11647 28E2                        30            .byte	$30
11648 28E3                        30            .byte	$30
11649 28E4                        30            .byte	$30
11650 28E5                        30            .byte	$30
11651 28E6                        00            .byte	0
11652 28E7                        00            .byte	0
11653 28E8                        00            .byte	0
11654 28E9                        00            .byte	0
11655                                           ! 1465  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11656 28EA                        00            .byte	0
11657 28EB                        00            .byte	0
11658 28EC                        7C            .byte	$7C
11659 28ED                        C6            .byte	$C6
11660 28EE                        C6            .byte	$C6
11661 28EF                        C6            .byte	$C6
11662 28F0                        7C            .byte	$7C
11663 28F1                        C6            .byte	$C6
11664 28F2                        C6            .byte	$C6
11665 28F3                        C6            .byte	$C6
11666 28F4                        C6            .byte	$C6
11667 28F5                        7C            .byte	$7C
11668 28F6                        00            .byte	0
11669 28F7                        00            .byte	0
11670 28F8                        00            .byte	0
11671 28F9                        00            .byte	0
11672                                           ! 1466  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11673 28FA                        00            .byte	0
11674 28FB                        00            .byte	0
11675 28FC                        7C            .byte	$7C
11676 28FD                        C6            .byte	$C6
11677 28FE                        C6            .byte	$C6
11678 28FF                        C6            .byte	$C6
11679 2900                        7E            .byte	$7E
11680 2901                        06            .byte	6
11681 2902                        06            .byte	6
11682 2903                        06            .byte	6
11683 2904                        0C            .byte	$C
11684 2905                        78            .byte	$78
11685 2906                        00            .byte	0
11686 2907                        00            .byte	0
11687 2908                        00            .byte	0
11688 2909                        00            .byte	0
11689                                           ! 1467  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11690 290A                        00            .byte	0
11691 290B                        00            .byte	0
11692 290C                        00            .byte	0
11693 290D                        00            .byte	0
11694 290E                        18            .byte	$18
11695 290F                        18            .byte	$18
11696 2910                        00            .byte	0
11697 2911                        00            .byte	0
11698 2912                        00            .byte	0
11699 2913                        18            .byte	$18
11700 2914                        18            .byte	$18
11701 2915                        00            .byte	0
11702 2916                        00            .byte	0
11703 2917                        00            .byte	0
11704 2918                        00            .byte	0
11705 2919                        00            .byte	0
11706                                           ! 1468  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11707 291A                        00            .byte	0
11708 291B                        00            .byte	0
11709 291C                        00            .byte	0
11710 291D                        00            .byte	0
11711 291E                        18            .byte	$18
11712 291F                        18            .byte	$18
11713 2920                        00            .byte	0
11714 2921                        00            .byte	0
11715 2922                        00            .byte	0
11716 2923                        18            .byte	$18
11717 2924                        18            .byte	$18
11718 2925                        30            .byte	$30
11719 2926                        00            .byte	0
11720 2927                        00            .byte	0
11721 2928                        00            .byte	0
11722 2929                        00            .byte	0
11723                                           ! 1469  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11724 292A                        00            .byte	0
11725 292B                        00            .byte	0
11726 292C                        00            .byte	0
11727 292D                        06            .byte	6
11728 292E                        0C            .byte	$C
11729 292F                        18            .byte	$18
11730 2930                        30            .byte	$30
11731 2931                        60            .byte	$60
11732 2932                        30            .byte	$30
11733 2933                        18            .byte	$18
11734 2934                        0C            .byte	$C
11735 2935                        06            .byte	6
11736 2936                        00            .byte	0
11737 2937                        00            .byte	0
11738 2938                        00            .byte	0
11739 2939                        00            .byte	0
11740                                           ! 1470  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11741 293A                        00            .byte	0
11742 293B                        00            .byte	0
11743 293C                        00            .byte	0
11744 293D                        00            .byte	0
11745 293E                        00            .byte	0
11746 293F                        7E            .byte	$7E
11747 2940                        00            .byte	0
11748 2941                        00            .byte	0
11749 2942                        7E            .byte	$7E
11750 2943                        00            .byte	0
11751 2944                        00            .byte	0
11752 2945                        00            .byte	0
11753 2946                        00            .byte	0
11754 2947                        00            .byte	0
11755 2948                        00            .byte	0
11756 2949                        00            .byte	0
11757                                           ! 1471  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11758 294A                        00            .byte	0
11759 294B                        00            .byte	0
11760 294C                        00            .byte	0
11761 294D                        60            .byte	$60
11762 294E                        30            .byte	$30
11763 294F                        18            .byte	$18
11764 2950                        0C            .byte	$C
11765 2951                        06            .byte	6
11766 2952                        0C            .byte	$C
11767 2953                        18            .byte	$18
11768 2954                        30            .byte	$30
11769 2955                        60            .byte	$60
11770 2956                        00            .byte	0
11771 2957                        00            .byte	0
11772 2958                        00            .byte	0
11773 2959                        00            .byte	0
11774                                           ! 1472  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11775 295A                        00            .byte	0
11776 295B                        00            .byte	0
11777 295C                        7C            .byte	$7C
11778 295D                        C6            .byte	$C6
11779 295E                        C6            .byte	$C6
11780 295F                        0C            .byte	$C
11781 2960                        18            .byte	$18
11782 2961                        18            .byte	$18
11783 2962                        18            .byte	$18
11784 2963                        00            .byte	0
11785 2964                        18            .byte	$18
11786 2965                        18            .byte	$18
11787 2966                        00            .byte	0
11788 2967                        00            .byte	0
11789 2968                        00            .byte	0
11790 2969                        00            .byte	0
11791                                           ! 1473  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11792 296A                        00            .byte	0
11793 296B                        00            .byte	0
11794 296C                        00            .byte	0
11795 296D                        7C            .byte	$7C
11796 296E                        C6            .byte	$C6
11797 296F                        C6            .byte	$C6
11798 2970                        DE            .byte	$DE
11799 2971                        DE            .byte	$DE
11800 2972                        DE            .byte	$DE
11801 2973                        DC            .byte	$DC
11802 2974                        C0            .byte	$C0
11803 2975                        7C            .byte	$7C
11804 2976                        00            .byte	0
11805 2977                        00            .byte	0
11806 2978                        00            .byte	0
11807 2979                        00            .byte	0
11808                                           ! 1474  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11809 297A                        00            .byte	0
11810 297B                        00            .byte	0
11811 297C                        10            .byte	$10
11812 297D                        38            .byte	$38
11813 297E                        6C            .byte	$6C
11814 297F                        C6            .byte	$C6
11815 2980                        C6            .byte	$C6
11816 2981                        FE            .byte	$FE
11817 2982                        C6            .byte	$C6
11818 2983                        C6            .byte	$C6
11819 2984                        C6            .byte	$C6
11820 2985                        C6            .byte	$C6
11821 2986                        00            .byte	0
11822 2987                        00            .byte	0
11823 2988                        00            .byte	0
11824 2989                        00            .byte	0
11825                                           ! 1475  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11826 298A                        00            .byte	0
11827 298B                        00            .byte	0
11828 298C                        FC            .byte	$FC
11829 298D                        66            .byte	$66
11830 298E                        66            .byte	$66
11831 298F                        66            .byte	$66
11832 2990                        7C            .byte	$7C
11833 2991                        66            .byte	$66
11834 2992                        66            .byte	$66
11835 2993                        66            .byte	$66
11836 2994                        66            .byte	$66
11837 2995                        FC            .byte	$FC
11838 2996                        00            .byte	0
11839 2997                        00            .byte	0
11840 2998                        00            .byte	0
11841 2999                        00            .byte	0
11842                                           ! 1476  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11843 299A                        00            .byte	0
11844 299B                        00            .byte	0
11845 299C                        3C            .byte	$3C
11846 299D                        66            .byte	$66
11847 299E                        C2            .byte	$C2
11848 299F                        C0            .byte	$C0
11849 29A0                        C0            .byte	$C0
11850 29A1                        C0            .byte	$C0
11851 29A2                        C0            .byte	$C0
11852 29A3                        C2            .byte	$C2
11853 29A4                        66            .byte	$66
11854 29A5                        3C            .byte	$3C
11855 29A6                        00            .byte	0
11856 29A7                        00            .byte	0
11857 29A8                        00            .byte	0
11858 29A9                        00            .byte	0
11859                                           ! 1477  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11860 29AA                        00            .byte	0
11861 29AB                        00            .byte	0
11862 29AC                        F8            .byte	$F8
11863 29AD                        6C            .byte	$6C
11864 29AE                        66            .byte	$66
11865 29AF                        66            .byte	$66
11866 29B0                        66            .byte	$66
11867 29B1                        66            .byte	$66
11868 29B2                        66            .byte	$66
11869 29B3                        66            .byte	$66
11870 29B4                        6C            .byte	$6C
11871 29B5                        F8            .byte	$F8
11872 29B6                        00            .byte	0
11873 29B7                        00            .byte	0
11874 29B8                        00            .byte	0
11875 29B9                        00            .byte	0
11876                                           ! 1478  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11877 29BA                        00            .byte	0
11878 29BB                        00            .byte	0
11879 29BC                        FE            .byte	$FE
11880 29BD                        66            .byte	$66
11881 29BE                        62            .byte	$62
11882 29BF                        68            .byte	$68
11883 29C0                        78            .byte	$78
11884 29C1                        68            .byte	$68
11885 29C2                        60            .byte	$60
11886 29C3                        62            .byte	$62
11887 29C4                        66            .byte	$66
11888 29C5                        FE            .byte	$FE
11889 29C6                        00            .byte	0
11890 29C7                        00            .byte	0
11891 29C8                        00            .byte	0
11892 29C9                        00            .byte	0
11893                                           ! 1479  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11894 29CA                        00            .byte	0
11895 29CB                        00            .byte	0
11896 29CC                        FE            .byte	$FE
11897 29CD                        66            .byte	$66
11898 29CE                        62            .byte	$62
11899 29CF                        68            .byte	$68
11900 29D0                        78            .byte	$78
11901 29D1                        68            .byte	$68
11902 29D2                        60            .byte	$60
11903 29D3                        60            .byte	$60
11904 29D4                        60            .byte	$60
11905 29D5                        F0            .byte	$F0
11906 29D6                        00            .byte	0
11907 29D7                        00            .byte	0
11908 29D8                        00            .byte	0
11909 29D9                        00            .byte	0
11910                                           ! 1480  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11911 29DA                        00            .byte	0
11912 29DB                        00            .byte	0
11913 29DC                        3C            .byte	$3C
11914 29DD                        66            .byte	$66
11915 29DE                        C2            .byte	$C2
11916 29DF                        C0            .byte	$C0
11917 29E0                        C0            .byte	$C0
11918 29E1                        DE            .byte	$DE
11919 29E2                        C6            .byte	$C6
11920 29E3                        C6            .byte	$C6
11921 29E4                        66            .byte	$66
11922 29E5                        3A            .byte	$3A
11923 29E6                        00            .byte	0
11924 29E7                        00            .byte	0
11925 29E8                        00            .byte	0
11926 29E9                        00            .byte	0
11927                                           ! 1481  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11928 29EA                        00            .byte	0
11929 29EB                        00            .byte	0
11930 29EC                        C6            .byte	$C6
11931 29ED                        C6            .byte	$C6
11932 29EE                        C6            .byte	$C6
11933 29EF                        C6            .byte	$C6
11934 29F0                        FE            .byte	$FE
11935 29F1                        C6            .byte	$C6
11936 29F2                        C6            .byte	$C6
11937 29F3                        C6            .byte	$C6
11938 29F4                        C6            .byte	$C6
11939 29F5                        C6            .byte	$C6
11940 29F6                        00            .byte	0
11941 29F7                        00            .byte	0
11942 29F8                        00            .byte	0
11943 29F9                        00            .byte	0
11944                                           ! 1482  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11945 29FA                        00            .byte	0
11946 29FB                        00            .byte	0
11947 29FC                        3C            .byte	$3C
11948 29FD                        18            .byte	$18
11949 29FE                        18            .byte	$18
11950 29FF                        18            .byte	$18
11951 2A00                        18            .byte	$18
11952 2A01                        18            .byte	$18
11953 2A02                        18            .byte	$18
11954 2A03                        18            .byte	$18
11955 2A04                        18            .byte	$18
11956 2A05                        3C            .byte	$3C
11957 2A06                        00            .byte	0
11958 2A07                        00            .byte	0
11959 2A08                        00            .byte	0
11960 2A09                        00            .byte	0
11961                                           ! 1483  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x
11962 2A0A                        00            .byte	0
11963 2A0B                        00            .byte	0
11964 2A0C                        1E            .byte	$1E
11965 2A0D                        0C            .byte	$C
11966 2A0E                        0C            .byte	$C
11967 2A0F                        0C            .byte	$C
11968 2A10                        0C            .byte	$C
11969 2A11                        0C            .byte	$C
11970 2A12                        CC            .byte	$CC
11971 2A13                        CC            .byte	$CC
11972 2A14                        CC            .byte	$CC
11973 2A15                        78            .byte	$78
11974 2A16                        00            .byte	0
11975 2A17                        00            .byte	0
11976                                           ! 1483 00, 0x00,
11977 2A18                        00            .byte	0
11978 2A19                        00            .byte	0
11979                                           ! 1484  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11980 2A1A                        00            .byte	0
11981 2A1B                        00            .byte	0
11982 2A1C                        E6            .byte	$E6
11983 2A1D                        66            .byte	$66
11984 2A1E                        66            .byte	$66
11985 2A1F                        6C            .byte	$6C
11986 2A20                        78            .byte	$78
11987 2A21                        78            .byte	$78
11988 2A22                        6C            .byte	$6C
11989 2A23                        66            .byte	$66
11990 2A24                        66            .byte	$66
11991 2A25                        E6            .byte	$E6
11992 2A26                        00            .byte	0
11993 2A27                        00            .byte	0
11994 2A28                        00            .byte	0
11995 2A29                        00            .byte	0
11996                                           ! 1485  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11997 2A2A                        00            .byte	0
11998 2A2B                        00            .byte	0
11999 2A2C                        F0            .byte	$F0
12000 2A2D                        60            .byte	$60
12001 2A2E                        60            .byte	$60
12002 2A2F                        60            .byte	$60
12003 2A30                        60            .byte	$60
12004 2A31                        60            .byte	$60
12005 2A32                        60            .byte	$60
12006 2A33                        62            .byte	$62
12007 2A34                        66            .byte	$66
12008 2A35                        FE            .byte	$FE
12009 2A36                        00            .byte	0
12010 2A37                        00            .byte	0
12011 2A38                        00            .byte	0
12012 2A39                        00            .byte	0
12013                                           ! 1486  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12014 2A3A                        00            .byte	0
12015 2A3B                        00            .byte	0
12016 2A3C                        C3            .byte	$C3
12017 2A3D                        E7            .byte	$E7
12018 2A3E                        FF            .byte	$FF
12019 2A3F                        FF            .byte	$FF
12020 2A40                        DB            .byte	$DB
12021 2A41                        C3            .byte	$C3
12022 2A42                        C3            .byte	$C3
12023 2A43                        C3            .byte	$C3
12024 2A44                        C3            .byte	$C3
12025 2A45                        C3            .byte	$C3
12026 2A46                        00            .byte	0
12027 2A47                        00            .byte	0
12028 2A48                        00            .byte	0
12029 2A49                        00            .byte	0
12030                                           ! 1487  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12031 2A4A                        00            .byte	0
12032 2A4B                        00            .byte	0
12033 2A4C                        C6            .byte	$C6
12034 2A4D                        E6            .byte	$E6
12035 2A4E                        F6            .byte	$F6
12036 2A4F                        FE            .byte	$FE
12037 2A50                        DE            .byte	$DE
12038 2A51                        CE            .byte	$CE
12039 2A52                        C6            .byte	$C6
12040 2A53                        C6            .byte	$C6
12041 2A54                        C6            .byte	$C6
12042 2A55                        C6            .byte	$C6
12043 2A56                        00            .byte	0
12044 2A57                        00            .byte	0
12045 2A58                        00            .byte	0
12046 2A59                        00            .byte	0
12047                                           ! 1488  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12048 2A5A                        00            .byte	0
12049 2A5B                        00            .byte	0
12050 2A5C                        7C            .byte	$7C
12051 2A5D                        C6            .byte	$C6
12052 2A5E                        C6            .byte	$C6
12053 2A5F                        C6            .byte	$C6
12054 2A60                        C6            .byte	$C6
12055 2A61                        C6            .byte	$C6
12056 2A62                        C6            .byte	$C6
12057 2A63                        C6            .byte	$C6
12058 2A64                        C6            .byte	$C6
12059 2A65                        7C            .byte	$7C
12060 2A66                        00            .byte	0
12061 2A67                        00            .byte	0
12062 2A68                        00            .byte	0
12063 2A69                        00            .byte	0
12064                                           ! 1489  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12065 2A6A                        00            .byte	0
12066 2A6B                        00            .byte	0
12067 2A6C                        FC            .byte	$FC
12068 2A6D                        66            .byte	$66
12069 2A6E                        66            .byte	$66
12070 2A6F                        66            .byte	$66
12071 2A70                        7C            .byte	$7C
12072 2A71                        60            .byte	$60
12073 2A72                        60            .byte	$60
12074 2A73                        60            .byte	$60
12075 2A74                        60            .byte	$60
12076 2A75                        F0            .byte	$F0
12077 2A76                        00            .byte	0
12078 2A77                        00            .byte	0
12079 2A78                        00            .byte	0
12080 2A79                        00            .byte	0
12081                                           ! 1490  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12082 2A7A                        00            .byte	0
12083 2A7B                        00            .byte	0
12084 2A7C                        7C            .byte	$7C
12085 2A7D                        C6            .byte	$C6
12086 2A7E                        C6            .byte	$C6
12087 2A7F                        C6            .byte	$C6
12088 2A80                        C6            .byte	$C6
12089 2A81                        C6            .byte	$C6
12090 2A82                        C6            .byte	$C6
12091 2A83                        D6            .byte	$D6
12092 2A84                        DE            .byte	$DE
12093 2A85                        7C            .byte	$7C
12094 2A86                        0C            .byte	$C
12095 2A87                        0E            .byte	$E
12096 2A88                        00            .byte	0
12097 2A89                        00            .byte	0
12098                                           ! 1491  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12099 2A8A                        00            .byte	0
12100 2A8B                        00            .byte	0
12101 2A8C                        FC            .byte	$FC
12102 2A8D                        66            .byte	$66
12103 2A8E                        66            .byte	$66
12104 2A8F                        66            .byte	$66
12105 2A90                        7C            .byte	$7C
12106 2A91                        6C            .byte	$6C
12107 2A92                        66            .byte	$66
12108 2A93                        66            .byte	$66
12109 2A94                        66            .byte	$66
12110 2A95                        E6            .byte	$E6
12111 2A96                        00            .byte	0
12112 2A97                        00            .byte	0
12113 2A98                        00            .byte	0
12114 2A99                        00            .byte	0
12115                                           ! 1492  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12116 2A9A                        00            .byte	0
12117 2A9B                        00            .byte	0
12118 2A9C                        7C            .byte	$7C
12119 2A9D                        C6            .byte	$C6
12120 2A9E                        C6            .byte	$C6
12121 2A9F                        60            .byte	$60
12122 2AA0                        38            .byte	$38
12123 2AA1                        0C            .byte	$C
12124 2AA2                        06            .byte	6
12125 2AA3                        C6            .byte	$C6
12126 2AA4                        C6            .byte	$C6
12127 2AA5                        7C            .byte	$7C
12128 2AA6                        00            .byte	0
12129 2AA7                        00            .byte	0
12130 2AA8                        00            .byte	0
12131 2AA9                        00            .byte	0
12132                                           ! 1493  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12133 2AAA                        00            .byte	0
12134 2AAB                        00            .byte	0
12135 2AAC                        FF            .byte	$FF
12136 2AAD                        DB            .byte	$DB
12137 2AAE                        99            .byte	$99
12138 2AAF                        18            .byte	$18
12139 2AB0                        18            .byte	$18
12140 2AB1                        18            .byte	$18
12141 2AB2                        18            .byte	$18
12142 2AB3                        18            .byte	$18
12143 2AB4                        18            .byte	$18
12144 2AB5                        3C            .byte	$3C
12145 2AB6                        00            .byte	0
12146 2AB7                        00            .byte	0
12147 2AB8                        00            .byte	0
12148 2AB9                        00            .byte	0
12149                                           ! 1494  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12150 2ABA                        00            .byte	0
12151 2ABB                        00            .byte	0
12152 2ABC                        C6            .byte	$C6
12153 2ABD                        C6            .byte	$C6
12154 2ABE                        C6            .byte	$C6
12155 2ABF                        C6            .byte	$C6
12156 2AC0                        C6            .byte	$C6
12157 2AC1                        C6            .byte	$C6
12158 2AC2                        C6            .byte	$C6
12159 2AC3                        C6            .byte	$C6
12160 2AC4                        C6            .byte	$C6
12161 2AC5                        7C            .byte	$7C
12162 2AC6                        00            .byte	0
12163 2AC7                        00            .byte	0
12164 2AC8                        00            .byte	0
12165 2AC9                        00            .byte	0
12166                                           ! 1495  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12167 2ACA                        00            .byte	0
12168 2ACB                        00            .byte	0
12169 2ACC                        C3            .byte	$C3
12170 2ACD                        C3            .byte	$C3
12171 2ACE                        C3            .byte	$C3
12172 2ACF                        C3            .byte	$C3
12173 2AD0                        C3            .byte	$C3
12174 2AD1                        C3            .byte	$C3
12175 2AD2                        C3            .byte	$C3
12176 2AD3                        66            .byte	$66
12177 2AD4                        3C            .byte	$3C
12178 2AD5                        18            .byte	$18
12179 2AD6                        00            .byte	0
12180 2AD7                        00            .byte	0
12181 2AD8                        00            .byte	0
12182 2AD9                        00            .byte	0
12183                                           ! 1496  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12184 2ADA                        00            .byte	0
12185 2ADB                        00            .byte	0
12186 2ADC                        C3            .byte	$C3
12187 2ADD                        C3            .byte	$C3
12188 2ADE                        C3            .byte	$C3
12189 2ADF                        C3            .byte	$C3
12190 2AE0                        C3            .byte	$C3
12191 2AE1                        DB            .byte	$DB
12192 2AE2                        DB            .byte	$DB
12193 2AE3                        FF            .byte	$FF
12194 2AE4                        66            .byte	$66
12195 2AE5                        66            .byte	$66
12196 2AE6                        00            .byte	0
12197 2AE7                        00            .byte	0
12198 2AE8                        00            .byte	0
12199 2AE9                        00            .byte	0
12200                                           ! 1497  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12201 2AEA                        00            .byte	0
12202 2AEB                        00            .byte	0
12203 2AEC                        C3            .byte	$C3
12204 2AED                        C3            .byte	$C3
12205 2AEE                        66            .byte	$66
12206 2AEF                        3C            .byte	$3C
12207 2AF0                        18            .byte	$18
12208 2AF1                        18            .byte	$18
12209 2AF2                        3C            .byte	$3C
12210 2AF3                        66            .byte	$66
12211 2AF4                        C3            .byte	$C3
12212 2AF5                        C3            .byte	$C3
12213 2AF6                        00            .byte	0
12214 2AF7                        00            .byte	0
12215 2AF8                        00            .byte	0
12216 2AF9                        00            .byte	0
12217                                           ! 1498  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12218 2AFA                        00            .byte	0
12219 2AFB                        00            .byte	0
12220 2AFC                        C3            .byte	$C3
12221 2AFD                        C3            .byte	$C3
12222 2AFE                        C3            .byte	$C3
12223 2AFF                        66            .byte	$66
12224 2B00                        3C            .byte	$3C
12225 2B01                        18            .byte	$18
12226 2B02                        18            .byte	$18
12227 2B03                        18            .byte	$18
12228 2B04                        18            .byte	$18
12229 2B05                        3C            .byte	$3C
12230 2B06                        00            .byte	0
12231 2B07                        00            .byte	0
12232 2B08                        00            .byte	0
12233 2B09                        00            .byte	0
12234                                           ! 1499  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12235 2B0A                        00            .byte	0
12236 2B0B                        00            .byte	0
12237 2B0C                        FF            .byte	$FF
12238 2B0D                        C3            .byte	$C3
12239 2B0E                        86            .byte	$86
12240 2B0F                        0C            .byte	$C
12241 2B10                        18            .byte	$18
12242 2B11                        30            .byte	$30
12243 2B12                        60            .byte	$60
12244 2B13                        C1            .byte	$C1
12245 2B14                        C3            .byte	$C3
12246 2B15                        FF            .byte	$FF
12247 2B16                        00            .byte	0
12248 2B17                        00            .byte	0
12249 2B18                        00            .byte	0
12250 2B19                        00            .byte	0
12251                                           ! 1500  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12252 2B1A                        00            .byte	0
12253 2B1B                        00            .byte	0
12254 2B1C                        3C            .byte	$3C
12255 2B1D                        30            .byte	$30
12256 2B1E                        30            .byte	$30
12257 2B1F                        30            .byte	$30
12258 2B20                        30            .byte	$30
12259 2B21                        30            .byte	$30
12260 2B22                        30            .byte	$30
12261 2B23                        30            .byte	$30
12262 2B24                        30            .byte	$30
12263 2B25                        3C            .byte	$3C
12264 2B26                        00            .byte	0
12265 2B27                        00            .byte	0
12266 2B28                        00            .byte	0
12267 2B29                        00            .byte	0
12268                                           ! 1501  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12269 2B2A                        00            .byte	0
12270 2B2B                        00            .byte	0
12271 2B2C                        00            .byte	0
12272 2B2D                        80            .byte	$80
12273 2B2E                        C0            .byte	$C0
12274 2B2F                        E0            .byte	$E0
12275 2B30                        70            .byte	$70
12276 2B31                        38            .byte	$38
12277 2B32                        1C            .byte	$1C
12278 2B33                        0E            .byte	$E
12279 2B34                        06            .byte	6
12280 2B35                        02            .byte	2
12281 2B36                        00            .byte	0
12282 2B37                        00            .byte	0
12283 2B38                        00            .byte	0
12284 2B39                        00            .byte	0
12285                                           ! 1502  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12286 2B3A                        00            .byte	0
12287 2B3B                        00            .byte	0
12288 2B3C                        3C            .byte	$3C
12289 2B3D                        0C            .byte	$C
12290 2B3E                        0C            .byte	$C
12291 2B3F                        0C            .byte	$C
12292 2B40                        0C            .byte	$C
12293 2B41                        0C            .byte	$C
12294 2B42                        0C            .byte	$C
12295 2B43                        0C            .byte	$C
12296 2B44                        0C            .byte	$C
12297 2B45                        3C            .byte	$3C
12298 2B46                        00            .byte	0
12299 2B47                        00            .byte	0
12300 2B48                        00            .byte	0
12301 2B49                        00            .byte	0
12302                                           ! 1503  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12303 2B4A                        10            .byte	$10
12304 2B4B                        38            .byte	$38
12305 2B4C                        6C            .byte	$6C
12306 2B4D                        C6            .byte	$C6
12307 2B4E                        00            .byte	0
12308 2B4F                        00            .byte	0
12309 2B50                        00            .byte	0
12310 2B51                        00            .byte	0
12311 2B52                        00            .byte	0
12312 2B53                        00            .byte	0
12313 2B54                        00            .byte	0
12314 2B55                        00            .byte	0
12315 2B56                        00            .byte	0
12316 2B57                        00            .byte	0
12317 2B58                        00            .byte	0
12318 2B59                        00            .byte	0
12319                                           ! 1504  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12320 2B5A                        00            .byte	0
12321 2B5B                        00            .byte	0
12322 2B5C                        00            .byte	0
12323 2B5D                        00            .byte	0
12324 2B5E                        00            .byte	0
12325 2B5F                        00            .byte	0
12326 2B60                        00            .byte	0
12327 2B61                        00            .byte	0
12328 2B62                        00            .byte	0
12329 2B63                        00            .byte	0
12330 2B64                        00            .byte	0
12331 2B65                        00            .byte	0
12332 2B66                        00            .byte	0
12333 2B67                        FF            .byte	$FF
12334 2B68                        00            .byte	0
12335 2B69                        00            .byte	0
12336                                           ! 1505  
12337                                           ! 1505 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12338 2B6A                        30            .byte	$30
12339 2B6B                        30            .byte	$30
12340 2B6C                        18            .byte	$18
12341 2B6D                        00            .byte	0
12342 2B6E                        00            .byte	0
12343 2B6F                        00            .byte	0
12344 2B70                        00            .byte	0
12345 2B71                        00            .byte	0
12346 2B72                        00            .byte	0
12347 2B73                        00            .byte	0
12348 2B74                        00            .byte	0
12349 2B75                        00            .byte	0
12350 2B76                        00            .byte	0
12351 2B77                        00            .byte	0
12352 2B78                        00            .byte	0
12353 2B79                        00            .byte	0
12354                                           ! 1506  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12355 2B7A                        00            .byte	0
12356 2B7B                        00            .byte	0
12357 2B7C                        00            .byte	0
12358 2B7D                        00            .byte	0
12359 2B7E                        00            .byte	0
12360 2B7F                        78            .byte	$78
12361 2B80                        0C            .byte	$C
12362 2B81                        7C            .byte	$7C
12363 2B82                        CC            .byte	$CC
12364 2B83                        CC            .byte	$CC
12365 2B84                        CC            .byte	$CC
12366 2B85                        76            .byte	$76
12367 2B86                        00            .byte	0
12368 2B87                        00            .byte	0
12369 2B88                        00            .byte	0
12370 2B89                        00            .byte	0
12371                                           ! 1507  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12372 2B8A                        00            .byte	0
12373 2B8B                        00            .byte	0
12374 2B8C                        E0            .byte	$E0
12375 2B8D                        60            .byte	$60
12376 2B8E                        60            .byte	$60
12377 2B8F                        78            .byte	$78
12378 2B90                        6C            .byte	$6C
12379 2B91                        66            .byte	$66
12380 2B92                        66            .byte	$66
12381 2B93                        66            .byte	$66
12382 2B94                        66            .byte	$66
12383 2B95                        7C            .byte	$7C
12384 2B96                        00            .byte	0
12385 2B97                        00            .byte	0
12386 2B98                        00            .byte	0
12387 2B99                        00            .byte	0
12388                                           ! 1508  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12389 2B9A                        00            .byte	0
12390 2B9B                        00            .byte	0
12391 2B9C                        00            .byte	0
12392 2B9D                        00            .byte	0
12393 2B9E                        00            .byte	0
12394 2B9F                        7C            .byte	$7C
12395 2BA0                        C6            .byte	$C6
12396 2BA1                        C0            .byte	$C0
12397 2BA2                        C0            .byte	$C0
12398 2BA3                        C0            .byte	$C0
12399 2BA4                        C6            .byte	$C6
12400 2BA5                        7C            .byte	$7C
12401 2BA6                        00            .byte	0
12402 2BA7                        00            .byte	0
12403 2BA8                        00            .byte	0
12404 2BA9                        00            .byte	0
12405                                           ! 1509  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12406 2BAA                        00            .byte	0
12407 2BAB                        00            .byte	0
12408 2BAC                        1C            .byte	$1C
12409 2BAD                        0C            .byte	$C
12410 2BAE                        0C            .byte	$C
12411 2BAF                        3C            .byte	$3C
12412 2BB0                        6C            .byte	$6C
12413 2BB1                        CC            .byte	$CC
12414 2BB2                        CC            .byte	$CC
12415 2BB3                        CC            .byte	$CC
12416 2BB4                        CC            .byte	$CC
12417 2BB5                        76            .byte	$76
12418 2BB6                        00            .byte	0
12419 2BB7                        00            .byte	0
12420 2BB8                        00            .byte	0
12421 2BB9                        00            .byte	0
12422                                           ! 1510  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12423 2BBA                        00            .byte	0
12424 2BBB                        00            .byte	0
12425 2BBC                        00            .byte	0
12426 2BBD                        00            .byte	0
12427 2BBE                        00            .byte	0
12428 2BBF                        7C            .byte	$7C
12429 2BC0                        C6            .byte	$C6
12430 2BC1                        FE            .byte	$FE
12431 2BC2                        C0            .byte	$C0
12432 2BC3                        C0            .byte	$C0
12433 2BC4                        C6            .byte	$C6
12434 2BC5                        7C            .byte	$7C
12435 2BC6                        00            .byte	0
12436 2BC7                        00            .byte	0
12437 2BC8                        00            .byte	0
12438 2BC9                        00            .byte	0
12439                                           ! 1511  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12440 2BCA                        00            .byte	0
12441 2BCB                        00            .byte	0
12442 2BCC                        38            .byte	$38
12443 2BCD                        6C            .byte	$6C
12444 2BCE                        64            .byte	$64
12445 2BCF                        60            .byte	$60
12446 2BD0                        F0            .byte	$F0
12447 2BD1                        60            .byte	$60
12448 2BD2                        60            .byte	$60
12449 2BD3                        60            .byte	$60
12450 2BD4                        60            .byte	$60
12451 2BD5                        F0            .byte	$F0
12452 2BD6                        00            .byte	0
12453 2BD7                        00            .byte	0
12454 2BD8                        00            .byte	0
12455 2BD9                        00            .byte	0
12456                                           ! 1512  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12457 2BDA                        00            .byte	0
12458 2BDB                        00            .byte	0
12459 2BDC                        00            .byte	0
12460 2BDD                        00            .byte	0
12461 2BDE                        00            .byte	0
12462 2BDF                        76            .byte	$76
12463 2BE0                        CC            .byte	$CC
12464 2BE1                        CC            .byte	$CC
12465 2BE2                        CC            .byte	$CC
12466 2BE3                        CC            .byte	$CC
12467 2BE4                        CC            .byte	$CC
12468 2BE5                        7C            .byte	$7C
12469 2BE6                        0C            .byte	$C
12470 2BE7                        CC            .byte	$CC
12471 2BE8                        78            .byte	$78
12472 2BE9                        00            .byte	0
12473                                           ! 1513  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12474 2BEA                        00            .byte	0
12475 2BEB                        00            .byte	0
12476 2BEC                        E0            .byte	$E0
12477 2BED                        60            .byte	$60
12478 2BEE                        60            .byte	$60
12479 2BEF                        6C            .byte	$6C
12480 2BF0                        76            .byte	$76
12481 2BF1                        66            .byte	$66
12482 2BF2                        66            .byte	$66
12483 2BF3                        66            .byte	$66
12484 2BF4                        66            .byte	$66
12485 2BF5                        E6            .byte	$E6
12486 2BF6                        00            .byte	0
12487 2BF7                        00            .byte	0
12488 2BF8                        00            .byte	0
12489 2BF9                        00            .byte	0
12490                                           ! 1514  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12491 2BFA                        00            .byte	0
12492 2BFB                        00            .byte	0
12493 2BFC                        18            .byte	$18
12494 2BFD                        18            .byte	$18
12495 2BFE                        00            .byte	0
12496 2BFF                        38            .byte	$38
12497 2C00                        18            .byte	$18
12498 2C01                        18            .byte	$18
12499 2C02                        18            .byte	$18
12500 2C03                        18            .byte	$18
12501 2C04                        18            .byte	$18
12502 2C05                        3C            .byte	$3C
12503 2C06                        00            .byte	0
12504 2C07                        00            .byte	0
12505 2C08                        00            .byte	0
12506 2C09                        00            .byte	0
12507                                           ! 1515  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12508 2C0A                        00            .byte	0
12509 2C0B                        00            .byte	0
12510 2C0C                        06            .byte	6
12511 2C0D                        06            .byte	6
12512 2C0E                        00            .byte	0
12513 2C0F                        0E            .byte	$E
12514 2C10                        06            .byte	6
12515 2C11                        06            .byte	6
12516 2C12                        06            .byte	6
12517 2C13                        06            .byte	6
12518 2C14                        06            .byte	6
12519 2C15                        06            .byte	6
12520 2C16                        66            .byte	$66
12521 2C17                        66            .byte	$66
12522 2C18                        3C            .byte	$3C
12523 2C19                        00            .byte	0
12524                                           ! 1516  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12525 2C1A                        00            .byte	0
12526 2C1B                        00            .byte	0
12527 2C1C                        E0            .byte	$E0
12528 2C1D                        60            .byte	$60
12529 2C1E                        60            .byte	$60
12530 2C1F                        66            .byte	$66
12531 2C20                        6C            .byte	$6C
12532 2C21                        78            .byte	$78
12533 2C22                        78            .byte	$78
12534 2C23                        6C            .byte	$6C
12535 2C24                        66            .byte	$66
12536 2C25                        E6            .byte	$E6
12537 2C26                        00            .byte	0
12538 2C27                        00            .byte	0
12539 2C28                        00            .byte	0
12540 2C29                        00            .byte	0
12541                                           ! 1517  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12542 2C2A                        00            .byte	0
12543 2C2B                        00            .byte	0
12544 2C2C                        38            .byte	$38
12545 2C2D                        18            .byte	$18
12546 2C2E                        18            .byte	$18
12547 2C2F                        18            .byte	$18
12548 2C30                        18            .byte	$18
12549 2C31                        18            .byte	$18
12550 2C32                        18            .byte	$18
12551 2C33                        18            .byte	$18
12552 2C34                        18            .byte	$18
12553 2C35                        3C            .byte	$3C
12554 2C36                        00            .byte	0
12555 2C37                        00            .byte	0
12556 2C38                        00            .byte	0
12557 2C39                        00            .byte	0
12558                                           ! 1518  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12559 2C3A                        00            .byte	0
12560 2C3B                        00            .byte	0
12561 2C3C                        00            .byte	0
12562 2C3D                        00            .byte	0
12563 2C3E                        00            .byte	0
12564 2C3F                        E6            .byte	$E6
12565 2C40                        FF            .byte	$FF
12566 2C41                        DB            .byte	$DB
12567 2C42                        DB            .byte	$DB
12568 2C43                        DB            .byte	$DB
12569 2C44                        DB            .byte	$DB
12570 2C45                        DB            .byte	$DB
12571 2C46                        00            .byte	0
12572 2C47                        00            .byte	0
12573 2C48                        00            .byte	0
12574 2C49                        00            .byte	0
12575                                           ! 1519  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12576 2C4A                        00            .byte	0
12577 2C4B                        00            .byte	0
12578 2C4C                        00            .byte	0
12579 2C4D                        00            .byte	0
12580 2C4E                        00            .byte	0
12581 2C4F                        DC            .byte	$DC
12582 2C50                        66            .byte	$66
12583 2C51                        66            .byte	$66
12584 2C52                        66            .byte	$66
12585 2C53                        66            .byte	$66
12586 2C54                        66            .byte	$66
12587 2C55                        66            .byte	$66
12588 2C56                        00            .byte	0
12589 2C57                        00            .byte	0
12590 2C58                        00            .byte	0
12591 2C59                        00            .byte	0
12592                                           ! 1520  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12593 2C5A                        00            .byte	0
12594 2C5B                        00            .byte	0
12595 2C5C                        00            .byte	0
12596 2C5D                        00            .byte	0
12597 2C5E                        00            .byte	0
12598 2C5F                        7C            .byte	$7C
12599 2C60                        C6            .byte	$C6
12600 2C61                        C6            .byte	$C6
12601 2C62                        C6            .byte	$C6
12602 2C63                        C6            .byte	$C6
12603 2C64                        C6            .byte	$C6
12604 2C65                        7C            .byte	$7C
12605 2C66                        00            .byte	0
12606 2C67                        00            .byte	0
12607 2C68                        00            .byte	0
12608 2C69                        00            .byte	0
12609                                           ! 1521  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12610 2C6A                        00            .byte	0
12611 2C6B                        00            .byte	0
12612 2C6C                        00            .byte	0
12613 2C6D                        00            .byte	0
12614 2C6E                        00            .byte	0
12615 2C6F                        DC            .byte	$DC
12616 2C70                        66            .byte	$66
12617 2C71                        66            .byte	$66
12618 2C72                        66            .byte	$66
12619 2C73                        66            .byte	$66
12620 2C74                        66            .byte	$66
12621 2C75                        7C            .byte	$7C
12622 2C76                        60            .byte	$60
12623 2C77                        60            .byte	$60
12624 2C78                        F0            .byte	$F0
12625 2C79                        00            .byte	0
12626                                           ! 1522  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12627 2C7A                        00            .byte	0
12628 2C7B                        00            .byte	0
12629 2C7C                        00            .byte	0
12630 2C7D                        00            .byte	0
12631 2C7E                        00            .byte	0
12632 2C7F                        76            .byte	$76
12633 2C80                        CC            .byte	$CC
12634 2C81                        CC            .byte	$CC
12635 2C82                        CC            .byte	$CC
12636 2C83                        CC            .byte	$CC
12637 2C84                        CC            .byte	$CC
12638 2C85                        7C            .byte	$7C
12639 2C86                        0C            .byte	$C
12640 2C87                        0C            .byte	$C
12641 2C88                        1E            .byte	$1E
12642 2C89                        00            .byte	0
12643                                           ! 1523  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12644 2C8A                        00            .byte	0
12645 2C8B                        00            .byte	0
12646 2C8C                        00            .byte	0
12647 2C8D                        00            .byte	0
12648 2C8E                        00            .byte	0
12649 2C8F                        DC            .byte	$DC
12650 2C90                        76            .byte	$76
12651 2C91                        66            .byte	$66
12652 2C92                        60            .byte	$60
12653 2C93                        60            .byte	$60
12654 2C94                        60            .byte	$60
12655 2C95                        F0            .byte	$F0
12656 2C96                        00            .byte	0
12657 2C97                        00            .byte	0
12658 2C98                        00            .byte	0
12659 2C99                        00            .byte	0
12660                                           ! 1524  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12661 2C9A                        00            .byte	0
12662 2C9B                        00            .byte	0
12663 2C9C                        00            .byte	0
12664 2C9D                        00            .byte	0
12665 2C9E                        00            .byte	0
12666 2C9F                        7C            .byte	$7C
12667 2CA0                        C6            .byte	$C6
12668 2CA1                        60            .byte	$60
12669 2CA2                        38            .byte	$38
12670 2CA3                        0C            .byte	$C
12671 2CA4                        C6            .byte	$C6
12672 2CA5                        7C            .byte	$7C
12673 2CA6                        00            .byte	0
12674 2CA7                        00            .byte	0
12675 2CA8                        00            .byte	0
12676 2CA9                        00            .byte	0
12677                                           ! 1525  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12678 2CAA                        00            .byte	0
12679 2CAB                        00            .byte	0
12680 2CAC                        10            .byte	$10
12681 2CAD                        30            .byte	$30
12682 2CAE                        30            .byte	$30
12683 2CAF                        FC            .byte	$FC
12684 2CB0                        30            .byte	$30
12685 2CB1                        30            .byte	$30
12686 2CB2                        30            .byte	$30
12687 2CB3                        30            .byte	$30
12688 2CB4                        36            .byte	$36
12689 2CB5                        1C            .byte	$1C
12690 2CB6                        00            .byte	0
12691 2CB7                        00            .byte	0
12692 2CB8                        00            .byte	0
12693 2CB9                        00            .byte	0
12694                                           ! 1526  0x00, 0x00,
12695 2CBA                        00            .byte	0
12696                                           ! 1526  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12697 2CBB                        00            .byte	0
12698 2CBC                        00            .byte	0
12699 2CBD                        00            .byte	0
12700 2CBE                        00            .byte	0
12701 2CBF                        CC            .byte	$CC
12702 2CC0                        CC            .byte	$CC
12703 2CC1                        CC            .byte	$CC
12704 2CC2                        CC            .byte	$CC
12705 2CC3                        CC            .byte	$CC
12706 2CC4                        CC            .byte	$CC
12707 2CC5                        76            .byte	$76
12708 2CC6                        00            .byte	0
12709 2CC7                        00            .byte	0
12710 2CC8                        00            .byte	0
12711 2CC9                        00            .byte	0
12712                                           ! 1527  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12713 2CCA                        00            .byte	0
12714 2CCB                        00            .byte	0
12715 2CCC                        00            .byte	0
12716 2CCD                        00            .byte	0
12717 2CCE                        00            .byte	0
12718 2CCF                        C3            .byte	$C3
12719 2CD0                        C3            .byte	$C3
12720 2CD1                        C3            .byte	$C3
12721 2CD2                        C3            .byte	$C3
12722 2CD3                        66            .byte	$66
12723 2CD4                        3C            .byte	$3C
12724 2CD5                        18            .byte	$18
12725 2CD6                        00            .byte	0
12726 2CD7                        00            .byte	0
12727 2CD8                        00            .byte	0
12728 2CD9                        00            .byte	0
12729                                           ! 1528  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12730 2CDA                        00            .byte	0
12731 2CDB                        00            .byte	0
12732 2CDC                        00            .byte	0
12733 2CDD                        00            .byte	0
12734 2CDE                        00            .byte	0
12735 2CDF                        C3            .byte	$C3
12736 2CE0                        C3            .byte	$C3
12737 2CE1                        C3            .byte	$C3
12738 2CE2                        DB            .byte	$DB
12739 2CE3                        DB            .byte	$DB
12740 2CE4                        FF            .byte	$FF
12741 2CE5                        66            .byte	$66
12742 2CE6                        00            .byte	0
12743 2CE7                        00            .byte	0
12744 2CE8                        00            .byte	0
12745 2CE9                        00            .byte	0
12746                                           ! 1529  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12747 2CEA                        00            .byte	0
12748 2CEB                        00            .byte	0
12749 2CEC                        00            .byte	0
12750 2CED                        00            .byte	0
12751 2CEE                        00            .byte	0
12752 2CEF                        C3            .byte	$C3
12753 2CF0                        66            .byte	$66
12754 2CF1                        3C            .byte	$3C
12755 2CF2                        18            .byte	$18
12756 2CF3                        3C            .byte	$3C
12757 2CF4                        66            .byte	$66
12758 2CF5                        C3            .byte	$C3
12759 2CF6                        00            .byte	0
12760 2CF7                        00            .byte	0
12761 2CF8                        00            .byte	0
12762 2CF9                        00            .byte	0
12763                                           ! 1530  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12764 2CFA                        00            .byte	0
12765 2CFB                        00            .byte	0
12766 2CFC                        00            .byte	0
12767 2CFD                        00            .byte	0
12768 2CFE                        00            .byte	0
12769 2CFF                        C6            .byte	$C6
12770 2D00                        C6            .byte	$C6
12771 2D01                        C6            .byte	$C6
12772 2D02                        C6            .byte	$C6
12773 2D03                        C6            .byte	$C6
12774 2D04                        C6            .byte	$C6
12775 2D05                        7E            .byte	$7E
12776 2D06                        06            .byte	6
12777 2D07                        0C            .byte	$C
12778 2D08                        F8            .byte	$F8
12779 2D09                        00            .byte	0
12780                                           ! 1531  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12781 2D0A                        00            .byte	0
12782 2D0B                        00            .byte	0
12783 2D0C                        00            .byte	0
12784 2D0D                        00            .byte	0
12785 2D0E                        00            .byte	0
12786 2D0F                        FE            .byte	$FE
12787 2D10                        CC            .byte	$CC
12788 2D11                        18            .byte	$18
12789 2D12                        30            .byte	$30
12790 2D13                        60            .byte	$60
12791 2D14                        C6            .byte	$C6
12792 2D15                        FE            .byte	$FE
12793 2D16                        00            .byte	0
12794 2D17                        00            .byte	0
12795 2D18                        00            .byte	0
12796 2D19                        00            .byte	0
12797                                           ! 1532  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12798 2D1A                        00            .byte	0
12799 2D1B                        00            .byte	0
12800 2D1C                        0E            .byte	$E
12801 2D1D                        18            .byte	$18
12802 2D1E                        18            .byte	$18
12803 2D1F                        18            .byte	$18
12804 2D20                        70            .byte	$70
12805 2D21                        18            .byte	$18
12806 2D22                        18            .byte	$18
12807 2D23                        18            .byte	$18
12808 2D24                        18            .byte	$18
12809 2D25                        0E            .byte	$E
12810 2D26                        00            .byte	0
12811 2D27                        00            .byte	0
12812 2D28                        00            .byte	0
12813 2D29                        00            .byte	0
12814                                           ! 1533  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12815 2D2A                        00            .byte	0
12816 2D2B                        00            .byte	0
12817 2D2C                        18            .byte	$18
12818 2D2D                        18            .byte	$18
12819 2D2E                        18            .byte	$18
12820 2D2F                        18            .byte	$18
12821 2D30                        00            .byte	0
12822 2D31                        18            .byte	$18
12823 2D32                        18            .byte	$18
12824 2D33                        18            .byte	$18
12825 2D34                        18            .byte	$18
12826 2D35                        18            .byte	$18
12827 2D36                        00            .byte	0
12828 2D37                        00            .byte	0
12829 2D38                        00            .byte	0
12830 2D39                        00            .byte	0
12831                                           ! 1534  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12832 2D3A                        00            .byte	0
12833 2D3B                        00            .byte	0
12834 2D3C                        70            .byte	$70
12835 2D3D                        18            .byte	$18
12836 2D3E                        18            .byte	$18
12837 2D3F                        18            .byte	$18
12838 2D40                        0E            .byte	$E
12839 2D41                        18            .byte	$18
12840 2D42                        18            .byte	$18
12841 2D43                        18            .byte	$18
12842 2D44                        18            .byte	$18
12843 2D45                        70            .byte	$70
12844 2D46                        00            .byte	0
12845 2D47                        00            .byte	0
12846 2D48                        00            .byte	0
12847 2D49                        00            .byte	0
12848                                           ! 1535  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12849 2D4A                        00            .byte	0
12850 2D4B                        00            .byte	0
12851 2D4C                        76            .byte	$76
12852 2D4D                        DC            .byte	$DC
12853 2D4E                        00            .byte	0
12854 2D4F                        00            .byte	0
12855 2D50                        00            .byte	0
12856 2D51                        00            .byte	0
12857 2D52                        00            .byte	0
12858 2D53                        00            .byte	0
12859 2D54                        00            .byte	0
12860 2D55                        00            .byte	0
12861 2D56                        00            .byte	0
12862 2D57                        00            .byte	0
12863 2D58                        00            .byte	0
12864 2D59                        00            .byte	0
12865                                           ! 1536  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12866 2D5A                        00            .byte	0
12867 2D5B                        00            .byte	0
12868 2D5C                        00            .byte	0
12869 2D5D                        00            .byte	0
12870 2D5E                        10            .byte	$10
12871 2D5F                        38            .byte	$38
12872 2D60                        6C            .byte	$6C
12873 2D61                        C6            .byte	$C6
12874 2D62                        C6            .byte	$C6
12875 2D63                        C6            .byte	$C6
12876 2D64                        FE            .byte	$FE
12877 2D65                        00            .byte	0
12878 2D66                        00            .byte	0
12879 2D67                        00            .byte	0
12880 2D68                        00            .byte	0
12881 2D69                        00            .byte	0
12882                                           ! 1537  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12883 2D6A                        00            .byte	0
12884 2D6B                        00            .byte	0
12885 2D6C                        3C            .byte	$3C
12886 2D6D                        66            .byte	$66
12887 2D6E                        C2            .byte	$C2
12888 2D6F                        C0            .byte	$C0
12889 2D70                        C0            .byte	$C0
12890 2D71                        C0            .byte	$C0
12891 2D72                        C2            .byte	$C2
12892 2D73                        66            .byte	$66
12893 2D74                        3C            .byte	$3C
12894 2D75                        0C            .byte	$C
12895 2D76                        06            .byte	6
12896 2D77                        7C            .byte	$7C
12897 2D78                        00            .byte	0
12898 2D79                        00            .byte	0
12899                                           ! 1538  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12900 2D7A                        00            .byte	0
12901 2D7B                        00            .byte	0
12902 2D7C                        CC            .byte	$CC
12903 2D7D                        00            .byte	0
12904 2D7E                        00            .byte	0
12905 2D7F                        CC            .byte	$CC
12906 2D80                        CC            .byte	$CC
12907 2D81                        CC            .byte	$CC
12908 2D82                        CC            .byte	$CC
12909 2D83                        CC            .byte	$CC
12910 2D84                        CC            .byte	$CC
12911 2D85                        76            .byte	$76
12912 2D86                        00            .byte	0
12913 2D87                        00            .byte	0
12914 2D88                        00            .byte	0
12915 2D89                        00            .byte	0
12916                                           ! 1539  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12917 2D8A                        00            .byte	0
12918 2D8B                        0C            .byte	$C
12919 2D8C                        18            .byte	$18
12920 2D8D                        30            .byte	$30
12921 2D8E                        00            .byte	0
12922 2D8F                        7C            .byte	$7C
12923 2D90                        C6            .byte	$C6
12924 2D91                        FE            .byte	$FE
12925 2D92                        C0            .byte	$C0
12926 2D93                        C0            .byte	$C0
12927 2D94                        C6            .byte	$C6
12928 2D95                        7C            .byte	$7C
12929 2D96                        00            .byte	0
12930 2D97                        00            .byte	0
12931 2D98                        00            .byte	0
12932 2D99                        00            .byte	0
12933                                           ! 1540  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12934 2D9A                        00            .byte	0
12935 2D9B                        10            .byte	$10
12936 2D9C                        38            .byte	$38
12937 2D9D                        6C            .byte	$6C
12938 2D9E                        00            .byte	0
12939 2D9F                        78            .byte	$78
12940 2DA0                        0C            .byte	$C
12941 2DA1                        7C            .byte	$7C
12942 2DA2                        CC            .byte	$CC
12943 2DA3                        CC            .byte	$CC
12944 2DA4                        CC            .byte	$CC
12945 2DA5                        76            .byte	$76
12946 2DA6                        00            .byte	0
12947 2DA7                        00            .byte	0
12948 2DA8                        00            .byte	0
12949 2DA9                        00            .byte	0
12950                                           ! 1541  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12951 2DAA                        00            .byte	0
12952 2DAB                        00            .byte	0
12953 2DAC                        CC            .byte	$CC
12954 2DAD                        00            .byte	0
12955 2DAE                        00            .byte	0
12956 2DAF                        78            .byte	$78
12957 2DB0                        0C            .byte	$C
12958 2DB1                        7C            .byte	$7C
12959 2DB2                        CC            .byte	$CC
12960 2DB3                        CC            .byte	$CC
12961 2DB4                        CC            .byte	$CC
12962 2DB5                        76            .byte	$76
12963 2DB6                        00            .byte	0
12964 2DB7                        00            .byte	0
12965 2DB8                        00            .byte	0
12966 2DB9                        00            .byte	0
12967                                           ! 1542  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12968 2DBA                        00            .byte	0
12969 2DBB                        60            .byte	$60
12970 2DBC                        30            .byte	$30
12971 2DBD                        18            .byte	$18
12972 2DBE                        00            .byte	0
12973 2DBF                        78            .byte	$78
12974 2DC0                        0C            .byte	$C
12975 2DC1                        7C            .byte	$7C
12976 2DC2                        CC            .byte	$CC
12977 2DC3                        CC            .byte	$CC
12978 2DC4                        CC            .byte	$CC
12979 2DC5                        76            .byte	$76
12980 2DC6                        00            .byte	0
12981 2DC7                        00            .byte	0
12982 2DC8                        00            .byte	0
12983 2DC9                        00            .byte	0
12984                                           ! 1543  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12985 2DCA                        00            .byte	0
12986 2DCB                        38            .byte	$38
12987 2DCC                        6C            .byte	$6C
12988 2DCD                        38            .byte	$38
12989 2DCE                        00            .byte	0
12990 2DCF                        78            .byte	$78
12991 2DD0                        0C            .byte	$C
12992 2DD1                        7C            .byte	$7C
12993 2DD2                        CC            .byte	$CC
12994 2DD3                        CC            .byte	$CC
12995 2DD4                        CC            .byte	$CC
12996 2DD5                        76            .byte	$76
12997 2DD6                        00            .byte	0
12998 2DD7                        00            .byte	0
12999 2DD8                        00            .byte	0
13000 2DD9                        00            .byte	0
13001                                           ! 1544  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
13002 2DDA                        00            .byte	0
13003 2DDB                        00            .byte	0
13004 2DDC                        00            .byte	0
13005 2DDD                        00            .byte	0
13006 2DDE                        3C            .byte	$3C
13007 2DDF                        66            .byte	$66
13008 2DE0                        60            .byte	$60
13009 2DE1                        60            .byte	$60
13010 2DE2                        66            .byte	$66
13011 2DE3                        3C            .byte	$3C
13012 2DE4                        0C            .byte	$C
13013 2DE5                        06            .byte	6
13014 2DE6                        3C            .byte	$3C
13015 2DE7                        00            .byte	0
13016 2DE8                        00            .byte	0
13017 2DE9                        00            .byte	0
13018                                           ! 1545  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13019 2DEA                        00            .byte	0
13020 2DEB                        10            .byte	$10
13021 2DEC                        38            .byte	$38
13022 2DED                        6C            .byte	$6C
13023 2DEE                        00            .byte	0
13024 2DEF                        7C            .byte	$7C
13025 2DF0                        C6            .byte	$C6
13026 2DF1                        FE            .byte	$FE
13027 2DF2                        C0            .byte	$C0
13028 2DF3                        C0            .byte	$C0
13029 2DF4                        C6            .byte	$C6
13030 2DF5                        7C            .byte	$7C
13031 2DF6                        00            .byte	0
13032 2DF7                        00            .byte	0
13033 2DF8                        00            .byte	0
13034 2DF9                        00            .byte	0
13035                                           ! 1546  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13036 2DFA                        00            .byte	0
13037 2DFB                        00            .byte	0
13038 2DFC                        C6            .byte	$C6
13039 2DFD                        00            .byte	0
13040 2DFE                        00            .byte	0
13041 2DFF                        7C            .byte	$7C
13042 2E00                        C6            .byte	$C6
13043 2E01                        FE            .byte	$FE
13044 2E02                        C0            .byte	$C0
13045 2E03                        C0            .byte	$C0
13046 2E04                        C6            .byte	$C6
13047 2E05                        7C            .byte	$7C
13048 2E06                        00            .byte	0
13049 2E07                        00            .byte	0
13050 2E08                        00            .byte	0
13051 2E09                        00            .byte	0
13052                                           ! 1547  0x00, 0x60, 0x30, 0x18
13053 2E0A                        00            .byte	0
13054 2E0B                        60            .byte	$60
13055 2E0C                        30            .byte	$30
13056                                           ! 1547 , 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13057 2E0D                        18            .byte	$18
13058 2E0E                        00            .byte	0
13059 2E0F                        7C            .byte	$7C
13060 2E10                        C6            .byte	$C6
13061 2E11                        FE            .byte	$FE
13062 2E12                        C0            .byte	$C0
13063 2E13                        C0            .byte	$C0
13064 2E14                        C6            .byte	$C6
13065 2E15                        7C            .byte	$7C
13066 2E16                        00            .byte	0
13067 2E17                        00            .byte	0
13068 2E18                        00            .byte	0
13069 2E19                        00            .byte	0
13070                                           ! 1548  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13071 2E1A                        00            .byte	0
13072 2E1B                        00            .byte	0
13073 2E1C                        66            .byte	$66
13074 2E1D                        00            .byte	0
13075 2E1E                        00            .byte	0
13076 2E1F                        38            .byte	$38
13077 2E20                        18            .byte	$18
13078 2E21                        18            .byte	$18
13079 2E22                        18            .byte	$18
13080 2E23                        18            .byte	$18
13081 2E24                        18            .byte	$18
13082 2E25                        3C            .byte	$3C
13083 2E26                        00            .byte	0
13084 2E27                        00            .byte	0
13085 2E28                        00            .byte	0
13086 2E29                        00            .byte	0
13087                                           ! 1549  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13088 2E2A                        00            .byte	0
13089 2E2B                        18            .byte	$18
13090 2E2C                        3C            .byte	$3C
13091 2E2D                        66            .byte	$66
13092 2E2E                        00            .byte	0
13093 2E2F                        38            .byte	$38
13094 2E30                        18            .byte	$18
13095 2E31                        18            .byte	$18
13096 2E32                        18            .byte	$18
13097 2E33                        18            .byte	$18
13098 2E34                        18            .byte	$18
13099 2E35                        3C            .byte	$3C
13100 2E36                        00            .byte	0
13101 2E37                        00            .byte	0
13102 2E38                        00            .byte	0
13103 2E39                        00            .byte	0
13104                                           ! 1550  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13105 2E3A                        00            .byte	0
13106 2E3B                        60            .byte	$60
13107 2E3C                        30            .byte	$30
13108 2E3D                        18            .byte	$18
13109 2E3E                        00            .byte	0
13110 2E3F                        38            .byte	$38
13111 2E40                        18            .byte	$18
13112 2E41                        18            .byte	$18
13113 2E42                        18            .byte	$18
13114 2E43                        18            .byte	$18
13115 2E44                        18            .byte	$18
13116 2E45                        3C            .byte	$3C
13117 2E46                        00            .byte	0
13118 2E47                        00            .byte	0
13119 2E48                        00            .byte	0
13120 2E49                        00            .byte	0
13121                                           ! 1551  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13122 2E4A                        00            .byte	0
13123 2E4B                        C6            .byte	$C6
13124 2E4C                        00            .byte	0
13125 2E4D                        10            .byte	$10
13126 2E4E                        38            .byte	$38
13127 2E4F                        6C            .byte	$6C
13128 2E50                        C6            .byte	$C6
13129 2E51                        C6            .byte	$C6
13130 2E52                        FE            .byte	$FE
13131 2E53                        C6            .byte	$C6
13132 2E54                        C6            .byte	$C6
13133 2E55                        C6            .byte	$C6
13134 2E56                        00            .byte	0
13135 2E57                        00            .byte	0
13136 2E58                        00            .byte	0
13137 2E59                        00            .byte	0
13138                                           ! 1552  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13139 2E5A                        38            .byte	$38
13140 2E5B                        6C            .byte	$6C
13141 2E5C                        38            .byte	$38
13142 2E5D                        00            .byte	0
13143 2E5E                        38            .byte	$38
13144 2E5F                        6C            .byte	$6C
13145 2E60                        C6            .byte	$C6
13146 2E61                        C6            .byte	$C6
13147 2E62                        FE            .byte	$FE
13148 2E63                        C6            .byte	$C6
13149 2E64                        C6            .byte	$C6
13150 2E65                        C6            .byte	$C6
13151 2E66                        00            .byte	0
13152 2E67                        00            .byte	0
13153 2E68                        00            .byte	0
13154 2E69                        00            .byte	0
13155                                           ! 1553  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13156 2E6A                        18            .byte	$18
13157 2E6B                        30            .byte	$30
13158 2E6C                        60            .byte	$60
13159 2E6D                        00            .byte	0
13160 2E6E                        FE            .byte	$FE
13161 2E6F                        66            .byte	$66
13162 2E70                        60            .byte	$60
13163 2E71                        7C            .byte	$7C
13164 2E72                        60            .byte	$60
13165 2E73                        60            .byte	$60
13166 2E74                        66            .byte	$66
13167 2E75                        FE            .byte	$FE
13168 2E76                        00            .byte	0
13169 2E77                        00            .byte	0
13170 2E78                        00            .byte	0
13171 2E79                        00            .byte	0
13172                                           ! 1554  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13173 2E7A                        00            .byte	0
13174 2E7B                        00            .byte	0
13175 2E7C                        00            .byte	0
13176 2E7D                        00            .byte	0
13177 2E7E                        00            .byte	0
13178 2E7F                        6E            .byte	$6E
13179 2E80                        3B            .byte	$3B
13180 2E81                        1B            .byte	$1B
13181 2E82                        7E            .byte	$7E
13182 2E83                        D8            .byte	$D8
13183 2E84                        DC            .byte	$DC
13184 2E85                        77            .byte	$77
13185 2E86                        00            .byte	0
13186 2E87                        00            .byte	0
13187 2E88                        00            .byte	0
13188 2E89                        00            .byte	0
13189                                           ! 1555  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13190 2E8A                        00            .byte	0
13191 2E8B                        00            .byte	0
13192 2E8C                        3E            .byte	$3E
13193 2E8D                        6C            .byte	$6C
13194 2E8E                        CC            .byte	$CC
13195 2E8F                        CC            .byte	$CC
13196 2E90                        FE            .byte	$FE
13197 2E91                        CC            .byte	$CC
13198 2E92                        CC            .byte	$CC
13199 2E93                        CC            .byte	$CC
13200 2E94                        CC            .byte	$CC
13201 2E95                        CE            .byte	$CE
13202 2E96                        00            .byte	0
13203 2E97                        00            .byte	0
13204 2E98                        00            .byte	0
13205 2E99                        00            .byte	0
13206                                           ! 1556  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13207 2E9A                        00            .byte	0
13208 2E9B                        10            .byte	$10
13209 2E9C                        38            .byte	$38
13210 2E9D                        6C            .byte	$6C
13211 2E9E                        00            .byte	0
13212 2E9F                        7C            .byte	$7C
13213 2EA0                        C6            .byte	$C6
13214 2EA1                        C6            .byte	$C6
13215 2EA2                        C6            .byte	$C6
13216 2EA3                        C6            .byte	$C6
13217 2EA4                        C6            .byte	$C6
13218 2EA5                        7C            .byte	$7C
13219 2EA6                        00            .byte	0
13220 2EA7                        00            .byte	0
13221 2EA8                        00            .byte	0
13222 2EA9                        00            .byte	0
13223                                           ! 1557  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13224 2EAA                        00            .byte	0
13225 2EAB                        00            .byte	0
13226 2EAC                        C6            .byte	$C6
13227 2EAD                        00            .byte	0
13228 2EAE                        00            .byte	0
13229 2EAF                        7C            .byte	$7C
13230 2EB0                        C6            .byte	$C6
13231 2EB1                        C6            .byte	$C6
13232 2EB2                        C6            .byte	$C6
13233 2EB3                        C6            .byte	$C6
13234 2EB4                        C6            .byte	$C6
13235 2EB5                        7C            .byte	$7C
13236 2EB6                        00            .byte	0
13237 2EB7                        00            .byte	0
13238 2EB8                        00            .byte	0
13239 2EB9                        00            .byte	0
13240                                           ! 1558  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13241 2EBA                        00            .byte	0
13242 2EBB                        60            .byte	$60
13243 2EBC                        30            .byte	$30
13244 2EBD                        18            .byte	$18
13245 2EBE                        00            .byte	0
13246 2EBF                        7C            .byte	$7C
13247 2EC0                        C6            .byte	$C6
13248 2EC1                        C6            .byte	$C6
13249 2EC2                        C6            .byte	$C6
13250 2EC3                        C6            .byte	$C6
13251 2EC4                        C6            .byte	$C6
13252 2EC5                        7C            .byte	$7C
13253 2EC6                        00            .byte	0
13254 2EC7                        00            .byte	0
13255 2EC8                        00            .byte	0
13256 2EC9                        00            .byte	0
13257                                           ! 1559  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13258 2ECA                        00            .byte	0
13259 2ECB                        30            .byte	$30
13260 2ECC                        78            .byte	$78
13261 2ECD                        CC            .byte	$CC
13262 2ECE                        00            .byte	0
13263 2ECF                        CC            .byte	$CC
13264 2ED0                        CC            .byte	$CC
13265 2ED1                        CC            .byte	$CC
13266 2ED2                        CC            .byte	$CC
13267 2ED3                        CC            .byte	$CC
13268 2ED4                        CC            .byte	$CC
13269 2ED5                        76            .byte	$76
13270 2ED6                        00            .byte	0
13271 2ED7                        00            .byte	0
13272 2ED8                        00            .byte	0
13273 2ED9                        00            .byte	0
13274                                           ! 1560  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13275 2EDA                        00            .byte	0
13276 2EDB                        60            .byte	$60
13277 2EDC                        30            .byte	$30
13278 2EDD                        18            .byte	$18
13279 2EDE                        00            .byte	0
13280 2EDF                        CC            .byte	$CC
13281 2EE0                        CC            .byte	$CC
13282 2EE1                        CC            .byte	$CC
13283 2EE2                        CC            .byte	$CC
13284 2EE3                        CC            .byte	$CC
13285 2EE4                        CC            .byte	$CC
13286 2EE5                        76            .byte	$76
13287 2EE6                        00            .byte	0
13288 2EE7                        00            .byte	0
13289 2EE8                        00            .byte	0
13290 2EE9                        00            .byte	0
13291                                           ! 1561  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13292 2EEA                        00            .byte	0
13293 2EEB                        00            .byte	0
13294 2EEC                        C6            .byte	$C6
13295 2EED                        00            .byte	0
13296 2EEE                        00            .byte	0
13297 2EEF                        C6            .byte	$C6
13298 2EF0                        C6            .byte	$C6
13299 2EF1                        C6            .byte	$C6
13300 2EF2                        C6            .byte	$C6
13301 2EF3                        C6            .byte	$C6
13302 2EF4                        C6            .byte	$C6
13303 2EF5                        7E            .byte	$7E
13304 2EF6                        06            .byte	6
13305 2EF7                        0C            .byte	$C
13306 2EF8                        78            .byte	$78
13307 2EF9                        00            .byte	0
13308                                           ! 1562  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13309 2EFA                        00            .byte	0
13310 2EFB                        C6            .byte	$C6
13311 2EFC                        00            .byte	0
13312 2EFD                        7C            .byte	$7C
13313 2EFE                        C6            .byte	$C6
13314 2EFF                        C6            .byte	$C6
13315 2F00                        C6            .byte	$C6
13316 2F01                        C6            .byte	$C6
13317 2F02                        C6            .byte	$C6
13318 2F03                        C6            .byte	$C6
13319 2F04                        C6            .byte	$C6
13320 2F05                        7C            .byte	$7C
13321 2F06                        00            .byte	0
13322 2F07                        00            .byte	0
13323 2F08                        00            .byte	0
13324 2F09                        00            .byte	0
13325                                           ! 1563  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13326 2F0A                        00            .byte	0
13327 2F0B                        C6            .byte	$C6
13328 2F0C                        00            .byte	0
13329 2F0D                        C6            .byte	$C6
13330 2F0E                        C6            .byte	$C6
13331 2F0F                        C6            .byte	$C6
13332 2F10                        C6            .byte	$C6
13333 2F11                        C6            .byte	$C6
13334 2F12                        C6            .byte	$C6
13335 2F13                        C6            .byte	$C6
13336 2F14                        C6            .byte	$C6
13337 2F15                        7C            .byte	$7C
13338 2F16                        00            .byte	0
13339 2F17                        00            .byte	0
13340 2F18                        00            .byte	0
13341 2F19                        00            .byte	0
13342                                           ! 1564  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13343 2F1A                        00            .byte	0
13344 2F1B                        18            .byte	$18
13345 2F1C                        18            .byte	$18
13346 2F1D                        7E            .byte	$7E
13347 2F1E                        C3            .byte	$C3
13348 2F1F                        C0            .byte	$C0
13349 2F20                        C0            .byte	$C0
13350 2F21                        C0            .byte	$C0
13351 2F22                        C3            .byte	$C3
13352 2F23                        7E            .byte	$7E
13353 2F24                        18            .byte	$18
13354 2F25                        18            .byte	$18
13355 2F26                        00            .byte	0
13356 2F27                        00            .byte	0
13357 2F28                        00            .byte	0
13358 2F29                        00            .byte	0
13359                                           ! 1565  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13360 2F2A                        00            .byte	0
13361 2F2B                        38            .byte	$38
13362 2F2C                        6C            .byte	$6C
13363 2F2D                        64            .byte	$64
13364 2F2E                        60            .byte	$60
13365 2F2F                        F0            .byte	$F0
13366 2F30                        60            .byte	$60
13367 2F31                        60            .byte	$60
13368 2F32                        60            .byte	$60
13369 2F33                        60            .byte	$60
13370 2F34                        E6            .byte	$E6
13371 2F35                        FC            .byte	$FC
13372 2F36                        00            .byte	0
13373 2F37                        00            .byte	0
13374 2F38                        00            .byte	0
13375 2F39                        00            .byte	0
13376                                           ! 1566  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13377 2F3A                        00            .byte	0
13378 2F3B                        00            .byte	0
13379 2F3C                        C3            .byte	$C3
13380 2F3D                        66            .byte	$66
13381 2F3E                        3C            .byte	$3C
13382 2F3F                        18            .byte	$18
13383 2F40                        FF            .byte	$FF
13384 2F41                        18            .byte	$18
13385 2F42                        FF            .byte	$FF
13386 2F43                        18            .byte	$18
13387 2F44                        18            .byte	$18
13388 2F45                        18            .byte	$18
13389 2F46                        00            .byte	0
13390 2F47                        00            .byte	0
13391 2F48                        00            .byte	0
13392 2F49                        00            .byte	0
13393                                           ! 1567  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13394 2F4A                        00            .byte	0
13395 2F4B                        FC            .byte	$FC
13396 2F4C                        66            .byte	$66
13397 2F4D                        66            .byte	$66
13398 2F4E                        7C            .byte	$7C
13399 2F4F                        62            .byte	$62
13400 2F50                        66            .byte	$66
13401 2F51                        6F            .byte	$6F
13402 2F52                        66            .byte	$66
13403 2F53                        66            .byte	$66
13404 2F54                        66            .byte	$66
13405 2F55                        F3            .byte	$F3
13406 2F56                        00            .byte	0
13407 2F57                        00            .byte	0
13408 2F58                        00            .byte	0
13409 2F59                        00            .byte	0
13410                                           ! 1568  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x1
13411 2F5A                        00            .byte	0
13412 2F5B                        0E            .byte	$E
13413 2F5C                        1B            .byte	$1B
13414 2F5D                        18            .byte	$18
13415 2F5E                        18            .byte	$18
13416                                           ! 1568 8, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13417 2F5F                        18            .byte	$18
13418 2F60                        7E            .byte	$7E
13419 2F61                        18            .byte	$18
13420 2F62                        18            .byte	$18
13421 2F63                        18            .byte	$18
13422 2F64                        18            .byte	$18
13423 2F65                        18            .byte	$18
13424 2F66                        D8            .byte	$D8
13425 2F67                        70            .byte	$70
13426 2F68                        00            .byte	0
13427 2F69                        00            .byte	0
13428                                           ! 1569  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13429 2F6A                        00            .byte	0
13430 2F6B                        18            .byte	$18
13431 2F6C                        30            .byte	$30
13432 2F6D                        60            .byte	$60
13433 2F6E                        00            .byte	0
13434 2F6F                        78            .byte	$78
13435 2F70                        0C            .byte	$C
13436 2F71                        7C            .byte	$7C
13437 2F72                        CC            .byte	$CC
13438 2F73                        CC            .byte	$CC
13439 2F74                        CC            .byte	$CC
13440 2F75                        76            .byte	$76
13441 2F76                        00            .byte	0
13442 2F77                        00            .byte	0
13443 2F78                        00            .byte	0
13444 2F79                        00            .byte	0
13445                                           ! 1570  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13446 2F7A                        00            .byte	0
13447 2F7B                        0C            .byte	$C
13448 2F7C                        18            .byte	$18
13449 2F7D                        30            .byte	$30
13450 2F7E                        00            .byte	0
13451 2F7F                        38            .byte	$38
13452 2F80                        18            .byte	$18
13453 2F81                        18            .byte	$18
13454 2F82                        18            .byte	$18
13455 2F83                        18            .byte	$18
13456 2F84                        18            .byte	$18
13457 2F85                        3C            .byte	$3C
13458 2F86                        00            .byte	0
13459 2F87                        00            .byte	0
13460 2F88                        00            .byte	0
13461 2F89                        00            .byte	0
13462                                           ! 1571  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13463 2F8A                        00            .byte	0
13464 2F8B                        18            .byte	$18
13465 2F8C                        30            .byte	$30
13466 2F8D                        60            .byte	$60
13467 2F8E                        00            .byte	0
13468 2F8F                        7C            .byte	$7C
13469 2F90                        C6            .byte	$C6
13470 2F91                        C6            .byte	$C6
13471 2F92                        C6            .byte	$C6
13472 2F93                        C6            .byte	$C6
13473 2F94                        C6            .byte	$C6
13474 2F95                        7C            .byte	$7C
13475 2F96                        00            .byte	0
13476 2F97                        00            .byte	0
13477 2F98                        00            .byte	0
13478 2F99                        00            .byte	0
13479                                           ! 1572  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13480 2F9A                        00            .byte	0
13481 2F9B                        18            .byte	$18
13482 2F9C                        30            .byte	$30
13483 2F9D                        60            .byte	$60
13484 2F9E                        00            .byte	0
13485 2F9F                        CC            .byte	$CC
13486 2FA0                        CC            .byte	$CC
13487 2FA1                        CC            .byte	$CC
13488 2FA2                        CC            .byte	$CC
13489 2FA3                        CC            .byte	$CC
13490 2FA4                        CC            .byte	$CC
13491 2FA5                        76            .byte	$76
13492 2FA6                        00            .byte	0
13493 2FA7                        00            .byte	0
13494 2FA8                        00            .byte	0
13495 2FA9                        00            .byte	0
13496                                           ! 1573  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13497 2FAA                        00            .byte	0
13498 2FAB                        00            .byte	0
13499 2FAC                        76            .byte	$76
13500 2FAD                        DC            .byte	$DC
13501 2FAE                        00            .byte	0
13502 2FAF                        DC            .byte	$DC
13503 2FB0                        66            .byte	$66
13504 2FB1                        66            .byte	$66
13505 2FB2                        66            .byte	$66
13506 2FB3                        66            .byte	$66
13507 2FB4                        66            .byte	$66
13508 2FB5                        66            .byte	$66
13509 2FB6                        00            .byte	0
13510 2FB7                        00            .byte	0
13511 2FB8                        00            .byte	0
13512 2FB9                        00            .byte	0
13513                                           ! 1574  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13514 2FBA                        76            .byte	$76
13515 2FBB                        DC            .byte	$DC
13516 2FBC                        00            .byte	0
13517 2FBD                        C6            .byte	$C6
13518 2FBE                        E6            .byte	$E6
13519 2FBF                        F6            .byte	$F6
13520 2FC0                        FE            .byte	$FE
13521 2FC1                        DE            .byte	$DE
13522 2FC2                        CE            .byte	$CE
13523 2FC3                        C6            .byte	$C6
13524 2FC4                        C6            .byte	$C6
13525 2FC5                        C6            .byte	$C6
13526 2FC6                        00            .byte	0
13527 2FC7                        00            .byte	0
13528 2FC8                        00            .byte	0
13529 2FC9                        00            .byte	0
13530                                           ! 1575  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13531 2FCA                        00            .byte	0
13532 2FCB                        3C            .byte	$3C
13533 2FCC                        6C            .byte	$6C
13534 2FCD                        6C            .byte	$6C
13535 2FCE                        3E            .byte	$3E
13536 2FCF                        00            .byte	0
13537 2FD0                        7E            .byte	$7E
13538 2FD1                        00            .byte	0
13539 2FD2                        00            .byte	0
13540 2FD3                        00            .byte	0
13541 2FD4                        00            .byte	0
13542 2FD5                        00            .byte	0
13543 2FD6                        00            .byte	0
13544 2FD7                        00            .byte	0
13545 2FD8                        00            .byte	0
13546 2FD9                        00            .byte	0
13547                                           ! 1576  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13548 2FDA                        00            .byte	0
13549 2FDB                        38            .byte	$38
13550 2FDC                        6C            .byte	$6C
13551 2FDD                        6C            .byte	$6C
13552 2FDE                        38            .byte	$38
13553 2FDF                        00            .byte	0
13554 2FE0                        7C            .byte	$7C
13555 2FE1                        00            .byte	0
13556 2FE2                        00            .byte	0
13557 2FE3                        00            .byte	0
13558 2FE4                        00            .byte	0
13559 2FE5                        00            .byte	0
13560 2FE6                        00            .byte	0
13561 2FE7                        00            .byte	0
13562 2FE8                        00            .byte	0
13563 2FE9                        00            .byte	0
13564                                           ! 1577  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13565 2FEA                        00            .byte	0
13566 2FEB                        00            .byte	0
13567 2FEC                        30            .byte	$30
13568 2FED                        30            .byte	$30
13569 2FEE                        00            .byte	0
13570 2FEF                        30            .byte	$30
13571 2FF0                        30            .byte	$30
13572 2FF1                        60            .byte	$60
13573 2FF2                        C0            .byte	$C0
13574 2FF3                        C6            .byte	$C6
13575 2FF4                        C6            .byte	$C6
13576 2FF5                        7C            .byte	$7C
13577 2FF6                        00            .byte	0
13578 2FF7                        00            .byte	0
13579 2FF8                        00            .byte	0
13580 2FF9                        00            .byte	0
13581                                           ! 1578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13582 2FFA                        00            .byte	0
13583 2FFB                        00            .byte	0
13584 2FFC                        00            .byte	0
13585 2FFD                        00            .byte	0
13586 2FFE                        00            .byte	0
13587 2FFF                        00            .byte	0
13588 3000                        FE            .byte	$FE
13589 3001                        C0            .byte	$C0
13590 3002                        C0            .byte	$C0
13591 3003                        C0            .byte	$C0
13592 3004                        C0            .byte	$C0
13593 3005                        00            .byte	0
13594 3006                        00            .byte	0
13595 3007                        00            .byte	0
13596 3008                        00            .byte	0
13597 3009                        00            .byte	0
13598                                           ! 1579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13599 300A                        00            .byte	0
13600 300B                        00            .byte	0
13601 300C                        00            .byte	0
13602 300D                        00            .byte	0
13603 300E                        00            .byte	0
13604 300F                        00            .byte	0
13605 3010                        FE            .byte	$FE
13606 3011                        06            .byte	6
13607 3012                        06            .byte	6
13608 3013                        06            .byte	6
13609 3014                        06            .byte	6
13610 3015                        00            .byte	0
13611 3016                        00            .byte	0
13612 3017                        00            .byte	0
13613 3018                        00            .byte	0
13614 3019                        00            .byte	0
13615                                           ! 1580  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13616 301A                        00            .byte	0
13617 301B                        C0            .byte	$C0
13618 301C                        C0            .byte	$C0
13619 301D                        C2            .byte	$C2
13620 301E                        C6            .byte	$C6
13621 301F                        CC            .byte	$CC
13622 3020                        18            .byte	$18
13623 3021                        30            .byte	$30
13624 3022                        60            .byte	$60
13625 3023                        CE            .byte	$CE
13626 3024                        9B            .byte	$9B
13627 3025                        06            .byte	6
13628 3026                        0C            .byte	$C
13629 3027                        1F            .byte	$1F
13630 3028                        00            .byte	0
13631 3029                        00            .byte	0
13632                                           ! 1581  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13633 302A                        00            .byte	0
13634 302B                        C0            .byte	$C0
13635 302C                        C0            .byte	$C0
13636 302D                        C2            .byte	$C2
13637 302E                        C6            .byte	$C6
13638 302F                        CC            .byte	$CC
13639 3030                        18            .byte	$18
13640 3031                        30            .byte	$30
13641 3032                        66            .byte	$66
13642 3033                        CE            .byte	$CE
13643 3034                        96            .byte	$96
13644 3035                        3E            .byte	$3E
13645 3036                        06            .byte	6
13646 3037                        06            .byte	6
13647 3038                        00            .byte	0
13648 3039                        00            .byte	0
13649                                           ! 1582  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13650 303A                        00            .byte	0
13651 303B                        00            .byte	0
13652 303C                        18            .byte	$18
13653 303D                        18            .byte	$18
13654 303E                        00            .byte	0
13655 303F                        18            .byte	$18
13656 3040                        18            .byte	$18
13657 3041                        18            .byte	$18
13658 3042                        3C            .byte	$3C
13659 3043                        3C            .byte	$3C
13660 3044                        3C            .byte	$3C
13661 3045                        18            .byte	$18
13662 3046                        00            .byte	0
13663 3047                        00            .byte	0
13664 3048                        00            .byte	0
13665 3049                        00            .byte	0
13666                                           ! 1583  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13667 304A                        00            .byte	0
13668 304B                        00            .byte	0
13669 304C                        00            .byte	0
13670 304D                        00            .byte	0
13671 304E                        00            .byte	0
13672 304F                        36            .byte	$36
13673 3050                        6C            .byte	$6C
13674 3051                        D8            .byte	$D8
13675 3052                        6C            .byte	$6C
13676 3053                        36            .byte	$36
13677 3054                        00            .byte	0
13678 3055                        00            .byte	0
13679 3056                        00            .byte	0
13680 3057                        00            .byte	0
13681 3058                        00            .byte	0
13682 3059                        00            .byte	0
13683                                           ! 1584  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13684 305A                        00            .byte	0
13685 305B                        00            .byte	0
13686 305C                        00            .byte	0
13687 305D                        00            .byte	0
13688 305E                        00            .byte	0
13689 305F                        D8            .byte	$D8
13690 3060                        6C            .byte	$6C
13691 3061                        36            .byte	$36
13692 3062                        6C            .byte	$6C
13693 3063                        D8            .byte	$D8
13694 3064                        00            .byte	0
13695 3065                        00            .byte	0
13696 3066                        00            .byte	0
13697 3067                        00            .byte	0
13698 3068                        00            .byte	0
13699 3069                        00            .byte	0
13700                                           ! 1585  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13701 306A                        11            .byte	$11
13702 306B                        44            .byte	$44
13703 306C                        11            .byte	$11
13704 306D                        44            .byte	$44
13705 306E                        11            .byte	$11
13706 306F                        44            .byte	$44
13707 3070                        11            .byte	$11
13708 3071                        44            .byte	$44
13709 3072                        11            .byte	$11
13710 3073                        44            .byte	$44
13711 3074                        11            .byte	$11
13712 3075                        44            .byte	$44
13713 3076                        11            .byte	$11
13714 3077                        44            .byte	$44
13715 3078                        11            .byte	$11
13716 3079                        44            .byte	$44
13717                                           ! 1586  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13718 307A                        55            .byte	$55
13719 307B                        AA            .byte	$AA
13720 307C                        55            .byte	$55
13721 307D                        AA            .byte	$AA
13722 307E                        55            .byte	$55
13723 307F                        AA            .byte	$AA
13724 3080                        55            .byte	$55
13725 3081                        AA            .byte	$AA
13726 3082                        55            .byte	$55
13727 3083                        AA            .byte	$AA
13728 3084                        55            .byte	$55
13729 3085                        AA            .byte	$AA
13730 3086                        55            .byte	$55
13731 3087                        AA            .byte	$AA
13732 3088                        55            .byte	$55
13733 3089                        AA            .byte	$AA
13734                                           ! 1587  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13735 308A                        DD            .byte	$DD
13736 308B                        77            .byte	$77
13737 308C                        DD            .byte	$DD
13738 308D                        77            .byte	$77
13739 308E                        DD            .byte	$DD
13740 308F                        77            .byte	$77
13741 3090                        DD            .byte	$DD
13742 3091                        77            .byte	$77
13743 3092                        DD            .byte	$DD
13744 3093                        77            .byte	$77
13745 3094                        DD            .byte	$DD
13746 3095                        77            .byte	$77
13747 3096                        DD            .byte	$DD
13748 3097                        77            .byte	$77
13749 3098                        DD            .byte	$DD
13750 3099                        77            .byte	$77
13751                                           ! 1588  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13752 309A                        18            .byte	$18
13753 309B                        18            .byte	$18
13754 309C                        18            .byte	$18
13755 309D                        18            .byte	$18
13756 309E                        18            .byte	$18
13757 309F                        18            .byte	$18
13758 30A0                        18            .byte	$18
13759 30A1                        18            .byte	$18
13760 30A2                        18            .byte	$18
13761 30A3                        18            .byte	$18
13762 30A4                        18            .byte	$18
13763 30A5                        18            .byte	$18
13764 30A6                        18            .byte	$18
13765 30A7                        18            .byte	$18
13766 30A8                        18            .byte	$18
13767 30A9                        18            .byte	$18
13768                                           ! 1589  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x
13769 30AA                        18            .byte	$18
13770 30AB                        18            .byte	$18
13771 30AC                        18            .byte	$18
13772 30AD                        18            .byte	$18
13773 30AE                        18            .byte	$18
13774 30AF                        18            .byte	$18
13775 30B0                        18            .byte	$18
13776                                           ! 1589 f8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13777 30B1                        F8            .byte	$F8
13778 30B2                        18            .byte	$18
13779 30B3                        18            .byte	$18
13780 30B4                        18            .byte	$18
13781 30B5                        18            .byte	$18
13782 30B6                        18            .byte	$18
13783 30B7                        18            .byte	$18
13784 30B8                        18            .byte	$18
13785 30B9                        18            .byte	$18
13786                                           ! 1590  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13787 30BA                        18            .byte	$18
13788 30BB                        18            .byte	$18
13789 30BC                        18            .byte	$18
13790 30BD                        18            .byte	$18
13791 30BE                        18            .byte	$18
13792 30BF                        F8            .byte	$F8
13793 30C0                        18            .byte	$18
13794 30C1                        F8            .byte	$F8
13795 30C2                        18            .byte	$18
13796 30C3                        18            .byte	$18
13797 30C4                        18            .byte	$18
13798 30C5                        18            .byte	$18
13799 30C6                        18            .byte	$18
13800 30C7                        18            .byte	$18
13801 30C8                        18            .byte	$18
13802 30C9                        18            .byte	$18
13803                                           ! 1591  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13804 30CA                        36            .byte	$36
13805 30CB                        36            .byte	$36
13806 30CC                        36            .byte	$36
13807 30CD                        36            .byte	$36
13808 30CE                        36            .byte	$36
13809 30CF                        36            .byte	$36
13810 30D0                        36            .byte	$36
13811 30D1                        F6            .byte	$F6
13812 30D2                        36            .byte	$36
13813 30D3                        36            .byte	$36
13814 30D4                        36            .byte	$36
13815 30D5                        36            .byte	$36
13816 30D6                        36            .byte	$36
13817 30D7                        36            .byte	$36
13818 30D8                        36            .byte	$36
13819 30D9                        36            .byte	$36
13820                                           ! 1592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13821 30DA                        00            .byte	0
13822 30DB                        00            .byte	0
13823 30DC                        00            .byte	0
13824 30DD                        00            .byte	0
13825 30DE                        00            .byte	0
13826 30DF                        00            .byte	0
13827 30E0                        00            .byte	0
13828 30E1                        FE            .byte	$FE
13829 30E2                        36            .byte	$36
13830 30E3                        36            .byte	$36
13831 30E4                        36            .byte	$36
13832 30E5                        36            .byte	$36
13833 30E6                        36            .byte	$36
13834 30E7                        36            .byte	$36
13835 30E8                        36            .byte	$36
13836 30E9                        36            .byte	$36
13837                                           ! 1593  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13838 30EA                        00            .byte	0
13839 30EB                        00            .byte	0
13840 30EC                        00            .byte	0
13841 30ED                        00            .byte	0
13842 30EE                        00            .byte	0
13843 30EF                        F8            .byte	$F8
13844 30F0                        18            .byte	$18
13845 30F1                        F8            .byte	$F8
13846 30F2                        18            .byte	$18
13847 30F3                        18            .byte	$18
13848 30F4                        18            .byte	$18
13849 30F5                        18            .byte	$18
13850 30F6                        18            .byte	$18
13851 30F7                        18            .byte	$18
13852 30F8                        18            .byte	$18
13853 30F9                        18            .byte	$18
13854                                           ! 1594  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13855 30FA                        36            .byte	$36
13856 30FB                        36            .byte	$36
13857 30FC                        36            .byte	$36
13858 30FD                        36            .byte	$36
13859 30FE                        36            .byte	$36
13860 30FF                        F6            .byte	$F6
13861 3100                        06            .byte	6
13862 3101                        F6            .byte	$F6
13863 3102                        36            .byte	$36
13864 3103                        36            .byte	$36
13865 3104                        36            .byte	$36
13866 3105                        36            .byte	$36
13867 3106                        36            .byte	$36
13868 3107                        36            .byte	$36
13869 3108                        36            .byte	$36
13870 3109                        36            .byte	$36
13871                                           ! 1595  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13872 310A                        36            .byte	$36
13873 310B                        36            .byte	$36
13874 310C                        36            .byte	$36
13875 310D                        36            .byte	$36
13876 310E                        36            .byte	$36
13877 310F                        36            .byte	$36
13878 3110                        36            .byte	$36
13879 3111                        36            .byte	$36
13880 3112                        36            .byte	$36
13881 3113                        36            .byte	$36
13882 3114                        36            .byte	$36
13883 3115                        36            .byte	$36
13884 3116                        36            .byte	$36
13885 3117                        36            .byte	$36
13886 3118                        36            .byte	$36
13887 3119                        36            .byte	$36
13888                                           ! 1596  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13889 311A                        00            .byte	0
13890 311B                        00            .byte	0
13891 311C                        00            .byte	0
13892 311D                        00            .byte	0
13893 311E                        00            .byte	0
13894 311F                        FE            .byte	$FE
13895 3120                        06            .byte	6
13896 3121                        F6            .byte	$F6
13897 3122                        36            .byte	$36
13898 3123                        36            .byte	$36
13899 3124                        36            .byte	$36
13900 3125                        36            .byte	$36
13901 3126                        36            .byte	$36
13902 3127                        36            .byte	$36
13903 3128                        36            .byte	$36
13904 3129                        36            .byte	$36
13905                                           ! 1597  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13906 312A                        36            .byte	$36
13907 312B                        36            .byte	$36
13908 312C                        36            .byte	$36
13909 312D                        36            .byte	$36
13910 312E                        36            .byte	$36
13911 312F                        F6            .byte	$F6
13912 3130                        06            .byte	6
13913 3131                        FE            .byte	$FE
13914 3132                        00            .byte	0
13915 3133                        00            .byte	0
13916 3134                        00            .byte	0
13917 3135                        00            .byte	0
13918 3136                        00            .byte	0
13919 3137                        00            .byte	0
13920 3138                        00            .byte	0
13921 3139                        00            .byte	0
13922                                           ! 1598  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13923 313A                        36            .byte	$36
13924 313B                        36            .byte	$36
13925 313C                        36            .byte	$36
13926 313D                        36            .byte	$36
13927 313E                        36            .byte	$36
13928 313F                        36            .byte	$36
13929 3140                        36            .byte	$36
13930 3141                        FE            .byte	$FE
13931 3142                        00            .byte	0
13932 3143                        00            .byte	0
13933 3144                        00            .byte	0
13934 3145                        00            .byte	0
13935 3146                        00            .byte	0
13936 3147                        00            .byte	0
13937 3148                        00            .byte	0
13938 3149                        00            .byte	0
13939                                           ! 1599  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13940 314A                        18            .byte	$18
13941 314B                        18            .byte	$18
13942 314C                        18            .byte	$18
13943 314D                        18            .byte	$18
13944 314E                        18            .byte	$18
13945 314F                        F8            .byte	$F8
13946 3150                        18            .byte	$18
13947 3151                        F8            .byte	$F8
13948 3152                        00            .byte	0
13949 3153                        00            .byte	0
13950 3154                        00            .byte	0
13951 3155                        00            .byte	0
13952 3156                        00            .byte	0
13953 3157                        00            .byte	0
13954 3158                        00            .byte	0
13955 3159                        00            .byte	0
13956                                           ! 1600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13957 315A                        00            .byte	0
13958 315B                        00            .byte	0
13959 315C                        00            .byte	0
13960 315D                        00            .byte	0
13961 315E                        00            .byte	0
13962 315F                        00            .byte	0
13963 3160                        00            .byte	0
13964 3161                        F8            .byte	$F8
13965 3162                        18            .byte	$18
13966 3163                        18            .byte	$18
13967 3164                        18            .byte	$18
13968 3165                        18            .byte	$18
13969 3166                        18            .byte	$18
13970 3167                        18            .byte	$18
13971 3168                        18            .byte	$18
13972 3169                        18            .byte	$18
13973                                           ! 1601  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13974 316A                        18            .byte	$18
13975 316B                        18            .byte	$18
13976 316C                        18            .byte	$18
13977 316D                        18            .byte	$18
13978 316E                        18            .byte	$18
13979 316F                        18            .byte	$18
13980 3170                        18            .byte	$18
13981 3171                        1F            .byte	$1F
13982 3172                        00            .byte	0
13983 3173                        00            .byte	0
13984 3174                        00            .byte	0
13985 3175                        00            .byte	0
13986 3176                        00            .byte	0
13987 3177                        00            .byte	0
13988 3178                        00            .byte	0
13989 3179                        00            .byte	0
13990                                           ! 1602  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13991 317A                        18            .byte	$18
13992 317B                        18            .byte	$18
13993 317C                        18            .byte	$18
13994 317D                        18            .byte	$18
13995 317E                        18            .byte	$18
13996 317F                        18            .byte	$18
13997 3180                        18            .byte	$18
13998 3181                        FF            .byte	$FF
13999 3182                        00            .byte	0
14000 3183                        00            .byte	0
14001 3184                        00            .byte	0
14002 3185                        00            .byte	0
14003 3186                        00            .byte	0
14004 3187                        00            .byte	0
14005 3188                        00            .byte	0
14006 3189                        00            .byte	0
14007                                           ! 1603  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14008 318A                        00            .byte	0
14009 318B                        00            .byte	0
14010 318C                        00            .byte	0
14011 318D                        00            .byte	0
14012 318E                        00            .byte	0
14013 318F                        00            .byte	0
14014 3190                        00            .byte	0
14015 3191                        FF            .byte	$FF
14016 3192                        18            .byte	$18
14017 3193                        18            .byte	$18
14018 3194                        18            .byte	$18
14019 3195                        18            .byte	$18
14020 3196                        18            .byte	$18
14021 3197                        18            .byte	$18
14022 3198                        18            .byte	$18
14023 3199                        18            .byte	$18
14024                                           ! 1604  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14025 319A                        18            .byte	$18
14026 319B                        18            .byte	$18
14027 319C                        18            .byte	$18
14028 319D                        18            .byte	$18
14029 319E                        18            .byte	$18
14030 319F                        18            .byte	$18
14031 31A0                        18            .byte	$18
14032 31A1                        1F            .byte	$1F
14033 31A2                        18            .byte	$18
14034 31A3                        18            .byte	$18
14035 31A4                        18            .byte	$18
14036 31A5                        18            .byte	$18
14037 31A6                        18            .byte	$18
14038 31A7                        18            .byte	$18
14039 31A8                        18            .byte	$18
14040 31A9                        18            .byte	$18
14041                                           ! 1605  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14042 31AA                        00            .byte	0
14043 31AB                        00            .byte	0
14044 31AC                        00            .byte	0
14045 31AD                        00            .byte	0
14046 31AE                        00            .byte	0
14047 31AF                        00            .byte	0
14048 31B0                        00            .byte	0
14049 31B1                        FF            .byte	$FF
14050 31B2                        00            .byte	0
14051 31B3                        00            .byte	0
14052 31B4                        00            .byte	0
14053 31B5                        00            .byte	0
14054 31B6                        00            .byte	0
14055 31B7                        00            .byte	0
14056 31B8                        00            .byte	0
14057 31B9                        00            .byte	0
14058                                           ! 1606  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14059 31BA                        18            .byte	$18
14060 31BB                        18            .byte	$18
14061 31BC                        18            .byte	$18
14062 31BD                        18            .byte	$18
14063 31BE                        18            .byte	$18
14064 31BF                        18            .byte	$18
14065 31C0                        18            .byte	$18
14066 31C1                        FF            .byte	$FF
14067 31C2                        18            .byte	$18
14068 31C3                        18            .byte	$18
14069 31C4                        18            .byte	$18
14070 31C5                        18            .byte	$18
14071 31C6                        18            .byte	$18
14072 31C7                        18            .byte	$18
14073 31C8                        18            .byte	$18
14074 31C9                        18            .byte	$18
14075                                           ! 1607  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14076 31CA                        18            .byte	$18
14077 31CB                        18            .byte	$18
14078 31CC                        18            .byte	$18
14079 31CD                        18            .byte	$18
14080 31CE                        18            .byte	$18
14081 31CF                        1F            .byte	$1F
14082 31D0                        18            .byte	$18
14083 31D1                        1F            .byte	$1F
14084 31D2                        18            .byte	$18
14085 31D3                        18            .byte	$18
14086 31D4                        18            .byte	$18
14087 31D5                        18            .byte	$18
14088 31D6                        18            .byte	$18
14089 31D7                        18            .byte	$18
14090 31D8                        18            .byte	$18
14091 31D9                        18            .byte	$18
14092                                           ! 1608  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14093 31DA                        36            .byte	$36
14094 31DB                        36            .byte	$36
14095 31DC                        36            .byte	$36
14096 31DD                        36            .byte	$36
14097 31DE                        36            .byte	$36
14098 31DF                        36            .byte	$36
14099 31E0                        36            .byte	$36
14100 31E1                        37            .byte	$37
14101 31E2                        36            .byte	$36
14102 31E3                        36            .byte	$36
14103 31E4                        36            .byte	$36
14104 31E5                        36            .byte	$36
14105 31E6                        36            .byte	$36
14106 31E7                        36            .byte	$36
14107 31E8                        36            .byte	$36
14108 31E9                        36            .byte	$36
14109                                           ! 1609  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14110 31EA                        36            .byte	$36
14111 31EB                        36            .byte	$36
14112 31EC                        36            .byte	$36
14113 31ED                        36            .byte	$36
14114 31EE                        36            .byte	$36
14115 31EF                        37            .byte	$37
14116 31F0                        30            .byte	$30
14117 31F1                        3F            .byte	$3F
14118 31F2                        00            .byte	0
14119 31F3                        00            .byte	0
14120 31F4                        00            .byte	0
14121 31F5                        00            .byte	0
14122 31F6                        00            .byte	0
14123 31F7                        00            .byte	0
14124 31F8                        00            .byte	0
14125 31F9                        00            .byte	0
14126                                           ! 1610  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0
14127 31FA                        00            .byte	0
14128 31FB                        00            .byte	0
14129 31FC                        00            .byte	0
14130 31FD                        00            .byte	0
14131 31FE                        00            .byte	0
14132 31FF                        3F            .byte	$3F
14133 3200                        30            .byte	$30
14134 3201                        37            .byte	$37
14135 3202                        36            .byte	$36
14136                                           ! 1610 x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14137 3203                        36            .byte	$36
14138 3204                        36            .byte	$36
14139 3205                        36            .byte	$36
14140 3206                        36            .byte	$36
14141 3207                        36            .byte	$36
14142 3208                        36            .byte	$36
14143 3209                        36            .byte	$36
14144                                           ! 1611  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14145 320A                        36            .byte	$36
14146 320B                        36            .byte	$36
14147 320C                        36            .byte	$36
14148 320D                        36            .byte	$36
14149 320E                        36            .byte	$36
14150 320F                        F7            .byte	$F7
14151 3210                        00            .byte	0
14152 3211                        FF            .byte	$FF
14153 3212                        00            .byte	0
14154 3213                        00            .byte	0
14155 3214                        00            .byte	0
14156 3215                        00            .byte	0
14157 3216                        00            .byte	0
14158 3217                        00            .byte	0
14159 3218                        00            .byte	0
14160 3219                        00            .byte	0
14161                                           ! 1612  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14162 321A                        00            .byte	0
14163 321B                        00            .byte	0
14164 321C                        00            .byte	0
14165 321D                        00            .byte	0
14166 321E                        00            .byte	0
14167 321F                        FF            .byte	$FF
14168 3220                        00            .byte	0
14169 3221                        F7            .byte	$F7
14170 3222                        36            .byte	$36
14171 3223                        36            .byte	$36
14172 3224                        36            .byte	$36
14173 3225                        36            .byte	$36
14174 3226                        36            .byte	$36
14175 3227                        36            .byte	$36
14176 3228                        36            .byte	$36
14177 3229                        36            .byte	$36
14178                                           ! 1613  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14179 322A                        36            .byte	$36
14180 322B                        36            .byte	$36
14181 322C                        36            .byte	$36
14182 322D                        36            .byte	$36
14183 322E                        36            .byte	$36
14184 322F                        37            .byte	$37
14185 3230                        30            .byte	$30
14186 3231                        37            .byte	$37
14187 3232                        36            .byte	$36
14188 3233                        36            .byte	$36
14189 3234                        36            .byte	$36
14190 3235                        36            .byte	$36
14191 3236                        36            .byte	$36
14192 3237                        36            .byte	$36
14193 3238                        36            .byte	$36
14194 3239                        36            .byte	$36
14195                                           ! 1614  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14196 323A                        00            .byte	0
14197 323B                        00            .byte	0
14198 323C                        00            .byte	0
14199 323D                        00            .byte	0
14200 323E                        00            .byte	0
14201 323F                        FF            .byte	$FF
14202 3240                        00            .byte	0
14203 3241                        FF            .byte	$FF
14204 3242                        00            .byte	0
14205 3243                        00            .byte	0
14206 3244                        00            .byte	0
14207 3245                        00            .byte	0
14208 3246                        00            .byte	0
14209 3247                        00            .byte	0
14210 3248                        00            .byte	0
14211 3249                        00            .byte	0
14212                                           ! 1615  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14213 324A                        36            .byte	$36
14214 324B                        36            .byte	$36
14215 324C                        36            .byte	$36
14216 324D                        36            .byte	$36
14217 324E                        36            .byte	$36
14218 324F                        F7            .byte	$F7
14219 3250                        00            .byte	0
14220 3251                        F7            .byte	$F7
14221 3252                        36            .byte	$36
14222 3253                        36            .byte	$36
14223 3254                        36            .byte	$36
14224 3255                        36            .byte	$36
14225 3256                        36            .byte	$36
14226 3257                        36            .byte	$36
14227 3258                        36            .byte	$36
14228 3259                        36            .byte	$36
14229                                           ! 1616  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14230 325A                        18            .byte	$18
14231 325B                        18            .byte	$18
14232 325C                        18            .byte	$18
14233 325D                        18            .byte	$18
14234 325E                        18            .byte	$18
14235 325F                        FF            .byte	$FF
14236 3260                        00            .byte	0
14237 3261                        FF            .byte	$FF
14238 3262                        00            .byte	0
14239 3263                        00            .byte	0
14240 3264                        00            .byte	0
14241 3265                        00            .byte	0
14242 3266                        00            .byte	0
14243 3267                        00            .byte	0
14244 3268                        00            .byte	0
14245 3269                        00            .byte	0
14246                                           ! 1617  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14247 326A                        36            .byte	$36
14248 326B                        36            .byte	$36
14249 326C                        36            .byte	$36
14250 326D                        36            .byte	$36
14251 326E                        36            .byte	$36
14252 326F                        36            .byte	$36
14253 3270                        36            .byte	$36
14254 3271                        FF            .byte	$FF
14255 3272                        00            .byte	0
14256 3273                        00            .byte	0
14257 3274                        00            .byte	0
14258 3275                        00            .byte	0
14259 3276                        00            .byte	0
14260 3277                        00            .byte	0
14261 3278                        00            .byte	0
14262 3279                        00            .byte	0
14263                                           ! 1618  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14264 327A                        00            .byte	0
14265 327B                        00            .byte	0
14266 327C                        00            .byte	0
14267 327D                        00            .byte	0
14268 327E                        00            .byte	0
14269 327F                        FF            .byte	$FF
14270 3280                        00            .byte	0
14271 3281                        FF            .byte	$FF
14272 3282                        18            .byte	$18
14273 3283                        18            .byte	$18
14274 3284                        18            .byte	$18
14275 3285                        18            .byte	$18
14276 3286                        18            .byte	$18
14277 3287                        18            .byte	$18
14278 3288                        18            .byte	$18
14279 3289                        18            .byte	$18
14280                                           ! 1619  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14281 328A                        00            .byte	0
14282 328B                        00            .byte	0
14283 328C                        00            .byte	0
14284 328D                        00            .byte	0
14285 328E                        00            .byte	0
14286 328F                        00            .byte	0
14287 3290                        00            .byte	0
14288 3291                        FF            .byte	$FF
14289 3292                        36            .byte	$36
14290 3293                        36            .byte	$36
14291 3294                        36            .byte	$36
14292 3295                        36            .byte	$36
14293 3296                        36            .byte	$36
14294 3297                        36            .byte	$36
14295 3298                        36            .byte	$36
14296 3299                        36            .byte	$36
14297                                           ! 1620  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14298 329A                        36            .byte	$36
14299 329B                        36            .byte	$36
14300 329C                        36            .byte	$36
14301 329D                        36            .byte	$36
14302 329E                        36            .byte	$36
14303 329F                        36            .byte	$36
14304 32A0                        36            .byte	$36
14305 32A1                        3F            .byte	$3F
14306 32A2                        00            .byte	0
14307 32A3                        00            .byte	0
14308 32A4                        00            .byte	0
14309 32A5                        00            .byte	0
14310 32A6                        00            .byte	0
14311 32A7                        00            .byte	0
14312 32A8                        00            .byte	0
14313 32A9                        00            .byte	0
14314                                           ! 1621  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14315 32AA                        18            .byte	$18
14316 32AB                        18            .byte	$18
14317 32AC                        18            .byte	$18
14318 32AD                        18            .byte	$18
14319 32AE                        18            .byte	$18
14320 32AF                        1F            .byte	$1F
14321 32B0                        18            .byte	$18
14322 32B1                        1F            .byte	$1F
14323 32B2                        00            .byte	0
14324 32B3                        00            .byte	0
14325 32B4                        00            .byte	0
14326 32B5                        00            .byte	0
14327 32B6                        00            .byte	0
14328 32B7                        00            .byte	0
14329 32B8                        00            .byte	0
14330 32B9                        00            .byte	0
14331                                           ! 1622  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14332 32BA                        00            .byte	0
14333 32BB                        00            .byte	0
14334 32BC                        00            .byte	0
14335 32BD                        00            .byte	0
14336 32BE                        00            .byte	0
14337 32BF                        1F            .byte	$1F
14338 32C0                        18            .byte	$18
14339 32C1                        1F            .byte	$1F
14340 32C2                        18            .byte	$18
14341 32C3                        18            .byte	$18
14342 32C4                        18            .byte	$18
14343 32C5                        18            .byte	$18
14344 32C6                        18            .byte	$18
14345 32C7                        18            .byte	$18
14346 32C8                        18            .byte	$18
14347 32C9                        18            .byte	$18
14348                                           ! 1623  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14349 32CA                        00            .byte	0
14350 32CB                        00            .byte	0
14351 32CC                        00            .byte	0
14352 32CD                        00            .byte	0
14353 32CE                        00            .byte	0
14354 32CF                        00            .byte	0
14355 32D0                        00            .byte	0
14356 32D1                        3F            .byte	$3F
14357 32D2                        36            .byte	$36
14358 32D3                        36            .byte	$36
14359 32D4                        36            .byte	$36
14360 32D5                        36            .byte	$36
14361 32D6                        36            .byte	$36
14362 32D7                        36            .byte	$36
14363 32D8                        36            .byte	$36
14364 32D9                        36            .byte	$36
14365                                           ! 1624  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14366 32DA                        36            .byte	$36
14367 32DB                        36            .byte	$36
14368 32DC                        36            .byte	$36
14369 32DD                        36            .byte	$36
14370 32DE                        36            .byte	$36
14371 32DF                        36            .byte	$36
14372 32E0                        36            .byte	$36
14373 32E1                        FF            .byte	$FF
14374 32E2                        36            .byte	$36
14375 32E3                        36            .byte	$36
14376 32E4                        36            .byte	$36
14377 32E5                        36            .byte	$36
14378 32E6                        36            .byte	$36
14379 32E7                        36            .byte	$36
14380 32E8                        36            .byte	$36
14381 32E9                        36            .byte	$36
14382                                           ! 1625  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14383 32EA                        18            .byte	$18
14384 32EB                        18            .byte	$18
14385 32EC                        18            .byte	$18
14386 32ED                        18            .byte	$18
14387 32EE                        18            .byte	$18
14388 32EF                        FF            .byte	$FF
14389 32F0                        18            .byte	$18
14390 32F1                        FF            .byte	$FF
14391 32F2                        18            .byte	$18
14392 32F3                        18            .byte	$18
14393 32F4                        18            .byte	$18
14394 32F5                        18            .byte	$18
14395 32F6                        18            .byte	$18
14396 32F7                        18            .byte	$18
14397 32F8                        18            .byte	$18
14398 32F9                        18            .byte	$18
14399                                           ! 1626  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14400 32FA                        18            .byte	$18
14401 32FB                        18            .byte	$18
14402 32FC                        18            .byte	$18
14403 32FD                        18            .byte	$18
14404 32FE                        18            .byte	$18
14405 32FF                        18            .byte	$18
14406 3300                        18            .byte	$18
14407 3301                        F8            .byte	$F8
14408 3302                        00            .byte	0
14409 3303                        00            .byte	0
14410 3304                        00            .byte	0
14411 3305                        00            .byte	0
14412 3306                        00            .byte	0
14413 3307                        00            .byte	0
14414 3308                        00            .byte	0
14415 3309                        00            .byte	0
14416                                           ! 1627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14417 330A                        00            .byte	0
14418 330B                        00            .byte	0
14419 330C                        00            .byte	0
14420 330D                        00            .byte	0
14421 330E                        00            .byte	0
14422 330F                        00            .byte	0
14423 3310                        00            .byte	0
14424 3311                        1F            .byte	$1F
14425 3312                        18            .byte	$18
14426 3313                        18            .byte	$18
14427 3314                        18            .byte	$18
14428 3315                        18            .byte	$18
14429 3316                        18            .byte	$18
14430 3317                        18            .byte	$18
14431 3318                        18            .byte	$18
14432 3319                        18            .byte	$18
14433                                           ! 1628  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14434 331A                        FF            .byte	$FF
14435 331B                        FF            .byte	$FF
14436 331C                        FF            .byte	$FF
14437 331D                        FF            .byte	$FF
14438 331E                        FF            .byte	$FF
14439 331F                        FF            .byte	$FF
14440 3320                        FF            .byte	$FF
14441 3321                        FF            .byte	$FF
14442 3322                        FF            .byte	$FF
14443 3323                        FF            .byte	$FF
14444 3324                        FF            .byte	$FF
14445 3325                        FF            .byte	$FF
14446 3326                        FF            .byte	$FF
14447 3327                        FF            .byte	$FF
14448 3328                        FF            .byte	$FF
14449 3329                        FF            .byte	$FF
14450                                           ! 1629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14451 332A                        00            .byte	0
14452 332B                        00            .byte	0
14453 332C                        00            .byte	0
14454 332D                        00            .byte	0
14455 332E                        00            .byte	0
14456 332F                        00            .byte	0
14457 3330                        00            .byte	0
14458 3331                        FF            .byte	$FF
14459 3332                        FF            .byte	$FF
14460 3333                        FF            .byte	$FF
14461 3334                        FF            .byte	$FF
14462 3335                        FF            .byte	$FF
14463 3336                        FF            .byte	$FF
14464 3337                        FF            .byte	$FF
14465 3338                        FF            .byte	$FF
14466 3339                        FF            .byte	$FF
14467                                           ! 1630  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14468 333A                        F0            .byte	$F0
14469 333B                        F0            .byte	$F0
14470 333C                        F0            .byte	$F0
14471 333D                        F0            .byte	$F0
14472 333E                        F0            .byte	$F0
14473 333F                        F0            .byte	$F0
14474 3340                        F0            .byte	$F0
14475 3341                        F0            .byte	$F0
14476 3342                        F0            .byte	$F0
14477 3343                        F0            .byte	$F0
14478 3344                        F0            .byte	$F0
14479 3345                        F0            .byte	$F0
14480 3346                        F0            .byte	$F0
14481 3347                        F0            .byte	$F0
14482 3348                        F0            .byte	$F0
14483 3349                        F0            .byte	$F0
14484                                           ! 1631  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 
14485 334A                        0F            .byte	$F
14486 334B                        0F            .byte	$F
14487 334C                        0F            .byte	$F
14488 334D                        0F            .byte	$F
14489 334E                        0F            .byte	$F
14490 334F                        0F            .byte	$F
14491 3350                        0F            .byte	$F
14492 3351                        0F            .byte	$F
14493 3352                        0F            .byte	$F
14494 3353                        0F            .byte	$F
14495 3354                        0F            .byte	$F
14496                                           ! 1631 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14497 3355                        0F            .byte	$F
14498 3356                        0F            .byte	$F
14499 3357                        0F            .byte	$F
14500 3358                        0F            .byte	$F
14501 3359                        0F            .byte	$F
14502                                           ! 1632  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14503 335A                        FF            .byte	$FF
14504 335B                        FF            .byte	$FF
14505 335C                        FF            .byte	$FF
14506 335D                        FF            .byte	$FF
14507 335E                        FF            .byte	$FF
14508 335F                        FF            .byte	$FF
14509 3360                        FF            .byte	$FF
14510 3361                        00            .byte	0
14511 3362                        00            .byte	0
14512 3363                        00            .byte	0
14513 3364                        00            .byte	0
14514 3365                        00            .byte	0
14515 3366                        00            .byte	0
14516 3367                        00            .byte	0
14517 3368                        00            .byte	0
14518 3369                        00            .byte	0
14519                                           ! 1633  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14520 336A                        00            .byte	0
14521 336B                        00            .byte	0
14522 336C                        00            .byte	0
14523 336D                        00            .byte	0
14524 336E                        00            .byte	0
14525 336F                        76            .byte	$76
14526 3370                        DC            .byte	$DC
14527 3371                        D8            .byte	$D8
14528 3372                        D8            .byte	$D8
14529 3373                        D8            .byte	$D8
14530 3374                        DC            .byte	$DC
14531 3375                        76            .byte	$76
14532 3376                        00            .byte	0
14533 3377                        00            .byte	0
14534 3378                        00            .byte	0
14535 3379                        00            .byte	0
14536                                           ! 1634  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14537 337A                        00            .byte	0
14538 337B                        00            .byte	0
14539 337C                        78            .byte	$78
14540 337D                        CC            .byte	$CC
14541 337E                        CC            .byte	$CC
14542 337F                        CC            .byte	$CC
14543 3380                        D8            .byte	$D8
14544 3381                        CC            .byte	$CC
14545 3382                        C6            .byte	$C6
14546 3383                        C6            .byte	$C6
14547 3384                        C6            .byte	$C6
14548 3385                        CC            .byte	$CC
14549 3386                        00            .byte	0
14550 3387                        00            .byte	0
14551 3388                        00            .byte	0
14552 3389                        00            .byte	0
14553                                           ! 1635  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14554 338A                        00            .byte	0
14555 338B                        00            .byte	0
14556 338C                        FE            .byte	$FE
14557 338D                        C6            .byte	$C6
14558 338E                        C6            .byte	$C6
14559 338F                        C0            .byte	$C0
14560 3390                        C0            .byte	$C0
14561 3391                        C0            .byte	$C0
14562 3392                        C0            .byte	$C0
14563 3393                        C0            .byte	$C0
14564 3394                        C0            .byte	$C0
14565 3395                        C0            .byte	$C0
14566 3396                        00            .byte	0
14567 3397                        00            .byte	0
14568 3398                        00            .byte	0
14569 3399                        00            .byte	0
14570                                           ! 1636  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14571 339A                        00            .byte	0
14572 339B                        00            .byte	0
14573 339C                        00            .byte	0
14574 339D                        00            .byte	0
14575 339E                        FE            .byte	$FE
14576 339F                        6C            .byte	$6C
14577 33A0                        6C            .byte	$6C
14578 33A1                        6C            .byte	$6C
14579 33A2                        6C            .byte	$6C
14580 33A3                        6C            .byte	$6C
14581 33A4                        6C            .byte	$6C
14582 33A5                        6C            .byte	$6C
14583 33A6                        00            .byte	0
14584 33A7                        00            .byte	0
14585 33A8                        00            .byte	0
14586 33A9                        00            .byte	0
14587                                           ! 1637  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14588 33AA                        00            .byte	0
14589 33AB                        00            .byte	0
14590 33AC                        00            .byte	0
14591 33AD                        FE            .byte	$FE
14592 33AE                        C6            .byte	$C6
14593 33AF                        60            .byte	$60
14594 33B0                        30            .byte	$30
14595 33B1                        18            .byte	$18
14596 33B2                        30            .byte	$30
14597 33B3                        60            .byte	$60
14598 33B4                        C6            .byte	$C6
14599 33B5                        FE            .byte	$FE
14600 33B6                        00            .byte	0
14601 33B7                        00            .byte	0
14602 33B8                        00            .byte	0
14603 33B9                        00            .byte	0
14604                                           ! 1638  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14605 33BA                        00            .byte	0
14606 33BB                        00            .byte	0
14607 33BC                        00            .byte	0
14608 33BD                        00            .byte	0
14609 33BE                        00            .byte	0
14610 33BF                        7E            .byte	$7E
14611 33C0                        D8            .byte	$D8
14612 33C1                        D8            .byte	$D8
14613 33C2                        D8            .byte	$D8
14614 33C3                        D8            .byte	$D8
14615 33C4                        D8            .byte	$D8
14616 33C5                        70            .byte	$70
14617 33C6                        00            .byte	0
14618 33C7                        00            .byte	0
14619 33C8                        00            .byte	0
14620 33C9                        00            .byte	0
14621                                           ! 1639  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14622 33CA                        00            .byte	0
14623 33CB                        00            .byte	0
14624 33CC                        00            .byte	0
14625 33CD                        00            .byte	0
14626 33CE                        66            .byte	$66
14627 33CF                        66            .byte	$66
14628 33D0                        66            .byte	$66
14629 33D1                        66            .byte	$66
14630 33D2                        66            .byte	$66
14631 33D3                        7C            .byte	$7C
14632 33D4                        60            .byte	$60
14633 33D5                        60            .byte	$60
14634 33D6                        C0            .byte	$C0
14635 33D7                        00            .byte	0
14636 33D8                        00            .byte	0
14637 33D9                        00            .byte	0
14638                                           ! 1640  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14639 33DA                        00            .byte	0
14640 33DB                        00            .byte	0
14641 33DC                        00            .byte	0
14642 33DD                        00            .byte	0
14643 33DE                        76            .byte	$76
14644 33DF                        DC            .byte	$DC
14645 33E0                        18            .byte	$18
14646 33E1                        18            .byte	$18
14647 33E2                        18            .byte	$18
14648 33E3                        18            .byte	$18
14649 33E4                        18            .byte	$18
14650 33E5                        18            .byte	$18
14651 33E6                        00            .byte	0
14652 33E7                        00            .byte	0
14653 33E8                        00            .byte	0
14654 33E9                        00            .byte	0
14655                                           ! 1641  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14656 33EA                        00            .byte	0
14657 33EB                        00            .byte	0
14658 33EC                        00            .byte	0
14659 33ED                        7E            .byte	$7E
14660 33EE                        18            .byte	$18
14661 33EF                        3C            .byte	$3C
14662 33F0                        66            .byte	$66
14663 33F1                        66            .byte	$66
14664 33F2                        66            .byte	$66
14665 33F3                        3C            .byte	$3C
14666 33F4                        18            .byte	$18
14667 33F5                        7E            .byte	$7E
14668 33F6                        00            .byte	0
14669 33F7                        00            .byte	0
14670 33F8                        00            .byte	0
14671 33F9                        00            .byte	0
14672                                           ! 1642  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14673 33FA                        00            .byte	0
14674 33FB                        00            .byte	0
14675 33FC                        00            .byte	0
14676 33FD                        38            .byte	$38
14677 33FE                        6C            .byte	$6C
14678 33FF                        C6            .byte	$C6
14679 3400                        C6            .byte	$C6
14680 3401                        FE            .byte	$FE
14681 3402                        C6            .byte	$C6
14682 3403                        C6            .byte	$C6
14683 3404                        6C            .byte	$6C
14684 3405                        38            .byte	$38
14685 3406                        00            .byte	0
14686 3407                        00            .byte	0
14687 3408                        00            .byte	0
14688 3409                        00            .byte	0
14689                                           ! 1643  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14690 340A                        00            .byte	0
14691 340B                        00            .byte	0
14692 340C                        38            .byte	$38
14693 340D                        6C            .byte	$6C
14694 340E                        C6            .byte	$C6
14695 340F                        C6            .byte	$C6
14696 3410                        C6            .byte	$C6
14697 3411                        6C            .byte	$6C
14698 3412                        6C            .byte	$6C
14699 3413                        6C            .byte	$6C
14700 3414                        6C            .byte	$6C
14701 3415                        EE            .byte	$EE
14702 3416                        00            .byte	0
14703 3417                        00            .byte	0
14704 3418                        00            .byte	0
14705 3419                        00            .byte	0
14706                                           ! 1644  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14707 341A                        00            .byte	0
14708 341B                        00            .byte	0
14709 341C                        1E            .byte	$1E
14710 341D                        30            .byte	$30
14711 341E                        18            .byte	$18
14712 341F                        0C            .byte	$C
14713 3420                        3E            .byte	$3E
14714 3421                        66            .byte	$66
14715 3422                        66            .byte	$66
14716 3423                        66            .byte	$66
14717 3424                        66            .byte	$66
14718 3425                        3C            .byte	$3C
14719 3426                        00            .byte	0
14720 3427                        00            .byte	0
14721 3428                        00            .byte	0
14722 3429                        00            .byte	0
14723                                           ! 1645  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14724 342A                        00            .byte	0
14725 342B                        00            .byte	0
14726 342C                        00            .byte	0
14727 342D                        00            .byte	0
14728 342E                        00            .byte	0
14729 342F                        7E            .byte	$7E
14730 3430                        DB            .byte	$DB
14731 3431                        DB            .byte	$DB
14732 3432                        DB            .byte	$DB
14733 3433                        7E            .byte	$7E
14734 3434                        00            .byte	0
14735 3435                        00            .byte	0
14736 3436                        00            .byte	0
14737 3437                        00            .byte	0
14738 3438                        00            .byte	0
14739 3439                        00            .byte	0
14740                                           ! 1646  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14741 343A                        00            .byte	0
14742 343B                        00            .byte	0
14743 343C                        00            .byte	0
14744 343D                        03            .byte	3
14745 343E                        06            .byte	6
14746 343F                        7E            .byte	$7E
14747 3440                        DB            .byte	$DB
14748 3441                        DB            .byte	$DB
14749 3442                        F3            .byte	$F3
14750 3443                        7E            .byte	$7E
14751 3444                        60            .byte	$60
14752 3445                        C0            .byte	$C0
14753 3446                        00            .byte	0
14754 3447                        00            .byte	0
14755 3448                        00            .byte	0
14756 3449                        00            .byte	0
14757                                           ! 1647  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14758 344A                        00            .byte	0
14759 344B                        00            .byte	0
14760 344C                        1C            .byte	$1C
14761 344D                        30            .byte	$30
14762 344E                        60            .byte	$60
14763 344F                        60            .byte	$60
14764 3450                        7C            .byte	$7C
14765 3451                        60            .byte	$60
14766 3452                        60            .byte	$60
14767 3453                        60            .byte	$60
14768 3454                        30            .byte	$30
14769 3455                        1C            .byte	$1C
14770 3456                        00            .byte	0
14771 3457                        00            .byte	0
14772 3458                        00            .byte	0
14773 3459                        00            .byte	0
14774                                           ! 1648  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14775 345A                        00            .byte	0
14776 345B                        00            .byte	0
14777 345C                        00            .byte	0
14778 345D                        7C            .byte	$7C
14779 345E                        C6            .byte	$C6
14780 345F                        C6            .byte	$C6
14781 3460                        C6            .byte	$C6
14782 3461                        C6            .byte	$C6
14783 3462                        C6            .byte	$C6
14784 3463                        C6            .byte	$C6
14785 3464                        C6            .byte	$C6
14786 3465                        C6            .byte	$C6
14787 3466                        00            .byte	0
14788 3467                        00            .byte	0
14789 3468                        00            .byte	0
14790 3469                        00            .byte	0
14791                                           ! 1649  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14792 346A                        00            .byte	0
14793 346B                        00            .byte	0
14794 346C                        00            .byte	0
14795 346D                        00            .byte	0
14796 346E                        FE            .byte	$FE
14797 346F                        00            .byte	0
14798 3470                        00            .byte	0
14799 3471                        FE            .byte	$FE
14800 3472                        00            .byte	0
14801 3473                        00            .byte	0
14802 3474                        FE            .byte	$FE
14803 3475                        00            .byte	0
14804 3476                        00            .byte	0
14805 3477                        00            .byte	0
14806 3478                        00            .byte	0
14807 3479                        00            .byte	0
14808                                           ! 1650  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14809 347A                        00            .byte	0
14810 347B                        00            .byte	0
14811 347C                        00            .byte	0
14812 347D                        00            .byte	0
14813 347E                        18            .byte	$18
14814 347F                        18            .byte	$18
14815 3480                        7E            .byte	$7E
14816 3481                        18            .byte	$18
14817 3482                        18            .byte	$18
14818 3483                        00            .byte	0
14819 3484                        00            .byte	0
14820 3485                        FF            .byte	$FF
14821 3486                        00            .byte	0
14822 3487                        00            .byte	0
14823 3488                        00            .byte	0
14824 3489                        00            .byte	0
14825                                           ! 1651  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14826 348A                        00            .byte	0
14827 348B                        00            .byte	0
14828 348C                        00            .byte	0
14829 348D                        30            .byte	$30
14830 348E                        18            .byte	$18
14831 348F                        0C            .byte	$C
14832 3490                        06            .byte	6
14833 3491                        0C            .byte	$C
14834 3492                        18            .byte	$18
14835 3493                        30            .byte	$30
14836 3494                        00            .byte	0
14837 3495                        7E            .byte	$7E
14838 3496                        00            .byte	0
14839 3497                        00            .byte	0
14840 3498                        00            .byte	0
14841 3499                        00            .byte	0
14842                                           ! 1652  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00,
14843 349A                        00            .byte	0
14844 349B                        00            .byte	0
14845 349C                        00            .byte	0
14846 349D                        0C            .byte	$C
14847 349E                        18            .byte	$18
14848 349F                        30            .byte	$30
14849 34A0                        60            .byte	$60
14850 34A1                        30            .byte	$30
14851 34A2                        18            .byte	$18
14852 34A3                        0C            .byte	$C
14853 34A4                        00            .byte	0
14854 34A5                        7E            .byte	$7E
14855                                           ! 1652  0x00, 0x00, 0x00,
14856 34A6                        00            .byte	0
14857 34A7                        00            .byte	0
14858 34A8                        00            .byte	0
14859 34A9                        00            .byte	0
14860                                           ! 1653  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14861 34AA                        00            .byte	0
14862 34AB                        00            .byte	0
14863 34AC                        0E            .byte	$E
14864 34AD                        1B            .byte	$1B
14865 34AE                        1B            .byte	$1B
14866 34AF                        18            .byte	$18
14867 34B0                        18            .byte	$18
14868 34B1                        18            .byte	$18
14869 34B2                        18            .byte	$18
14870 34B3                        18            .byte	$18
14871 34B4                        18            .byte	$18
14872 34B5                        18            .byte	$18
14873 34B6                        18            .byte	$18
14874 34B7                        18            .byte	$18
14875 34B8                        18            .byte	$18
14876 34B9                        18            .byte	$18
14877                                           ! 1654  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14878 34BA                        18            .byte	$18
14879 34BB                        18            .byte	$18
14880 34BC                        18            .byte	$18
14881 34BD                        18            .byte	$18
14882 34BE                        18            .byte	$18
14883 34BF                        18            .byte	$18
14884 34C0                        18            .byte	$18
14885 34C1                        18            .byte	$18
14886 34C2                        D8            .byte	$D8
14887 34C3                        D8            .byte	$D8
14888 34C4                        D8            .byte	$D8
14889 34C5                        70            .byte	$70
14890 34C6                        00            .byte	0
14891 34C7                        00            .byte	0
14892 34C8                        00            .byte	0
14893 34C9                        00            .byte	0
14894                                           ! 1655  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14895 34CA                        00            .byte	0
14896 34CB                        00            .byte	0
14897 34CC                        00            .byte	0
14898 34CD                        00            .byte	0
14899 34CE                        18            .byte	$18
14900 34CF                        18            .byte	$18
14901 34D0                        00            .byte	0
14902 34D1                        7E            .byte	$7E
14903 34D2                        00            .byte	0
14904 34D3                        18            .byte	$18
14905 34D4                        18            .byte	$18
14906 34D5                        00            .byte	0
14907 34D6                        00            .byte	0
14908 34D7                        00            .byte	0
14909 34D8                        00            .byte	0
14910 34D9                        00            .byte	0
14911                                           ! 1656  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14912 34DA                        00            .byte	0
14913 34DB                        00            .byte	0
14914 34DC                        00            .byte	0
14915 34DD                        00            .byte	0
14916 34DE                        00            .byte	0
14917 34DF                        76            .byte	$76
14918 34E0                        DC            .byte	$DC
14919 34E1                        00            .byte	0
14920 34E2                        76            .byte	$76
14921 34E3                        DC            .byte	$DC
14922 34E4                        00            .byte	0
14923 34E5                        00            .byte	0
14924 34E6                        00            .byte	0
14925 34E7                        00            .byte	0
14926 34E8                        00            .byte	0
14927 34E9                        00            .byte	0
14928                                           ! 1657  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14929 34EA                        00            .byte	0
14930 34EB                        38            .byte	$38
14931 34EC                        6C            .byte	$6C
14932 34ED                        6C            .byte	$6C
14933 34EE                        38            .byte	$38
14934 34EF                        00            .byte	0
14935 34F0                        00            .byte	0
14936 34F1                        00            .byte	0
14937 34F2                        00            .byte	0
14938 34F3                        00            .byte	0
14939 34F4                        00            .byte	0
14940 34F5                        00            .byte	0
14941 34F6                        00            .byte	0
14942 34F7                        00            .byte	0
14943 34F8                        00            .byte	0
14944 34F9                        00            .byte	0
14945                                           ! 1658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14946 34FA                        00            .byte	0
14947 34FB                        00            .byte	0
14948 34FC                        00            .byte	0
14949 34FD                        00            .byte	0
14950 34FE                        00            .byte	0
14951 34FF                        00            .byte	0
14952 3500                        00            .byte	0
14953 3501                        18            .byte	$18
14954 3502                        18            .byte	$18
14955 3503                        00            .byte	0
14956 3504                        00            .byte	0
14957 3505                        00            .byte	0
14958 3506                        00            .byte	0
14959 3507                        00            .byte	0
14960 3508                        00            .byte	0
14961 3509                        00            .byte	0
14962                                           ! 1659  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14963 350A                        00            .byte	0
14964 350B                        00            .byte	0
14965 350C                        00            .byte	0
14966 350D                        00            .byte	0
14967 350E                        00            .byte	0
14968 350F                        00            .byte	0
14969 3510                        00            .byte	0
14970 3511                        00            .byte	0
14971 3512                        18            .byte	$18
14972 3513                        00            .byte	0
14973 3514                        00            .byte	0
14974 3515                        00            .byte	0
14975 3516                        00            .byte	0
14976 3517                        00            .byte	0
14977 3518                        00            .byte	0
14978 3519                        00            .byte	0
14979                                           ! 1660  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14980 351A                        00            .byte	0
14981 351B                        0F            .byte	$F
14982 351C                        0C            .byte	$C
14983 351D                        0C            .byte	$C
14984 351E                        0C            .byte	$C
14985 351F                        0C            .byte	$C
14986 3520                        0C            .byte	$C
14987 3521                        EC            .byte	$EC
14988 3522                        6C            .byte	$6C
14989 3523                        6C            .byte	$6C
14990 3524                        3C            .byte	$3C
14991 3525                        1C            .byte	$1C
14992 3526                        00            .byte	0
14993 3527                        00            .byte	0
14994 3528                        00            .byte	0
14995 3529                        00            .byte	0
14996                                           ! 1661  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14997 352A                        00            .byte	0
14998 352B                        D8            .byte	$D8
14999 352C                        6C            .byte	$6C
15000 352D                        6C            .byte	$6C
15001 352E                        6C            .byte	$6C
15002 352F                        6C            .byte	$6C
15003 3530                        6C            .byte	$6C
15004 3531                        00            .byte	0
15005 3532                        00            .byte	0
15006 3533                        00            .byte	0
15007 3534                        00            .byte	0
15008 3535                        00            .byte	0
15009 3536                        00            .byte	0
15010 3537                        00            .byte	0
15011 3538                        00            .byte	0
15012 3539                        00            .byte	0
15013                                           ! 1662  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15014 353A                        00            .byte	0
15015 353B                        70            .byte	$70
15016 353C                        D8            .byte	$D8
15017 353D                        30            .byte	$30
15018 353E                        60            .byte	$60
15019 353F                        C8            .byte	$C8
15020 3540                        F8            .byte	$F8
15021 3541                        00            .byte	0
15022 3542                        00            .byte	0
15023 3543                        00            .byte	0
15024 3544                        00            .byte	0
15025 3545                        00            .byte	0
15026 3546                        00            .byte	0
15027 3547                        00            .byte	0
15028 3548                        00            .byte	0
15029 3549                        00            .byte	0
15030                                           ! 1663  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15031 354A                        00            .byte	0
15032 354B                        00            .byte	0
15033 354C                        00            .byte	0
15034 354D                        00            .byte	0
15035 354E                        7C            .byte	$7C
15036 354F                        7C            .byte	$7C
15037 3550                        7C            .byte	$7C
15038 3551                        7C            .byte	$7C
15039 3552                        7C            .byte	$7C
15040 3553                        7C            .byte	$7C
15041 3554                        7C            .byte	$7C
15042 3555                        00            .byte	0
15043 3556                        00            .byte	0
15044 3557                        00            .byte	0
15045 3558                        00            .byte	0
15046 3559                        00            .byte	0
15047                                           ! 1664  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15048 355A                        00            .byte	0
15049 355B                        00            .byte	0
15050 355C                        00            .byte	0
15051 355D                        00            .byte	0
15052 355E                        00            .byte	0
15053 355F                        00            .byte	0
15054 3560                        00            .byte	0
15055 3561                        00            .byte	0
15056 3562                        00            .byte	0
15057 3563                        00            .byte	0
15058 3564                        00            .byte	0
15059 3565                        00            .byte	0
15060 3566                        00            .byte	0
15061 3567                        00            .byte	0
15062 3568                        00            .byte	0
15063                                           ! 1665 };
15064 3569                        00            .byte	0
15065                                           !BCC_EOS
15066                                           ! 1666 static Bit8u vgafont14alt[1]={0x00};
15067                       0000356A            _vgafont14alt:
15068 356A                        00            .byte	0
15069                                           !BCC_EOS
15070                                           ! 1667 static Bit8u vgafont16alt[1]={0x00};
15071                       0000356B            _vgafont16alt:
15072 356B                        00            .byte	0
15073                                           !BCC_EOS
15074                                           ! 1668 #asm
15075                                           !BCC_ASM
15076                       0000356C            init_vga_card:
15077                                           ;; switch to color mode and enable CPU access 480 lines
15078 356C           BA                   03C2    mov dx, #0x3C2
15079 356F           B0                     C3    mov al, #0xC3
15080 3571           EE                           outb dx,al
15081                                           ;; more than 64k 3C4/04
15082 3572           BA                   03C4    mov dx, #0x3C4
15083 3575           B0                     04    mov al, #0x04
15084 3577           EE                           outb dx,al
15085 3578           BA                   03C5    mov dx, #0x3C5
15086 357B           B0                     02    mov al, #0x02
15087 357D           EE                           outb dx,al
15088 357E           BB                   3588    mov bx, #msg_vga_init
15089 3581           53                           push bx
15090 3582           E8         4860              call _printf
15091 3585           44                           inc sp
15092 3586           44                           inc sp
15093 3587           C3                           ret
15094                       00003588            msg_vga_init:
15095 3588                        56            .ascii "VGABios $Id$"
15096 3594                        0D            .byte 0x0d,0x0a,0x00
15097                                           ! 1690 endasm
15098                                           !BCC_ENDASM
15099                                           ! 1691 #asm
15100                                           !BCC_ASM
15101                       00003597            init_bios_area:
15102 3597           1E                           push ds
15103 3598           B8                   0040    mov ax, # 0x40
15104 359B           8ED8                         mov ds, ax
15105                                           ;; init detected hardware BIOS Area
15106 359D           BB                   0010    mov bx, # 0x10
15107 35A0           8B07                         mov ax, [bx]
15108 35A2           25                   FFCF    and ax, #0xffcf
15109                                           ;; set 80x25 color (not clear from RBIL but usual)
15110 35A5           0D                   0020    or ax, #0x0020
15111 35A8           8907                         mov [bx], ax
15112                                           ;; Just for the first int10 find its children
15113                                           ;; the default char height
15114 35AA           BB                   0085    mov bx, # 0x85
15115 35AD           B0                     10    mov al, #0x10
15116 35AF           8807                         mov [bx], al
15117                                           ;; Clear the screen
15118 35B1           BB                   0087    mov bx, # 0x87
15119 35B4           B0                     60    mov al, #0x60
15120 35B6           8807                         mov [bx], al
15121                                           ;; Set the basic screen we have
15122 35B8           BB                   0088    mov bx, # 0x88
15123 35BB           B0                     F9    mov al, #0xf9
15124 35BD           8807                         mov [bx], al
15125                                           ;; Set the basic modeset options
15126 35BF           BB                   0089    mov bx, # 0x89
15127 35C2           B0                     51    mov al, #0x51
15128 35C4           8807                         mov [bx], al
15129                                           ;; Set the default MSR
15130 35C6           BB                   0065    mov bx, # 0x65
15131 35C9           B0                     09    mov al, #0x09
15132 35CB           8807                         mov [bx], al
15133 35CD           1F                           pop ds
15134 35CE           C3                           ret
15135                       000035CF            _video_save_pointer_table:
15136 35CF                      029A              .word _video_param_table
15137 35D1                      C000              .word 0xc000
15138 35D3                      0000              .word 0
15139 35D5                      0000              .word 0
15140 35D7                      0000              .word 0
15141 35D9                      0000              .word 0
15142 35DB                      0000              .word 0
15143 35DD                      0000              .word 0
15144 35DF                      0000              .word 0
15145 35E1                      0000              .word 0
15146 35E3                      0000              .word 0
15147 35E5                      0000              .word 0
15148 35E7                      0000              .word 0
15149 35E9                      0000              .word 0
15150                                           ! 1741 endasm
15151                                           !BCC_ENDASM
15152                                           ! 1742 static void display_splash_screen()
15153                                           ! 1743 {
15154                                           
15155                       000035EB            _display_splash_screen:
15156                                           ! 1744 }
15157 35EB           C3                         ret
15158                                           ! 1745 static void display_info()
15159                                           ! 1746 {
15160                       000035EC            _display_info:
15161                                           ! 1747 #asm
15162                                           !BCC_ASM
15163 35EC           B8                   C000   mov ax,#0xc000
15164 35EF           8ED8                        mov ds,ax
15165 35F1           BE                   0022   mov si,#vgabios_name
15166 35F4           E8         0013             call _display_string
15167 35F7           BE                   0038   mov si,#vgabios_version
15168 35FA           E8         000D             call _display_string
15169                                            ;;mov si,#vgabios_copyright
15170                                            ;;call _display_string
15171                                            ;;mov si,#crlf
15172                                            ;;call _display_string
15173 35FD           BE                   0079   mov si,#vgabios_license
15174 3600           E8         0007             call _display_string
15175 3603           BE                   00AE   mov si,#vgabios_website
15176 3606           E8         0001             call _display_string
15177                                           ! 1762 endasm
15178                                           !BCC_ENDASM
15179                                           ! 1763 }
15180 3609           C3                         ret
15181                                           ! 1764 static void display_string()
15182                                           ! 1765 {
15183                       0000360A            _display_string:
15184                                           ! 1766 #asm
15185                                           !BCC_ASM
15186 360A           8CD8                        mov ax,ds
15187 360C           8EC0                        mov es,ax
15188 360E           89F7                        mov di,si
15189 3610           31C9                        xor cx,cx
15190 3612           F7D1                        not cx
15191 3614           30C0                        xor al,al
15192 3616           FC                          cld
15193 3617           F2                          repne
15194 3618           AE                           scasb
15195 3619           F7D1                        not cx
15196 361B           49                          dec cx
15197 361C           51                          push cx
15198 361D           B8                   0300   mov ax,#0x0300
15199 3620           BB                   0000   mov bx,#0x0000
15200 3623           CD                     10   int #0x10
15201 3625           59                          pop cx
15202 3626           B8                   1301   mov ax,#0x1301
15203 3629           BB                   000B   mov bx,#0x000b
15204 362C           89F5                        mov bp,si
15205 362E           CD                     10   int #0x10
15206                                           ! 1787 endasm
15207                                           !BCC_ENDASM
15208                                           ! 1788 }
15209 3630           C3                         ret
15210                                           ! 1789 static void int10_debugmsg(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15211                                           ! 1790   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15212                       00003631            _int10_debugmsg:
15213                                           !BCC_EOS
15214                                           ! 1791 {
15215                                           ! 1792  if(( AX >> 8 )!=0x0E)
15216 3631           55                         push	bp
15217 3632           89E5                       mov	bp,sp
15218                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15219 3634           8B46         12            mov	ax,$12[bp]
15220 3637           88E0                       mov	al,ah
15221 3639           30E4                       xor	ah,ah
15222                                           ! Debug: ne int = const $E to unsigned int = ax+0 (used reg = )
15223 363B           3D                   000E  cmp	ax,*$E
15224 363E           74           20            je  	.1
15225                       00003640            .2:
15226                                           ! 1793   printf("vgabios call ah%02x al%02x bx%04x cx%04x dx%04x\n",( AX >> 8 ),( AX & 0x00ff ),BX,CX,DX);
15227                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15228 3640           FF76         0E            push	$E[bp]
15229                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15230 3643           FF76         10            push	$10[bp]
15231                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15232 3646           FF76         0C            push	$C[bp]
15233                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15234 3649           8A46         12            mov	al,$12[bp]
15235                                           ! Debug: list unsigned char = al+0 (used reg = )
15236 364C           30E4                       xor	ah,ah
15237 364E           50                         push	ax
15238                                           ! Debug: sr int = const 8 to unsigned short AX = [S+$A+$10] (used reg = )
15239 364F           8B46         12            mov	ax,$12[bp]
15240 3652           88E0                       mov	al,ah
15241 3654           30E4                       xor	ah,ah
15242                                           ! Debug: list unsigned int = ax+0 (used reg = )
15243 3656           50                         push	ax
15244                                           ! Debug: list * char = .3+0 (used reg = )
15245 3657           BB                   A5FA  mov	bx,#.3
15246 365A           53                         push	bx
15247                                           ! Debug: func () void = printf+0 (used reg = )
15248 365B           E8         4787            call	_printf
15249 365E           89EC                       mov	sp,bp
15250                                           !BCC_EOS
15251                                           ! 1794 }
15252                       00003660            .1:
15253 3660           5D                         pop	bp
15254 3661           C3                         ret
15255                                           ! 1795 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15256                                           ! Register BX used in function int10_debugmsg
15257                                           ! 1796   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15258                       00003662            _int10_func:
15259                                           !BCC_EOS
15260                                           ! 1797 {
15261                                           ! 1798  switch(( AX >> 8 ))
15262 3662           55                         push	bp
15263 3663           89E5                       mov	bp,sp
15264                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15265 3665           8B46         12            mov	ax,$12[bp]
15266 3668           88E0                       mov	al,ah
15267 366A           30E4                       xor	ah,ah
15268                                           ! 1799   {
15269 366C           E9         04F5            br 	.6
15270                                           ! 1800    case 0x00:
15271                                           ! 1801      biosfn_set_video_mode(( AX & 0x00ff ));
15272                       0000366F            .7:
15273                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15274 366F           8A46         12            mov	al,$12[bp]
15275                                           ! Debug: list unsigned char = al+0 (used reg = )
15276 3672           30E4                       xor	ah,ah
15277 3674           50                         push	ax
15278                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15279 3675           E8         0544            call	_biosfn_set_video_mode
15280 3678           44                         inc	sp
15281 3679           44                         inc	sp
15282                                           !BCC_EOS
15283                                           ! 1802      switch(( AX & 0x00ff )&0x7F)
15284                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15285 367A           8A46         12            mov	al,$12[bp]
15286                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15287 367D           24                     7F  and	al,*$7F
15288                                           ! 1803       {case 6:
15289 367F           EB           24            jmp .A
15290                                           ! 1804         AX = ((AX & 0xff00) | (0x3F));
15291                       00003681            .B:
15292                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15293 3681           8B46         12            mov	ax,$12[bp]
15294 3684           30C0                       xor	al,al
15295                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15296 3686           0C                     3F  or	al,*$3F
15297                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15298 3688           8946         12            mov	$12[bp],ax
15299                                           !BCC_EOS
15300                                           ! 1805         break;
15301 368B           EB           3D            jmp .8
15302                                           !BCC_EOS
15303                                           ! 1806        case 0:
15304                                           ! 1807        case 1:
15305                       0000368D            .C:
15306                                           ! 1808        case 2:
15307                       0000368D            .D:
15308                                           ! 1809        case 3:
15309                       0000368D            .E:
15310                                           ! 1810        case 4:
15311                       0000368D            .F:
15312                                           ! 1811        case 5:
15313                       0000368D            .10:
15314                                           ! 1812        case 7:
15315                       0000368D            .11:
15316                                           ! 1813         AX = ((AX & 0xff00) | (0x30));
15317                       0000368D            .12:
15318                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15319 368D           8B46         12            mov	ax,$12[bp]
15320 3690           30C0                       xor	al,al
15321                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15322 3692           0C                     30  or	al,*$30
15323                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15324 3694           8946         12            mov	$12[bp],ax
15325                                           !BCC_EOS
15326                                           ! 1814         break;
15327 3697           EB           31            jmp .8
15328                                           !BCC_EOS
15329                                           ! 1815       default:
15330                                           ! 1816         AX = ((AX & 0xff00) | (0x20));
15331                       00003699            .13:
15332                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15333 3699           8B46         12            mov	ax,$12[bp]
15334 369C           30C0                       xor	al,al
15335                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15336 369E           0C                     20  or	al,*$20
15337                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15338 36A0           8946         12            mov	$12[bp],ax
15339                                           !BCC_EOS
15340                                           ! 1817       }
15341                                           ! 1818      break;
15342 36A3           EB           25            jmp .8
15343                       000036A5            .A:
15344 36A5           2C                     00  sub	al,*0
15345 36A7           72           F0            jb 	.13
15346 36A9           3C                     07  cmp	al,*7
15347 36AB           77           1B            ja  	.14
15348 36AD           30E4                       xor	ah,ah
15349 36AF           D1E0                       shl	ax,*1
15350 36B1           89C3                       mov	bx,ax
15351 36B3           2E                         seg	cs
15352 36B4           FFA7       36B8            br	.15[bx]
15353                       000036B8            .15:
15354 36B8                      368D            .word	.C
15355 36BA                      368D            .word	.D
15356 36BC                      368D            .word	.E
15357 36BE                      368D            .word	.F
15358 36C0                      368D            .word	.10
15359 36C2                      368D            .word	.11
15360 36C4                      3681            .word	.B
15361 36C6                      368D            .word	.12
15362                       000036C8            .14:
15363 36C8           EB           CF            jmp	.13
15364                       000036CA            .8:
15365 36CA           E9         04ED            br 	.4
15366                                           !BCC_EOS
15367                                           ! 1819    case 0x01:
15368                                           ! 1820      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15369                       000036CD            .16:
15370                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15371 36CD           8A46         10            mov	al,$10[bp]
15372                                           ! Debug: list unsigned char = al+0 (used reg = )
15373 36D0           30E4                       xor	ah,ah
15374 36D2           50                         push	ax
15375                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15376 36D3           8B46         10            mov	ax,$10[bp]
15377 36D6           88E0                       mov	al,ah
15378 36D8           30E4                       xor	ah,ah
15379                                           ! Debug: list unsigned int = ax+0 (used reg = )
15380 36DA           50                         push	ax
15381                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15382 36DB           E8         0B8B            call	_biosfn_set_cursor_shape
15383 36DE           83C4                   04  add	sp,*4
15384                                           !BCC_EOS
15385                                           ! 1821      break;
15386 36E1           E9         04D6            br 	.4
15387                                           !BCC_EOS
15388                                           ! 1822    case 0x02:
15389                                           ! 1823      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15390                       000036E4            .17:
15391                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15392 36E4           FF76         0E            push	$E[bp]
15393                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15394 36E7           8B46         0C            mov	ax,$C[bp]
15395 36EA           88E0                       mov	al,ah
15396 36EC           30E4                       xor	ah,ah
15397                                           ! Debug: list unsigned int = ax+0 (used reg = )
15398 36EE           50                         push	ax
15399                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15400 36EF           E8         0C92            call	_biosfn_set_cursor_pos
15401 36F2           83C4                   04  add	sp,*4
15402                                           !BCC_EOS
15403                                           ! 1824   
15404                                           ! 1824    break;
15405 36F5           E9         04C2            br 	.4
15406                                           !BCC_EOS
15407                                           ! 1825    case 0x03:
15408                                           ! 1826      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15409                       000036F8            .18:
15410                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15411 36F8           8D5E         0E            lea	bx,$E[bp]
15412 36FB           53                         push	bx
15413                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15414 36FC           8D5E         10            lea	bx,$10[bp]
15415 36FF           53                         push	bx
15416                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15417 3700           8B46         0C            mov	ax,$C[bp]
15418 3703           88E0                       mov	al,ah
15419 3705           30E4                       xor	ah,ah
15420                                           ! Debug: list unsigned int = ax+0 (used reg = )
15421 3707           50                         push	ax
15422                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15423 3708           E8         0D79            call	_biosfn_get_cursor_pos
15424 370B           83C4                   06  add	sp,*6
15425                                           !BCC_EOS
15426                                           ! 1827      break;
15427 370E           E9         04A9            br 	.4
15428                                           !BCC_EOS
15429                                           ! 1828    case 0x04:
15430                                           ! 1829      unimplemented();
15431                       00003711            .19:
15432                                           ! Debug: func () void = unimplemented+0 (used reg = )
15433 3711           E8         46B5            call	_unimplemented
15434                                           !BCC_EOS
15435                                           ! 1830      AX=0x00;
15436                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15437 3714           31C0                       xor	ax,ax
15438 3716           8946         12            mov	$12[bp],ax
15439                                           !BCC_EOS
15440                                           ! 1831      BX=0x00;
15441                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15442 3719           31C0                       xor	ax,ax
15443 371B           8946         0C            mov	$C[bp],ax
15444                                           !BCC_EOS
15445                                           ! 1832      CX=0x00;
15446                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15447 371E           31C0                       xor	ax,ax
15448 3720           8946         10            mov	$10[bp],ax
15449                                           !BCC_EOS
15450                                           ! 1833      DX=0x00;
15451                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15452 3723           31C0                       xor	ax,ax
15453 3725           8946         0E            mov	$E[bp],ax
15454                                           !BCC_EOS
15455                                           ! 1834      break;
15456 3728           E9         048F            br 	.4
15457                                           !BCC_EOS
15458                                           ! 1835    case 0x05:
15459                                           ! 1836      biosfn_set_active_page(( AX & 0x00ff ));
15460                       0000372B            .1A:
15461                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15462 372B           8A46         12            mov	al,$12[bp]
15463                                           ! Debug: list unsigned char = al+0 (used reg = )
15464 372E           30E4                       xor	ah,ah
15465 3730           50                         push	ax
15466                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15467 3731           E8         0DC5            call	_biosfn_set_active_page
15468 3734           44                         inc	sp
15469 3735           44                         inc	sp
15470                                           !BCC_EOS
15471                                           ! 1837      break;
15472 3736           E9         0481            br 	.4
15473                                           !BCC_EOS
15474                                           ! 1838    case 0x06:
15475                                           ! 1839      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15476                       00003739            .1B:
15477                                           ! Debug: list int = const 1 (used reg = )
15478 3739           B8                   0001  mov	ax,*1
15479 373C           50                         push	ax
15480                                           ! Debug: list int = const $FF (used reg = )
15481 373D           B8                   00FF  mov	ax,#$FF
15482 3740           50                         push	ax
15483                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15484 3741           8A46         0E            mov	al,$E[bp]
15485                                           ! Debug: list unsigned char = al+0 (used reg = )
15486 3744           30E4                       xor	ah,ah
15487 3746           50                         push	ax
15488                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15489 3747           8B46         0E            mov	ax,$E[bp]
15490 374A           88E0                       mov	al,ah
15491 374C           30E4                       xor	ah,ah
15492                                           ! Debug: list unsigned int = ax+0 (used reg = )
15493 374E           50                         push	ax
15494                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15495 374F           8A46         10            mov	al,$10[bp]
15496                                           ! Debug: list unsigned char = al+0 (used reg = )
15497 3752           30E4                       xor	ah,ah
15498 3754           50                         push	ax
15499                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15500 3755           8B46         10            mov	ax,$10[bp]
15501 3758           88E0                       mov	al,ah
15502 375A           30E4                       xor	ah,ah
15503                                           ! Debug: list unsigned int = ax+0 (used reg = )
15504 375C           50                         push	ax
15505                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15506 375D           8B46         0C            mov	ax,$C[bp]
15507 3760           88E0                       mov	al,ah
15508 3762           30E4                       xor	ah,ah
15509                                           ! Debug: list unsigned int = ax+0 (used reg = )
15510 3764           50                         push	ax
15511                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15512 3765           8A46         12            mov	al,$12[bp]
15513                                           ! Debug: list unsigned char = al+0 (used reg = )
15514 3768           30E4                       xor	ah,ah
15515 376A           50                         push	ax
15516                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15517 376B           E8         1221            call	_biosfn_scroll
15518 376E           83C4                   10  add	sp,*$10
15519                                           !BCC_EOS
15520                                           ! 1840      break;
15521 3771           E9         0446            br 	.4
15522                                           !BCC_EOS
15523                                           ! 1841    case 0x07:
15524                                           ! 1842      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15525                       00003774            .1C:
15526                                           ! Debug: list int = const 0 (used reg = )
15527 3774           31C0                       xor	ax,ax
15528 3776           50                         push	ax
15529                                           ! Debug: list int = const $FF (used reg = )
15530 3777           B8                   00FF  mov	ax,#$FF
15531 377A           50                         push	ax
15532                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15533 377B           8A46         0E            mov	al,$E[bp]
15534                                           ! Debug: list unsigned char = al+0 (used reg = )
15535 377E           30E4                       xor	ah,ah
15536 3780           50                         push	ax
15537                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15538 3781           8B46         0E            mov	ax,$E[bp]
15539 3784           88E0                       mov	al,ah
15540 3786           30E4                       xor	ah,ah
15541                                           ! Debug: list unsigned int = ax+0 (used reg = )
15542 3788           50                         push	ax
15543                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15544 3789           8A46         10            mov	al,$10[bp]
15545                                           ! Debug: list unsigned char = al+0 (used reg = )
15546 378C           30E4                       xor	ah,ah
15547 378E           50                         push	ax
15548                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15549 378F           8B46         10            mov	ax,$10[bp]
15550 3792           88E0                       mov	al,ah
15551 3794           30E4                       xor	ah,ah
15552                                           ! Debug: list unsigned int = ax+0 (used reg = )
15553 3796           50                         push	ax
15554                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15555 3797           8B46         0C            mov	ax,$C[bp]
15556 379A           88E0                       mov	al,ah
15557 379C           30E4                       xor	ah,ah
15558                                           ! Debug: list unsigned int = ax+0 (used reg = )
15559 379E           50                         push	ax
15560                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15561 379F           8A46         12            mov	al,$12[bp]
15562                                           ! Debug: list unsigned char = al+0 (used reg = )
15563 37A2           30E4                       xor	ah,ah
15564 37A4           50                         push	ax
15565                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15566 37A5           E8         11E7            call	_biosfn_scroll
15567 37A8           83C4                   10  add	sp,*$10
15568                                           !BCC_EOS
15569                                           ! 1843      break;
15570 37AB           E9         040C            br 	.4
15571                                           !BCC_EOS
15572                                           ! 1844    case 0x08:
15573                                           ! 1845      biosfn_read_char_attr(( BX >> 8 ),&AX);
15574                       000037AE            .1D:
15575                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15576 37AE           8D5E         12            lea	bx,$12[bp]
15577 37B1           53                         push	bx
15578                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15579 37B2           8B46         0C            mov	ax,$C[bp]
15580 37B5           88E0                       mov	al,ah
15581 37B7           30E4                       xor	ah,ah
15582                                           ! Debug: list unsigned int = ax+0 (used reg = )
15583 37B9           50                         push	ax
15584                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15585 37BA           E8         1900            call	_biosfn_read_char_attr
15586 37BD           83C4                   04  add	sp,*4
15587                                           !BCC_EOS
15588                                           ! 1846      break;
15589 37C0           E9         03F7            br 	.4
15590                                           !BCC_EOS
15591                                           ! 1847    case 0x09:
15592                                           ! 1848      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15593                       000037C3            .1E:
15594                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15595 37C3           FF76         10            push	$10[bp]
15596                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15597 37C6           8A46         0C            mov	al,$C[bp]
15598                                           ! Debug: list unsigned char = al+0 (used reg = )
15599 37C9           30E4                       xor	ah,ah
15600 37CB           50                         push	ax
15601                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15602 37CC           8B46         0C            mov	ax,$C[bp]
15603 37CF           88E0                       mov	al,ah
15604 37D1           30E4                       xor	ah,ah
15605                                           ! Debug: list unsigned int = ax+0 (used reg = )
15606 37D3           50                         push	ax
15607                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15608 37D4           8A46         12            mov	al,$12[bp]
15609                                           ! Debug: list unsigned char = al+0 (used reg = )
15610 37D7           30E4                       xor	ah,ah
15611 37D9           50                         push	ax
15612                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15613 37DA           E8         1E28            call	_biosfn_write_char_attr
15614 37DD           83C4                   08  add	sp,*8
15615                                           !BCC_EOS
15616                                           ! 1849      break;
15617 37E0           E9         03D7            br 	.4
15618                                           !BCC_EOS
15619                                           ! 1850    case 0x0A:
15620                                           ! 1851      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15621                       000037E3            .1F:
15622                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15623 37E3           FF76         10            push	$10[bp]
15624                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15625 37E6           8A46         0C            mov	al,$C[bp]
15626                                           ! Debug: list unsigned char = al+0 (used reg = )
15627 37E9           30E4                       xor	ah,ah
15628 37EB           50                         push	ax
15629                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15630 37EC           8B46         0C            mov	ax,$C[bp]
15631 37EF           88E0                       mov	al,ah
15632 37F1           30E4                       xor	ah,ah
15633                                           ! Debug: list unsigned int = ax+0 (used reg = )
15634 37F3           50                         push	ax
15635                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15636 37F4           8A46         12            mov	al,$12[bp]
15637                                           ! Debug: list unsigned char = al+0 (used reg = )
15638 37F7           30E4                       xor	ah,ah
15639 37F9           50                         push	ax
15640                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15641 37FA           E8         1FFF            call	_biosfn_write_char_only
15642 37FD           83C4                   08  add	sp,*8
15643                                           !BCC_EOS
15644                                           ! 1852      break;
15645 3800           E9         03B7            br 	.4
15646                                           !BCC_EOS
15647                                           ! 1853    case 0x0C:
15648                                           ! 1854      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15649                       00003803            .20:
15650                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15651 3803           FF76         0E            push	$E[bp]
15652                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15653 3806           FF76         10            push	$10[bp]
15654                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15655 3809           8A46         12            mov	al,$12[bp]
15656                                           ! Debug: list unsigned char = al+0 (used reg = )
15657 380C           30E4                       xor	ah,ah
15658 380E           50                         push	ax
15659                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15660 380F           8B46         0C            mov	ax,$C[bp]
15661 3812           88E0                       mov	al,ah
15662 3814           30E4                       xor	ah,ah
15663                                           ! Debug: list unsigned int = ax+0 (used reg = )
15664 3816           50                         push	ax
15665                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15666 3817           E8         2258            call	_biosfn_write_pixel
15667 381A           83C4                   08  add	sp,*8
15668                                           !BCC_EOS
15669                                           ! 1855      break;
15670 381D           E9         039A            br 	.4
15671                                           !BCC_EOS
15672                                           ! 1856    case 0x0D:
15673                                           ! 1857      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15674                       00003820            .21:
15675                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15676 3820           8D5E         12            lea	bx,$12[bp]
15677 3823           53                         push	bx
15678                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15679 3824           FF76         0E            push	$E[bp]
15680                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15681 3827           FF76         10            push	$10[bp]
15682                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15683 382A           8B46         0C            mov	ax,$C[bp]
15684 382D           88E0                       mov	al,ah
15685 382F           30E4                       xor	ah,ah
15686                                           ! Debug: list unsigned int = ax+0 (used reg = )
15687 3831           50                         push	ax
15688                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15689 3832           E8         24DE            call	_biosfn_read_pixel
15690 3835           83C4                   08  add	sp,*8
15691                                           !BCC_EOS
15692                                           ! 1858      break;
15693 3838           E9         037F            br 	.4
15694                                           !BCC_EOS
15695                                           ! 1859    case 0x0E:
15696                                           ! 1860      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15697                       0000383B            .22:
15698                                           ! Debug: list int = const 2 (used reg = )
15699 383B           B8                   0002  mov	ax,*2
15700 383E           50                         push	ax
15701                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15702 383F           8A46         0C            mov	al,$C[bp]
15703                                           ! Debug: list unsigned char = al+0 (used reg = )
15704 3842           30E4                       xor	ah,ah
15705 3844           50                         push	ax
15706                                           ! Debug: list int = const $FF (used reg = )
15707 3845           B8                   00FF  mov	ax,#$FF
15708 3848           50                         push	ax
15709                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15710 3849           8A46         12            mov	al,$12[bp]
15711                                           ! Debug: list unsigned char = al+0 (used reg = )
15712 384C           30E4                       xor	ah,ah
15713 384E           50                         push	ax
15714                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15715 384F           E8         26CA            call	_biosfn_write_teletype
15716 3852           83C4                   08  add	sp,*8
15717                                           !BCC_EOS
15718                                           ! 1861      break;
15719 3855           E9         0362            br 	.4
15720                                           !BCC_EOS
15721                                           ! 1862    case 0x10:
15722                                           ! 1863      biosfn_perform_gray_scale_summing(BX,CX);
15723                       00003858            .23:
15724                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15725 3858           FF76         10            push	$10[bp]
15726                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15727 385B           FF76         0C            push	$C[bp]
15728                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15729 385E           E8         2D13            call	_biosfn_perform_gray_scale_summing
15730 3861           83C4                   04  add	sp,*4
15731                                           !BCC_EOS
15732                                           ! 1864      break;
15733 3864           E9         0353            br 	.4
15734                                           !BCC_EOS
15735                                           ! 1865    case 0x11:
15736                                           ! 1866      switch(( AX & 0x00ff ))
15737                       00003867            .24:
15738                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15739 3867           8A46         12            mov	al,$12[bp]
15740                                           ! 1867       {
15741 386A           E9         00E4            br 	.27
15742                                           ! 1868        case 0x00:
15743                                           ! 1869        case 0x10:
15744                       0000386D            .28:
15745                                           ! 1870         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15746                       0000386D            .29:
15747                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15748 386D           8B46         0C            mov	ax,$C[bp]
15749 3870           88E0                       mov	al,ah
15750 3872           30E4                       xor	ah,ah
15751                                           ! Debug: list unsigned int = ax+0 (used reg = )
15752 3874           50                         push	ax
15753                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15754 3875           8A46         0C            mov	al,$C[bp]
15755                                           ! Debug: list unsigned char = al+0 (used reg = )
15756 3878           30E4                       xor	ah,ah
15757 387A           50                         push	ax
15758                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15759 387B           FF76         0E            push	$E[bp]
15760                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15761 387E           FF76         10            push	$10[bp]
15762                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15763 3881           FF76         08            push	8[bp]
15764                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15765 3884           FF76         16            push	$16[bp]
15766                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15767 3887           8A46         12            mov	al,$12[bp]
15768                                           ! Debug: list unsigned char = al+0 (used reg = )
15769 388A           30E4                       xor	ah,ah
15770 388C           50                         push	ax
15771                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15772 388D           E8         2F8B            call	_biosfn_load_text_user_pat
15773 3890           83C4                   0E  add	sp,*$E
15774                                           !BCC_EOS
15775                                           ! 1871         break;
15776 3893           E9         0111            br 	.25
15777                                           !BCC_EOS
15778                                           ! 1872        case 0x01:
15779                                           ! 1873        case 0x11:
15780                       00003896            .2A:
15781                                           ! 1874         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15782                       00003896            .2B:
15783                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15784 3896           8A46         0C            mov	al,$C[bp]
15785                                           ! Debug: list unsigned char = al+0 (used reg = )
15786 3899           30E4                       xor	ah,ah
15787 389B           50                         push	ax
15788                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15789 389C           8A46         12            mov	al,$12[bp]
15790                                           ! Debug: list unsigned char = al+0 (used reg = )
15791 389F           30E4                       xor	ah,ah
15792 38A1           50                         push	ax
15793                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15794 38A2           E8         3012            call	_biosfn_load_text_8_14_pat
15795 38A5           83C4                   04  add	sp,*4
15796                                           !BCC_EOS
15797                                           ! 1875         break;
15798 38A8           E9         00FC            br 	.25
15799                                           !BCC_EOS
15800                                           ! 1876        case 0x02:
15801                                           ! 1877        case 0x12:
15802                       000038AB            .2C:
15803                                           ! 1878         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15804                       000038AB            .2D:
15805                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15806 38AB           8A46         0C            mov	al,$C[bp]
15807                                           ! Debug: list unsigned char = al+0 (used reg = )
15808 38AE           30E4                       xor	ah,ah
15809 38B0           50                         push	ax
15810                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15811 38B1           8A46         12            mov	al,$12[bp]
15812                                           ! Debug: list unsigned char = al+0 (used reg = )
15813 38B4           30E4                       xor	ah,ah
15814 38B6           50                         push	ax
15815                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15816 38B7           E8         3094            call	_biosfn_load_text_8_8_pat
15817 38BA           83C4                   04  add	sp,*4
15818                                           !BCC_EOS
15819                                           ! 1879         break;
15820 38BD           E9         00E7            br 	.25
15821                                           !BCC_EOS
15822                                           ! 1880        case 0x04:
15823                                           ! 1881        case 0x14:
15824                       000038C0            .2E:
15825                                           ! 1882         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15826                       000038C0            .2F:
15827                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15828 38C0           8A46         0C            mov	al,$C[bp]
15829                                           ! Debug: list unsigned char = al+0 (used reg = )
15830 38C3           30E4                       xor	ah,ah
15831 38C5           50                         push	ax
15832                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15833 38C6           8A46         12            mov	al,$12[bp]
15834                                           ! Debug: list unsigned char = al+0 (used reg = )
15835 38C9           30E4                       xor	ah,ah
15836 38CB           50                         push	ax
15837                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15838 38CC           E8         311D            call	_biosfn_load_text_8_16_pat
15839 38CF           83C4                   04  add	sp,*4
15840                                           !BCC_EOS
15841                                           ! 1883         break;
15842 38D2           E9         00D2            br 	.25
15843                                           !BCC_EOS
15844                                           ! 1884        case 0x20:
15845                                           ! 1885         biosfn_load_gfx_8_8_chars(ES,BP);
15846                       000038D5            .30:
15847                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15848 38D5           FF76         08            push	8[bp]
15849                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15850 38D8           FF76         16            push	$16[bp]
15851                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15852 38DB           E8         319F            call	_biosfn_load_gfx_8_8_chars
15853 38DE           83C4                   04  add	sp,*4
15854                                           !BCC_EOS
15855                                           ! 1886         break;
15856 38E1           E9         00C3            br 	.25
15857                                           !BCC_EOS
15858                                           ! 1887        case 0x21:
15859                                           ! 1888         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15860                       000038E4            .31:
15861                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15862 38E4           8A46         0E            mov	al,$E[bp]
15863                                           ! Debug: list unsigned char = al+0 (used reg = )
15864 38E7           30E4                       xor	ah,ah
15865 38E9           50                         push	ax
15866                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15867 38EA           8A46         0C            mov	al,$C[bp]
15868                                           ! Debug: list unsigned char = al+0 (used reg = )
15869 38ED           30E4                       xor	ah,ah
15870 38EF           50                         push	ax
15871                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15872 38F0           FF76         10            push	$10[bp]
15873                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15874 38F3           FF76         08            push	8[bp]
15875                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15876 38F6           FF76         16            push	$16[bp]
15877                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15878 38F9           E8         3189            call	_biosfn_load_gfx_user_chars
15879 38FC           83C4                   0A  add	sp,*$A
15880                                           !BCC_EOS
15881                                           ! 1889         break;
15882 38FF           E9         00A5            br 	.25
15883                                           !BCC_EOS
15884                                           ! 1890        case 0x22:
15885                                           ! 1891         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15886                       00003902            .32:
15887                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15888 3902           8A46         0C            mov	al,$C[bp]
15889                                           ! Debug: list unsigned char = al+0 (used reg = )
15890 3905           30E4                       xor	ah,ah
15891 3907           50                         push	ax
15892                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15893 3908           E8         3182            call	_biosfn_load_gfx_8_14_chars
15894 390B           44                         inc	sp
15895 390C           44                         inc	sp
15896                                           !BCC_EOS
15897                                           ! 1892         break;
15898 390D           E9         0097            br 	.25
15899                                           !BCC_EOS
15900                                           ! 1893        case 0x23:
15901                                           ! 1894         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15902                       00003910            .33:
15903                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15904 3910           8A46         0C            mov	al,$C[bp]
15905                                           ! Debug: list unsigned char = al+0 (used reg = )
15906 3913           30E4                       xor	ah,ah
15907 3915           50                         push	ax
15908                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15909 3916           E8         317C            call	_biosfn_load_gfx_8_8_dd_chars
15910 3919           44                         inc	sp
15911 391A           44                         inc	sp
15912                                           !BCC_EOS
15913                                           ! 1895         break
15914                                           ! 1895 ;
15915 391B           E9         0089            br 	.25
15916                                           !BCC_EOS
15917                                           ! 1896        case 0x24:
15918                                           ! 1897         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15919                       0000391E            .34:
15920                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15921 391E           8A46         0C            mov	al,$C[bp]
15922                                           ! Debug: list unsigned char = al+0 (used reg = )
15923 3921           30E4                       xor	ah,ah
15924 3923           50                         push	ax
15925                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15926 3924           E8         3176            call	_biosfn_load_gfx_8_16_chars
15927 3927           44                         inc	sp
15928 3928           44                         inc	sp
15929                                           !BCC_EOS
15930                                           ! 1898         break;
15931 3929           E9         007B            br 	.25
15932                                           !BCC_EOS
15933                                           ! 1899        case 0x30:
15934                                           ! 1900         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15935                       0000392C            .35:
15936                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15937 392C           8D5E         0E            lea	bx,$E[bp]
15938 392F           53                         push	bx
15939                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15940 3930           8D5E         10            lea	bx,$10[bp]
15941 3933           53                         push	bx
15942                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15943 3934           8D5E         08            lea	bx,8[bp]
15944 3937           53                         push	bx
15945                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15946 3938           8D5E         16            lea	bx,$16[bp]
15947 393B           53                         push	bx
15948                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15949 393C           8B46         0C            mov	ax,$C[bp]
15950 393F           88E0                       mov	al,ah
15951 3941           30E4                       xor	ah,ah
15952                                           ! Debug: list unsigned int = ax+0 (used reg = )
15953 3943           50                         push	ax
15954                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15955 3944           E8         315E            call	_biosfn_get_font_info
15956 3947           83C4                   0A  add	sp,*$A
15957                                           !BCC_EOS
15958                                           ! 1901         break;
15959 394A           EB           5B            jmp .25
15960                                           !BCC_EOS
15961                                           ! 1902        default:
15962                                           ! 1903         unknown();
15963                       0000394C            .36:
15964                                           ! Debug: func () void = unknown+0 (used reg = )
15965 394C           E8         4488            call	_unknown
15966                                           !BCC_EOS
15967                                           ! 1904       }
15968                                           ! 1905      break;
15969 394F           EB           56            jmp .25
15970                       00003951            .27:
15971 3951           2C                     00  sub	al,*0
15972 3953         0F84         FF16            beq 	.28
15973 3957           2C                     01  sub	al,*1
15974 3959         0F84         FF39            beq 	.2A
15975 395D           2C                     01  sub	al,*1
15976 395F         0F84         FF48            beq 	.2C
15977 3963           2C                     02  sub	al,*2
15978 3965         0F84         FF57            beq 	.2E
15979 3969           2C                     0C  sub	al,*$C
15980 396B         0F84         FEFE            beq 	.29
15981 396F           2C                     01  sub	al,*1
15982 3971         0F84         FF21            beq 	.2B
15983 3975           2C                     01  sub	al,*1
15984 3977         0F84         FF30            beq 	.2D
15985 397B           2C                     02  sub	al,*2
15986 397D         0F84         FF3F            beq 	.2F
15987 3981           2C                     0C  sub	al,*$C
15988 3983         0F84         FF4E            beq 	.30
15989 3987           2C                     01  sub	al,*1
15990 3989         0F84         FF57            beq 	.31
15991 398D           2C                     01  sub	al,*1
15992 398F         0F84         FF6F            beq 	.32
15993 3993           2C                     01  sub	al,*1
15994 3995         0F84         FF77            beq 	.33
15995 3999           2C                     01  sub	al,*1
15996 399B         0F84         FF7F            beq 	.34
15997 399F           2C                     0C  sub	al,*$C
15998 39A1         0F84         FF87            beq 	.35
15999 39A5           EB           A5            jmp	.36
16000                       000039A7            .25:
16001 39A7           E9         0210            br 	.4
16002                                           !BCC_EOS
16003                                           ! 1906    case 0x12:
16004                                           ! 1907      switch(( BX & 0x00ff ))
16005                       000039AA            .37:
16006                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
16007 39AA           8A46         0C            mov	al,$C[bp]
16008                                           ! 1908       {
16009 39AD           EB           3F            jmp .3A
16010                                           ! 1909        case 0x20:
16011                                           ! 1910         biosfn_alternate_prtsc();
16012                       000039AF            .3B:
16013                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
16014 39AF           E8         32DE            call	_biosfn_alternate_prtsc
16015                                           !BCC_EOS
16016                                           ! 1911         break;
16017 39B2           EB           48            jmp .38
16018                                           !BCC_EOS
16019                                           ! 1912        case 0x35:
16020                                           ! 1913         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
16021                       000039B4            .3C:
16022                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
16023 39B4           FF76         0E            push	$E[bp]
16024                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16025 39B7           FF76         16            push	$16[bp]
16026                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
16027 39BA           8A46         12            mov	al,$12[bp]
16028                                           ! Debug: list unsigned char = al+0 (used reg = )
16029 39BD           30E4                       xor	ah,ah
16030 39BF           50                         push	ax
16031                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
16032 39C0           E8         33E4            call	_biosfn_switch_video_interface
16033 39C3           83C4                   06  add	sp,*6
16034                                           !BCC_EOS
16035                                           ! 1914         AX = ((AX & 0xff00) | (0x12));
16036                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16037 39C6           8B46         12            mov	ax,$12[bp]
16038 39C9           30C0                       xor	al,al
16039                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16040 39CB           0C                     12  or	al,*$12
16041                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16042 39CD           8946         12            mov	$12[bp],ax
16043                                           !BCC_EOS
16044                                           ! 1915         break;
16045 39D0           EB           2A            jmp .38
16046                                           !BCC_EOS
16047                                           ! 1916        case 0x36:
16048                                           ! 1917         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
16049                       000039D2            .3D:
16050                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16051 39D2           8A46         12            mov	al,$12[bp]
16052                                           ! Debug: list unsigned char = al+0 (used reg = )
16053 39D5           30E4                       xor	ah,ah
16054 39D7           50                         push	ax
16055                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
16056 39D8           E8         33D4            call	_biosfn_enable_video_refresh_control
16057 39DB           44                         inc	sp
16058 39DC           44                         inc	sp
16059                                           !BCC_EOS
16060                                           ! 1918         AX = ((AX & 0xff00) | (0x12));
16061                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16062 39DD           8B46         12            mov	ax,$12[bp]
16063 39E0           30C0                       xor	al,al
16064                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16065 39E2           0C                     12  or	al,*$12
16066                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16067 39E4           8946         12            mov	$12[bp],ax
16068                                           !BCC_EOS
16069                                           ! 1919         break;
16070 39E7           EB           13            jmp .38
16071                                           !BCC_EOS
16072                                           ! 1920        default:
16073                                           ! 1921         unknown();
16074                       000039E9            .3E:
16075                                           ! Debug: func () void = unknown+0 (used reg = )
16076 39E9           E8         43EB            call	_unknown
16077                                           !BCC_EOS
16078                                           ! 1922       }
16079                                           ! 1923      break;
16080 39EC           EB           0E            jmp .38
16081                       000039EE            .3A:
16082 39EE           2C                     20  sub	al,*$20
16083 39F0           74           BD            je 	.3B
16084 39F2           2C                     15  sub	al,*$15
16085 39F4           74           BE            je 	.3C
16086 39F6           2C                     01  sub	al,*1
16087 39F8           74           D8            je 	.3D
16088 39FA           EB           ED            jmp	.3E
16089                       000039FC            .38:
16090 39FC           E9         01BB            br 	.4
16091                                           !BCC_EOS
16092                                           ! 1924    case 0x13:
16093                                           ! 1925      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16094                       000039FF            .3F:
16095                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16096 39FF           FF76         08            push	8[bp]
16097                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16098 3A02           FF76         16            push	$16[bp]
16099                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16100 3A05           8A46         0E            mov	al,$E[bp]
16101                                           ! Debug: list unsigned char = al+0 (used reg = )
16102 3A08           30E4                       xor	ah,ah
16103 3A0A           50                         push	ax
16104                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16105 3A0B           8B46         0E            mov	ax,$E[bp]
16106 3A0E           88E0                       mov	al,ah
16107 3A10           30E4                       xor	ah,ah
16108                                           ! Debug: list unsigned int = ax+0 (used reg = )
16109 3A12           50                         push	ax
16110                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16111 3A13           FF76         10            push	$10[bp]
16112                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16113 3A16           8A46         0C            mov	al,$C[bp]
16114                                           ! Debug: list unsigned char = al+0 (used reg = )
16115 3A19           30E4                       xor	ah,ah
16116 3A1B           50                         push	ax
16117                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16118 3A1C           8B46         0C            mov	ax,$C[bp]
16119 3A1F           88E0                       mov	al,ah
16120 3A21           30E4                       xor	ah,ah
16121                                           ! Debug: list unsigned int = ax+0 (used reg = )
16122 3A23           50                         push	ax
16123                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16124 3A24           8A46         12            mov	al,$12[bp]
16125                                           ! Debug: list unsigned char = al+0 (used reg = )
16126 3A27           30E4                       xor	ah,ah
16127 3A29           50                         push	ax
16128                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16129 3A2A           E8         338A            call	_biosfn_write_string
16130 3A2D           83C4                   10  add	sp,*$10
16131                                           !BCC_EOS
16132                                           ! 1926      break;
16133 3A30           E9         0187            br 	.4
16134                                           !BCC_EOS
16135                                           ! 1927    case 0x1B:
16136                                           ! 1928      biosfn_read_state_info(BX,ES,DI);
16137                       00003A33            .40:
16138                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16139 3A33           FF76         04            push	4[bp]
16140                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16141 3A36           FF76         16            push	$16[bp]
16142                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16143 3A39           FF76         0C            push	$C[bp]
16144                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16145 3A3C           E8         34C4            call	_biosfn_read_state_info
16146 3A3F           83C4                   06  add	sp,*6
16147                                           !BCC_EOS
16148                                           ! 1929      AX = ((AX & 0xff00) | (0x1B));
16149                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16150 3A42           8B46         12            mov	ax,$12[bp]
16151 3A45           30C0                       xor	al,al
16152                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16153 3A47           0C                     1B  or	al,*$1B
16154                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16155 3A49           8946         12            mov	$12[bp],ax
16156                                           !BCC_EOS
16157                                           ! 1930      break;
16158 3A4C           E9         016B            br 	.4
16159                                           !BCC_EOS
16160                                           ! 1931    case 0x1C:
16161                                           ! 1932      switch(( AX & 0x00ff ))
16162                       00003A4F            .41:
16163                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16164 3A4F           8A46         12            mov	al,$12[bp]
16165                                           ! 1933       {
16166 3A52           EB           36            jmp .44
16167                                           ! 1934        case 0x00:
16168                                           ! 1935         biosfn_read_video_state_size(CX,&BX);
16169                       00003A54            .45:
16170                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16171 3A54           8D5E         0C            lea	bx,$C[bp]
16172 3A57           53                         push	bx
16173                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16174 3A58           FF76         10            push	$10[bp]
16175                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16176 3A5B           E8         3624            call	_biosfn_read_video_state_size
16177 3A5E           83C4                   04  add	sp,*4
16178                                           !BCC_EOS
16179                                           ! 1936         break;
16180 3A61           EB           35            jmp .42
16181                                           !BCC_EOS
16182                                           ! 1937        case 0x01:
16183                                           ! 1938         biosfn_save_video_state(CX,ES,BX);
16184                       00003A63            .46:
16185                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16186 3A63           FF76         0C            push	$C[bp]
16187                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16188 3A66           FF76         16            push	$16[bp]
16189                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16190 3A69           FF76         10            push	$10[bp]
16191                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16192 3A6C           E8         3637            call	_biosfn_save_video_state
16193 3A6F           83C4                   06  add	sp,*6
16194                                           !BCC_EOS
16195                                           ! 1939         break;
16196 3A72           EB           24            jmp .42
16197                                           !BCC_EOS
16198                                           ! 1940        case 0x02:
16199                                           ! 1941         biosfn_restore_video_state(CX,ES,BX);
16200                       00003A74            .47:
16201                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16202 3A74           FF76         0C            push	$C[bp]
16203                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16204 3A77           FF76         16            push	$16[bp]
16205                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16206 3A7A           FF76         10            push	$10[bp]
16207                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16208 3A7D           E8         3BF0            call	_biosfn_restore_video_state
16209 3A80           83C4                   06  add	sp,*6
16210                                           !BCC_EOS
16211                                           ! 1942         break;
16212 3A83           EB           13            jmp .42
16213                                           !BCC_EOS
16214                                           ! 1943        default:
16215                                           ! 1944         unknown();
16216                       00003A85            .48:
16217                                           ! Debug: func () void = unknown+0 (used reg = )
16218 3A85           E8         434F            call	_unknown
16219                                           !BCC_EOS
16220                                           ! 1945       }
16221                                           ! 1946      AX = ((AX & 0xff00) | (0x1C));
16222 3A88           EB           0E            jmp .42
16223                       00003A8A            .44:
16224 3A8A           2C                     00  sub	al,*0
16225 3A8C           74           C6            je 	.45
16226 3A8E           2C                     01  sub	al,*1
16227 3A90           74           D1            je 	.46
16228 3A92           2C                     01  sub	al,*1
16229 3A94           74           DE            je 	.47
16230 3A96           EB           ED            jmp	.48
16231                       00003A98            .42:
16232                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16233 3A98           8B46         12            mov	ax,$12[bp]
16234 3A9B           30C0                       xor	al,al
16235                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16236 3A9D           0C                     1C  or	al,*$1C
16237                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16238 3A9F           8946         12            mov	$12[bp],ax
16239                                           !BCC_EOS
16240                                           ! 1947      break;
16241 3AA2           E9         0115            br 	.4
16242                                           !BCC_EOS
16243                                           ! 1948    case 0x4f:
16244                                           ! 1949      if (vbe_has_vbe_display()) {
16245                       00003AA5            .49:
16246                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16247 3AA5           E8         5EF6            call	_vbe_has_vbe_display
16248 3AA8           85C0                       test	ax,ax
16249 3AAA         0F84         00A9            beq 	.4A
16250                       00003AAE            .4B:
16251                                           ! 1950        switch(( AX & 0x00ff ))
16252                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16253 3AAE           8A46         12            mov	al,$12[bp]
16254                                           ! 1951        {
16255 3AB1           EB           77            jmp .4E
16256                                           ! 1952          case 0x00:
16257                                           ! 1953           vbe_biosfn_return_controller_information(&AX,ES,DI);
16258                       00003AB3            .4F:
16259                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16260 3AB3           FF76         04            push	4[bp]
16261                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16262 3AB6           FF76         16            push	$16[bp]
16263                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16264 3AB9           8D5E         12            lea	bx,$12[bp]
16265 3ABC           53                         push	bx
16266                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16267 3ABD           E8         5F55            call	_vbe_biosfn_return_controller_information
16268 3AC0           83C4                   06  add	sp,*6
16269                                           !BCC_EOS
16270                                           ! 1954           break;
16271 3AC3           E9         008F            br 	.4C
16272                                           !BCC_EOS
16273                                           ! 1955          case 0x01:
16274                                           ! 1956           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16275                       00003AC6            .50:
16276                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16277 3AC6           FF76         04            push	4[bp]
16278                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16279 3AC9           FF76         16            push	$16[bp]
16280                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16281 3ACC           FF76         10            push	$10[bp]
16282                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16283 3ACF           8D5E         12            lea	bx,$12[bp]
16284 3AD2           53                         push	bx
16285                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16286 3AD3           E8         61E9            call	_vbe_biosfn_return_mode_information
16287 3AD6           83C4                   08  add	sp,*8
16288                                           !BCC_EOS
16289                                           ! 1957           break;
16290 3AD9           EB           7A            jmp .4C
16291                                           !BCC_EOS
16292                                           ! 1958          case 0x02:
16293                                           ! 1959           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16294                       00003ADB            .51:
16295                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16296 3ADB           FF76         04            push	4[bp]
16297                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16298 3ADE           FF76         16            push	$16[bp]
16299                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16300 3AE1           FF76         0C            push	$C[bp]
16301                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16302 3AE4           8D5E         12            lea	bx,$12[bp]
16303 3AE7           53                         push	bx
16304                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16305 3AE8           E8         631D            call	_vbe_biosfn_set_mode
16306 3AEB           83C4                   08  add	sp,*8
16307                                           !BCC_EOS
16308                                           ! 1960           break;
16309 3AEE           EB           65            jmp .4C
16310                                           !BCC_EOS
16311                                           ! 1961          case 0x04:
16312                                           ! 1962           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16313                       00003AF0            .52:
16314                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16315 3AF0           8D5E         0C            lea	bx,$C[bp]
16316 3AF3           53                         push	bx
16317                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16318 3AF4           FF76         16            push	$16[bp]
16319                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16320 3AF7           FF76         0E            push	$E[bp]
16321                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16322 3AFA           FF76         10            push	$10[bp]
16323                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16324 3AFD           8D5E         12            lea	bx,$12[bp]
16325 3B00           53                         push	bx
16326                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16327 3B01           E8         6671            call	_vbe_biosfn_save_restore_state
16328 3B04           83C4                   0A  add	sp,*$A
16329                                           !BCC_EOS
16330                                           ! 1963           break;
16331 3B07           EB           4C            jmp .4C
16332                                           !BCC_EOS
16333                                           ! 1964          case 0x09:
16334                                           ! 1965           unimplemented();
16335                       00003B09            .53:
16336                                           ! Debug: func () void = unimplemented+0 (used reg = )
16337 3B09           E8         42BD            call	_unimplemented
16338                                           !BCC_EOS
16339                                           ! 1966           AX=0x100;
16340                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16341 3B0C           B8                   0100  mov	ax,#$100
16342 3B0F           8946         12            mov	$12[bp],ax
16343                                           !BCC_EOS
16344                                           ! 1967           break;
16345 3B12           EB           41            jmp .4C
16346                                           !BCC_EOS
16347                                           ! 1968          case 0x0A:
16348                                           ! 1969           unimplemented();
16349                       00003B14            .54:
16350                                           ! Debug: func () void = unimplemented+0 (used reg = )
16351 3B14           E8         42B2            call	_unimplemented
16352                                           !BCC_EOS
16353                                           ! 1970           AX=0x100;
16354                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16355 3B17           B8                   0100  mov	ax,#$100
16356 3B1A           8946         12            mov	$12[bp],ax
16357                                           !BCC_EOS
16358                                           ! 1971           break;
16359 3B1D           EB           36            jmp .4C
16360                                           !BCC_EOS
16361                                           ! 1972          default:
16362                                           ! 1973           unknown();
16363                       00003B1F            .55:
16364                                           ! Debug: func () void = unknown+0 (used reg = )
16365 3B1F           E8         42B5            call	_unknown
16366                                           !BCC_EOS
16367                                           ! 1974           AX=0x100;
16368                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16369 3B22           B8                   0100  mov	ax,#$100
16370 3B25           8946         12            mov	$12[bp],ax
16371                                           !BCC_EOS
16372                                           ! 1975           }
16373                                           ! 1976         }
16374 3B28           EB           2B            jmp .4C
16375                       00003B2A            .4E:
16376 3B2A           2C                     00  sub	al,*0
16377 3B2C           72           F1            jb 	.55
16378 3B2E           3C                     0A  cmp	al,*$A
16379 3B30           77           21            ja  	.56
16380 3B32           30E4                       xor	ah,ah
16381 3B34           D1E0                       shl	ax,*1
16382 3B36           89C3                       mov	bx,ax
16383 3B38           2E                         seg	cs
16384 3B39           FFA7       3B3D            br	.57[bx]
16385                       00003B3D            .57:
16386 3B3D                      3AB3            .word	.4F
16387 3B3F                      3AC6            .word	.50
16388 3B41                      3ADB            .word	.51
16389 3B43                      3B1F            .word	.55
16390 3B45                      3AF0            .word	.52
16391 3B47                      3B1F            .word	.55
16392 3B49                      3B1F            .word	.55
16393 3B4B                      3B1F            .word	.55
16394 3B4D                      3B1F            .word	.55
16395 3B4F                      3B09            .word	.53
16396 3B51                      3B14            .word	.54
16397                       00003B53            .56:
16398 3B53           EB           CA            jmp	.55
16399                       00003B55            .4C:
16400                                           ! 1977         else {
16401 3B55           EB           06            jmp .58
16402                       00003B57            .4A:
16403                                           ! 1978           AX=0x0100;
16404                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16405 3B57           B8                   0100  mov	ax,#$100
16406 3B5A           8946         12            mov	$12[bp],ax
16407                                           !BCC_EOS
16408                                           ! 1979          
16409                                           ! 1979  }
16410                                           ! 1980         break;
16411                       00003B5D            .58:
16412 3B5D           EB           5B            jmp .4
16413                                           !BCC_EOS
16414                                           ! 1981    default:
16415                                           ! 1982      unknown();
16416                       00003B5F            .59:
16417                                           ! Debug: func () void = unknown+0 (used reg = )
16418 3B5F           E8         4275            call	_unknown
16419                                           !BCC_EOS
16420                                           ! 1983   }
16421                                           ! 1984 }
16422 3B62           EB           56            jmp .4
16423                       00003B64            .6:
16424 3B64           2D                   0000  sub	ax,*0
16425 3B67           7C           F6            jl 	.59
16426 3B69           3D                   001C  cmp	ax,*$1C
16427 3B6C           77           43            ja  	.5A
16428 3B6E           D1E0                       shl	ax,*1
16429 3B70           89C3                       mov	bx,ax
16430 3B72           2E                         seg	cs
16431 3B73           FFA7       3B77            br	.5B[bx]
16432                       00003B77            .5B:
16433 3B77                      366F            .word	.7
16434 3B79                      36CD            .word	.16
16435 3B7B                      36E4            .word	.17
16436 3B7D                      36F8            .word	.18
16437 3B7F                      3711            .word	.19
16438 3B81                      372B            .word	.1A
16439 3B83                      3739            .word	.1B
16440 3B85                      3774            .word	.1C
16441 3B87                      37AE            .word	.1D
16442 3B89                      37C3            .word	.1E
16443 3B8B                      37E3            .word	.1F
16444 3B8D                      3B5F            .word	.59
16445 3B8F                      3803            .word	.20
16446 3B91                      3820            .word	.21
16447 3B93                      383B            .word	.22
16448 3B95                      3B5F            .word	.59
16449 3B97                      3858            .word	.23
16450 3B99                      3867            .word	.24
16451 3B9B                      39AA            .word	.37
16452 3B9D                      39FF            .word	.3F
16453 3B9F                      3B5F            .word	.59
16454 3BA1                      3B5F            .word	.59
16455 3BA3                      3B5F            .word	.59
16456 3BA5                      3B5F            .word	.59
16457 3BA7                      3B5F            .word	.59
16458 3BA9                      3B5F            .word	.59
16459 3BAB                      3B5F            .word	.59
16460 3BAD                      3A33            .word	.40
16461 3BAF                      3A4F            .word	.41
16462                       00003BB1            .5A:
16463 3BB1           2D                   004F  sub	ax,*$4F
16464 3BB4         0F84         FEED            beq 	.49
16465 3BB8           EB           A5            jmp	.59
16466                       00003BBA            .4:
16467                       FFFFFFFE            ..FFFF	=	-2
16468 3BBA           5D                         pop	bp
16469 3BBB           C3                         ret
16470                                           ! 1985 static void biosfn_set_video_mode(mode) Bit8u mode;
16471                                           ! Register BX used in function int10_func
16472                       00003BBC            _biosfn_set_video_mode:
16473                                           !BCC_EOS
16474                                           ! 1986 {
16475                                           ! 1987  Bit8u noclearmem=mode&0x80;
16476 3BBC           55                         push	bp
16477 3BBD           89E5                       mov	bp,sp
16478 3BBF           4C                         dec	sp
16479                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16480 3BC0           8A46         04            mov	al,4[bp]
16481 3BC3           24                     80  and	al,#$80
16482                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16483 3BC5           8846         FF            mov	-1[bp],al
16484                                           !BCC_EOS
16485                                           ! 1988  Bit8u line,mmask,*palette,vpti;
16486                                           !BCC_EOS
16487                                           ! 1989  Bit16u i,twidth,theightm1,cheight;
16488                                           !BCC_EOS
16489                                           ! 1990  Bit8u modeset_ctl,video_ctl,vga_switches;
16490                                           !BCC_EOS
16491                                           ! 1991  Bit16u crtc_addr;
16492                                           !BCC_EOS
16493                                           ! 1992  if (vbe_has_vbe_display()) {
16494 3BC8           83C4                   EB  add	sp,*-$15
16495                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16496 3BCB           E8         5DD0            call	_vbe_has_vbe_display
16497 3BCE           85C0                       test	ax,ax
16498 3BD0           74           08            je  	.5C
16499                       00003BD2            .5D:
16500                                           ! 1993    dispi_set_enable(0x00);
16501                                           ! Debug: list int = const 0 (used reg = )
16502 3BD2           31C0                       xor	ax,ax
16503 3BD4           50                         push	ax
16504                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16505 3BD5           E8         5B93            call	_dispi_set_enable
16506 3BD8           44                         inc	sp
16507 3BD9           44                         inc	sp
16508                                           !BCC_EOS
16509                                           ! 1994   }
16510                                           ! 1995  mode=mode&0x7f;
16511                       00003BDA            .5C:
16512                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16513 3BDA           8A46         04            mov	al,4[bp]
16514 3BDD           24                     7F  and	al,*$7F
16515                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16516 3BDF           8846         04            mov	4[bp],al
16517                                           !BCC_EOS
16518                                           ! 1996  line=find_vga_entry(mode);
16519                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16520 3BE2           8A46         04            mov	al,4[bp]
16521 3BE5           30E4                       xor	ah,ah
16522 3BE7           50                         push	ax
16523                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16524 3BE8           E8         4063            call	_find_vga_entry
16525 3BEB           44                         inc	sp
16526 3BEC           44                         inc	sp
16527                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16528 3BED           8846         FE            mov	-2[bp],al
16529                                           !BCC_EOS
16530                                           ! 1997  printf("mode search %02x found line %02x\n",mode,line);
16531                                           ! Debug: list unsigned char line = [S+$18-4] (used reg = )
16532 3BF0           8A46         FE            mov	al,-2[bp]
16533 3BF3           30E4                       xor	ah,ah
16534 3BF5           50                         push	ax
16535                                           ! Debug: list unsigned char mode = [S+$1A+2] (used reg = )
16536 3BF6           8A46         04            mov	al,4[bp]
16537 3BF9           30E4                       xor	ah,ah
16538 3BFB           50                         push	ax
16539                                           ! Debug: list * char = .5E+0 (used reg = )
16540 3BFC           BB                   A5D8  mov	bx,#.5E
16541 3BFF           53                         push	bx
16542                                           ! Debug: func () void = printf+0 (used reg = )
16543 3C00           E8         41E2            call	_printf
16544 3C03           83C4                   06  add	sp,*6
16545                                           !BCC_EOS
16546                                           ! 1998  if(line==0xFF)
16547                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16548 3C06           8A46         FE            mov	al,-2[bp]
16549 3C09           3C                     FF  cmp	al,#$FF
16550 3C0B           75           04            jne 	.5F
16551                       00003C0D            .60:
16552                                           ! 1999   return;
16553 3C0D           89EC                       mov	sp,bp
16554 3C0F           5D                         pop	bp
16555 3C10           C3                         ret
16556                                           !BCC_EOS
16557                                           ! 2000  vpti=line_to_vpti[line];
16558                       00003C11            .5F:
16559                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16560 3C11           8A46         FE            mov	al,-2[bp]
16561 3C14           30E4                       xor	ah,ah
16562 3C16           89C3                       mov	bx,ax
16563                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16564 3C18           8A87       0286            mov	al,_line_to_vpti[bx]
16565 3C1C           8846         F9            mov	-7[bp],al
16566                                           !BCC_EOS
16567                                           ! 2001  twidth=video_param_table[vpti].twidth;
16568                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16569 3C1F           8A46         F9            mov	al,-7[bp]
16570 3C22           30E4                       xor	ah,ah
16571 3C24           B1                     06  mov	cl,*6
16572 3C26           D3E0                       shl	ax,cl
16573 3C28           89C3                       mov	bx,ax
16574                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16575 3C2A           8A87       029A            mov	al,_video_param_table[bx]
16576 3C2E           30E4                       xor	ah,ah
16577 3C30           8946         F4            mov	-$C[bp],ax
16578                                           !BCC_EOS
16579                                           ! 2002  theightm1=video_param_table[vpti].theightm1;
16580                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16581 3C33           8A46         F9            mov	al,-7[bp]
16582 3C36           30E4                       xor	ah,ah
16583 3C38           B1                     06  mov	cl,*6
16584 3C3A           D3E0                       shl	ax,cl
16585 3C3C           89C3                       mov	bx,ax
16586 3C3E           81C3                 029A  add	bx,#_video_param_table
16587                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16588 3C42           8A47         01            mov	al,1[bx]
16589 3C45           30E4                       xor	ah,ah
16590 3C47           8946         F2            mov	-$E[bp],ax
16591                                           !BCC_EOS
16592                                           ! 2003  cheight=video_param_table[vpti].cheight;
16593                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16594 3C4A           8A46         F9            mov	al,-7[bp]
16595 3C4D           30E4                       xor	ah,ah
16596 3C4F           B1                     06  mov	cl,*6
16597 3C51           D3E0                       shl	ax,cl
16598 3C53           89C3                       mov	bx,ax
16599 3C55           81C3                 029A  add	bx,#_video_param_table
16600                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16601 3C59           8A47         02            mov	al,2[bx]
16602 3C5C           30E4                       xor	ah,ah
16603 3C5E           8946         F0            mov	-$10[bp],ax
16604                                           !BCC_EOS
16605                                           ! 2004  video_ctl=read_byte(0x40,0x87);
16606                                           ! Debug: list int = const $87 (used reg = )
16607 3C61           B8                   0087  mov	ax,#$87
16608 3C64           50                         push	ax
16609                                           ! Debug: list int = const $40 (used reg = )
16610 3C65           B8                   0040  mov	ax,*$40
16611 3C68           50                         push	ax
16612                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16613 3C69           E8         40CE            call	_read_byte
16614 3C6C           83C4                   04  add	sp,*4
16615                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16616 3C6F           8846         EE            mov	-$12[bp],al
16617                                           !BCC_EOS
16618                                           ! 2005  vga_switches=read_byte(0x40,0x88);
16619                                           ! Debug: list int = const $88 (used reg = )
16620 3C72           B8                   0088  mov	ax,#$88
16621 3C75           50                         push	ax
16622                                           ! Debug: list int = const $40 (used reg = )
16623 3C76           B8                   0040  mov	ax,*$40
16624 3C79           50                         push	ax
16625                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16626 3C7A           E8         40BD            call	_read_byte
16627 3C7D           83C4                   04  add	sp,*4
16628                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16629 3C80           8846         ED            mov	-$13[bp],al
16630                                           !BCC_EOS
16631                                           ! 2006  modeset_ctl=read_byte(0x40,0x89);
16632                                           ! Debug: list int = const $89 (used reg = )
16633 3C83           B8                   0089  mov	ax,#$89
16634 3C86           50                         push	ax
16635                                           ! Debug: list int = const $40 (used reg = )
16636 3C87           B8                   0040  mov	ax,*$40
16637 3C8A           50                         push	ax
16638                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16639 3C8B           E8         40AC            call	_read_byte
16640 3C8E           83C4                   04  add	sp,*4
16641                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16642 3C91           8846         EF            mov	-$11[bp],al
16643                                           !BCC_EOS
16644                                           ! 2007  if((modeset_ctl&0x08)==0)
16645                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16646 3C94           8A46         EF            mov	al,-$11[bp]
16647 3C97           24                     08  and	al,*8
16648                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16649 3C99           84C0                       test	al,al
16650 3C9B         0F85         0145            bne 	.61
16651                       00003C9F            .62:
16652                                           ! 2008   {
16653                                           ! 2009    outb(0x3c6,vga_modes[line].pelmask);
16654                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16655 3C9F           8A46         FE            mov	al,-2[bp]
16656 3CA2           30E4                       xor	ah,ah
16657 3CA4           B1                     03  mov	cl,*3
16658 3CA6           D3E0                       shl	ax,cl
16659 3CA8           89C3                       mov	bx,ax
16660 3CAA           81C3                 0206  add	bx,#_vga_modes
16661                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16662 3CAE           8A47         06            mov	al,6[bx]
16663 3CB1           30E4                       xor	ah,ah
16664 3CB3           50                         push	ax
16665                                           ! Debug: list int = const $3C6 (used reg = )
16666 3CB4           B8                   03C6  mov	ax,#$3C6
16667 3CB7           50                         push	ax
16668                                           ! Debug: func () void = outb+0 (used reg = )
16669 3CB8           E8         40EB            call	_outb
16670 3CBB           83C4                   04  add	sp,*4
16671                                           !BCC_EOS
16672                                           ! 2010    outb(0x3c8,0x00);
16673                                           ! Debug: list int = const 0 (used reg = )
16674 3CBE           31C0                       xor	ax,ax
16675 3CC0           50                         push	ax
16676                                           ! Debug: list int = const $3C8 (used reg = )
16677 3CC1           B8                   03C8  mov	ax,#$3C8
16678 3CC4           50                         push	ax
16679                                           ! Debug: func () void = outb+0 (used reg = )
16680 3CC5           E8         40DE            call	_outb
16681 3CC8           83C4                   04  add	sp,*4
16682                                           !BCC_EOS
16683                                           ! 2011    switch(vga_modes[line].dacmodel)
16684                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16685 3CCB           8A46         FE            mov	al,-2[bp]
16686 3CCE           30E4                       xor	ah,ah
16687 3CD0           B1                     03  mov	cl,*3
16688 3CD2           D3E0                       shl	ax,cl
16689 3CD4           89C3                       mov	bx,ax
16690 3CD6           81C3                 0206  add	bx,#_vga_modes
16691 3CDA           8A47         07            mov	al,7[bx]
16692                                           ! 2012     {case 0:
16693 3CDD           EB           22            jmp .65
16694                                           ! 2013       palette=&palette0;
16695                       00003CDF            .66:
16696                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16697 3CDF           BB                   0A1A  mov	bx,#_palette0
16698 3CE2           895E         FA            mov	-6[bp],bx
16699                                           !BCC_EOS
16700                                           ! 2014       break;
16701 3CE5           EB           2A            jmp .63
16702                                           !BCC_EOS
16703                                           ! 2015      case 1:
16704                                           ! 2016       palette=&palette1;
16705                       00003CE7            .67:
16706                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16707 3CE7           BB                   0ADA  mov	bx,#_palette1
16708 3CEA           895E         FA            mov	-6[bp],bx
16709                                           !BCC_EOS
16710                                           ! 2017       break;
16711 3CED           EB           22            jmp .63
16712                                           !BCC_EOS
16713                                           ! 2018      case 2:
16714                                           ! 2019       palette=&palette2;
16715                       00003CEF            .68:
16716                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16717 3CEF           BB                   0B9A  mov	bx,#_palette2
16718 3CF2           895E         FA            mov	-6[bp],bx
16719                                           !BCC_EOS
16720                                           ! 2020       break;
16721 3CF5           EB           1A            jmp .63
16722                                           !BCC_EOS
16723                                           ! 2021      case 3:
16724                                           ! 2022       palette=&palette3;
16725                       00003CF7            .69:
16726                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16727 3CF7           BB                   0C5A  mov	bx,#_palette3
16728 3CFA           895E         FA            mov	-6[bp],bx
16729                                           !BCC_EOS
16730                                           ! 2023       break;
16731 3CFD           EB           12            jmp .63
16732                                           !BCC_EOS
16733                                           ! 2024     }
16734                                           ! 2025    for(i=0;i<0x0100;i++)
16735 3CFF           EB           10            jmp .63
16736                       00003D01            .65:
16737 3D01           2C                     00  sub	al,*0
16738 3D03           74           DA            je 	.66
16739 3D05           2C                     01  sub	al,*1
16740 3D07           74           DE            je 	.67
16741 3D09           2C                     01  sub	al,*1
16742 3D0B           74           E2            je 	.68
16743 3D0D           2C                     01  sub	al,*1
16744 3D0F           74           E6            je 	.69
16745                       00003D11            .63:
16746                       FFFFFFE8            ..FFFE	=	-$18
16747                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16748 3D11           31C0                       xor	ax,ax
16749 3D13           8946         F6            mov	-$A[bp],ax
16750                                           !BCC_EOS
16751                                           !BCC_EOS
16752                                           ! 2026     {if(i<=dac_regs[vga_modes[line].dacmodel])
16753 3D16           E9         00AB            br 	.6C
16754                       00003D19            .6D:
16755                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16756 3D19           8A46         FE            mov	al,-2[bp]
16757 3D1C           30E4                       xor	ah,ah
16758 3D1E           B1                     03  mov	cl,*3
16759 3D20           D3E0                       shl	ax,cl
16760 3D22           89C3                       mov	bx,ax
16761 3D24           81C3                 0206  add	bx,#_vga_modes
16762                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16763 3D28           8A47         07            mov	al,7[bx]
16764 3D2B           30E4                       xor	ah,ah
16765 3D2D           89C3                       mov	bx,ax
16766                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16767 3D2F           8A87       0296            mov	al,_dac_regs[bx]
16768 3D33           30E4                       xor	ah,ah
16769 3D35           3B46         F6            cmp	ax,-$A[bp]
16770 3D38           72           5C            jb  	.6E
16771                       00003D3A            .6F:
16772                                           ! 2027       {outb(0x3c9,palette[(i*3)+0]);
16773                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16774 3D3A           8B46         F6            mov	ax,-$A[bp]
16775 3D3D           89C2                       mov	dx,ax
16776 3D3F           D1E0                       shl	ax,*1
16777 3D41           01D0                       add	ax,dx
16778                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16779                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16780 3D43           0346         FA            add	ax,-6[bp]
16781 3D46           89C3                       mov	bx,ax
16782                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16783 3D48           8A07                       mov	al,[bx]
16784 3D4A           30E4                       xor	ah,ah
16785 3D4C           50                         push	ax
16786                                           ! Debug: list int = const $3C9 (used reg = )
16787 3D4D           B8                   03C9  mov	ax,#$3C9
16788 3D50           50                         push	ax
16789                                           ! Debug: func () void = outb+0 (used reg = )
16790 3D51           E8         4052            call	_outb
16791 3D54           83C4                   04  add	sp,*4
16792                                           !BCC_EOS
16793                                           ! 2028        outb(0x3c9,palette[(i*3)+1]);
16794                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16795 3D57           8B46         F6            mov	ax,-$A[bp]
16796 3D5A           89C2                       mov	dx,ax
16797 3D5C           D1E0                       shl	ax,*1
16798 3D5E           01D0                       add	ax,dx
16799                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16800                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16801 3D60           40                         inc	ax
16802 3D61           0346         FA            add	ax,-6[bp]
16803 3D64           89C3                       mov	bx,ax
16804                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16805 3D66           8A07                       mov	al,[bx]
16806 3D68           30E4                       xor	ah,ah
16807 3D6A           50                         push	ax
16808                                           ! Debug: list int = const $3C9 (used reg = )
16809 3D6B           B8                   03C9  mov	ax,#$3C9
16810 3D6E           50                         push	ax
16811                                           ! Debug: func () void = outb+0 (used reg = )
16812 3D6F           E8         4034            call	_outb
16813 3D72           83C4                   04  add	sp,*4
16814                                           !BCC_EOS
16815                                           ! 2029        outb(0x3c9,palette[(i*3)+2]);
16816                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16817 3D75           8B46         F6            mov	ax,-$A[bp]
16818 3D78           89C2                       mov	dx,ax
16819 3D7A           D1E0                       shl	ax,*1
16820 3D7C           01D0                       add	ax,dx
16821                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16822                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16823 3D7E           40                         inc	ax
16824 3D7F           40                         inc	ax
16825 3D80           0346         FA            add	ax,-6[bp]
16826 3D83           89C3                       mov	bx,ax
16827                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16828 3D85           8A07                       mov	al,[bx]
16829 3D87           30E4                       xor	ah,ah
16830 3D89           50                         push	ax
16831                                           ! Debug: list int = const $3C9 (used reg = )
16832 3D8A           B8                   03C9  mov	ax,#$3C9
16833 3D8D           50                         push	ax
16834                                           ! Debug: func () void = outb+0 (used reg = )
16835 3D8E           E8         4015            call	_outb
16836 3D91           83C4                   04  add	sp,*4
16837                                           !BCC_EOS
16838                                           ! 2030       }
16839                                           ! 2031      else
16840                                           ! 2032       {outb(0x3c9,0);
16841 3D94           EB           27            jmp .70
16842                       00003D96            .6E:
16843                                           ! Debug: list int = const 0 (used reg = )
16844 3D96           31C0                       xor	ax,ax
16845 3D98           50                         push	ax
16846                                           ! Debug: list int = const $3C9 (used reg = )
16847 3D99           B8                   03C9  mov	ax,#$3C9
16848 3D9C           50                         push	ax
16849                                           ! Debug: func () void = outb+0 (used reg = )
16850 3D9D           E8         4006            call	_outb
16851 3DA0           83C4                   04  add	sp,*4
16852                                           !BCC_EOS
16853                                           ! 2033        outb(0x3c9,0);
16854                                           ! Debug: list int = const 0 (used reg = )
16855 3DA3           31C0                       xor	ax,ax
16856 3DA5           50                         push	ax
16857                                           ! Debug: list int = const $3C9 (used reg = )
16858 3DA6           B8                   03C9  mov	ax,#$3C9
16859 3DA9           50                         push	ax
16860                                           ! Debug: func () void = outb+0 (used reg = )
16861 3DAA           E8         3FF9            call	_outb
16862 3DAD           83C4                   04  add	sp,*4
16863                                           !BCC_EOS
16864                                           ! 2034        outb(0x3c9,0);
16865                                           ! Debug: list int = const 0 (used reg = )
16866 3DB0           31C0                       xor	ax,ax
16867 3DB2           50                         push	ax
16868                                           ! Debug: list int = const $3C9 (used reg = )
16869 3DB3           B8                   03C9  mov	ax,#$3C9
16870 3DB6           50                         push	ax
16871                                           ! Debug: func () void = outb+0 (used reg = )
16872 3DB7           E8         3FEC            call	_outb
16873 3DBA           83C4                   04  add	sp,*4
16874                                           !BCC_EOS
16875                                           ! 2035       }
16876                                           ! 2036     }
16877                       00003DBD            .70:
16878                                           ! 2037    if((modeset_ctl&0x02)==0x02)
16879                       00003DBD            .6B:
16880                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16881 3DBD           8B46         F6            mov	ax,-$A[bp]
16882 3DC0           40                         inc	ax
16883 3DC1           8946         F6            mov	-$A[bp],ax
16884                       00003DC4            .6C:
16885                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16886 3DC4           8B46         F6            mov	ax,-$A[bp]
16887 3DC7           3D                   0100  cmp	ax,#$100
16888 3DCA         0F82         FF4B            blo 	.6D
16889                       00003DCE            .71:
16890                       00003DCE            .6A:
16891                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16892 3DCE           8A46         EF            mov	al,-$11[bp]
16893 3DD1           24                     02  and	al,*2
16894                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16895 3DD3           3C                     02  cmp	al,*2
16896 3DD5           75           0D            jne 	.72
16897                       00003DD7            .73:
16898                                           ! 2038     {
16899                                           ! 2039      biosfn_perform_gray_scale_summing(0x00, 0x100);
16900                                           ! Debug: list int = const $100 (used reg = )
16901 3DD7           B8                   0100  mov	ax,#$100
16902 3DDA           50                         push	ax
16903                                           ! Debug: list int = const 0 (used reg = )
16904 3DDB           31C0                       xor	ax,ax
16905 3DDD           50                         push	ax
16906                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16907 3DDE           E8         2793            call	_biosfn_perform_gray_scale_summing
16908 3DE1           83C4                   04  add	sp,*4
16909                                           !BCC_EOS
16910                                           ! 2040     }
16911                                           ! 2041   }
16912                       00003DE4            .72:
16913                                           ! 2042  inb(0x3da);
16914                       00003DE4            .61:
16915                                           ! Debug: list int = const $3DA (used reg = )
16916 3DE4           B8                   03DA  mov	ax,#$3DA
16917 3DE7           50                         push	ax
16918                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16919 3DE8           E8         3FA5            call	_inb
16920 3DEB           44                         inc	sp
16921 3DEC           44                         inc	sp
16922                                           !BCC_EOS
16923                                           ! 2043  for(i=0;i<=0x13;i++)
16924                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16925 3DED           31C0                       xor	ax,ax
16926 3DEF           8946         F6            mov	-$A[bp],ax
16927                                           !BCC_EOS
16928                                           !BCC_EOS
16929                                           ! 2044   {outb(0x3c0,i);
16930 3DF2           EB           38            jmp .76
16931                       00003DF4            .77:
16932                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16933 3DF4           FF76         F6            push	-$A[bp]
16934                                           ! Debug: list int = const $3C0 (used reg = )
16935 3DF7           B8                   03C0  mov	ax,#$3C0
16936 3DFA           50                         push	ax
16937                                           ! Debug: func () void = outb+0 (used reg = )
16938 3DFB           E8         3FA8            call	_outb
16939 3DFE           83C4                   04  add	sp,*4
16940                                           !BCC_EOS
16941                                           ! 2045    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16942                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16943 3E01           8A46         F9            mov	al,-7[bp]
16944 3E04           30E4                       xor	ah,ah
16945 3E06           B1                     06  mov	cl,*6
16946 3E08           D3E0                       shl	ax,cl
16947 3E0A           89C3                       mov	bx,ax
16948 3E0C           81C3                 029A  add	bx,#_video_param_table
16949                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16950 3E10           8B46         F6            mov	ax,-$A[bp]
16951 3E13           01C3                       add	bx,ax
16952                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16953 3E15           8A47         23            mov	al,$23[bx]
16954 3E18           30E4                       xor	ah,ah
16955 3E1A           50                         push	ax
16956                                           ! Debug: list int = const $3C0 (used reg = )
16957 3E1B           B8                   03C0  mov	ax,#$3C0
16958 3E1E           50                         push	ax
16959                                           ! Debug: func () void = outb+0 (used reg = )
16960 3E1F           E8         3F84            call	_outb
16961 3E22           83C4                   04  add	sp,*4
16962                                           !BCC_EOS
16963                                           ! 2046   }
16964                                           ! 2047  outb(0x3c0,0x14);
16965                       00003E25            .75:
16966                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16967 3E25           8B46         F6            mov	ax,-$A[bp]
16968 3E28           40                         inc	ax
16969 3E29           8946         F6            mov	-$A[bp],ax
16970                       00003E2C            .76:
16971                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16972 3E2C           8B46         F6            mov	ax,-$A[bp]
16973 3E2F           3D                   0013  cmp	ax,*$13
16974 3E32           76           C0            jbe	.77
16975                       00003E34            .78:
16976                       00003E34            .74:
16977                                           ! Debug: list int = const $14 (used reg = )
16978 3E34           B8                   0014  mov	ax,*$14
16979 3E37           50                         push	ax
16980                                           ! Debug: list int = const $3C0 (used reg = )
16981 3E38           B8                   03C0  mov	ax,#$3C0
16982 3E3B           50                         push	ax
16983                                           ! Debug: func () void = outb+0 (used reg = )
16984 3E3C           E8         3F67            call	_outb
16985 3E3F           83C4                   04  add	sp,*4
16986                                           !BCC_EOS
16987                                           ! 2048  outb(0x3c0,0x00);
16988                                           ! Debug: list int = const 0 (used reg = )
16989 3E42           31C0                       xor	ax,ax
16990 3E44           50                         push	ax
16991                                           ! Debug: list int = const $3C0 (used reg = )
16992 3E45           B8                   03C0  mov	ax,#$3C0
16993 3E48           50                         push	ax
16994                                           ! Debug: func () void = outb+0 (used reg = )
16995 3E49           E8         3F5A            call	_outb
16996 3E4C           83C4                   04  add	sp,*4
16997                                           !BCC_EOS
16998                                           ! 2049  outb(0x3c4,0);
16999                                           ! Debug: list int = const 0 (used reg = )
17000 3E4F           31C0                       xor	ax,ax
17001 3E51           50                         push	ax
17002                                           ! Debug: list int = const $3C4 (used reg = )
17003 3E52           B8                   03C4  mov	ax,#$3C4
17004 3E55           50                         push	ax
17005                                           ! Debug: func () void = outb+0 (used reg = )
17006 3E56           E8         3F4D            call	_outb
17007 3E59           83C4                   04  add	sp,*4
17008                                           !BCC_EOS
17009                                           ! 2050  outb(0x3c5,0x03);
17010                                           ! Debug: list int = const 3 (used reg = )
17011 3E5C           B8                   0003  mov	ax,*3
17012 3E5F           50                         push	ax
17013                                           ! Debug: list int = const $3C5 (used reg = )
17014 3E60           B8                   03C5  mov	ax,#$3C5
17015 3E63           50                         push	ax
17016                                           ! Debug: func () void = outb+0 (used reg = )
17017 3E64           E8         3F3F            call	_outb
17018 3E67           83C4                   04  add	sp,*4
17019                                           !BCC_EOS
17020                                           ! 2051  for(i=1;i<=4;i++)
17021                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
17022 3E6A           B8                   0001  mov	ax,*1
17023 3E6D           8946         F6            mov	-$A[bp],ax
17024                                           !BCC_EOS
17025                                           !BCC_EOS
17026                                           ! 2052   {outb(0x3c4,i);
17027 3E70           EB           3F            jmp .7B
17028                       00003E72            .7C:
17029                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17030 3E72           FF76         F6            push	-$A[bp]
17031                                           ! Debug: list int = const $3C4 (used reg = )
17032 3E75           B8                   03C4  mov	ax,#$3C4
17033 3E78           50                         push	ax
17034                                           ! Debug: func () void = outb+0 (used reg = )
17035 3E79           E8         3F2A            call	_outb
17036 3E7C           83C4                   04  add	sp,*4
17037                                           !BCC_EOS
17038                                           ! 2053    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
17039                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
17040 3E7F           8B46         F6            mov	ax,-$A[bp]
17041 3E82           48                         dec	ax
17042 3E83           50                         push	ax
17043                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
17044 3E84           8A46         F9            mov	al,-7[bp]
17045 3E87           30E4                       xor	ah,ah
17046 3E89           B1                     06  mov	cl,*6
17047 3E8B           D3E0                       shl	ax,cl
17048 3E8D           89C3                       mov	bx,ax
17049 3E8F           81C3                 029A  add	bx,#_video_param_table
17050                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
17051 3E93           8B46         E8            mov	ax,-$18[bp]
17052 3E96           01C3                       add	bx,ax
17053 3E98           44                         inc	sp
17054 3E99           44                         inc	sp
17055                                           ! Debug: list unsigned char = [bx+5] (used reg = )
17056 3E9A           8A47         05            mov	al,5[bx]
17057 3E9D           30E4                       xor	ah,ah
17058 3E9F           50                         push	ax
17059                                           ! Debug: list int = const $3C5 (used reg = )
17060 3EA0           B8                   03C5  mov	ax,#$3C5
17061 3EA3           50                         push	ax
17062                                           ! Debug: func () void = outb+0 (used reg = )
17063 3EA4           E8         3EFF            call	_outb
17064 3EA7           83C4                   04  add	sp,*4
17065                                           !BCC_EOS
17066                                           ! 2054   }
17067                                           ! 2055  for(i=0;i<=8;i++)
17068                       00003EAA            .7A:
17069                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17070 3EAA           8B46         F6            mov	ax,-$A[bp]
17071 3EAD           40                         inc	ax
17072 3EAE           8946         F6            mov	-$A[bp],ax
17073                       00003EB1            .7B:
17074                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
17075 3EB1           8B46         F6            mov	ax,-$A[bp]
17076 3EB4           3D                   0004  cmp	ax,*4
17077 3EB7           76           B9            jbe	.7C
17078                       00003EB9            .7D:
17079                       00003EB9            .79:
17080                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17081 3EB9           31C0                       xor	ax,ax
17082 3EBB           8946         F6            mov	-$A[bp],ax
17083                                           !BCC_EOS
17084                                           !BCC_EOS
17085                                           ! 2056   {outb(0x3ce,i);
17086 3EBE           EB           38            jmp .80
17087                       00003EC0            .81:
17088                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17089 3EC0           FF76         F6            push	-$A[bp]
17090                                           ! Debug: list int = const $3CE (used reg = )
17091 3EC3           B8                   03CE  mov	ax,#$3CE
17092 3EC6           50                         push	ax
17093                                           ! Debug: func () void = outb+0 (used reg = )
17094 3EC7           E8         3EDC            call	_outb
17095 3ECA           83C4                   04  add	sp,*4
17096                                           !BCC_EOS
17097                                           ! 2057    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
17098                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17099 3ECD           8A46         F9            mov	al,-7[bp]
17100 3ED0           30E4                       xor	ah,ah
17101 3ED2           B1                     06  mov	cl,*6
17102 3ED4           D3E0                       shl	ax,cl
17103 3ED6           89C3                       mov	bx,ax
17104 3ED8           81C3                 029A  add	bx,#_video_param_table
17105                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
17106 3EDC           8B46         F6            mov	ax,-$A[bp]
17107 3EDF           01C3                       add	bx,ax
17108                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
17109 3EE1           8A47         37            mov	al,$37[bx]
17110 3EE4           30E4                       xor	ah,ah
17111 3EE6           50                         push	ax
17112                                           ! Debug: list int = const $3CF (used reg = )
17113 3EE7           B8                   03CF  mov	ax,#$3CF
17114 3EEA           50                         push	ax
17115                                           ! Debug: func () void = outb+0 (used reg = )
17116 3EEB           E8         3EB8            call	_outb
17117 3EEE           83C4                   04  add	sp,*4
17118                                           !BCC_EOS
17119                                           ! 2058   }
17120                                           ! 2059  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17121                       00003EF1            .7F:
17122                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17123 3EF1           8B46         F6            mov	ax,-$A[bp]
17124 3EF4           40                         inc	ax
17125 3EF5           8946         F6            mov	-$A[bp],ax
17126                       00003EF8            .80:
17127                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17128 3EF8           8B46         F6            mov	ax,-$A[bp]
17129 3EFB           3D                   0008  cmp	ax,*8
17130 3EFE           76           C0            jbe	.81
17131                       00003F00            .82:
17132                       00003F00            .7E:
17133                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17134 3F00           8A46         FE            mov	al,-2[bp]
17135 3F03           30E4                       xor	ah,ah
17136 3F05           B1                     03  mov	cl,*3
17137 3F07           D3E0                       shl	ax,cl
17138 3F09           89C3                       mov	bx,ax
17139 3F0B           81C3                 0206  add	bx,#_vga_modes
17140                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17141 3F0F           8A47         02            mov	al,2[bx]
17142 3F12           3C                     01  cmp	al,*1
17143 3F14           75           05            jne 	.83
17144                       00003F16            .84:
17145 3F16           B8                   03B4  mov	ax,#$3B4
17146 3F19           EB           03            jmp .85
17147                       00003F1B            .83:
17148 3F1B           B8                   03D4  mov	ax,#$3D4
17149                       00003F1E            .85:
17150                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17151 3F1E           8946         EA            mov	-$16[bp],ax
17152                                           !BCC_EOS
17153                                           ! 2060  outw(crtc_addr,0x0011);
17154                                           ! Debug: list int = const $11 (used reg = )
17155 3F21           B8                   0011  mov	ax,*$11
17156 3F24           50                         push	ax
17157                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17158 3F25           FF76         EA            push	-$16[bp]
17159                                           ! Debug: func () void = outw+0 (used reg = )
17160 3F28           E8         3E8B            call	_outw
17161 3F2B           83C4                   04  add	sp,*4
17162                                           !BCC_EOS
17163                                           ! 2061  for(i=0;i<=0x18;i++)
17164                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17165 3F2E           31C0                       xor	ax,ax
17166 3F30           8946         F6            mov	-$A[bp],ax
17167                                           !BCC_EOS
17168                                           !BCC_EOS
17169                                           ! 2062   {outb(crtc_addr,i);
17170 3F33           EB           38            jmp .88
17171                       00003F35            .89:
17172                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17173 3F35           FF76         F6            push	-$A[bp]
17174                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17175 3F38           FF76         EA            push	-$16[bp]
17176                                           ! Debug: func () void = outb+0 (used reg = )
17177 3F3B           E8         3E68            call	_outb
17178 3F3E           83C4                   04  add	sp,*4
17179                                           !BCC_EOS
17180                                           ! 2063    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17181                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17182 3F41           8A46         F9            mov	al,-7[bp]
17183 3F44           30E4                       xor	ah,ah
17184 3F46           B1                     06  mov	cl,*6
17185 3F48           D3E0                       shl	ax,cl
17186 3F4A           89C3                       mov	bx,ax
17187 3F4C           81C3                 029A  add	bx,#_video_param_table
17188                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17189 3F50           8B46         F6            mov	ax,-$A[bp]
17190 3F53           01C3                       add	bx,ax
17191                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17192 3F55           8A47         0A            mov	al,$A[bx]
17193 3F58           30E4                       xor	ah,ah
17194 3F5A           50                         push	ax
17195                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17196 3F5B           8B46         EA            mov	ax,-$16[bp]
17197                                           ! Debug: list unsigned int = ax+1 (used reg = )
17198 3F5E           40                         inc	ax
17199 3F5F           50                         push	ax
17200                                           ! Debug: func () void = outb+0 (used reg = )
17201 3F60           E8         3E43            call	_outb
17202 3F63           83C4                   04  add	sp,*4
17203                                           !BCC_EOS
17204                                           ! 2064   }
17205                                           ! 2065  outb(0x3c2,video_param_table[vpti].miscreg);
17206                       00003F66            .87:
17207                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17208 3F66           8B46         F6            mov	ax,-$A[bp]
17209 3F69           40                         inc	ax
17210 3F6A           8946         F6            mov	-$A[bp],ax
17211                       00003F6D            .88:
17212                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17213 3F6D           8B46         F6            mov	ax,-$A[bp]
17214 3F70           3D                   0018  cmp	ax,*$18
17215 3F73           76           C0            jbe	.89
17216                       00003F75            .8A:
17217                       00003F75            .86:
17218                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17219 3F75           8A46         F9            mov	al,-7[bp]
17220 3F78           30E4                       xor	ah,ah
17221 3F7A           B1                     06  mov	cl,*6
17222 3F7C           D3E0                       shl	ax,cl
17223 3F7E           89C3                       mov	bx,ax
17224 3F80           81C3                 029A  add	bx,#_video_param_table
17225                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17226 3F84           8A47         09            mov	al,9[bx]
17227 3F87           30E4                       xor	ah,ah
17228 3F89           50                         push	ax
17229                                           ! Debug: list int = const $3C2 (used reg = )
17230 3F8A           B8                   03C2  mov	ax,#$3C2
17231 3F8D           50                         push	ax
17232                                           ! Debug: func () void = outb+0 (used reg = )
17233 3F8E           E8         3E15            call	_outb
17234 3F91           83C4                   04  add	sp,*4
17235                                           !BCC_EOS
17236                                           ! 2066  outb(0
17237                                           ! 2066 x3c0,0x20);
17238                                           ! Debug: list int = const $20 (used reg = )
17239 3F94           B8                   0020  mov	ax,*$20
17240 3F97           50                         push	ax
17241                                           ! Debug: list int = const $3C0 (used reg = )
17242 3F98           B8                   03C0  mov	ax,#$3C0
17243 3F9B           50                         push	ax
17244                                           ! Debug: func () void = outb+0 (used reg = )
17245 3F9C           E8         3E07            call	_outb
17246 3F9F           83C4                   04  add	sp,*4
17247                                           !BCC_EOS
17248                                           ! 2067  inb(0x3da);
17249                                           ! Debug: list int = const $3DA (used reg = )
17250 3FA2           B8                   03DA  mov	ax,#$3DA
17251 3FA5           50                         push	ax
17252                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17253 3FA6           E8         3DE7            call	_inb
17254 3FA9           44                         inc	sp
17255 3FAA           44                         inc	sp
17256                                           !BCC_EOS
17257                                           ! 2068  if(noclearmem==0x00)
17258                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17259 3FAB           8A46         FF            mov	al,-1[bp]
17260 3FAE           84C0                       test	al,al
17261 3FB0         0F85         00C1            bne 	.8B
17262                       00003FB4            .8C:
17263                                           ! 2069   {
17264                                           ! 2070    if(vga_modes[line].class==0x00)
17265                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17266 3FB4           8A46         FE            mov	al,-2[bp]
17267 3FB7           30E4                       xor	ah,ah
17268 3FB9           B1                     03  mov	cl,*3
17269 3FBB           D3E0                       shl	ax,cl
17270 3FBD           89C3                       mov	bx,ax
17271 3FBF           81C3                 0206  add	bx,#_vga_modes
17272                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17273 3FC3           8A47         01            mov	al,1[bx]
17274 3FC6           84C0                       test	al,al
17275 3FC8           75           26            jne 	.8D
17276                       00003FCA            .8E:
17277                                           ! 2071     {
17278                                           ! 2072      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17279                                           ! Debug: list int = const $4000 (used reg = )
17280 3FCA           B8                   4000  mov	ax,#$4000
17281 3FCD           50                         push	ax
17282                                           ! Debug: list int = const $720 (used reg = )
17283 3FCE           B8                   0720  mov	ax,#$720
17284 3FD1           50                         push	ax
17285                                           ! Debug: list int = const 0 (used reg = )
17286 3FD2           31C0                       xor	ax,ax
17287 3FD4           50                         push	ax
17288                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17289 3FD5           8A46         FE            mov	al,-2[bp]
17290 3FD8           30E4                       xor	ah,ah
17291 3FDA           B1                     03  mov	cl,*3
17292 3FDC           D3E0                       shl	ax,cl
17293 3FDE           89C3                       mov	bx,ax
17294 3FE0           81C3                 0206  add	bx,#_vga_modes
17295                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17296 3FE4           FF77         04            push	4[bx]
17297                                           ! Debug: func () void = memsetw+0 (used reg = )
17298 3FE7           E8         3CCB            call	_memsetw
17299 3FEA           83C4                   08  add	sp,*8
17300                                           !BCC_EOS
17301                                           ! 2073     }
17302                                           ! 2074    else
17303                                           ! 2075     {
17304 3FED           E9         0085            br 	.8F
17305                       00003FF0            .8D:
17306                                           ! 2076      if(mode<0x0d)
17307                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17308 3FF0           8A46         04            mov	al,4[bp]
17309 3FF3           3C                     0D  cmp	al,*$D
17310 3FF5           73           24            jae 	.90
17311                       00003FF7            .91:
17312                                           ! 2077       {
17313                                           ! 2078        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17314                                           ! Debug: list int = const $4000 (used reg = )
17315 3FF7           B8                   4000  mov	ax,#$4000
17316 3FFA           50                         push	ax
17317                                           ! Debug: list int = const 0 (used reg = )
17318 3FFB           31C0                       xor	ax,ax
17319 3FFD           50                         push	ax
17320                                           ! Debug: list int = const 0 (used reg = )
17321 3FFE           31C0                       xor	ax,ax
17322 4000           50                         push	ax
17323                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17324 4001           8A46         FE            mov	al,-2[bp]
17325 4004           30E4                       xor	ah,ah
17326 4006           B1                     03  mov	cl,*3
17327 4008           D3E0                       shl	ax,cl
17328 400A           89C3                       mov	bx,ax
17329 400C           81C3                 0206  add	bx,#_vga_modes
17330                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17331 4010           FF77         04            push	4[bx]
17332                                           ! Debug: func () void = memsetw+0 (used reg = )
17333 4013           E8         3C9F            call	_memsetw
17334 4016           83C4                   08  add	sp,*8
17335                                           !BCC_EOS
17336                                           ! 2079       }
17337                                           ! 2080      else
17338                                           ! 2081       {
17339 4019           EB           5A            jmp .92
17340                       0000401B            .90:
17341                                           ! 2082        outb( 0x3c4, 0x02 );
17342                                           ! Debug: list int = const 2 (used reg = )
17343 401B           B8                   0002  mov	ax,*2
17344 401E           50                         push	ax
17345                                           ! Debug: list int = const $3C4 (used reg = )
17346 401F           B8                   03C4  mov	ax,#$3C4
17347 4022           50                         push	ax
17348                                           ! Debug: func () void = outb+0 (used reg = )
17349 4023           E8         3D80            call	_outb
17350 4026           83C4                   04  add	sp,*4
17351                                           !BCC_EOS
17352                                           ! 2083        mmask = inb( 0x3c5 );
17353                                           ! Debug: list int = const $3C5 (used reg = )
17354 4029           B8                   03C5  mov	ax,#$3C5
17355 402C           50                         push	ax
17356                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17357 402D           E8         3D60            call	_inb
17358 4030           44                         inc	sp
17359 4031           44                         inc	sp
17360                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17361 4032           8846         FD            mov	-3[bp],al
17362                                           !BCC_EOS
17363                                           ! 2084        outb( 0x3c5, 0x0f );
17364                                           ! Debug: list int = const $F (used reg = )
17365 4035           B8                   000F  mov	ax,*$F
17366 4038           50                         push	ax
17367                                           ! Debug: list int = const $3C5 (used reg = )
17368 4039           B8                   03C5  mov	ax,#$3C5
17369 403C           50                         push	ax
17370                                           ! Debug: func () void = outb+0 (used reg = )
17371 403D           E8         3D66            call	_outb
17372 4040           83C4                   04  add	sp,*4
17373                                           !BCC_EOS
17374                                           ! 2085        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17375                                           ! Debug: list unsigned int = const $8000 (used reg = )
17376 4043           B8                   8000  mov	ax,#$8000
17377 4046           50                         push	ax
17378                                           ! Debug: list int = const 0 (used reg = )
17379 4047           31C0                       xor	ax,ax
17380 4049           50                         push	ax
17381                                           ! Debug: list int = const 0 (used reg = )
17382 404A           31C0                       xor	ax,ax
17383 404C           50                         push	ax
17384                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17385 404D           8A46         FE            mov	al,-2[bp]
17386 4050           30E4                       xor	ah,ah
17387 4052           B1                     03  mov	cl,*3
17388 4054           D3E0                       shl	ax,cl
17389 4056           89C3                       mov	bx,ax
17390 4058           81C3                 0206  add	bx,#_vga_modes
17391                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17392 405C           FF77         04            push	4[bx]
17393                                           ! Debug: func () void = memsetw+0 (used reg = )
17394 405F           E8         3C53            call	_memsetw
17395 4062           83C4                   08  add	sp,*8
17396                                           !BCC_EOS
17397                                           ! 2086        outb( 0x3c5, mmask );
17398                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17399 4065           8A46         FD            mov	al,-3[bp]
17400 4068           30E4                       xor	ah,ah
17401 406A           50                         push	ax
17402                                           ! Debug: list int = const $3C5 (used reg = )
17403 406B           B8                   03C5  mov	ax,#$3C5
17404 406E           50                         push	ax
17405                                           ! Debug: func () void = outb+0 (used reg = )
17406 406F           E8         3D34            call	_outb
17407 4072           83C4                   04  add	sp,*4
17408                                           !BCC_EOS
17409                                           ! 2087       }
17410                                           ! 2088     }
17411                       00004075            .92:
17412                                           ! 2089   }
17413                       00004075            .8F:
17414                                           ! 2090  write_byte(0x40,0x49,mode);
17415                       00004075            .8B:
17416                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17417 4075           8A46         04            mov	al,4[bp]
17418 4078           30E4                       xor	ah,ah
17419 407A           50                         push	ax
17420                                           ! Debug: list int = const $49 (used reg = )
17421 407B           B8                   0049  mov	ax,*$49
17422 407E           50                         push	ax
17423                                           ! Debug: list int = const $40 (used reg = )
17424 407F           B8                   0040  mov	ax,*$40
17425 4082           50                         push	ax
17426                                           ! Debug: func () void = write_byte+0 (used reg = )
17427 4083           E8         3CDA            call	_write_byte
17428 4086           83C4                   06  add	sp,*6
17429                                           !BCC_EOS
17430                                           ! 2091  write_word(0x40,0x4A,twidth);
17431                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17432 4089           FF76         F4            push	-$C[bp]
17433                                           ! Debug: list int = const $4A (used reg = )
17434 408C           B8                   004A  mov	ax,*$4A
17435 408F           50                         push	ax
17436                                           ! Debug: list int = const $40 (used reg = )
17437 4090           B8                   0040  mov	ax,*$40
17438 4093           50                         push	ax
17439                                           ! Debug: func () void = write_word+0 (used reg = )
17440 4094           E8         3CE1            call	_write_word
17441 4097           83C4                   06  add	sp,*6
17442                                           !BCC_EOS
17443                                           ! 2092  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17444                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17445 409A           8A46         F9            mov	al,-7[bp]
17446 409D           30E4                       xor	ah,ah
17447 409F           B1                     06  mov	cl,*6
17448 40A1           D3E0                       shl	ax,cl
17449 40A3           89C3                       mov	bx,ax
17450 40A5           81C3                 029A  add	bx,#_video_param_table
17451                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17452                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17453                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17454 40A9           FF77         03            push	3[bx]
17455                                           ! Debug: list int = const $4C (used reg = )
17456 40AC           B8                   004C  mov	ax,*$4C
17457 40AF           50                         push	ax
17458                                           ! Debug: list int = const $40 (used reg = )
17459 40B0           B8                   0040  mov	ax,*$40
17460 40B3           50                         push	ax
17461                                           ! Debug: func () void = write_word+0 (used reg = )
17462 40B4           E8         3CC1            call	_write_word
17463 40B7           83C4                   06  add	sp,*6
17464                                           !BCC_EOS
17465                                           ! 2093  write_word(0x40,0x63,crtc_addr);
17466                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17467 40BA           FF76         EA            push	-$16[bp]
17468                                           ! Debug: list int = const $63 (used reg = )
17469 40BD           B8                   0063  mov	ax,*$63
17470 40C0           50                         push	ax
17471                                           ! Debug: list int = const $40 (used reg = )
17472 40C1           B8                   0040  mov	ax,*$40
17473 40C4           50                         push	ax
17474                                           ! Debug: func () void = write_word+0 (used reg = )
17475 40C5           E8         3CB0            call	_write_word
17476 40C8           83C4                   06  add	sp,*6
17477                                           !BCC_EOS
17478                                           ! 2094  write_byte(0x40,0x84,theightm1);
17479                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17480 40CB           FF76         F2            push	-$E[bp]
17481                                           ! Debug: list int = const $84 (used reg = )
17482 40CE           B8                   0084  mov	ax,#$84
17483 40D1           50                         push	ax
17484                                           ! Debug: list int = const $40 (used reg = )
17485 40D2           B8                   0040  mov	ax,*$40
17486 40D5           50                         push	ax
17487                                           ! Debug: func () void = write_byte+0 (used reg = )
17488 40D6           E8         3C87            call	_write_byte
17489 40D9           83C4                   06  add	sp,*6
17490                                           !BCC_EOS
17491                                           ! 2095  write_word(0x40,0x85,cheight);
17492                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17493 40DC           FF76         F0            push	-$10[bp]
17494                                           ! Debug: list int = const $85 (used reg = )
17495 40DF           B8                   0085  mov	ax,#$85
17496 40E2           50                         push	ax
17497                                           ! Debug: list int = const $40 (used reg = )
17498 40E3           B8                   0040  mov	ax,*$40
17499 40E6           50                         push	ax
17500                                           ! Debug: func () void = write_word+0 (used reg = )
17501 40E7           E8         3C8E            call	_write_word
17502 40EA           83C4                   06  add	sp,*6
17503                                           !BCC_EOS
17504                                           ! 2096  write_byte(0x40,0x87,(0x60|noclearmem));
17505                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17506                                           ! Debug: expression subtree swapping
17507 40ED           8A46         FF            mov	al,-1[bp]
17508 40F0           0C                     60  or	al,*$60
17509                                           ! Debug: list unsigned char = al+0 (used reg = )
17510 40F2           30E4                       xor	ah,ah
17511 40F4           50                         push	ax
17512                                           ! Debug: list int = const $87 (used reg = )
17513 40F5           B8                   0087  mov	ax,#$87
17514 40F8           50                         push	ax
17515                                           ! Debug: list int = const $40 (used reg = )
17516 40F9           B8                   0040  mov	ax,*$40
17517 40FC           50                         push	ax
17518                                           ! Debug: func () void = write_byte+0 (used reg = )
17519 40FD           E8         3C60            call	_write_byte
17520 4100           83C4                   06  add	sp,*6
17521                                           !BCC_EOS
17522                                           ! 2097  write_byte(0x40,0x88,0xF9);
17523                                           ! Debug: list int = const $F9 (used reg = )
17524 4103           B8                   00F9  mov	ax,#$F9
17525 4106           50                         push	ax
17526                                           ! Debug: list int = const $88 (used reg = )
17527 4107           B8                   0088  mov	ax,#$88
17528 410A           50                         push	ax
17529                                           ! Debug: list int = const $40 (used reg = )
17530 410B           B8                   0040  mov	ax,*$40
17531 410E           50                         push	ax
17532                                           ! Debug: func () void = write_byte+0 (used reg = )
17533 410F           E8         3C4E            call	_write_byte
17534 4112           83C4                   06  add	sp,*6
17535                                           !BCC_EOS
17536                                           ! 2098  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17537                                           ! Debug: list int = const $89 (used reg = )
17538 4115           B8                   0089  mov	ax,#$89
17539 4118           50                         push	ax
17540                                           ! Debug: list int = const $40 (used reg = )
17541 4119           B8                   0040  mov	ax,*$40
17542 411C           50                         push	ax
17543                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17544 411D           E8         3C1A            call	_read_byte
17545 4120           83C4                   04  add	sp,*4
17546                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17547 4123           24                     7F  and	al,*$7F
17548                                           ! Debug: list unsigned char = al+0 (used reg = )
17549 4125           30E4                       xor	ah,ah
17550 4127           50                         push	ax
17551                                           ! Debug: list int = const $89 (used reg = )
17552 4128           B8                   0089  mov	ax,#$89
17553 412B           50                         push	ax
17554                                           ! Debug: list int = const $40 (used reg = )
17555 412C           B8                   0040  mov	ax,*$40
17556 412F           50                         push	ax
17557                                           ! Debug: func () void = write_byte+0 (used reg = )
17558 4130           E8         3C2D            call	_write_byte
17559 4133           83C4                   06  add	sp,*6
17560                                           !BCC_EOS
17561                                           ! 2099  write_byte(0x40,0x8A,0x08);
17562                                           ! Debug: list int = const 8 (used reg = )
17563 4136           B8                   0008  mov	ax,*8
17564 4139           50                         push	ax
17565                                           ! Debug: list int = const $8A (used reg = )
17566 413A           B8                   008A  mov	ax,#$8A
17567 413D           50                         push	ax
17568                                           ! Debug: list int = const $40 (used reg = )
17569 413E           B8                   0040  mov	ax,*$40
17570 4141           50                         push	ax
17571                                           ! Debug: func () void = write_byte+0 (used reg = )
17572 4142           E8         3C1B            call	_write_byte
17573 4145           83C4                   06  add	sp,*6
17574                                           !BCC_EOS
17575                                           ! 2100  write_word(0x40,0xA8, video_save_pointer_table);
17576                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17577 4148           BB                   35CF  mov	bx,#_video_save_pointer_table
17578 414B           53                         push	bx
17579                                           ! Debug: list int = const $A8 (used reg = )
17580 414C           B8                   00A8  mov	ax,#$A8
17581 414F           50                         push	ax
17582                                           ! Debug: list int = const $40 (used reg = )
17583 4150           B8                   0040  mov	ax,*$40
17584 4153           50                         push	ax
17585                                           ! Debug: func () void = write_word+0 (used reg = )
17586 4154           E8         3C21            call	_write_word
17587 4157           83C4                   06  add	sp,*6
17588                                           !BCC_EOS
17589                                           ! 2101  write_word(0x40,0xA8 +2, 0xc000);
17590                                           ! Debug: list unsigned int = const $C000 (used reg = )
17591 415A           B8                   C000  mov	ax,#$C000
17592 415D           50                         push	ax
17593                                           ! Debug: list int = const $AA (used reg = )
17594 415E           B8                   00AA  mov	ax,#$AA
17595 4161           50                         push	ax
17596                                           ! Debug: list int = const $40 (used reg = )
17597 4162           B8                   0040  mov	ax,*$40
17598 4165           50                         push	ax
17599                                           ! Debug: func () void = write_word+0 (used reg = )
17600 4166           E8         3C0F            call	_write_word
17601 4169           83C4                   06  add	sp,*6
17602                                           !BCC_EOS
17603                                           ! 2102  write_byte(0x40,0x65,0x00);
17604                                           ! Debug: list int = const 0 (used reg = )
17605 416C           31C0                       xor	ax,ax
17606 416E           50                         push	ax
17607                                           ! Debug: list int = const $65 (used reg = )
17608 416F           B8                   0065  mov	ax,*$65
17609 4172           50                         push	ax
17610                                           ! Debug: list int = const $40 (used reg = )
17611 4173           B8                   0040  mov	ax,*$40
17612 4176           50                         push	ax
17613                                           ! Debug: func () void = write_byte+0 (used reg = )
17614 4177           E8         3BE6            call	_write_byte
17615 417A           83C4                   06  add	sp,*6
17616                                           !BCC_EOS
17617                                           ! 2103  write_byte(0x40,0x66,0x00);
17618                                           ! Debug: list int = const 0 (used reg = )
17619 417D           31C0                       xor	ax,ax
17620 417F           50                         push	ax
17621                                           ! Debug: list int = const $66 (used reg = )
17622 4180           B8                   0066  mov	ax,*$66
17623 4183           50                         push	ax
17624                                           ! Debug: list int = const $40 (used reg = )
17625 4184           B8                   0040  mov	ax,*$40
17626 4187           50                         push	ax
17627                                           ! Debug: func () void = write_byte+0 (used reg = )
17628 4188           E8         3BD5            call	_write_byte
17629 418B           83C4                   06  add	sp,*6
17630                                           !BCC_EOS
17631                                           ! 2104  if(vga_modes[line].class==0x00)
17632                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17633 418E           8A46         FE            mov	al,-2[bp]
17634 4191           30E4                       xor	ah,ah
17635 4193           B1                     03  mov	cl,*3
17636 4195           D3E0                       shl	ax,cl
17637 4197           89C3                       mov	bx,ax
17638 4199           81C3                 0206  add	bx,#_vga_modes
17639                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17640 419D           8A47         01            mov	al,1[bx]
17641 41A0           84C0                       test	al,al
17642 41A2           75           0E            jne 	.93
17643                       000041A4            .94:
17644                                           ! 2105   {
17645                                           ! 2106    biosfn_set_cursor_shape(0x06,0x07);
17646                                           ! Debug: list int = const 7 (used reg = )
17647 41A4           B8                   0007  mov	ax,*7
17648 41A7           50                         push	ax
17649                                           ! Debug: list int = const 6 (used reg = )
17650 41A8           B8                   0006  mov	ax,*6
17651 41AB           50                         push	ax
17652                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17653 41AC           E8         00BA            call	_biosfn_set_cursor_shape
17654 41AF           83C4                   04  add	sp,*4
17655                                           !BCC_EOS
17656                                           ! 2107   }
17657                                           ! 2108  for(i=0;i<8;i++)
17658                       000041B2            .93:
17659                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17660 41B2           31C0                       xor	ax,ax
17661 41B4           8946         F6            mov	-$A[bp],ax
17662                                           !BCC_EOS
17663                                           !BCC_EOS
17664                                           ! 2109   biosfn_set_cursor_pos(i,0x0000);
17665 41B7           EB           13            jmp .97
17666                       000041B9            .98:
17667                                           ! Debug: list int = const 0 (used reg = )
17668 41B9           31C0                       xor	ax,ax
17669 41BB           50                         push	ax
17670                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17671 41BC           FF76         F6            push	-$A[bp]
17672                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17673 41BF           E8         01C2            call	_biosfn_set_cursor_pos
17674 41C2           83C4                   04  add	sp,*4
17675                                           !BCC_EOS
17676                                           ! 2110  biosfn_set_active_page(0x00);
17677                       000041C5            .96:
17678                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17679 41C5           8B46         F6            mov	ax,-$A[bp]
17680 41C8           40                         inc	ax
17681 41C9           8946         F6            mov	-$A[bp],ax
17682                       000041CC            .97:
17683                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17684 41CC           8B46         F6            mov	ax,-$A[bp]
17685 41CF           3D                   0008  cmp	ax,*8
17686 41D2           72           E5            jb 	.98
17687                       000041D4            .99:
17688                       000041D4            .95:
17689                                           ! Debug: list int = const 0 (used reg = )
17690 41D4           31C0                       xor	ax,ax
17691 41D6           50                         push	ax
17692                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17693 41D7           E8         031F            call	_biosfn_set_active_page
17694 41DA           44                         inc	sp
17695 41DB           44                         inc	sp
17696                                           !BCC_EOS
17697                                           ! 2111  if(vga_modes[line].class==0x00)
17698                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17699 41DC           8A46         FE            mov	al,-2[bp]
17700 41DF           30E4                       xor	ah,ah
17701 41E1           B1                     03  mov	cl,*3
17702 41E3           D3E0                       shl	ax,cl
17703 41E5           89C3                       mov	bx,ax
17704 41E7           81C3                 0206  add	bx,#_vga_modes
17705                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17706 41EB           8A47         01            mov	al,1[bx]
17707 41EE           84C0                       test	al,al
17708 41F0           75           0E            jne 	.9A
17709                       000041F2            .9B:
17710                                           ! 2112   {
17711                                           ! 2113 #asm
17712                                           !BCC_EOS
17713                                           !BCC_ASM
17714                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17715                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17716                       00000008            _biosfn_set_video_mode.theightm1	set	8
17717                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17718                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17719                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17720                       00000014            _biosfn_set_video_mode.line	set	$14
17721                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17722                       00000006            _biosfn_set_video_mode.cheight	set	6
17723                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17724                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17725                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17726                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17727                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17728                       0000000C            _biosfn_set_video_mode.i	set	$C
17729                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17730                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17731                       00000004            .biosfn_set_video_mode.mode	set	4
17732                       00000010            _biosfn_set_video_mode.palette	set	$10
17733                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17734                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17735                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17736                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17737                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17738                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17739                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17740                       00000013            _biosfn_set_video_mode.mmask	set	$13
17741                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17742                                             ;; copy and activate 8x16 font
17743 41F2           B8                   1104    mov ax, #0x1104
17744 41F5           B3                     00    mov bl, #0x00
17745 41F7           CD                     10    int #0x10
17746 41F9           B8                   1103    mov ax, #0x1103
17747 41FC           B3                     00    mov bl, #0x00
17748 41FE           CD                     10    int #0x10
17749                                           ! 2121 endasm
17750                                           !BCC_ENDASM
17751                                           !BCC_EOS
17752                                           ! 2122   }
17753                                           ! 2123 #asm
17754                       00004200            .9A:
17755                                           !BCC_EOS
17756                                           !BCC_ASM
17757                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17758                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17759                       00000008            _biosfn_set_video_mode.theightm1	set	8
17760                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17761                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17762                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17763                       00000014            _biosfn_set_video_mode.line	set	$14
17764                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17765                       00000006            _biosfn_set_video_mode.cheight	set	6
17766                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17767                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17768                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17769                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17770                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17771                       0000000C            _biosfn_set_video_mode.i	set	$C
17772                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17773                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17774                       00000004            .biosfn_set_video_mode.mode	set	4
17775                       00000010            _biosfn_set_video_mode.palette	set	$10
17776                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17777                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17778                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17779                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17780                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17781                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17782                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17783                       00000013            _biosfn_set_video_mode.mmask	set	$13
17784                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17785                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   4200           1E                           push ds
 +a   4201           31C0                         xor ax, ax
 +a   4203           8ED8                         mov ds, ax
 +a   4205           B8                   136A    mov ax,  #_vgafont8+128*8
 +a   4208           A3         007C              mov 0x1f*4, ax
 +a   420B           B8                   C000    mov ax,  #0xC000
 +a   420E           A3         007E              mov 0x1f*4+2, ax
 +a   4211           1F                           pop ds
17786                                           ! 2125 endasm
17787                                           !BCC_ENDASM
17788                                           !BCC_EOS
17789                                           ! 2126   switch(cheight)
17790 4212           8B46         F0            mov	ax,-$10[bp]
17791                                           ! 2127    {case 8:
17792 4215           E9         003E            br 	.9E
17793                                           ! 2128 #asm
17794                       00004218            .9F:
17795                                           !BCC_EOS
17796                                           !BCC_ASM
17797                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17798                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17799                       00000008            _biosfn_set_video_mode.theightm1	set	8
17800                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17801                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17802                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17803                       00000014            _biosfn_set_video_mode.line	set	$14
17804                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17805                       00000006            _biosfn_set_video_mode.cheight	set	6
17806                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17807                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17808                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17809                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17810                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17811                       0000000C            _biosfn_set_video_mode.i	set	$C
17812                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17813                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17814                       00000004            .biosfn_set_video_mode.mode	set	4
17815                       00000010            _biosfn_set_video_mode.palette	set	$10
17816                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17817                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17818                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17819                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17820                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17821                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17822                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17823                       00000013            _biosfn_set_video_mode.mmask	set	$13
17824                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17825                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   4218           1E                           push ds
 +a   4219           31C0                         xor ax, ax
 +a   421B           8ED8                         mov ds, ax
 +a   421D           B8                   0F6A    mov ax,  #_vgafont8
 +a   4220           A3         010C              mov 0x43*4, ax
 +a   4223           B8                   C000    mov ax,  #0xC000
 +a   4226           A3         010E              mov 0x43*4+2, ax
 +a   4229           1F                           pop ds
17826                                           ! 2130 endasm
17827                                           !BCC_ENDASM
17828                                           !BCC_EOS
17829                                           ! 2131      break;
17830 422A           EB           39            jmp .9C
17831                                           !BCC_EOS
17832                                           ! 2132     case 14:
17833                                           ! 2133 #asm
17834                       0000422C            .A0:
17835                                           !BCC_EOS
17836                                           !BCC_ASM
17837                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17838                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17839                       00000008            _biosfn_set_video_mode.theightm1	set	8
17840                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17841                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17842                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17843                       00000014            _biosfn_set_video_mode.line	set	$14
17844                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17845                       00000006            _biosfn_set_video_mode.cheight	set	6
17846                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17847                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17848                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17849                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17850                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17851                       0000000C            _biosfn_set_video_mode.i	set	$C
17852                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17853                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17854                       00000004            .biosfn_set_video_mode.mode	set	4
17855                       00000010            _biosfn_set_video_mode.palette	set	$10
17856                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17857                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17858                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17859                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17860                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17861                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17862                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17863                       00000013            _biosfn_set_video_mode.mmask	set	$13
17864                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17865                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   422C           1E                           push ds
 +a   422D           31C0                         xor ax, ax
 +a   422F           8ED8                         mov ds, ax
 +a   4231           B8                   176A    mov ax,  #_vgafont14
 +a   4234           A3         010C              mov 0x43*4, ax
 +a   4237           B8                   C000    mov ax,  #0xC000
 +a   423A           A3         010E              mov 0x43*4+2, ax
 +a   423D           1F                           pop ds
17866                                           ! 2135 endasm
17867                                           !BCC_ENDASM
17868                                           !BCC_EOS
17869                                           ! 2136      break;
17870 423E           EB           25            jmp .9C
17871                                           !BCC_EOS
17872                                           ! 2137     case 16:
17873                                           ! 2138 #asm
17874                       00004240            .A1:
17875                                           !BCC_EOS
17876                                           !BCC_ASM
17877                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17878                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17879                       00000008            _biosfn_set_video_mode.theightm1	set	8
17880                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17881                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17882                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17883                       00000014            _biosfn_set_video_mode.line	set	$14
17884                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17885                       00000006            _biosfn_set_video_mode.cheight	set	6
17886                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17887                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17888                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17889                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17890                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17891                       0000000C            _biosfn_set_video_mode.i	set	$C
17892                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17893                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17894                       00000004            .biosfn_set_video_mode.mode	set	4
17895                       00000010            _biosfn_set_video_mode.palette	set	$10
17896                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17897                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17898                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17899                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17900                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17901                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17902                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17903                       00000013            _biosfn_set_video_mode.mmask	set	$13
17904                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17905                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4240           1E                           push ds
 +a   4241           31C0                         xor ax, ax
 +a   4243           8ED8                         mov ds, ax
 +a   4245           B8                   256A    mov ax,  #_vgafont16
 +a   4248           A3         010C              mov 0x43*4, ax
 +a   424B           B8                   C000    mov ax,  #0xC000
 +a   424E           A3         010E              mov 0x43*4+2, ax
 +a   4251           1F                           pop ds
17906                                           ! 2140 endasm
17907                                           !BCC_ENDASM
17908                                           !BCC_EOS
17909                                           ! 2141      break;
17910 4252           EB           11            jmp .9C
17911                                           !BCC_EOS
17912                                           ! 2142    }
17913                                           ! 2143 }
17914 4254           EB           0F            jmp .9C
17915                       00004256            .9E:
17916 4256           2D                   0008  sub	ax,*8
17917 4259           74           BD            je 	.9F
17918 425B           2D                   0006  sub	ax,*6
17919 425E           74           CC            je 	.A0
17920 4260           2D                   0002  sub	ax,*2
17921 4263           74           DB            je 	.A1
17922                       00004265            .9C:
17923                       FFFFFFE8            ..FFFD	=	-$18
17924 4265           89EC                       mov	sp,bp
17925 4267           5D                         pop	bp
17926 4268           C3                         ret
17927                                           ! 2144 static void biosfn_set_cursor_shape (CH,CL)
17928                                           ! Register BX used in function biosfn_set_video_mode
17929                                           ! 2145 Bit8u CH;Bit8u CL;
17930                       00004269            _biosfn_set_cursor_shape:
17931                                           !BCC_EOS
17932                                           !BCC_EOS
17933                                           ! 2146 {Bit16u cheight,curs,crtc_addr;
17934                                           !BCC_EOS
17935                                           ! 2147  Bit8u modeset_ctl;
17936                                           !BCC_EOS
17937                                           ! 2148  CH&=0x3f;
17938 4269           55                         push	bp
17939 426A           89E5                       mov	bp,sp
17940 426C           83C4                   F8  add	sp,*-8
17941                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17942 426F           8A46         04            mov	al,4[bp]
17943 4272           24                     3F  and	al,*$3F
17944 4274           8846         04            mov	4[bp],al
17945                                           !BCC_EOS
17946                                           ! 2149  CL&=0x1f;
17947                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17948 4277           8A46         06            mov	al,6[bp]
17949 427A           24                     1F  and	al,*$1F
17950 427C           8846         06            mov	6[bp],al
17951                                           !BCC_EOS
17952                                           ! 2150  curs=(CH<<8)+CL;
17953                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17954 427F           8A46         04            mov	al,4[bp]
17955 4282           30E4                       xor	ah,ah
17956 4284           88C4                       mov	ah,al
17957 4286           30C0                       xor	al,al
17958                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17959 4288           0246         06            add	al,6[bp]
17960 428B           80D4                   00  adc	ah,*0
17961                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17962 428E           8946         FC            mov	-4[bp],ax
17963                                           !BCC_EOS
17964                                           ! 2151  write_word(0x40,0x60,curs);
17965                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17966 4291           FF76         FC            push	-4[bp]
17967                                           ! Debug: list int = const $60 (used reg = )
17968 4294           B8                   0060  mov	ax,*$60
17969 4297           50                         push	ax
17970                                           ! Debug: list int = const $40 (used reg = )
17971 4298           B8                   0040  mov	ax,*$40
17972 429B           50                         push	ax
17973                                           ! Debug: func () void = write_word+0 (used reg = )
17974 429C           E8         3AD9            call	_write_word
17975 429F           83C4                   06  add	sp,*6
17976                                           !BCC_EOS
17977                                           ! 2152  modeset_ctl=read_byte(0x40,0x89);
17978                                           ! Debug: list int = const $89 (used reg = )
17979 42A2           B8                   0089  mov	ax,#$89
17980 42A5           50                         push	ax
17981                                           ! Debug: list int = const $40 (used reg = )
17982 42A6           B8                   0040  mov	ax,*$40
17983 42A9           50                         push	ax
17984                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17985 42AA           E8         3A8D            call	_read_byte
17986 42AD           83C4                   04  add	sp,*4
17987                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17988 42B0           8846         F9            mov	-7[bp],al
17989                                           !BCC_EOS
17990                                           ! 2153  cheight = read_word(0x40,0x85);
17991                                           ! Debug: list int = const $85 (used reg = )
17992 42B3           B8                   0085  mov	ax,#$85
17993 42B6           50                         push	ax
17994                                           ! Debug: list int = const $40 (used reg = )
17995 42B7           B8                   0040  mov	ax,*$40
17996 42BA           50                         push	ax
17997                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17998 42BB           E8         3A8F            call	_read_word
17999 42BE           83C4                   04  add	sp,*4
18000                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
18001 42C1           8946         FE            mov	-2[bp],ax
18002                                           !BCC_EOS
18003                                           ! 2154  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
18004                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
18005 42C4           8A46         F9            mov	al,-7[bp]
18006 42C7           24                     01  and	al,*1
18007 42C9           84C0                       test	al,al
18008 42CB           74           66            je  	.A2
18009                       000042CD            .A6:
18010                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
18011 42CD           8B46         FE            mov	ax,-2[bp]
18012 42D0           3D                   0008  cmp	ax,*8
18013 42D3           76           5E            jbe 	.A2
18014                       000042D5            .A5:
18015                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
18016 42D5           8A46         06            mov	al,6[bp]
18017 42D8           3C                     08  cmp	al,*8
18018 42DA           73           57            jae 	.A2
18019                       000042DC            .A4:
18020                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
18021 42DC           8A46         04            mov	al,4[bp]
18022 42DF           3C                     20  cmp	al,*$20
18023 42E1           73           50            jae 	.A2
18024                       000042E3            .A3:
18025                                           ! 2155   {
18026                                           ! 2156    if(CL!=(CH+1))
18027                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18028 42E3           8A46         04            mov	al,4[bp]
18029 42E6           30E4                       xor	ah,ah
18030                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
18031                                           ! Debug: expression subtree swapping
18032 42E8           40                         inc	ax
18033 42E9           50                         push	ax
18034 42EA           8A46         06            mov	al,6[bp]
18035 42ED           30E4                       xor	ah,ah
18036 42EF           3B46         F6            cmp	ax,-$A[bp]
18037 42F2           8D66         F8            lea	sp,-8[bp]
18038 42F5           74           15            je  	.A7
18039                       000042F7            .A8:
18040                                           ! 2157     {
18041                                           ! 2158      CH = ((CH+1) * cheight / 8) -
18042                                           ! 2158 1;
18043                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18044 42F7           8A46         04            mov	al,4[bp]
18045 42FA           30E4                       xor	ah,ah
18046                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18047 42FC           40                         inc	ax
18048 42FD           8B4E         FE            mov	cx,-2[bp]
18049 4300           F7E9                       imul	cx
18050                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18051 4302           B1                     03  mov	cl,*3
18052 4304           D3E8                       shr	ax,cl
18053                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18054                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
18055 4306           48                         dec	ax
18056 4307           8846         04            mov	4[bp],al
18057                                           !BCC_EOS
18058                                           ! 2159     }
18059                                           ! 2160    else
18060                                           ! 2161     {
18061 430A           EB           14            jmp .A9
18062                       0000430C            .A7:
18063                                           ! 2162      CH = ((CL+1) * cheight / 8) - 2;
18064                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18065 430C           8A46         06            mov	al,6[bp]
18066 430F           30E4                       xor	ah,ah
18067                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18068 4311           40                         inc	ax
18069 4312           8B4E         FE            mov	cx,-2[bp]
18070 4315           F7E9                       imul	cx
18071                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18072 4317           B1                     03  mov	cl,*3
18073 4319           D3E8                       shr	ax,cl
18074                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
18075                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
18076 431B           48                         dec	ax
18077 431C           48                         dec	ax
18078 431D           8846         04            mov	4[bp],al
18079                                           !BCC_EOS
18080                                           ! 2163     }
18081                                           ! 2164    CL = ((CL+1) * cheight / 8) - 1;
18082                       00004320            .A9:
18083                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18084 4320           8A46         06            mov	al,6[bp]
18085 4323           30E4                       xor	ah,ah
18086                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18087 4325           40                         inc	ax
18088 4326           8B4E         FE            mov	cx,-2[bp]
18089 4329           F7E9                       imul	cx
18090                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18091 432B           B1                     03  mov	cl,*3
18092 432D           D3E8                       shr	ax,cl
18093                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18094                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
18095 432F           48                         dec	ax
18096 4330           8846         06            mov	6[bp],al
18097                                           !BCC_EOS
18098                                           ! 2165   }
18099                                           ! 2166  crtc_addr=read_word(0x40,0x63);
18100                       00004333            .A2:
18101                                           ! Debug: list int = const $63 (used reg = )
18102 4333           B8                   0063  mov	ax,*$63
18103 4336           50                         push	ax
18104                                           ! Debug: list int = const $40 (used reg = )
18105 4337           B8                   0040  mov	ax,*$40
18106 433A           50                         push	ax
18107                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18108 433B           E8         3A0F            call	_read_word
18109 433E           83C4                   04  add	sp,*4
18110                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
18111 4341           8946         FA            mov	-6[bp],ax
18112                                           !BCC_EOS
18113                                           ! 2167  outb(crtc_addr,0x0a);
18114                                           ! Debug: list int = const $A (used reg = )
18115 4344           B8                   000A  mov	ax,*$A
18116 4347           50                         push	ax
18117                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18118 4348           FF76         FA            push	-6[bp]
18119                                           ! Debug: func () void = outb+0 (used reg = )
18120 434B           E8         3A58            call	_outb
18121 434E           83C4                   04  add	sp,*4
18122                                           !BCC_EOS
18123                                           ! 2168  outb(crtc_addr+1,CH);
18124                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18125 4351           8A46         04            mov	al,4[bp]
18126 4354           30E4                       xor	ah,ah
18127 4356           50                         push	ax
18128                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18129 4357           8B46         FA            mov	ax,-6[bp]
18130                                           ! Debug: list unsigned int = ax+1 (used reg = )
18131 435A           40                         inc	ax
18132 435B           50                         push	ax
18133                                           ! Debug: func () void = outb+0 (used reg = )
18134 435C           E8         3A47            call	_outb
18135 435F           83C4                   04  add	sp,*4
18136                                           !BCC_EOS
18137                                           ! 2169  outb(crtc_addr,0x0b);
18138                                           ! Debug: list int = const $B (used reg = )
18139 4362           B8                   000B  mov	ax,*$B
18140 4365           50                         push	ax
18141                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18142 4366           FF76         FA            push	-6[bp]
18143                                           ! Debug: func () void = outb+0 (used reg = )
18144 4369           E8         3A3A            call	_outb
18145 436C           83C4                   04  add	sp,*4
18146                                           !BCC_EOS
18147                                           ! 2170  outb(crtc_addr+1,CL);
18148                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18149 436F           8A46         06            mov	al,6[bp]
18150 4372           30E4                       xor	ah,ah
18151 4374           50                         push	ax
18152                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18153 4375           8B46         FA            mov	ax,-6[bp]
18154                                           ! Debug: list unsigned int = ax+1 (used reg = )
18155 4378           40                         inc	ax
18156 4379           50                         push	ax
18157                                           ! Debug: func () void = outb+0 (used reg = )
18158 437A           E8         3A29            call	_outb
18159 437D           83C4                   04  add	sp,*4
18160                                           !BCC_EOS
18161                                           ! 2171 }
18162 4380           89EC                       mov	sp,bp
18163 4382           5D                         pop	bp
18164 4383           C3                         ret
18165                                           ! 2172 static void biosfn_set_cursor_pos (page, cursor)
18166                                           ! 2173 Bit8u page;Bit16u cursor;
18167                       00004384            _biosfn_set_cursor_pos:
18168                                           !BCC_EOS
18169                                           !BCC_EOS
18170                                           ! 2174 {
18171                                           ! 2175  Bit8u xcurs,ycurs,current;
18172                                           !BCC_EOS
18173                                           ! 2176  Bit16u nbcols,nbrows,address,crtc_addr;
18174                                           !BCC_EOS
18175                                           ! 2177  if(page>7)return;
18176 4384           55                         push	bp
18177 4385           89E5                       mov	bp,sp
18178 4387           83C4                   F4  add	sp,*-$C
18179                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18180 438A           8A46         04            mov	al,4[bp]
18181 438D           3C                     07  cmp	al,*7
18182 438F           76           04            jbe 	.AA
18183                       00004391            .AB:
18184 4391           89EC                       mov	sp,bp
18185 4393           5D                         pop	bp
18186 4394           C3                         ret
18187                                           !BCC_EOS
18188                                           ! 2178  write_word(0x40, 0x50 +2*page, cursor);
18189                       00004395            .AA:
18190                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18191 4395           FF76         06            push	6[bp]
18192                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18193                                           ! Debug: expression subtree swapping
18194 4398           8A46         04            mov	al,4[bp]
18195 439B           30E4                       xor	ah,ah
18196 439D           D1E0                       shl	ax,*1
18197                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18198                                           ! Debug: expression subtree swapping
18199                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18200 439F           05                   0050  add	ax,*$50
18201 43A2           50                         push	ax
18202                                           ! Debug: list int = const $40 (used reg = )
18203 43A3           B8                   0040  mov	ax,*$40
18204 43A6           50                         push	ax
18205                                           ! Debug: func () void = write_word+0 (used reg = )
18206 43A7           E8         39CE            call	_write_word
18207 43AA           83C4                   06  add	sp,*6
18208                                           !BCC_EOS
18209                                           ! 2179  current=read_byte(0x40,0x62);
18210                                           ! Debug: list int = const $62 (used reg = )
18211 43AD           B8                   0062  mov	ax,*$62
18212 43B0           50                         push	ax
18213                                           ! Debug: list int = const $40 (used reg = )
18214 43B1           B8                   0040  mov	ax,*$40
18215 43B4           50                         push	ax
18216                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18217 43B5           E8         3982            call	_read_byte
18218 43B8           83C4                   04  add	sp,*4
18219                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18220 43BB           8846         FD            mov	-3[bp],al
18221                                           !BCC_EOS
18222                                           ! 2180  if(page==current)
18223                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18224 43BE           8A46         04            mov	al,4[bp]
18225 43C1           3A46         FD            cmp	al,-3[bp]
18226 43C4         0F85         00B8            bne 	.AC
18227                       000043C8            .AD:
18228                                           ! 2181   {
18229                                           ! 2182    nbcols=read_word(0x40,0x4A);
18230                                           ! Debug: list int = const $4A (used reg = )
18231 43C8           B8                   004A  mov	ax,*$4A
18232 43CB           50                         push	ax
18233                                           ! Debug: list int = const $40 (used reg = )
18234 43CC           B8                   0040  mov	ax,*$40
18235 43CF           50                         push	ax
18236                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18237 43D0           E8         397A            call	_read_word
18238 43D3           83C4                   04  add	sp,*4
18239                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18240 43D6           8946         FA            mov	-6[bp],ax
18241                                           !BCC_EOS
18242                                           ! 2183    nbrows=read_byte(0x40,0x84)+1;
18243                                           ! Debug: list int = const $84 (used reg = )
18244 43D9           B8                   0084  mov	ax,#$84
18245 43DC           50                         push	ax
18246                                           ! Debug: list int = const $40 (used reg = )
18247 43DD           B8                   0040  mov	ax,*$40
18248 43E0           50                         push	ax
18249                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18250 43E1           E8         3956            call	_read_byte
18251 43E4           83C4                   04  add	sp,*4
18252                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18253 43E7           30E4                       xor	ah,ah
18254                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18255 43E9           40                         inc	ax
18256 43EA           8946         F8            mov	-8[bp],ax
18257                                           !BCC_EOS
18258                                           ! 2184    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18259                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18260 43ED           8A46         06            mov	al,6[bp]
18261                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18262 43F0           8846         FF            mov	-1[bp],al
18263                                           !BCC_EOS
18264                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18265 43F3           8B46         06            mov	ax,6[bp]
18266 43F6           30C0                       xor	al,al
18267                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18268 43F8           88E0                       mov	al,ah
18269 43FA           30E4                       xor	ah,ah
18270                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18271 43FC           8846         FE            mov	-2[bp],al
18272                                           !BCC_EOS
18273                                           ! 2185    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18274                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18275 43FF           8A46         FE            mov	al,-2[bp]
18276 4402           30E4                       xor	ah,ah
18277 4404           8B4E         FA            mov	cx,-6[bp]
18278 4407           F7E9                       imul	cx
18279 4409           50                         push	ax
18280                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18281 440A           8B46         FA            mov	ax,-6[bp]
18282 440D           8B4E         F8            mov	cx,-8[bp]
18283 4410           F7E9                       imul	cx
18284                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18285 4412           0C                     FF  or	al,#$FF
18286                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18287                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18288 4414           89C3                       mov	bx,ax
18289 4416           8A46         04            mov	al,4[bp]
18290 4419           30E4                       xor	ah,ah
18291 441B           93                         xchg	ax,bx
18292 441C           40                         inc	ax
18293 441D           89D9                       mov	cx,bx
18294 441F           F7E9                       imul	cx
18295                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18296 4421           0246         FF            add	al,-1[bp]
18297 4424           80D4                   00  adc	ah,*0
18298                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18299 4427           0346         F2            add	ax,-$E[bp]
18300 442A           44                         inc	sp
18301 442B           44                         inc	sp
18302                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18303 442C           8946         F6            mov	-$A[bp],ax
18304                                           !BCC_EOS
18305                                           ! 2186    crtc_addr=read_word(0x40,0x63);
18306                                           ! Debug: list int = const $63 (used reg = )
18307 442F           B8                   0063  mov	ax,*$63
18308 4432           50                         push	ax
18309                                           ! Debug: list int = const $40 (used reg = )
18310 4433           B8                   0040  mov	ax,*$40
18311 4436           50                         push	ax
18312                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18313 4437           E8         3913            call	_read_word
18314 443A           83C4                   04  add	sp,*4
18315                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18316 443D           8946         F4            mov	-$C[bp],ax
18317                                           !BCC_EOS
18318                                           ! 2187    outb(crtc_addr,0x0e);
18319                                           ! Debug: list int = const $E (used reg = )
18320 4440           B8                   000E  mov	ax,*$E
18321 4443           50                         push	ax
18322                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18323 4444           FF76         F4            push	-$C[bp]
18324                                           ! Debug: func () void = outb+0 (used reg = )
18325 4447           E8         395C            call	_outb
18326 444A           83C4                   04  add	sp,*4
18327                                           !BCC_EOS
18328                                           ! 2188    outb(crtc_addr+1,(address&0xff00)>>8);
18329                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18330 444D           8B46         F6            mov	ax,-$A[bp]
18331 4450           30C0                       xor	al,al
18332                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18333 4452           88E0                       mov	al,ah
18334 4454           30E4                       xor	ah,ah
18335                                           ! Debug: list unsigned int = ax+0 (used reg = )
18336 4456           50                         push	ax
18337                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18338 4457           8B46         F4            mov	ax,-$C[bp]
18339                                           ! Debug: list unsigned int = ax+1 (used reg = )
18340 445A           40                         inc	ax
18341 445B           50                         push	ax
18342                                           ! Debug: func () void = outb+0 (used reg = )
18343 445C           E8         3947            call	_outb
18344 445F           83C4                   04  add	sp,*4
18345                                           !BCC_EOS
18346                                           ! 2189    outb(crtc_addr,0x0f);
18347                                           ! Debug: list int = const $F (used reg = )
18348 4462           B8                   000F  mov	ax,*$F
18349 4465           50                         push	ax
18350                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18351 4466           FF76         F4            push	-$C[bp]
18352                                           ! Debug: func () void = outb+0 (used reg = )
18353 4469           E8         393A            call	_outb
18354 446C           83C4                   04  add	sp,*4
18355                                           !BCC_EOS
18356                                           ! 2190    outb(crtc_addr+1,address&0x00ff);
18357                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18358 446F           8A46         F6            mov	al,-$A[bp]
18359                                           ! Debug: list unsigned char = al+0 (used reg = )
18360 4472           30E4                       xor	ah,ah
18361 4474           50                         push	ax
18362                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18363 4475           8B46         F4            mov	ax,-$C[bp]
18364                                           ! Debug: list unsigned int = ax+1 (used reg = )
18365 4478           40                         inc	ax
18366 4479           50                         push	ax
18367                                           ! Debug: func () void = outb+0 (used reg = )
18368 447A           E8         3929            call	_outb
18369 447D           83C4                   04  add	sp,*4
18370                                           !BCC_EOS
18371                                           ! 2191   }
18372                                           ! 2192 }
18373                       00004480            .AC:
18374 4480           89EC                       mov	sp,bp
18375 4482           5D                         pop	bp
18376 4483           C3                         ret
18377                                           ! 2193 static void biosfn_get_cursor_pos (page,shape, pos)
18378                                           ! Register BX used in function biosfn_set_cursor_pos
18379                                           ! 2194 Bit8u page;Bit16u *shape;Bit16u *pos;
18380                       00004484            _biosfn_get_cursor_pos:
18381                                           !BCC_EOS
18382                                           !BCC_EOS
18383                                           !BCC_EOS
18384                                           ! 2195 {
18385                                           ! 2196  Bit16u ss=get_SS();
18386 4484           55                         push	bp
18387 4485           89E5                       mov	bp,sp
18388 4487           4C                         dec	sp
18389 4488           4C                         dec	sp
18390                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18391 4489           E8         393A            call	_get_SS
18392                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18393 448C           8946         FE            mov	-2[bp],ax
18394                                           !BCC_EOS
18395                                           ! 2197  write_word(ss, shape, 0);
18396                                           ! Debug: list int = const 0 (used reg = )
18397 448F           31C0                       xor	ax,ax
18398 4491           50                         push	ax
18399                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18400 4492           FF76         06            push	6[bp]
18401                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18402 4495           FF76         FE            push	-2[bp]
18403                                           ! Debug: func () void = write_word+0 (used reg = )
18404 4498           E8         38DD            call	_write_word
18405 449B           83C4                   06  add	sp,*6
18406                                           !BCC_EOS
18407                                           ! 2198  write_word(ss, pos, 0);
18408                                           ! Debug: list int = const 0 (used reg = )
18409 449E           31C0                       xor	ax,ax
18410 44A0           50                         push	ax
18411                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18412 44A1           FF76         08            push	8[bp]
18413                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18414 44A4           FF76         FE            push	-2[bp]
18415                                           ! Debug: func () void = write_word+0 (used reg = )
18416 44A7           E8         38CE            call	_write_word
18417 44AA           83C4                   06  add	sp,*6
18418                                           !BCC_EOS
18419                                           ! 2199  if(page>7)return;
18420                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18421 44AD           8A46         04            mov	al,4[bp]
18422 44B0           3C                     07  cmp	al,*7
18423 44B2           76           04            jbe 	.AE
18424                       000044B4            .AF:
18425 44B4           89EC                       mov	sp,bp
18426 44B6           5D                         pop	bp
18427 44B7           C3                         ret
18428                                           !BCC_EOS
18429                                           ! 2200  write_word(ss,shape,read_word(0x40,0x60));
18430                       000044B8            .AE:
18431                                           ! Debug: list int = const $60 (used reg = )
18432 44B8           B8                   0060  mov	ax,*$60
18433 44BB           50                         push	ax
18434                                           ! Debug: list int = const $40 (used reg = )
18435 44BC           B8                   0040  mov	ax,*$40
18436 44BF           50                         push	ax
18437                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18438 44C0           E8         388A            call	_read_word
18439 44C3           83C4                   04  add	sp,*4
18440                                           ! Debug: list unsigned short = ax+0 (used reg = )
18441 44C6           50                         push	ax
18442                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18443 44C7           FF76         06            push	6[bp]
18444                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18445 44CA           FF76         FE            push	-2[bp]
18446                                           ! Debug: func () void = write_word+0 (used reg = )
18447 44CD           E8         38A8            call	_write_word
18448 44D0           83C4                   06  add	sp,*6
18449                                           !BCC_EOS
18450                                           ! 2201  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18451                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18452 44D3           8A46         04            mov	al,4[bp]
18453 44D6           30E4                       xor	ah,ah
18454 44D8           D1E0                       shl	ax,*1
18455                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18456                                           ! Debug: expression subtree swapping
18457                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18458 44DA           05                   0050  add	ax,*$50
18459 44DD           50                         push	ax
18460                                           ! Debug: list int = const $40 (used reg = )
18461 44DE           B8                   0040  mov	ax,*$40
18462 44E1           50                         push	ax
18463                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18464 44E2           E8         3868            call	_read_word
18465 44E5           83C4                   04  add	sp,*4
18466                                           ! Debug: list unsigned short = ax+0 (used reg = )
18467 44E8           50                         push	ax
18468                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18469 44E9           FF76         08            push	8[bp]
18470                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18471 44EC           FF76         FE            push	-2[bp]
18472                                           ! Debug: func () void = write_word+0 (used reg = )
18473 44EF           E8         3886            call	_write_word
18474 44F2           83C4                   06  add	sp,*6
18475                                           !BCC_EOS
18476                                           ! 2202 }
18477 44F5           89EC                       mov	sp,bp
18478 44F7           5D                         pop	bp
18479 44F8           C3                         ret
18480                                           ! 2203 static void biosfn_set_active_page (page)
18481                                           ! 2204 Bit8u page;
18482                       000044F9            _biosfn_set_active_page:
18483                                           !BCC_EOS
18484                                           ! 2205 {
18485                                           ! 2206  Bit16u cursor,dummy,crtc_addr;
18486                                           !BCC_EOS
18487                                           ! 2207  Bit16u nbcols,nbrows,address;
18488                                           !BCC_EOS
18489                                           ! 2208  Bit8u mode,line;
18490                                           !BCC_EOS
18491                                           ! 2209  if(page>7)return;
18492 44F9           55                         push	bp
18493 44FA           89E5                       mov	bp,sp
18494 44FC           83C4                   F2  add	sp,*-$E
18495                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18496 44FF           8A46         04            mov	al,4[bp]
18497 4502           3C                     07  cmp	al,*7
18498 4504           76           04            jbe 	.B0
18499                       00004506            .B1:
18500 4506           89EC                       mov	sp,bp
18501 4508           5D                         pop	bp
18502 4509           C3                         ret
18503                                           !BCC_EOS
18504                                           ! 2210  mode=read_byte(0x40,0x49);
18505                       0000450A            .B0:
18506                                           ! Debug: list int = const $49 (used reg = )
18507 450A           B8                   0049  mov	ax,*$49
18508 450D           50                         push	ax
18509                                           ! Debug: list int = const $40 (used reg = )
18510 450E           B8                   0040  mov	ax,*$40
18511 4511           50                         push	ax
18512                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18513 4512           E8         3825            call	_read_byte
18514 4515           83C4                   04  add	sp,*4
18515                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18516 4518           8846         F3            mov	-$D[bp],al
18517                                           !BCC_EOS
18518                                           ! 2211  line=find_vga_entry(mode);
18519                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18520 451B           8A46         F3            mov	al,-$D[bp]
18521 451E           30E4                       xor	ah,ah
18522 4520           50                         push	ax
18523                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18524 4521           E8         372A            call	_find_vga_entry
18525 4524           44                         inc	sp
18526 4525           44                         inc	sp
18527                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18528 4526           8846         F2            mov	-$E[bp],al
18529                                           !BCC_EOS
18530                                           ! 2212  if(line==0xFF)return;
18531                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18532 4529           8A46         F2            mov	al,-$E[bp]
18533 452C           3C                     FF  cmp	al,#$FF
18534 452E           75           04            jne 	.B2
18535                       00004530            .B3:
18536 4530           89EC                       mov	sp,bp
18537 4532           5D                         pop	bp
18538 4533           C3                         ret
18539                                           !BCC_EOS
18540                                           ! 2213  biosfn_get_cursor_pos(page,&dummy,&cursor);
18541                       00004534            .B2:
18542                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18543 4534           8D5E         FE            lea	bx,-2[bp]
18544 4537           53                         push	bx
18545                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18546 4538           8D5E         FC            lea	bx,-4[bp]
18547 453B           53                         push	bx
18548                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18549 453C           8A46         04            mov	al,4[bp]
18550 453F           30E4                       xor	ah,ah
18551 4541           50                         push	ax
18552                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18553 4542           E8         FF3F            call	_biosfn_get_cursor_pos
18554 4545           83C4                   06  add	sp,*6
18555                                           !BCC_EOS
18556                                           ! 2214  if(vga_modes[line].class==0x00)
18557                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18558 4548           8A46         F2            mov	al,-$E[bp]
18559 454B           30E4                       xor	ah,ah
18560 454D           B1                     03  mov	cl,*3
18561 454F           D3E0                       shl	ax,cl
18562 4551           89C3                       mov	bx,ax
18563 4553           81C3                 0206  add	bx,#_vga_modes
18564                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18565 4557           8A47         01            mov	al,1[bx]
18566 455A           84C0                       test	al,al
18567 455C           75           6E            jne 	.B4
18568                       0000455E            .B5:
18569                                           ! 2215   {
18570                                           ! 2216    nbcols=read_word(0x40,0x4A);
18571                                           ! Debug: list int = const $4A (used reg = )
18572 455E           B8                   004A  mov	ax,*$4A
18573 4561           50                         push	ax
18574                                           ! Debug: list int = const $40 (used reg = )
18575 4562           B8                   0040  mov	ax,*$40
18576 4565           50                         push	ax
18577                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18578 4566           E8         37E4            call	_read_word
18579 4569           83C4                   04  add	sp,*4
18580                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18581 456C           8946         F8            mov	-8[bp],ax
18582                                           !BCC_EOS
18583                                           ! 2217    nbrows=read_byte(0x40,0x84)+1;
18584                                           ! Debug: list int = const $84 (used reg = )
18585 456F           B8                   0084  mov	ax,#$84
18586 4572           50                         push	ax
18587                                           ! Debug: list int = const $40 (used reg = )
18588 4573           B8                   0040  mov	ax,*$40
18589 4576           50                         push	ax
18590                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18591 4577           E8         37C0            call	_read_byte
18592 457A           83C4                   04  add	sp,*4
18593                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18594 457D           30E4                       xor	ah,ah
18595                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18596 457F           40                         inc	ax
18597 4580           8946         F6            mov	-$A[bp],ax
18598                                           !BCC_EOS
18599                                           ! 2218    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18600                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18601 4583           8B46         F8            mov	ax,-8[bp]
18602 4586           8B4E         F6            mov	cx,-$A[bp]
18603 4589           F7E9                       imul	cx
18604                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18605 458B           D1E0                       shl	ax,*1
18606                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18607 458D           0C                     FF  or	al,#$FF
18608                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18609                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18610 458F           89C3                       mov	bx,ax
18611 4591           8A46         04            mov	al,4[bp]
18612 4594           30E4                       xor	ah,ah
18613 4596           93                         xchg	ax,bx
18614 4597           40                         inc	ax
18615 4598           89D9                       mov	cx,bx
18616 459A           F7E9                       imul	cx
18617                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18618 459C           8946         F4            mov	-$C[bp],ax
18619                                           !BCC_EOS
18620                                           ! 2219    write_word(0x40,0x4E,address);
18621                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18622 459F           FF76         F4            push	-$C[bp]
18623                                           ! Debug: list int = const $4E (used reg = )
18624 45A2           B8                   004E  mov	ax,*$4E
18625 45A5           50                         push	ax
18626                                           ! Debug: list int = const $40 (used reg = )
18627 45A6           B8                   0040  mov	ax,*$40
18628 45A9           50                         push	ax
18629                                           ! Debug: func () void = write_word+0 (used reg = )
18630 45AA           E8         37CB            call	_write_word
18631 45AD           83C4                   06  add	sp,*6
18632                                           !BCC_EOS
18633                                           ! 2220    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18634                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18635 45B0           8B46         F8            mov	ax,-8[bp]
18636 45B3           8B4E         F6            mov	cx,-$A[bp]
18637 45B6           F7E9                       imul	cx
18638                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18639 45B8           0C                     FF  or	al,#$FF
18640                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18641                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18642 45BA           89C3                       mov	bx,ax
18643 45BC           8A46         04            mov	al,4[bp]
18644 45BF           30E4                       xor	ah,ah
18645 45C1           93                         xchg	ax,bx
18646 45C2           40                         inc	ax
18647 45C3           89D9                       mov	cx,bx
18648 45C5           F7E9                       imul	cx
18649                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18650 45C7           8946         F4            mov	-$C[bp],ax
18651                                           !BCC_EOS
18652                                           ! 2221   }
18653                                           ! 2222  else
18654                                           ! 2223   {
18655 45CA           EB           24            jmp .B6
18656                       000045CC            .B4:
18657                                           ! 2224    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18658                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18659 45CC           8A46         F2            mov	al,-$E[bp]
18660 45CF           30E4                       xor	ah,ah
18661 45D1           89C3                       mov	bx,ax
18662                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18663 45D3           8A87       0286            mov	al,_line_to_vpti[bx]
18664 45D7           30E4                       xor	ah,ah
18665 45D9           B1                     06  mov	cl,*6
18666 45DB           D3E0                       shl	ax,cl
18667 45DD           89C3                       mov	bx,ax
18668 45DF           81C3                 029A  add	bx,#_video_param_table
18669                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18670                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18671                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18672 45E3           8A46         04            mov	al,4[bp]
18673 45E6           30E4                       xor	ah,ah
18674 45E8           8B4F         03            mov	cx,3[bx]
18675 45EB           F7E9                       imul	cx
18676                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18677 45ED           8946         F4            mov	-$C[bp],ax
18678                                           !BCC_EOS
18679                                           ! 2225   }
18680                                           ! 2226  crtc_addr=read_word(0x40,0x63);
18681                       000045F0            .B6:
18682                                           ! Debug: list int = const $63 (used reg = )
18683 45F0           B8                   0063  mov	ax,*$63
18684 45F3           50                         push	ax
18685                                           ! Debug: list int = const $40 (used reg = )
18686 45F4           B8                   0040  mov	ax,*$40
18687 45F7           50                         push	ax
18688                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18689 45F8           E8         3752            call	_read_word
18690 45FB           83C4                   04  add	sp,*4
18691                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18692 45FE           8946         FA            mov	-6[bp],ax
18693                                           !BCC_EOS
18694                                           ! 2227  outb(crtc_addr,0x0c);
18695                                           ! Debug: list int = const $C (used reg = )
18696 4601           B8                   000C  mov	ax,*$C
18697 4604           50                         push	ax
18698                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18699 4605           FF76         FA            push	-6[bp]
18700                                           ! Debug: func () void = outb+0 (used reg = )
18701 4608           E8         379B            call	_outb
18702 460B           83C4                   04  add	sp,*4
18703                                           !BCC_EOS
18704                                           ! 2228  outb(crtc_addr+1,(address&0xff00)>>8);
18705                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18706 460E           8B46         F4            mov	ax,-$C[bp]
18707 4611           30C0                       xor	al,al
18708                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18709 4613           88E0                       mov	al,ah
18710 4615           30E4                       xor	ah,ah
18711                                           ! Debug: list unsigned int = ax+0 (used reg = )
18712 4617           50                         push	ax
18713                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18714 4618           8B46         FA            mov	ax,-6[bp]
18715                                           ! Debug: list unsigned int = ax+1 (used reg = )
18716 461B           40                         inc	ax
18717 461C           50                         push	ax
18718                                           ! Debug: func () void = outb+0 (used reg = )
18719 461D           E8         3786            call	_outb
18720 4620           83C4                   04  add	sp,*4
18721                                           !BCC_EOS
18722                                           ! 2229  outb(crtc_addr,0x0d);
18723                                           ! Debug: list int = const $D (used reg = )
18724 4623           B8                   000D  mov	ax,*$D
18725 4626           50                         push	ax
18726                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18727 4627           FF76         FA            push	-6[bp]
18728                                           ! Debug: func () void = outb+0 (used reg = )
18729 462A           E8         3779            call	_outb
18730 462D           83C4                   04  add	sp,*4
18731                                           !BCC_EOS
18732                                           ! 2230  outb(crtc_addr+1,address&0x00ff);
18733                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18734 4630           8A46         F4            mov	al,-$C[bp]
18735                                           ! Debug: list unsigned char = al+0 (used reg = )
18736 4633           30E4                       xor	ah,ah
18737 4635           50                         push	ax
18738                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18739 4636           8B46         FA            mov	ax,-6[bp]
18740                                           ! Debug: list unsigned int = ax+1 (used reg = )
18741 4639           40                         inc	ax
18742 463A           50                         push	ax
18743                                           ! Debug: func () void = outb+0 (used reg = )
18744 463B           E8         3768            call	_outb
18745 463E           83C4                   04  add	sp,*4
18746                                           !BCC_EOS
18747                                           ! 2231  write_byte(0x40,0x62,page);
18748                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18749 4641           8A46         04            mov	al,4[bp]
18750 4644           30E4                       xor	ah,ah
18751 4646           50                         push	ax
18752                                           ! Debug: list int = const $62 (used reg = )
18753 4647           B8                   0062  mov	ax,*$62
18754 464A           50                         push	ax
18755                                           ! Debug: list int = const $40 (used reg = )
18756 464B           B8                   0040  mov	ax,*$40
18757 464E           50                         push	ax
18758                                           ! Debug: func () void = write_byte+0 (used reg = )
18759 464F           E8         370E            call	_write_byte
18760 4652           83C4                   06  add	sp,*6
18761                                           !BCC_EOS
18762                                           ! 2232  printf("Set active page %02x address %04x\n",page,address);
18763                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18764 4655           FF76         F4            push	-$C[bp]
18765                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18766 4658           8A46         04            mov	al,4[bp]
18767 465B           30E4                       xor	ah,ah
18768 465D           50                         push	ax
18769                                           ! Debug: list * char = .B7+0 (used reg = )
18770 465E           BB                   A5B5  mov	bx,#.B7
18771 4661           53                         push	bx
18772                                           ! Debug: func () void = printf+0 (used reg = )
18773 4662           E8         3780            call	_printf
18774 4665           83C4                   06  add	sp,*6
18775                                           !BCC_EOS
18776                                           ! 2233  biosfn_set_cursor_pos(page,cursor);
18777                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18778 4668           FF76         FE            push	-2[bp]
18779                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18780 466B           8A46         04            mov	al,4[bp]
18781 466E           30E4                       xor	ah,ah
18782 4670           50                         push	ax
18783                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18784 4671           E8         FD10            call	_biosfn_set_cursor_pos
18785 4674           83C4                   04  add	sp,*4
18786                                           !BCC_EOS
18787                                           ! 2234 }
18788 4677           89EC                       mov	sp,bp
18789 4679           5D                         pop	bp
18790 467A           C3                         ret
18791                                           ! 2235 static void vgamem_copy
18792                                           ! Register BX used in function biosfn_set_active_page
18793                                           ! 2235 _pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18794                                           ! 2236 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18795                       0000467B            _vgamem_copy_pl4:
18796                                           !BCC_EOS
18797                                           !BCC_EOS
18798                                           !BCC_EOS
18799                                           !BCC_EOS
18800                                           !BCC_EOS
18801                                           !BCC_EOS
18802                                           ! 2237 {
18803                                           ! 2238  Bit16u src,dest;
18804                                           !BCC_EOS
18805                                           ! 2239  Bit8u i;
18806                                           !BCC_EOS
18807                                           ! 2240  src=ysrc*cheight*nbcols+xstart;
18808 467B           55                         push	bp
18809 467C           89E5                       mov	bp,sp
18810 467E           83C4                   FA  add	sp,*-6
18811                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18812 4681           8A46         0E            mov	al,$E[bp]
18813 4684           30E4                       xor	ah,ah
18814 4686           89C3                       mov	bx,ax
18815 4688           8A46         06            mov	al,6[bp]
18816 468B           30E4                       xor	ah,ah
18817 468D           89D9                       mov	cx,bx
18818 468F           F7E9                       imul	cx
18819                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18820 4691           89C3                       mov	bx,ax
18821 4693           8A46         0C            mov	al,$C[bp]
18822 4696           30E4                       xor	ah,ah
18823 4698           93                         xchg	ax,bx
18824 4699           89D9                       mov	cx,bx
18825 469B           F7E9                       imul	cx
18826                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18827 469D           0246         04            add	al,4[bp]
18828 46A0           80D4                   00  adc	ah,*0
18829                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18830 46A3           8946         FE            mov	-2[bp],ax
18831                                           !BCC_EOS
18832                                           ! 2241  dest=ydest*cheight*nbcols+xstart;
18833                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18834 46A6           8A46         0E            mov	al,$E[bp]
18835 46A9           30E4                       xor	ah,ah
18836 46AB           89C3                       mov	bx,ax
18837 46AD           8A46         08            mov	al,8[bp]
18838 46B0           30E4                       xor	ah,ah
18839 46B2           89D9                       mov	cx,bx
18840 46B4           F7E9                       imul	cx
18841                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18842 46B6           89C3                       mov	bx,ax
18843 46B8           8A46         0C            mov	al,$C[bp]
18844 46BB           30E4                       xor	ah,ah
18845 46BD           93                         xchg	ax,bx
18846 46BE           89D9                       mov	cx,bx
18847 46C0           F7E9                       imul	cx
18848                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18849 46C2           0246         04            add	al,4[bp]
18850 46C5           80D4                   00  adc	ah,*0
18851                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18852 46C8           8946         FC            mov	-4[bp],ax
18853                                           !BCC_EOS
18854                                           ! 2242  outw(0x3ce, 0x0105);
18855                                           ! Debug: list int = const $105 (used reg = )
18856 46CB           B8                   0105  mov	ax,#$105
18857 46CE           50                         push	ax
18858                                           ! Debug: list int = const $3CE (used reg = )
18859 46CF           B8                   03CE  mov	ax,#$3CE
18860 46D2           50                         push	ax
18861                                           ! Debug: func () void = outw+0 (used reg = )
18862 46D3           E8         36E0            call	_outw
18863 46D6           83C4                   04  add	sp,*4
18864                                           !BCC_EOS
18865                                           ! 2243  for(i=0;i<cheight;i++)
18866                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18867 46D9           30C0                       xor	al,al
18868 46DB           8846         FB            mov	-5[bp],al
18869                                           !BCC_EOS
18870                                           !BCC_EOS
18871                                           ! 2244   {
18872 46DE           EB           43            jmp .BA
18873                       000046E0            .BB:
18874                                           ! 2245    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18875                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18876 46E0           8A46         0A            mov	al,$A[bp]
18877 46E3           30E4                       xor	ah,ah
18878 46E5           50                         push	ax
18879                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18880 46E6           8A46         0C            mov	al,$C[bp]
18881 46E9           30E4                       xor	ah,ah
18882 46EB           89C3                       mov	bx,ax
18883 46ED           8A46         FB            mov	al,-5[bp]
18884 46F0           30E4                       xor	ah,ah
18885 46F2           89D9                       mov	cx,bx
18886 46F4           F7E9                       imul	cx
18887                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18888                                           ! Debug: expression subtree swapping
18889 46F6           0346         FE            add	ax,-2[bp]
18890                                           ! Debug: list unsigned int = ax+0 (used reg = )
18891 46F9           50                         push	ax
18892                                           ! Debug: list unsigned int = const $A000 (used reg = )
18893 46FA           B8                   A000  mov	ax,#$A000
18894 46FD           50                         push	ax
18895                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18896 46FE           8A46         0C            mov	al,$C[bp]
18897 4701           30E4                       xor	ah,ah
18898 4703           89C3                       mov	bx,ax
18899 4705           8A46         FB            mov	al,-5[bp]
18900 4708           30E4                       xor	ah,ah
18901 470A           89D9                       mov	cx,bx
18902 470C           F7E9                       imul	cx
18903                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18904                                           ! Debug: expression subtree swapping
18905 470E           0346         FC            add	ax,-4[bp]
18906                                           ! Debug: list unsigned int = ax+0 (used reg = )
18907 4711           50                         push	ax
18908                                           ! Debug: list unsigned int = const $A000 (used reg = )
18909 4712           B8                   A000  mov	ax,#$A000
18910 4715           50                         push	ax
18911                                           ! Debug: func () void = memcpyb+0 (used reg = )
18912 4716           E8         35C1            call	_memcpyb
18913 4719           83C4                   0A  add	sp,*$A
18914                                           !BCC_EOS
18915                                           ! 2246   }
18916                                           ! 2247  outw(0x3ce, 0x0005);
18917                       0000471C            .B9:
18918                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18919 471C           8A46         FB            mov	al,-5[bp]
18920 471F           40                         inc	ax
18921 4720           8846         FB            mov	-5[bp],al
18922                       00004723            .BA:
18923                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18924 4723           8A46         FB            mov	al,-5[bp]
18925 4726           3A46         0E            cmp	al,$E[bp]
18926 4729           72           B5            jb 	.BB
18927                       0000472B            .BC:
18928                       0000472B            .B8:
18929                                           ! Debug: list int = const 5 (used reg = )
18930 472B           B8                   0005  mov	ax,*5
18931 472E           50                         push	ax
18932                                           ! Debug: list int = const $3CE (used reg = )
18933 472F           B8                   03CE  mov	ax,#$3CE
18934 4732           50                         push	ax
18935                                           ! Debug: func () void = outw+0 (used reg = )
18936 4733           E8         3680            call	_outw
18937 4736           83C4                   04  add	sp,*4
18938                                           !BCC_EOS
18939                                           ! 2248 }
18940 4739           89EC                       mov	sp,bp
18941 473B           5D                         pop	bp
18942 473C           C3                         ret
18943                                           ! 2249 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18944                                           ! Register BX used in function vgamem_copy_pl4
18945                                           ! 2250 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18946                       0000473D            _vgamem_fill_pl4:
18947                                           !BCC_EOS
18948                                           !BCC_EOS
18949                                           !BCC_EOS
18950                                           !BCC_EOS
18951                                           !BCC_EOS
18952                                           !BCC_EOS
18953                                           ! 2251 {
18954                                           ! 2252  Bit16u dest;
18955                                           !BCC_EOS
18956                                           ! 2253  Bit8u i;
18957                                           !BCC_EOS
18958                                           ! 2254  dest=ystart*cheight*nbcols+xstart;
18959 473D           55                         push	bp
18960 473E           89E5                       mov	bp,sp
18961 4740           83C4                   FC  add	sp,*-4
18962                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18963 4743           8A46         0C            mov	al,$C[bp]
18964 4746           30E4                       xor	ah,ah
18965 4748           89C3                       mov	bx,ax
18966 474A           8A46         06            mov	al,6[bp]
18967 474D           30E4                       xor	ah,ah
18968 474F           89D9                       mov	cx,bx
18969 4751           F7E9                       imul	cx
18970                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18971 4753           89C3                       mov	bx,ax
18972 4755           8A46         0A            mov	al,$A[bp]
18973 4758           30E4                       xor	ah,ah
18974 475A           93                         xchg	ax,bx
18975 475B           89D9                       mov	cx,bx
18976 475D           F7E9                       imul	cx
18977                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18978 475F           0246         04            add	al,4[bp]
18979 4762           80D4                   00  adc	ah,*0
18980                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18981 4765           8946         FE            mov	-2[bp],ax
18982                                           !BCC_EOS
18983                                           ! 2255  outw(0x3ce, 0x0205);
18984                                           ! Debug: list int = const $205 (used reg = )
18985 4768           B8                   0205  mov	ax,#$205
18986 476B           50                         push	ax
18987                                           ! Debug: list int = const $3CE (used reg = )
18988 476C           B8                   03CE  mov	ax,#$3CE
18989 476F           50                         push	ax
18990                                           ! Debug: func () void = outw+0 (used reg = )
18991 4770           E8         3643            call	_outw
18992 4773           83C4                   04  add	sp,*4
18993                                           !BCC_EOS
18994                                           ! 2256  for(i=0;i<cheight;i++)
18995                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18996 4776           30C0                       xor	al,al
18997 4778           8846         FD            mov	-3[bp],al
18998                                           !BCC_EOS
18999                                           !BCC_EOS
19000                                           ! 2257   {
19001 477B           EB           31            jmp .BF
19002                       0000477D            .C0:
19003                                           ! 2258    memsetb(0xa000,dest+i*nbcols,attr,cols);
19004                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19005 477D           8A46         08            mov	al,8[bp]
19006 4780           30E4                       xor	ah,ah
19007 4782           50                         push	ax
19008                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19009 4783           8A46         0E            mov	al,$E[bp]
19010 4786           30E4                       xor	ah,ah
19011 4788           50                         push	ax
19012                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
19013 4789           8A46         0A            mov	al,$A[bp]
19014 478C           30E4                       xor	ah,ah
19015 478E           89C3                       mov	bx,ax
19016 4790           8A46         FD            mov	al,-3[bp]
19017 4793           30E4                       xor	ah,ah
19018 4795           89D9                       mov	cx,bx
19019 4797           F7E9                       imul	cx
19020                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19021                                           ! Debug: expression subtree swapping
19022 4799           0346         FE            add	ax,-2[bp]
19023                                           ! Debug: list unsigned int = ax+0 (used reg = )
19024 479C           50                         push	ax
19025                                           ! Debug: list unsigned int = const $A000 (used reg = )
19026 479D           B8                   A000  mov	ax,#$A000
19027 47A0           50                         push	ax
19028                                           ! Debug: func () void = memsetb+0 (used reg = )
19029 47A1           E8         34EC            call	_memsetb
19030 47A4           83C4                   08  add	sp,*8
19031                                           !BCC_EOS
19032                                           ! 2259   }
19033                                           ! 2260  outw(0x3ce, 0x0005);
19034                       000047A7            .BE:
19035                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19036 47A7           8A46         FD            mov	al,-3[bp]
19037 47AA           40                         inc	ax
19038 47AB           8846         FD            mov	-3[bp],al
19039                       000047AE            .BF:
19040                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19041 47AE           8A46         FD            mov	al,-3[bp]
19042 47B1           3A46         0C            cmp	al,$C[bp]
19043 47B4           72           C7            jb 	.C0
19044                       000047B6            .C1:
19045                       000047B6            .BD:
19046                                           ! Debug: list int = const 5 (used reg = )
19047 47B6           B8                   0005  mov	ax,*5
19048 47B9           50                         push	ax
19049                                           ! Debug: list int = const $3CE (used reg = )
19050 47BA           B8                   03CE  mov	ax,#$3CE
19051 47BD           50                         push	ax
19052                                           ! Debug: func () void = outw+0 (used reg = )
19053 47BE           E8         35F5            call	_outw
19054 47C1           83C4                   04  add	sp,*4
19055                                           !BCC_EOS
19056                                           ! 2261 }
19057 47C4           89EC                       mov	sp,bp
19058 47C6           5D                         pop	bp
19059 47C7           C3                         ret
19060                                           ! 2262 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
19061                                           ! Register BX used in function vgamem_fill_pl4
19062                                           ! 2263 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
19063                       000047C8            _vgamem_copy_cga:
19064                                           !BCC_EOS
19065                                           !BCC_EOS
19066                                           !BCC_EOS
19067                                           !BCC_EOS
19068                                           !BCC_EOS
19069                                           !BCC_EOS
19070                                           ! 2264 {
19071                                           ! 2265  Bit16u src,dest;
19072                                           !BCC_EOS
19073                                           ! 2266  Bit8u i;
19074                                           !BCC_EOS
19075                                           ! 2267  src=((ysrc*cheight*nbcols)>>1)+xstart;
19076 47C8           55                         push	bp
19077 47C9           89E5                       mov	bp,sp
19078 47CB           83C4                   FA  add	sp,*-6
19079                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
19080 47CE           8A46         0E            mov	al,$E[bp]
19081 47D1           30E4                       xor	ah,ah
19082 47D3           89C3                       mov	bx,ax
19083 47D5           8A46         06            mov	al,6[bp]
19084 47D8           30E4                       xor	ah,ah
19085 47DA           89D9                       mov	cx,bx
19086 47DC           F7E9                       imul	cx
19087                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19088 47DE           89C3                       mov	bx,ax
19089 47E0           8A46         0C            mov	al,$C[bp]
19090 47E3           30E4                       xor	ah,ah
19091 47E5           93                         xchg	ax,bx
19092 47E6           89D9                       mov	cx,bx
19093 47E8           F7E9                       imul	cx
19094                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19095 47EA           D1E8                       shr	ax,*1
19096                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19097 47EC           0246         04            add	al,4[bp]
19098 47EF           80D4                   00  adc	ah,*0
19099                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
19100 47F2           8946         FE            mov	-2[bp],ax
19101                                           !BCC_EOS
19102                                           ! 2268  dest=((ydest*cheight*nbcols)>>1)+xstart;
19103                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
19104 47F5           8A46         0E            mov	al,$E[bp]
19105 47F8           30E4                       xor	ah,ah
19106 47FA           89C3                       mov	bx,ax
19107 47FC           8A46         08            mov	al,8[bp]
19108 47FF           30E4                       xor	ah,ah
19109 4801           89D9                       mov	cx,bx
19110 4803           F7E9                       imul	cx
19111                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19112 4805           89C3                       mov	bx,ax
19113 4807           8A46         0C            mov	al,$C[bp]
19114 480A           30E4                       xor	ah,ah
19115 480C           93                         xchg	ax,bx
19116 480D           89D9                       mov	cx,bx
19117 480F           F7E9                       imul	cx
19118                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19119 4811           D1E8                       shr	ax,*1
19120                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19121 4813           0246         04            add	al,4[bp]
19122 4816           80D4                   00  adc	ah,*0
19123                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
19124 4819           8946         FC            mov	-4[bp],ax
19125                                           !BCC_EOS
19126                                           ! 2269  for(i=0;i<cheight;i++)
19127                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19128 481C           30C0                       xor	al,al
19129 481E           8846         FB            mov	-5[bp],al
19130                                           !BCC_EOS
19131                                           !BCC_EOS
19132                                           ! 2270   {
19133 4821           E9         00A8            br 	.C4
19134                       00004824            .C5:
19135                                           ! 2271    if (i & 1)
19136                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19137 4824           8A46         FB            mov	al,-5[bp]
19138 4827           24                     01  and	al,*1
19139 4829           84C0                       test	al,al
19140 482B           74           56            je  	.C6
19141                       0000482D            .C7:
19142                                           ! 2272      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19143                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19144 482D           8A46         0A            mov	al,$A[bp]
19145 4830           30E4                       xor	ah,ah
19146 4832           50                         push	ax
19147                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19148 4833           8A46         FB            mov	al,-5[bp]
19149 4836           30E4                       xor	ah,ah
19150 4838           D1E8                       shr	ax,*1
19151                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19152 483A           89C3                       mov	bx,ax
19153 483C           8A46         0C            mov	al,$C[bp]
19154 483F           30E4                       xor	ah,ah
19155 4841           93                         xchg	ax,bx
19156 4842           89D9                       mov	cx,bx
19157 4844           F7E9                       imul	cx
19158 4846           50                         push	ax
19159                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19160                                           ! Debug: expression subtree swapping
19161 4847           8B46         FE            mov	ax,-2[bp]
19162                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19163 484A           05                   2000  add	ax,#$2000
19164 484D           0346         F6            add	ax,-$A[bp]
19165 4850           44                         inc	sp
19166 4851           44                         inc	sp
19167                                           ! Debug: list unsigned int = ax+0 (used reg = )
19168 4852           50                         push	ax
19169                                           ! Debug: list unsigned int = const $B800 (used reg = )
19170 4853           B8                   B800  mov	ax,#$B800
19171 4856           50                         push	ax
19172                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19173 4857           8A46         FB            mov	al,-5[bp]
19174 485A           30E4                       xor	ah,ah
19175 485C           D1E8                       shr	ax,*1
19176                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19177 485E           89C3                       mov	bx,ax
19178 4860           8A46         0C            mov	al,$C[bp]
19179 4863           30E4                       xor	ah,ah
19180 4865           93                         xchg	ax,bx
19181 4866           89D9                       mov	cx,bx
19182 4868           F7E9                       imul	cx
19183 486A           50                         push	ax
19184                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19185                                           ! Debug: expression subtree swapping
19186 486B           8B46         FC            mov	ax,-4[bp]
19187                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19188 486E           05                   2000  add	ax,#$2000
19189 4871           0346         F2            add	ax,-$E[bp]
19190 4874           44                         inc	sp
19191 4875           44                         inc	sp
19192                                           ! Debug: list unsigned int = ax+0 (used reg = )
19193 4876           50                         push	ax
19194                                           ! Debug: list unsigned int = const $B800 (used reg = )
19195 4877           B8                   B800  mov	ax,#$B800
19196 487A           50                         push	ax
19197                                           ! Debug: func () void = memcpyb+0 (used reg = )
19198 487B           E8         345C            call	_memcpyb
19199 487E           83C4                   0A  add	sp,*$A
19200                                           !BCC_EOS
19201                                           ! 2273    else
19202                                           ! 2274      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19203 4881           EB           42            jmp .C8
19204                       00004883            .C6:
19205                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19206 4883           8A46         0A            mov	al,$A[bp]
19207 4886           30E4                       xor	ah,ah
19208 4888           50                         push	ax
19209                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19210 4889           8A46         FB            mov	al,-5[bp]
19211 488C           30E4                       xor	ah,ah
19212 488E           D1E8                       shr	ax,*1
19213                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19214 4890           89C3                       mov	bx,ax
19215 4892           8A46         0C            mov	al,$C[bp]
19216 4895           30E4                       xor	ah,ah
19217 4897           93                         xchg	ax,bx
19218 4898           89D9                       mov	cx,bx
19219 489A           F7E9                       imul	cx
19220                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19221                                           ! Debug: expression subtree swapping
19222 489C           0346         FE            add	ax,-2[bp]
19223                                           ! Debug: list unsigned int = ax+0 (used reg = )
19224 489F           50                         push	ax
19225                                           ! Debug: list unsigned int = const $B800 (used reg = )
19226 48A0           B8                   B800  mov	ax,#$B800
19227 48A3           50                         push	ax
19228                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19229 48A4           8A46         FB            mov	al,-5[bp]
19230 48A7           30E4                       xor	ah,ah
19231 48A9           D1E8                       shr	ax,*1
19232                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19233 48AB           89C3                       mov	bx,ax
19234 48AD           8A46         0C            mov	al,$C[bp]
19235 48B0           30E4                       xor	ah,ah
19236 48B2           93                         xchg	ax,bx
19237 48B3           89D9                       mov	cx,bx
19238 48B5           F7E9                       imul	cx
19239                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19240                                           ! Debug: expression subtree swapping
19241 48B7           0346         FC            add	ax,-4[bp]
19242                                           ! Debug: list unsigned int = ax+0 (used reg = )
19243 48BA           50                         push	ax
19244                                           ! Debug: list unsigned int = const $B800 (used reg = )
19245 48BB           B8                   B800  mov	ax,#$B800
19246 48BE           50                         push	ax
19247                                           ! Debug: func () void = memcpyb+0 (used reg = )
19248 48BF           E8         3418            call	_memcpyb
19249 48C2           83C4                   0A  add	sp,*$A
19250                                           !BCC_EOS
19251                                           ! 2275   }
19252                       000048C5            .C8:
19253                                           ! 2276 }
19254                       000048C5            .C3:
19255                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19256 48C5           8A46         FB            mov	al,-5[bp]
19257 48C8           40                         inc	ax
19258 48C9           8846         FB            mov	-5[bp],al
19259                       000048CC            .C4:
19260                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19261 48CC           8A46         FB            mov	al,-5[bp]
19262 48CF           3A46         0E            cmp	al,$E[bp]
19263 48D2         0F82         FF4E            blo 	.C5
19264                       000048D6            .C9:
19265                       000048D6            .C2:
19266 48D6           89EC                       mov	sp,bp
19267 48D8           5D                         pop	bp
19268 48D9           C3                         ret
19269                                           ! 2277 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19270                                           ! Register BX used in function vgamem_copy_cga
19271                                           ! 2278 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19272                       000048DA            _vgamem_fill_cga:
19273                                           !BCC_EOS
19274                                           !BCC_EOS
19275                                           !BCC_EOS
19276                                           !BCC_EOS
19277                                           !BCC_EOS
19278                                           !BCC_EOS
19279                                           ! 2279 {
19280                                           ! 2280  Bit16u dest;
19281                                           !BCC_EOS
19282                                           ! 2281  Bit8u i;
19283                                           !BCC_EOS
19284                                           ! 2282  dest=((ystart*cheight*nbcols)>>1)+xstart;
19285 48DA           55                         push	bp
19286 48DB           89E5                       mov	bp,sp
19287 48DD           83C4                   FC  add	sp,*-4
19288                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19289 48E0           8A46         0C            mov	al,$C[bp]
19290 48E3           30E4                       xor	ah,ah
19291 48E5           89C3                       mov	bx,ax
19292 48E7           8A46         06            mov	al,6[bp]
19293 48EA           30E4                       xor	ah,ah
19294 48EC           89D9                       mov	cx,bx
19295 48EE           F7E9                       imul	cx
19296                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19297 48F0           89C3                       mov	bx,ax
19298 48F2           8A46         0A            mov	al,$A[bp]
19299 48F5           30E4                       xor	ah,ah
19300 48F7           93                         xchg	ax,bx
19301 48F8           89D9                       mov	cx,bx
19302 48FA           F7E9                       imul	cx
19303                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19304 48FC           D1E8                       shr	ax,*1
19305                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19306 48FE           0246         04            add	al,4[bp]
19307 4901           80D4                   00  adc	ah,*0
19308                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19309 4904           8946         FE            mov	-2[bp],ax
19310                                           !BCC_EOS
19311                                           ! 2283  for(i=0;i<cheight;i++)
19312                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19313 4907           30C0                       xor	al,al
19314 4909           8846         FD            mov	-3[bp],al
19315                                           !BCC_EOS
19316                                           !BCC_EOS
19317                                           ! 2284   {
19318 490C           EB           75            jmp .CC
19319                       0000490E            .CD:
19320                                           ! 2285    if (i & 1)
19321                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19322 490E           8A46         FD            mov	al,-3[bp]
19323 4911           24                     01  and	al,*1
19324 4913           84C0                       test	al,al
19325 4915           74           38            je  	.CE
19326                       00004917            .CF:
19327                                           ! 2286      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19328                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19329 4917           8A46         08            mov	al,8[bp]
19330 491A           30E4                       xor	ah,ah
19331 491C           50                         push	ax
19332                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19333 491D           8A46         0E            mov	al,$E[bp]
19334 4920           30E4                       xor	ah,ah
19335 4922           50                         push	ax
19336                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19337 4923           8A46         FD            mov	al,-3[bp]
19338 4926           30E4                       xor	ah,ah
19339 4928           D1E8                       shr	ax,*1
19340                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19341 492A           89C3                       mov	bx,ax
19342 492C           8A46         0A            mov	al,$A[bp]
19343 492F           30E4                       xor	ah,ah
19344 4931           93                         xchg	ax,bx
19345 4932           89D9                       mov	cx,bx
19346 4934           F7E9                       imul	cx
19347 4936           50                         push	ax
19348                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19349                                           ! Debug: expression subtree swapping
19350 4937           8B46         FE            mov	ax,-2[bp]
19351                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19352 493A           05                   2000  add	ax,#$2000
19353 493D           0346         F6            add	ax,-$A[bp]
19354 4940           44                         inc	sp
19355 4941           44                         inc	sp
19356                                           ! Debug: list unsigned int = ax+0 (used reg = )
19357 4942           50                         push	ax
19358                                           ! Debug: list unsigned int = const $B800 (used reg = )
19359 4943           B8                   B800  mov	ax,#$B800
19360 4946           50                         push	ax
19361                                           ! Debug: func () void = memsetb+0 (used reg = )
19362 4947           E8         3346            call	_memsetb
19363 494A           83C4                   08  add	sp,*8
19364                                           !BCC_EOS
19365                                           ! 2287    else
19366                                           ! 2288      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19367 494D           EB           2D            jmp .D0
19368                       0000494F            .CE:
19369                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19370 494F           8A46         08            mov	al,8[bp]
19371 4952           30E4                       xor	ah,ah
19372 4954           50                         push	ax
19373                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19374 4955           8A46         0E            mov	al,$E[bp]
19375 4958           30E4                       xor	ah,ah
19376 495A           50                         push	ax
19377                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19378 495B           8A46         FD            mov	al,-3[bp]
19379 495E           30E4                       xor	ah,ah
19380 4960           D1E8                       shr	ax,*1
19381                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19382 4962           89C3                       mov	bx,ax
19383 4964           8A46         0A            mov	al,$A[bp]
19384 4967           30E4                       xor	ah,ah
19385 4969           93                         xchg	ax,bx
19386 496A           89D9                       mov	cx,bx
19387 496C           F7E9                       imul	cx
19388                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19389                                           ! Debug: expression subtree swapping
19390 496E           0346         FE            add	ax,-2[bp]
19391                                           ! Debug: list unsigned int = ax+0 (used reg = )
19392 4971           50                         push	ax
19393                                           ! Debug: list unsigned int = const $B800 (used reg = )
19394 4972           B8                   B800  mov	ax,#$B800
19395 4975           50                         push	ax
19396                                           ! Debug: func () void = memsetb+0 (used reg = )
19397 4976           E8         3317            call	_memsetb
19398 4979           83C4                   08  add	sp,*8
19399                                           !BCC_EOS
19400                                           ! 2289   }
19401                       0000497C            .D0:
19402                                           ! 2290 }
19403                       0000497C            .CB:
19404                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19405 497C           8A46         FD            mov	al,-3[bp]
19406 497F           40                         inc	ax
19407 4980           8846         FD            mov	-3[bp],al
19408                       00004983            .CC:
19409                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19410 4983           8A46         FD            mov	al,-3[bp]
19411 4986           3A46         0C            cmp	al,$C[bp]
19412 4989           72           83            jb 	.CD
19413                       0000498B            .D1:
19414                       0000498B            .CA:
19415 498B           89EC                       mov	sp,bp
19416 498D           5D                         pop	bp
19417 498E           C3                         ret
19418                                           ! 2291 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19419                                           ! Register BX used in function vgamem_fill_cga
19420                                           ! 2292 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19421                       0000498F            _biosfn_scroll:
19422                                           !BCC_EOS
19423                                           !BCC_EOS
19424                                           !BCC_EOS
19425                                           !BCC_EOS
19426                                           !BCC_EOS
19427                                           !BCC_EOS
19428                                           !BCC_EOS
19429                                           !BCC_EOS
19430                                           ! 2293 {
19431                                           ! 2294  Bit8u mode,line,cheight,bpp,cols;
19432                                           !BCC_EOS
19433                                           ! 2295  Bit16u nbcols,nbrows,i;
19434                                           !BCC_EOS
19435                                           ! 2296  Bit16u address;
19436                                           !BCC_EOS
19437                                           ! 2297  if(rul>rlr)return;
19438 498F           55                         push	bp
19439 4990           89E5                       mov	bp,sp
19440 4992           83C4                   F2  add	sp,*-$E
19441                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19442 4995           8A46         08            mov	al,8[bp]
19443 4998           3A46         0C            cmp	al,$C[bp]
19444 499B           76           04            jbe 	.D2
19445                       0000499D            .D3:
19446 499D           89EC                       mov	sp,bp
19447 499F           5D                         pop	bp
19448 49A0           C3                         ret
19449                                           !BCC_EOS
19450                                           ! 2298  if(cul>clr)return;
19451                       000049A1            .D2:
19452                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19453 49A1           8A46         0A            mov	al,$A[bp]
19454 49A4           3A46         0E            cmp	al,$E[bp]
19455 49A7           76           04            jbe 	.D4
19456                       000049A9            .D5:
19457 49A9           89EC                       mov	sp,bp
19458 49AB           5D                         pop	bp
19459 49AC           C3                         ret
19460                                           !BCC_EOS
19461                                           ! 2299  mode=read_byte(0x40,0x49);
19462                       000049AD            .D4:
19463                                           ! Debug: list int = const $49 (used reg = )
19464 49AD           B8                   0049  mov	ax,*$49
19465 49B0           50                         push	ax
19466                                           ! Debug: list int = const $40 (used reg = )
19467 49B1           B8                   0040  mov	ax,*$40
19468 49B4           50                         push	ax
19469                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19470 49B5           E8         3382            call	_read_byte
19471 49B8           83C4                   04  add	sp,*4
19472                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19473 49BB           8846         FF            mov	-1[bp],al
19474                                           !BCC_EOS
19475                                           ! 2300  line=find_vga_entry(mode);
19476                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19477 49BE           8A46         FF            mov	al,-1[bp]
19478 49C1           30E4                       xor	ah,ah
19479 49C3           50                         push	ax
19480                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19481 49C4           E8         3287            call	_find_vga_entry
19482 49C7           44                         inc	sp
19483 49C8           44                         inc	sp
19484                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19485 49C9           8846         FE            mov	-2[bp],al
19486                                           !BCC_EOS
19487                                           ! 2301  if(line==0xFF)return;
19488                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19489 49CC           8A46         FE            mov	al,-2[bp]
19490 49CF           3C                     FF  cmp	al,#$FF
19491 49D1           75           04            jne 	.D6
19492                       000049D3            .D7:
19493 49D3           89EC                       mov	sp,bp
19494 49D5           5D                         pop	bp
19495 49D6           C3                         ret
19496                                           !BCC_EOS
19497                                           ! 2302  nbrows=read_byte(0x40,0x84)+1;
19498                       000049D7            .D6:
19499                                           ! Debug: list int = const $84 (used reg = )
19500 49D7           B8                   0084  mov	ax,#$84
19501 49DA           50                         push	ax
19502                                           ! Debug: list int = const $40 (used reg = )
19503 49DB           B8                   0040  mov	ax,*$40
19504 49DE           50                         push	ax
19505                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19506 49DF           E8         3358            call	_read_byte
19507 49E2           83C4                   04  add	sp,*4
19508                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19509 49E5           30E4                       xor	ah,ah
19510                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19511 49E7           40                         inc	ax
19512 49E8           8946         F6            mov	-$A[bp],ax
19513                                           !BCC_EOS
19514                                           ! 2303  nbcols=read_word(0x40,0x4A);
19515                                           ! Debug: list int = const $4A (used reg = )
19516 49EB           B8                   004A  mov	ax,*$4A
19517 49EE           50                         push	ax
19518                                           ! Debug: list int = const $40 (used reg = )
19519 49EF           B8                   0040  mov	ax,*$40
19520 49F2           50                         push	ax
19521                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19522 49F3           E8         3357            call	_read_word
19523 49F6           83C4                   04  add	sp,*4
19524                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19525 49F9           8946         F8            mov	-8[bp],ax
19526                                           !BCC_EOS
19527                                           ! 2304  if(page==0xFF)
19528                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19529 49FC           8A46         10            mov	al,$10[bp]
19530 49FF           3C                     FF  cmp	al,#$FF
19531 4A01           75           11            jne 	.D8
19532                       00004A03            .D9:
19533                                           ! 2305   page=read_byte(0x40,0x62);
19534                                           ! Debug: list int = const $62 (used reg = )
19535 4A03           B8                   0062  mov	ax,*$62
19536 4A06           50                         push	ax
19537                                           ! Debug: list int = const $40 (used reg = )
19538 4A07           B8                   0040  mov	ax,*$40
19539 4A0A           50                         push	ax
19540                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19541 4A0B           E8         332C            call	_read_byte
19542 4A0E           83C4                   04  add	sp,*4
19543                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19544 4A11           8846         10            mov	$10[bp],al
19545                                           !BCC_EOS
19546                                           ! 2306  if(rlr>=nbrows)rlr=nbrows-1;
19547                       00004A14            .D8:
19548                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19549 4A14           8A46         0C            mov	al,$C[bp]
19550 4A17           30E4                       xor	ah,ah
19551 4A19           3B46         F6            cmp	ax,-$A[bp]
19552 4A1C           72           07            jb  	.DA
19553                       00004A1E            .DB:
19554                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19555 4A1E           8B46         F6            mov	ax,-$A[bp]
19556                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19557 4A21           48                         dec	ax
19558 4A22           8846         0C            mov	$C[bp],al
19559                                           !BCC_EOS
19560                                           ! 2307  if(clr>=nbcols)clr=nbcols-1;
19561                       00004A25            .DA:
19562                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19563 4A25           8A46         0E            mov	al,$E[bp]
19564 4A28           30E4                       xor	ah,ah
19565 4A2A           3B46         F8            cmp	ax,-8[bp]
19566 4A2D           72           07            jb  	.DC
19567                       00004A2F            .DD:
19568                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19569 4A2F           8B46         F8            mov	ax,-8[bp]
19570                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19571 4A32           48                         dec	ax
19572 4A33           8846         0E            mov	$E[bp],al
19573                                           !BCC_EOS
19574                                           ! 2308  if(
19575                       00004A36            .DC:
19576                                           ! 2308 nblines>nbrows)nblines=0;
19577                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19578 4A36           8A46         04            mov	al,4[bp]
19579 4A39           30E4                       xor	ah,ah
19580 4A3B           3B46         F6            cmp	ax,-$A[bp]
19581 4A3E           76           05            jbe 	.DE
19582                       00004A40            .DF:
19583                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19584 4A40           30C0                       xor	al,al
19585 4A42           8846         04            mov	4[bp],al
19586                                           !BCC_EOS
19587                                           ! 2309  cols=clr-cul+1;
19588                       00004A45            .DE:
19589                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19590 4A45           8A46         0E            mov	al,$E[bp]
19591 4A48           30E4                       xor	ah,ah
19592 4A4A           2A46         0A            sub	al,$A[bp]
19593 4A4D           80DC                   00  sbb	ah,*0
19594                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19595                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19596 4A50           40                         inc	ax
19597 4A51           8846         FB            mov	-5[bp],al
19598                                           !BCC_EOS
19599                                           ! 2310  if(vga_modes[line].class==0x00)
19600                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19601 4A54           8A46         FE            mov	al,-2[bp]
19602 4A57           30E4                       xor	ah,ah
19603 4A59           B1                     03  mov	cl,*3
19604 4A5B           D3E0                       shl	ax,cl
19605 4A5D           89C3                       mov	bx,ax
19606 4A5F           81C3                 0206  add	bx,#_vga_modes
19607                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19608 4A63           8A47         01            mov	al,1[bx]
19609 4A66           84C0                       test	al,al
19610 4A68         0F85         0269            bne 	.E0
19611                       00004A6C            .E1:
19612                                           ! 2311   {
19613                                           ! 2312    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19614                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19615 4A6C           8B46         F8            mov	ax,-8[bp]
19616 4A6F           8B4E         F6            mov	cx,-$A[bp]
19617 4A72           F7E9                       imul	cx
19618                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19619 4A74           D1E0                       shl	ax,*1
19620                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19621 4A76           0C                     FF  or	al,#$FF
19622                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19623                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19624 4A78           89C3                       mov	bx,ax
19625 4A7A           8A46         10            mov	al,$10[bp]
19626 4A7D           30E4                       xor	ah,ah
19627 4A7F           93                         xchg	ax,bx
19628 4A80           40                         inc	ax
19629 4A81           89D9                       mov	cx,bx
19630 4A83           F7E9                       imul	cx
19631                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19632 4A85           8946         F2            mov	-$E[bp],ax
19633                                           !BCC_EOS
19634                                           ! 2313    printf("Scroll, address %04x (%04x %04x %02x)\n",address,nbrows,nbcols,page);
19635                                           ! Debug: list unsigned char page = [S+$10+$E] (used reg = )
19636 4A88           8A46         10            mov	al,$10[bp]
19637 4A8B           30E4                       xor	ah,ah
19638 4A8D           50                         push	ax
19639                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19640 4A8E           FF76         F8            push	-8[bp]
19641                                           ! Debug: list unsigned short nbrows = [S+$14-$C] (used reg = )
19642 4A91           FF76         F6            push	-$A[bp]
19643                                           ! Debug: list unsigned short address = [S+$16-$10] (used reg = )
19644 4A94           FF76         F2            push	-$E[bp]
19645                                           ! Debug: list * char = .E2+0 (used reg = )
19646 4A97           BB                   A58E  mov	bx,#.E2
19647 4A9A           53                         push	bx
19648                                           ! Debug: func () void = printf+0 (used reg = )
19649 4A9B           E8         3347            call	_printf
19650 4A9E           83C4                   0A  add	sp,*$A
19651                                           !BCC_EOS
19652                                           ! 2314    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19653                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19654 4AA1           8A46         04            mov	al,4[bp]
19655 4AA4           84C0                       test	al,al
19656 4AA6           75           67            jne 	.E3
19657                       00004AA8            .E8:
19658                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19659 4AA8           8A46         08            mov	al,8[bp]
19660 4AAB           84C0                       test	al,al
19661 4AAD           75           60            jne 	.E3
19662                       00004AAF            .E7:
19663                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19664 4AAF           8A46         0A            mov	al,$A[bp]
19665 4AB2           84C0                       test	al,al
19666 4AB4           75           59            jne 	.E3
19667                       00004AB6            .E6:
19668                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19669 4AB6           8B46         F6            mov	ax,-$A[bp]
19670                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19671                                           ! Debug: expression subtree swapping
19672 4AB9           48                         dec	ax
19673 4ABA           50                         push	ax
19674 4ABB           8A46         0C            mov	al,$C[bp]
19675 4ABE           30E4                       xor	ah,ah
19676 4AC0           3B46         F0            cmp	ax,-$10[bp]
19677 4AC3           8D66         F2            lea	sp,-$E[bp]
19678 4AC6           75           47            jne 	.E3
19679                       00004AC8            .E5:
19680                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19681 4AC8           8B46         F8            mov	ax,-8[bp]
19682                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19683                                           ! Debug: expression subtree swapping
19684 4ACB           48                         dec	ax
19685 4ACC           50                         push	ax
19686 4ACD           8A46         0E            mov	al,$E[bp]
19687 4AD0           30E4                       xor	ah,ah
19688 4AD2           3B46         F0            cmp	ax,-$10[bp]
19689 4AD5           8D66         F2            lea	sp,-$E[bp]
19690 4AD8           75           35            jne 	.E3
19691                       00004ADA            .E4:
19692                                           ! 2315     {
19693                                           ! 2316      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19694                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19695 4ADA           8B46         F6            mov	ax,-$A[bp]
19696 4ADD           8B4E         F8            mov	cx,-8[bp]
19697 4AE0           F7E9                       imul	cx
19698                                           ! Debug: list unsigned int = ax+0 (used reg = )
19699 4AE2           50                         push	ax
19700                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19701 4AE3           8A46         06            mov	al,6[bp]
19702 4AE6           30E4                       xor	ah,ah
19703                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19704 4AE8           B9                   0100  mov	cx,#$100
19705 4AEB           F7E9                       imul	cx
19706                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19707                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19708 4AED           05                   0020  add	ax,*$20
19709 4AF0           50                         push	ax
19710                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19711 4AF1           FF76         F2            push	-$E[bp]
19712                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19713 4AF4           8A46         FE            mov	al,-2[bp]
19714 4AF7           30E4                       xor	ah,ah
19715 4AF9           B1                     03  mov	cl,*3
19716 4AFB           D3E0                       shl	ax,cl
19717 4AFD           89C3                       mov	bx,ax
19718 4AFF           81C3                 0206  add	bx,#_vga_modes
19719                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19720 4B03           FF77         04            push	4[bx]
19721                                           ! Debug: func () void = memsetw+0 (used reg = )
19722 4B06           E8         31AC            call	_memsetw
19723 4B09           83C4                   08  add	sp,*8
19724                                           !BCC_EOS
19725                                           ! 2317     }
19726                                           ! 2318    else
19727                                           ! 2319     {
19728 4B0C           E9         01C3            br 	.E9
19729                       00004B0F            .E3:
19730                                           ! 2320      if(dir==1)
19731                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19732 4B0F           8A46         12            mov	al,$12[bp]
19733 4B12           3C                     01  cmp	al,*1
19734 4B14         0F85         00DC            bne 	.EA
19735                       00004B18            .EB:
19736                                           ! 2321       {for(i=rul;i<=rlr;i++)
19737                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19738 4B18           8A46         08            mov	al,8[bp]
19739 4B1B           30E4                       xor	ah,ah
19740 4B1D           8946         F4            mov	-$C[bp],ax
19741                                           !BCC_EOS
19742                                           !BCC_EOS
19743                                           ! 2322         {
19744 4B20           E9         00C2            br 	.EE
19745                       00004B23            .EF:
19746                                           ! 2323          if((i+nblines>rlr)||(nblines==0))
19747                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19748 4B23           8B46         F4            mov	ax,-$C[bp]
19749 4B26           0246         04            add	al,4[bp]
19750 4B29           80D4                   00  adc	ah,*0
19751                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19752 4B2C           50                         push	ax
19753 4B2D           8A46         0C            mov	al,$C[bp]
19754 4B30           30E4                       xor	ah,ah
19755 4B32           3B46         F0            cmp	ax,-$10[bp]
19756 4B35           8D66         F2            lea	sp,-$E[bp]
19757 4B38           72           07            jb  	.F1
19758                       00004B3A            .F2:
19759                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19760 4B3A           8A46         04            mov	al,4[bp]
19761 4B3D           84C0                       test	al,al
19762 4B3F           75           42            jne 	.F0
19763                       00004B41            .F1:
19764                                           ! 2324           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19765                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19766 4B41           8A46         FB            mov	al,-5[bp]
19767 4B44           30E4                       xor	ah,ah
19768 4B46           50                         push	ax
19769                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19770 4B47           8A46         06            mov	al,6[bp]
19771 4B4A           30E4                       xor	ah,ah
19772                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19773 4B4C           B9                   0100  mov	cx,#$100
19774 4B4F           F7E9                       imul	cx
19775                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19776                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19777 4B51           05                   0020  add	ax,*$20
19778 4B54           50                         push	ax
19779                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19780 4B55           8B46         F4            mov	ax,-$C[bp]
19781 4B58           8B4E         F8            mov	cx,-8[bp]
19782 4B5B           F7E9                       imul	cx
19783                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19784 4B5D           0246         0A            add	al,$A[bp]
19785 4B60           80D4                   00  adc	ah,*0
19786                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19787 4B63           D1E0                       shl	ax,*1
19788                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19789                                           ! Debug: expression subtree swapping
19790 4B65           0346         F2            add	ax,-$E[bp]
19791                                           ! Debug: list unsigned int = ax+0 (used reg = )
19792 4B68           50                         push	ax
19793                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19794 4B69           8A46         FE            mov	al,-2[bp]
19795 4B6C           30E4                       xor	ah,ah
19796 4B6E           B1                     03  mov	cl,*3
19797 4B70           D3E0                       shl	ax,cl
19798 4B72           89C3                       mov	bx,ax
19799 4B74           81C3                 0206  add	bx,#_vga_modes
19800                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19801 4B78           FF77         04            push	4[bx]
19802                                           ! Debug: func () void = memsetw+0 (used reg = )
19803 4B7B           E8         3137            call	_memsetw
19804 4B7E           83C4                   08  add	sp,*8
19805                                           !BCC_EOS
19806                                           ! 2325          else
19807                                           ! 2326           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19808 4B81           EB           5B            jmp .F3
19809                       00004B83            .F0:
19810                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19811 4B83           8A46         FB            mov	al,-5[bp]
19812 4B86           30E4                       xor	ah,ah
19813 4B88           50                         push	ax
19814                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19815 4B89           8B46         F4            mov	ax,-$C[bp]
19816 4B8C           0246         04            add	al,4[bp]
19817 4B8F           80D4                   00  adc	ah,*0
19818                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19819 4B92           8B4E         F8            mov	cx,-8[bp]
19820 4B95           F7E9                       imul	cx
19821                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19822 4B97           0246         0A            add	al,$A[bp]
19823 4B9A           80D4                   00  adc	ah,*0
19824                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19825 4B9D           D1E0                       shl	ax,*1
19826                                           ! Debug: list unsigned int = ax+0 (used reg = )
19827 4B9F           50                         push	ax
19828                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19829 4BA0           8A46         FE            mov	al,-2[bp]
19830 4BA3           30E4                       xor	ah,ah
19831 4BA5           B1                     03  mov	cl,*3
19832 4BA7           D3E0                       shl	ax,cl
19833 4BA9           89C3                       mov	bx,ax
19834 4BAB           81C3                 0206  add	bx,#_vga_modes
19835                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19836 4BAF           FF77         04            push	4[bx]
19837                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19838 4BB2           8B46         F4            mov	ax,-$C[bp]
19839 4BB5           8B4E         F8            mov	cx,-8[bp]
19840 4BB8           F7E9                       imul	cx
19841                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19842 4BBA           0246         0A            add	al,$A[bp]
19843 4BBD           80D4                   00  adc	ah,*0
19844                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19845 4BC0           D1E0                       shl	ax,*1
19846                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19847                                           ! Debug: expression subtree swapping
19848 4BC2           0346         F2            add	ax,-$E[bp]
19849                                           ! Debug: list unsigned int = ax+0 (used reg = )
19850 4BC5           50                         push	ax
19851                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19852 4BC6           8A46         FE            mov	al,-2[bp]
19853 4BC9           30E4                       xor	ah,ah
19854 4BCB           B1                     03  mov	cl,*3
19855 4BCD           D3E0                       shl	ax,cl
19856 4BCF           89C3                       mov	bx,ax
19857 4BD1           81C3                 0206  add	bx,#_vga_modes
19858                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19859 4BD5           FF77         04            push	4[bx]
19860                                           ! Debug: func () void = memcpyw+0 (used reg = )
19861 4BD8           E8         312F            call	_memcpyw
19862 4BDB           83C4                   0A  add	sp,*$A
19863                                           !BCC_EOS
19864                                           ! 2327         }
19865                       00004BDE            .F3:
19866                                           ! 2328       }
19867                       00004BDE            .ED:
19868                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19869 4BDE           8B46         F4            mov	ax,-$C[bp]
19870 4BE1           40                         inc	ax
19871 4BE2           8946         F4            mov	-$C[bp],ax
19872                       00004BE5            .EE:
19873                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19874 4BE5           8A46         0C            mov	al,$C[bp]
19875 4BE8           30E4                       xor	ah,ah
19876 4BEA           3B46         F4            cmp	ax,-$C[bp]
19877 4BED         0F83         FF32            bhis	.EF
19878                       00004BF1            .F4:
19879                       00004BF1            .EC:
19880                                           ! 2329      else
19881                                           ! 2330       {for(i=rlr;i>=rul;i--)
19882 4BF1           E9         00DE            br 	.F5
19883                       00004BF4            .EA:
19884                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19885 4BF4           8A46         0C            mov	al,$C[bp]
19886 4BF7           30E4                       xor	ah,ah
19887 4BF9           8946         F4            mov	-$C[bp],ax
19888                                           !BCC_EOS
19889                                           !BCC_EOS
19890                                           ! 2331         {
19891 4BFC           E9         00C7            br 	.F8
19892                       00004BFF            .F9:
19893                                           ! 2332          if((i<rul+nblines)||(nblines==0))
19894                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19895 4BFF           8A46         08            mov	al,8[bp]
19896 4C02           30E4                       xor	ah,ah
19897 4C04           0246         04            add	al,4[bp]
19898 4C07           80D4                   00  adc	ah,*0
19899                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19900 4C0A           3B46         F4            cmp	ax,-$C[bp]
19901 4C0D           77           07            ja  	.FB
19902                       00004C0F            .FC:
19903                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19904 4C0F           8A46         04            mov	al,4[bp]
19905 4C12           84C0                       test	al,al
19906 4C14           75           42            jne 	.FA
19907                       00004C16            .FB:
19908                                           ! 2333           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19909                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19910 4C16           8A46         FB            mov	al,-5[bp]
19911 4C19           30E4                       xor	ah,ah
19912 4C1B           50                         push	ax
19913                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19914 4C1C           8A46         06            mov	al,6[bp]
19915 4C1F           30E4                       xor	ah,ah
19916                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19917 4C21           B9                   0100  mov	cx,#$100
19918 4C24           F7E9                       imul	cx
19919                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19920                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19921 4C26           05                   0020  add	ax,*$20
19922 4C29           50                         push	ax
19923                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19924 4C2A           8B46         F4            mov	ax,-$C[bp]
19925 4C2D           8B4E         F8            mov	cx,-8[bp]
19926 4C30           F7E9                       imul	cx
19927                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19928 4C32           0246         0A            add	al,$A[bp]
19929 4C35           80D4                   00  adc	ah,*0
19930                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19931 4C38           D1E0                       shl	ax,*1
19932                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19933                                           ! Debug: expression subtree swapping
19934 4C3A           0346         F2            add	ax,-$E[bp]
19935                                           ! Debug: list unsigned int = ax+0 (used reg = )
19936 4C3D           50                         push	ax
19937                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19938 4C3E           8A46         FE            mov	al,-2[bp]
19939 4C41           30E4                       xor	ah,ah
19940 4C43           B1                     03  mov	cl,*3
19941 4C45           D3E0                       shl	ax,cl
19942 4C47           89C3                       mov	bx,ax
19943 4C49           81C3                 0206  add	bx,#_vga_modes
19944                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19945 4C4D           FF77         04            push	4[bx]
19946                                           ! Debug: func () void = memsetw+0 (used reg = )
19947 4C50           E8         3062            call	_memsetw
19948 4C53           83C4                   08  add	sp,*8
19949                                           !BCC_EOS
19950                                           ! 2334          else
19951                                           ! 2335           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19952 4C56           EB           5B            jmp .FD
19953                       00004C58            .FA:
19954                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19955 4C58           8A46         FB            mov	al,-5[bp]
19956 4C5B           30E4                       xor	ah,ah
19957 4C5D           50                         push	ax
19958                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19959 4C5E           8B46         F4            mov	ax,-$C[bp]
19960 4C61           2A46         04            sub	al,4[bp]
19961 4C64           80DC                   00  sbb	ah,*0
19962                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19963 4C67           8B4E         F8            mov	cx,-8[bp]
19964 4C6A           F7E9                       imul	cx
19965                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19966 4C6C           0246         0A            add	al,$A[bp]
19967 4C6F           80D4                   00  adc	ah,*0
19968                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19969 4C72           D1E0                       shl	ax,*1
19970                                           ! Debug: list unsigned int = ax+0 (used reg = )
19971 4C74           50                         push	ax
19972                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19973 4C75           8A46         FE            mov	al,-2[bp]
19974 4C78           30E4                       xor	ah,ah
19975 4C7A           B1                     03  mov	cl,*3
19976 4C7C           D3E0                       shl	ax,cl
19977 4C7E           89C3                       mov	bx,ax
19978 4C80           81C3                 0206  add	bx,#_vga_modes
19979                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19980 4C84           FF77         04            push	4[bx]
19981                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19982 4C87           8B46         F4            mov	ax,-$C[bp]
19983 4C8A           8B4E         F8            mov	cx,-8[bp]
19984 4C8D           F7E9                       imul	cx
19985                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19986 4C8F           0246         0A            add	al,$A[bp]
19987 4C92           80D4                   00  adc	ah,*0
19988                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19989 4C95           D1E0                       shl	ax,*1
19990                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19991                                           ! Debug: expression subtree swapping
19992 4C97           0346         F2            add	ax,-$E[bp]
19993                                           ! Debug: list unsigned int = ax+0 (used reg = )
19994 4C9A           50                         push	ax
19995                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19996 4C9B           8A46         FE            mov	al,-2[bp]
19997 4C9E           30E4                       xor	ah,ah
19998 4CA0           B1                     03  mov	cl,*3
19999 4CA2           D3E0                       shl	ax,cl
20000 4CA4           89C3                       mov	bx,ax
20001 4CA6           81C3                 0206  add	bx,#_vga_modes
20002                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20003 4CAA           FF77         04            push	4[bx]
20004                                           ! Debug: func () void = memcpyw+0 (used reg = )
20005 4CAD           E8         305A            call	_memcpyw
20006 4CB0           83C4                   0A  add	sp,*$A
20007                                           !BCC_EOS
20008                                           ! 2336          if (i>rlr) break;
20009                       00004CB3            .FD:
20010                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20011 4CB3           8A46         0C            mov	al,$C[bp]
20012 4CB6           30E4                       xor	ah,ah
20013 4CB8           3B46         F4            cmp	ax,-$C[bp]
20014 4CBB           73           02            jae 	.FE
20015                       00004CBD            .FF:
20016 4CBD           EB           13            jmp .F6
20017                                           !BCC_EOS
20018                                           ! 2337         }
20019                       00004CBF            .FE:
20020                                           ! 2338       }
20021                       00004CBF            .F7:
20022                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20023 4CBF           8B46         F4            mov	ax,-$C[bp]
20024 4CC2           48                         dec	ax
20025 4CC3           8946         F4            mov	-$C[bp],ax
20026                       00004CC6            .F8:
20027                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20028 4CC6           8A46         08            mov	al,8[bp]
20029 4CC9           30E4                       xor	ah,ah
20030 4CCB           3B46         F4            cmp	ax,-$C[bp]
20031 4CCE         0F86         FF2D            blos	.F9
20032                       00004CD2            .100:
20033                       00004CD2            .F6:
20034                                           ! 2339     }
20035                       00004CD2            .F5:
20036                                           ! 2340   }
20037                       00004CD2            .E9:
20038                                           ! 2341  else
20039                                           ! 2342   {
20040 4CD2           E9         03E4            br 	.101
20041                       00004CD5            .E0:
20042                                           ! 2343    cheight=video_param_table[line_to_vpti[line]].cheight;
20043                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
20044 4CD5           8A46         FE            mov	al,-2[bp]
20045 4CD8           30E4                       xor	ah,ah
20046 4CDA           89C3                       mov	bx,ax
20047                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
20048 4CDC           8A87       0286            mov	al,_line_to_vpti[bx]
20049 4CE0           30E4                       xor	ah,ah
20050 4CE2           B1                     06  mov	cl,*6
20051 4CE4           D3E0                       shl	ax,cl
20052 4CE6           89C3                       mov	bx,ax
20053 4CE8           81C3                 029A  add	bx,#_video_param_table
20054                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
20055 4CEC           8A47         02            mov	al,2[bx]
20056 4CEF           8846         FD            mov	-3[bp],al
20057                                           !BCC_EOS
20058                                           ! 2344    switch(vga_modes[line].memmodel)
20059                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20060 4CF2           8A46         FE            mov	al,-2[bp]
20061 4CF5           30E4                       xor	ah,ah
20062 4CF7           B1                     03  mov	cl,*3
20063 4CF9           D3E0                       shl	ax,cl
20064 4CFB           89C3                       mov	bx,ax
20065 4CFD           81C3                 0206  add	bx,#_vga_modes
20066 4D01           8A47         02            mov	al,2[bx]
20067                                           ! 2345     {
20068 4D04           E9         039E            br 	.104
20069                                           ! 2346      case 0x04:
20070                                           ! 2347      case 0x03:
20071                       00004D07            .105:
20072                                           ! 2348        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20073                       00004D07            .106:
20074                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20075 4D07           8A46         04            mov	al,4[bp]
20076 4D0A           84C0                       test	al,al
20077 4D0C         0F85         0089            bne 	.107
20078                       00004D10            .10C:
20079                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20080 4D10           8A46         08            mov	al,8[bp]
20081 4D13           84C0                       test	al,al
20082 4D15         0F85         0080            bne 	.107
20083                       00004D19            .10B:
20084                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20085 4D19           8A46         0A            mov	al,$A[bp]
20086 4D1C           84C0                       test	al,al
20087 4D1E           75           79            jne 	.107
20088                       00004D20            .10A:
20089                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20090 4D20           8B46         F6            mov	ax,-$A[bp]
20091                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20092                                           ! Debug: expression subtree swapping
20093 4D23           48                         dec	ax
20094 4D24           50                         push	ax
20095 4D25           8A46         0C            mov	al,$C[bp]
20096 4D28           30E4                       xor	ah,ah
20097 4D2A           3B46         F0            cmp	ax,0+..FFFC[bp]
20098 4D2D           8D66         F2            lea	sp,2+..FFFC[bp]
20099 4D30           75           67            jne 	.107
20100                       00004D32            .109:
20101                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20102 4D32           8B46         F8            mov	ax,-8[bp]
20103                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20104                                           ! Debug: expression subtree swapping
20105 4D35           48                         dec	ax
20106 4D36           50                         push	ax
20107 4D37           8A46         0E            mov	al,$E[bp]
20108 4D3A           30E4                       xor	ah,ah
20109 4D3C           3B46         F0            cmp	ax,0+..FFFC[bp]
20110 4D3F           8D66         F2            lea	sp,2+..FFFC[bp]
20111 4D42           75           55            jne 	.107
20112                       00004D44            .108:
20113                                           ! 2349         {
20114                                           ! 2350          outw(0x3ce, 0x0205);
20115                                           ! Debug: list int = const $205 (used reg = )
20116 4D44           B8                   0205  mov	ax,#$205
20117 4D47           50                         push	ax
20118                                           ! Debug: list int = const $3CE (used reg = )
20119 4D48           B8                   03CE  mov	ax,#$3CE
20120 4D4B           50                         push	ax
20121                                           ! Debug: func () void = outw+0 (used reg = )
20122 4D4C           E8         3067            call	_outw
20123 4D4F           83C4                   04  add	sp,*4
20124                                           !BCC_EOS
20125                                           ! 2351          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
20126                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20127 4D52           8B46         F6            mov	ax,-$A[bp]
20128 4D55           8B4E         F8            mov	cx,-8[bp]
20129 4D58           F7E9                       imul	cx
20130                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20131 4D5A           89C3                       mov	bx,ax
20132 4D5C           8A46         FD            mov	al,-3[bp]
20133 4D5F           30E4                       xor	ah,ah
20134 4D61           93                         xchg	ax,bx
20135 4D62           89D9                       mov	cx,bx
20136 4D64           F7E9                       imul	cx
20137                                           ! Debug: list unsigned int = ax+0 (used reg = )
20138 4D66           50                         push	ax
20139                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20140 4D67           8A46         06            mov	al,6[bp]
20141 4D6A           30E4                       xor	ah,ah
20142 4D6C           50                         push	ax
20143                                           ! Debug: list int = const 0 (used reg = )
20144 4D6D           31C0                       xor	ax,ax
20145 4D6F           50                         push	ax
20146                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20147 4D70           8A46         FE            mov	al,-2[bp]
20148 4D73           30E4                       xor	ah,ah
20149 4D75           B1                     03  mov	cl,*3
20150 4D77           D3E0                       shl	ax,cl
20151 4D79           89C3                       mov	bx,ax
20152 4D7B           81C3                 0206  add	bx,#_vga_modes
20153                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20154 4D7F           FF77         04            push	4[bx]
20155                                           ! Debug: func () void = memsetb+0 (used reg = )
20156 4D82           E8         2F0B            call	_memsetb
20157 4D85           83C4                   08  add	sp,*8
20158                                           !BCC_EOS
20159                                           ! 2352          outw(0x3ce, 0x0005);
20160                                           ! Debug: list int = const 5 (used reg = )
20161 4D88           B8                   0005  mov	ax,*5
20162 4D8B           50                         push	ax
20163                                           ! Debug: list int = const $3CE (used reg = )
20164 4D8C           B8                   03CE  mov	ax,#$3CE
20165 4D8F           50                         push	ax
20166                                           ! Debug: func () void = outw+0 (used reg = )
20167 4D90           E8         3023            call	_outw
20168 4D93           83C4                   04  add	sp,*4
20169                                           !BCC_EOS
20170                                           ! 2353         }
20171                                           ! 2354        else
20172                                           ! 2355         {
20173 4D96           E9         0122            br 	.10D
20174                       00004D99            .107:
20175                                           ! 2356          if(dir==1)
20176                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20177 4D99           8A46         12            mov	al,$12[bp]
20178 4D9C           3C                     01  cmp	al,*1
20179 4D9E         0F85         008A            bne 	.10E
20180                       00004DA2            .10F:
20181                                           ! 2357           {for(i=rul;i<=rlr;i++)
20182                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20183 4DA2           8A46         08            mov	al,8[bp]
20184 4DA5           30E4                       xor	ah,ah
20185 4DA7           8946         F4            mov	-$C[bp],ax
20186                                           !BCC_EOS
20187                                           !BCC_EOS
20188                                           ! 2358             {
20189 4DAA           EB           73            jmp .112
20190                       00004DAC            .113:
20191                                           ! 2359              if((i+nblines>rlr)||(nblines==0))
20192                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20193 4DAC           8B46         F4            mov	ax,-$C[bp]
20194 4DAF           0246         04            add	al,4[bp]
20195 4DB2           80D4                   00  adc	ah,*0
20196                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20197 4DB5           50                         push	ax
20198 4DB6           8A46         0C            mov	al,$C[bp]
20199 4DB9           30E4                       xor	ah,ah
20200 4DBB           3B46         F0            cmp	ax,0+..FFFC[bp]
20201 4DBE           8D66         F2            lea	sp,2+..FFFC[bp]
20202 4DC1           72           07            jb  	.115
20203                       00004DC3            .116:
20204                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20205 4DC3           8A46         04            mov	al,4[bp]
20206 4DC6           84C0                       test	al,al
20207 4DC8           75           26            jne 	.114
20208                       00004DCA            .115:
20209                                           ! 2360               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20210                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20211 4DCA           8A46         06            mov	al,6[bp]
20212 4DCD           30E4                       xor	ah,ah
20213 4DCF           50                         push	ax
20214                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20215 4DD0           8A46         FD            mov	al,-3[bp]
20216 4DD3           30E4                       xor	ah,ah
20217 4DD5           50                         push	ax
20218                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20219 4DD6           FF76         F8            push	-8[bp]
20220                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20221 4DD9           8A46         FB            mov	al,-5[bp]
20222 4DDC           30E4                       xor	ah,ah
20223 4DDE           50                         push	ax
20224                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20225 4DDF           FF76         F4            push	-$C[bp]
20226                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20227 4DE2           8A46         0A            mov	al,$A[bp]
20228 4DE5           30E4                       xor	ah,ah
20229 4DE7           50                         push	ax
20230                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20231 4DE8           E8         F952            call	_vgamem_fill_pl4
20232 4DEB           83C4                   0C  add	sp,*$C
20233                                           !BCC_EOS
20234                                           ! 2361              else
20235                                           ! 2362               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20236 4DEE           EB           28            jmp .117
20237                       00004DF0            .114:
20238                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20239 4DF0           8A46         FD            mov	al,-3[bp]
20240 4DF3           30E4                       xor	ah,ah
20241 4DF5           50                         push	ax
20242                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20243 4DF6           FF76         F8            push	-8[bp]
20244                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20245 4DF9           8A46         FB            mov	al,-5[bp]
20246 4DFC           30E4                       xor	ah,ah
20247 4DFE           50                         push	ax
20248                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20249 4DFF           FF76         F4            push	-$C[bp]
20250                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20251 4E02           8B46         F4            mov	ax,-$C[bp]
20252 4E05           0246         04            add	al,4[bp]
20253 4E08           80D4                   00  adc	ah,*0
20254                                           ! Debug: list unsigned int = ax+0 (used reg = )
20255 4E0B           50                         push	ax
20256                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20257 4E0C           8A46         0A            mov	al,$A[bp]
20258 4E0F           30E4                       xor	ah,ah
20259 4E11           50                         push	ax
20260                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20261 4E12           E8         F866            call	_vgamem_copy_pl4
20262 4E15           83C4                   0C  add	sp,*$C
20263                                           !BCC_EOS
20264                                           ! 2363             }
20265                       00004E18            .117:
20266                                           ! 2364           }
20267                       00004E18            .111:
20268                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20269 4E18           8B46         F4            mov	ax,-$C[bp]
20270 4E1B           40                         inc	ax
20271 4E1C           8946         F4            mov	-$C[bp],ax
20272                       00004E1F            .112:
20273                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20274 4E1F           8A46         0C            mov	al,$C[bp]
20275 4E22           30E4                       xor	ah,ah
20276 4E24           3B46         F4            cmp	ax,-$C[bp]
20277 4E27           73           83            jae	.113
20278                       00004E29            .118:
20279                       00004E29            .110:
20280                                           ! 2365          else
20281                                           ! 2366           {for(i=rlr;i>=rul;i--)
20282 4E29           E9         008F            br 	.119
20283                       00004E2C            .10E:
20284                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20285 4E2C           8A46         0C            mov	al,$C[bp]
20286 4E2F           30E4                       xor	ah,ah
20287 4E31           8946         F4            mov	-$C[bp],ax
20288                                           !BCC_EOS
20289                                           !BCC_EOS
20290                                           ! 2367             {
20291 4E34           E9         0078            br 	.11C
20292                       00004E37            .11D:
20293                                           ! 2368              if((i<rul+nblines)||(nblines==0))
20294                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20295 4E37           8A46         08            mov	al,8[bp]
20296 4E3A           30E4                       xor	ah,ah
20297 4E3C           0246         04            add	al,4[bp]
20298 4E3F           80D4                   00  adc	ah,*0
20299                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20300 4E42           3B46         F4            cmp	ax,-$C[bp]
20301 4E45           77           07            ja  	.11F
20302                       00004E47            .120:
20303                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20304 4E47           8A46         04            mov	al,4[bp]
20305 4E4A           84C0                       test	al,al
20306 4E4C           75           26            jne 	.11E
20307                       00004E4E            .11F:
20308                                           ! 2369               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20309                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20310 4E4E           8A46         06            mov	al,6[bp]
20311 4E51           30E4                       xor	ah,ah
20312 4E53           50                         push	ax
20313                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20314 4E54           8A46         FD            mov	al,-3[bp]
20315 4E57           30E4                       xor	ah,ah
20316 4E59           50                         push	ax
20317                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20318 4E5A           FF76         F8            push	-8[bp]
20319                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20320 4E5D           8A46         FB            mov	al,-5[bp]
20321 4E60           30E4                       xor	ah,ah
20322 4E62           50                         push	ax
20323                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20324 4E63           FF76         F4            push	-$C[bp]
20325                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20326 4E66           8A46         0A            mov	al,$A[bp]
20327 4E69           30E4                       xor	ah,ah
20328 4E6B           50                         push	ax
20329                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20330 4E6C           E8         F8CE            call	_vgamem_fill_pl4
20331 4E6F           83C4                   0C  add	sp,*$C
20332                                           !BCC_EOS
20333                                           ! 2370              else
20334                                           ! 2371               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20335 4E72           EB           28            jmp .121
20336                       00004E74            .11E:
20337                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20338 4E74           8A46         FD            mov	al,-3[bp]
20339 4E77           30E4                       xor	ah,ah
20340 4E79           50                         push	ax
20341                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20342 4E7A           FF76         F8            push	-8[bp]
20343                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20344 4E7D           8A46         FB            mov	al,-5[bp]
20345 4E80           30E4                       xor	ah,ah
20346 4E82           50                         push	ax
20347                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20348 4E83           8B46         F4            mov	ax,-$C[bp]
20349 4E86           2A46         04            sub	al,4[bp]
20350 4E89           80DC                   00  sbb	ah,*0
20351                                           ! Debug: list unsigned int = ax+0 (used reg = )
20352 4E8C           50                         push	ax
20353                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20354 4E8D           FF76         F4            push	-$C[bp]
20355                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20356 4E90           8A46         0A            mov	al,$A[bp]
20357 4E93           30E4                       xor	ah,ah
20358 4E95           50                         push	ax
20359                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20360 4E96           E8         F7E2            call	_vgamem_copy_pl4
20361 4E99           83C4                   0C  add	sp,*$C
20362                                           !BCC_EOS
20363                                           ! 2372       
20364                                           ! 2372        if (i>rlr) break;
20365                       00004E9C            .121:
20366                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20367 4E9C           8A46         0C            mov	al,$C[bp]
20368 4E9F           30E4                       xor	ah,ah
20369 4EA1           3B46         F4            cmp	ax,-$C[bp]
20370 4EA4           73           02            jae 	.122
20371                       00004EA6            .123:
20372 4EA6           EB           13            jmp .11A
20373                                           !BCC_EOS
20374                                           ! 2373             }
20375                       00004EA8            .122:
20376                                           ! 2374           }
20377                       00004EA8            .11B:
20378                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20379 4EA8           8B46         F4            mov	ax,-$C[bp]
20380 4EAB           48                         dec	ax
20381 4EAC           8946         F4            mov	-$C[bp],ax
20382                       00004EAF            .11C:
20383                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20384 4EAF           8A46         08            mov	al,8[bp]
20385 4EB2           30E4                       xor	ah,ah
20386 4EB4           3B46         F4            cmp	ax,-$C[bp]
20387 4EB7         0F86         FF7C            blos	.11D
20388                       00004EBB            .124:
20389                       00004EBB            .11A:
20390                                           ! 2375         }
20391                       00004EBB            .119:
20392                                           ! 2376        break;
20393                       00004EBB            .10D:
20394 4EBB           E9         01FB            br 	.102
20395                                           !BCC_EOS
20396                                           ! 2377      case 0x02:
20397                                           ! 2378        bpp=vga_modes[line].pixbits;
20398                       00004EBE            .125:
20399                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20400 4EBE           8A46         FE            mov	al,-2[bp]
20401 4EC1           30E4                       xor	ah,ah
20402 4EC3           B1                     03  mov	cl,*3
20403 4EC5           D3E0                       shl	ax,cl
20404 4EC7           89C3                       mov	bx,ax
20405 4EC9           81C3                 0206  add	bx,#_vga_modes
20406                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20407 4ECD           8A47         03            mov	al,3[bx]
20408 4ED0           8846         FC            mov	-4[bp],al
20409                                           !BCC_EOS
20410                                           ! 2379        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20411                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20412 4ED3           8A46         04            mov	al,4[bp]
20413 4ED6           84C0                       test	al,al
20414 4ED8           75           77            jne 	.126
20415                       00004EDA            .12B:
20416                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20417 4EDA           8A46         08            mov	al,8[bp]
20418 4EDD           84C0                       test	al,al
20419 4EDF           75           70            jne 	.126
20420                       00004EE1            .12A:
20421                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20422 4EE1           8A46         0A            mov	al,$A[bp]
20423 4EE4           84C0                       test	al,al
20424 4EE6           75           69            jne 	.126
20425                       00004EE8            .129:
20426                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20427 4EE8           8B46         F6            mov	ax,-$A[bp]
20428                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20429                                           ! Debug: expression subtree swapping
20430 4EEB           48                         dec	ax
20431 4EEC           50                         push	ax
20432 4EED           8A46         0C            mov	al,$C[bp]
20433 4EF0           30E4                       xor	ah,ah
20434 4EF2           3B46         F0            cmp	ax,0+..FFFC[bp]
20435 4EF5           8D66         F2            lea	sp,2+..FFFC[bp]
20436 4EF8           75           57            jne 	.126
20437                       00004EFA            .128:
20438                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20439 4EFA           8B46         F8            mov	ax,-8[bp]
20440                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20441                                           ! Debug: expression subtree swapping
20442 4EFD           48                         dec	ax
20443 4EFE           50                         push	ax
20444 4EFF           8A46         0E            mov	al,$E[bp]
20445 4F02           30E4                       xor	ah,ah
20446 4F04           3B46         F0            cmp	ax,0+..FFFC[bp]
20447 4F07           8D66         F2            lea	sp,2+..FFFC[bp]
20448 4F0A           75           45            jne 	.126
20449                       00004F0C            .127:
20450                                           ! 2380         {
20451                                           ! 2381          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20452                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20453 4F0C           8B46         F6            mov	ax,-$A[bp]
20454 4F0F           8B4E         F8            mov	cx,-8[bp]
20455 4F12           F7E9                       imul	cx
20456                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20457 4F14           89C3                       mov	bx,ax
20458 4F16           8A46         FD            mov	al,-3[bp]
20459 4F19           30E4                       xor	ah,ah
20460 4F1B           93                         xchg	ax,bx
20461 4F1C           89D9                       mov	cx,bx
20462 4F1E           F7E9                       imul	cx
20463                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20464 4F20           89C3                       mov	bx,ax
20465 4F22           8A46         FC            mov	al,-4[bp]
20466 4F25           30E4                       xor	ah,ah
20467 4F27           93                         xchg	ax,bx
20468 4F28           89D9                       mov	cx,bx
20469 4F2A           F7E9                       imul	cx
20470                                           ! Debug: list unsigned int = ax+0 (used reg = )
20471 4F2C           50                         push	ax
20472                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20473 4F2D           8A46         06            mov	al,6[bp]
20474 4F30           30E4                       xor	ah,ah
20475 4F32           50                         push	ax
20476                                           ! Debug: list int = const 0 (used reg = )
20477 4F33           31C0                       xor	ax,ax
20478 4F35           50                         push	ax
20479                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20480 4F36           8A46         FE            mov	al,-2[bp]
20481 4F39           30E4                       xor	ah,ah
20482 4F3B           B1                     03  mov	cl,*3
20483 4F3D           D3E0                       shl	ax,cl
20484 4F3F           89C3                       mov	bx,ax
20485 4F41           81C3                 0206  add	bx,#_vga_modes
20486                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20487 4F45           FF77         04            push	4[bx]
20488                                           ! Debug: func () void = memsetb+0 (used reg = )
20489 4F48           E8         2D45            call	_memsetb
20490 4F4B           83C4                   08  add	sp,*8
20491                                           !BCC_EOS
20492                                           ! 2382         }
20493                                           ! 2383        else
20494                                           ! 2384         {
20495 4F4E           E9         0144            br 	.12C
20496                       00004F51            .126:
20497                                           ! 2385          if(bpp==2)
20498                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20499 4F51           8A46         FC            mov	al,-4[bp]
20500 4F54           3C                     02  cmp	al,*2
20501 4F56           75           1C            jne 	.12D
20502                       00004F58            .12E:
20503                                           ! 2386           {
20504                                           ! 2387            cul<<=1;
20505                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20506 4F58           8A46         0A            mov	al,$A[bp]
20507 4F5B           30E4                       xor	ah,ah
20508 4F5D           D1E0                       shl	ax,*1
20509 4F5F           8846         0A            mov	$A[bp],al
20510                                           !BCC_EOS
20511                                           ! 2388            cols<<=1;
20512                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20513 4F62           8A46         FB            mov	al,-5[bp]
20514 4F65           30E4                       xor	ah,ah
20515 4F67           D1E0                       shl	ax,*1
20516 4F69           8846         FB            mov	-5[bp],al
20517                                           !BCC_EOS
20518                                           ! 2389            nbcols<<=1;
20519                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20520 4F6C           8B46         F8            mov	ax,-8[bp]
20521 4F6F           D1E0                       shl	ax,*1
20522 4F71           8946         F8            mov	-8[bp],ax
20523                                           !BCC_EOS
20524                                           ! 2390           }
20525                                           ! 2391          if(dir==1)
20526                       00004F74            .12D:
20527                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20528 4F74           8A46         12            mov	al,$12[bp]
20529 4F77           3C                     01  cmp	al,*1
20530 4F79         0F85         008A            bne 	.12F
20531                       00004F7D            .130:
20532                                           ! 2392           {for(i=rul;i<=rlr;i++)
20533                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20534 4F7D           8A46         08            mov	al,8[bp]
20535 4F80           30E4                       xor	ah,ah
20536 4F82           8946         F4            mov	-$C[bp],ax
20537                                           !BCC_EOS
20538                                           !BCC_EOS
20539                                           ! 2393             {
20540 4F85           EB           73            jmp .133
20541                       00004F87            .134:
20542                                           ! 2394              if((i+nblines>rlr)||(nblines==0))
20543                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20544 4F87           8B46         F4            mov	ax,-$C[bp]
20545 4F8A           0246         04            add	al,4[bp]
20546 4F8D           80D4                   00  adc	ah,*0
20547                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20548 4F90           50                         push	ax
20549 4F91           8A46         0C            mov	al,$C[bp]
20550 4F94           30E4                       xor	ah,ah
20551 4F96           3B46         F0            cmp	ax,0+..FFFC[bp]
20552 4F99           8D66         F2            lea	sp,2+..FFFC[bp]
20553 4F9C           72           07            jb  	.136
20554                       00004F9E            .137:
20555                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20556 4F9E           8A46         04            mov	al,4[bp]
20557 4FA1           84C0                       test	al,al
20558 4FA3           75           26            jne 	.135
20559                       00004FA5            .136:
20560                                           ! 2395               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20561                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20562 4FA5           8A46         06            mov	al,6[bp]
20563 4FA8           30E4                       xor	ah,ah
20564 4FAA           50                         push	ax
20565                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20566 4FAB           8A46         FD            mov	al,-3[bp]
20567 4FAE           30E4                       xor	ah,ah
20568 4FB0           50                         push	ax
20569                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20570 4FB1           FF76         F8            push	-8[bp]
20571                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20572 4FB4           8A46         FB            mov	al,-5[bp]
20573 4FB7           30E4                       xor	ah,ah
20574 4FB9           50                         push	ax
20575                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20576 4FBA           FF76         F4            push	-$C[bp]
20577                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20578 4FBD           8A46         0A            mov	al,$A[bp]
20579 4FC0           30E4                       xor	ah,ah
20580 4FC2           50                         push	ax
20581                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20582 4FC3           E8         F914            call	_vgamem_fill_cga
20583 4FC6           83C4                   0C  add	sp,*$C
20584                                           !BCC_EOS
20585                                           ! 2396              else
20586                                           ! 2397               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20587 4FC9           EB           28            jmp .138
20588                       00004FCB            .135:
20589                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20590 4FCB           8A46         FD            mov	al,-3[bp]
20591 4FCE           30E4                       xor	ah,ah
20592 4FD0           50                         push	ax
20593                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20594 4FD1           FF76         F8            push	-8[bp]
20595                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20596 4FD4           8A46         FB            mov	al,-5[bp]
20597 4FD7           30E4                       xor	ah,ah
20598 4FD9           50                         push	ax
20599                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20600 4FDA           FF76         F4            push	-$C[bp]
20601                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20602 4FDD           8B46         F4            mov	ax,-$C[bp]
20603 4FE0           0246         04            add	al,4[bp]
20604 4FE3           80D4                   00  adc	ah,*0
20605                                           ! Debug: list unsigned int = ax+0 (used reg = )
20606 4FE6           50                         push	ax
20607                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20608 4FE7           8A46         0A            mov	al,$A[bp]
20609 4FEA           30E4                       xor	ah,ah
20610 4FEC           50                         push	ax
20611                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20612 4FED           E8         F7D8            call	_vgamem_copy_cga
20613 4FF0           83C4                   0C  add	sp,*$C
20614                                           !BCC_EOS
20615                                           ! 2398             }
20616                       00004FF3            .138:
20617                                           ! 2399           }
20618                       00004FF3            .132:
20619                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20620 4FF3           8B46         F4            mov	ax,-$C[bp]
20621 4FF6           40                         inc	ax
20622 4FF7           8946         F4            mov	-$C[bp],ax
20623                       00004FFA            .133:
20624                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20625 4FFA           8A46         0C            mov	al,$C[bp]
20626 4FFD           30E4                       xor	ah,ah
20627 4FFF           3B46         F4            cmp	ax,-$C[bp]
20628 5002           73           83            jae	.134
20629                       00005004            .139:
20630                       00005004            .131:
20631                                           ! 2400          else
20632                                           ! 2401           {for(i=rlr;i>=rul;i--)
20633 5004           E9         008E            br 	.13A
20634                       00005007            .12F:
20635                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20636 5007           8A46         0C            mov	al,$C[bp]
20637 500A           30E4                       xor	ah,ah
20638 500C           8946         F4            mov	-$C[bp],ax
20639                                           !BCC_EOS
20640                                           !BCC_EOS
20641                                           ! 2402             {
20642 500F           EB           78            jmp .13D
20643                       00005011            .13E:
20644                                           ! 2403              if((i<rul+nblines)||(nblines==0))
20645                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20646 5011           8A46         08            mov	al,8[bp]
20647 5014           30E4                       xor	ah,ah
20648 5016           0246         04            add	al,4[bp]
20649 5019           80D4                   00  adc	ah,*0
20650                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20651 501C           3B46         F4            cmp	ax,-$C[bp]
20652 501F           77           07            ja  	.140
20653                       00005021            .141:
20654                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20655 5021           8A46         04            mov	al,4[bp]
20656 5024           84C0                       test	al,al
20657 5026           75           26            jne 	.13F
20658                       00005028            .140:
20659                                           ! 2404               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20660                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20661 5028           8A46         06            mov	al,6[bp]
20662 502B           30E4                       xor	ah,ah
20663 502D           50                         push	ax
20664                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20665 502E           8A46         FD            mov	al,-3[bp]
20666 5031           30E4                       xor	ah,ah
20667 5033           50                         push	ax
20668                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20669 5034           FF76         F8            push	-8[bp]
20670                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20671 5037           8A46         FB            mov	al,-5[bp]
20672 503A           30E4                       xor	ah,ah
20673 503C           50                         push	ax
20674                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20675 503D           FF76         F4            push	-$C[bp]
20676                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20677 5040           8A46         0A            mov	al,$A[bp]
20678 5043           30E4                       xor	ah,ah
20679 5045           50                         push	ax
20680                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20681 5046           E8         F891            call	_vgamem_fill_cga
20682 5049           83C4                   0C  add	sp,*$C
20683                                           !BCC_EOS
20684                                           ! 2405              else
20685                                           ! 2406               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20686 504C           EB           28            jmp .142
20687                       0000504E            .13F:
20688                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20689 504E           8A46         FD            mov	al,-3[bp]
20690 5051           30E4                       xor	ah,ah
20691 5053           50                         push	ax
20692                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20693 5054           FF76         F8            push	-8[bp]
20694                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20695 5057           8A46         FB            mov	al,-5[bp]
20696 505A           30E4                       xor	ah,ah
20697 505C           50                         push	ax
20698                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20699 505D           8B46         F4            mov	ax,-$C[bp]
20700 5060           2A46         04            sub	al,4[bp]
20701 5063           80DC                   00  sbb	ah,*0
20702                                           ! Debug: list unsigned int = ax+0 (used reg = )
20703 5066           50                         push	ax
20704                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20705 5067           FF76         F4            push	-$C[bp]
20706                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20707 506A           8A46         0A            mov	al,$A[bp]
20708 506D           30E4                       xor	ah,ah
20709 506F           50                         push	ax
20710                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20711 5070           E8         F755            call	_vgamem_copy_cga
20712 5073           83C4                   0C  add	sp,*$C
20713                                           !BCC_EOS
20714                                           ! 2407              if (i>rlr) break;
20715                       00005076            .142:
20716                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20717 5076           8A46         0C            mov	al,$C[bp]
20718 5079           30E4                       xor	ah,ah
20719 507B           3B46         F4            cmp	ax,-$C[bp]
20720 507E           73           02            jae 	.143
20721                       00005080            .144:
20722 5080           EB           13            jmp .13B
20723                                           !BCC_EOS
20724                                           ! 2408             }
20725                       00005082            .143:
20726                                           ! 2409           }
20727                       00005082            .13C:
20728                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20729 5082           8B46         F4            mov	ax,-$C[bp]
20730 5085           48                         dec	ax
20731 5086           8946         F4            mov	-$C[bp],ax
20732                       00005089            .13D:
20733                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20734 5089           8A46         08            mov	al,8[bp]
20735 508C           30E4                       xor	ah,ah
20736 508E           3B46         F4            cmp	ax,-$C[bp]
20737 5091         0F86         FF7C            blos	.13E
20738                       00005095            .145:
20739                       00005095            .13B:
20740                                           ! 2410         }
20741                       00005095            .13A:
20742                                           ! 2411        break;
20743                       00005095            .12C:
20744 5095           EB           22            jmp .102
20745                                           !BCC_EOS
20746                                           ! 2412      default:
20747                                           ! 2413        printf("Scroll in graphics mode ");
20748                       00005097            .146:
20749                                           ! Debug: list * char = .147+0 (used reg = )
20750 5097           BB                   A575  mov	bx,#.147
20751 509A           53                         push	bx
20752                                           ! Debug: func () void = printf+0 (used reg = )
20753 509B           E8         2D47            call	_printf
20754 509E           44                         inc	sp
20755 509F           44                         inc	sp
20756                                           !BCC_EOS
20757                                           ! 2414        unimplemented();
20758                                           ! Debug: func () void = unimplemented+0 (used reg = )
20759 50A0           E8         2D26            call	_unimplemented
20760                                           !BCC_EOS
20761                                           ! 2415     }
20762                                           ! 2416   }
20763 50A3           EB           14            jmp .102
20764                       000050A5            .104:
20765 50A5           2C                     02  sub	al,*2
20766 50A7         0F84         FE13            beq 	.125
20767 50AB           2C                     01  sub	al,*1
20768 50AD         0F84         FC56            beq 	.106
20769 50B1           2C                     01  sub	al,*1
20770 50B3         0F84         FC50            beq 	.105
20771 50B7           EB           DE            jmp	.146
20772                       000050B9            .102:
20773                       FFFFFFF0            ..FFFC	=	-$10
20774                                           ! 2417 }
20775                       000050B9            .101:
20776 50B9           89EC                       mov	sp,bp
20777 50BB           5D                         pop	bp
20778 50BC           C3                         ret
20779                                           ! 2418 static void biosfn_read_char_attr (page,car)
20780                                           ! Register BX used in function biosfn_scroll
20781                                           ! 2419 Bit8u page;Bit16u *car;
20782                       000050BD            _biosfn_read_char_attr:
20783                                           !BCC_EOS
20784                                           !BCC_EOS
20785                                           ! 2420 {Bit16u ss=get_SS();
20786 50BD           55                         push	bp
20787 50BE           89E5                       mov	bp,sp
20788 50C0           4C                         dec	sp
20789 50C1           4C                         dec	sp
20790                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20791 50C2           E8         2D01            call	_get_SS
20792                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20793 50C5           8946         FE            mov	-2[bp],ax
20794                                           !BCC_EOS
20795                                           ! 2421  Bit8u xcurs,ycurs,mode,line;
20796                                           !BCC_EOS
20797                                           ! 2422  Bit16u nbcols,nbrows,address;
20798                                           !BCC_EOS
20799                                           ! 2423  Bit16u cursor,dummy;
20800                                           !BCC_EOS
20801                                           ! 2424  mode=read_byte(0x40,0x49);
20802 50C8           83C4                   F2  add	sp,*-$E
20803                                           ! Debug: list int = const $49 (used reg = )
20804 50CB           B8                   0049  mov	ax,*$49
20805 50CE           50                         push	ax
20806                                           ! Debug: list int = const $40 (used reg = )
20807 50CF           B8                   0040  mov	ax,*$40
20808 50D2           50                         push	ax
20809                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20810 50D3           E8         2C64            call	_read_byte
20811 50D6           83C4                   04  add	sp,*4
20812                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20813 50D9           8846         FB            mov	-5[bp],al
20814                                           !BCC_EOS
20815                                           ! 2425  line=find_vga_entry(mode);
20816                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20817 50DC           8A46         FB            mov	al,-5[bp]
20818 50DF           30E4                       xor	ah,ah
20819 50E1           50                         push	ax
20820                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20821 50E2           E8         2B69            call	_find_vga_entry
20822 50E5           44                         inc	sp
20823 50E6           44                         inc	sp
20824                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20825 50E7           8846         FA            mov	-6[bp],al
20826                                           !BCC_EOS
20827                                           ! 2426  if(line==0xFF)return;
20828                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20829 50EA           8A46         FA            mov	al,-6[bp]
20830 50ED           3C                     FF  cmp	al,#$FF
20831 50EF           75           04            jne 	.148
20832                       000050F1            .149:
20833 50F1           89EC                       mov	sp,bp
20834 50F3           5D                         pop	bp
20835 50F4           C3                         ret
20836                                           !BCC_EOS
20837                                           ! 2427  biosfn_get_cursor_pos(page,&dummy,&cursor);
20838                       000050F5            .148:
20839                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20840 50F5           8D5E         F2            lea	bx,-$E[bp]
20841 50F8           53                         push	bx
20842                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20843 50F9           8D5E         F0            lea	bx,-$10[bp]
20844 50FC           53                         push	bx
20845                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20846 50FD           8A46         04            mov	al,4[bp]
20847 5100           30E4                       xor	ah,ah
20848 5102           50                         push	ax
20849                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20850 5103           E8         F37E            call	_biosfn_get_cursor_pos
20851 5106           83C4                   06  add	sp,*6
20852                                           !BCC_EOS
20853                                           ! 2428  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20854                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20855 5109           8A46         F2            mov	al,-$E[bp]
20856                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20857 510C           8846         FD            mov	-3[bp],al
20858                                           !BCC_EOS
20859                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20860 510F           8B46         F2            mov	ax,-$E[bp]
20861 5112           30C0                       xor	al,al
20862                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20863 5114           88E0                       mov	al,ah
20864 5116           30E4                       xor	ah,ah
20865                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20866 5118           8846         FC            mov	-4[bp],al
20867                                           !BCC_EOS
20868                                           ! 2429  nbrows=read_byte(0x40,0x84)+1;
20869                                           ! Debug: list int = const $84 (used reg = )
20870 511B           B8                   0084  mov	ax,#$84
20871 511E           50                         push	ax
20872                                           ! Debug: list int = const $40 (used reg = )
20873 511F           B8                   0040  mov	ax,*$40
20874 5122           50                         push	ax
20875                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20876 5123           E8         2C14            call	_read_byte
20877 5126           83C4                   04  add	sp,*4
20878                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20879 5129           30E4                       xor	ah,ah
20880                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20881 512B           40                         inc	ax
20882 512C           8946         F6            mov	-$A[bp],ax
20883                                           !BCC_EOS
20884                                           ! 2430  nbcols=read_word(0x40,0x4A);
20885                                           ! Debug: list int = const $4A (used reg = )
20886 512F           B8                   004A  mov	ax,*$4A
20887 5132           50                         push	ax
20888                                           ! Debug: list int = const $40 (used reg = )
20889 5133           B8                   0040  mov	ax,*$40
20890 5136           50                         push	ax
20891                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20892 5137           E8         2C13            call	_read_word
20893 513A           83C4                   04  add	sp,*4
20894                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20895 513D           8946         F8            mov	-8[bp],ax
20896                                           !BCC_EOS
20897                                           ! 2431  if(vga_modes[line].class==0x00)
20898                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20899 5140           8A46         FA            mov	al,-6[bp]
20900 5143           30E4                       xor	ah,ah
20901 5145           B1                     03  mov	cl,*3
20902 5147           D3E0                       shl	ax,cl
20903 5149           89C3                       mov	bx,ax
20904 514B           81C3                 0206  add	bx,#_vga_modes
20905                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20906 514F           8A47         01            mov	al,1[bx]
20907 5152           84C0                       test	al,al
20908 5154           75           5E            jne 	.14A
20909                       00005156            .14B:
20910                                           ! 2432   {
20911                                           ! 2433    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20912                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20913 5156           8A46         FC            mov	al,-4[bp]
20914 5159           30E4                       xor	ah,ah
20915 515B           8B4E         F8            mov	cx,-8[bp]
20916 515E           F7E9                       imul	cx
20917                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20918                                           ! Debug: expression subtree swapping
20919 5160           0246         FD            add	al,-3[bp]
20920 5163           80D4                   00  adc	ah,*0
20921                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20922 5166           D1E0                       shl	ax,*1
20923 5168           50                         push	ax
20924                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20925 5169           8B46         F8            mov	ax,-8[bp]
20926 516C           8B4E         F6            mov	cx,-$A[bp]
20927 516F           F7E9                       imul	cx
20928                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20929 5171           D1E0                       shl	ax,*1
20930                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20931 5173           0C                     FF  or	al,#$FF
20932                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20933                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20934 5175           89C3                       mov	bx,ax
20935 5177           8A46         04            mov	al,4[bp]
20936 517A           30E4                       xor	ah,ah
20937 517C           93                         xchg	ax,bx
20938 517D           40                         inc	ax
20939 517E           89D9                       mov	cx,bx
20940 5180           F7E9                       imul	cx
20941                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20942 5182           0346         EE            add	ax,-$12[bp]
20943 5185           44                         inc	sp
20944 5186           44                         inc	sp
20945                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20946 5187           8946         F4            mov	-$C[bp],ax
20947                                           !BCC_EOS
20948                                           ! 2434    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20949                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20950 518A           FF76         F4            push	-$C[bp]
20951                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20952 518D           8A46         FA            mov	al,-6[bp]
20953 5190           30E4                       xor	ah,ah
20954 5192           B1                     03  mov	cl,*3
20955 5194           D3E0                       shl	ax,cl
20956 5196           89C3                       mov	bx,ax
20957 5198           81C3                 0206  add	bx,#_vga_modes
20958                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20959 519C           FF77         04            push	4[bx]
20960                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20961 519F           E8         2BAB            call	_read_word
20962 51A2           83C4                   04  add	sp,*4
20963                                           ! Debug: list unsigned short = ax+0 (used reg = )
20964 51A5           50                         push	ax
20965                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20966 51A6           FF76         06            push	6[bp]
20967                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20968 51A9           FF76         FE            push	-2[bp]
20969                                           ! Debug: func () void = write_word+0 (used reg = )
20970 51AC           E8         2BC9            call	_write_word
20971 51AF           83C4                   06  add	sp,*6
20972                                           !BCC_EOS
20973                                           ! 2435   }
20974                                           ! 2436  else
20975                                           ! 2437   {
20976 51B2           EB           03            jmp .14C
20977                       000051B4            .14A:
20978                                           ! 2438    unimplemented();
20979                                           ! Debug: func () void = unimplemented+0 (used reg = )
20980 51B4           E8         2C12            call	_unimplemented
20981                                           !BCC_EOS
20982                                           ! 2439   }
20983                                           ! 2440 }
20984                       000051B7            .14C:
20985 51B7           89EC                       mov	sp,bp
20986 51B9           5D                         pop	bp
20987 51BA           C3                         ret
20988                                           ! 2441 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20989                                           ! Register BX used in function biosfn_read_char_attr
20990                                           ! 2442 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20991                       000051BB            _write_gfx_char_pl4:
20992                                           !BCC_EOS
20993                                           !BCC_EOS
20994                                           !BCC_EOS
20995                                           !BCC_EOS
20996                                           !BCC_EOS
20997                                           !BCC_EOS
20998                                           ! 2443 {
20999                                           ! 2444  Bit8u i,j,mask;
21000                                           !BCC_EOS
21001                                           ! 2445  Bit8u *fdata;
21002                                           !BCC_EOS
21003                                           ! 2446  Bit16u addr,dest,src;
21004                                           !BCC_EOS
21005                                           ! 2447  switch(cheight)
21006 51BB           55                         push	bp
21007 51BC           89E5                       mov	bp,sp
21008 51BE           83C4                   F4  add	sp,*-$C
21009 51C1           8A46         0E            mov	al,$E[bp]
21010                                           ! 2448   {case 14:
21011 51C4           EB           18            jmp .14F
21012                                           ! 2449     fdata = &vgafont14;
21013                       000051C6            .150:
21014                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21015 51C6           BB                   176A  mov	bx,#_vgafont14
21016 51C9           895E         FA            mov	-6[bp],bx
21017                                           !BCC_EOS
21018                                           ! 2450     break;
21019 51CC           EB           1A            jmp .14D
21020                                           !BCC_EOS
21021                                           ! 2451    case 16:
21022                                           ! 2452     fdata = &
21023                       000051CE            .151:
21024                                           ! 2452 vgafont16;
21025                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21026 51CE           BB                   256A  mov	bx,#_vgafont16
21027 51D1           895E         FA            mov	-6[bp],bx
21028                                           !BCC_EOS
21029                                           ! 2453     break;
21030 51D4           EB           12            jmp .14D
21031                                           !BCC_EOS
21032                                           ! 2454    default:
21033                                           ! 2455     fdata = &vgafont8;
21034                       000051D6            .152:
21035                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21036 51D6           BB                   0F6A  mov	bx,#_vgafont8
21037 51D9           895E         FA            mov	-6[bp],bx
21038                                           !BCC_EOS
21039                                           ! 2456   }
21040                                           ! 2457  addr=xcurs+ycurs*cheight*nbcols;
21041 51DC           EB           0A            jmp .14D
21042                       000051DE            .14F:
21043 51DE           2C                     0E  sub	al,*$E
21044 51E0           74           E4            je 	.150
21045 51E2           2C                     02  sub	al,*2
21046 51E4           74           E8            je 	.151
21047 51E6           EB           EE            jmp	.152
21048                       000051E8            .14D:
21049                       FFFFFFF2            ..FFFB	=	-$E
21050                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
21051 51E8           8A46         0E            mov	al,$E[bp]
21052 51EB           30E4                       xor	ah,ah
21053 51ED           89C3                       mov	bx,ax
21054 51EF           8A46         0A            mov	al,$A[bp]
21055 51F2           30E4                       xor	ah,ah
21056 51F4           89D9                       mov	cx,bx
21057 51F6           F7E9                       imul	cx
21058                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
21059 51F8           89C3                       mov	bx,ax
21060 51FA           8A46         0C            mov	al,$C[bp]
21061 51FD           30E4                       xor	ah,ah
21062 51FF           93                         xchg	ax,bx
21063 5200           89D9                       mov	cx,bx
21064 5202           F7E9                       imul	cx
21065                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
21066                                           ! Debug: expression subtree swapping
21067 5204           0246         08            add	al,8[bp]
21068 5207           80D4                   00  adc	ah,*0
21069                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21070 520A           8946         F8            mov	-8[bp],ax
21071                                           !BCC_EOS
21072                                           ! 2458  src = car * cheight;
21073                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
21074 520D           8A46         0E            mov	al,$E[bp]
21075 5210           30E4                       xor	ah,ah
21076 5212           89C3                       mov	bx,ax
21077 5214           8A46         04            mov	al,4[bp]
21078 5217           30E4                       xor	ah,ah
21079 5219           89D9                       mov	cx,bx
21080 521B           F7E9                       imul	cx
21081                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21082 521D           8946         F4            mov	-$C[bp],ax
21083                                           !BCC_EOS
21084                                           ! 2459  outw(0x3c4, 0x0f02);
21085                                           ! Debug: list int = const $F02 (used reg = )
21086 5220           B8                   0F02  mov	ax,#$F02
21087 5223           50                         push	ax
21088                                           ! Debug: list int = const $3C4 (used reg = )
21089 5224           B8                   03C4  mov	ax,#$3C4
21090 5227           50                         push	ax
21091                                           ! Debug: func () void = outw+0 (used reg = )
21092 5228           E8         2B8B            call	_outw
21093 522B           83C4                   04  add	sp,*4
21094                                           !BCC_EOS
21095                                           ! 2460  outw(0x3ce, 0x0205);
21096                                           ! Debug: list int = const $205 (used reg = )
21097 522E           B8                   0205  mov	ax,#$205
21098 5231           50                         push	ax
21099                                           ! Debug: list int = const $3CE (used reg = )
21100 5232           B8                   03CE  mov	ax,#$3CE
21101 5235           50                         push	ax
21102                                           ! Debug: func () void = outw+0 (used reg = )
21103 5236           E8         2B7D            call	_outw
21104 5239           83C4                   04  add	sp,*4
21105                                           !BCC_EOS
21106                                           ! 2461  if(attr&0x80)
21107                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21108 523C           8A46         06            mov	al,6[bp]
21109 523F           24                     80  and	al,#$80
21110 5241           84C0                       test	al,al
21111 5243           74           10            je  	.153
21112                       00005245            .154:
21113                                           ! 2462   {
21114                                           ! 2463    outw(0x3ce, 0x1803);
21115                                           ! Debug: list int = const $1803 (used reg = )
21116 5245           B8                   1803  mov	ax,#$1803
21117 5248           50                         push	ax
21118                                           ! Debug: list int = const $3CE (used reg = )
21119 5249           B8                   03CE  mov	ax,#$3CE
21120 524C           50                         push	ax
21121                                           ! Debug: func () void = outw+0 (used reg = )
21122 524D           E8         2B66            call	_outw
21123 5250           83C4                   04  add	sp,*4
21124                                           !BCC_EOS
21125                                           ! 2464   }
21126                                           ! 2465  else
21127                                           ! 2466   {
21128 5253           EB           0E            jmp .155
21129                       00005255            .153:
21130                                           ! 2467    outw(0x3ce, 0x0003);
21131                                           ! Debug: list int = const 3 (used reg = )
21132 5255           B8                   0003  mov	ax,*3
21133 5258           50                         push	ax
21134                                           ! Debug: list int = const $3CE (used reg = )
21135 5259           B8                   03CE  mov	ax,#$3CE
21136 525C           50                         push	ax
21137                                           ! Debug: func () void = outw+0 (used reg = )
21138 525D           E8         2B56            call	_outw
21139 5260           83C4                   04  add	sp,*4
21140                                           !BCC_EOS
21141                                           ! 2468   }
21142                                           ! 2469  for(i=0;i<cheight;i++)
21143                       00005263            .155:
21144                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21145 5263           30C0                       xor	al,al
21146 5265           8846         FF            mov	-1[bp],al
21147                                           !BCC_EOS
21148                                           !BCC_EOS
21149                                           ! 2470   {
21150 5268           E9         00A6            br 	.158
21151                       0000526B            .159:
21152                                           ! 2471    dest=addr+i*nbcols;
21153                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21154 526B           8A46         0C            mov	al,$C[bp]
21155 526E           30E4                       xor	ah,ah
21156 5270           89C3                       mov	bx,ax
21157 5272           8A46         FF            mov	al,-1[bp]
21158 5275           30E4                       xor	ah,ah
21159 5277           89D9                       mov	cx,bx
21160 5279           F7E9                       imul	cx
21161                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21162                                           ! Debug: expression subtree swapping
21163 527B           0346         F8            add	ax,-8[bp]
21164                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21165 527E           8946         F6            mov	-$A[bp],ax
21166                                           !BCC_EOS
21167                                           ! 2472    for(j=0;j<8;j++)
21168                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21169 5281           30C0                       xor	al,al
21170 5283           8846         FE            mov	-2[bp],al
21171                                           !BCC_EOS
21172                                           !BCC_EOS
21173                                           ! 2473     {
21174 5286           EB           79            jmp .15C
21175                       00005288            .15D:
21176                                           ! 2474      mask=0x80>>j;
21177                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21178 5288           8A46         FE            mov	al,-2[bp]
21179 528B           30E4                       xor	ah,ah
21180 528D           89C3                       mov	bx,ax
21181 528F           B8                   0080  mov	ax,#$80
21182 5292           89D9                       mov	cx,bx
21183 5294           D3F8                       sar	ax,cl
21184                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21185 5296           8846         FD            mov	-3[bp],al
21186                                           !BCC_EOS
21187                                           ! 2475      outw(0x3ce, (mask << 8) | 0x08);
21188                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21189 5299           8A46         FD            mov	al,-3[bp]
21190 529C           30E4                       xor	ah,ah
21191 529E           88C4                       mov	ah,al
21192 52A0           30C0                       xor	al,al
21193                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21194 52A2           0C                     08  or	al,*8
21195                                           ! Debug: list unsigned int = ax+0 (used reg = )
21196 52A4           50                         push	ax
21197                                           ! Debug: list int = const $3CE (used reg = )
21198 52A5           B8                   03CE  mov	ax,#$3CE
21199 52A8           50                         push	ax
21200                                           ! Debug: func () void = outw+0 (used reg = )
21201 52A9           E8         2B0A            call	_outw
21202 52AC           83C4                   04  add	sp,*4
21203                                           !BCC_EOS
21204                                           ! 2476      read_byte(0xa000,dest);
21205                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21206 52AF           FF76         F6            push	-$A[bp]
21207                                           ! Debug: list unsigned int = const $A000 (used reg = )
21208 52B2           B8                   A000  mov	ax,#$A000
21209 52B5           50                         push	ax
21210                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21211 52B6           E8         2A81            call	_read_byte
21212 52B9           83C4                   04  add	sp,*4
21213                                           !BCC_EOS
21214                                           ! 2477      if(fdata[src+i]&mask)
21215                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21216 52BC           8B46         F4            mov	ax,-$C[bp]
21217 52BF           0246         FF            add	al,-1[bp]
21218 52C2           80D4                   00  adc	ah,*0
21219                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21220 52C5           0346         FA            add	ax,-6[bp]
21221 52C8           89C3                       mov	bx,ax
21222                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21223 52CA           8A07                       mov	al,[bx]
21224 52CC           2246         FD            and	al,-3[bp]
21225 52CF           84C0                       test	al,al
21226 52D1           74           17            je  	.15E
21227                       000052D3            .15F:
21228                                           ! 2478       {
21229                                           ! 2479        write_byte(0xa000,dest,attr&0x0f);
21230                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21231 52D3           8A46         06            mov	al,6[bp]
21232 52D6           24                     0F  and	al,*$F
21233                                           ! Debug: list unsigned char = al+0 (used reg = )
21234 52D8           30E4                       xor	ah,ah
21235 52DA           50                         push	ax
21236                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21237 52DB           FF76         F6            push	-$A[bp]
21238                                           ! Debug: list unsigned int = const $A000 (used reg = )
21239 52DE           B8                   A000  mov	ax,#$A000
21240 52E1           50                         push	ax
21241                                           ! Debug: func () void = write_byte+0 (used reg = )
21242 52E2           E8         2A7B            call	_write_byte
21243 52E5           83C4                   06  add	sp,*6
21244                                           !BCC_EOS
21245                                           ! 2480       }
21246                                           ! 2481      else
21247                                           ! 2482       {
21248 52E8           EB           10            jmp .160
21249                       000052EA            .15E:
21250                                           ! 2483        write_byte(0xa000,dest,0x00);
21251                                           ! Debug: list int = const 0 (used reg = )
21252 52EA           31C0                       xor	ax,ax
21253 52EC           50                         push	ax
21254                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21255 52ED           FF76         F6            push	-$A[bp]
21256                                           ! Debug: list unsigned int = const $A000 (used reg = )
21257 52F0           B8                   A000  mov	ax,#$A000
21258 52F3           50                         push	ax
21259                                           ! Debug: func () void = write_byte+0 (used reg = )
21260 52F4           E8         2A69            call	_write_byte
21261 52F7           83C4                   06  add	sp,*6
21262                                           !BCC_EOS
21263                                           ! 2484       }
21264                                           ! 2485     }
21265                       000052FA            .160:
21266                                           ! 2486   }
21267                       000052FA            .15B:
21268                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21269 52FA           8A46         FE            mov	al,-2[bp]
21270 52FD           40                         inc	ax
21271 52FE           8846         FE            mov	-2[bp],al
21272                       00005301            .15C:
21273                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21274 5301           8A46         FE            mov	al,-2[bp]
21275 5304           3C                     08  cmp	al,*8
21276 5306         0F82         FF7E            blo 	.15D
21277                       0000530A            .161:
21278                       0000530A            .15A:
21279                                           ! 2487 #asm
21280                       0000530A            .157:
21281                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21282 530A           8A46         FF            mov	al,-1[bp]
21283 530D           40                         inc	ax
21284 530E           8846         FF            mov	-1[bp],al
21285                       00005311            .158:
21286                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21287 5311           8A46         FF            mov	al,-1[bp]
21288 5314           3A46         0E            cmp	al,$E[bp]
21289 5317         0F82         FF50            blo 	.159
21290                       0000531B            .162:
21291                       0000531B            .156:
21292                                           !BCC_EOS
21293                                           !BCC_ASM
21294                       0000000A            _write_gfx_char_pl4.j	set	$A
21295                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21296                       00000006            _write_gfx_char_pl4.fdata	set	6
21297                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21298                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21299                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21300                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21301                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21302                       0000000B            _write_gfx_char_pl4.i	set	$B
21303                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21304                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21305                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21306                       00000009            _write_gfx_char_pl4.mask	set	9
21307                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21308                       00000002            _write_gfx_char_pl4.dest	set	2
21309                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21310                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21311                       00000008            .write_gfx_char_pl4.xcurs	set	8
21312                       00000000            _write_gfx_char_pl4.src	set	0
21313                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21314                       00000012            _write_gfx_char_pl4.attr	set	$12
21315                       00000006            .write_gfx_char_pl4.attr	set	6
21316                       00000010            _write_gfx_char_pl4.car	set	$10
21317                       00000004            .write_gfx_char_pl4.car	set	4
21318                       00000004            _write_gfx_char_pl4.addr	set	4
21319                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21320 531B           BA                   03CE    mov dx, # 0x3ce
21321 531E           B8                   FF08    mov ax, #0xff08
21322 5321           EF                           out dx, ax
21323 5322           B8                   0005    mov ax, #0x0005
21324 5325           EF                           out dx, ax
21325 5326           B8                   0003    mov ax, #0x0003
21326 5329           EF                           out dx, ax
21327                                           ! 2495 endasm
21328                                           !BCC_ENDASM
21329                                           !BCC_EOS
21330                                           ! 2496 }
21331 532A           89EC                       mov	sp,bp
21332 532C           5D                         pop	bp
21333 532D           C3                         ret
21334                                           ! 2497 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21335                                           ! Register BX used in function write_gfx_char_pl4
21336                                           ! 2498 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21337                       0000532E            _write_gfx_char_cga:
21338                                           !BCC_EOS
21339                                           !BCC_EOS
21340                                           !BCC_EOS
21341                                           !BCC_EOS
21342                                           !BCC_EOS
21343                                           !BCC_EOS
21344                                           ! 2499 {
21345                                           ! 2500  Bit8u i,j,mask,data;
21346                                           !BCC_EOS
21347                                           ! 2501  Bit8u *fdata;
21348                                           !BCC_EOS
21349                                           ! 2502  Bit16u addr,dest,src;
21350                                           !BCC_EOS
21351                                           ! 2503  fdata = &vgafont8;
21352 532E           55                         push	bp
21353 532F           89E5                       mov	bp,sp
21354 5331           83C4                   F4  add	sp,*-$C
21355                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21356 5334           BB                   0F6A  mov	bx,#_vgafont8
21357 5337           895E         FA            mov	-6[bp],bx
21358                                           !BCC_EOS
21359                                           ! 2504  addr=(xcurs*bpp)+ycurs*320;
21360                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21361 533A           8A46         0A            mov	al,$A[bp]
21362 533D           30E4                       xor	ah,ah
21363 533F           B9                   0140  mov	cx,#$140
21364 5342           F7E9                       imul	cx
21365 5344           50                         push	ax
21366                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21367 5345           8A46         0E            mov	al,$E[bp]
21368 5348           30E4                       xor	ah,ah
21369 534A           89C3                       mov	bx,ax
21370 534C           8A46         08            mov	al,8[bp]
21371 534F           30E4                       xor	ah,ah
21372 5351           89D9                       mov	cx,bx
21373 5353           F7E9                       imul	cx
21374                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21375 5355           0346         F2            add	ax,-$E[bp]
21376 5358           44                         inc	sp
21377 5359           44                         inc	sp
21378                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21379 535A           8946         F8            mov	-8[bp],ax
21380                                           !BCC_EOS
21381                                           ! 2505  src = car * 8;
21382                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21383 535D           8A46         04            mov	al,4[bp]
21384 5360           30E4                       xor	ah,ah
21385 5362           B1                     03  mov	cl,*3
21386 5364           D3E0                       shl	ax,cl
21387                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21388 5366           8946         F4            mov	-$C[bp],ax
21389                                           !BCC_EOS
21390                                           ! 2506  for(i=0;i<8;i++)
21391                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21392 5369           30C0                       xor	al,al
21393 536B           8846         FF            mov	-1[bp],al
21394                                           !BCC_EOS
21395                                           !BCC_EOS
21396                                           ! 2507   {
21397 536E           E9         01B3            br 	.165
21398                       00005371            .166:
21399                                           ! 2508    dest=addr+(i>>1)*80;
21400                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21401 5371           8A46         FF            mov	al,-1[bp]
21402 5374           30E4                       xor	ah,ah
21403 5376           D1E8                       shr	ax,*1
21404                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21405 5378           B9                   0050  mov	cx,*$50
21406 537B           F7E9                       imul	cx
21407                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21408                                           ! Debug: expression subtree swapping
21409 537D           0346         F8            add	ax,-8[bp]
21410                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21411 5380           8946         F6            mov	-$A[bp],ax
21412                                           !BCC_EOS
21413                                           ! 2509    if (i & 1) dest += 0x2000;
21414                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21415 5383           8A46         FF            mov	al,-1[bp]
21416 5386           24                     01  and	al,*1
21417 5388           84C0                       test	al,al
21418 538A           74           09            je  	.167
21419                       0000538C            .168:
21420                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21421 538C           8B46         F6            mov	ax,-$A[bp]
21422 538F           05                   2000  add	ax,#$2000
21423 5392           8946         F6            mov	-$A[bp],ax
21424                                           !BCC_EOS
21425                                           ! 2510    mask = 0x80;
21426                       00005395            .167:
21427                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21428 5395           B0                     80  mov	al,#$80
21429 5397           8846         FD            mov	-3[bp],al
21430                                           !BCC_EOS
21431                                           ! 2511    if (bpp == 1)
21432                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21433 539A           8A46         0E            mov	al,$E[bp]
21434 539D           3C                     01  cmp	al,*1
21435 539F         0F85         00B3            bne 	.169
21436                       000053A3            .16A:
21437                                           ! 2512     {
21438                                           ! 2513      if (attr & 0x80)
21439                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21440 53A3           8A46         06            mov	al,6[bp]
21441 53A6           24                     80  and	al,#$80
21442 53A8           84C0                       test	al,al
21443 53AA           74           12            je  	.16B
21444                       000053AC            .16C:
21445                                           ! 2514       {
21446                                           ! 2515        data = read_byte(0xb800,dest);
21447                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21448 53AC           FF76         F6            push	-$A[bp]
21449                                           ! Debug: list unsigned int = const $B800 (used reg = )
21450 53AF           B8                   B800  mov	ax,#$B800
21451 53B2           50                         push	ax
21452                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21453 53B3           E8         2984            call	_read_byte
21454 53B6           83C4                   04  add	sp,*4
21455                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21456 53B9           8846         FC            mov	-4[bp],al
21457                                           !BCC_EOS
21458                                           ! 2516       }
21459                                           ! 2517      else
21460                                           ! 2518       {
21461 53BC           EB           05            jmp .16D
21462                       000053BE            .16B:
21463                                           ! 2519        data = 0x00;
21464                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21465 53BE           30C0                       xor	al,al
21466 53C0           8846         FC            mov	-4[bp],al
21467                                           !BCC_EOS
21468                                           ! 2520       }
21469                                           ! 2521      for(j=0;j<8;j++)
21470                       000053C3            .16D:
21471                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21472 53C3           30C0                       xor	al,al
21473 53C5           8846         FE            mov	-2[bp],al
21474                                           !BCC_EOS
21475                                           !BCC_EOS
21476                                           ! 2522       {
21477 53C8           EB           6F            jmp .170
21478                       000053CA            .171:
21479                                           ! 2523        if (fdata[src+i] & mask)
21480                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21481 53CA           8B46         F4            mov	ax,-$C[bp]
21482 53CD           0246         FF            add	al,-1[bp]
21483 53D0           80D4                   00  adc	ah,*0
21484                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21485 53D3           0346         FA            add	ax,-6[bp]
21486 53D6           89C3                       mov	bx,ax
21487                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21488 53D8           8A07                       mov	al,[bx]
21489 53DA           2246         FD            and	al,-3[bp]
21490 53DD           84C0                       test	al,al
21491 53DF           74           47            je  	.172
21492                       000053E1            .173:
21493                                           ! 2524         {
21494                                           ! 2525          if (attr & 0x80)
21495                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21496 53E1           8A46         06            mov	al,6[bp]
21497 53E4           24                     80  and	al,#$80
21498 53E6           84C0                       test	al,al
21499 53E8           74           20            je  	.174
21500                       000053EA            .175:
21501                                           ! 2526           {
21502                                           ! 2527            data ^= (attr & 0x01) << (7-j);
21503                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21504 53EA           B8                   0007  mov	ax,*7
21505 53ED           2A46         FE            sub	al,-2[bp]
21506 53F0           80DC                   00  sbb	ah,*0
21507 53F3           50                         push	ax
21508                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21509 53F4           8A46         06            mov	al,6[bp]
21510 53F7           24                     01  and	al,*1
21511                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21512 53F9           30E4                       xor	ah,ah
21513 53FB           8B4E         F2            mov	cx,-$E[bp]
21514 53FE           D3E0                       shl	ax,cl
21515 5400           44                         inc	sp
21516 5401           44                         inc	sp
21517                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21518 5402           3246         FC            xor	al,-4[bp]
21519 5405           8846         FC            mov	-4[bp],al
21520                                           !BCC_EOS
21521                                           ! 2528           }
21522                                           ! 2529          else
21523                                           ! 2530           {
21524 5408           EB           1E            jmp .176
21525                       0000540A            .174:
21526                                           ! 2531            data |= (attr & 0x01) << (7-j);
21527                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21528 540A           B8                   0007  mov	ax,*7
21529 540D           2A46         FE            sub	al,-2[bp]
21530 5410           80DC                   00  sbb	ah,*0
21531 5413           50                         push	ax
21532                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21533 5414           8A46         06            mov	al,6[bp]
21534 5417           24                     01  and	al,*1
21535                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21536 5419           30E4                       xor	ah,ah
21537 541B           8B4E         F2            mov	cx,-$E[bp]
21538 541E           D3E0                       shl	ax,cl
21539 5420           44                         inc	sp
21540 5421           44                         inc	sp
21541                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21542 5422           0A46         FC            or	al,-4[bp]
21543 5425           8846         FC            mov	-4[bp],al
21544                                           !BCC_EOS
21545                                           ! 2532           }
21546                                           ! 2533         }
21547                       00005428            .176:
21548                                           ! 2534        mask >>= 1;
21549                       00005428            .172:
21550                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21551 5428           8A46         FD            mov	al,-3[bp]
21552 542B           30E4                       xor	ah,ah
21553 542D           D1E8                       shr	ax,*1
21554 542F           8846         FD            mov	-3[bp],al
21555                                           !BCC_EOS
21556                                           ! 2535       }
21557                                           ! 2536      write_byte(0xb800,dest,data);
21558                       00005432            .16F:
21559                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21560 5432           8A46         FE            mov	al,-2[bp]
21561 5435           40                         inc	ax
21562 5436           8846         FE            mov	-2[bp],al
21563                       00005439            .170:
21564                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21565 5439           8A46         FE            mov	al,-2[bp]
21566 543C           3C                     08  cmp	al,*8
21567 543E           72           8A            jb 	.171
21568                       00005440            .177:
21569                       00005440            .16E:
21570                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21571 5440           8A46         FC            mov	al,-4[bp]
21572 5443           30E4                       xor	ah,ah
21573 5445           50                         push	ax
21574                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21575 5446           FF76         F6            push	-$A[bp]
21576                                           ! Debug: list unsigned int = const $B800 (used reg = )
21577 5449           B8                   B800  mov	ax,#$B800
21578 544C           50                         push	ax
21579                                           ! Debug: func () void = write_byte+0 (used reg = )
21580 544D           E8         2910            call	_write_byte
21581 5450           83C4                   06  add	sp,*6
21582                                           !BCC_EOS
21583                                           ! 2537     }
21584                                           ! 2538    else
21585                                           ! 2539     {
21586 5453           E9         00C7            br 	.178
21587                       00005456            .169:
21588                                           ! 2540      while (mask > 0)
21589                                           ! 2541       {
21590 5456           E9         00BB            br 	.17A
21591                       00005459            .17B:
21592                                           ! 2542        if (attr & 0x80)
21593                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21594 5459           8A46         06            mov	al,6[bp]
21595 545C           24                     80  and	al,#$80
21596 545E           84C0                       test	al,al
21597 5460           74           12            je  	.17C
21598                       00005462            .17D:
21599                                           ! 2543         {
21600                                           ! 2544          data = read_byte(0xb800,dest);
21601                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21602 5462           FF76         F6            push	-$A[bp]
21603                                           ! Debug: list unsigned int = const $B800 (used reg = )
21604 5465           B8                   B800  mov	ax,#$B800
21605 5468           50                         push	ax
21606                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21607 5469           E8         28CE            call	_read_byte
21608 546C           83C4                   04  add	sp,*4
21609                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21610 546F           8846         FC            mov	-4[bp],al
21611                                           !BCC_EOS
21612                                           ! 2545         }
21613                                           ! 2546        else
21614                                           ! 2547         {
21615 5472           EB           05            jmp .17E
21616                       00005474            .17C:
21617                                           ! 2548          data = 0x00;
21618                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21619 5474           30C0                       xor	al,al
21620 5476           8846         FC            mov	-4[bp],al
21621                                           !BCC_EOS
21622                                           ! 2549         }
21623                                           ! 2550        for(j=0;j<4;j++)
21624                       00005479            .17E:
21625                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21626 5479           30C0                       xor	al,al
21627 547B           8846         FE            mov	-2[bp],al
21628                                           !BCC_EOS
21629                                           !BCC_EOS
21630                                           ! 2551         {
21631 547E           EB           73            jmp .181
21632                       00005480            .182:
21633                                           ! 2552          if (fdata[src+i] & mask)
21634                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21635 5480           8B46         F4            mov	ax,-$C[bp]
21636 5483           0246         FF            add	al,-1[bp]
21637 5486           80D4                   00  adc	ah,*0
21638                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21639 5489           0346         FA            add	ax,-6[bp]
21640 548C           89C3                       mov	bx,ax
21641                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21642 548E           8A07                       mov	al,[bx]
21643 5490           2246         FD            and	al,-3[bp]
21644 5493           84C0                       test	al,al
21645 5495           74           4B            je  	.183
21646                       00005497            .184:
21647                                           ! 2553           {
21648                                           ! 2554            if (attr & 0x80)
21649                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21650 5497           8A46         06            mov	al,6[bp]
21651 549A           24                     80  and	al,#$80
21652 549C           84C0                       test	al,al
21653 549E           74           22            je  	.185
21654                       000054A0            .186:
21655                                           ! 2555             {
21656                                           ! 2556              data ^= (attr & 0x03) << ((3-j)*2);
21657                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21658 54A0           B8                   0003  mov	ax,*3
21659 54A3           2A46         FE            sub	al,-2[bp]
21660 54A6           80DC                   00  sbb	ah,*0
21661                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21662 54A9           D1E0                       shl	ax,*1
21663 54AB           50                         push	ax
21664                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21665 54AC           8A46         06            mov	al,6[bp]
21666 54AF           24                     03  and	al,*3
21667                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21668 54B1           30E4                       xor	ah,ah
21669 54B3           8B4E         F2            mov	cx,-$E[bp]
21670 54B6           D3E0                       shl	ax,cl
21671 54B8           44                         inc	sp
21672 54B9           44                         inc	sp
21673                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21674 54BA           3246         FC            xor	al,-4[bp]
21675 54BD           8846         FC            mov	-4[bp],al
21676                                           !BCC_EOS
21677                                           ! 2557             }
21678                                           ! 2558            else
21679                                           ! 2559             {
21680 54C0           EB           20            jmp .187
21681                       000054C2            .185:
21682                                           ! 2560              data |= (attr & 0x03) << ((3-j)*2);
21683                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21684 54C2           B8                   0003  mov	ax,*3
21685 54C5           2A46         FE            sub	al,-2[bp]
21686 54C8           80DC                   00  sbb	ah,*0
21687                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21688 54CB           D1E0                       shl	ax,*1
21689 54CD           50                         push	ax
21690                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21691 54CE           8A46         06            mov	al,6[bp]
21692 54D1           24                     03  and	al,*3
21693                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21694 54D3           30E4                       xor	ah,ah
21695 54D5           8B4E         F2            mov	cx,-$E[bp]
21696 54D8           D3E0                       shl	ax,cl
21697 54DA           44                         inc	sp
21698 54DB           44                         inc	sp
21699                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21700 54DC           0A46         FC            or	al,-4[bp]
21701 54DF           8846         FC            mov	-4[bp],al
21702                                           !BCC_EOS
21703                                           ! 2561             }
21704                                           ! 2562           }
21705                       000054E2            .187:
21706                                           ! 2563          mask >>= 1;
21707                       000054E2            .183:
21708                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21709 54E2           8A46         FD            mov	al,-3[bp]
21710 54E5           30E4                       xor	ah,ah
21711 54E7           D1E8                       shr	ax,*1
21712 54E9           8846         FD            mov	-3[bp],al
21713                                           !BCC_EOS
21714                                           ! 2564         }
21715                                           ! 2565        write_byte(0xb800,dest,d
21716                       000054EC            .180:
21717                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21718 54EC           8A46         FE            mov	al,-2[bp]
21719 54EF           40                         inc	ax
21720 54F0           8846         FE            mov	-2[bp],al
21721                       000054F3            .181:
21722                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21723 54F3           8A46         FE            mov	al,-2[bp]
21724 54F6           3C                     04  cmp	al,*4
21725 54F8           72           86            jb 	.182
21726                       000054FA            .188:
21727                       000054FA            .17F:
21728                                           ! 2565 ata);
21729                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21730 54FA           8A46         FC            mov	al,-4[bp]
21731 54FD           30E4                       xor	ah,ah
21732 54FF           50                         push	ax
21733                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21734 5500           FF76         F6            push	-$A[bp]
21735                                           ! Debug: list unsigned int = const $B800 (used reg = )
21736 5503           B8                   B800  mov	ax,#$B800
21737 5506           50                         push	ax
21738                                           ! Debug: func () void = write_byte+0 (used reg = )
21739 5507           E8         2856            call	_write_byte
21740 550A           83C4                   06  add	sp,*6
21741                                           !BCC_EOS
21742                                           ! 2566        dest += 1;
21743                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21744 550D           8B46         F6            mov	ax,-$A[bp]
21745 5510           40                         inc	ax
21746 5511           8946         F6            mov	-$A[bp],ax
21747                                           !BCC_EOS
21748                                           ! 2567       }
21749                                           ! 2568     }
21750                       00005514            .17A:
21751                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21752 5514           8A46         FD            mov	al,-3[bp]
21753 5517           84C0                       test	al,al
21754 5519         0F85         FF3C            bne 	.17B
21755                       0000551D            .189:
21756                       0000551D            .179:
21757                                           ! 2569   }
21758                       0000551D            .178:
21759                                           ! 2570 }
21760                       0000551D            .164:
21761                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21762 551D           8A46         FF            mov	al,-1[bp]
21763 5520           40                         inc	ax
21764 5521           8846         FF            mov	-1[bp],al
21765                       00005524            .165:
21766                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21767 5524           8A46         FF            mov	al,-1[bp]
21768 5527           3C                     08  cmp	al,*8
21769 5529         0F82         FE44            blo 	.166
21770                       0000552D            .18A:
21771                       0000552D            .163:
21772 552D           89EC                       mov	sp,bp
21773 552F           5D                         pop	bp
21774 5530           C3                         ret
21775                                           ! 2571 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21776                                           ! Register BX used in function write_gfx_char_cga
21777                                           ! 2572 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21778                       00005531            _write_gfx_char_lin:
21779                                           !BCC_EOS
21780                                           !BCC_EOS
21781                                           !BCC_EOS
21782                                           !BCC_EOS
21783                                           !BCC_EOS
21784                                           ! 2573 {
21785                                           ! 2574  Bit8u i,j,mask,data;
21786                                           !BCC_EOS
21787                                           ! 2575  Bit8u *fdata;
21788                                           !BCC_EOS
21789                                           ! 2576  Bit16u addr,dest,src;
21790                                           !BCC_EOS
21791                                           ! 2577  fdata = &vgafont8;
21792 5531           55                         push	bp
21793 5532           89E5                       mov	bp,sp
21794 5534           83C4                   F4  add	sp,*-$C
21795                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21796 5537           BB                   0F6A  mov	bx,#_vgafont8
21797 553A           895E         FA            mov	-6[bp],bx
21798                                           !BCC_EOS
21799                                           ! 2578  addr=xcurs*8+ycurs*nbcols*64;
21800                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21801 553D           8A46         0C            mov	al,$C[bp]
21802 5540           30E4                       xor	ah,ah
21803 5542           89C3                       mov	bx,ax
21804 5544           8A46         0A            mov	al,$A[bp]
21805 5547           30E4                       xor	ah,ah
21806 5549           89D9                       mov	cx,bx
21807 554B           F7E9                       imul	cx
21808                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21809 554D           B1                     06  mov	cl,*6
21810 554F           D3E0                       shl	ax,cl
21811 5551           50                         push	ax
21812                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21813 5552           8A46         08            mov	al,8[bp]
21814 5555           30E4                       xor	ah,ah
21815 5557           B1                     03  mov	cl,*3
21816 5559           D3E0                       shl	ax,cl
21817                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21818 555B           0346         F2            add	ax,-$E[bp]
21819 555E           44                         inc	sp
21820 555F           44                         inc	sp
21821                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21822 5560           8946         F8            mov	-8[bp],ax
21823                                           !BCC_EOS
21824                                           ! 2579  src = car * 8;
21825                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21826 5563           8A46         04            mov	al,4[bp]
21827 5566           30E4                       xor	ah,ah
21828 5568           B1                     03  mov	cl,*3
21829 556A           D3E0                       shl	ax,cl
21830                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21831 556C           8946         F4            mov	-$C[bp],ax
21832                                           !BCC_EOS
21833                                           ! 2580  for(i=0;i<8;i++)
21834                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21835 556F           30C0                       xor	al,al
21836 5571           8846         FF            mov	-1[bp],al
21837                                           !BCC_EOS
21838                                           !BCC_EOS
21839                                           ! 2581   {
21840 5574           E9         0081            br 	.18D
21841                       00005577            .18E:
21842                                           ! 2582    dest=addr+i*nbcols*8;
21843                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21844 5577           8A46         0C            mov	al,$C[bp]
21845 557A           30E4                       xor	ah,ah
21846 557C           89C3                       mov	bx,ax
21847 557E           8A46         FF            mov	al,-1[bp]
21848 5581           30E4                       xor	ah,ah
21849 5583           89D9                       mov	cx,bx
21850 5585           F7E9                       imul	cx
21851                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21852 5587           B1                     03  mov	cl,*3
21853 5589           D3E0                       shl	ax,cl
21854                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21855                                           ! Debug: expression subtree swapping
21856 558B           0346         F8            add	ax,-8[bp]
21857                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21858 558E           8946         F6            mov	-$A[bp],ax
21859                                           !BCC_EOS
21860                                           ! 2583    mask = 0x80;
21861                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21862 5591           B0                     80  mov	al,#$80
21863 5593           8846         FD            mov	-3[bp],al
21864                                           !BCC_EOS
21865                                           ! 2584    for(j=0;j<8;j++)
21866                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21867 5596           30C0                       xor	al,al
21868 5598           8846         FE            mov	-2[bp],al
21869                                           !BCC_EOS
21870                                           !BCC_EOS
21871                                           ! 2585     {
21872 559B           EB           4D            jmp .191
21873                       0000559D            .192:
21874                                           ! 2586      data = 0x00;
21875                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21876 559D           30C0                       xor	al,al
21877 559F           8846         FC            mov	-4[bp],al
21878                                           !BCC_EOS
21879                                           ! 2587      if (fdata[src+i] & mask)
21880                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21881 55A2           8B46         F4            mov	ax,-$C[bp]
21882 55A5           0246         FF            add	al,-1[bp]
21883 55A8           80D4                   00  adc	ah,*0
21884                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21885 55AB           0346         FA            add	ax,-6[bp]
21886 55AE           89C3                       mov	bx,ax
21887                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21888 55B0           8A07                       mov	al,[bx]
21889 55B2           2246         FD            and	al,-3[bp]
21890 55B5           84C0                       test	al,al
21891 55B7           74           06            je  	.193
21892                       000055B9            .194:
21893                                           ! 2588       {
21894                                           ! 2589        data = attr;
21895                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21896 55B9           8A46         06            mov	al,6[bp]
21897 55BC           8846         FC            mov	-4[bp],al
21898                                           !BCC_EOS
21899                                           ! 2590       }
21900                                           ! 2591      write_byte(0xa000,dest+j,data);
21901                       000055BF            .193:
21902                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21903 55BF           8A46         FC            mov	al,-4[bp]
21904 55C2           30E4                       xor	ah,ah
21905 55C4           50                         push	ax
21906                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21907 55C5           8B46         F6            mov	ax,-$A[bp]
21908 55C8           0246         FE            add	al,-2[bp]
21909 55CB           80D4                   00  adc	ah,*0
21910                                           ! Debug: list unsigned int = ax+0 (used reg = )
21911 55CE           50                         push	ax
21912                                           ! Debug: list unsigned int = const $A000 (used reg = )
21913 55CF           B8                   A000  mov	ax,#$A000
21914 55D2           50                         push	ax
21915                                           ! Debug: func () void = write_byte+0 (used reg = )
21916 55D3           E8         278A            call	_write_byte
21917 55D6           83C4                   06  add	sp,*6
21918                                           !BCC_EOS
21919                                           ! 2592      mask >>= 1;
21920                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21921 55D9           8A46         FD            mov	al,-3[bp]
21922 55DC           30E4                       xor	ah,ah
21923 55DE           D1E8                       shr	ax,*1
21924 55E0           8846         FD            mov	-3[bp],al
21925                                           !BCC_EOS
21926                                           ! 2593     }
21927                                           ! 2594   }
21928                       000055E3            .190:
21929                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21930 55E3           8A46         FE            mov	al,-2[bp]
21931 55E6           40                         inc	ax
21932 55E7           8846         FE            mov	-2[bp],al
21933                       000055EA            .191:
21934                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21935 55EA           8A46         FE            mov	al,-2[bp]
21936 55ED           3C                     08  cmp	al,*8
21937 55EF           72           AC            jb 	.192
21938                       000055F1            .195:
21939                       000055F1            .18F:
21940                                           ! 2595 }
21941                       000055F1            .18C:
21942                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21943 55F1           8A46         FF            mov	al,-1[bp]
21944 55F4           40                         inc	ax
21945 55F5           8846         FF            mov	-1[bp],al
21946                       000055F8            .18D:
21947                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21948 55F8           8A46         FF            mov	al,-1[bp]
21949 55FB           3C                     08  cmp	al,*8
21950 55FD         0F82         FF76            blo 	.18E
21951                       00005601            .196:
21952                       00005601            .18B:
21953 5601           89EC                       mov	sp,bp
21954 5603           5D                         pop	bp
21955 5604           C3                         ret
21956                                           ! 2596 static void biosfn_write_char_attr (car,page,attr,count)
21957                                           ! Register BX used in function write_gfx_char_lin
21958                                           ! 2597 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21959                       00005605            _biosfn_write_char_attr:
21960                                           !BCC_EOS
21961                                           !BCC_EOS
21962                                           !BCC_EOS
21963                                           !BCC_EOS
21964                                           ! 2598 {
21965                                           ! 2599  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21966                                           !BCC_EOS
21967                                           ! 2600  Bit16u nbcols,nbrows,address;
21968                                           !BCC_EOS
21969                                           ! 2601  Bit16u cursor,dummy;
21970                                           !BCC_EOS
21971                                           ! 2602  mode=read_byte(0x40,0x49);
21972 5605           55                         push	bp
21973 5606           89E5                       mov	bp,sp
21974 5608           83C4                   F0  add	sp,*-$10
21975                                           ! Debug: list int = const $49 (used reg = )
21976 560B           B8                   0049  mov	ax,*$49
21977 560E           50                         push	ax
21978                                           ! Debug: list int = const $40 (used reg = )
21979 560F           B8                   0040  mov	ax,*$40
21980 5612           50                         push	ax
21981                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21982 5613           E8         2724            call	_read_byte
21983 5616           83C4                   04  add	sp,*4
21984                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21985 5619           8846         FC            mov	-4[bp],al
21986                                           !BCC_EOS
21987                                           ! 2603  line=find_vga_entry(mode);
21988                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21989 561C           8A46         FC            mov	al,-4[bp]
21990 561F           30E4                       xor	ah,ah
21991 5621           50                         push	ax
21992                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21993 5622           E8         2629            call	_find_vga_entry
21994 5625           44                         inc	sp
21995 5626           44                         inc	sp
21996                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21997 5627           8846         FB            mov	-5[bp],al
21998                                           !BCC_EOS
21999                                           ! 2604  if(line==0xFF)return;
22000                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22001 562A           8A46         FB            mov	al,-5[bp]
22002 562D           3C                     FF  cmp	al,#$FF
22003 562F           75           04            jne 	.197
22004                       00005631            .198:
22005 5631           89EC                       mov	sp,bp
22006 5633           5D                         pop	bp
22007 5634           C3                         ret
22008                                           !BCC_EOS
22009                                           ! 2605  biosfn_get_cursor_pos(page,&dummy,&cursor);
22010                       00005635            .197:
22011                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22012 5635           8D5E         F2            lea	bx,-$E[bp]
22013 5638           53                         push	bx
22014                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22015 5639           8D5E         F0            lea	bx,-$10[bp]
22016 563C           53                         push	bx
22017                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22018 563D           8A46         06            mov	al,6[bp]
22019 5640           30E4                       xor	ah,ah
22020 5642           50                         push	ax
22021                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22022 5643           E8         EE3E            call	_biosfn_get_cursor_pos
22023 5646           83C4                   06  add	sp,*6
22024                                           !BCC_EOS
22025                                           ! 2606  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22026                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22027 5649           8A46         F2            mov	al,-$E[bp]
22028                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22029 564C           8846         FE            mov	-2[bp],al
22030                                           !BCC_EOS
22031                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22032 564F           8B46         F2            mov	ax,-$E[bp]
22033 5652           30C0                       xor	al,al
22034                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22035 5654           88E0                       mov	al,ah
22036 5656           30E4                       xor	ah,ah
22037                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22038 5658           8846         FD            mov	-3[bp],al
22039                                           !BCC_EOS
22040                                           ! 2607  nbrows=read_byte(0x40,0x84)+1;
22041                                           ! Debug: list int = const $84 (used reg = )
22042 565B           B8                   0084  mov	ax,#$84
22043 565E           50                         push	ax
22044                                           ! Debug: list int = const $40 (used reg = )
22045 565F           B8                   0040  mov	ax,*$40
22046 5662           50                         push	ax
22047                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22048 5663           E8         26D4            call	_read_byte
22049 5666           83C4                   04  add	sp,*4
22050                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22051 5669           30E4                       xor	ah,ah
22052                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22053 566B           40                         inc	ax
22054 566C           8946         F6            mov	-$A[bp],ax
22055                                           !BCC_EOS
22056                                           ! 2608  nbcols=read_word(0x40,0x4A);
22057                                           ! Debug: list int = const $4A (used reg = )
22058 566F           B8                   004A  mov	ax,*$4A
22059 5672           50                         push	ax
22060                                           ! Debug: list int = const $40 (used reg = )
22061 5673           B8                   0040  mov	ax,*$40
22062 5676           50                         push	ax
22063                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22064 5677           E8         26D3            call	_read_word
22065 567A           83C4                   04  add	sp,*4
22066                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22067 567D           8946         F8            mov	-8[bp],ax
22068                                           !BCC_EOS
22069                                           ! 2609  if(vga_modes[line].class==0x00)
22070                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22071 5680           8A46         FB            mov	al,-5[bp]
22072 5683           30E4                       xor	ah,ah
22073 5685           B1                     03  mov	cl,*3
22074 5687           D3E0                       shl	ax,cl
22075 5689           89C3                       mov	bx,ax
22076 568B           81C3                 0206  add	bx,#_vga_modes
22077                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22078 568F           8A47         01            mov	al,1[bx]
22079 5692           84C0                       test	al,al
22080 5694           75           6A            jne 	.199
22081                       00005696            .19A:
22082                                           ! 2610   {
22083                                           ! 2611    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22084                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22085 5696           8A46         FD            mov	al,-3[bp]
22086 5699           30E4                       xor	ah,ah
22087 569B           8B4E         F8            mov	cx,-8[bp]
22088 569E           F7E9                       imul	cx
22089                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22090                                           ! Debug: expression subtree swapping
22091 56A0           0246         FE            add	al,-2[bp]
22092 56A3           80D4                   00  adc	ah,*0
22093                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22094 56A6           D1E0                       shl	ax,*1
22095 56A8           50                         push	ax
22096                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22097 56A9           8B46         F8            mov	ax,-8[bp]
22098 56AC           8B4E         F6            mov	cx,-$A[bp]
22099 56AF           F7E9                       imul	cx
22100                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22101 56B1           D1E0                       shl	ax,*1
22102                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22103 56B3           0C                     FF  or	al,#$FF
22104                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22105                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22106 56B5           89C3                       mov	bx,ax
22107 56B7           8A46         06            mov	al,6[bp]
22108 56BA           30E4                       xor	ah,ah
22109 56BC           93                         xchg	ax,bx
22110 56BD           40                         inc	ax
22111 56BE           89D9                       mov	cx,bx
22112 56C0           F7E9                       imul	cx
22113                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22114 56C2           0346         EE            add	ax,-$12[bp]
22115 56C5           44                         inc	sp
22116 56C6           44                         inc	sp
22117                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22118 56C7           8946         F4            mov	-$C[bp],ax
22119                                           !BCC_EOS
22120                                           ! 2612    dummy=((Bit16u)attr<<8)+car;
22121                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
22122 56CA           8A46         08            mov	al,8[bp]
22123 56CD           30E4                       xor	ah,ah
22124                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
22125 56CF           88C4                       mov	ah,al
22126 56D1           30C0                       xor	al,al
22127                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
22128 56D3           0246         04            add	al,4[bp]
22129 56D6           80D4                   00  adc	ah,*0
22130                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
22131 56D9           8946         F0            mov	-$10[bp],ax
22132                                           !BCC_EOS
22133                                           ! 2613    memsetw(vga_modes[line].sstart,address,dummy,count);
22134                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
22135 56DC           FF76         0A            push	$A[bp]
22136                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
22137 56DF           FF76         F0            push	-$10[bp]
22138                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
22139 56E2           FF76         F4            push	-$C[bp]
22140                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
22141 56E5           8A46         FB            mov	al,-5[bp]
22142 56E8           30E4                       xor	ah,ah
22143 56EA           B1                     03  mov	cl,*3
22144 56EC           D3E0                       shl	ax,cl
22145 56EE           89C3                       mov	bx,ax
22146 56F0           81C3                 0206  add	bx,#_vga_modes
22147                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22148 56F4           FF77         04            push	4[bx]
22149                                           ! Debug: func () void = memsetw+0 (used reg = )
22150 56F7           E8         25BB            call	_memsetw
22151 56FA           83C4                   08  add	sp,*8
22152                                           !BCC_EOS
22153                                           ! 2614   }
22154                                           ! 2615  else
22155                                           ! 2616   {
22156 56FD           E9         00F8            br 	.19B
22157                       00005700            .199:
22158                                           ! 2617    cheight=video_param_table[line_to_vpti[line]].cheight;
22159                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22160 5700           8A46         FB            mov	al,-5[bp]
22161 5703           30E4                       xor	ah,ah
22162 5705           89C3                       mov	bx,ax
22163                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22164 5707           8A87       0286            mov	al,_line_to_vpti[bx]
22165 570B           30E4                       xor	ah,ah
22166 570D           B1                     06  mov	cl,*6
22167 570F           D3E0                       shl	ax,cl
22168 5711           89C3                       mov	bx,ax
22169 5713           81C3                 029A  add	bx,#_video_param_table
22170                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22171 5717           8A47         02            mov	al,2[bx]
22172 571A           8846         FF            mov	-1[bp],al
22173                                           !BCC_EOS
22174                                           ! 2618    bpp=vga_modes[line].pixbits;
22175                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22176 571D           8A46         FB            mov	al,-5[bp]
22177 5720           30E4                       xor	ah,ah
22178 5722           B1                     03  mov	cl,*3
22179 5724           D3E0                       shl	ax,cl
22180 5726           89C3                       mov	bx,ax
22181 5728           81C3                 0206  add	bx,#_vga_modes
22182                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22183 572C           8A47         03            mov	al,3[bx]
22184 572F           8846         FA            mov	-6[bp],al
22185                                           !BCC_EOS
22186                                           ! 2619    while((count-->0) && (xcurs<nbcols))
22187                                           ! 2620     {
22188 5732           E9         00AB            br 	.19D
22189                       00005735            .19E:
22190                                           ! 2621      switch(vga_modes[line].memmodel)
22191                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22192 5735           8A46         FB            mov	al,-5[bp]
22193 5738           30E4                       xor	ah,ah
22194 573A           B1                     03  mov	cl,*3
22195 573C           D3E0                       shl	ax,cl
22196 573E           89C3                       mov	bx,ax
22197 5740           81C3                 0206  add	bx,#_vga_modes
22198 5744           8A47         02            mov	al,2[bx]
22199                                           ! 2622       {
22200 5747           EB           7A            jmp .1A1
22201                                           ! 2623        case 0x04:
22202                                           ! 2624        case 0x03:
22203                       00005749            .1A2:
22204                                           ! 2625          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22205                       00005749            .1A3:
22206                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22207 5749           8A46         FF            mov	al,-1[bp]
22208 574C           30E4                       xor	ah,ah
22209 574E           50                         push	ax
22210                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22211 574F           FF76         F8            push	-8[bp]
22212                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22213 5752           8A46         FD            mov	al,-3[bp]
22214 5755           30E4                       xor	ah,ah
22215 5757           50                         push	ax
22216                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22217 5758           8A46         FE            mov	al,-2[bp]
22218 575B           30E4                       xor	ah,ah
22219 575D           50                         push	ax
22220                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22221 575E           8A46         08            mov	al,8[bp]
22222 5761           30E4                       xor	ah,ah
22223 5763           50                         push	ax
22224                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22225 5764           8A46         04            mov	al,4[bp]
22226 5767           30E4                       xor	ah,ah
22227 5769           50                         push	ax
22228                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22229 576A           E8         FA4E            call	_write_gfx_char_pl4
22230 576D           83C4                   0C  add	sp,*$C
22231                                           !BCC_EOS
22232                                           ! 2626          break;
22233 5770           EB           67            jmp .19F
22234                                           !BCC_EOS
22235                                           ! 2627        case 0x02:
22236                                           ! 2628          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22237                       00005772            .1A4:
22238                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22239 5772           8A46         FA            mov	al,-6[bp]
22240 5775           30E4                       xor	ah,ah
22241 5777           50                         push	ax
22242                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22243 5778           FF76         F8            push	-8[bp]
22244                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22245 577B           8A46         FD            mov	al,-3[bp]
22246 577E           30E4                       xor	ah,ah
22247 5780           50                         push	ax
22248                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22249 5781           8A46         FE            mov	al,-2[bp]
22250 5784           30E4                       xor	ah,ah
22251 5786           50                         push	ax
22252                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22253 5787           8A46         08            mov	al,8[bp]
22254 578A           30E4                       xor	ah,ah
22255 578C           50                         push	ax
22256                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22257 578D           8A46         04            mov	al,4[bp]
22258 5790           30E4                       xor	ah,ah
22259 5792           50                         push	ax
22260                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22261 5793           E8         FB98            call	_write_gfx_char_cga
22262 5796           83C4                   0C  add	sp,*$C
22263                                           !BCC_EOS
22264                                           ! 2629          break;
22265 5799           EB           3E            jmp .19F
22266                                           !BCC_EOS
22267                                           ! 2630        case 0x05:
22268                                           ! 2631          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22269                       0000579B            .1A5:
22270                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22271 579B           FF76         F8            push	-8[bp]
22272                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22273 579E           8A46         FD            mov	al,-3[bp]
22274 57A1           30E4                       xor	ah,ah
22275 57A3           50                         push	ax
22276                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22277 57A4           8A46         FE            mov	al,-2[bp]
22278 57A7           30E4                       xor	ah,ah
22279 57A9           50                         push	ax
22280                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22281 57AA           8A46         08            mov	al,8[bp]
22282 57AD           30E4                       xor	ah,ah
22283 57AF           50                         push	ax
22284                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22285 57B0           8A46         04            mov	al,4[bp]
22286 57B3           30E4                       xor	ah,ah
22287 57B5           50                         push	ax
22288                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22289 57B6           E8         FD78            call	_write_gfx_char_lin
22290 57B9           83C4                   0A  add	sp,*$A
22291                                           !BCC_EOS
22292                                           ! 2632          break;
22293 57BC           EB           1B            jmp .19F
22294                                           !BCC_EOS
22295                                           ! 2633        default:
22296                                           ! 2634          unimplemented();
22297                       000057BE            .1A6:
22298                                           ! Debug: func () void = unimplemented+0 (used reg = )
22299 57BE           E8         2608            call	_unimplemented
22300                                           !BCC_EOS
22301                                           ! 2635       }
22302                                           ! 2636      xcurs++;
22303 57C1           EB           16            jmp .19F
22304                       000057C3            .1A1:
22305 57C3           2C                     02  sub	al,*2
22306 57C5           74           AB            je 	.1A4
22307 57C7           2C                     01  sub	al,*1
22308 57C9         0F84         FF7C            beq 	.1A3
22309 57CD           2C                     01  sub	al,*1
22310 57CF         0F84         FF76            beq 	.1A2
22311 57D3           2C                     01  sub	al,*1
22312 57D5           74           C4            je 	.1A5
22313 57D7           EB           E5            jmp	.1A6
22314                       000057D9            .19F:
22315                       FFFFFFEE            ..FFFA	=	-$12
22316                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22317 57D9           8A46         FE            mov	al,-2[bp]
22318 57DC           40                         inc	ax
22319 57DD           8846         FE            mov	-2[bp],al
22320                                           !BCC_EOS
22321                                           ! 2637     }
22322                                           ! 2638   }
22323                       000057E0            .19D:
22324                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22325 57E0           8B46         0A            mov	ax,$A[bp]
22326 57E3           48                         dec	ax
22327 57E4           8946         0A            mov	$A[bp],ax
22328                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22329 57E7           3D                   FFFF  cmp	ax,*-1
22330 57EA           74           0C            je  	.1A7
22331                       000057EC            .1A8:
22332                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22333 57EC           8A46         FE            mov	al,-2[bp]
22334 57EF           30E4                       xor	ah,ah
22335 57F1           3B46         F8            cmp	ax,-8[bp]
22336 57F4         0F82         FF3D            blo 	.19E
22337                       000057F8            .1A7:
22338                       000057F8            .19C:
22339                                           ! 2639 }
22340                       000057F8            .19B:
22341 57F8           89EC                       mov	sp,bp
22342 57FA           5D                         pop	bp
22343 57FB           C3                         ret
22344                                           ! 2640 static void biosfn_write_char_only (car,page,attr,count)
22345                                           ! Register BX used in function biosfn_write_char_attr
22346                                           ! 2641 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22347                       000057FC            _biosfn_write_char_only:
22348                                           !BCC_EOS
22349                                           !BCC_EOS
22350                                           !BCC_EOS
22351                                           !BCC_EOS
22352                                           ! 2642 {
22353                                           ! 2643  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22354                                           !BCC_EOS
22355                                           ! 2644  Bit16u nbcols,nbrows,address;
22356                                           !BCC_EOS
22357                                           ! 2645  Bit16u cursor,dummy;
22358                                           !BCC_EOS
22359                                           ! 2646  mode=read_byte(0x40,0x49);
22360 57FC           55                         push	bp
22361 57FD           89E5                       mov	bp,sp
22362 57FF           83C4                   F0  add	sp,*-$10
22363                                           ! Debug: list int = const $49 (used reg = )
22364 5802           B8                   0049  mov	ax,*$49
22365 5805           50                         push	ax
22366                                           ! Debug: list int = const $40 (used reg = )
22367 5806           B8                   0040  mov	ax,*$40
22368 5809           50                         push	ax
22369                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22370 580A           E8         252D            call	_read_byte
22371 580D           83C4                   04  add	sp,*4
22372                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22373 5810           8846         FC            mov	-4[bp],al
22374                                           !BCC_EOS
22375                                           ! 2647  line=find_vga_entry(mode);
22376                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22377 5813           8A46         FC            mov	al,-4[bp]
22378 5816           30E4                       xor	ah,ah
22379 5818           50                         push	ax
22380                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22381 5819           E8         2432            call	_find_vga_entry
22382 581C           44                         inc	sp
22383 581D           44                         inc	sp
22384                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22385 581E           8846         FB            mov	-5[bp],al
22386                                           !BCC_EOS
22387                                           ! 2648  if(line==0xFF)return;
22388                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22389 5821           8A46         FB            mov	al,-5[bp]
22390 5824           3C                     FF  cmp	al,#$FF
22391 5826           75           04            jne 	.1A9
22392                       00005828            .1AA:
22393 5828           89EC                       mov	sp,bp
22394 582A           5D                         pop	bp
22395 582B           C3                         ret
22396                                           !BCC_EOS
22397                                           ! 2649  biosfn_get_cursor_pos(page,&
22398                       0000582C            .1A9:
22399                                           ! 2649 dummy,&cursor);
22400                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22401 582C           8D5E         F2            lea	bx,-$E[bp]
22402 582F           53                         push	bx
22403                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22404 5830           8D5E         F0            lea	bx,-$10[bp]
22405 5833           53                         push	bx
22406                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22407 5834           8A46         06            mov	al,6[bp]
22408 5837           30E4                       xor	ah,ah
22409 5839           50                         push	ax
22410                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22411 583A           E8         EC47            call	_biosfn_get_cursor_pos
22412 583D           83C4                   06  add	sp,*6
22413                                           !BCC_EOS
22414                                           ! 2650  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22415                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22416 5840           8A46         F2            mov	al,-$E[bp]
22417                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22418 5843           8846         FE            mov	-2[bp],al
22419                                           !BCC_EOS
22420                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22421 5846           8B46         F2            mov	ax,-$E[bp]
22422 5849           30C0                       xor	al,al
22423                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22424 584B           88E0                       mov	al,ah
22425 584D           30E4                       xor	ah,ah
22426                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22427 584F           8846         FD            mov	-3[bp],al
22428                                           !BCC_EOS
22429                                           ! 2651  nbrows=read_byte(0x40,0x84)+1;
22430                                           ! Debug: list int = const $84 (used reg = )
22431 5852           B8                   0084  mov	ax,#$84
22432 5855           50                         push	ax
22433                                           ! Debug: list int = const $40 (used reg = )
22434 5856           B8                   0040  mov	ax,*$40
22435 5859           50                         push	ax
22436                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22437 585A           E8         24DD            call	_read_byte
22438 585D           83C4                   04  add	sp,*4
22439                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22440 5860           30E4                       xor	ah,ah
22441                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22442 5862           40                         inc	ax
22443 5863           8946         F6            mov	-$A[bp],ax
22444                                           !BCC_EOS
22445                                           ! 2652  nbcols=read_word(0x40,0x4A);
22446                                           ! Debug: list int = const $4A (used reg = )
22447 5866           B8                   004A  mov	ax,*$4A
22448 5869           50                         push	ax
22449                                           ! Debug: list int = const $40 (used reg = )
22450 586A           B8                   0040  mov	ax,*$40
22451 586D           50                         push	ax
22452                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22453 586E           E8         24DC            call	_read_word
22454 5871           83C4                   04  add	sp,*4
22455                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22456 5874           8946         F8            mov	-8[bp],ax
22457                                           !BCC_EOS
22458                                           ! 2653  if(vga_modes[line].class==0x00)
22459                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22460 5877           8A46         FB            mov	al,-5[bp]
22461 587A           30E4                       xor	ah,ah
22462 587C           B1                     03  mov	cl,*3
22463 587E           D3E0                       shl	ax,cl
22464 5880           89C3                       mov	bx,ax
22465 5882           81C3                 0206  add	bx,#_vga_modes
22466                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22467 5886           8A47         01            mov	al,1[bx]
22468 5889           84C0                       test	al,al
22469 588B           75           6E            jne 	.1AB
22470                       0000588D            .1AC:
22471                                           ! 2654   {
22472                                           ! 2655    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22473                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22474 588D           8A46         FD            mov	al,-3[bp]
22475 5890           30E4                       xor	ah,ah
22476 5892           8B4E         F8            mov	cx,-8[bp]
22477 5895           F7E9                       imul	cx
22478                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22479                                           ! Debug: expression subtree swapping
22480 5897           0246         FE            add	al,-2[bp]
22481 589A           80D4                   00  adc	ah,*0
22482                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22483 589D           D1E0                       shl	ax,*1
22484 589F           50                         push	ax
22485                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22486 58A0           8B46         F8            mov	ax,-8[bp]
22487 58A3           8B4E         F6            mov	cx,-$A[bp]
22488 58A6           F7E9                       imul	cx
22489                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22490 58A8           D1E0                       shl	ax,*1
22491                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22492 58AA           0C                     FF  or	al,#$FF
22493                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22494                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22495 58AC           89C3                       mov	bx,ax
22496 58AE           8A46         06            mov	al,6[bp]
22497 58B1           30E4                       xor	ah,ah
22498 58B3           93                         xchg	ax,bx
22499 58B4           40                         inc	ax
22500 58B5           89D9                       mov	cx,bx
22501 58B7           F7E9                       imul	cx
22502                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22503 58B9           0346         EE            add	ax,-$12[bp]
22504 58BC           44                         inc	sp
22505 58BD           44                         inc	sp
22506                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22507 58BE           8946         F4            mov	-$C[bp],ax
22508                                           !BCC_EOS
22509                                           ! 2656    while(count-->0)
22510                                           ! 2657     {write_byte(vga_modes[line].sstart,address,car);
22511 58C1           EB           29            jmp .1AE
22512                       000058C3            .1AF:
22513                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22514 58C3           8A46         04            mov	al,4[bp]
22515 58C6           30E4                       xor	ah,ah
22516 58C8           50                         push	ax
22517                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22518 58C9           FF76         F4            push	-$C[bp]
22519                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22520 58CC           8A46         FB            mov	al,-5[bp]
22521 58CF           30E4                       xor	ah,ah
22522 58D1           B1                     03  mov	cl,*3
22523 58D3           D3E0                       shl	ax,cl
22524 58D5           89C3                       mov	bx,ax
22525 58D7           81C3                 0206  add	bx,#_vga_modes
22526                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22527 58DB           FF77         04            push	4[bx]
22528                                           ! Debug: func () void = write_byte+0 (used reg = )
22529 58DE           E8         247F            call	_write_byte
22530 58E1           83C4                   06  add	sp,*6
22531                                           !BCC_EOS
22532                                           ! 2658      address+=2;
22533                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22534 58E4           8B46         F4            mov	ax,-$C[bp]
22535 58E7           40                         inc	ax
22536 58E8           40                         inc	ax
22537 58E9           8946         F4            mov	-$C[bp],ax
22538                                           !BCC_EOS
22539                                           ! 2659     }
22540                                           ! 2660   }
22541                       000058EC            .1AE:
22542                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22543 58EC           8B46         0A            mov	ax,$A[bp]
22544 58EF           48                         dec	ax
22545 58F0           8946         0A            mov	$A[bp],ax
22546                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22547 58F3           3D                   FFFF  cmp	ax,*-1
22548 58F6           75           CB            jne	.1AF
22549                       000058F8            .1B0:
22550                       000058F8            .1AD:
22551                                           ! 2661  else
22552                                           ! 2662   {
22553 58F8           E9         00F8            br 	.1B1
22554                       000058FB            .1AB:
22555                                           ! 2663    cheight=video_param_table[line_to_vpti[line]].cheight;
22556                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22557 58FB           8A46         FB            mov	al,-5[bp]
22558 58FE           30E4                       xor	ah,ah
22559 5900           89C3                       mov	bx,ax
22560                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22561 5902           8A87       0286            mov	al,_line_to_vpti[bx]
22562 5906           30E4                       xor	ah,ah
22563 5908           B1                     06  mov	cl,*6
22564 590A           D3E0                       shl	ax,cl
22565 590C           89C3                       mov	bx,ax
22566 590E           81C3                 029A  add	bx,#_video_param_table
22567                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22568 5912           8A47         02            mov	al,2[bx]
22569 5915           8846         FF            mov	-1[bp],al
22570                                           !BCC_EOS
22571                                           ! 2664    bpp=vga_modes[line].pixbits;
22572                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22573 5918           8A46         FB            mov	al,-5[bp]
22574 591B           30E4                       xor	ah,ah
22575 591D           B1                     03  mov	cl,*3
22576 591F           D3E0                       shl	ax,cl
22577 5921           89C3                       mov	bx,ax
22578 5923           81C3                 0206  add	bx,#_vga_modes
22579                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22580 5927           8A47         03            mov	al,3[bx]
22581 592A           8846         FA            mov	-6[bp],al
22582                                           !BCC_EOS
22583                                           ! 2665    while((count-->0) && (xcurs<nbcols))
22584                                           ! 2666     {
22585 592D           E9         00AB            br 	.1B3
22586                       00005930            .1B4:
22587                                           ! 2667      switch(vga_modes[line].memmodel)
22588                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22589 5930           8A46         FB            mov	al,-5[bp]
22590 5933           30E4                       xor	ah,ah
22591 5935           B1                     03  mov	cl,*3
22592 5937           D3E0                       shl	ax,cl
22593 5939           89C3                       mov	bx,ax
22594 593B           81C3                 0206  add	bx,#_vga_modes
22595 593F           8A47         02            mov	al,2[bx]
22596                                           ! 2668       {
22597 5942           EB           7A            jmp .1B7
22598                                           ! 2669        case 0x04:
22599                                           ! 2670        case 0x03:
22600                       00005944            .1B8:
22601                                           ! 2671          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22602                       00005944            .1B9:
22603                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22604 5944           8A46         FF            mov	al,-1[bp]
22605 5947           30E4                       xor	ah,ah
22606 5949           50                         push	ax
22607                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22608 594A           FF76         F8            push	-8[bp]
22609                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22610 594D           8A46         FD            mov	al,-3[bp]
22611 5950           30E4                       xor	ah,ah
22612 5952           50                         push	ax
22613                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22614 5953           8A46         FE            mov	al,-2[bp]
22615 5956           30E4                       xor	ah,ah
22616 5958           50                         push	ax
22617                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22618 5959           8A46         08            mov	al,8[bp]
22619 595C           30E4                       xor	ah,ah
22620 595E           50                         push	ax
22621                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22622 595F           8A46         04            mov	al,4[bp]
22623 5962           30E4                       xor	ah,ah
22624 5964           50                         push	ax
22625                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22626 5965           E8         F853            call	_write_gfx_char_pl4
22627 5968           83C4                   0C  add	sp,*$C
22628                                           !BCC_EOS
22629                                           ! 2672          break;
22630 596B           EB           67            jmp .1B5
22631                                           !BCC_EOS
22632                                           ! 2673        case 0x02:
22633                                           ! 2674          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22634                       0000596D            .1BA:
22635                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22636 596D           8A46         FA            mov	al,-6[bp]
22637 5970           30E4                       xor	ah,ah
22638 5972           50                         push	ax
22639                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22640 5973           FF76         F8            push	-8[bp]
22641                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22642 5976           8A46         FD            mov	al,-3[bp]
22643 5979           30E4                       xor	ah,ah
22644 597B           50                         push	ax
22645                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22646 597C           8A46         FE            mov	al,-2[bp]
22647 597F           30E4                       xor	ah,ah
22648 5981           50                         push	ax
22649                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22650 5982           8A46         08            mov	al,8[bp]
22651 5985           30E4                       xor	ah,ah
22652 5987           50                         push	ax
22653                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22654 5988           8A46         04            mov	al,4[bp]
22655 598B           30E4                       xor	ah,ah
22656 598D           50                         push	ax
22657                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22658 598E           E8         F99D            call	_write_gfx_char_cga
22659 5991           83C4                   0C  add	sp,*$C
22660                                           !BCC_EOS
22661                                           ! 2675          break;
22662 5994           EB           3E            jmp .1B5
22663                                           !BCC_EOS
22664                                           ! 2676        case 0x05:
22665                                           ! 2677          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22666                       00005996            .1BB:
22667                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22668 5996           FF76         F8            push	-8[bp]
22669                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22670 5999           8A46         FD            mov	al,-3[bp]
22671 599C           30E4                       xor	ah,ah
22672 599E           50                         push	ax
22673                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22674 599F           8A46         FE            mov	al,-2[bp]
22675 59A2           30E4                       xor	ah,ah
22676 59A4           50                         push	ax
22677                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22678 59A5           8A46         08            mov	al,8[bp]
22679 59A8           30E4                       xor	ah,ah
22680 59AA           50                         push	ax
22681                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22682 59AB           8A46         04            mov	al,4[bp]
22683 59AE           30E4                       xor	ah,ah
22684 59B0           50                         push	ax
22685                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22686 59B1           E8         FB7D            call	_write_gfx_char_lin
22687 59B4           83C4                   0A  add	sp,*$A
22688                                           !BCC_EOS
22689                                           ! 2678          break;
22690 59B7           EB           1B            jmp .1B5
22691                                           !BCC_EOS
22692                                           ! 2679        default:
22693                                           ! 2680          unimplemented();
22694                       000059B9            .1BC:
22695                                           ! Debug: func () void = unimplemented+0 (used reg = )
22696 59B9           E8         240D            call	_unimplemented
22697                                           !BCC_EOS
22698                                           ! 2681       }
22699                                           ! 2682      xcurs++;
22700 59BC           EB           16            jmp .1B5
22701                       000059BE            .1B7:
22702 59BE           2C                     02  sub	al,*2
22703 59C0           74           AB            je 	.1BA
22704 59C2           2C                     01  sub	al,*1
22705 59C4         0F84         FF7C            beq 	.1B9
22706 59C8           2C                     01  sub	al,*1
22707 59CA         0F84         FF76            beq 	.1B8
22708 59CE           2C                     01  sub	al,*1
22709 59D0           74           C4            je 	.1BB
22710 59D2           EB           E5            jmp	.1BC
22711                       000059D4            .1B5:
22712                       FFFFFFEE            ..FFF9	=	-$12
22713                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22714 59D4           8A46         FE            mov	al,-2[bp]
22715 59D7           40                         inc	ax
22716 59D8           8846         FE            mov	-2[bp],al
22717                                           !BCC_EOS
22718                                           ! 2683     }
22719                                           ! 2684   }
22720                       000059DB            .1B3:
22721                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22722 59DB           8B46         0A            mov	ax,$A[bp]
22723 59DE           48                         dec	ax
22724 59DF           8946         0A            mov	$A[bp],ax
22725                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22726 59E2           3D                   FFFF  cmp	ax,*-1
22727 59E5           74           0C            je  	.1BD
22728                       000059E7            .1BE:
22729                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22730 59E7           8A46         FE            mov	al,-2[bp]
22731 59EA           30E4                       xor	ah,ah
22732 59EC           3B46         F8            cmp	ax,-8[bp]
22733 59EF         0F82         FF3D            blo 	.1B4
22734                       000059F3            .1BD:
22735                       000059F3            .1B2:
22736                                           ! 2685 }
22737                       000059F3            .1B1:
22738 59F3           89EC                       mov	sp,bp
22739 59F5           5D                         pop	bp
22740 59F6           C3                         ret
22741                                           ! 2686 #asm
22742                                           !BCC_ASM
22743                       00000008            _biosfn_write_char_only.count	set	8
22744                       00000006            _biosfn_write_char_only.attr	set	6
22745                       00000004            _biosfn_write_char_only.page	set	4
22746                       00000002            _biosfn_write_char_only.car	set	2
22747                       000059F7            biosfn_group_0B:
22748 59F7           80FF                   00    cmp bh, #0x00
22749 59FA           74           09              je biosfn_set_border_color
22750 59FC           80FF                   01    cmp bh, #0x01
22751 59FF           74           43              je biosfn_set_palette
22752 5A01           E8         23D3              call _unknown
22753 5A04           C3                           ret
22754                       00005A05            biosfn_set_border_color:
22755 5A05           50                           push ax
22756 5A06           53                           push bx
22757 5A07           51                           push cx
22758 5A08           52                           push dx
22759 5A09           BA                   03DA    mov dx, # 0x3da
22760 5A0C           EC                           in al, dx
22761 5A0D           BA                   03C0    mov dx, # 0x3c0
22762 5A10           B0                     00    mov al, #0x00
22763 5A12           EE                           out dx, al
22764 5A13           88D8                         mov al, bl
22765 5A15           24                     0F    and al, #0x0f
22766 5A17           A8                     08    test al, #0x08
22767 5A19           74           02              jz set_low_border
22768 5A1B           04                     08    add al, #0x08
22769                       00005A1D            set_low_border:
22770 5A1D           EE                           out dx, al
22771 5A1E           B1                     01    mov cl, #0x01
22772 5A20           80E3                   10    and bl, #0x10
22773                       00005A23            set_intensity_loop:
22774 5A23           BA                   03C0    mov dx, # 0x3c0
22775 5A26           88C8                         mov al, cl
22776 5A28           EE                           out dx, al
22777 5A29           BA                   03C1    mov dx, # 0x3c1
22778 5A2C           EC                           in al, dx
22779 5A2D           24                     EF    and al, #0xef
22780 5A2F           08D8                         or al, bl
22781 5A31           BA                   03C0    mov dx, # 0x3c0
22782 5A34           EE                           out dx, al
22783 5A35           FEC1                         inc cl
22784 5A37           80F9                   04    cmp cl, #0x04
22785 5A3A           75           E7              jne set_intensity_loop
22786 5A3C           B0                     20    mov al, #0x20
22787 5A3E           EE                           out dx, al
22788 5A3F           5A                           pop dx
22789 5A40           59                           pop cx
22790 5A41           5B                           pop bx
22791 5A42           58                           pop ax
22792 5A43           C3                           ret
22793                       00005A44            biosfn_set_palette:
22794 5A44           50                           push ax
22795 5A45           53                           push bx
22796 5A46           51                           push cx
22797 5A47           52                           push dx
22798 5A48           BA                   03DA    mov dx, # 0x3da
22799 5A4B           EC                           in al, dx
22800 5A4C           B1                     01    mov cl, #0x01
22801 5A4E           80E3                   01    and bl, #0x01
22802                       00005A51            set_cga_palette_loop:
22803 5A51           BA                   03C0    mov dx, # 0x3c0
22804 5A54           88C8                         mov al, cl
22805 5A56           EE                           out dx, al
22806 5A57           BA                   03C1    mov dx, # 0x3c1
22807 5A5A           EC                           in al, dx
22808 5A5B           24                     FE    and al, #0xfe
22809 5A5D           08D8                         or al, bl
22810 5A5F           BA                   03C0    mov dx, # 0x3c0
22811 5A62           EE                           out dx, al
22812 5A63           FEC1                         inc cl
22813 5A65           80F9                   04    cmp cl, #0x04
22814 5A68           75           E7              jne set_cga_palette_loop
22815 5A6A           B0                     20    mov al, #0x20
22816 5A6C           EE                           out dx, al
22817 5A6D           5A                           pop dx
22818 5A6E           59                           pop cx
22819 5A6F           5B                           pop bx
22820 5A70           58                           pop ax
22821 5A71           C3                           ret
22822                                           ! 2762 endasm
22823                                           !BCC_ENDASM
22824                                           ! 2763 static void biosfn_write_pixel (BH,AL,CX,DX
22825                                           ! Register BX used in function biosfn_write_char_only
22826                                           ! 2763 ) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22827                       00005A72            _biosfn_write_pixel:
22828                                           !BCC_EOS
22829                                           !BCC_EOS
22830                                           !BCC_EOS
22831                                           !BCC_EOS
22832                                           ! 2764 {
22833                                           ! 2765  Bit8u mode,line,mask,attr,data;
22834                                           !BCC_EOS
22835                                           ! 2766  Bit16u addr;
22836                                           !BCC_EOS
22837                                           ! 2767  mode=read_byte(0x40,0x49);
22838 5A72           55                         push	bp
22839 5A73           89E5                       mov	bp,sp
22840 5A75           83C4                   F8  add	sp,*-8
22841                                           ! Debug: list int = const $49 (used reg = )
22842 5A78           B8                   0049  mov	ax,*$49
22843 5A7B           50                         push	ax
22844                                           ! Debug: list int = const $40 (used reg = )
22845 5A7C           B8                   0040  mov	ax,*$40
22846 5A7F           50                         push	ax
22847                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22848 5A80           E8         22B7            call	_read_byte
22849 5A83           83C4                   04  add	sp,*4
22850                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22851 5A86           8846         FF            mov	-1[bp],al
22852                                           !BCC_EOS
22853                                           ! 2768  line=find_vga_entry(mode);
22854                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22855 5A89           8A46         FF            mov	al,-1[bp]
22856 5A8C           30E4                       xor	ah,ah
22857 5A8E           50                         push	ax
22858                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22859 5A8F           E8         21BC            call	_find_vga_entry
22860 5A92           44                         inc	sp
22861 5A93           44                         inc	sp
22862                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22863 5A94           8846         FE            mov	-2[bp],al
22864                                           !BCC_EOS
22865                                           ! 2769  if(line==0xFF)return;
22866                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22867 5A97           8A46         FE            mov	al,-2[bp]
22868 5A9A           3C                     FF  cmp	al,#$FF
22869 5A9C           75           04            jne 	.1BF
22870                       00005A9E            .1C0:
22871 5A9E           89EC                       mov	sp,bp
22872 5AA0           5D                         pop	bp
22873 5AA1           C3                         ret
22874                                           !BCC_EOS
22875                                           ! 2770  if(vga_modes[line].class==0x00)return;
22876                       00005AA2            .1BF:
22877                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22878 5AA2           8A46         FE            mov	al,-2[bp]
22879 5AA5           30E4                       xor	ah,ah
22880 5AA7           B1                     03  mov	cl,*3
22881 5AA9           D3E0                       shl	ax,cl
22882 5AAB           89C3                       mov	bx,ax
22883 5AAD           81C3                 0206  add	bx,#_vga_modes
22884                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22885 5AB1           8A47         01            mov	al,1[bx]
22886 5AB4           84C0                       test	al,al
22887 5AB6           75           04            jne 	.1C1
22888                       00005AB8            .1C2:
22889 5AB8           89EC                       mov	sp,bp
22890 5ABA           5D                         pop	bp
22891 5ABB           C3                         ret
22892                                           !BCC_EOS
22893                                           ! 2771  switch(vga_modes[line].memmodel)
22894                       00005ABC            .1C1:
22895                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22896 5ABC           8A46         FE            mov	al,-2[bp]
22897 5ABF           30E4                       xor	ah,ah
22898 5AC1           B1                     03  mov	cl,*3
22899 5AC3           D3E0                       shl	ax,cl
22900 5AC5           89C3                       mov	bx,ax
22901 5AC7           81C3                 0206  add	bx,#_vga_modes
22902 5ACB           8A47         02            mov	al,2[bx]
22903                                           ! 2772   {
22904 5ACE           E9         0226            br 	.1C5
22905                                           ! 2773    case 0x04:
22906                                           ! 2774    case 0x03:
22907                       00005AD1            .1C6:
22908                                           ! 2775      addr = CX/8+DX*read_word(0x40,0x4A);
22909                       00005AD1            .1C7:
22910                                           ! Debug: list int = const $4A (used reg = )
22911 5AD1           B8                   004A  mov	ax,*$4A
22912 5AD4           50                         push	ax
22913                                           ! Debug: list int = const $40 (used reg = )
22914 5AD5           B8                   0040  mov	ax,*$40
22915 5AD8           50                         push	ax
22916                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22917 5AD9           E8         2271            call	_read_word
22918 5ADC           83C4                   04  add	sp,*4
22919                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22920                                           ! Debug: expression subtree swapping
22921 5ADF           8B4E         0A            mov	cx,$A[bp]
22922 5AE2           F7E9                       imul	cx
22923 5AE4           50                         push	ax
22924                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22925 5AE5           8B46         08            mov	ax,8[bp]
22926 5AE8           B1                     03  mov	cl,*3
22927 5AEA           D3E8                       shr	ax,cl
22928                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22929 5AEC           0346         F6            add	ax,0+..FFF8[bp]
22930 5AEF           44                         inc	sp
22931 5AF0           44                         inc	sp
22932                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22933 5AF1           8946         F8            mov	-8[bp],ax
22934                                           !BCC_EOS
22935                                           ! 2776      mask = 0x80 >> (CX & 0x07);
22936                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22937 5AF4           8A46         08            mov	al,8[bp]
22938 5AF7           24                     07  and	al,*7
22939                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22940 5AF9           30E4                       xor	ah,ah
22941 5AFB           89C3                       mov	bx,ax
22942 5AFD           B8                   0080  mov	ax,#$80
22943 5B00           89D9                       mov	cx,bx
22944 5B02           D3F8                       sar	ax,cl
22945                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22946 5B04           8846         FD            mov	-3[bp],al
22947                                           !BCC_EOS
22948                                           ! 2777      outw(0x3ce, (mask << 8) | 0x08);
22949                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22950 5B07           8A46         FD            mov	al,-3[bp]
22951 5B0A           30E4                       xor	ah,ah
22952 5B0C           88C4                       mov	ah,al
22953 5B0E           30C0                       xor	al,al
22954                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22955 5B10           0C                     08  or	al,*8
22956                                           ! Debug: list unsigned int = ax+0 (used reg = )
22957 5B12           50                         push	ax
22958                                           ! Debug: list int = const $3CE (used reg = )
22959 5B13           B8                   03CE  mov	ax,#$3CE
22960 5B16           50                         push	ax
22961                                           ! Debug: func () void = outw+0 (used reg = )
22962 5B17           E8         229C            call	_outw
22963 5B1A           83C4                   04  add	sp,*4
22964                                           !BCC_EOS
22965                                           ! 2778      outw(0x3ce, 0x0205);
22966                                           ! Debug: list int = const $205 (used reg = )
22967 5B1D           B8                   0205  mov	ax,#$205
22968 5B20           50                         push	ax
22969                                           ! Debug: list int = const $3CE (used reg = )
22970 5B21           B8                   03CE  mov	ax,#$3CE
22971 5B24           50                         push	ax
22972                                           ! Debug: func () void = outw+0 (used reg = )
22973 5B25           E8         228E            call	_outw
22974 5B28           83C4                   04  add	sp,*4
22975                                           !BCC_EOS
22976                                           ! 2779      data = read_byte(0xa000,addr);
22977                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22978 5B2B           FF76         F8            push	-8[bp]
22979                                           ! Debug: list unsigned int = const $A000 (used reg = )
22980 5B2E           B8                   A000  mov	ax,#$A000
22981 5B31           50                         push	ax
22982                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22983 5B32           E8         2205            call	_read_byte
22984 5B35           83C4                   04  add	sp,*4
22985                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22986 5B38           8846         FB            mov	-5[bp],al
22987                                           !BCC_EOS
22988                                           ! 2780      if (AL & 0x80)
22989                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22990 5B3B           8A46         06            mov	al,6[bp]
22991 5B3E           24                     80  and	al,#$80
22992 5B40           84C0                       test	al,al
22993 5B42           74           0E            je  	.1C8
22994                       00005B44            .1C9:
22995                                           ! 2781       {
22996                                           ! 2782        outw(0x3ce, 0x1803);
22997                                           ! Debug: list int = const $1803 (used reg = )
22998 5B44           B8                   1803  mov	ax,#$1803
22999 5B47           50                         push	ax
23000                                           ! Debug: list int = const $3CE (used reg = )
23001 5B48           B8                   03CE  mov	ax,#$3CE
23002 5B4B           50                         push	ax
23003                                           ! Debug: func () void = outw+0 (used reg = )
23004 5B4C           E8         2267            call	_outw
23005 5B4F           83C4                   04  add	sp,*4
23006                                           !BCC_EOS
23007                                           ! 2783       }
23008                                           ! 2784      write_byte(0xa000,addr,AL);
23009                       00005B52            .1C8:
23010                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23011 5B52           8A46         06            mov	al,6[bp]
23012 5B55           30E4                       xor	ah,ah
23013 5B57           50                         push	ax
23014                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23015 5B58           FF76         F8            push	-8[bp]
23016                                           ! Debug: list unsigned int = const $A000 (used reg = )
23017 5B5B           B8                   A000  mov	ax,#$A000
23018 5B5E           50                         push	ax
23019                                           ! Debug: func () void = write_byte+0 (used reg = )
23020 5B5F           E8         21FE            call	_write_byte
23021 5B62           83C4                   06  add	sp,*6
23022                                           !BCC_EOS
23023                                           ! 2785 #asm
23024                                           !BCC_EOS
23025                                           !BCC_ASM
23026                       0000000C            _biosfn_write_pixel.BH	set	$C
23027                       00000004            .biosfn_write_pixel.BH	set	4
23028                       00000010            _biosfn_write_pixel.CX	set	$10
23029                       00000008            .biosfn_write_pixel.CX	set	8
23030                       00000006            _biosfn_write_pixel.line	set	6
23031                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
23032                       0000000E            _biosfn_write_pixel.AL	set	$E
23033                       00000006            .biosfn_write_pixel.AL	set	6
23034                       00000003            _biosfn_write_pixel.data	set	3
23035                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
23036                       00000012            _biosfn_write_pixel.DX	set	$12
23037                       0000000A            .biosfn_write_pixel.DX	set	$A
23038                       00000005            _biosfn_write_pixel.mask	set	5
23039                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
23040                       00000004            _biosfn_write_pixel.attr	set	4
23041                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
23042                       00000007            _biosfn_write_pixel.mode	set	7
23043                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
23044                       00000000            _biosfn_write_pixel.addr	set	0
23045                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
23046 5B65           BA                   03CE       mov dx, # 0x3ce
23047 5B68           B8                   FF08       mov ax, #0xff08
23048 5B6B           EF                              out dx, ax
23049 5B6C           B8                   0005       mov ax, #0x0005
23050 5B6F           EF                              out dx, ax
23051 5B70           B8                   0003       mov ax, #0x0003
23052 5B73           EF                              out dx, ax
23053                                           ! 2793 endasm
23054                                           !BCC_ENDASM
23055                                           !BCC_EOS
23056                                           ! 2794      break;
23057 5B74           E9         0198            br 	.1C3
23058                                           !BCC_EOS
23059                                           ! 2795    case 0x02:
23060                                           ! 2796      if(vga_modes[line].pixbits==2)
23061                       00005B77            .1CA:
23062                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
23063 5B77           8A46         FE            mov	al,-2[bp]
23064 5B7A           30E4                       xor	ah,ah
23065 5B7C           B1                     03  mov	cl,*3
23066 5B7E           D3E0                       shl	ax,cl
23067 5B80           89C3                       mov	bx,ax
23068 5B82           81C3                 0206  add	bx,#_vga_modes
23069                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23070 5B86           8A47         03            mov	al,3[bx]
23071 5B89           3C                     02  cmp	al,*2
23072 5B8B           75           1C            jne 	.1CB
23073                       00005B8D            .1CC:
23074                                           ! 2797       {
23075                                           ! 2798        addr=(CX>>2)+(DX>>1)*80;
23076                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23077 5B8D           8B46         0A            mov	ax,$A[bp]
23078 5B90           D1E8                       shr	ax,*1
23079                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23080 5B92           B9                   0050  mov	cx,*$50
23081 5B95           F7E9                       imul	cx
23082 5B97           50                         push	ax
23083                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
23084 5B98           8B46         08            mov	ax,8[bp]
23085 5B9B           D1E8                       shr	ax,*1
23086 5B9D           D1E8                       shr	ax,*1
23087                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23088 5B9F           0346         F6            add	ax,0+..FFF8[bp]
23089 5BA2           44                         inc	sp
23090 5BA3           44                         inc	sp
23091                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23092 5BA4           8946         F8            mov	-8[bp],ax
23093                                           !BCC_EOS
23094                                           ! 2799       }
23095                                           ! 2800      else
23096                                           ! 2801       {
23097 5BA7           EB           1A            jmp .1CD
23098                       00005BA9            .1CB:
23099                                           ! 2802        addr=(CX>>3)+(DX>>1)*80;
23100                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23101 5BA9           8B46         0A            mov	ax,$A[bp]
23102 5BAC           D1E8                       shr	ax,*1
23103                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23104 5BAE           B9                   0050  mov	cx,*$50
23105 5BB1           F7E9                       imul	cx
23106 5BB3           50                         push	ax
23107                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
23108 5BB4           8B46         08            mov	ax,8[bp]
23109 5BB7           B1                     03  mov	cl,*3
23110 5BB9           D3E8                       shr	ax,cl
23111                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23112 5BBB           0346         F6            add	ax,0+..FFF8[bp]
23113 5BBE           44                         inc	sp
23114 5BBF           44                         inc	sp
23115                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23116 5BC0           8946         F8            mov	-8[bp],ax
23117                                           !BCC_EOS
23118                                           ! 2803       }
23119                                           ! 2804      if (DX & 1) addr += 0x2000;
23120                       00005BC3            .1CD:
23121                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23122 5BC3           8A46         0A            mov	al,$A[bp]
23123 5BC6           24                     01  and	al,*1
23124 5BC8           84C0                       test	al,al
23125 5BCA           74           09            je  	.1CE
23126                       00005BCC            .1CF:
23127                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
23128 5BCC           8B46         F8            mov	ax,-8[bp]
23129 5BCF           05                   2000  add	ax,#$2000
23130 5BD2           8946         F8            mov	-8[bp],ax
23131                                           !BCC_EOS
23132                                           ! 2805      data = read_byte(0xb800,addr);
23133                       00005BD5            .1CE:
23134                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
23135 5BD5           FF76         F8            push	-8[bp]
23136                                           ! Debug: list unsigned int = const $B800 (used reg = )
23137 5BD8           B8                   B800  mov	ax,#$B800
23138 5BDB           50                         push	ax
23139                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23140 5BDC           E8         215B            call	_read_byte
23141 5BDF           83C4                   04  add	sp,*4
23142                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
23143 5BE2           8846         FB            mov	-5[bp],al
23144                                           !BCC_EOS
23145                                           ! 2806      if(vga_modes[line].pixbits==2)
23146                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
23147 5BE5           8A46         FE            mov	al,-2[bp]
23148 5BE8           30E4                       xor	ah,ah
23149 5BEA           B1                     03  mov	cl,*3
23150 5BEC           D3E0                       shl	ax,cl
23151 5BEE           89C3                       mov	bx,ax
23152 5BF0           81C3                 0206  add	bx,#_vga_modes
23153                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23154 5BF4           8A47         03            mov	al,3[bx]
23155 5BF7           3C                     02  cmp	al,*2
23156 5BF9           75           46            jne 	.1D0
23157                       00005BFB            .1D1:
23158                                           ! 2807       {
23159                                           ! 2808        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
23160                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23161 5BFB           8A46         08            mov	al,8[bp]
23162 5BFE           24                     03  and	al,*3
23163                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23164 5C00           50                         push	ax
23165 5C01           B8                   0003  mov	ax,*3
23166 5C04           2A46         F6            sub	al,0+..FFF8[bp]
23167 5C07           80DC                   00  sbb	ah,*0
23168 5C0A           44                         inc	sp
23169 5C0B           44                         inc	sp
23170                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23171 5C0C           D1E0                       shl	ax,*1
23172 5C0E           50                         push	ax
23173                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
23174 5C0F           8A46         06            mov	al,6[bp]
23175 5C12           24                     03  and	al,*3
23176                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23177 5C14           30E4                       xor	ah,ah
23178 5C16           8B4E         F6            mov	cx,0+..FFF8[bp]
23179 5C19           D3E0                       shl	ax,cl
23180 5C1B           44                         inc	sp
23181 5C1C           44                         inc	sp
23182                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23183 5C1D           8846         FC            mov	-4[bp],al
23184                                           !BCC_EOS
23185                                           ! 2809        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23186                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23187 5C20           8A46         08            mov	al,8[bp]
23188 5C23           24                     03  and	al,*3
23189                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23190 5C25           50                         push	ax
23191 5C26           B8                   0003  mov	ax,*3
23192 5C29           2A46         F6            sub	al,0+..FFF8[bp]
23193 5C2C           80DC                   00  sbb	ah,*0
23194 5C2F           44                         inc	sp
23195 5C30           44                         inc	sp
23196                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23197 5C31           D1E0                       shl	ax,*1
23198                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23199 5C33           89C3                       mov	bx,ax
23200 5C35           B8                   0003  mov	ax,*3
23201 5C38           89D9                       mov	cx,bx
23202 5C3A           D3E0                       shl	ax,cl
23203                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23204 5C3C           8846         FD            mov	-3[bp],al
23205                                           !BCC_EOS
23206                                           ! 2810       }
23207                                           ! 2811      else
23208                                           ! 2812       {
23209 5C3F           EB           40            jmp .1D2
23210                       00005C41            .1D0:
23211                                           ! 2813        attr = (AL & 0x01) << (7 - (CX & 0x07));
23212                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23213 5C41           8A46         08            mov	al,8[bp]
23214 5C44           24                     07  and	al,*7
23215                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23216 5C46           50                         push	ax
23217 5C47           B8                   0007  mov	ax,*7
23218 5C4A           2A46         F6            sub	al,0+..FFF8[bp]
23219 5C4D           80DC                   00  sbb	ah,*0
23220 5C50           44                         inc	sp
23221 5C51           44                         inc	sp
23222 5C52           50                         push	ax
23223                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23224 5C53           8A46         06            mov	al,6[bp]
23225 5C56           24                     01  and	al,*1
23226                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23227 5C58           30E4                       xor	ah,ah
23228 5C5A           8B4E         F6            mov	cx,0+..FFF8[bp]
23229 5C5D           D3E0                       shl	ax,cl
23230 5C5F           44                         inc	sp
23231 5C60           44                         inc	sp
23232                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23233 5C61           8846         FC            mov	-4[bp],al
23234                                           !BCC_EOS
23235                                           ! 2814        mask = 0x01 << (7 - (CX & 0x07));
23236                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23237 5C64           8A46         08            mov	al,8[bp]
23238 5C67           24                     07  and	al,*7
23239                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23240 5C69           50                         push	ax
23241 5C6A           B8                   0007  mov	ax,*7
23242 5C6D           2A46         F6            sub	al,0+..FFF8[bp]
23243 5C70           80DC                   00  sbb	ah,*0
23244 5C73           44                         inc	sp
23245 5C74           44                         inc	sp
23246                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23247 5C75           89C3                       mov	bx,ax
23248 5C77           B8                   0001  mov	ax,*1
23249 5C7A           89D9                       mov	cx,bx
23250 5C7C           D3E0                       shl	ax,cl
23251                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23252 5C7E           8846         FD            mov	-3[bp],al
23253                                           !BCC_EOS
23254                                           ! 2815       }
23255                                           ! 2816      if (AL & 0x80)
23256                       00005C81            .1D2:
23257                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23258 5C81           8A46         06            mov	al,6[bp]
23259 5C84           24                     80  and	al,#$80
23260 5C86           84C0                       test	al,al
23261 5C88           74           0B            je  	.1D3
23262                       00005C8A            .1D4:
23263                                           ! 2817       {
23264                                           ! 2818        data ^= attr;
23265                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23266 5C8A           8A46         FB            mov	al,-5[bp]
23267 5C8D           3246         FC            xor	al,-4[bp]
23268 5C90           8846         FB            mov	-5[bp],al
23269                                           !BCC_EOS
23270                                           ! 2819       }
23271                                           ! 2820      else
23272                                           ! 2821       {
23273 5C93           EB           16            jmp .1D5
23274                       00005C95            .1D3:
23275                                           ! 2822        data &= ~mask;
23276                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23277 5C95           8A46         FD            mov	al,-3[bp]
23278 5C98           30E4                       xor	ah,ah
23279 5C9A           F7D0                       not	ax
23280                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23281 5C9C           2246         FB            and	al,-5[bp]
23282 5C9F           8846         FB            mov	-5[bp],al
23283                                           !BCC_EOS
23284                                           ! 2823        data |= attr;
23285                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23286 5CA2           8A46         FB            mov	al,-5[bp]
23287 5CA5           0A46         FC            or	al,-4[bp]
23288 5CA8           8846         FB            mov	-5[bp],al
23289                                           !BCC_EOS
23290                                           ! 2824       }
23291                                           ! 2825      write_byte(0xb800,addr,data);
23292                       00005CAB            .1D5:
23293                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23294 5CAB           8A46         FB            mov	al,-5[bp]
23295 5CAE           30E4                       xor	ah,ah
23296 5CB0           50                         push	ax
23297                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23298 5CB1           FF76         F8            push	-8[bp]
23299                                           ! Debug: list unsigned int = const $B800 (used reg = )
23300 5CB4           B8                   B800  mov	ax,#$B800
23301 5CB7           50                         push	ax
23302                                           ! Debug: func () void = write_byte+0 (used reg = )
23303 5CB8           E8         20A5            call	_write_byte
23304 5CBB           83C4                   06  add	sp,*6
23305                                           !BCC_EOS
23306                                           ! 2826      break;
23307 5CBE           EB           4F            jmp .1C3
23308                                           !BCC_EOS
23309                                           ! 2827    case 0x05:
23310                                           ! 2828      addr=CX+DX*(read_word(0x40,0x4A)*8);
23311                       00005CC0            .1D6:
23312                                           ! Debug: list int = const $4A (used reg = )
23313 5CC0           B8                   004A  mov	ax,*$4A
23314 5CC3           50                         push	ax
23315                                           ! Debug: list int = const $40 (used reg = )
23316 5CC4           B8                   0040  mov	ax,*$40
23317 5CC7           50                         push	ax
23318                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23319 5CC8           E8         2082            call	_read_word
23320 5CCB           83C4                   04  add	sp,*4
23321                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23322 5CCE           B1                     03  mov	cl,*3
23323 5CD0           D3E0                       shl	ax,cl
23324                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23325                                           ! Debug: expression subtree swapping
23326 5CD2           8B4E         0A            mov	cx,$A[bp]
23327 5CD5           F7E9                       imul	cx
23328                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23329                                           ! Debug: expression subtree swapping
23330 5CD7           0346         08            add	ax,8[bp]
23331                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23332 5CDA           8946         F8            mov	-8[bp],ax
23333                                           !BCC_EOS
23334                                           ! 2829      write_byte(0xa000,addr,AL);
23335                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23336 5CDD           8A46         06            mov	al,6[bp]
23337 5CE0           30E4                       xor	ah,ah
23338 5CE2           50                         push	ax
23339                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23340 5CE3           FF76         F8            push	-8[bp]
23341                                           ! Debug: list unsigned int = const $A000 (used reg = )
23342 5CE6           B8                   A000  mov	ax,#$A000
23343 5CE9           50                         push	ax
23344                                           ! Debug: func () void = write_byte+0 (used reg = )
23345 5CEA           E8         2073            call	_write_byte
23346 5CED           83C4                   06  add	sp,*6
23347                                           !BCC_EOS
23348                                           ! 2830      break;
23349 5CF0           EB           1D            jmp .1C3
23350                                           !BCC_EOS
23351                                           ! 2831    default:
23352                                           ! 2832      unimplemented();
23353                       00005CF2            .1D7:
23354                                           ! Debug: func () void = unimplemented+0 (used reg = )
23355 5CF2           E8         20D4            call	_unimplemented
23356                                           !BCC_EOS
23357                                           ! 2833   }
23358                                           ! 2834 }
23359 5CF5           EB           18            jmp .1C3
23360                       00005CF7            .1C5:
23361 5CF7           2C                     02  sub	al,*2
23362 5CF9         0F84         FE7A            beq 	.1CA
23363 5CFD           2C                     01  sub	al,*1
23364 5CFF         0F84         FDCE            beq 	.1C7
23365 5D03           2C                     01  sub	al,*1
23366 5D05         0F84         FDC8            beq 	.1C6
23367 5D09           2C                     01  sub	al,*1
23368 5D0B           74           B3            je 	.1D6
23369 5D0D           EB           E3            jmp	.1D7
23370                       00005D0F            .1C3:
23371                       FFFFFFF6            ..FFF8	=	-$A
23372 5D0F           89EC                       mov	sp,bp
23373 5D11           5D                         pop	bp
23374 5D12           C3                         ret
23375                                           ! 2835 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23376                                           ! Register BX used in function biosfn_write_pixel
23377                       00005D13            _biosfn_read_pixel:
23378                                           !BCC_EOS
23379                                           !BCC_EOS
23380                                           !BCC_EOS
23381                                           !BCC_EOS
23382                                           ! 2836 {
23383                                           ! 2837  Bit8u mode,line,mask,attr,data,i;
23384                                           !BCC_EOS
23385                                           ! 2838  Bit16u addr;
23386                                           !BCC_EOS
23387                                           ! 2839  Bit16u ss=get_SS();
23388 5D13           55                         push	bp
23389 5D14           89E5                       mov	bp,sp
23390 5D16           83C4                   F6  add	sp,*-$A
23391                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23392 5D19           E8         20AA            call	_get_SS
23393                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23394 5D1C           8946         F6            mov	-$A[bp],ax
23395                                           !BCC_EOS
23396                                           ! 2840  mode=read_byte(0x40,0x49);
23397                                           ! Debug: list int = const $49 (used reg = )
23398 5D1F           B8                   0049  mov	ax,*$49
23399 5D22           50                         push	ax
23400                                           ! Debug: list int = const $40 (used reg = )
23401 5D23           B8                   0040  mov	ax,*$40
23402 5D26           50                         push	ax
23403                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23404 5D27           E8         2010            call	_read_byte
23405 5D2A           83C4                   04  add	sp,*4
23406                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23407 5D2D           8846         FF            mov	-1[bp],al
23408                                           !BCC_EOS
23409                                           ! 2841  line=find_vga_entry(mode);
23410                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23411 5D30           8A46         FF            mov	al,-1[bp]
23412 5D33           30E4                       xor	ah,ah
23413 5D35           50                         push	ax
23414                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23415 5D36           E8         1F15            call	_find_vga_entry
23416 5D39           44                         inc	sp
23417 5D3A           44                         inc	sp
23418                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23419 5D3B           8846         FE            mov	-2[bp],al
23420                                           !BCC_EOS
23421                                           ! 2842  if(line==0xFF)return;
23422                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23423 5D3E           8A46         FE            mov	al,-2[bp]
23424 5D41           3C                     FF  cmp	al,#$FF
23425 5D43           75           04            jne 	.1D8
23426                       00005D45            .1D9:
23427 5D45           89EC                       mov	sp,bp
23428 5D47           5D                         pop	bp
23429 5D48           C3                         ret
23430                                           !BCC_EOS
23431                                           ! 2843  if(vga_modes[line].class==0x00)return;
23432                       00005D49            .1D8:
23433                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23434 5D49           8A46         FE            mov	al,-2[bp]
23435 5D4C           30E4                       xor	ah,ah
23436 5D4E           B1                     03  mov	cl,*3
23437 5D50           D3E0                       shl	ax,cl
23438 5D52           89C3                       mov	bx,ax
23439 5D54           81C3                 0206  add	bx,#_vga_modes
23440                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23441 5D58           8A47         01            mov	al,1[bx]
23442 5D5B           84C0                       test	al,al
23443 5D5D           75           04            jne 	.1DA
23444                       00005D5F            .1DB:
23445 5D5F           89EC                       mov	sp,bp
23446 5D61           5D                         pop	bp
23447 5D62           C3                         ret
23448                                           !BCC_EOS
23449                                           ! 2844  switch(vga_modes[line].memmodel)
23450                       00005D63            .1DA:
23451                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23452 5D63           8A46         FE            mov	al,-2[bp]
23453 5D66           30E4                       xor	ah,ah
23454 5D68           B1                     03  mov	cl,*3
23455 5D6A           D3E0                       shl	ax,cl
23456 5D6C           89C3                       mov	bx,ax
23457 5D6E           81C3                 0206  add	bx,#_vga_modes
23458 5D72           8A47         02            mov	al,2[bx]
23459                                           ! 2845   {
23460 5D75           E9         016A            br 	.1DE
23461                                           ! 2846    case 0x04:
23462                                           ! 2847    case 0x03:
23463                       00005D78            .1DF:
23464                                           ! 2848      addr = CX/8+DX*read_word(0x40,0x4A);
23465                       00005D78            .1E0:
23466                                           ! Debug: list int = const $4A (used reg = )
23467 5D78           B8                   004A  mov	ax,*$4A
23468 5D7B           50                         push	ax
23469                                           ! Debug: list int = const $40 (used reg = )
23470 5D7C           B8                   0040  mov	ax,*$40
23471 5D7F           50                         push	ax
23472                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23473 5D80           E8         1FCA            call	_read_word
23474 5D83           83C4                   04  add	sp,*4
23475                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23476                                           ! Debug: expression subtree swapping
23477 5D86           8B4E         08            mov	cx,8[bp]
23478 5D89           F7E9                       imul	cx
23479 5D8B           50                         push	ax
23480                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23481 5D8C           8B46         06            mov	ax,6[bp]
23482 5D8F           B1                     03  mov	cl,*3
23483 5D91           D3E8                       shr	ax,cl
23484                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23485 5D93           0346         F4            add	ax,0+..FFF7[bp]
23486 5D96           44                         inc	sp
23487 5D97           44                         inc	sp
23488                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23489 5D98           8946         F8            mov	-8[bp],ax
23490                                           !BCC_EOS
23491                                           ! 2849      mask = 0x80 >> (CX & 0x07);
23492                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23493 5D9B           8A46         06            mov	al,6[bp]
23494 5D9E           24                     07  and	al,*7
23495                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23496 5DA0           30E4                       xor	ah,ah
23497 5DA2           89C3                       mov	bx,ax
23498 5DA4           B8                   0080  mov	ax,#$80
23499 5DA7           89D9                       mov	cx,bx
23500 5DA9           D3F8                       sar	ax,cl
23501                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23502 5DAB           8846         FD            mov	-3[bp],al
23503                                           !BCC_EOS
23504                                           ! 2850      attr = 0x00;
23505                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23506 5DAE           30C0                       xor	al,al
23507 5DB0           8846         FC            mov	-4[bp],al
23508                                           !BCC_EOS
23509                                           ! 2851      for(i=0;i<4;i++)
23510                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23511 5DB3           30C0                       xor	al,al
23512 5DB5           8846         FA            mov	-6[bp],al
23513                                           !BCC_EOS
23514                                           !BCC_EOS
23515                                           ! 2852       {
23516 5DB8           EB           4B            jmp .1E3
23517                       00005DBA            .1E4:
23518                                           ! 2853        outw(0x3ce, (i << 8) | 0x04);
23519                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23520 5DBA           8A46         FA            mov	al,-6[bp]
23521 5DBD           30E4                       xor	ah,ah
23522 5DBF           88C4                       mov	ah,al
23523 5DC1           30C0                       xor	al,al
23524                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23525 5DC3           0C                     04  or	al,*4
23526                                           ! Debug: list unsigned int = ax+0 (used reg = )
23527 5DC5           50                         push	ax
23528                                           ! Debug: list int = const $3CE (used reg = )
23529 5DC6           B8                   03CE  mov	ax,#$3CE
23530 5DC9           50                         push	ax
23531                                           ! Debug: func () void = outw+0 (used reg = )
23532 5DCA           E8         1FE9            call	_outw
23533 5DCD           83C4                   04  add	sp,*4
23534                                           !BCC_EOS
23535                                           ! 2854        data = read_byte(0xa000,addr
23536                                           ! 2854 ) & mask;
23537                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23538 5DD0           FF76         F8            push	-8[bp]
23539                                           ! Debug: list unsigned int = const $A000 (used reg = )
23540 5DD3           B8                   A000  mov	ax,#$A000
23541 5DD6           50                         push	ax
23542                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23543 5DD7           E8         1F60            call	_read_byte
23544 5DDA           83C4                   04  add	sp,*4
23545                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23546 5DDD           2246         FD            and	al,-3[bp]
23547                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23548 5DE0           8846         FB            mov	-5[bp],al
23549                                           !BCC_EOS
23550                                           ! 2855        if (data > 0) attr |= (0x01 << i);
23551                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23552 5DE3           8A46         FB            mov	al,-5[bp]
23553 5DE6           84C0                       test	al,al
23554 5DE8           74           14            je  	.1E5
23555                       00005DEA            .1E6:
23556                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23557 5DEA           8A46         FA            mov	al,-6[bp]
23558 5DED           30E4                       xor	ah,ah
23559 5DEF           89C3                       mov	bx,ax
23560 5DF1           B8                   0001  mov	ax,*1
23561 5DF4           89D9                       mov	cx,bx
23562 5DF6           D3E0                       shl	ax,cl
23563                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23564 5DF8           0A46         FC            or	al,-4[bp]
23565 5DFB           8846         FC            mov	-4[bp],al
23566                                           !BCC_EOS
23567                                           ! 2856       }
23568                       00005DFE            .1E5:
23569                                           ! 2857      break;
23570                       00005DFE            .1E2:
23571                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23572 5DFE           8A46         FA            mov	al,-6[bp]
23573 5E01           40                         inc	ax
23574 5E02           8846         FA            mov	-6[bp],al
23575                       00005E05            .1E3:
23576                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23577 5E05           8A46         FA            mov	al,-6[bp]
23578 5E08           3C                     04  cmp	al,*4
23579 5E0A           72           AE            jb 	.1E4
23580                       00005E0C            .1E7:
23581                       00005E0C            .1E1:
23582 5E0C           E9         00EB            br 	.1DC
23583                                           !BCC_EOS
23584                                           ! 2858    case 0x02:
23585                                           ! 2859      addr=(CX>>2)+(DX>>1)*80;
23586                       00005E0F            .1E8:
23587                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23588 5E0F           8B46         08            mov	ax,8[bp]
23589 5E12           D1E8                       shr	ax,*1
23590                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23591 5E14           B9                   0050  mov	cx,*$50
23592 5E17           F7E9                       imul	cx
23593 5E19           50                         push	ax
23594                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23595 5E1A           8B46         06            mov	ax,6[bp]
23596 5E1D           D1E8                       shr	ax,*1
23597 5E1F           D1E8                       shr	ax,*1
23598                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23599 5E21           0346         F4            add	ax,0+..FFF7[bp]
23600 5E24           44                         inc	sp
23601 5E25           44                         inc	sp
23602                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23603 5E26           8946         F8            mov	-8[bp],ax
23604                                           !BCC_EOS
23605                                           ! 2860      if (DX & 1) addr += 0x2000;
23606                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23607 5E29           8A46         08            mov	al,8[bp]
23608 5E2C           24                     01  and	al,*1
23609 5E2E           84C0                       test	al,al
23610 5E30           74           09            je  	.1E9
23611                       00005E32            .1EA:
23612                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23613 5E32           8B46         F8            mov	ax,-8[bp]
23614 5E35           05                   2000  add	ax,#$2000
23615 5E38           8946         F8            mov	-8[bp],ax
23616                                           !BCC_EOS
23617                                           ! 2861      data = read_byte(0xb800,addr);
23618                       00005E3B            .1E9:
23619                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23620 5E3B           FF76         F8            push	-8[bp]
23621                                           ! Debug: list unsigned int = const $B800 (used reg = )
23622 5E3E           B8                   B800  mov	ax,#$B800
23623 5E41           50                         push	ax
23624                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23625 5E42           E8         1EF5            call	_read_byte
23626 5E45           83C4                   04  add	sp,*4
23627                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23628 5E48           8846         FB            mov	-5[bp],al
23629                                           !BCC_EOS
23630                                           ! 2862      if(vga_modes[line].pixbits==2)
23631                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23632 5E4B           8A46         FE            mov	al,-2[bp]
23633 5E4E           30E4                       xor	ah,ah
23634 5E50           B1                     03  mov	cl,*3
23635 5E52           D3E0                       shl	ax,cl
23636 5E54           89C3                       mov	bx,ax
23637 5E56           81C3                 0206  add	bx,#_vga_modes
23638                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23639 5E5A           8A47         03            mov	al,3[bx]
23640 5E5D           3C                     02  cmp	al,*2
23641 5E5F           75           25            jne 	.1EB
23642                       00005E61            .1EC:
23643                                           ! 2863       {
23644                                           ! 2864        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23645                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23646 5E61           8A46         06            mov	al,6[bp]
23647 5E64           24                     03  and	al,*3
23648                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23649 5E66           50                         push	ax
23650 5E67           B8                   0003  mov	ax,*3
23651 5E6A           2A46         F4            sub	al,0+..FFF7[bp]
23652 5E6D           80DC                   00  sbb	ah,*0
23653 5E70           44                         inc	sp
23654 5E71           44                         inc	sp
23655                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23656 5E72           D1E0                       shl	ax,*1
23657                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23658 5E74           89C3                       mov	bx,ax
23659 5E76           8A46         FB            mov	al,-5[bp]
23660 5E79           30E4                       xor	ah,ah
23661 5E7B           89D9                       mov	cx,bx
23662 5E7D           D3E8                       shr	ax,cl
23663                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23664 5E7F           24                     03  and	al,*3
23665                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23666 5E81           8846         FC            mov	-4[bp],al
23667                                           !BCC_EOS
23668                                           ! 2865       }
23669                                           ! 2866      else
23670                                           ! 2867       {
23671 5E84           EB           21            jmp .1ED
23672                       00005E86            .1EB:
23673                                           ! 2868        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23674                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23675 5E86           8A46         06            mov	al,6[bp]
23676 5E89           24                     07  and	al,*7
23677                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23678 5E8B           50                         push	ax
23679 5E8C           B8                   0007  mov	ax,*7
23680 5E8F           2A46         F4            sub	al,0+..FFF7[bp]
23681 5E92           80DC                   00  sbb	ah,*0
23682 5E95           44                         inc	sp
23683 5E96           44                         inc	sp
23684                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23685 5E97           89C3                       mov	bx,ax
23686 5E99           8A46         FB            mov	al,-5[bp]
23687 5E9C           30E4                       xor	ah,ah
23688 5E9E           89D9                       mov	cx,bx
23689 5EA0           D3E8                       shr	ax,cl
23690                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23691 5EA2           24                     01  and	al,*1
23692                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23693 5EA4           8846         FC            mov	-4[bp],al
23694                                           !BCC_EOS
23695                                           ! 2869       }
23696                                           ! 2870      break;
23697                       00005EA7            .1ED:
23698 5EA7           EB           51            jmp .1DC
23699                                           !BCC_EOS
23700                                           ! 2871    case 0x05:
23701                                           ! 2872      addr=CX+DX*(read_word(0x40,0x4A)*8);
23702                       00005EA9            .1EE:
23703                                           ! Debug: list int = const $4A (used reg = )
23704 5EA9           B8                   004A  mov	ax,*$4A
23705 5EAC           50                         push	ax
23706                                           ! Debug: list int = const $40 (used reg = )
23707 5EAD           B8                   0040  mov	ax,*$40
23708 5EB0           50                         push	ax
23709                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23710 5EB1           E8         1E99            call	_read_word
23711 5EB4           83C4                   04  add	sp,*4
23712                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23713 5EB7           B1                     03  mov	cl,*3
23714 5EB9           D3E0                       shl	ax,cl
23715                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23716                                           ! Debug: expression subtree swapping
23717 5EBB           8B4E         08            mov	cx,8[bp]
23718 5EBE           F7E9                       imul	cx
23719                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23720                                           ! Debug: expression subtree swapping
23721 5EC0           0346         06            add	ax,6[bp]
23722                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23723 5EC3           8946         F8            mov	-8[bp],ax
23724                                           !BCC_EOS
23725                                           ! 2873      attr=read_byte(0xa000,addr);
23726                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23727 5EC6           FF76         F8            push	-8[bp]
23728                                           ! Debug: list unsigned int = const $A000 (used reg = )
23729 5EC9           B8                   A000  mov	ax,#$A000
23730 5ECC           50                         push	ax
23731                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23732 5ECD           E8         1E6A            call	_read_byte
23733 5ED0           83C4                   04  add	sp,*4
23734                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23735 5ED3           8846         FC            mov	-4[bp],al
23736                                           !BCC_EOS
23737                                           ! 2874      break;
23738 5ED6           EB           22            jmp .1DC
23739                                           !BCC_EOS
23740                                           ! 2875    default:
23741                                           ! 2876      unimplemented();
23742                       00005ED8            .1EF:
23743                                           ! Debug: func () void = unimplemented+0 (used reg = )
23744 5ED8           E8         1EEE            call	_unimplemented
23745                                           !BCC_EOS
23746                                           ! 2877      attr = 0;
23747                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23748 5EDB           30C0                       xor	al,al
23749 5EDD           8846         FC            mov	-4[bp],al
23750                                           !BCC_EOS
23751                                           ! 2878   }
23752                                           ! 2879  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23753 5EE0           EB           18            jmp .1DC
23754                       00005EE2            .1DE:
23755 5EE2           2C                     02  sub	al,*2
23756 5EE4         0F84         FF27            beq 	.1E8
23757 5EE8           2C                     01  sub	al,*1
23758 5EEA         0F84         FE8A            beq 	.1E0
23759 5EEE           2C                     01  sub	al,*1
23760 5EF0         0F84         FE84            beq 	.1DF
23761 5EF4           2C                     01  sub	al,*1
23762 5EF6           74           B1            je 	.1EE
23763 5EF8           EB           DE            jmp	.1EF
23764                       00005EFA            .1DC:
23765                       FFFFFFF4            ..FFF7	=	-$C
23766                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23767 5EFA           FF76         0A            push	$A[bp]
23768                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23769 5EFD           FF76         F6            push	-$A[bp]
23770                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23771 5F00           E8         1E4A            call	_read_word
23772 5F03           83C4                   04  add	sp,*4
23773                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23774 5F06           30C0                       xor	al,al
23775                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23776 5F08           0A46         FC            or	al,-4[bp]
23777                                           ! Debug: list unsigned int = ax+0 (used reg = )
23778 5F0B           50                         push	ax
23779                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23780 5F0C           FF76         0A            push	$A[bp]
23781                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23782 5F0F           FF76         F6            push	-$A[bp]
23783                                           ! Debug: func () void = write_word+0 (used reg = )
23784 5F12           E8         1E63            call	_write_word
23785 5F15           83C4                   06  add	sp,*6
23786                                           !BCC_EOS
23787                                           ! 2880 }
23788 5F18           89EC                       mov	sp,bp
23789 5F1A           5D                         pop	bp
23790 5F1B           C3                         ret
23791                                           ! 2881 static void biosfn_write_teletype (car, page, attr, flag)
23792                                           ! Register BX used in function biosfn_read_pixel
23793                                           ! 2882 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23794                       00005F1C            _biosfn_write_teletype:
23795                                           !BCC_EOS
23796                                           !BCC_EOS
23797                                           !BCC_EOS
23798                                           !BCC_EOS
23799                                           ! 2883 {
23800                                           ! 2884  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23801                                           !BCC_EOS
23802                                           ! 2885  Bit16u nbcols,nbrows,address;
23803                                           !BCC_EOS
23804                                           ! 2886  Bit16u cursor,dummy;
23805                                           !BCC_EOS
23806                                           ! 2887  if(page==0xff)
23807 5F1C           55                         push	bp
23808 5F1D           89E5                       mov	bp,sp
23809 5F1F           83C4                   F0  add	sp,*-$10
23810                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23811 5F22           8A46         06            mov	al,6[bp]
23812 5F25           3C                     FF  cmp	al,#$FF
23813 5F27           75           11            jne 	.1F0
23814                       00005F29            .1F1:
23815                                           ! 2888   page=read_byte(0x40,0x62);
23816                                           ! Debug: list int = const $62 (used reg = )
23817 5F29           B8                   0062  mov	ax,*$62
23818 5F2C           50                         push	ax
23819                                           ! Debug: list int = const $40 (used reg = )
23820 5F2D           B8                   0040  mov	ax,*$40
23821 5F30           50                         push	ax
23822                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23823 5F31           E8         1E06            call	_read_byte
23824 5F34           83C4                   04  add	sp,*4
23825                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23826 5F37           8846         06            mov	6[bp],al
23827                                           !BCC_EOS
23828                                           ! 2889  mode=read_byte(0x40,0x49);
23829                       00005F3A            .1F0:
23830                                           ! Debug: list int = const $49 (used reg = )
23831 5F3A           B8                   0049  mov	ax,*$49
23832 5F3D           50                         push	ax
23833                                           ! Debug: list int = const $40 (used reg = )
23834 5F3E           B8                   0040  mov	ax,*$40
23835 5F41           50                         push	ax
23836                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23837 5F42           E8         1DF5            call	_read_byte
23838 5F45           83C4                   04  add	sp,*4
23839                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23840 5F48           8846         FC            mov	-4[bp],al
23841                                           !BCC_EOS
23842                                           ! 2890  line=find_vga_entry(mode);
23843                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23844 5F4B           8A46         FC            mov	al,-4[bp]
23845 5F4E           30E4                       xor	ah,ah
23846 5F50           50                         push	ax
23847                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23848 5F51           E8         1CFA            call	_find_vga_entry
23849 5F54           44                         inc	sp
23850 5F55           44                         inc	sp
23851                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23852 5F56           8846         FB            mov	-5[bp],al
23853                                           !BCC_EOS
23854                                           ! 2891  if(line==0xFF)return;
23855                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23856 5F59           8A46         FB            mov	al,-5[bp]
23857 5F5C           3C                     FF  cmp	al,#$FF
23858 5F5E           75           04            jne 	.1F2
23859                       00005F60            .1F3:
23860 5F60           89EC                       mov	sp,bp
23861 5F62           5D                         pop	bp
23862 5F63           C3                         ret
23863                                           !BCC_EOS
23864                                           ! 2892  biosfn_get_cursor_pos(page,&dummy,&cursor);
23865                       00005F64            .1F2:
23866                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23867 5F64           8D5E         F2            lea	bx,-$E[bp]
23868 5F67           53                         push	bx
23869                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23870 5F68           8D5E         F0            lea	bx,-$10[bp]
23871 5F6B           53                         push	bx
23872                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23873 5F6C           8A46         06            mov	al,6[bp]
23874 5F6F           30E4                       xor	ah,ah
23875 5F71           50                         push	ax
23876                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23877 5F72           E8         E50F            call	_biosfn_get_cursor_pos
23878 5F75           83C4                   06  add	sp,*6
23879                                           !BCC_EOS
23880                                           ! 2893  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23881                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23882 5F78           8A46         F2            mov	al,-$E[bp]
23883                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23884 5F7B           8846         FE            mov	-2[bp],al
23885                                           !BCC_EOS
23886                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23887 5F7E           8B46         F2            mov	ax,-$E[bp]
23888 5F81           30C0                       xor	al,al
23889                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23890 5F83           88E0                       mov	al,ah
23891 5F85           30E4                       xor	ah,ah
23892                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23893 5F87           8846         FD            mov	-3[bp],al
23894                                           !BCC_EOS
23895                                           ! 2894  nbrows=read_byte(0x40,0x84)+1;
23896                                           ! Debug: list int = const $84 (used reg = )
23897 5F8A           B8                   0084  mov	ax,#$84
23898 5F8D           50                         push	ax
23899                                           ! Debug: list int = const $40 (used reg = )
23900 5F8E           B8                   0040  mov	ax,*$40
23901 5F91           50                         push	ax
23902                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23903 5F92           E8         1DA5            call	_read_byte
23904 5F95           83C4                   04  add	sp,*4
23905                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23906 5F98           30E4                       xor	ah,ah
23907                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23908 5F9A           40                         inc	ax
23909 5F9B           8946         F6            mov	-$A[bp],ax
23910                                           !BCC_EOS
23911                                           ! 2895  nbcols=read_word(0x40,0x4A);
23912                                           ! Debug: list int = const $4A (used reg = )
23913 5F9E           B8                   004A  mov	ax,*$4A
23914 5FA1           50                         push	ax
23915                                           ! Debug: list int = const $40 (used reg = )
23916 5FA2           B8                   0040  mov	ax,*$40
23917 5FA5           50                         push	ax
23918                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23919 5FA6           E8         1DA4            call	_read_word
23920 5FA9           83C4                   04  add	sp,*4
23921                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23922 5FAC           8946         F8            mov	-8[bp],ax
23923                                           !BCC_EOS
23924                                           ! 2896  switch(car)
23925 5FAF           8A46         04            mov	al,4[bp]
23926                                           ! 2897   {
23927 5FB2           E9         01EF            br 	.1F6
23928                                           ! 2898    case 7:
23929                                           ! 2899     break;
23930                       00005FB5            .1F7:
23931 5FB5           E9         020D            br 	.1F4
23932                                           !BCC_EOS
23933                                           ! 2900    case 8:
23934                                           ! 2901     if(xcurs>0)xcurs--;
23935                       00005FB8            .1F8:
23936                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23937 5FB8           8A46         FE            mov	al,-2[bp]
23938 5FBB           84C0                       test	al,al
23939 5FBD           74           07            je  	.1F9
23940                       00005FBF            .1FA:
23941                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23942 5FBF           8A46         FE            mov	al,-2[bp]
23943 5FC2           48                         dec	ax
23944 5FC3           8846         FE            mov	-2[bp],al
23945                                           !BCC_EOS
23946                                           ! 2902     break;
23947                       00005FC6            .1F9:
23948 5FC6           E9         01FC            br 	.1F4
23949                                           !BCC_EOS
23950                                           ! 2903    case '\r':
23951                                           ! 2904     xcurs=0;
23952                       00005FC9            .1FB:
23953                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23954 5FC9           30C0                       xor	al,al
23955 5FCB           8846         FE            mov	-2[bp],al
23956                                           !BCC_EOS
23957                                           ! 2905     break;
23958 5FCE           E9         01F4            br 	.1F4
23959                                           !BCC_EOS
23960                                           ! 2906    case '\n':
23961                                           ! 2907     ycurs++;
23962                       00005FD1            .1FC:
23963                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23964 5FD1           8A46         FD            mov	al,-3[bp]
23965 5FD4           40                         inc	ax
23966 5FD5           8846         FD            mov	-3[bp],al
23967                                           !BCC_EOS
23968                                           ! 2908     break;
23969 5FD8           E9         01EA            br 	.1F4
23970                                           !BCC_EOS
23971                                           ! 2909    case '\t':
23972                                           ! 2910     do
23973                       00005FDB            .1FD:
23974                                           ! 2911      {
23975                       00005FDB            .200:
23976                                           ! 2912       biosfn_write_teletype(' ',page,attr,flag);
23977                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23978 5FDB           8A46         0A            mov	al,$A[bp]
23979 5FDE           30E4                       xor	ah,ah
23980 5FE0           50                         push	ax
23981                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23982 5FE1           8A46         08            mov	al,8[bp]
23983 5FE4           30E4                       xor	ah,ah
23984 5FE6           50                         push	ax
23985                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23986 5FE7           8A46         06            mov	al,6[bp]
23987 5FEA           30E4                       xor	ah,ah
23988 5FEC           50                         push	ax
23989                                           ! Debug: list int = const $20 (used reg = )
23990 5FED           B8                   0020  mov	ax,*$20
23991 5FF0           50                         push	ax
23992                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23993 5FF1           E8         FF28            call	_biosfn_write_teletype
23994 5FF4           83C4                   08  add	sp,*8
23995                                           !BCC_EOS
23996                                           ! 2913       biosfn_get_cursor_pos(page,&dummy,&cursor);
23997                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23998 5FF7           8D5E         F2            lea	bx,-$E[bp]
23999 5FFA           53                         push	bx
24000                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
24001 5FFB           8D5E         F0            lea	bx,-$10[bp]
24002 5FFE           53                         push	bx
24003                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
24004 5FFF           8A46         06            mov	al,6[bp]
24005 6002           30E4                       xor	ah,ah
24006 6004           50                         push	ax
24007                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
24008 6005           E8         E47C            call	_biosfn_get_cursor_pos
24009 6008           83C4                   06  add	sp,*6
24010                                           !BCC_EOS
24011                                           ! 2914       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
24012                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
24013 600B           8A46         F2            mov	al,-$E[bp]
24014                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24015 600E           8846         FE            mov	-2[bp],al
24016                                           !BCC_EOS
24017                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
24018 6011           8B46         F2            mov	ax,-$E[bp]
24019 6014           30C0                       xor	al,al
24020                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
24021 6016           88E0                       mov	al,ah
24022 6018           30E4                       xor	ah,ah
24023                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
24024 601A           8846         FD            mov	-3[bp],al
24025                                           !BCC_EOS
24026                                           ! 2915      }while(xcurs%8==0);
24027                       0000601D            .1FF:
24028                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
24029 601D           8A46         FE            mov	al,-2[bp]
24030 6020           30E4                       xor	ah,ah
24031 6022           24                     07  and	al,*7
24032                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
24033 6024           84C0                       test	al,al
24034 6026           74           B3            je 	.200
24035                       00006028            .201:
24036                                           !BCC_EOS
24037                                           ! 2916     break;
24038                       00006028            .1FE:
24039 6028           E9         019A            br 	.1F4
24040                                           !BCC_EOS
24041                                           ! 2917    default:
24042                                           ! 2918     if(vga_modes[line].class==0x00)
24043                       0000602B            .202:
24044                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24045 602B           8A46         FB            mov	al,-5[bp]
24046 602E           30E4                       xor	ah,ah
24047 6030           B1                     03  mov	cl,*3
24048 6032           D3E0                       shl	ax,cl
24049 6034           89C3                       mov	bx,ax
24050 6036           81C3                 0206  add	bx,#_vga_modes
24051                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24052 603A           8A47         01            mov	al,1[bx]
24053 603D           84C0                       test	al,al
24054 603F         0F85         0082            bne 	.203
24055                       00006043            .204:
24056                                           ! 2919      {
24057                                           ! 2920       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
24058                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
24059 6043           8A46         FD            mov	al,-3[bp]
24060 6046           30E4                       xor	ah,ah
24061 6048           8B4E         F8            mov	cx,-8[bp]
24062 604B           F7E9                       imul	cx
24063                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24064                                           ! Debug: expression subtree swapping
24065 604D           0246         FE            add	al,-2[bp]
24066 6050           80D4                   00  adc	ah,*0
24067                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24068 6053           D1E0                       shl	ax,*1
24069 6055           50                         push	ax
24070                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24071 6056           8B46         F8            mov	ax,-8[bp]
24072 6059           8B4E         F6            mov	cx,-$A[bp]
24073 605C           F7E9                       imul	cx
24074                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24075 605E           D1E0                       shl	ax,*1
24076                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24077 6060           0C                     FF  or	al,#$FF
24078                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24079                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24080 6062           89C3                       mov	bx,ax
24081 6064           8A46         06            mov	al,6[bp]
24082 6067           30E4                       xor	ah,ah
24083 6069           93                         xchg	ax,bx
24084 606A           40                         inc	ax
24085 606B           89D9                       mov	cx,bx
24086 606D           F7E9                       imul	cx
24087                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24088 606F           0346         EE            add	ax,0+..FFF6[bp]
24089 6072           44                         inc	sp
24090 6073           44                         inc	sp
24091                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24092 6074           8946         F4            mov	-$C[bp],ax
24093                                           !BCC_EOS
24094                                           ! 2921       write_byte(vga_modes[line].sstart,address,car);
24095                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
24096 6077           8A46         04            mov	al,4[bp]
24097 607A           30E4                       xor	ah,ah
24098 607C           50                         push	ax
24099                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
24100 607D           FF76         F4            push	-$C[bp]
24101                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
24102 6080           8A46         FB            mov	al,-5[bp]
24103 6083           30E4                       xor	ah,ah
24104 6085           B1                     03  mov	cl,*3
24105 6087           D3E0                       shl	ax,cl
24106 6089           89C3                       mov	bx,ax
24107 608B           81C3                 0206  add	bx,#_vga_modes
24108                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24109 608F           FF77         04            push	4[bx]
24110                                           ! Debug: func () void = write_byte+0 (used reg = )
24111 6092           E8         1CCB            call	_write_byte
24112 6095           83C4                   06  add	sp,*6
24113                                           !BCC_EOS
24114                                           ! 2922       if(flag==3)
24115                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
24116 6098           8A46         0A            mov	al,$A[bp]
24117 609B           3C                     03  cmp	al,*3
24118 609D           75           23            jne 	.205
24119                       0000609F            .206:
24120                                           ! 2923        write_byte(vga_modes[line].sstart,address+1,attr);
24121                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
24122 609F           8A46         08            mov	al,8[bp]
24123 60A2           30E4                       xor	ah,ah
24124 60A4           50                         push	ax
24125                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
24126 60A5           8B46         F4            mov	ax,-$C[bp]
24127                                           ! Debug: list unsigned int = ax+1 (used reg = )
24128 60A8           40                         inc	ax
24129 60A9           50                         push	ax
24130                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
24131 60AA           8A46         FB            mov	al,-5[bp]
24132 60AD           30E4                       xor	ah,ah
24133 60AF           B1                     03  mov	cl,*3
24134 60B1           D3E0                       shl	ax,cl
24135 60B3           89C3                       mov	bx,ax
24136 60B5           81C3                 0206  add	bx,#_vga_modes
24137                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24138 60B9           FF77         04            push	4[bx]
24139                                           ! Debug: func () void = write_byte+0 (used reg = )
24140 60BC           E8         1CA1            call	_write_byte
24141 60BF           83C4                   06  add	sp,*6
24142                                           !BCC_EOS
24143                                           ! 2924      }
24144                       000060C2            .205:
24145                                           ! 2925     else
24146                                           ! 2926      {
24147 60C2           E9         00D6            br 	.207
24148                       000060C5            .203:
24149                                           ! 2927       cheight=video_param_table[line_to_vpti[line]].cheight;
24150                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
24151 60C5           8A46         FB            mov	al,-5[bp]
24152 60C8           30E4                       xor	ah,ah
24153 60CA           89C3                       mov	bx,ax
24154                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
24155 60CC           8A87       0286            mov	al,_line_to_vpti[bx]
24156 60D0           30E4                       xor	ah,ah
24157 60D2           B1                     06  mov	cl,*6
24158 60D4           D3E0                       shl	ax,cl
24159 60D6           89C3                       mov	bx,ax
24160 60D8           81C3                 029A  add	bx,#_video_param_table
24161                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
24162 60DC           8A47         02            mov	al,2[bx]
24163 60DF           8846         FF            mov	-1[bp],al
24164                                           !BCC_EOS
24165                                           ! 2928       bpp=vga_modes[line].pixbits;
24166                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24167 60E2           8A46         FB            mov	al,-5[bp]
24168 60E5           30E4                       xor	ah,ah
24169 60E7           B1                     03  mov	cl,*3
24170 60E9           D3E0                       shl	ax,cl
24171 60EB           89C3                       mov	bx,ax
24172 60ED           81C3                 0206  add	bx,#_vga_modes
24173                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
24174 60F1           8A47         03            mov	al,3[bx]
24175 60F4           8846         FA            mov	-6[bp],al
24176                                           !BCC_EOS
24177                                           ! 2929       switch(vga_modes[line].memmodel)
24178                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24179 60F7           8A46         FB            mov	al,-5[bp]
24180 60FA           30E4                       xor	ah,ah
24181 60FC           B1                     03  mov	cl,*3
24182 60FE           D3E0                       shl	ax,cl
24183 6100           89C3                       mov	bx,ax
24184 6102           81C3                 0206  add	bx,#_vga_modes
24185 6106           8A47         02            mov	al,2[bx]
24186                                           ! 2930        {
24187 6109           EB           7A            jmp .20A
24188                                           ! 2931         case 0x04:
24189                                           ! 2932         case 0x03:
24190                       0000610B            .20B:
24191                                           ! 2933           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24192                       0000610B            .20C:
24193                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24194 610B           8A46         FF            mov	al,-1[bp]
24195 610E           30E4                       xor	ah,ah
24196 6110           50                         push	ax
24197                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24198 6111           FF76         F8            push	-8[bp]
24199                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24200 6114           8A46         FD            mov	al,-3[bp]
24201 6117           30E4                       xor	ah,ah
24202 6119           50                         push	ax
24203                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24204 611A           8A46         FE            mov	al,-2[bp]
24205 611D           30E4                       xor	ah,ah
24206 611F           50                         push	ax
24207                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24208 6120           8A46         08            mov	al,8[bp]
24209 6123           30E4                       xor	ah,ah
24210 6125           50                         push	ax
24211                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24212 6126           8A46         04            mov	al,4[bp]
24213 6129           30E4                       xor	ah,ah
24214 612B           50                         push	ax
24215                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24216 612C           E8         F08C            call	_write_gfx_char_pl4
24217 612F           83C4                   0C  add	sp,*$C
24218                                           !BCC_EOS
24219                                           ! 2934           break;
24220 6132           EB           67            jmp .208
24221                                           !BCC_EOS
24222                                           ! 2935         case 0x02:
24223                                           ! 2936           write_gfx_char_cga(car,
24224                       00006134            .20D:
24225                                           ! 2936 attr,xcurs,ycurs,nbcols,bpp);
24226                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24227 6134           8A46         FA            mov	al,-6[bp]
24228 6137           30E4                       xor	ah,ah
24229 6139           50                         push	ax
24230                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24231 613A           FF76         F8            push	-8[bp]
24232                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24233 613D           8A46         FD            mov	al,-3[bp]
24234 6140           30E4                       xor	ah,ah
24235 6142           50                         push	ax
24236                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24237 6143           8A46         FE            mov	al,-2[bp]
24238 6146           30E4                       xor	ah,ah
24239 6148           50                         push	ax
24240                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24241 6149           8A46         08            mov	al,8[bp]
24242 614C           30E4                       xor	ah,ah
24243 614E           50                         push	ax
24244                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24245 614F           8A46         04            mov	al,4[bp]
24246 6152           30E4                       xor	ah,ah
24247 6154           50                         push	ax
24248                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24249 6155           E8         F1D6            call	_write_gfx_char_cga
24250 6158           83C4                   0C  add	sp,*$C
24251                                           !BCC_EOS
24252                                           ! 2937           break;
24253 615B           EB           3E            jmp .208
24254                                           !BCC_EOS
24255                                           ! 2938         case 0x05:
24256                                           ! 2939           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24257                       0000615D            .20E:
24258                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24259 615D           FF76         F8            push	-8[bp]
24260                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24261 6160           8A46         FD            mov	al,-3[bp]
24262 6163           30E4                       xor	ah,ah
24263 6165           50                         push	ax
24264                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24265 6166           8A46         FE            mov	al,-2[bp]
24266 6169           30E4                       xor	ah,ah
24267 616B           50                         push	ax
24268                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24269 616C           8A46         08            mov	al,8[bp]
24270 616F           30E4                       xor	ah,ah
24271 6171           50                         push	ax
24272                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24273 6172           8A46         04            mov	al,4[bp]
24274 6175           30E4                       xor	ah,ah
24275 6177           50                         push	ax
24276                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24277 6178           E8         F3B6            call	_write_gfx_char_lin
24278 617B           83C4                   0A  add	sp,*$A
24279                                           !BCC_EOS
24280                                           ! 2940           break;
24281 617E           EB           1B            jmp .208
24282                                           !BCC_EOS
24283                                           ! 2941         default:
24284                                           ! 2942           unimplemented();
24285                       00006180            .20F:
24286                                           ! Debug: func () void = unimplemented+0 (used reg = )
24287 6180           E8         1C46            call	_unimplemented
24288                                           !BCC_EOS
24289                                           ! 2943        }
24290                                           ! 2944      }
24291 6183           EB           16            jmp .208
24292                       00006185            .20A:
24293 6185           2C                     02  sub	al,*2
24294 6187           74           AB            je 	.20D
24295 6189           2C                     01  sub	al,*1
24296 618B         0F84         FF7C            beq 	.20C
24297 618F           2C                     01  sub	al,*1
24298 6191         0F84         FF76            beq 	.20B
24299 6195           2C                     01  sub	al,*1
24300 6197           74           C4            je 	.20E
24301 6199           EB           E5            jmp	.20F
24302                       0000619B            .208:
24303                                           ! 2945     xcurs++;
24304                       0000619B            .207:
24305                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24306 619B           8A46         FE            mov	al,-2[bp]
24307 619E           40                         inc	ax
24308 619F           8846         FE            mov	-2[bp],al
24309                                           !BCC_EOS
24310                                           ! 2946   }
24311                                           ! 2947  if(xcurs==nbcols)
24312 61A2           EB           21            jmp .1F4
24313                       000061A4            .1F6:
24314 61A4           2C                     07  sub	al,*7
24315 61A6         0F84         FE0B            beq 	.1F7
24316 61AA           2C                     01  sub	al,*1
24317 61AC         0F84         FE08            beq 	.1F8
24318 61B0           2C                     01  sub	al,*1
24319 61B2         0F84         FE25            beq 	.1FD
24320 61B6           2C                     01  sub	al,*1
24321 61B8         0F84         FE15            beq 	.1FC
24322 61BC           2C                     03  sub	al,*3
24323 61BE         0F84         FE07            beq 	.1FB
24324 61C2           E9         FE66            br 	.202
24325                       000061C5            .1F4:
24326                       FFFFFFEE            ..FFF6	=	-$12
24327                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24328 61C5           8A46         FE            mov	al,-2[bp]
24329 61C8           30E4                       xor	ah,ah
24330 61CA           3B46         F8            cmp	ax,-8[bp]
24331 61CD           75           0C            jne 	.210
24332                       000061CF            .211:
24333                                           ! 2948   {xcurs=0;
24334                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24335 61CF           30C0                       xor	al,al
24336 61D1           8846         FE            mov	-2[bp],al
24337                                           !BCC_EOS
24338                                           ! 2949    ycurs++;
24339                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24340 61D4           8A46         FD            mov	al,-3[bp]
24341 61D7           40                         inc	ax
24342 61D8           8846         FD            mov	-3[bp],al
24343                                           !BCC_EOS
24344                                           ! 2950   }
24345                                           ! 2951  if(ycurs==nbrows)
24346                       000061DB            .210:
24347                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24348 61DB           8A46         FD            mov	al,-3[bp]
24349 61DE           30E4                       xor	ah,ah
24350 61E0           3B46         F6            cmp	ax,-$A[bp]
24351 61E3         0F85         00C9            bne 	.212
24352                       000061E7            .213:
24353                                           ! 2952   {
24354                                           ! 2953    if(vga_modes[line].class==0x00)
24355                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24356 61E7           8A46         FB            mov	al,-5[bp]
24357 61EA           30E4                       xor	ah,ah
24358 61EC           B1                     03  mov	cl,*3
24359 61EE           D3E0                       shl	ax,cl
24360 61F0           89C3                       mov	bx,ax
24361 61F2           81C3                 0206  add	bx,#_vga_modes
24362                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24363 61F6           8A47         01            mov	al,1[bx]
24364 61F9           84C0                       test	al,al
24365 61FB         0F85         0081            bne 	.214
24366                       000061FF            .215:
24367                                           ! 2954     {
24368                                           ! 2955      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
24369                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24370 61FF           8A46         FD            mov	al,-3[bp]
24371 6202           30E4                       xor	ah,ah
24372                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
24373 6204           48                         dec	ax
24374 6205           8B4E         F8            mov	cx,-8[bp]
24375 6208           F7E9                       imul	cx
24376                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24377                                           ! Debug: expression subtree swapping
24378 620A           0246         FE            add	al,-2[bp]
24379 620D           80D4                   00  adc	ah,*0
24380                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24381 6210           D1E0                       shl	ax,*1
24382 6212           50                         push	ax
24383                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24384 6213           8B46         F8            mov	ax,-8[bp]
24385 6216           8B4E         F6            mov	cx,-$A[bp]
24386 6219           F7E9                       imul	cx
24387                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24388 621B           D1E0                       shl	ax,*1
24389                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24390 621D           0C                     FF  or	al,#$FF
24391                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24392                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24393 621F           89C3                       mov	bx,ax
24394 6221           8A46         06            mov	al,6[bp]
24395 6224           30E4                       xor	ah,ah
24396 6226           93                         xchg	ax,bx
24397 6227           40                         inc	ax
24398 6228           89D9                       mov	cx,bx
24399 622A           F7E9                       imul	cx
24400                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24401 622C           0346         EE            add	ax,-$12[bp]
24402 622F           44                         inc	sp
24403 6230           44                         inc	sp
24404                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24405 6231           8946         F4            mov	-$C[bp],ax
24406                                           !BCC_EOS
24407                                           ! 2956      attr=read_byte(vga_modes[line].sstart,address+1);
24408                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
24409 6234           8B46         F4            mov	ax,-$C[bp]
24410                                           ! Debug: list unsigned int = ax+1 (used reg = )
24411 6237           40                         inc	ax
24412 6238           50                         push	ax
24413                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
24414 6239           8A46         FB            mov	al,-5[bp]
24415 623C           30E4                       xor	ah,ah
24416 623E           B1                     03  mov	cl,*3
24417 6240           D3E0                       shl	ax,cl
24418 6242           89C3                       mov	bx,ax
24419 6244           81C3                 0206  add	bx,#_vga_modes
24420                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24421 6248           FF77         04            push	4[bx]
24422                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24423 624B           E8         1AEC            call	_read_byte
24424 624E           83C4                   04  add	sp,*4
24425                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
24426 6251           8846         08            mov	8[bp],al
24427                                           !BCC_EOS
24428                                           ! 2957      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
24429                                           ! Debug: list int = const 1 (used reg = )
24430 6254           B8                   0001  mov	ax,*1
24431 6257           50                         push	ax
24432                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24433 6258           8A46         06            mov	al,6[bp]
24434 625B           30E4                       xor	ah,ah
24435 625D           50                         push	ax
24436                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24437 625E           8B46         F8            mov	ax,-8[bp]
24438                                           ! Debug: list unsigned int = ax-1 (used reg = )
24439 6261           48                         dec	ax
24440 6262           50                         push	ax
24441                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24442 6263           8B46         F6            mov	ax,-$A[bp]
24443                                           ! Debug: list unsigned int = ax-1 (used reg = )
24444 6266           48                         dec	ax
24445 6267           50                         push	ax
24446                                           ! Debug: list int = const 0 (used reg = )
24447 6268           31C0                       xor	ax,ax
24448 626A           50                         push	ax
24449                                           ! Debug: list int = const 0 (used reg = )
24450 626B           31C0                       xor	ax,ax
24451 626D           50                         push	ax
24452                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
24453 626E           8A46         08            mov	al,8[bp]
24454 6271           30E4                       xor	ah,ah
24455 6273           50                         push	ax
24456                                           ! Debug: list int = const 1 (used reg = )
24457 6274           B8                   0001  mov	ax,*1
24458 6277           50                         push	ax
24459                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24460 6278           E8         E714            call	_biosfn_scroll
24461 627B           83C4                   10  add	sp,*$10
24462                                           !BCC_EOS
24463                                           ! 2958     }
24464                                           ! 2959    else
24465                                           ! 2960     {
24466 627E           EB           27            jmp .216
24467                       00006280            .214:
24468                                           ! 2961      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24469                                           ! Debug: list int = const 1 (used reg = )
24470 6280           B8                   0001  mov	ax,*1
24471 6283           50                         push	ax
24472                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24473 6284           8A46         06            mov	al,6[bp]
24474 6287           30E4                       xor	ah,ah
24475 6289           50                         push	ax
24476                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24477 628A           8B46         F8            mov	ax,-8[bp]
24478                                           ! Debug: list unsigned int = ax-1 (used reg = )
24479 628D           48                         dec	ax
24480 628E           50                         push	ax
24481                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24482 628F           8B46         F6            mov	ax,-$A[bp]
24483                                           ! Debug: list unsigned int = ax-1 (used reg = )
24484 6292           48                         dec	ax
24485 6293           50                         push	ax
24486                                           ! Debug: list int = const 0 (used reg = )
24487 6294           31C0                       xor	ax,ax
24488 6296           50                         push	ax
24489                                           ! Debug: list int = const 0 (used reg = )
24490 6297           31C0                       xor	ax,ax
24491 6299           50                         push	ax
24492                                           ! Debug: list int = const 0 (used reg = )
24493 629A           31C0                       xor	ax,ax
24494 629C           50                         push	ax
24495                                           ! Debug: list int = const 1 (used reg = )
24496 629D           B8                   0001  mov	ax,*1
24497 62A0           50                         push	ax
24498                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24499 62A1           E8         E6EB            call	_biosfn_scroll
24500 62A4           83C4                   10  add	sp,*$10
24501                                           !BCC_EOS
24502                                           ! 2962     }
24503                                           ! 2963    ycurs-=1;
24504                       000062A7            .216:
24505                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24506 62A7           8A46         FD            mov	al,-3[bp]
24507 62AA           30E4                       xor	ah,ah
24508 62AC           48                         dec	ax
24509 62AD           8846         FD            mov	-3[bp],al
24510                                           !BCC_EOS
24511                                           ! 2964   }
24512                                           ! 2965  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24513                       000062B0            .212:
24514                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24515 62B0           8A46         FD            mov	al,-3[bp]
24516 62B3           30E4                       xor	ah,ah
24517 62B5           8946         F2            mov	-$E[bp],ax
24518                                           !BCC_EOS
24519                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24520 62B8           8B46         F2            mov	ax,-$E[bp]
24521 62BB           88C4                       mov	ah,al
24522 62BD           30C0                       xor	al,al
24523 62BF           8946         F2            mov	-$E[bp],ax
24524                                           !BCC_EOS
24525                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24526 62C2           8B46         F2            mov	ax,-$E[bp]
24527 62C5           0246         FE            add	al,-2[bp]
24528 62C8           80D4                   00  adc	ah,*0
24529 62CB           8946         F2            mov	-$E[bp],ax
24530                                           !BCC_EOS
24531                                           ! 2966  biosfn_set_cursor_pos(page,cursor);
24532                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24533 62CE           FF76         F2            push	-$E[bp]
24534                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24535 62D1           8A46         06            mov	al,6[bp]
24536 62D4           30E4                       xor	ah,ah
24537 62D6           50                         push	ax
24538                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24539 62D7           E8         E0AA            call	_biosfn_set_cursor_pos
24540 62DA           83C4                   04  add	sp,*4
24541                                           !BCC_EOS
24542                                           ! 2967 }
24543 62DD           89EC                       mov	sp,bp
24544 62DF           5D                         pop	bp
24545 62E0           C3                         ret
24546                                           ! 2968 #asm
24547                                           !BCC_ASM
24548                       00000008            _biosfn_write_teletype.flag	set	8
24549                       00000006            _biosfn_write_teletype.attr	set	6
24550                       00000004            _biosfn_write_teletype.page	set	4
24551                       00000002            _biosfn_write_teletype.car	set	2
24552                       000062E1            biosfn_get_video_mode:
24553 62E1           1E                           push ds
24554 62E2           B8                   0040    mov ax, # 0x40
24555 62E5           8ED8                         mov ds, ax
24556 62E7           53                           push bx
24557 62E8           BB                   0062    mov bx, # 0x62
24558 62EB           8A07                         mov al, [bx]
24559 62ED           5B                           pop bx
24560 62EE           88C7                         mov bh, al
24561 62F0           53                           push bx
24562 62F1           BB                   0087    mov bx, # 0x87
24563 62F4           8A27                         mov ah, [bx]
24564 62F6           80E4                   80    and ah, #0x80
24565 62F9           BB                   0049    mov bx, # 0x49
24566 62FC           8A07                         mov al, [bx]
24567 62FE           08E0                         or al, ah
24568 6300           BB                   004A    mov bx, # 0x4A
24569 6303           8A27                         mov ah, [bx]
24570 6305           5B                           pop bx
24571 6306           1F                           pop ds
24572 6307           C3                           ret
24573                                           ! 2990 endasm
24574                                           !BCC_ENDASM
24575                                           ! 2991 #asm
24576                                           !BCC_ASM
24577                       00000008            _biosfn_write_teletype.flag	set	8
24578                       00000006            _biosfn_write_teletype.attr	set	6
24579                       00000004            _biosfn_write_teletype.page	set	4
24580                       00000002            _biosfn_write_teletype.car	set	2
24581                       00006308            biosfn_group_10:
24582 6308           3C                     00    cmp al, #0x00
24583 630A           75           02              jne int10_test_1001
24584 630C           EB           64              jmp biosfn_set_single_palette_reg
24585                       0000630E            int10_test_1001:
24586 630E           3C                     01    cmp al, #0x01
24587 6310           75           02              jne int10_test_1002
24588 6312           EB           78              jmp biosfn_set_overscan_border_color
24589                       00006314            int10_test_1002:
24590 6314           3C                     02    cmp al, #0x02
24591 6316           75           02              jne int10_test_1003
24592 6318           EB           7A              jmp biosfn_set_all_palette_reg
24593                       0000631A            int10_test_1003:
24594 631A           3C                     03    cmp al, #0x03
24595 631C           75           03              jne int10_test_1007
24596 631E           E9         00A0              jmp biosfn_toggle_intensity
24597                       00006321            int10_test_1007:
24598 6321           3C                     07    cmp al, #0x07
24599 6323           75           03              jne int10_test_1008
24600 6325           E9         00BF              jmp biosfn_get_single_palette_reg
24601                       00006328            int10_test_1008:
24602 6328           3C                     08    cmp al, #0x08
24603 632A           75           03              jne int10_test_1009
24604 632C           E9         00DC              jmp biosfn_read_overscan_border_color
24605                       0000632F            int10_test_1009:
24606 632F           3C                     09    cmp al, #0x09
24607 6331           75           03              jne int10_test_1010
24608 6333           E9         00E3              jmp biosfn_get_all_palette_reg
24609                       00006336            int10_test_1010:
24610 6336           3C                     10    cmp al, #0x10
24611 6338           75           03              jne int10_test_1012
24612 633A           E9         011D              jmp biosfn_set_single_dac_reg
24613                       0000633D            int10_test_1012:
24614 633D           3C                     12    cmp al, #0x12
24615 633F           75           03              jne int10_test_1013
24616 6341           E9         012F              jmp biosfn_set_all_dac_reg
24617                       00006344            int10_test_1013:
24618 6344           3C                     13    cmp al, #0x13
24619 6346           75           03              jne int10_test_1015
24620 6348           E9         0150              jmp biosfn_select_video_dac_color_page
24621                       0000634B            int10_test_1015:
24622 634B           3C                     15    cmp al, #0x15
24623 634D           75           03              jne int10_test_1017
24624 634F           E9         018C              jmp biosfn_read_single_dac_reg
24625                       00006352            int10_test_1017:
24626 6352           3C                     17    cmp al, #0x17
24627 6354           75           03              jne int10_test_1018
24628 6356           E9         01A0              jmp biosfn_read_all_dac_reg
24629                       00006359            int10_test_1018:
24630 6359           3C                     18    cmp al, #0x18
24631 635B           75           03              jne int10_test_1019
24632 635D           E9         01C1              jmp biosfn_set_pel_mask
24633                       00006360            int10_test_1019:
24634 6360           3C                     19    cmp al, #0x19
24635 6362           75           03              jne int10_test_101A
24636 6364           E9         01C5              jmp biosfn_read_pel_mask
24637                       00006367            int10_test_101A:
24638 6367           3C                     1A    cmp al, #0x1a
24639 6369           75           03              jne int10_group_10_unknown
24640 636B           E9         01C9              jmp biosfn_read_video_dac_state
24641                       0000636E            int10_group_10_unknown:
24642 636E           E8         1A66              call _unknown
24643 6371           C3                           ret
24644                       00006372            biosfn_set_single_palette_reg:
24645 6372           80FB                   14    cmp bl, #0x14
24646 6375           77           14              ja no_actl_reg1
24647 6377           50                           push ax
24648 6378           52                           push dx
24649 6379           BA                   03DA    mov dx, # 0x3da
24650 637C           EC                           in al, dx
24651 637D           BA                   03C0    mov dx, # 0x3c0
24652 6380           88D8                         mov al, bl
24653 6382           EE                           out dx, al
24654 6383           88F8                         mov al, bh
24655 6385           EE                           out dx, al
24656 6386           B0                     20    mov al, #0x20
24657 6388           EE                           out dx, al
24658 6389           5A                           pop dx
24659 638A           58                           pop ax
24660                       0000638B            no_actl_reg1:
24661 638B           C3                           ret
24662                                           ! 3073 endasm
24663                                           !BCC_ENDASM
24664                                           ! 3074 #asm
24665                                           !BCC_ASM
24666                       00000008            _biosfn_write_teletype.flag	set	8
24667                       00000006            _biosfn_write_teletype.attr	set	6
24668                       00000004            _biosfn_write_teletype.page	set	4
24669                       00000002            _biosfn_write_teletype.car	set	2
24670                       0000638C            biosfn_set_overscan_border_color:
24671 638C           53                           push bx
24672 638D           B3                     11    mov bl, #0x11
24673 638F           E8         FFE0              call biosfn_set_single_palette_reg
24674 6392           5B                           pop bx
24675 6393           C3                           ret
24676                                           ! 3081 endasm
24677                                           !BCC_ENDASM
24678                                           ! 3082 #asm
24679                                           !BCC_ASM
24680                       00000008            _biosfn_write_teletype.flag	set	8
24681                       00000006            _biosfn_write_teletype.attr	set	6
24682                       00000004            _biosfn_write_teletype.page	set	4
24683                       00000002            _biosfn_write_teletype.car	set	2
24684                       00006394            biosfn_set_all_palette_reg:
24685 6394           50                           push ax
24686 6395           53                           push bx
24687 6396           51                           push cx
24688 6397           52                           push dx
24689 6398           89D3                         mov bx, dx
24690 639A           BA                   03DA    mov dx, # 0x3da
24691 639D           EC                           in al, dx
24692 639E           B1                     00    mov cl, #0x00
24693 63A0           BA                   03C0    mov dx, # 0x3c0
24694                       000063A3            set_palette_loop:
24695 63A3           88C8                         mov al, cl
24696 63A5           EE                           out dx, al
24697 63A6           26                           seg es
24698 63A7           8A07                         mov al, [bx]
24699 63A9           EE                           out dx, al
24700 63AA           43                           inc bx
24701 63AB           FEC1                         inc cl
24702 63AD           80F9                   10    cmp cl, #0x10
24703 63B0           75           F1              jne set_palette_loop
24704 63B2           B0                     11    mov al, #0x11
24705 63B4           EE                           out dx, al
24706 63B5           26                           seg es
24707 63B6           8A07                         mov al, [bx]
24708 63B8           EE                           out dx, al
24709 63B9           B0                     20    mov al, #0x20
24710 63BB           EE                           out dx, al
24711 63BC           5A                           pop dx
24712 63BD           59                           pop cx
24713 63BE           5B                           pop bx
24714 63BF           58                           pop ax
24715 63C0           C3                           ret
24716                                           ! 3115 endasm
24717                                           !BCC_ENDASM
24718                                           ! 3116 #asm
24719                                           !BCC_ASM
24720                       00000008            _biosfn_write_teletype.flag	set	8
24721                       00000006            _biosfn_write_teletype.attr	set	6
24722                       00000004            _biosfn_write_teletype.page	set	4
24723                       00000002            _biosfn_write_teletype.car	set	2
24724                       000063C1            biosfn_toggle_intensity:
24725 63C1           50                           push ax
24726 63C2           53                           push bx
24727 63C3           52                           push dx
24728 63C4           BA                   03DA    mov dx, # 0x3da
24729 63C7           EC                           in al, dx
24730 63C8           BA                   03C0    mov dx, # 0x3c0
24731 63CB           B0                     10    mov al, #0x10
24732 63CD           EE                           out dx, al
24733 63CE           BA                   03C1    mov dx, # 0x3c1
24734 63D1           EC                           in al, dx
24735 63D2           24                     F7    and al, #0xf7
24736 63D4           80E3                   01    and bl, #0x01
24737 63D7           C0E3                   03    shl bl, 3
24738 63DA           08D8                         or al, bl
24739 63DC           BA                   03C0    mov dx, # 0x3c0
24740 63DF           EE                           out dx, al
24741 63E0           B0                     20    mov al, #0x20
24742 63E2           EE                           out dx, al
24743 63E3           5A                           pop dx
24744 63E4           5B                           pop bx
24745 63E5           58                           pop ax
24746 63E6           C3                           ret
24747                                           ! 3140 endasm
24748                                           !BCC_ENDASM
24749                                           ! 3141 #asm
24750                                           !BCC_ASM
24751                       00000008            _biosfn_write_teletype.flag	set	8
24752                       00000006            _biosfn_write_teletype.attr	set	6
24753                       00000004            _biosfn_write_teletype.page	set	4
24754                       00000002            _biosfn_write_teletype.car	set	2
24755                       000063E7            biosfn_get_single_palette_reg:
24756 63E7           80FB                   14    cmp bl, #0x14
24757 63EA           77           1E              ja no_actl_reg2
24758 63EC           50                           push ax
24759 63ED           52                           push dx
24760 63EE           BA                   03DA    mov dx, # 0x3da
24761 63F1           EC                           in al, dx
24762 63F2           BA                   03C0    mov dx, # 0x3c0
24763 63F5           88D8                         mov al, bl
24764 63F7           EE                           out dx, al
24765 63F8           BA                   03C1    mov dx, # 0x3c1
24766 63FB           EC                           in al, dx
24767 63FC           88C7                         mov bh, al
24768 63FE           BA                   03DA    mov dx, # 0x3da
24769 6401           EC                           in al, dx
24770 6402           BA                   03C0    mov dx, # 0x3c0
24771 6405           B0                     20    mov al, #0x20
24772 6407           EE                           out dx, al
24773 6408           5A                           pop dx
24774 6409           58                           pop ax
24775                       0000640A            no_actl_reg2:
24776 640A           C3                           ret
24777                                           ! 3164 endasm
24778                                           !BCC_ENDASM
24779                                           ! 3165 #asm
24780                                           !BCC_ASM
24781                       00000008            _biosfn_write_teletype.flag	set	8
24782                       00000006            _biosfn_write_teletype.attr	set	6
24783                       00000004            _biosfn_write_teletype.page	set	4
24784                       00000002            _biosfn_write_teletype.car	set	2
24785                       0000640B            biosfn_read_overscan_border_color:
24786 640B           50                           push ax
24787 640C           53                           push bx
24788 640D           B3                     11    mov bl, #0x11
24789 640F           E8         FFD5              call biosfn_get_single_palette_reg
24790 6412           88F8                         mov al, bh
24791 6414           5B                           pop bx
24792 6415           88C7                         mov bh, al
24793 6417           58                           pop ax
24794 6418           C3                           ret
24795                                           ! 3176 endasm
24796                                           !BCC_ENDASM
24797                                           ! 3177 #asm
24798                                           !BCC_ASM
24799                       00000008            _biosfn_write_teletype.flag	set	8
24800                       00000006            _biosfn_write_teletype.attr	set	6
24801                       00000004            _biosfn_write_teletype.page	set	4
24802                       00000002            _biosfn_write_teletype.car	set	2
24803                       00006419            biosfn_get_all_palette_reg:
24804 6419           50                           push ax
24805 641A           53                           push bx
24806 641B           51                           push cx
24807 641C           52                           push dx
24808 641D           89D3                         mov bx, dx
24809 641F           B1                     00    mov cl, #0x00
24810                       00006421            get_palette_loop:
24811 6421           BA                   03DA    mov dx, # 0x3da
24812 6424           EC                           in al, dx
24813 6425           BA                   03C0    mov dx, # 0x3c0
24814 6428           88C8                         mov al, cl
24815 642A           EE                           out dx, al
24816 642B           BA                   03C1    mov dx, # 0x3c1
24817 642E           EC                           in al, dx
24818 642F           26                           seg es
24819 6430           8807                         mov [bx], al
24820 6432           43                           inc bx
24821 6433           FEC1                         inc cl
24822 6435           80F9                   10    cmp cl, #0x10
24823 6438           75           E7              jne get_palette_loop
24824 643A           BA                   03DA    mov dx, # 0x3da
24825 643D           EC                           in al, dx
24826 643E           BA                   03C0    mov dx, # 0x3c0
24827 6441           B0                     11    mov al, #0x11
24828 6443           EE                           out dx, al
24829 6444           BA                   03C1    mov dx, # 0x3c1
24830 6447           EC                           in al, dx
24831 6448           26                           seg es
24832 6449           8807                         mov [bx], al
24833 644B           BA                   03DA    mov dx, # 0x3da
24834 644E           EC                           in al, dx
24835 644F           BA                   03C0    mov dx, # 0x3c0
24836 6452           B0                     20    mov al, #0x20
24837 6454           EE                           out dx, al
24838 6455           5A                           pop dx
24839 6456           59                           pop cx
24840 6457           5B                           pop bx
24841 6458           58                           pop ax
24842 6459           C3                           ret
24843                                           ! 3218 endasm
24844                                           !BCC_ENDASM
24845                                           ! 3219 #asm
24846                                           !BCC_ASM
24847                       00000008            _biosfn_write_teletype.flag	set	8
24848                       00000006            _biosfn_write_teletype.attr	set	6
24849                       00000004            _biosfn_write_teletype.page	set	4
24850                       00000002            _biosfn_write_teletype.car	set	2
24851                       0000645A            biosfn_set_single_dac_reg:
24852 645A           50                           push ax
24853 645B           52                           push dx
24854 645C           BA                   03C8    mov dx, # 0x3c8
24855 645F           88D8                         mov al, bl
24856 6461           EE                           out dx, al
24857 6462           BA                   03C9    mov dx, # 0x3c9
24858 6465           58                           pop ax
24859 6466           50                           push ax
24860 6467           88E0                         mov al, ah
24861 6469           EE                           out dx, al
24862 646A           88E8                         mov al, ch
24863 646C           EE                           out dx, al
24864 646D           88C8                         mov al, cl
24865 646F           EE                           out dx, al
24866 6470           5A                           pop dx
24867 6471           58                           pop ax
24868 6472           C3                           ret
24869                                           ! 3238 endasm
24870                                           !BCC_ENDASM
24871                                           ! 3239 #asm
24872                                           !BCC_ASM
24873                       00000008            _biosfn_write_teletype.flag	set	8
24874                       00000006            _biosfn_write_teletype.attr	set	6
24875                       00000004            _biosfn_write_teletype.page	set	4
24876                       00000002            _biosfn_write_teletype.car	set	2
24877                       00006473            biosfn_set_all_dac_reg:
24878 6473           50                           push ax
24879 6474           53                           push bx
24880 6475           51                           push cx
24881 6476           52                           push dx
24882 6477           BA                   03C8    mov dx, # 0x3c8
24883 647A           88D8                         mov al, bl
24884 647C           EE                           out dx, al
24885 647D           5A                           pop dx
24886 647E           52                           push dx
24887 647F           89D3                         mov bx, dx
24888 6481           BA                   03C9    mov dx, # 0x3c9
24889                       00006484            set_dac_loop:
24890 6484           26                           seg es
24891 6485           8A07                         mov al, [bx]
24892 6487           EE                           out dx, al
24893 6488           43                           inc bx
24894 6489           26                           seg es
24895 648A           8A07                         mov al, [bx]
24896 648C           EE                           out dx, al
24897 648D           43                           inc bx
24898 648E           26                           seg es
24899 648F           8A07                         mov al, [bx]
24900 6491           EE                           out dx, al
24901 6492           43                           inc bx
24902 6493           49                           dec cx
24903 6494           75           EE              jnz set_dac_loop
24904 6496           5A                           pop dx
24905 6497           59                           pop cx
24906 6498           5B                           pop bx
24907 6499           58                           pop ax
24908 649A           C3                           ret
24909                                           ! 3272 endasm
24910                                           !BCC_ENDASM
24911                                           ! 3273 #asm
24912                                           !BCC_ASM
24913                       00000008            _biosfn_write_teletype.flag	set	8
24914                       00000006            _biosfn_write_teletype.attr	set	6
24915                       00000004            _biosfn_write_teletype.page	set	4
24916                       00000002            _biosfn_write_teletype.car	set	2
24917                       0000649B            biosfn_select_video_dac_color_page:
24918 649B           50                           push ax
24919 649C           53                           push bx
24920 649D           52                           push dx
24921 649E           BA                   03DA    mov dx, # 0x3da
24922 64A1           EC                           in al, dx
24923 64A2           BA                   03C0    mov dx, # 0x3c0
24924 64A5           B0                     10    mov al, #0x10
24925 64A7           EE                           out dx, al
24926 64A8           BA                   03C1    mov dx, # 0x3c1
24927 64AB           EC                           in al, dx
24928 64AC           80E3                   01    and bl, #0x01
24929 64AF           75           0D              jnz set_dac_page
24930 64B1           24                     7F    and al, #0x7f
24931 64B3           C0E7                   07    shl bh, 7
24932 64B6           08F8                         or al, bh
24933 64B8           BA                   03C0    mov dx, # 0x3c0
24934 64BB           EE                           out dx, al
24935 64BC           EB           19              jmp set_actl_normal
24936                       000064BE            set_dac_page:
24937 64BE           50                           push ax
24938 64BF           BA                   03DA    mov dx, # 0x3da
24939 64C2           EC                           in al, dx
24940 64C3           BA                   03C0    mov dx, # 0x3c0
24941 64C6           B0                     14    mov al, #0x14
24942 64C8           EE                           out dx, al
24943 64C9           58                           pop ax
24944 64CA           24                     80    and al, #0x80
24945 64CC           75           03              jnz set_dac_16_page
24946 64CE           C0E7                   02    shl bh, 2
24947                       000064D1            set_dac_16_page:
24948 64D1           80E7                   0F    and bh, #0x0f
24949 64D4           88F8                         mov al, bh
24950 64D6           EE                           out dx, al
24951                       000064D7            set_actl_normal:
24952 64D7           B0                     20    mov al, #0x20
24953 64D9           EE                           out dx, al
24954 64DA           5A                           pop dx
24955 64DB           5B                           pop bx
24956 64DC           58                           pop ax
24957 64DD           C3                           ret
24958                                           ! 3315 endasm
24959                                           !BCC_ENDASM
24960                                           ! 3316 #asm
24961                                           !BCC_ASM
24962                       00000008            _biosfn_write_teletype.flag	set	8
24963                       00000006            _biosfn_write_teletype.attr	set	6
24964                       00000004            _biosfn_write_teletype.page	set	4
24965                       00000002            _biosfn_write_teletype.car	set	2
24966                       000064DE            biosfn_read_single_dac_reg:
24967 64DE           50                           push ax
24968 64DF           52                           push dx
24969 64E0           BA                   03C7    mov dx, # 0x3c7
24970 64E3           88D8                         mov al, bl
24971 64E5           EE                           out dx, al
24972 64E6           58                           pop ax
24973 64E7           88C4                         mov ah, al
24974 64E9           BA                   03C9    mov dx, # 0x3c9
24975 64EC           EC                           in al, dx
24976 64ED           86E0                         xchg al, ah
24977 64EF           50                           push ax
24978 64F0           EC                           in al, dx
24979 64F1           88C5                         mov ch, al
24980 64F3           EC                           in al, dx
24981 64F4           88C1                         mov cl, al
24982 64F6           5A                           pop dx
24983 64F7           58                           pop ax
24984 64F8           C3                           ret
24985                                           ! 3336 endasm
24986                                           !BCC_ENDASM
24987                                           ! 3337 #asm
24988                                           !BCC_ASM
24989                       00000008            _biosfn_write_teletype.flag	set	8
24990                       00000006            _biosfn_write_teletype.attr	set	6
24991                       00000004            _biosfn_write_teletype.page	set	4
24992                       00000002            _biosfn_write_teletype.car	set	2
24993                       000064F9            biosfn_read_all_dac_reg:
24994 64F9           50                           push ax
24995 64FA           53                           push bx
24996 64FB           51                           push cx
24997 64FC           52                           push dx
24998 64FD           BA                   03C7    mov dx, # 0x3c7
24999 6500           88D8                         mov al, bl
25000 6502           EE                           out dx, al
25001 6503           5A                           pop dx
25002 6504           52                           push dx
25003 6505           89D3                         mov bx, dx
25004 6507           BA                   03C9    mov dx, # 0x3c9
25005                       0000650A            read_dac_loop:
25006 650A           EC                           in al, dx
25007 650B           26                           seg es
25008 650C           8807                         mov [bx], al
25009 650E           43                           inc bx
25010 650F           EC                           in al, dx
25011 6510           26                           seg es
25012 6511           8807                         mov [bx], al
25013 6513           43                           inc bx
25014 6514           EC                           in al, dx
25015 6515           26                           seg es
25016 6516           8807                         mov [bx], al
25017 6518           43                           inc bx
25018 6519           49                           dec cx
25019 651A           75           EE              jnz read_dac_loop
25020 651C           5A                           pop dx
25021 651D           59                           pop cx
25022 651E           5B                           pop bx
25023 651F           58                           pop ax
25024 6520           C3                           ret
25025                                           ! 3370 endasm
25026                                           !BCC_ENDASM
25027                                           ! 3371 #asm
25028                                           !BCC_ASM
25029                       00000008            _biosfn_write_teletype.flag	set	8
25030                       00000006            _biosfn_write_teletype.attr	set	6
25031                       00000004            _biosfn_write_teletype.page	set	4
25032                       00000002            _biosfn_write_teletype.car	set	2
25033                       00006521            biosfn_set_pel_mask:
25034 6521           50                           push ax
25035 6522           52                           push dx
25036 6523           BA                   03C6    mov dx, # 0x3c6
25037 6526           88D8                         mov al, bl
25038 6528           EE                           out dx, al
25039 6529           5A                           pop dx
25040 652A           58                           pop ax
25041 652B           C3                           ret
25042                                           ! 3381 endasm
25043                                           !BCC_ENDASM
25044                                           ! 3382 #asm
25045                                           !BCC_ASM
25046                       00000008            _biosfn_write_teletype.flag	set	8
25047                       00000006            _biosfn_write_teletype.attr	set	6
25048                       00000004            _biosfn_write_teletype.page	set	4
25049                       00000002            _biosfn_write_teletype.car	set	2
25050                       0000652C            biosfn_read_pel_mask:
25051 652C           50                           push ax
25052 652D           52                           push dx
25053 652E           BA                   03C6    mov dx, # 0x3c6
25054 6531           EC                           in al, dx
25055 6532           88C3                         mov bl, al
25056 6534           5A                           pop dx
25057 6535           58                           pop ax
25058 6536           C3                           ret
25059                                           ! 3392 endasm
25060                                           !BCC_ENDASM
25061                                           ! 3393 #asm
25062                                           !BCC_ASM
25063                       00000008            _biosfn_write_teletype.flag	set	8
25064                       00000006            _biosfn_write_teletype.attr	set	6
25065                       00000004            _biosfn_write_teletype.page	set	4
25066                       00000002            _biosfn_write_teletype.car	set	2
25067                       00006537            biosfn_read_video_dac_state:
25068 6537           50                           push ax
25069 6538           52                           push dx
25070 6539           BA                   03DA    mov dx, # 0x3da
25071 653C           EC                           in al, dx
25072 653D           BA                   03C0    mov dx, # 0x3c0
25073 6540           B0                     10    mov al, #0x10
25074 6542           EE                           out dx, al
25075 6543           BA                   03C1    mov dx, # 0x3c1
25076 6546           EC                           in al, dx
25077 6547           88C3                         mov bl, al
25078 6549           C0EB                   07    shr bl, 7
25079 654C           BA                   03DA    mov dx, # 0x3da
25080 654F           EC                           in al, dx
25081 6550           BA                   03C0    mov dx, # 0x3c0
25082 6553           B0                     14    mov al, #0x14
25083 6555           EE                           out dx, al
25084 6556           BA                   03C1    mov dx, # 0x3c1
25085 6559           EC                           in al, dx
25086 655A           88C7                         mov bh, al
25087 655C           80E7                   0F    and bh, #0x0f
25088 655F           F6C3                   01    test bl, #0x01
25089 6562           75           03              jnz get_dac_16_page
25090 6564           C0EF                   02    shr bh, 2
25091                       00006567            get_dac_16_page:
25092 6567           BA                   03DA    mov dx, # 0x3da
25093 656A           EC                           in al, dx
25094 656B           BA                   03C0    mov dx, # 0x3c0
25095 656E           B0                     20    mov al, #0x20
25096 6570           EE                           out dx, al
25097 6571           5A                           pop dx
25098 6572           58                           pop ax
25099 6573           C3                           ret
25100                                           ! 3427 endasm
25101                                           !BCC_ENDASM
25102                                           ! 3428 static void biosfn_perform_gray_scale_summing (start,count)
25103                                           ! Register BX used in function biosfn_write_teletype
25104                                           ! 3429 Bit16u start;Bit16u count;
25105                       00006574            _biosfn_perform_gray_scale_summing:
25106                                           !BCC_EOS
25107                                           !BCC_EOS
25108                                           ! 3430 {Bit8u r,g,b;
25109                                           !BCC_EOS
25110                                           ! 3431  Bit16u i;
25111                                           !BCC_EOS
25112                                           ! 3432  Bit16u index;
25113                                           !BCC_EOS
25114                                           ! 3433  inb(0x3da);
25115 6574           55                         push	bp
25116 6575           89E5                       mov	bp,sp
25117 6577           83C4                   F8  add	sp,*-8
25118                                           ! Debug: list int = const $3DA (used reg = )
25119 657A           B8                   03DA  mov	ax,#$3DA
25120 657D           50                         push	ax
25121                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25122 657E           E8         180F            call	_inb
25123 6581           44                         inc	sp
25124 6582           44                         inc	sp
25125                                           !BCC_EOS
25126                                           ! 3434  outb(0x3c0,0x00);
25127                                           ! Debug: list int = const 0 (used reg = )
25128 6583           31C0                       xor	ax,ax
25129 6585           50                         push	ax
25130                                           ! Debug: list int = const $3C0 (used reg = )
25131 6586           B8                   03C0  mov	ax,#$3C0
25132 6589           50                         push	ax
25133                                           ! Debug: func () void = outb+0 (used reg = )
25134 658A           E8         1819            call	_outb
25135 658D           83C4                   04  add	sp,*4
25136                                           !BCC_EOS
25137                                           ! 3435  for( index = 0; index < count; index++ )
25138                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
25139 6590           31C0                       xor	ax,ax
25140 6592           8946         F8            mov	-8[bp],ax
25141                                           !BCC_EOS
25142                                           !BCC_EOS
25143                                           ! 3436   {
25144 6595           E9         00BE            br 	.219
25145                       00006598            .21A:
25146                                           ! 3437    outb(0x3c7,start);
25147                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25148 6598           FF76         04            push	4[bp]
25149                                           ! Debug: list int = const $3C7 (used reg = )
25150 659B           B8                   03C7  mov	ax,#$3C7
25151 659E           50                         push	ax
25152                                           ! Debug: func () void = outb+0 (used reg = )
25153 659F           E8         1804            call	_outb
25154 65A2           83C4                   04  add	sp,*4
25155                                           !BCC_EOS
25156                                           ! 3438    r=inb( 0x3c9 );
25157                                           ! Debug: list int = const $3C9 (used reg = )
25158 65A5           B8                   03C9  mov	ax,#$3C9
25159 65A8           50                         push	ax
25160                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25161 65A9           E8         17E4            call	_inb
25162 65AC           44                         inc	sp
25163 65AD           44                         inc	sp
25164                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
25165 65AE           8846         FF            mov	-1[bp],al
25166                                           !BCC_EOS
25167                                           ! 3439    g=inb( 0x3c9 );
25168                                           ! Debug: list int = const $3C9 (used reg = )
25169 65B1           B8                   03C9  mov	ax,#$3C9
25170 65B4           50                         push	ax
25171                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25172 65B5           E8         17D8            call	_inb
25173 65B8           44                         inc	sp
25174 65B9           44                         inc	sp
25175                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
25176 65BA           8846         FE            mov	-2[bp],al
25177                                           !BCC_EOS
25178                                           ! 3440    b=inb( 0x3c9 );
25179                                           ! Debug: list int = const $3C9 (used reg = )
25180 65BD           B8                   03C9  mov	ax,#$3C9
25181 65C0           50                         push	ax
25182                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25183 65C1           E8         17CC            call	_inb
25184 65C4           44                         inc	sp
25185 65C5           44                         inc	sp
25186                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
25187 65C6           8846         FD            mov	-3[bp],al
25188                                           !BCC_EOS
25189                                           ! 3441    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
25190                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
25191                                           ! Debug: expression subtree swapping
25192 65C9           8A46         FD            mov	al,-3[bp]
25193 65CC           30E4                       xor	ah,ah
25194 65CE           B9                   001C  mov	cx,*$1C
25195 65D1           F7E9                       imul	cx
25196 65D3           50                         push	ax
25197                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
25198                                           ! Debug: expression subtree swapping
25199 65D4           8A46         FE            mov	al,-2[bp]
25200 65D7           30E4                       xor	ah,ah
25201 65D9           B9                   0097  mov	cx,#$97
25202 65DC           F7E9                       imul	cx
25203 65DE           50                         push	ax
25204                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
25205                                           ! Debug: expression subtree swapping
25206 65DF           8A46         FF            mov	al,-1[bp]
25207 65E2           30E4                       xor	ah,ah
25208 65E4           B9                   004D  mov	cx,*$4D
25209 65E7           F7E9                       imul	cx
25210                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
25211 65E9           0346         F4            add	ax,-$C[bp]
25212 65EC           44                         inc	sp
25213 65ED           44                         inc	sp
25214                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25215 65EE           0346         F6            add	ax,-$A[bp]
25216 65F1           44                         inc	sp
25217 65F2           44                         inc	sp
25218                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
25219                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
25220 65F3           05                   0080  add	ax,#$80
25221 65F6           88E0                       mov	al,ah
25222 65F8           30E4                       xor	ah,ah
25223                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
25224 65FA           8946         FA            mov	-6[bp],ax
25225                                           !BCC_EOS
25226                                           ! 3442    if(i>0x3f)i=0x3f;
25227                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25228 65FD           8B46         FA            mov	ax,-6[bp]
25229 6600           3D                   003F  cmp	ax,*$3F
25230 6603           76           06            jbe 	.21B
25231                       00006605            .21C:
25232                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25233 6605           B8                   003F  mov	ax,*$3F
25234 6608           8946         FA            mov	-6[bp],ax
25235                                           !BCC_EOS
25236                                           ! 3443    outb(0x3c8,start);
25237                       0000660B            .21B:
25238                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25239 660B           FF76         04            push	4[bp]
25240                                           ! Debug: list int = const $3C8 (used reg = )
25241 660E           B8                   03C8  mov	ax,#$3C8
25242 6611           50                         push	ax
25243                                           ! Debug: func () void = outb+0 (used reg = )
25244 6612           E8         1791            call	_outb
25245 6615           83C4                   04  add	sp,*4
25246                                           !BCC_EOS
25247                                           ! 3444    outb( 0x3c9, i&0xff );
25248                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25249 6618           8A46         FA            mov	al,-6[bp]
25250                                           ! Debug: list unsigned char = al+0 (used reg = )
25251 661B           30E4                       xor	ah,ah
25252 661D           50                         push	ax
25253                                           ! Debug: list int = const $3C9 (used reg = )
25254 661E           B8                   03C9  mov	ax,#$3C9
25255 6621           50                         push	ax
25256                                           ! Debug: func () void = outb+0 (used reg = )
25257 6622           E8         1781            call	_outb
25258 6625           83C4                   04  add	sp,*4
25259                                           !BCC_EOS
25260                                           ! 3445    outb( 0x3c9, i&0xff );
25261                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25262 6628           8A46         FA            mov	al,-6[bp]
25263                                           ! Debug: list unsigned char = al+0 (used reg = )
25264 662B           30E4                       xor	ah,ah
25265 662D           50                         push	ax
25266                                           ! Debug: list int = const $3C9 (used reg = )
25267 662E           B8                   03C9  mov	ax,#$3C9
25268 6631           50                         push	ax
25269                                           ! Debug: func () void = outb+0 (used reg = )
25270 6632           E8         1771            call	_outb
25271 6635           83C4                   04  add	sp,*4
25272                                           !BCC_EOS
25273                                           ! 3446    outb( 0x3c9, i&0xff );
25274                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25275 6638           8A46         FA            mov	al,-6[bp]
25276                                           ! Debug: list unsigned char = al+0 (used reg = )
25277 663B           30E4                       xor	ah,ah
25278 663D           50                         push	ax
25279                                           ! Debug: list int = const $3C9 (used reg = )
25280 663E           B8                   03C9  mov	ax,#$3C9
25281 6641           50                         push	ax
25282                                           ! Debug: func () void = outb+0 (used reg = )
25283 6642           E8         1761            call	_outb
25284 6645           83C4                   04  add	sp,*4
25285                                           !BCC_EOS
25286                                           ! 3447    start++;
25287                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25288 6648           8B46         04            mov	ax,4[bp]
25289 664B           40                         inc	ax
25290 664C           8946         04            mov	4[bp],ax
25291                                           !BCC_EOS
25292                                           ! 3448   }
25293                                           ! 3449  inb(0x3da);
25294                       0000664F            .218:
25295                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25296 664F           8B46         F8            mov	ax,-8[bp]
25297 6652           40                         inc	ax
25298 6653           8946         F8            mov	-8[bp],ax
25299                       00006656            .219:
25300                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25301 6656           8B46         F8            mov	ax,-8[bp]
25302 6659           3B46         06            cmp	ax,6[bp]
25303 665C         0F82         FF38            blo 	.21A
25304                       00006660            .21D:
25305                       00006660            .217:
25306                                           ! Debug: list int = const $3DA (used reg = )
25307 6660           B8                   03DA  mov	ax,#$3DA
25308 6663           50                         push	ax
25309                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25310 6664           E8         1729            call	_inb
25311 6667           44                         inc	sp
25312 6668           44                         inc	sp
25313                                           !BCC_EOS
25314                                           ! 3450  outb(0x3c0,0x20);
25315                                           ! Debug: list int = const $20 (used reg = )
25316 6669           B8                   0020  mov	ax,*$20
25317 666C           50                         push	ax
25318                                           ! Debug: list int = const $3C0 (used reg = )
25319 666D           B8                   03C0  mov	ax,#$3C0
25320 6670           50                         push	ax
25321                                           ! Debug: func () void = outb+0 (used reg = )
25322 6671           E8         1732            call	_outb
25323 6674           83C4                   04  add	sp,*4
25324                                           !BCC_EOS
25325                                           ! 3451 }
25326 6677           89EC                       mov	sp,bp
25327 6679           5D                         pop	bp
25328 667A           C3                         ret
25329                                           ! 3452 static void get_font_access()
25330                                           ! 3453 {
25331                       0000667B            _get_font_access:
25332                                           ! 3454 #asm
25333                                           !BCC_ASM
25334 667B           BA                   03C4   mov dx, # 0x3c4
25335 667E           B8                   0100   mov ax, #0x0100
25336 6681           EF                          out dx, ax
25337 6682           B8                   0402   mov ax, #0x0402
25338 6685           EF                          out dx, ax
25339 6686           B8                   0704   mov ax, #0x0704
25340 6689           EF                          out dx, ax
25341 668A           B8                   0300   mov ax, #0x0300
25342 668D           EF                          out dx, ax
25343 668E           BA                   03CE   mov dx, # 0x3ce
25344 6691           B8                   0204   mov ax, #0x0204
25345 6694           EF                          out dx, ax
25346 6695           B8                   0005   mov ax, #0x0005
25347 6698           EF                          out dx, ax
25348 6699           B8                   0406   mov ax, #0x0406
25349 669C           EF                          out dx, ax
25350                                           ! 3471 endasm
25351                                           !BCC_ENDASM
25352                                           ! 3472 }
25353 669D           C3                         ret
25354                                           ! 3473 static void release_font_access()
25355                                           ! 3474 {
25356                       0000669E            _release_font_access:
25357                                           ! 3475 #asm
25358                                           !BCC_ASM
25359 669E           BA                   03C4   mov dx, # 0x3c4
25360 66A1           B8                   0100   mov ax, #0x0100
25361 66A4           EF                          out dx, ax
25362 66A5           B8                   0302   mov ax, #0x0302
25363 66A8           EF                          out dx, ax
25364 66A9           B8                   0304   mov ax, #0x0304
25365 66AC           EF                          out dx, ax
25366 66AD           B8                   0300   mov ax, #0x0300
25367 66B0           EF                          out dx, ax
25368 66B1           BA                   03CC   mov dx, # 0x3cc
25369 66B4           EC                          in al, dx
25370 66B5           24                     01   and al, #0x01
25371 66B7           C0E0                   02   shl al, 2
25372 66BA           0C                     0A   or al, #0x0a
25373 66BC           88C4                        mov ah, al
25374 66BE           B0                     06   mov al, #0x06
25375 66C0           BA                   03CE   mov dx, # 0x3ce
25376 66C3           EF                          out dx, ax
25377 66C4           B8                   0004   mov ax, #0x0004
25378 66C7           EF                          out dx, ax
25379 66C8           B8                   1005   mov ax, #0x1005
25380 66CB           EF                          out dx, ax
25381                                           ! 3498 endasm
25382                                           !BCC_ENDASM
25383                                           ! 3499 }
25384 66CC           C3                         ret
25385                                           ! 3500 #asm
25386                                           !BCC_ASM
25387                       000066CD            idiv_u:
25388 66CD           31D2                         xor dx,dx
25389 66CF           F7F3                         div bx
25390 66D1           C3                           ret
25391                                           ! 3505 endasm
25392                                           !BCC_ENDASM
25393                                           ! 3506 static void set_scan_lines(lines) Bit8u lines;
25394                       000066D2            _set_scan_lines:
25395                                           !BCC_EOS
25396                                           ! 3507 {
25397                                           ! 3508  Bit16u crtc_addr,cols,page,vde;
25398                                           !BCC_EOS
25399                                           ! 3509  Bit8u crtc_r9,ovl,rows;
25400                                           !BCC_EOS
25401                                           ! 3510  crtc_addr = read_word(0x40,0x63);
25402 66D2           55                         push	bp
25403 66D3           89E5                       mov	bp,sp
25404 66D5           83C4                   F4  add	sp,*-$C
25405                                           ! Debug: list int = const $63 (used reg = )
25406 66D8           B8                   0063  mov	ax,*$63
25407 66DB           50                         push	ax
25408                                           ! Debug: list int = const $40 (used reg = )
25409 66DC           B8                   0040  mov	ax,*$40
25410 66DF           50                         push	ax
25411                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25412 66E0           E8         166A            call	_read_word
25413 66E3           83C4                   04  add	sp,*4
25414                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25415 66E6           8946         FE            mov	-2[bp],ax
25416                                           !BCC_EOS
25417                                           ! 3511  outb(crtc_addr, 0x09);
25418                                           ! Debug: list int = const 9 (used reg = )
25419 66E9           B8                   0009  mov	ax,*9
25420 66EC           50                         push	ax
25421                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25422 66ED           FF76         FE            push	-2[bp]
25423                                           ! Debug: func () void = outb+0 (used reg = )
25424 66F0           E8         16B3            call	_outb
25425 66F3           83C4                   04  add	sp,*4
25426                                           !BCC_EOS
25427                                           ! 3512  crtc_r9 = inb(crtc_addr+1);
25428                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25429 66F6           8B46         FE            mov	ax,-2[bp]
25430                                           ! Debug: list unsigned int = ax+1 (used reg = )
25431 66F9           40                         inc	ax
25432 66FA           50                         push	ax
25433                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25434 66FB           E8         1692            call	_inb
25435 66FE           44                         inc	sp
25436 66FF           44                         inc	sp
25437                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25438 6700           8846         F7            mov	-9[bp],al
25439                                           !BCC_EOS
25440                                           ! 3513  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25441                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25442 6703           8A46         04            mov	al,4[bp]
25443 6706           30E4                       xor	ah,ah
25444 6708           48                         dec	ax
25445 6709           50                         push	ax
25446                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25447 670A           8A46         F7            mov	al,-9[bp]
25448 670D           24                     E0  and	al,#$E0
25449                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25450 670F           30E4                       xor	ah,ah
25451 6711           0B46         F2            or	ax,-$E[bp]
25452 6714           44                         inc	sp
25453 6715           44                         inc	sp
25454                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25455 6716           8846         F7            mov	-9[bp],al
25456                                           !BCC_EOS
25457                                           ! 3514  outb(crtc_addr+1, crtc_r9);
25458                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25459 6719           8A46         F7            mov	al,-9[bp]
25460 671C           30E4                       xor	ah,ah
25461 671E           50                         push	ax
25462                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25463 671F           8B46         FE            mov	ax,-2[bp]
25464                                           ! Debug: list unsigned int = ax+1 (used reg = )
25465 6722           40                         inc	ax
25466 6723           50                         push	ax
25467                                           ! Debug: func () void = outb+0 (used reg = )
25468 6724           E8         167F            call	_outb
25469 6727           83C4                   04  add	sp,*4
25470                                           !BCC_EOS
25471                                           ! 3515  if(lines==8)
25472                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25473 672A           8A46         04            mov	al,4[bp]
25474 672D           3C                     08  cmp	al,*8
25475 672F           75           10            jne 	.21E
25476                       00006731            .21F:
25477                                           ! 3516   {
25478                                           ! 3517    biosfn_set_cursor_shape(0x06,0x07);
25479                                           ! Debug: list int = const 7 (used reg = )
25480 6731           B8                   0007  mov	ax,*7
25481 6734           50                         push	ax
25482                                           ! Debug: list int = const 6 (used reg = )
25483 6735           B8                   0006  mov	ax,*6
25484 6738           50                         push	ax
25485                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25486 6739           E8         DB2D            call	_biosfn_set_cursor_shape
25487 673C           83C4                   04  add	sp,*4
25488                                           !BCC_EOS
25489                                           ! 3518   }
25490                                           ! 3519  else
25491                                           ! 3520   {
25492 673F           EB           18            jmp .220
25493                       00006741            .21E:
25494                                           ! 3521    biosfn_set_cursor_shape(lines-4,lines-3);
25495                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25496 6741           8A46         04            mov	al,4[bp]
25497 6744           30E4                       xor	ah,ah
25498                                           ! Debug: list unsigned int = ax-3 (used reg = )
25499 6746           05                   FFFD  add	ax,*-3
25500 6749           50                         push	ax
25501                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25502 674A           8A46         04            mov	al,4[bp]
25503 674D           30E4                       xor	ah,ah
25504                                           ! Debug: list unsigned int = ax-4 (used reg = )
25505 674F           05                   FFFC  add	ax,*-4
25506 6752           50                         push	ax
25507                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25508 6753           E8         DB13            call	_biosfn_set_cursor_shape
25509 6756           83C4                   04  add	sp,*4
25510                                           !BCC_EOS
25511                                           ! 3522   }
25512                                           ! 3523  write_word(0x40,0x85, lines);
25513                       00006759            .220:
25514                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25515 6759           8A46         04            mov	al,4[bp]
25516 675C           30E4                       xor	ah,ah
25517 675E           50                         push	ax
25518                                           ! Debug: list int = const $85 (used reg = )
25519 675F           B8                   0085  mov	ax,#$85
25520 6762           50                         push	ax
25521                                           ! Debug: list int = const $40 (used reg = )
25522 6763           B8                   0040  mov	ax,*$40
25523 6766           50                         push	ax
25524                                           ! Debug: func () void = write_word+0 (used reg = )
25525 6767           E8         160E            call	_write_word
25526 676A           83C4                   06  add	sp,*6
25527                                           !BCC_EOS
25528                                           ! 3524  outb(crtc_addr, 0x12);
25529                                           ! Debug: list int = const $12 (used reg = )
25530 676D           B8                   0012  mov	ax,*$12
25531 6770           50                         push	ax
25532                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25533 6771           FF76         FE            push	-2[bp]
25534                                           ! Debug: func () void = outb+0 (used reg = )
25535 6774           E8         162F            call	_outb
25536 6777           83C4                   04  add	sp,*4
25537                                           !BCC_EOS
25538                                           ! 3525  vde = inb(crtc_addr+1);
25539                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25540 677A           8B46         FE            mov	ax,-2[bp]
25541                                           ! Debug: list unsigned int = ax+1 (used reg = )
25542 677D           40                         inc	ax
25543 677E           50                         push	ax
25544                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25545 677F           E8         160E            call	_inb
25546 6782           44                         inc	sp
25547 6783           44                         inc	sp
25548                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25549 6784           30E4                       xor	ah,ah
25550 6786           8946         F8            mov	-8[bp],ax
25551                                           !BCC_EOS
25552                                           ! 3526  outb(crtc_addr, 0x07);
25553                                           ! Debug: list int = const 7 (used reg = )
25554 6789           B8                   0007  mov	ax,*7
25555 678C           50                         push	ax
25556                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25557 678D           FF76         FE            push	-2[bp]
25558                                           ! Debug: func () void = outb+0 (used reg = )
25559 6790           E8         1613            call	_outb
25560 6793           83C4                   04  add	sp,*4
25561                                           !BCC_EOS
25562                                           ! 3527  ovl = inb(crtc_addr+1);
25563                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25564 6796           8B46         FE            mov	ax,-2[bp]
25565                                           ! Debug: list unsigned int = ax+1 (used reg = )
25566 6799           40                         inc	ax
25567 679A           50                         push	ax
25568                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25569 679B           E8         15F2            call	_inb
25570 679E           44                         inc	sp
25571 679F           44                         inc	sp
25572                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25573 67A0           8846         F6            mov	-$A[bp],al
25574                                           !BCC_EOS
25575                                           ! 3528  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25576                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25577 67A3           8A46         F6            mov	al,-$A[bp]
25578 67A6           24                     40  and	al,*$40
25579                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25580 67A8           30E4                       xor	ah,ah
25581 67AA           B1                     03  mov	cl,*3
25582 67AC           D3E0                       shl	ax,cl
25583 67AE           50                         push	ax
25584                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25585 67AF           8A46         F6            mov	al,-$A[bp]
25586 67B2           24                     02  and	al,*2
25587                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25588 67B4           30E4                       xor	ah,ah
25589 67B6           B1                     07  mov	cl,*7
25590 67B8           D3E0                       shl	ax,cl
25591                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25592 67BA           0346         F2            add	ax,-$E[bp]
25593 67BD           44                         inc	sp
25594 67BE           44                         inc	sp
25595                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25596                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25597 67BF           40                         inc	ax
25598 67C0           0346         F8            add	ax,-8[bp]
25599 67C3           8946         F8            mov	-8[bp],ax
25600                                           !BCC_EOS
25601                                           ! 3529  rows = vde / lines;
25602                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25603 67C6           8A46         04            mov	al,4[bp]
25604 67C9           30E4                       xor	ah,ah
25605 67CB           89C3                       mov	bx,ax
25606 67CD           8B46         F8            mov	ax,-8[bp]
25607 67D0           E8         FEFA            call	idiv_u
25608                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25609 67D3           8846         F5            mov	-$B[bp],al
25610                                           !BCC_EOS
25611                                           ! 3530  write_byte(0x40,0x84, rows-1);
25612                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25613 67D6           8A46         F5            mov	al,-$B[bp]
25614 67D9           30E4                       xor	ah,ah
25615                                           ! Debug: list unsigned int = ax-1 (used reg = )
25616 67DB           48                         dec	ax
25617 67DC           50                         push	ax
25618                                           ! Debug: list int = const $84 (used reg = )
25619 67DD           B8                   0084  mov	ax,#$84
25620 67E0           50                         push	ax
25621                                           ! Debug: list int = const $40 (used reg = )
25622 67E1           B8                   0040  mov	ax,*$40
25623 67E4           50                         push	ax
25624                                           ! Debug: func () void = write_byte+0 (used reg = )
25625 67E5           E8         1578            call	_write_byte
25626 67E8           83C4                   06  add	sp,*6
25627                                           !BCC_EOS
25628                                           ! 3531  cols = read_word(0x40,0x4A);
25629                                           ! Debug: list int = const $4A (used reg = )
25630 67EB           B8                   004A  mov	ax,*$4A
25631 67EE           50                         push	ax
25632                                           ! Debug: list int = const $40 (used reg = )
25633 67EF           B8                   0040  mov	ax,*$40
25634 67F2           50                         push	ax
25635                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25636 67F3           E8         1557            call	_read_word
25637 67F6           83C4                   04  add	sp,*4
25638                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25639 67F9           8946         FC            mov	-4[bp],ax
25640                                           !BCC_EOS
25641                                           ! 3532  write_word(0x40,0x4C, rows * cols * 2);
25642                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25643 67FC           8A46         F5            mov	al,-$B[bp]
25644 67FF           30E4                       xor	ah,ah
25645 6801           8B4E         FC            mov	cx,-4[bp]
25646 6804           F7E9                       imul	cx
25647                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25648 6806           D1E0                       shl	ax,*1
25649                                           ! Debug: list unsigned int = ax+0 (used reg = )
25650 6808           50                         push	ax
25651                                           ! Debug: list int = const $4C (used reg = )
25652 6809           B8                   004C  mov	ax,*$4C
25653 680C           50                         push	ax
25654                                           ! Debug: list int = const $40 (used reg = )
25655 680D           B8                   0040  mov	ax,*$40
25656 6810           50                         push	ax
25657                                           ! Debug: func () void = write_word+0 (used reg = )
25658 6811           E8         1564            call	_write_word
25659 6814           83C4                   06  add	sp,*6
25660                                           !BCC_EOS
25661                                           ! 3533 }
25662 6817           89EC                       mov	sp,bp
25663 6819           5D                         pop	bp
25664 681A           C3                         ret
25665                                           ! 3534 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25666                                           ! Register BX used in function set_scan_lines
25667                       0000681B            _biosfn_load_text_user_pat:
25668                                           !BCC_EOS
25669                                           !BCC_EOS
25670                                           !BCC_EOS
25671                                           !BCC_EOS
25672                                           !BCC_EOS
25673                                           !BCC_EOS
25674                                           !BCC_EOS
25675                                           ! 3535 {
25676                                           ! 3536  Bit16u blockaddr,dest,i,src;
25677                                           !BCC_EOS
25678                                           ! 3537  get_font_access();
25679 681B           55                         push	bp
25680 681C           89E5                       mov	bp,sp
25681 681E           83C4                   F8  add	sp,*-8
25682                                           ! Debug: func () void = get_font_access+0 (used reg = )
25683 6821           E8         FE57            call	_get_font_access
25684                                           !BCC_EOS
25685                                           ! 3538  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25686                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25687 6824           8A46         0E            mov	al,$E[bp]
25688 6827           24                     04  and	al,*4
25689                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25690 6829           30E4                       xor	ah,ah
25691 682B           88C4                       mov	ah,al
25692 682D           30C0                       xor	al,al
25693 682F           B1                     03  mov	cl,*3
25694 6831           D3E0                       shl	ax,cl
25695 6833           50                         push	ax
25696                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25697 6834           8A46         0E            mov	al,$E[bp]
25698 6837           24                     03  and	al,*3
25699                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25700 6839           30E4                       xor	ah,ah
25701 683B           88C4                       mov	ah,al
25702 683D           30C0                       xor	al,al
25703 683F           B1                     06  mov	cl,*6
25704 6841           D3E0                       shl	ax,cl
25705                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25706 6843           0346         F6            add	ax,-$A[bp]
25707 6846           44                         inc	sp
25708 6847           44                         inc	sp
25709                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25710 6848           8946         FE            mov	-2[bp],ax
25711                                           !BCC_EOS
25712                                           ! 3539  for(i=0;i<CX;i++)
25713                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25714 684B           31C0                       xor	ax,ax
25715 684D           8946         FA            mov	-6[bp],ax
25716                                           !BCC_EOS
25717                                           !BCC_EOS
25718                                           ! 3540   {
25719 6850           EB           44            jmp .223
25720                       00006852            .224:
25721                                           ! 3541    src = BP + i * BH;
25722                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25723 6852           8A46         10            mov	al,$10[bp]
25724 6855           30E4                       xor	ah,ah
25725 6857           89C3                       mov	bx,ax
25726 6859           8B46         FA            mov	ax,-6[bp]
25727 685C           89D9                       mov	cx,bx
25728 685E           F7E9                       imul	cx
25729                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25730                                           ! Debug: expression subtree swapping
25731 6860           0346         08            add	ax,8[bp]
25732                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25733 6863           8946         F8            mov	-8[bp],ax
25734                                           !BCC_EOS
25735                                           ! 3542    dest = blockaddr + (DX + i) * 32;
25736                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25737 6866           8B46         0C            mov	ax,$C[bp]
25738 6869           0346         FA            add	ax,-6[bp]
25739                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25740 686C           B1                     05  mov	cl,*5
25741 686E           D3E0                       shl	ax,cl
25742                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25743                                           ! Debug: expression subtree swapping
25744 6870           0346         FE            add	ax,-2[bp]
25745                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25746 6873           8946         FC            mov	-4[bp],ax
25747                                           !BCC_EOS
25748                                           ! 3543    memcpyb(0xA000, dest, ES, src, BH);
25749                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25750 6876           8A46         10            mov	al,$10[bp]
25751 6879           30E4                       xor	ah,ah
25752 687B           50                         push	ax
25753                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25754 687C           FF76         F8            push	-8[bp]
25755                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25756 687F           FF76         06            push	6[bp]
25757                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25758 6882           FF76         FC            push	-4[bp]
25759                                           ! Debug: list unsigned int = const $A000 (used reg = )
25760 6885           B8                   A000  mov	ax,#$A000
25761 6888           50                         push	ax
25762                                           ! Debug: func () void = memcpyb+0 (used reg = )
25763 6889           E8         144E            call	_memcpyb
25764 688C           83C4                   0A  add	sp,*$A
25765                                           !BCC_EOS
25766                                           ! 3544   }
25767                                           ! 3545  release_font_access();
25768                       0000688F            .222:
25769                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25770 688F           8B46         FA            mov	ax,-6[bp]
25771 6892           40                         inc	ax
25772 6893           8946         FA            mov	-6[bp],ax
25773                       00006896            .223:
25774                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25775 6896           8B46         FA            mov	ax,-6[bp]
25776 6899           3B46         0A            cmp	ax,$A[bp]
25777 689C           72           B4            jb 	.224
25778                       0000689E            .225:
25779                       0000689E            .221:
25780                                           ! Debug: func () void = release_font_access+0 (used reg = )
25781 689E           E8         FDFD            call	_release_font_access
25782                                           !BCC_EOS
25783                                           ! 3546  if(AL>=0x10)
25784                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25785 68A1           8A46         04            mov	al,4[bp]
25786 68A4           3C                     10  cmp	al,*$10
25787 68A6           72           0B            jb  	.226
25788                       000068A8            .227:
25789                                           ! 3547   {
25790                                           ! 3548    set_scan_lines(BH);
25791                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25792 68A8           8A46         10            mov	al,$10[bp]
25793 68AB           30E4                       xor	ah,ah
25794 68AD           50                         push	ax
25795                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25796 68AE           E8         FE21            call	_set_scan_lines
25797 68B1           44                         inc	sp
25798 68B2           44                         inc	sp
25799                                           !BCC_EOS
25800                                           ! 3549   }
25801                                           ! 3550 }
25802                       000068B3            .226:
25803 68B3           89EC                       mov	sp,bp
25804 68B5           5D                         pop	bp
25805 68B6           C3                         ret
25806                                           ! 3551 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25807                                           ! Register BX used in function biosfn_load_text_user_pat
25808                       000068B7            _biosfn_load_text_8_14_pat:
25809                                           !BCC_EOS
25810                                           !BCC_EOS
25811                                           ! 3552 {
25812                                           ! 3553  Bit16u blockaddr,dest,i,src;
25813                                           !BCC_EOS
25814                                           ! 3554  get_font_access();
25815 68B7           55                         push	bp
25816 68B8           89E5                       mov	bp,sp
25817 68BA           83C4                   F8  add	sp,*-8
25818                                           ! Debug: func () void = get_font_access+0 (used reg = )
25819 68BD           E8         FDBB            call	_get_font_access
25820                                           !BCC_EOS
25821                                           ! 3555  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25822                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25823 68C0           8A46         06            mov	al,6[bp]
25824 68C3           24                     04  and	al,*4
25825                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25826 68C5           30E4                       xor	ah,ah
25827 68C7           88C4                       mov	ah,al
25828 68C9           30C0                       xor	al,al
25829 68CB           B1                     03  mov	cl,*3
25830 68CD           D3E0                       shl	ax,cl
25831 68CF           50                         push	ax
25832                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25833 68D0           8A46         06            mov	al,6[bp]
25834 68D3           24                     03  and	al,*3
25835                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25836 68D5           30E4                       xor	ah,ah
25837 68D7           88C4                       mov	ah,al
25838 68D9           30C0                       xor	al,al
25839 68DB           B1                     06  mov	cl,*6
25840 68DD           D3E0                       shl	ax,cl
25841                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25842 68DF           0346         F6            add	ax,-$A[bp]
25843 68E2           44                         inc	sp
25844 68E3           44                         inc	sp
25845                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25846 68E4           8946         FE            mov	-2[bp],ax
25847                                           !BCC_EOS
25848                                           ! 3556  for(i=0;i<0x100;i++)
25849                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25850 68E7           31C0                       xor	ax,ax
25851 68E9           8946         FA            mov	-6[bp],ax
25852                                           !BCC_EOS
25853                                           !BCC_EOS
25854                                           ! 3557   {
25855 68EC           EB           41            jmp .22A
25856                       000068EE            .22B:
25857                                           ! 3558    src = i * 14;
25858                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25859 68EE           8B46         FA            mov	ax,-6[bp]
25860 68F1           89C2                       mov	dx,ax
25861 68F3           B1                     03  mov	cl,*3
25862 68F5           D3E0                       shl	ax,cl
25863 68F7           29D0                       sub	ax,dx
25864 68F9           D1E0                       shl	ax,*1
25865                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25866 68FB           8946         F8            mov	-8[bp],ax
25867                                           !BCC_EOS
25868                                           ! 3559    dest = blockaddr + i * 32;
25869                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25870 68FE           8B46         FA            mov	ax,-6[bp]
25871 6901           B1                     05  mov	cl,*5
25872 6903           D3E0                       shl	ax,cl
25873                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25874                                           ! Debug: expression subtree swapping
25875 6905           0346         FE            add	ax,-2[bp]
25876                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25877 6908           8946         FC            mov	-4[bp],ax
25878                                           !BCC_EOS
25879                                           ! 3560    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25880                                           ! Debug: list int = const $E (used reg = )
25881 690B           B8                   000E  mov	ax,*$E
25882 690E           50                         push	ax
25883                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25884 690F           8B5E         F8            mov	bx,-8[bp]
25885                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25886                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25887 6912           81C3                 176A  add	bx,#_vgafont14
25888 6916           53                         push	bx
25889                                           ! Debug: list unsigned int = const $C000 (used reg = )
25890 6917           B8                   C000  mov	ax,#$C000
25891 691A           50                         push	ax
25892                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25893 691B           FF76         FC            push	-4[bp]
25894                                           ! Debug: list unsigned int = const $A000 (used reg = )
25895 691E           B8                   A000  mov	ax,#$A000
25896 6921           50                         push	ax
25897                                           ! Debug: func () void = memcpyb+0 (used reg = )
25898 6922           E8         13B5            call	_memcpyb
25899 6925           83C4                   0A  add	sp,*$A
25900                                           !BCC_EOS
25901                                           ! 3561   }
25902                                           ! 3562  release_font_access();
25903                       00006928            .229:
25904                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25905 6928           8B46         FA            mov	ax,-6[bp]
25906 692B           40                         inc	ax
25907 692C           8946         FA            mov	-6[bp],ax
25908                       0000692F            .22A:
25909                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25910 692F           8B46         FA            mov	ax,-6[bp]
25911 6932           3D                   0100  cmp	ax,#$100
25912 6935           72           B7            jb 	.22B
25913                       00006937            .22C:
25914                       00006937            .228:
25915                                           ! Debug: func () void = release_font_access+0 (used reg = )
25916 6937           E8         FD64            call	_release_font_access
25917                                           !BCC_EOS
25918                                           ! 3563  if(AL>=0x10)
25919                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25920 693A           8A46         04            mov	al,4[bp]
25921 693D           3C                     10  cmp	al,*$10
25922 693F           72           09            jb  	.22D
25923                       00006941            .22E:
25924                                           ! 3564   {
25925                                           ! 3565    set_scan_lines(14);
25926                                           ! Debug: list int = const $E (used reg = )
25927 6941           B8                   000E  mov	ax,*$E
25928 6944           50                         push	ax
25929                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25930 6945           E8         FD8A            call	_set_scan_lines
25931 6948           44                         inc	sp
25932 6949           44                         inc	sp
25933                                           !BCC_EOS
25934                                           ! 3566   }
25935                                           ! 3567 }
25936                       0000694A            .22D:
25937 694A           89EC                       mov	sp,bp
25938 694C           5D                         pop	bp
25939 694D           C3                         ret
25940                                           ! 3568 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25941                                           ! Register BX used in function biosfn_load_text_8_14_pat
25942                       0000694E            _biosfn_load_text_8_8_pat:
25943                                           !BCC_EOS
25944                                           !BCC_EOS
25945                                           ! 3569 {
25946                                           ! 3570  Bit16u blockaddr,dest,i,src;
25947                                           !BCC_EOS
25948                                           ! 3571  get_font_access();
25949 694E           55                         push	bp
25950 694F           89E5                       mov	bp,sp
25951 6951           83C4                   F8  add	sp,*-8
25952                                           ! Debug: func () void = get_font_access+0 (used reg = )
25953 6954           E8         FD24            call	_get_font_access
25954                                           !BCC_EOS
25955                                           ! 3572  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25956                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25957 6957           8A46         06            mov	al,6[bp]
25958 695A           24                     04  and	al,*4
25959                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25960 695C           30E4                       xor	ah,ah
25961 695E           88C4                       mov	ah,al
25962 6960           30C0                       xor	al,al
25963 6962           B1                     03  mov	cl,*3
25964 6964           D3E0                       shl	ax,cl
25965 6966           50                         push	ax
25966                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25967 6967           8A46         06            mov	al,6[bp]
25968 696A           24                     03  and	al,*3
25969                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25970 696C           30E4                       xor	ah,ah
25971 696E           88C4                       mov	ah,al
25972 6970           30C0                       xor	al,al
25973 6972           B1                     06  mov	cl,*6
25974 6974           D3E0                       shl	ax,cl
25975                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25976 6976           0346         F6            add	ax,-$A[bp]
25977 6979           44                         inc	sp
25978 697A           44                         inc	sp
25979                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25980 697B           8946         FE            mov	-2[bp],ax
25981                                           !BCC_EOS
25982                                           ! 3573  for(i=0;i<0x100;i++)
25983                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25984 697E           31C0                       xor	ax,ax
25985 6980           8946         FA            mov	-6[bp],ax
25986                                           !BCC_EOS
25987                                           !BCC_EOS
25988                                           ! 3574   {
25989 6983           EB           3B            jmp .231
25990                       00006985            .232:
25991                                           ! 3575    src = i * 8;
25992                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25993 6985           8B46         FA            mov	ax,-6[bp]
25994 6988           B1                     03  mov	cl,*3
25995 698A           D3E0                       shl	ax,cl
25996                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25997 698C           8946         F8            mov	-8[bp],ax
25998                                           !BCC_EOS
25999                                           ! 3576    dest = blockaddr + i * 32;
26000                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
26001 698F           8B46         FA            mov	ax,-6[bp]
26002 6992           B1                     05  mov	cl,*5
26003 6994           D3E0                       shl	ax,cl
26004                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26005                                           ! Debug: expression subtree swapping
26006 6996           0346         FE            add	ax,-2[bp]
26007                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
26008 6999           8946         FC            mov	-4[bp],ax
26009                                           !BCC_EOS
26010                                           ! 3577    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
26011                                           ! Debug: list int = const 8 (used reg = )
26012 699C           B8                   0008  mov	ax,*8
26013 699F           50                         push	ax
26014                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
26015 69A0           8B5E         F8            mov	bx,-8[bp]
26016                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
26017                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
26018 69A3           81C3                 0F6A  add	bx,#_vgafont8
26019 69A7           53                         push	bx
26020                                           ! Debug: list unsigned int = const $C000 (used reg = )
26021 69A8           B8                   C000  mov	ax,#$C000
26022 69AB           50                         push	ax
26023                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
26024 69AC           FF76         FC            push	-4[bp]
26025                                           ! Debug: list unsigned int = const $A000 (used reg = )
26026 69AF           B8                   A000  mov	ax,#$A000
26027 69B2           50                         push	ax
26028                                           ! Debug: func () void = memcpyb+0 (used reg = )
26029 69B3           E8         1324            call	_memcpyb
26030 69B6           83C4                   0A  add	sp,*$A
26031                                           !BCC_EOS
26032                                           ! 3578   }
26033                                           ! 3579  
26034                                           ! 3579 release_font_access();
26035                       000069B9            .230:
26036                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26037 69B9           8B46         FA            mov	ax,-6[bp]
26038 69BC           40                         inc	ax
26039 69BD           8946         FA            mov	-6[bp],ax
26040                       000069C0            .231:
26041                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26042 69C0           8B46         FA            mov	ax,-6[bp]
26043 69C3           3D                   0100  cmp	ax,#$100
26044 69C6           72           BD            jb 	.232
26045                       000069C8            .233:
26046                       000069C8            .22F:
26047                                           ! Debug: func () void = release_font_access+0 (used reg = )
26048 69C8           E8         FCD3            call	_release_font_access
26049                                           !BCC_EOS
26050                                           ! 3580  if(AL>=0x10)
26051                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26052 69CB           8A46         04            mov	al,4[bp]
26053 69CE           3C                     10  cmp	al,*$10
26054 69D0           72           09            jb  	.234
26055                       000069D2            .235:
26056                                           ! 3581   {
26057                                           ! 3582    set_scan_lines(8);
26058                                           ! Debug: list int = const 8 (used reg = )
26059 69D2           B8                   0008  mov	ax,*8
26060 69D5           50                         push	ax
26061                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26062 69D6           E8         FCF9            call	_set_scan_lines
26063 69D9           44                         inc	sp
26064 69DA           44                         inc	sp
26065                                           !BCC_EOS
26066                                           ! 3583   }
26067                                           ! 3584 }
26068                       000069DB            .234:
26069 69DB           89EC                       mov	sp,bp
26070 69DD           5D                         pop	bp
26071 69DE           C3                         ret
26072                                           ! 3585 #asm
26073                                           !BCC_ASM
26074                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
26075                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
26076                       000069DF            biosfn_set_text_block_specifier:
26077 69DF           50                           push ax
26078 69E0           52                           push dx
26079 69E1           BA                   03C4    mov dx, # 0x3c4
26080 69E4           88DC                         mov ah, bl
26081 69E6           B0                     03    mov al, #0x03
26082 69E8           EF                           out dx, ax
26083 69E9           5A                           pop dx
26084 69EA           58                           pop ax
26085 69EB           C3                           ret
26086                                           ! 3596 endasm
26087                                           !BCC_ENDASM
26088                                           ! 3597 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
26089                                           ! Register BX used in function biosfn_load_text_8_8_pat
26090                       000069EC            _biosfn_load_text_8_16_pat:
26091                                           !BCC_EOS
26092                                           !BCC_EOS
26093                                           ! 3598 {
26094                                           ! 3599  Bit16u blockaddr,dest,i,src;
26095                                           !BCC_EOS
26096                                           ! 3600  get_font_access();
26097 69EC           55                         push	bp
26098 69ED           89E5                       mov	bp,sp
26099 69EF           83C4                   F8  add	sp,*-8
26100                                           ! Debug: func () void = get_font_access+0 (used reg = )
26101 69F2           E8         FC86            call	_get_font_access
26102                                           !BCC_EOS
26103                                           ! 3601  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
26104                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
26105 69F5           8A46         06            mov	al,6[bp]
26106 69F8           24                     04  and	al,*4
26107                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
26108 69FA           30E4                       xor	ah,ah
26109 69FC           88C4                       mov	ah,al
26110 69FE           30C0                       xor	al,al
26111 6A00           B1                     03  mov	cl,*3
26112 6A02           D3E0                       shl	ax,cl
26113 6A04           50                         push	ax
26114                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
26115 6A05           8A46         06            mov	al,6[bp]
26116 6A08           24                     03  and	al,*3
26117                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
26118 6A0A           30E4                       xor	ah,ah
26119 6A0C           88C4                       mov	ah,al
26120 6A0E           30C0                       xor	al,al
26121 6A10           B1                     06  mov	cl,*6
26122 6A12           D3E0                       shl	ax,cl
26123                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
26124 6A14           0346         F6            add	ax,-$A[bp]
26125 6A17           44                         inc	sp
26126 6A18           44                         inc	sp
26127                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26128 6A19           8946         FE            mov	-2[bp],ax
26129                                           !BCC_EOS
26130                                           ! 3602  for(i=0;i<0x100;i++)
26131                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
26132 6A1C           31C0                       xor	ax,ax
26133 6A1E           8946         FA            mov	-6[bp],ax
26134                                           !BCC_EOS
26135                                           !BCC_EOS
26136                                           ! 3603   {
26137 6A21           EB           3B            jmp .238
26138                       00006A23            .239:
26139                                           ! 3604    src = i * 16;
26140                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
26141 6A23           8B46         FA            mov	ax,-6[bp]
26142 6A26           B1                     04  mov	cl,*4
26143 6A28           D3E0                       shl	ax,cl
26144                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
26145 6A2A           8946         F8            mov	-8[bp],ax
26146                                           !BCC_EOS
26147                                           ! 3605    dest = blockaddr + i * 32;
26148                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
26149 6A2D           8B46         FA            mov	ax,-6[bp]
26150 6A30           B1                     05  mov	cl,*5
26151 6A32           D3E0                       shl	ax,cl
26152                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26153                                           ! Debug: expression subtree swapping
26154 6A34           0346         FE            add	ax,-2[bp]
26155                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
26156 6A37           8946         FC            mov	-4[bp],ax
26157                                           !BCC_EOS
26158                                           ! 3606    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
26159                                           ! Debug: list int = const $10 (used reg = )
26160 6A3A           B8                   0010  mov	ax,*$10
26161 6A3D           50                         push	ax
26162                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
26163 6A3E           8B5E         F8            mov	bx,-8[bp]
26164                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
26165                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
26166 6A41           81C3                 256A  add	bx,#_vgafont16
26167 6A45           53                         push	bx
26168                                           ! Debug: list unsigned int = const $C000 (used reg = )
26169 6A46           B8                   C000  mov	ax,#$C000
26170 6A49           50                         push	ax
26171                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
26172 6A4A           FF76         FC            push	-4[bp]
26173                                           ! Debug: list unsigned int = const $A000 (used reg = )
26174 6A4D           B8                   A000  mov	ax,#$A000
26175 6A50           50                         push	ax
26176                                           ! Debug: func () void = memcpyb+0 (used reg = )
26177 6A51           E8         1286            call	_memcpyb
26178 6A54           83C4                   0A  add	sp,*$A
26179                                           !BCC_EOS
26180                                           ! 3607   }
26181                                           ! 3608  release_font_access();
26182                       00006A57            .237:
26183                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26184 6A57           8B46         FA            mov	ax,-6[bp]
26185 6A5A           40                         inc	ax
26186 6A5B           8946         FA            mov	-6[bp],ax
26187                       00006A5E            .238:
26188                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26189 6A5E           8B46         FA            mov	ax,-6[bp]
26190 6A61           3D                   0100  cmp	ax,#$100
26191 6A64           72           BD            jb 	.239
26192                       00006A66            .23A:
26193                       00006A66            .236:
26194                                           ! Debug: func () void = release_font_access+0 (used reg = )
26195 6A66           E8         FC35            call	_release_font_access
26196                                           !BCC_EOS
26197                                           ! 3609  if(AL>=0x10)
26198                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26199 6A69           8A46         04            mov	al,4[bp]
26200 6A6C           3C                     10  cmp	al,*$10
26201 6A6E           72           09            jb  	.23B
26202                       00006A70            .23C:
26203                                           ! 3610   {
26204                                           ! 3611    set_scan_lines(16);
26205                                           ! Debug: list int = const $10 (used reg = )
26206 6A70           B8                   0010  mov	ax,*$10
26207 6A73           50                         push	ax
26208                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26209 6A74           E8         FC5B            call	_set_scan_lines
26210 6A77           44                         inc	sp
26211 6A78           44                         inc	sp
26212                                           !BCC_EOS
26213                                           ! 3612   }
26214                                           ! 3613 }
26215                       00006A79            .23B:
26216 6A79           89EC                       mov	sp,bp
26217 6A7B           5D                         pop	bp
26218 6A7C           C3                         ret
26219                                           ! 3614 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
26220                                           ! Register BX used in function biosfn_load_text_8_16_pat
26221                       00006A7D            _biosfn_load_gfx_8_8_chars:
26222                                           !BCC_EOS
26223                                           !BCC_EOS
26224                                           ! 3615 {
26225                                           ! 3616  unimplemented();
26226 6A7D           55                         push	bp
26227 6A7E           89E5                       mov	bp,sp
26228                                           ! Debug: func () void = unimplemented+0 (used reg = )
26229 6A80           E8         1346            call	_unimplemented
26230                                           !BCC_EOS
26231                                           ! 3617 }
26232 6A83           5D                         pop	bp
26233 6A84           C3                         ret
26234                                           ! 3618 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26235                       00006A85            _biosfn_load_gfx_user_chars:
26236                                           !BCC_EOS
26237                                           !BCC_EOS
26238                                           !BCC_EOS
26239                                           !BCC_EOS
26240                                           !BCC_EOS
26241                                           ! 3619 {
26242                                           ! 3620  unimplemented();
26243 6A85           55                         push	bp
26244 6A86           89E5                       mov	bp,sp
26245                                           ! Debug: func () void = unimplemented+0 (used reg = )
26246 6A88           E8         133E            call	_unimplemented
26247                                           !BCC_EOS
26248                                           ! 3621 }
26249 6A8B           5D                         pop	bp
26250 6A8C           C3                         ret
26251                                           ! 3622 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26252                       00006A8D            _biosfn_load_gfx_8_14_chars:
26253                                           !BCC_EOS
26254                                           ! 3623 {
26255                                           ! 3624  unimplemented();
26256 6A8D           55                         push	bp
26257 6A8E           89E5                       mov	bp,sp
26258                                           ! Debug: func () void = unimplemented+0 (used reg = )
26259 6A90           E8         1336            call	_unimplemented
26260                                           !BCC_EOS
26261                                           ! 3625 }
26262 6A93           5D                         pop	bp
26263 6A94           C3                         ret
26264                                           ! 3626 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26265                       00006A95            _biosfn_load_gfx_8_8_dd_chars:
26266                                           !BCC_EOS
26267                                           ! 3627 {
26268                                           ! 3628  unimplemented();
26269 6A95           55                         push	bp
26270 6A96           89E5                       mov	bp,sp
26271                                           ! Debug: func () void = unimplemented+0 (used reg = )
26272 6A98           E8         132E            call	_unimplemented
26273                                           !BCC_EOS
26274                                           ! 3629 }
26275 6A9B           5D                         pop	bp
26276 6A9C           C3                         ret
26277                                           ! 3630 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26278                       00006A9D            _biosfn_load_gfx_8_16_chars:
26279                                           !BCC_EOS
26280                                           ! 3631 {
26281                                           ! 3632  unimplemented();
26282 6A9D           55                         push	bp
26283 6A9E           89E5                       mov	bp,sp
26284                                           ! Debug: func () void = unimplemented+0 (used reg = )
26285 6AA0           E8         1326            call	_unimplemented
26286                                           !BCC_EOS
26287                                           ! 3633 }
26288 6AA3           5D                         pop	bp
26289 6AA4           C3                         ret
26290                                           ! 3634 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26291                                           ! 3635 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26292                       00006AA5            _biosfn_get_font_info:
26293                                           !BCC_EOS
26294                                           !BCC_EOS
26295                                           !BCC_EOS
26296                                           !BCC_EOS
26297                                           !BCC_EOS
26298                                           ! 3636 {Bit16u ss=get_SS();
26299 6AA5           55                         push	bp
26300 6AA6           89E5                       mov	bp,sp
26301 6AA8           4C                         dec	sp
26302 6AA9           4C                         dec	sp
26303                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26304 6AAA           E8         1319            call	_get_SS
26305                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26306 6AAD           8946         FE            mov	-2[bp],ax
26307                                           !BCC_EOS
26308                                           ! 3637  switch(BH)
26309 6AB0           8A46         04            mov	al,4[bp]
26310                                           ! 3638   {case 0x00:
26311 6AB3           E9         0154            br 	.23F
26312                                           ! 3639     write_word(ss,ES,read_word(0x00,0x1f*4));
26313                       00006AB6            .240:
26314                                           ! Debug: list int = const $7C (used reg = )
26315 6AB6           B8                   007C  mov	ax,*$7C
26316 6AB9           50                         push	ax
26317                                           ! Debug: list int = const 0 (used reg = )
26318 6ABA           31C0                       xor	ax,ax
26319 6ABC           50                         push	ax
26320                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26321 6ABD           E8         128D            call	_read_word
26322 6AC0           83C4                   04  add	sp,*4
26323                                           ! Debug: list unsigned short = ax+0 (used reg = )
26324 6AC3           50                         push	ax
26325                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26326 6AC4           FF76         06            push	6[bp]
26327                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26328 6AC7           FF76         FE            push	-2[bp]
26329                                           ! Debug: func () void = write_word+0 (used reg = )
26330 6ACA           E8         12AB            call	_write_word
26331 6ACD           83C4                   06  add	sp,*6
26332                                           !BCC_EOS
26333                                           ! 3640     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26334                                           ! Debug: list int = const $7E (used reg = )
26335 6AD0           B8                   007E  mov	ax,*$7E
26336 6AD3           50                         push	ax
26337                                           ! Debug: list int = const 0 (used reg = )
26338 6AD4           31C0                       xor	ax,ax
26339 6AD6           50                         push	ax
26340                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26341 6AD7           E8         1273            call	_read_word
26342 6ADA           83C4                   04  add	sp,*4
26343                                           ! Debug: list unsigned short = ax+0 (used reg = )
26344 6ADD           50                         push	ax
26345                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26346 6ADE           FF76         08            push	8[bp]
26347                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26348 6AE1           FF76         FE            push	-2[bp]
26349                                           ! Debug: func () void = write_word+0 (used reg = )
26350 6AE4           E8         1291            call	_write_word
26351 6AE7           83C4                   06  add	sp,*6
26352                                           !BCC_EOS
26353                                           ! 3641     break;
26354 6AEA           E9         0142            br 	.23D
26355                                           !BCC_EOS
26356                                           ! 3642    case 0x01:
26357                                           ! 3643     write_word(ss,ES,read_word(0x00,0x43*4));
26358                       00006AED            .241:
26359                                           ! Debug: list int = const $10C (used reg = )
26360 6AED           B8                   010C  mov	ax,#$10C
26361 6AF0           50                         push	ax
26362                                           ! Debug: list int = const 0 (used reg = )
26363 6AF1           31C0                       xor	ax,ax
26364 6AF3           50                         push	ax
26365                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26366 6AF4           E8         1256            call	_read_word
26367 6AF7           83C4                   04  add	sp,*4
26368                                           ! Debug: list unsigned short = ax+0 (used reg = )
26369 6AFA           50                         push	ax
26370                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26371 6AFB           FF76         06            push	6[bp]
26372                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26373 6AFE           FF76         FE            push	-2[bp]
26374                                           ! Debug: func () void = write_word+0 (used reg = )
26375 6B01           E8         1274            call	_write_word
26376 6B04           83C4                   06  add	sp,*6
26377                                           !BCC_EOS
26378                                           ! 3644     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26379                                           ! Debug: list int = const $10E (used reg = )
26380 6B07           B8                   010E  mov	ax,#$10E
26381 6B0A           50                         push	ax
26382                                           ! Debug: list int = const 0 (used reg = )
26383 6B0B           31C0                       xor	ax,ax
26384 6B0D           50                         push	ax
26385                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26386 6B0E           E8         123C            call	_read_word
26387 6B11           83C4                   04  add	sp,*4
26388                                           ! Debug: list unsigned short = ax+0 (used reg = )
26389 6B14           50                         push	ax
26390                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26391 6B15           FF76         08            push	8[bp]
26392                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26393 6B18           FF76         FE            push	-2[bp]
26394                                           ! Debug: func () void = write_word+0 (used reg = )
26395 6B1B           E8         125A            call	_write_word
26396 6B1E           83C4                   06  add	sp,*6
26397                                           !BCC_EOS
26398                                           ! 3645     break;
26399 6B21           E9         010B            br 	.23D
26400                                           !BCC_EOS
26401                                           ! 3646    case 0x02:
26402                                           ! 3647     write_word(ss,ES,0xC000);
26403                       00006B24            .242:
26404                                           ! Debug: list unsigned int = const $C000 (used reg = )
26405 6B24           B8                   C000  mov	ax,#$C000
26406 6B27           50                         push	ax
26407                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26408 6B28           FF76         06            push	6[bp]
26409                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26410 6B2B           FF76         FE            push	-2[bp]
26411                                           ! Debug: func () void = write_word+0 (used reg = )
26412 6B2E           E8         1247            call	_write_word
26413 6B31           83C4                   06  add	sp,*6
26414                                           !BCC_EOS
26415                                           ! 3648     write_word(ss,BP,vgafont14);
26416                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26417 6B34           BB                   176A  mov	bx,#_vgafont14
26418 6B37           53                         push	bx
26419                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26420 6B38           FF76         08            push	8[bp]
26421                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26422 6B3B           FF76         FE            push	-2[bp]
26423                                           ! Debug: func () void = write_word+0 (used reg = )
26424 6B3E           E8         1237            call	_write_word
26425 6B41           83C4                   06  add	sp,*6
26426                                           !BCC_EOS
26427                                           ! 3649     break;
26428 6B44           E9         00E8            br 	.23D
26429                                           !BCC_EOS
26430                                           ! 3650    case 0x03:
26431                                           ! 3651     write_word(ss,ES,0xC000);
26432                       00006B47            .243:
26433                                           ! Debug: list unsigned int = const $C000 (used reg = )
26434 6B47           B8                   C000  mov	ax,#$C000
26435 6B4A           50                         push	ax
26436                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26437 6B4B           FF76         06            push	6[bp]
26438                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26439 6B4E           FF76         FE            push	-2[bp]
26440                                           ! Debug: func () void = write_word+0 (used reg = )
26441 6B51           E8         1224            call	_write_word
26442 6B54           83C4                   06  add	sp,*6
26443                                           !BCC_EOS
26444                                           ! 3652     write_word(ss,BP,vgafont8);
26445                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26446 6B57           BB                   0F6A  mov	bx,#_vgafont8
26447 6B5A           53                         push	bx
26448                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26449 6B5B           FF76         08            push	8[bp]
26450                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26451 6B5E           FF76         FE            push	-2[bp]
26452                                           ! Debug: func () void = write_word+0 (used reg = )
26453 6B61           E8         1214            call	_write_word
26454 6B64           83C4                   06  add	sp,*6
26455                                           !BCC_EOS
26456                                           ! 3653     break;
26457 6B67           E9         00C5            br 	.23D
26458                                           !BCC_EOS
26459                                           ! 3654    case 0x04:
26460                                           ! 3655     write_word(ss,ES,0xC000);
26461                       00006B6A            .244:
26462                                           ! Debug: list unsigned int = const $C000 (used reg = )
26463 6B6A           B8                   C000  mov	ax,#$C000
26464 6B6D           50                         push	ax
26465                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26466 6B6E           FF76         06            push	6[bp]
26467                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26468 6B71           FF76         FE            push	-2[bp]
26469                                           ! Debug: func () void = write_word+0 (used reg = )
26470 6B74           E8         1201            call	_write_word
26471 6B77           83C4                   06  add	sp,*6
26472                                           !BCC_EOS
26473                                           ! 3656     write_word(ss,BP,vgafont8+128*8);
26474                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26475 6B7A           BB                   136A  mov	bx,#_vgafont8+$400
26476 6B7D           53                         push	bx
26477                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26478 6B7E           FF76         08            push	8[bp]
26479                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26480 6B81           FF76         FE            push	-2[bp]
26481                                           ! Debug: func () void = write_word+0 (used reg = )
26482 6B84           E8         11F1            call	_write_word
26483 6B87           83C4                   06  add	sp,*6
26484                                           !BCC_EOS
26485                                           ! 3657     break;
26486 6B8A           E9         00A2            br 	.23D
26487                                           !BCC_EOS
26488                                           ! 3658    case 0x05:
26489                                           ! 3659     write_word(ss,ES,0xC000);
26490                       00006B8D            .245:
26491                                           ! Debug: list unsigned int = const $C000 (used reg = )
26492 6B8D           B8                   C000  mov	ax,#$C000
26493 6B90           50                         push	ax
26494                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26495 6B91           FF76         06            push	6[bp]
26496                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26497 6B94           FF76         FE            push	-2[bp]
26498                                           ! Debug: func () void = write_word+0 (used reg = )
26499 6B97           E8         11DE            call	_write_word
26500 6B9A           83C4                   06  add	sp,*6
26501                                           !BCC_EOS
26502                                           ! 3660     write_word(ss,BP,vgafont14alt);
26503                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26504 6B9D           BB                   356A  mov	bx,#_vgafont14alt
26505 6BA0           53                         push	bx
26506                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26507 6BA1           FF76         08            push	8[bp]
26508                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26509 6BA4           FF76         FE            push	-2[bp]
26510                                           ! Debug: func () void = write_word+0 (used reg = )
26511 6BA7           E8         11CE            call	_write_word
26512 6BAA           83C4                   06  add	sp,*6
26513                                           !BCC_EOS
26514                                           ! 3661     break;
26515 6BAD           E9         007F            jmp .23D
26516                                           !BCC_EOS
26517                                           ! 3662    case 0x06:
26518                                           ! 3663     write_word(ss,ES,0xC000);
26519                       00006BB0            .246:
26520                                           ! Debug: list unsigned int = const $C000 (used reg = )
26521 6BB0           B8                   C000  mov	ax,#$C000
26522 6BB3           50                         push	ax
26523                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26524 6BB4           FF76         06            push	6[bp]
26525                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26526 6BB7           FF76         FE            push	-2[bp]
26527                                           ! Debug: func () void = write_word+0 (used reg = )
26528 6BBA           E8         11BB            call	_write_word
26529 6BBD           83C4                   06  add	sp,*6
26530                                           !BCC_EOS
26531                                           ! 3664     write_word(ss,BP,vgafont16);
26532                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26533 6BC0           BB                   256A  mov	bx,#_vgafont16
26534 6BC3           53                         push	bx
26535                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26536 6BC4           FF76         08            push	8[bp]
26537                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26538 6BC7           FF76         FE            push	-2[bp]
26539                                           ! Debug: func () void = write_word+0 (used reg = )
26540 6BCA           E8         11AB            call	_write_word
26541 6BCD           83C4                   06  add	sp,*6
26542                                           !BCC_EOS
26543                                           ! 3665     break;
26544 6BD0           EB           5D            jmp .23D
26545                                           !BCC_EOS
26546                                           ! 3666    case 0x07:
26547                                           ! 3667     write_word(ss,ES,0xC000);
26548                       00006BD2            .247:
26549                                           ! Debug: list unsigned int = const $C000 (used reg = )
26550 6BD2           B8                   C000  mov	ax,#$C000
26551 6BD5           50                         push	ax
26552                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26553 6BD6           FF76         06            push	6[bp]
26554                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26555 6BD9           FF76         FE            push	-2[bp]
26556                                           ! Debug: func () void = write_word+0 (used reg = )
26557 6BDC           E8         1199            call	_write_word
26558 6BDF           83C4                   06  add	sp,*6
26559                                           !BCC_EOS
26560                                           ! 3668     write_word(ss,BP,vgafont16alt);
26561                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26562 6BE2           BB                   356B  mov	bx,#_vgafont16alt
26563 6BE5           53                         push	bx
26564                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26565 6BE6           FF76         08            push	8[bp]
26566                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26567 6BE9           FF76         FE            push	-2[bp]
26568                                           ! Debug: func () void = write_word+0 (used reg = )
26569 6BEC           E8         1189            call	_write_word
26570 6BEF           83C4                   06  add	sp,*6
26571                                           !BCC_EOS
26572                                           ! 3669     break;
26573 6BF2           EB           3B            jmp .23D
26574                                           !BCC_EOS
26575                                           ! 3670    default:
26576                                           ! 3671      printf("Get font info BH(%02x) was discarded\n",BH);
26577                       00006BF4            .248:
26578                                           ! Debug: list unsigned char BH = [S+4+2] (used reg = )
26579 6BF4           8A46         04            mov	al,4[bp]
26580 6BF7           30E4                       xor	ah,ah
26581 6BF9           50                         push	ax
26582                                           ! Debug: list * char = .249+0 (used reg = )
26583 6BFA           BB                   A54F  mov	bx,#.249
26584 6BFD           53                         push	bx
26585                                           ! Debug: func () void = printf+0 (used reg = )
26586 6BFE           E8         11E4            call	_printf
26587 6C01           83C4                   04  add	sp,*4
26588                                           !BCC_EOS
26589                                           ! 3672     return;
26590 6C04           89EC                       mov	sp,bp
26591 6C06           5D                         pop	bp
26592 6C07           C3                         ret
26593                                           !BCC_EOS
26594                                           ! 3673   }
26595                                           ! 3674  write
26596                                           ! 3674 _word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26597 6C08           EB           25            jmp .23D
26598                       00006C0A            .23F:
26599 6C0A           2C                     00  sub	al,*0
26600 6C0C           72           E6            jb 	.248
26601 6C0E           3C                     07  cmp	al,*7
26602 6C10           77           1B            ja  	.24A
26603 6C12           30E4                       xor	ah,ah
26604 6C14           D1E0                       shl	ax,*1
26605 6C16           89C3                       mov	bx,ax
26606 6C18           2E                         seg	cs
26607 6C19           FFA7       6C1D            br	.24B[bx]
26608                       00006C1D            .24B:
26609 6C1D                      6AB6            .word	.240
26610 6C1F                      6AED            .word	.241
26611 6C21                      6B24            .word	.242
26612 6C23                      6B47            .word	.243
26613 6C25                      6B6A            .word	.244
26614 6C27                      6B8D            .word	.245
26615 6C29                      6BB0            .word	.246
26616 6C2B                      6BD2            .word	.247
26617                       00006C2D            .24A:
26618 6C2D           EB           C5            jmp	.248
26619                       00006C2F            .23D:
26620                       FFFFFFFC            ..FFF5	=	-4
26621                                           ! Debug: list int = const $85 (used reg = )
26622 6C2F           B8                   0085  mov	ax,#$85
26623 6C32           50                         push	ax
26624                                           ! Debug: list int = const $40 (used reg = )
26625 6C33           B8                   0040  mov	ax,*$40
26626 6C36           50                         push	ax
26627                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26628 6C37           E8         1100            call	_read_byte
26629 6C3A           83C4                   04  add	sp,*4
26630                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26631 6C3D           30E4                       xor	ah,ah
26632                                           ! Debug: list unsigned short = ax+0 (used reg = )
26633 6C3F           50                         push	ax
26634                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26635 6C40           FF76         0A            push	$A[bp]
26636                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26637 6C43           FF76         FE            push	-2[bp]
26638                                           ! Debug: func () void = write_word+0 (used reg = )
26639 6C46           E8         112F            call	_write_word
26640 6C49           83C4                   06  add	sp,*6
26641                                           !BCC_EOS
26642                                           ! 3675  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26643                                           ! Debug: list int = const $84 (used reg = )
26644 6C4C           B8                   0084  mov	ax,#$84
26645 6C4F           50                         push	ax
26646                                           ! Debug: list int = const $40 (used reg = )
26647 6C50           B8                   0040  mov	ax,*$40
26648 6C53           50                         push	ax
26649                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26650 6C54           E8         10E3            call	_read_byte
26651 6C57           83C4                   04  add	sp,*4
26652                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26653 6C5A           30E4                       xor	ah,ah
26654                                           ! Debug: list unsigned short = ax+0 (used reg = )
26655 6C5C           50                         push	ax
26656                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26657 6C5D           FF76         0C            push	$C[bp]
26658                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26659 6C60           FF76         FE            push	-2[bp]
26660                                           ! Debug: func () void = write_word+0 (used reg = )
26661 6C63           E8         1112            call	_write_word
26662 6C66           83C4                   06  add	sp,*6
26663                                           !BCC_EOS
26664                                           ! 3676 }
26665 6C69           89EC                       mov	sp,bp
26666 6C6B           5D                         pop	bp
26667 6C6C           C3                         ret
26668                                           ! 3677 #asm
26669                                           !BCC_ASM
26670                       00000006            _biosfn_get_font_info.BP	set	6
26671                       00000002            _biosfn_get_font_info.BH	set	2
26672                       00000008            _biosfn_get_font_info.CX	set	8
26673                       0000000A            _biosfn_get_font_info.DX	set	$A
26674                       00000004            _biosfn_get_font_info.ES	set	4
26675                       00006C6D            biosfn_get_ega_info:
26676 6C6D           1E                           push ds
26677 6C6E           50                           push ax
26678 6C6F           B8                   0040    mov ax, # 0x40
26679 6C72           8ED8                         mov ds, ax
26680 6C74           30ED                         xor ch, ch
26681 6C76           BB                   0088    mov bx, # 0x88
26682 6C79           8A0F                         mov cl, [bx]
26683 6C7B           80E1                   0F    and cl, #0x0f
26684 6C7E           BB                   0063    mov bx, # 0x63
26685 6C81           8B07                         mov ax, [bx]
26686 6C83           BB                   0003    mov bx, #0x0003
26687 6C86           3D                   03B4    cmp ax, # 0x3b4
26688 6C89           75           02              jne mode_ega_color
26689 6C8B           B7                     01    mov bh, #0x01
26690                       00006C8D            mode_ega_color:
26691 6C8D           58                           pop ax
26692 6C8E           1F                           pop ds
26693 6C8F           C3                           ret
26694                                           ! 3697 endasm
26695                                           !BCC_ENDASM
26696                                           ! 3698 static void biosfn_alternate_prtsc()
26697                                           ! Register BX used in function biosfn_get_font_info
26698                                           ! 3699 {
26699                       00006C90            _biosfn_alternate_prtsc:
26700                                           ! 3700  unimplemented();
26701 6C90           55                         push	bp
26702 6C91           89E5                       mov	bp,sp
26703                                           ! Debug: func () void = unimplemented+0 (used reg = )
26704 6C93           E8         1133            call	_unimplemented
26705                                           !BCC_EOS
26706                                           ! 3701 }
26707 6C96           5D                         pop	bp
26708 6C97           C3                         ret
26709                                           ! 3702 #asm
26710                                           !BCC_ASM
26711                       00006C98            biosfn_select_vert_res:
26712                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26713 6C98           1E                           push ds
26714 6C99           53                           push bx
26715 6C9A           52                           push dx
26716 6C9B           88C2                         mov dl, al
26717 6C9D           B8                   0040    mov ax, # 0x40
26718 6CA0           8ED8                         mov ds, ax
26719 6CA2           BB                   0089    mov bx, # 0x89
26720 6CA5           8A07                         mov al, [bx]
26721 6CA7           BB                   0088    mov bx, # 0x88
26722 6CAA           8A27                         mov ah, [bx]
26723 6CAC           80FA                   01    cmp dl, #0x01
26724 6CAF           74           24              je vert_res_350
26725 6CB1           72           2C              jb vert_res_200
26726 6CB3           80FA                   02    cmp dl, #0x02
26727 6CB6           74           11              je vert_res_400
26728 6CB8           88D0                         mov al, dl
26729 6CBA           30E4                         xor ah, ah
26730 6CBC           50                           push ax
26731 6CBD           BB                   6CFA    mov bx, #msg_vert_res
26732 6CC0           53                           push bx
26733 6CC1           E8         1121              call _printf
26734 6CC4           83C4                   04    add sp, #4
26735 6CC7           EB           2A              jmp set_retcode
26736                       00006CC9            vert_res_400:
26737                                             ; reset modeset ctl bit 7 and set bit 4
26738                                             ; set switches bit 3-0 to 0x09
26739 6CC9           24                     7F    and al, #0x7f
26740 6CCB           0C                     10    or al, #0x10
26741 6CCD           80E4                   F0    and ah, #0xf0
26742 6CD0           80CC                   09    or ah, #0x09
26743 6CD3           75           14              jnz set_vert_res
26744                       00006CD5            vert_res_350:
26745                                             ; reset modeset ctl bit 7 and bit 4
26746                                             ; set switches bit 3-0 to 0x09
26747 6CD5           24                     6F    and al, #0x6f
26748 6CD7           80E4                   F0    and ah, #0xf0
26749 6CDA           80CC                   09    or ah, #0x09
26750 6CDD           75           0A              jnz set_vert_res
26751                       00006CDF            vert_res_200:
26752                                             ; set modeset ctl bit 7 and reset bit 4
26753                                             ; set switches bit 3-0 to 0x08
26754 6CDF           24                     EF    and al, #0xef
26755 6CE1           0C                     80    or al, #0x80
26756 6CE3           80E4                   F0    and ah, #0xf0
26757 6CE6           80CC                   08    or ah, #0x08
26758                       00006CE9            set_vert_res:
26759 6CE9           BB                   0089    mov bx, # 0x89
26760 6CEC           8807                         mov [bx], al
26761 6CEE           BB                   0088    mov bx, # 0x88
26762 6CF1           8827                         mov [bx], ah
26763                       00006CF3            set_retcode:
26764 6CF3           B8                   1212    mov ax, #0x1212
26765 6CF6           5A                           pop dx
26766 6CF7           5B                           pop bx
26767 6CF8           1F                           pop ds
26768 6CF9           C3                           ret
26769                       00006CFA            msg_vert_res:
26770 6CFA                        53            .ascii "Select vert res (%02x) was discarded"
26771 6D1E                        0D            .byte 0x0d,0x0a,0x00
26772                       00006D21            biosfn_enable_default_palette_loading:
26773 6D21           1E                           push ds
26774 6D22           53                           push bx
26775 6D23           52                           push dx
26776 6D24           88C2                         mov dl, al
26777 6D26           80E2                   01    and dl, #0x01
26778 6D29           C0E2                   03    shl dl, 3
26779 6D2C           B8                   0040    mov ax, # 0x40
26780 6D2F           8ED8                         mov ds, ax
26781 6D31           BB                   0089    mov bx, # 0x89
26782 6D34           8A07                         mov al, [bx]
26783 6D36           24                     F7    and al, #0xf7
26784 6D38           08D0                         or al, dl
26785 6D3A           8807                         mov [bx], al
26786 6D3C           B8                   1212    mov ax, #0x1212
26787 6D3F           5A                           pop dx
26788 6D40           5B                           pop bx
26789 6D41           1F                           pop ds
26790 6D42           C3                           ret
26791                       00006D43            biosfn_enable_video_addressing:
26792 6D43           53                           push bx
26793 6D44           52                           push dx
26794 6D45           88C3                         mov bl, al
26795 6D47           80E3                   01    and bl, #0x01
26796 6D4A           80F3                   01    xor bl, #0x01
26797 6D4D           D0E3                         shl bl, 1
26798 6D4F           BA                   03CC    mov dx, # 0x3cc
26799 6D52           EC                           in al, dx
26800 6D53           24                     FD    and al, #0xfd
26801 6D55           08D8                         or al, bl
26802 6D57           BA                   03C2    mov dx, # 0x3c2
26803 6D5A           EE                           out dx, al
26804 6D5B           B8                   1212    mov ax, #0x1212
26805 6D5E           5A                           pop dx
26806 6D5F           5B                           pop bx
26807 6D60           C3                           ret
26808                       00006D61            biosfn_enable_grayscale_summing:
26809 6D61           1E                           push ds
26810 6D62           53                           push bx
26811 6D63           52                           push dx
26812 6D64           88C2                         mov dl, al
26813 6D66           80E2                   01    and dl, #0x01
26814 6D69           80F2                   01    xor dl, #0x01
26815 6D6C           D0E2                         shl dl, 1
26816 6D6E           B8                   0040    mov ax, # 0x40
26817 6D71           8ED8                         mov ds, ax
26818 6D73           BB                   0089    mov bx, # 0x89
26819 6D76           8A07                         mov al, [bx]
26820 6D78           24                     FD    and al, #0xfd
26821 6D7A           08D0                         or al, dl
26822 6D7C           8807                         mov [bx], al
26823 6D7E           B8                   1212    mov ax, #0x1212
26824 6D81           5A                           pop dx
26825 6D82           5B                           pop bx
26826 6D83           1F                           pop ds
26827 6D84           C3                           ret
26828                       00006D85            biosfn_enable_cursor_emulation:
26829 6D85           1E                           push ds
26830 6D86           53                           push bx
26831 6D87           52                           push dx
26832 6D88           88C2                         mov dl, al
26833 6D8A           80E2                   01    and dl, #0x01
26834 6D8D           80F2                   01    xor dl, #0x01
26835 6D90           B8                   0040    mov ax, # 0x40
26836 6D93           8ED8                         mov ds, ax
26837 6D95           BB                   0089    mov bx, # 0x89
26838 6D98           8A07                         mov al, [bx]
26839 6D9A           24                     FE    and al, #0xfe
26840 6D9C           08D0                         or al, dl
26841 6D9E           8807                         mov [bx], al
26842 6DA0           B8                   1212    mov ax, #0x1212
26843 6DA3           5A                           pop dx
26844 6DA4           5B                           pop bx
26845 6DA5           1F                           pop ds
26846 6DA6           C3                           ret
26847                                           ! 3839 endasm
26848                                           !BCC_ENDASM
26849                                           ! 3840 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26850                       00006DA7            _biosfn_switch_video_interface:
26851                                           !BCC_EOS
26852                                           !BCC_EOS
26853                                           !BCC_EOS
26854                                           ! 3841 {
26855                                           ! 3842  unimplemented();
26856 6DA7           55                         push	bp
26857 6DA8           89E5                       mov	bp,sp
26858                                           ! Debug: func () void = unimplemented+0 (used reg = )
26859 6DAA           E8         101C            call	_unimplemented
26860                                           !BCC_EOS
26861                                           ! 3843 }
26862 6DAD           5D                         pop	bp
26863 6DAE           C3                         ret
26864                                           ! 3844 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26865                       00006DAF            _biosfn_enable_video_refresh_control:
26866                                           !BCC_EOS
26867                                           ! 3845 {
26868                                           ! 3846  unimplemented();
26869 6DAF           55                         push	bp
26870 6DB0           89E5                       mov	bp,sp
26871                                           ! Debug: func () void = unimplemented+0 (used reg = )
26872 6DB2           E8         1014            call	_unimplemented
26873                                           !BCC_EOS
26874                                           ! 3847 }
26875 6DB5           5D                         pop	bp
26876 6DB6           C3                         ret
26877                                           ! 3848 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26878                                           ! 3849 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26879                       00006DB7            _biosfn_write_string:
26880                                           !BCC_EOS
26881                                           !BCC_EOS
26882                                           !BCC_EOS
26883                                           !BCC_EOS
26884                                           !BCC_EOS
26885                                           !BCC_EOS
26886                                           !BCC_EOS
26887                                           !BCC_EOS
26888                                           ! 3850 {
26889                                           ! 3851  Bit16u newcurs,oldcurs,dummy;
26890                                           !BCC_EOS
26891                                           ! 3852  Bit8u car,carattr;
26892                                           !BCC_EOS
26893                                           ! 3853  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26894 6DB7           55                         push	bp
26895 6DB8           89E5                       mov	bp,sp
26896 6DBA           83C4                   F8  add	sp,*-8
26897                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26898 6DBD           8D5E         FC            lea	bx,-4[bp]
26899 6DC0           53                         push	bx
26900                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26901 6DC1           8D5E         FA            lea	bx,-6[bp]
26902 6DC4           53                         push	bx
26903                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26904 6DC5           8A46         06            mov	al,6[bp]
26905 6DC8           30E4                       xor	ah,ah
26906 6DCA           50                         push	ax
26907                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26908 6DCB           E8         D6B6            call	_biosfn_get_cursor_pos
26909 6DCE           83C4                   06  add	sp,*6
26910                                           !BCC_EOS
26911                                           ! 3854  if(row==0xff)
26912                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26913 6DD1           8A46         0C            mov	al,$C[bp]
26914 6DD4           3C                     FF  cmp	al,#$FF
26915 6DD6           75           12            jne 	.24C
26916                       00006DD8            .24D:
26917                                           ! 3855   {col=oldcurs&0x00ff;
26918                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26919 6DD8           8A46         FC            mov	al,-4[bp]
26920                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26921 6DDB           8846         0E            mov	$E[bp],al
26922                                           !BCC_EOS
26923                                           ! 3856    row=(oldcurs&0xff00)>>8;
26924                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26925 6DDE           8B46         FC            mov	ax,-4[bp]
26926 6DE1           30C0                       xor	al,al
26927                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26928 6DE3           88E0                       mov	al,ah
26929 6DE5           30E4                       xor	ah,ah
26930                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26931 6DE7           8846         0C            mov	$C[bp],al
26932                                           !BCC_EOS
26933                                           ! 3857   }
26934                                           ! 3858  newcurs=row; newcurs<<=8; newcurs+=col;
26935                       00006DEA            .24C:
26936                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26937 6DEA           8A46         0C            mov	al,$C[bp]
26938 6DED           30E4                       xor	ah,ah
26939 6DEF           8946         FE            mov	-2[bp],ax
26940                                           !BCC_EOS
26941                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26942 6DF2           8B46         FE            mov	ax,-2[bp]
26943 6DF5           88C4                       mov	ah,al
26944 6DF7           30C0                       xor	al,al
26945 6DF9           8946         FE            mov	-2[bp],ax
26946                                           !BCC_EOS
26947                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26948 6DFC           8B46         FE            mov	ax,-2[bp]
26949 6DFF           0246         0E            add	al,$E[bp]
26950 6E02           80D4                   00  adc	ah,*0
26951 6E05           8946         FE            mov	-2[bp],ax
26952                                           !BCC_EOS
26953                                           ! 3859  biosfn_set_cursor_pos(page,newcurs);
26954                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26955 6E08           FF76         FE            push	-2[bp]
26956                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26957 6E0B           8A46         06            mov	al,6[bp]
26958 6E0E           30E4                       xor	ah,ah
26959 6E10           50                         push	ax
26960                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26961 6E11           E8         D570            call	_biosfn_set_cursor_pos
26962 6E14           83C4                   04  add	sp,*4
26963                                           !BCC_EOS
26964                                           ! 3860  while(count--!=0)
26965                                           ! 3861   {
26966 6E17           EB           4F            jmp .24F
26967                       00006E19            .250:
26968                                           ! 3862    car=read_byte(seg,offset++);
26969                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26970 6E19           8B46         12            mov	ax,$12[bp]
26971 6E1C           40                         inc	ax
26972 6E1D           8946         12            mov	$12[bp],ax
26973                                           ! Debug: list unsigned short = ax-1 (used reg = )
26974 6E20           48                         dec	ax
26975 6E21           50                         push	ax
26976                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26977 6E22           FF76         10            push	$10[bp]
26978                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26979 6E25           E8         0F12            call	_read_byte
26980 6E28           83C4                   04  add	sp,*4
26981                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26982 6E2B           8846         F9            mov	-7[bp],al
26983                                           !BCC_EOS
26984                                           ! 3863    if((flag&0x02)!=0)
26985                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26986 6E2E           8A46         04            mov	al,4[bp]
26987 6E31           24                     02  and	al,*2
26988                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26989 6E33           84C0                       test	al,al
26990 6E35           74           15            je  	.251
26991                       00006E37            .252:
26992                                           ! 3864     attr=read_byte(seg,offset++);
26993                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26994 6E37           8B46         12            mov	ax,$12[bp]
26995 6E3A           40                         inc	ax
26996 6E3B           8946         12            mov	$12[bp],ax
26997                                           ! Debug: list unsigned short = ax-1 (used reg = )
26998 6E3E           48                         dec	ax
26999 6E3F           50                         push	ax
27000                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
27001 6E40           FF76         10            push	$10[bp]
27002                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27003 6E43           E8         0EF4            call	_read_byte
27004 6E46           83C4                   04  add	sp,*4
27005                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
27006 6E49           8846         08            mov	8[bp],al
27007                                           !BCC_EOS
27008                                           ! 3865    biosfn_write_teletype(car,page,attr,3);
27009                       00006E4C            .251:
27010                                           ! Debug: list int = const 3 (used reg = )
27011 6E4C           B8                   0003  mov	ax,*3
27012 6E4F           50                         push	ax
27013                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
27014 6E50           8A46         08            mov	al,8[bp]
27015 6E53           30E4                       xor	ah,ah
27016 6E55           50                         push	ax
27017                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
27018 6E56           8A46         06            mov	al,6[bp]
27019 6E59           30E4                       xor	ah,ah
27020 6E5B           50                         push	ax
27021                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
27022 6E5C           8A46         F9            mov	al,-7[bp]
27023 6E5F           30E4                       xor	ah,ah
27024 6E61           50                         push	ax
27025                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
27026 6E62           E8         F0B7            call	_biosfn_write_teletype
27027 6E65           83C4                   08  add	sp,*8
27028                                           !BCC_EOS
27029                                           ! 3866   }
27030                                           ! 3867  if((flag&0x01)==0)
27031                       00006E68            .24F:
27032                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
27033 6E68           8B46         0A            mov	ax,$A[bp]
27034 6E6B           48                         dec	ax
27035 6E6C           8946         0A            mov	$A[bp],ax
27036                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
27037 6E6F           3D                   FFFF  cmp	ax,*-1
27038 6E72           75           A5            jne	.250
27039                       00006E74            .253:
27040                       00006E74            .24E:
27041                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
27042 6E74           8A46         04            mov	al,4[bp]
27043 6E77           24                     01  and	al,*1
27044                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
27045 6E79           84C0                       test	al,al
27046 6E7B           75           0F            jne 	.254
27047                       00006E7D            .255:
27048                                           ! 3868   biosfn_set_cursor_pos(page,oldcurs);
27049                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
27050 6E7D           FF76         FC            push	-4[bp]
27051                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
27052 6E80           8A46         06            mov	al,6[bp]
27053 6E83           30E4                       xor	ah,ah
27054 6E85           50                         push	ax
27055                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
27056 6E86           E8         D4FB            call	_biosfn_set_cursor_pos
27057 6E89           83C4                   04  add	sp,*4
27058                                           !BCC_EOS
27059                                           ! 3869 }
27060                       00006E8C            .254:
27061 6E8C           89EC                       mov	sp,bp
27062 6E8E           5D                         pop	bp
27063 6E8F           C3                         ret
27064                                           ! 3870 #asm
27065                                           !BCC_ASM
27066                       00000008            _biosfn_write_string.count	set	8
27067                       0000000E            _biosfn_write_string.seg	set	$E
27068                       0000000C            _biosfn_write_string.col	set	$C
27069                       00000002            _biosfn_write_string.flag	set	2
27070                       00000006            _biosfn_write_string.attr	set	6
27071                       00000004            _biosfn_write_string.page	set	4
27072                       0000000A            _biosfn_write_string.row	set	$A
27073                       00000010            _biosfn_write_string.offset	set	$10
27074                       00006E90            biosfn_group_1A:
27075 6E90           3C                     00    cmp al, #0x00
27076 6E92           74           08              je biosfn_read_display_code
27077 6E94           3C                     01    cmp al, #0x01
27078 6E96           74           19              je biosfn_set_display_code
27079 6E98           E8         0F3C              call _unknown
27080 6E9B           C3                           ret
27081                       00006E9C            biosfn_read_display_code:
27082 6E9C           1E                           push ds
27083 6E9D           50                           push ax
27084 6E9E           B8                   0040    mov ax, # 0x40
27085 6EA1           8ED8                         mov ds, ax
27086 6EA3           BB                   008A    mov bx, # 0x8A
27087 6EA6           8A07                         mov al, [bx]
27088 6EA8           88C3                         mov bl, al
27089 6EAA           30FF                         xor bh, bh
27090 6EAC           58                           pop ax
27091 6EAD           88E0                         mov al, ah
27092 6EAF           1F                           pop ds
27093 6EB0           C3                           ret
27094                       00006EB1            biosfn_set_display_code:
27095 6EB1           1E                           push ds
27096 6EB2           50                           push ax
27097 6EB3           53                           push bx
27098 6EB4           B8                   0040    mov ax, # 0x40
27099 6EB7           8ED8                         mov ds, ax
27100 6EB9           89D8                         mov ax, bx
27101 6EBB           BB                   008A    mov bx, # 0x8A
27102 6EBE           8807                         mov [bx], al
27103 6EC0           88E0                         mov al, ah
27104 6EC2           30E4                         xor ah, ah
27105 6EC4           50                           push ax
27106 6EC5           BB                   6ED5    mov bx, #msg_alt_dcc
27107 6EC8           53                           push bx
27108 6EC9           E8         0F19              call _printf
27109 6ECC           83C4                   04    add sp, #4
27110 6ECF           5B                           pop bx
27111 6ED0           58                           pop ax
27112 6ED1           88E0                         mov al, ah
27113 6ED3           1F                           pop ds
27114 6ED4           C3                           ret
27115                       00006ED5            msg_alt_dcc:
27116 6ED5                        41            .ascii "Alternate Display code (%02x) was discarded"
27117 6F00                        0D            .byte 0x0d,0x0a,0x00
27118                                           ! 3915 endasm
27119                                           !BCC_ENDASM
27120                                           ! 3916 static void biosfn_read_state_info (BX,ES,DI)
27121                                           ! Register BX used in function biosfn_write_string
27122                                           ! 3917 Bit16u BX;Bit16u ES;Bit16u DI;
27123                       00006F03            _biosfn_read_state_info:
27124                                           !BCC_EOS
27125                                           !BCC_EOS
27126                                           !BCC_EOS
27127                                           ! 3918 {
27128                                           ! 3919  write_word(ES,DI+0x00,&static_functionality);
27129 6F03           55                         push	bp
27130 6F04           89E5                       mov	bp,sp
27131                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
27132 6F06           BB                   0F5A  mov	bx,#_static_functionality
27133 6F09           53                         push	bx
27134                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
27135 6F0A           8B46         08            mov	ax,8[bp]
27136                                           ! Debug: list unsigned int = ax+0 (used reg = )
27137 6F0D           50                         push	ax
27138                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27139 6F0E           FF76         06            push	6[bp]
27140                                           ! Debug: func () void = write_word+0 (used reg = )
27141 6F11           E8         0E64            call	_write_word
27142 6F14           89EC                       mov	sp,bp
27143                                           !BCC_EOS
27144                                           ! 3920  write_word(ES,DI+0x02,0xC000);
27145                                           ! Debug: list unsigned int = const $C000 (used reg = )
27146 6F16           B8                   C000  mov	ax,#$C000
27147 6F19           50                         push	ax
27148                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
27149 6F1A           8B46         08            mov	ax,8[bp]
27150                                           ! Debug: list unsigned int = ax+2 (used reg = )
27151 6F1D           40                         inc	ax
27152 6F1E           40                         inc	ax
27153 6F1F           50                         push	ax
27154                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27155 6F20           FF76         06            push	6[bp]
27156                                           ! Debug: func () void = write_word+0 (used reg = )
27157 6F23           E8         0E52            call	_write_word
27158 6F26           89EC                       mov	sp,bp
27159                                           !BCC_EOS
27160                                           ! 3921  memcpyb(ES,DI+0x04,0x40,0x49,30);
27161                                           ! Debug: list int = const $1E (used reg = )
27162 6F28           B8                   001E  mov	ax,*$1E
27163 6F2B           50                         push	ax
27164                                           ! Debug: list int = const $49 (used reg = )
27165 6F2C           B8                   0049  mov	ax,*$49
27166 6F2F           50                         push	ax
27167                                           ! Debug: list int = const $40 (used reg = )
27168 6F30           B8                   0040  mov	ax,*$40
27169 6F33           50                         push	ax
27170                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
27171 6F34           8B46         08            mov	ax,8[bp]
27172                                           ! Debug: list unsigned int = ax+4 (used reg = )
27173 6F37           05                   0004  add	ax,*4
27174 6F3A           50                         push	ax
27175                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27176 6F3B           FF76         06            push	6[bp]
27177                                           ! Debug: func () void = memcpyb+0 (used reg = )
27178 6F3E           E8         0D99            call	_memcpyb
27179 6F41           89EC                       mov	sp,bp
27180                                           !BCC_EOS
27181                                           ! 3922  memcpyb(ES,DI+0x22,0x40,0x84,3);
27182                                           ! Debug: list int = const 3 (used reg = )
27183 6F43           B8                   0003  mov	ax,*3
27184 6F46           50                         push	ax
27185                                           ! Debug: list int = const $84 (used reg = )
27186 6F47           B8                   0084  mov	ax,#$84
27187 6F4A           50                         push	ax
27188                                           ! Debug: list int = const $40 (used reg = )
27189 6F4B           B8                   0040  mov	ax,*$40
27190 6F4E           50                         push	ax
27191                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
27192 6F4F           8B46         08            mov	ax,8[bp]
27193                                           ! Debug: list unsigned int = ax+$22 (used reg = )
27194 6F52           05                   0022  add	ax,*$22
27195 6F55           50                         push	ax
27196                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27197 6F56           FF76         06            push	6[bp]
27198                                           ! Debug: func () void = memcpyb+0 (used reg = )
27199 6F59           E8         0D7E            call	_memcpyb
27200 6F5C           89EC                       mov	sp,bp
27201                                           !BCC_EOS
27202                                           ! 3923  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
27203                                           ! Debug: list int = const $8A (used reg = )
27204 6F5E           B8                   008A  mov	ax,#$8A
27205 6F61           50                         push	ax
27206                                           ! Debug: list int = const $40 (used reg = )
27207 6F62           B8                   0040  mov	ax,*$40
27208 6F65           50                         push	ax
27209                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27210 6F66           E8         0DD1            call	_read_byte
27211 6F69           89EC                       mov	sp,bp
27212                                           ! Debug: list unsigned char = al+0 (used reg = )
27213 6F6B           30E4                       xor	ah,ah
27214 6F6D           50                         push	ax
27215                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
27216 6F6E           8B46         08            mov	ax,8[bp]
27217                                           ! Debug: list unsigned int = ax+$25 (used reg = )
27218 6F71           05                   0025  add	ax,*$25
27219 6F74           50                         push	ax
27220                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27221 6F75           FF76         06            push	6[bp]
27222                                           ! Debug: func () void = write_byte+0 (used reg = )
27223 6F78           E8         0DE5            call	_write_byte
27224 6F7B           89EC                       mov	sp,bp
27225                                           !BCC_EOS
27226                                           ! 3924  write_byte(ES,DI+0x26,0);
27227                                           ! Debug: list int = const 0 (used reg = )
27228 6F7D           31C0                       xor	ax,ax
27229 6F7F           50                         push	ax
27230                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
27231 6F80           8B46         08            mov	ax,8[bp]
27232                                           ! Debug: list unsigned int = ax+$26 (used reg = )
27233 6F83           05                   0026  add	ax,*$26
27234 6F86           50                         push	ax
27235                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27236 6F87           FF76         06            push	6[bp]
27237                                           ! Debug: func () void = write_byte+0 (used reg = )
27238 6F8A           E8         0DD3            call	_write_byte
27239 6F8D           89EC                       mov	sp,bp
27240                                           !BCC_EOS
27241                                           ! 3925  write_byte(ES,DI+0x27,16);
27242                                           ! Debug: list int = const $10 (used reg = )
27243 6F8F           B8                   0010  mov	ax,*$10
27244 6F92           50                         push	ax
27245                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
27246 6F93           8B46         08            mov	ax,8[bp]
27247                                           ! Debug: list unsigned int = ax+$27 (used reg = )
27248 6F96           05                   0027  add	ax,*$27
27249 6F99           50                         push	ax
27250                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27251 6F9A           FF76         06            push	6[bp]
27252                                           ! Debug: func () void = write_byte+0 (used reg = )
27253 6F9D           E8         0DC0            call	_write_byte
27254 6FA0           89EC                       mov	sp,bp
27255                                           !BCC_EOS
27256                                           ! 3926  write_byte(ES,DI+0x28,0);
27257                                           ! Debug: list int = const 0 (used reg = )
27258 6FA2           31C0                       xor	ax,ax
27259 6FA4           50                         push	ax
27260                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
27261 6FA5           8B46         08            mov	ax,8[bp]
27262                                           ! Debug: list unsigned int = ax+$28 (used reg = )
27263 6FA8           05                   0028  add	ax,*$28
27264 6FAB           50                         push	ax
27265                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27266 6FAC           FF76         06            push	6[bp]
27267                                           ! Debug: func () void = write_byte+0 (used reg = )
27268 6FAF           E8         0DAE            call	_write_byte
27269 6FB2           89EC                       mov	sp,bp
27270                                           !BCC_EOS
27271                                           ! 3927  write_byte(ES,DI+0x29,8);
27272                                           ! Debug: list int = const 8 (used reg = )
27273 6FB4           B8                   0008  mov	ax,*8
27274 6FB7           50                         push	ax
27275                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
27276 6FB8           8B46         08            mov	ax,8[bp]
27277                                           ! Debug: list unsigned int = ax+$29 (used reg = )
27278 6FBB           05                   0029  add	ax,*$29
27279 6FBE           50                         push	ax
27280                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27281 6FBF           FF76         06            push	6[bp]
27282                                           ! Debug: func () void = write_byte+0 (used reg = )
27283 6FC2           E8         0D9B            call	_write_byte
27284 6FC5           89EC                       mov	sp,bp
27285                                           !BCC_EOS
27286                                           ! 3928  write_byte(ES,DI+0x2a,2);
27287                                           ! Debug: list int = const 2 (used reg = )
27288 6FC7           B8                   0002  mov	ax,*2
27289 6FCA           50                         push	ax
27290                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27291 6FCB           8B46         08            mov	ax,8[bp]
27292                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27293 6FCE           05                   002A  add	ax,*$2A
27294 6FD1           50                         push	ax
27295                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27296 6FD2           FF76         06            push	6[bp]
27297                                           ! Debug: func () void = write_byte+0 (used reg = )
27298 6FD5           E8         0D88            call	_write_byte
27299 6FD8           89EC                       mov	sp,bp
27300                                           !BCC_EOS
27301                                           ! 3929  write_byte(ES,DI+0x2b,0);
27302                                           ! Debug: list int = const 0 (used reg = )
27303 6FDA           31C0                       xor	ax,ax
27304 6FDC           50                         push	ax
27305                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27306 6FDD           8B46         08            mov	ax,8[bp]
27307                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27308 6FE0           05                   002B  add	ax,*$2B
27309 6FE3           50                         push	ax
27310                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27311 6FE4           FF76         06            push	6[bp]
27312                                           ! Debug: func () void = write_byte+0 (used reg = )
27313 6FE7           E8         0D76            call	_write_byte
27314 6FEA           89EC                       mov	sp,bp
27315                                           !BCC_EOS
27316                                           ! 3930  write_byte(ES,DI+0x2c,0);
27317                                           ! Debug: list int = const 0 (used reg = )
27318 6FEC           31C0                       xor	ax,ax
27319 6FEE           50                         push	ax
27320                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27321 6FEF           8B46         08            mov	ax,8[bp]
27322                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27323 6FF2           05                   002C  add	ax,*$2C
27324 6FF5           50                         push	ax
27325                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27326 6FF6           FF76         06            push	6[bp]
27327                                           ! Debug: func () void = write_byte+0 (used reg = )
27328 6FF9           E8         0D64            call	_write_byte
27329 6FFC           89EC                       mov	sp,bp
27330                                           !BCC_EOS
27331                                           ! 3931  write_byte(ES,DI+0x31,3);
27332                                           ! Debug: list int = const 3 (used reg = )
27333 6FFE           B8                   0003  mov	ax,*3
27334 7001           50                         push	ax
27335                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27336 7002           8B46         08            mov	ax,8[bp]
27337                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27338 7005           05                   0031  add	ax,*$31
27339 7008           50                         push	ax
27340                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27341 7009           FF76         06            push	6[bp]
27342                                           ! Debug: func () void = write_byte+0 (used reg = )
27343 700C           E8         0D51            call	_write_byte
27344 700F           89EC                       mov	sp,bp
27345                                           !BCC_EOS
27346                                           ! 3932  write_byte(ES,DI+0x32,0);
27347                                           ! Debug: list int = const 0 (used reg = )
27348 7011           31C0                       xor	ax,ax
27349 7013           50                         push	ax
27350                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27351 7014           8B46         08            mov	ax,8[bp]
27352                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27353 7017           05                   0032  add	ax,*$32
27354 701A           50                         push	ax
27355                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27356 701B           FF76         06            push	6[bp]
27357                                           ! Debug: func () void = write_byte+0 (used reg = )
27358 701E           E8         0D3F            call	_write_byte
27359 7021           89EC                       mov	sp,bp
27360                                           !BCC_EOS
27361                                           ! 3933  memsetb(ES,DI+0x33,0,13);
27362                                           ! Debug: list int = const $D (used reg = )
27363 7023           B8                   000D  mov	ax,*$D
27364 7026           50                         push	ax
27365                                           ! Debug: list int = const 0 (used reg = )
27366 7027           31C0                       xor	ax,ax
27367 7029           50                         push	ax
27368                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27369 702A           8B46         08            mov	ax,8[bp]
27370                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27371 702D           05                   0033  add	ax,*$33
27372 7030           50                         push	ax
27373                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27374 7031           FF76         06            push	6[bp]
27375                                           ! Debug: func () void = memsetb+0 (used reg = )
27376 7034           E8         0C59            call	_memsetb
27377 7037           89EC                       mov	sp,bp
27378                                           !BCC_EOS
27379                                           ! 3934 }
27380 7039           5D                         pop	bp
27381 703A           C3                         ret
27382                                           ! 3935 static Bit16u biosfn_read_video_state_size2 (CX)
27383                                           ! Register BX used in function biosfn_read_state_info
27384                                           ! 3936      Bit16u CX;
27385                       0000703B            _biosfn_read_video_state_size2:
27386                                           !BCC_EOS
27387                                           ! 3937 {
27388                                           ! 3938     Bit16u size;
27389                                           !BCC_EOS
27390                                           ! 3939     size = 0;
27391 703B           55                         push	bp
27392 703C           89E5                       mov	bp,sp
27393 703E           4C                         dec	sp
27394 703F           4C                         dec	sp
27395                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27396 7040           31C0                       xor	ax,ax
27397 7042           8946         FE            mov	-2[bp],ax
27398                                           !BCC_EOS
27399                                           ! 3940     if (CX & 1) {
27400                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27401 7045           8A46         04            mov	al,4[bp]
27402 7048           24                     01  and	al,*1
27403 704A           84C0                       test	al,al
27404 704C           74           09            je  	.256
27405                       0000704E            .257:
27406                                           ! 3941         size += 0x46;
27407                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27408 704E           8B46         FE            mov	ax,-2[bp]
27409 7051           05                   0046  add	ax,*$46
27410 7054           8946         FE            mov	-2[bp],ax
27411                                           !BCC_EOS
27412                                           ! 3942     }
27413                                           ! 3943     if (CX & 2) {
27414                       00007057            .256:
27415                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27416 7057           8A46         04            mov	al,4[bp]
27417 705A           24                     02  and	al,*2
27418 705C           84C0                       test	al,al
27419 705E           74           09            je  	.258
27420                       00007060            .259:
27421                                           ! 3944         size += (5 + 8 + 5) * 2 + 6;
27422                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27423 7060           8B46         FE            mov	ax,-2[bp]
27424 7063           05                   002A  add	ax,*$2A
27425 7066           8946         FE            mov	-2[bp],ax
27426                                           !BCC_EOS
27427                                           ! 3945     }
27428                                           ! 3946     if (CX & 4) {
27429                       00007069            .258:
27430                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27431 7069           8A46         04            mov	al,4[bp]
27432 706C           24                     04  and	al,*4
27433 706E           84C0                       test	al,al
27434 7070           74           09            je  	.25A
27435                       00007072            .25B:
27436                                           ! 3947         size += 3 + 256 * 3 + 1;
27437                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27438 7072           8B46         FE            mov	ax,-2[bp]
27439 7075           05                   0304  add	ax,#$304
27440 7078           8946         FE            mov	-2[bp],ax
27441                                           !BCC_EOS
27442                                           ! 3948 }
27443                                           ! 3949     return size;
27444                       0000707B            .25A:
27445 707B           8B46         FE            mov	ax,-2[bp]
27446 707E           89EC                       mov	sp,bp
27447 7080           5D                         pop	bp
27448 7081           C3                         ret
27449                                           !BCC_EOS
27450                                           ! 3950 }
27451                                           ! 3951 static void biosfn_read_video_state_size (CX, BX)
27452                                           ! 3952      Bit16u CX; Bit16u *BX;
27453                       00007082            _biosfn_read_video_state_size:
27454                                           !BCC_EOS
27455                                           !BCC_EOS
27456                                           ! 3953 {
27457                                           ! 3954     Bit16u ss=get_SS();
27458 7082           55                         push	bp
27459 7083           89E5                       mov	bp,sp
27460 7085           4C                         dec	sp
27461 7086           4C                         dec	sp
27462                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27463 7087           E8         0D3C            call	_get_SS
27464                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27465 708A           8946         FE            mov	-2[bp],ax
27466                                           !BCC_EOS
27467                                           ! 3955     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27468                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27469 708D           FF76         04            push	4[bp]
27470                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27471 7090           E8         FFA8            call	_biosfn_read_video_state_size2
27472 7093           44                         inc	sp
27473 7094           44                         inc	sp
27474                                           ! Debug: list unsigned short = ax+0 (used reg = )
27475 7095           50                         push	ax
27476                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27477 7096           FF76         06            push	6[bp]
27478                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27479 7099           FF76         FE            push	-2[bp]
27480                                           ! Debug: func () void = write_word+0 (used reg = )
27481 709C           E8         0CD9            call	_write_word
27482 709F           83C4                   06  add	sp,*6
27483                                           !BCC_EOS
27484                                           ! 3956 }
27485 70A2           89EC                       mov	sp,bp
27486 70A4           5D                         pop	bp
27487 70A5           C3                         ret
27488                                           ! 3957 static Bit16u biosfn_save_video_state (CX,ES,BX)
27489                                           ! 3958      Bit16u CX;Bit16u ES;Bit16u BX;
27490                       000070A6            _biosfn_save_video_state:
27491                                           !BCC_EOS
27492                                           !BCC_EOS
27493                                           !BCC_EOS
27494                                           ! 3959 {
27495                                           ! 3960     Bit16u i, v, crtc_addr, ar_index;
27496                                           !BCC_EOS
27497                                           ! 3961     crtc_addr = read_word(0x40, 0x63);
27498 70A6           55                         push	bp
27499 70A7           89E5                       mov	bp,sp
27500 70A9           83C4                   F8  add	sp,*-8
27501                                           ! Debug: list int = const $63 (used reg = )
27502 70AC           B8                   0063  mov	ax,*$63
27503 70AF           50                         push	ax
27504                                           ! Debug: list int = const $40 (used reg = )
27505 70B0           B8                   0040  mov	ax,*$40
27506 70B3           50                         push	ax
27507                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27508 70B4           E8         0C96            call	_read_word
27509 70B7           83C4                   04  add	sp,*4
27510                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27511 70BA           8946         FA            mov	-6[bp],ax
27512                                           !BCC_EOS
27513                                           ! 3962     if (CX & 1) {
27514                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27515 70BD           8A46         04            mov	al,4[bp]
27516 70C0           24                     01  and	al,*1
27517 70C2           84C0                       test	al,al
27518 70C4         0F84         0266            beq 	.25C
27519                       000070C8            .25D:
27520                                           ! 3963         write_byte(ES, BX, inb(0x3c4)); BX++;
27521                                           ! Debug: list int = const $3C4 (used reg = )
27522 70C8           B8                   03C4  mov	ax,#$3C4
27523 70CB           50                         push	ax
27524                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27525 70CC           E8         0CC1            call	_inb
27526 70CF           44                         inc	sp
27527 70D0           44                         inc	sp
27528                                           ! Debug: list unsigned char = al+0 (used reg = )
27529 70D1           30E4                       xor	ah,ah
27530 70D3           50                         push	ax
27531                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27532 70D4           FF76         08            push	8[bp]
27533                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27534 70D7           FF76         06            push	6[bp]
27535                                           ! Debug: func () void = write_byte+0 (used reg = )
27536 70DA           E8         0C83            call	_write_byte
27537 70DD           83C4                   06  add	sp,*6
27538                                           !BCC_EOS
27539                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27540 70E0           8B46         08            mov	ax,8[bp]
27541 70E3           40                         inc	ax
27542 70E4           8946         08            mov	8[bp],ax
27543                                           !BCC_EOS
27544                                           ! 3964         write_byte(ES, BX, inb(crtc_addr)); BX++;
27545                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27546 70E7           FF76         FA            push	-6[bp]
27547                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27548 70EA           E8         0CA3            call	_inb
27549 70ED           44                         inc	sp
27550 70EE           44                         inc	sp
27551                                           ! Debug: list unsigned char = al+0 (used reg = )
27552 70EF           30E4                       xor	ah,ah
27553 70F1           50                         push	ax
27554                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27555 70F2           FF76         08            push	8[bp]
27556                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27557 70F5           FF76         06            push	6[bp]
27558                                           ! Debug: func () void = write_byte+0 (used reg = )
27559 70F8           E8         0C65            call	_write_byte
27560 70FB           83C4                   06  add	sp,*6
27561                                           !BCC_EOS
27562                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27563 70FE           8B46         08            mov	ax,8[bp]
27564 7101           40                         inc	ax
27565 7102           8946         08            mov	8[bp],ax
27566                                           !BCC_EOS
27567                                           ! 3965         write_byte(ES, BX, inb(0x3ce)); BX++;
27568                                           ! Debug: list int = const $3CE (used reg = )
27569 7105           B8                   03CE  mov	ax,#$3CE
27570 7108           50                         push	ax
27571                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27572 7109           E8         0C84            call	_inb
27573 710C           44                         inc	sp
27574 710D           44                         inc	sp
27575                                           ! Debug: list unsigned char = al+0 (used reg = )
27576 710E           30E4                       xor	ah,ah
27577 7110           50                         push	ax
27578                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27579 7111           FF76         08            push	8[bp]
27580                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27581 7114           FF76         06            push	6[bp]
27582                                           ! Debug: func () void = write_byte+0 (used reg = )
27583 7117           E8         0C46            call	_write_byte
27584 711A           83C4                   06  add	sp,*6
27585                                           !BCC_EOS
27586                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27587 711D           8B46         08            mov	ax,8[bp]
27588 7120           40                         inc	ax
27589 7121           8946         08            mov	8[bp],ax
27590                                           !BCC_EOS
27591                                           ! 3966         inb(0x3da);
27592                                           ! Debug: list int = const $3DA (used reg = )
27593 7124           B8                   03DA  mov	ax,#$3DA
27594 7127           50                         push	ax
27595                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27596 7128           E8         0C65            call	_inb
27597 712B           44                         inc	sp
27598 712C           44                         inc	sp
27599                                           !BCC_EOS
27600                                           ! 3967         ar_index = inb(0x3c0);
27601                                           ! Debug: list int = const $3C0 (used reg = )
27602 712D           B8                   03C0  mov	ax,#$3C0
27603 7130           50                         push	ax
27604                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27605 7131           E8         0C5C            call	_inb
27606 7134           44                         inc	sp
27607 7135           44                         inc	sp
27608                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27609 7136           30E4                       xor	ah,ah
27610 7138           8946         F8            mov	-8[bp],ax
27611                                           !BCC_EOS
27612                                           ! 3968         write_byte(ES, BX, ar_index); BX++;
27613                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27614 713B           FF76         F8            push	-8[bp]
27615                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27616 713E           FF76         08            push	8[bp]
27617                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27618 7141           FF76         06            push	6[bp]
27619                                           ! Debug: func () void = write_byte+0 (used reg = )
27620 7144           E8         0C19            call	_write_byte
27621 7147           83C4                   06  add	sp,*6
27622                                           !BCC_EOS
27623                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27624 714A           8B46         08            mov	ax,8[bp]
27625 714D           40                         inc	ax
27626 714E           8946         08            mov	8[bp],ax
27627                                           !BCC_EOS
27628                                           ! 3969         write_byte(ES, BX, inb(0x3ca)); BX++;
27629                                           ! Debug: list int = const $3CA (used reg = )
27630 7151           B8                   03CA  mov	ax,#$3CA
27631 7154           50                         push	ax
27632                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27633 7155           E8         0C38            call	_inb
27634 7158           44                         inc	sp
27635 7159           44                         inc	sp
27636                                           ! Debug: list unsigned char = al+0 (used reg = )
27637 715A           30E4                       xor	ah,ah
27638 715C           50                         push	ax
27639                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27640 715D           FF76         08            push	8[bp]
27641                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27642 7160           FF76         06            push	6[bp]
27643                                           ! Debug: func () void = write_byte+0 (used reg = )
27644 7163           E8         0BFA            call	_write_byte
27645 7166           83C4                   06  add	sp,*6
27646                                           !BCC_EOS
27647                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27648 7169           8B46         08            mov	ax,8[bp]
27649 716C           40                         inc	ax
27650 716D           8946         08            mov	8[bp],ax
27651                                           !BCC_EOS
27652                                           ! 3970         for(i=1;i<=4;i++){
27653                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27654 7170           B8                   0001  mov	ax,*1
27655 7173           8946         FE            mov	-2[bp],ax
27656                                           !BCC_EOS
27657                                           !BCC_EOS
27658 7176           EB           33            jmp .260
27659                       00007178            .261:
27660                                           ! 3971             outb(0x3c4, i);
27661                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27662 7178           FF76         FE            push	-2[bp]
27663                                           ! Debug: list int = const $3C4 (used reg = )
27664 717B           B8                   03C4  mov	ax,#$3C4
27665 717E           50                         push	ax
27666                                           ! Debug: func () void = outb+0 (used reg = )
27667 717F           E8         0C24            call	_outb
27668 7182           83C4                   04  add	sp,*4
27669                                           !BCC_EOS
27670                                           ! 3972             write_byte(ES, BX, inb(0x3c5)); BX++;
27671                                           ! Debug: list int = const $3C5 (used reg = )
27672 7185           B8                   03C5  mov	ax,#$3C5
27673 7188           50                         push	ax
27674                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27675 7189           E8         0C04            call	_inb
27676 718C           44                         inc	sp
27677 718D           44                         inc	sp
27678                                           ! Debug: list unsigned char = al+0 (used reg = )
27679 718E           30E4                       xor	ah,ah
27680 7190           50                         push	ax
27681                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27682 7191           FF76         08            push	8[bp]
27683                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27684 7194           FF76         06            push	6[bp]
27685                                           ! Debug: func () void = write_byte+0 (used reg = )
27686 7197           E8         0BC6            call	_write_byte
27687 719A           83C4                   06  add	sp,*6
27688                                           !BCC_EOS
27689                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27690 719D           8B46         08            mov	ax,8[bp]
27691 71A0           40                         inc	ax
27692 71A1           8946         08            mov	8[bp],ax
27693                                           !BCC_EOS
27694                                           ! 3973         }
27695                                           ! 3974         outb(0x3c4, 0);
27696                       000071A4            .25F:
27697                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27698 71A4           8B46         FE            mov	ax,-2[bp]
27699 71A7           40                         inc	ax
27700 71A8           8946         FE            mov	-2[bp],ax
27701                       000071AB            .260:
27702                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27703 71AB           8B46         FE            mov	ax,-2[bp]
27704 71AE           3D                   0004  cmp	ax,*4
27705 71B1           76           C5            jbe	.261
27706                       000071B3            .262:
27707                       000071B3            .25E:
27708                                           ! Debug: list int = const 0 (used reg = )
27709 71B3           31C0                       xor	ax,ax
27710 71B5           50                         push	ax
27711                                           ! Debug: list int = const $3C4 (used reg = )
27712 71B6           B8                   03C4  mov	ax,#$3C4
27713 71B9           50                         push	ax
27714                                           ! Debug: func () void = outb+0 (used reg = )
27715 71BA           E8         0BE9            call	_outb
27716 71BD           83C4                   04  add	sp,*4
27717                                           !BCC_EOS
27718                                           ! 3975         write_byte(ES, BX, inb(0x3c5)); BX++;
27719                                           ! Debug: list int = const $3C5 (used reg = )
27720 71C0           B8                   03C5  mov	ax,#$3C5
27721 71C3           50                         push	ax
27722                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27723 71C4           E8         0BC9            call	_inb
27724 71C7           44                         inc	sp
27725 71C8           44                         inc	sp
27726                                           ! Debug: list unsigned char = al+0 (used reg = )
27727 71C9           30E4                       xor	ah,ah
27728 71CB           50                         push	ax
27729                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27730 71CC           FF76         08            push	8[bp]
27731                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27732 71CF           FF76         06            push	6[bp]
27733                                           ! Debug: func () void = write_byte+0 (used reg = )
27734 71D2           E8         0B8B            call	_write_byte
27735 71D5           83C4                   06  add	sp,*6
27736                                           !BCC_EOS
27737                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27738 71D8           8B46         08            mov	ax,8[bp]
27739 71DB           40                         inc	ax
27740 71DC           8946         08            mov	8[bp],ax
27741                                           !BCC_EOS
27742                                           ! 3976         for(i=0;i<=0x18;i++) {
27743                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27744 71DF           31C0                       xor	ax,ax
27745 71E1           8946         FE            mov	-2[bp],ax
27746                                           !BCC_EOS
27747                                           !BCC_EOS
27748 71E4           EB           33            jmp .265
27749                       000071E6            .266:
27750                                           ! 3977             outb(crtc_addr,i);
27751                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27752 71E6           FF76         FE            push	-2[bp]
27753                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27754 71E9           FF76         FA            push	-6[bp]
27755                                           ! Debug: func () void = outb+0 (used reg = )
27756 71EC           E8         0BB7            call	_outb
27757 71EF           83C4                   04  add	sp,*4
27758                                           !BCC_EOS
27759                                           ! 3978             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27760                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27761 71F2           8B46         FA            mov	ax,-6[bp]
27762                                           ! Debug: list unsigned int = ax+1 (used reg = )
27763 71F5           40                         inc	ax
27764 71F6           50                         push	ax
27765                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27766 71F7           E8         0B96            call	_inb
27767 71FA           44                         inc	sp
27768 71FB           44                         inc	sp
27769                                           ! Debug: list unsigned char = al+0 (used reg = )
27770 71FC           30E4                       xor	ah,ah
27771 71FE           50                         push	ax
27772                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27773 71FF           FF76         08            push	8[bp]
27774                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27775 7202           FF76         06            push	6[bp]
27776                                           ! Debug: func () void = write_byte+0 (used reg = )
27777 7205           E8         0B58            call	_write_byte
27778 7208           83C4                   06  add	sp,*6
27779                                           !BCC_EOS
27780                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27781 720B           8B46         08            mov	ax,8[bp]
27782 720E           40                         inc	ax
27783 720F           8946         08            mov	8[bp],ax
27784                                           !BCC_EOS
27785                                           ! 3979         }
27786                                           ! 3980         for(i=0;i<=0x13;i++) {
27787                       00007212            .264:
27788                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27789 7212           8B46         FE            mov	ax,-2[bp]
27790 7215           40                         inc	ax
27791 7216           8946         FE            mov	-2[bp],ax
27792                       00007219            .265:
27793                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27794 7219           8B46         FE            mov	ax,-2[bp]
27795 721C           3D                   0018  cmp	ax,*$18
27796 721F           76           C5            jbe	.266
27797                       00007221            .267:
27798                       00007221            .263:
27799                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27800 7221           31C0                       xor	ax,ax
27801 7223           8946         FE            mov	-2[bp],ax
27802                                           !BCC_EOS
27803                                           !BCC_EOS
27804 7226           EB           44            jmp .26A
27805                       00007228            .26B:
27806                                           ! 3981             inb(0x3da);
27807                                           ! Debug: list int = const $3DA (used reg = )
27808 7228           B8                   03DA  mov	ax,#$3DA
27809 722B           50                         push	ax
27810                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27811 722C           E8         0B61            call	_inb
27812 722F           44                         inc	sp
27813 7230           44                         inc	sp
27814                                           !BCC_EOS
27815                                           ! 3982             outb(0x3c0, i | (ar_index & 0x20));
27816                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27817 7231           8A46         F8            mov	al,-8[bp]
27818 7234           24                     20  and	al,*$20
27819                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27820                                           ! Debug: expression subtree swapping
27821 7236           30E4                       xor	ah,ah
27822 7238           0B46         FE            or	ax,-2[bp]
27823                                           ! Debug: list unsigned int = ax+0 (used reg = )
27824 723B           50                         push	ax
27825                                           ! Debug: list int = const $3C0 (used reg = )
27826 723C           B8                   03C0  mov	ax,#$3C0
27827 723F           50                         push	ax
27828                                           ! Debug: func () void = outb+0 (used reg = )
27829 7240           E8         0B63            call	_outb
27830 7243           83C4                   04  add	sp,*4
27831                                           !BCC_EOS
27832                                           ! 3983             write_byte(ES, BX, inb(0x3c1)); BX++;
27833                                           ! Debug: list int = const $3C1 (used reg = )
27834 7246           B8                   03C1  mov	ax,#$3C1
27835 7249           50                         push	ax
27836                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27837 724A           E8         0B43            call	_inb
27838 724D           44                         inc	sp
27839 724E           44                         inc	sp
27840                                           ! Debug: list unsigned char = al+0 (used reg = )
27841 724F           30E4                       xor	ah,ah
27842 7251           50                         push	ax
27843                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27844 7252           FF76         08            push	8[bp]
27845                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27846 7255           FF76         06            push	6[bp]
27847                                           ! Debug: func () void = write_byte+0 (used reg = )
27848 7258           E8         0B05            call	_write_byte
27849 725B           83C4                   06  add	sp,*6
27850                                           !BCC_EOS
27851                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27852 725E           8B46         08            mov	ax,8[bp]
27853 7261           40                         inc	ax
27854 7262           8946         08            mov	8[bp],ax
27855                                           !BCC_EOS
27856                                           ! 3984         }
27857                                           ! 3985         inb(0x3da);
27858                       00007265            .269:
27859                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27860 7265           8B46         FE            mov	ax,-2[bp]
27861 7268           40                         inc	ax
27862 7269           8946         FE            mov	-2[bp],ax
27863                       0000726C            .26A:
27864                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27865 726C           8B46         FE            mov	ax,-2[bp]
27866 726F           3D                   0013  cmp	ax,*$13
27867 7272           76           B4            jbe	.26B
27868                       00007274            .26C:
27869                       00007274            .268:
27870                                           ! Debug: list int = const $3DA (used reg = )
27871 7274           B8                   03DA  mov	ax,#$3DA
27872 7277           50                         push	ax
27873                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27874 7278           E8         0B15            call	_inb
27875 727B           44                         inc	sp
27876 727C           44                         inc	sp
27877                                           !BCC_EOS
27878                                           ! 3986         for(i=0;i<=8;i++) {
27879                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27880 727D           31C0                       xor	ax,ax
27881 727F           8946         FE            mov	-2[bp],ax
27882                                           !BCC_EOS
27883                                           !BCC_EOS
27884 7282           EB           33            jmp .26F
27885                       00007284            .270:
27886                                           ! 3987             outb(0x3ce,i);
27887                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27888 7284           FF76         FE            push	-2[bp]
27889                                           ! Debug: list int = const $3CE (used reg = )
27890 7287           B8                   03CE  mov	ax,#$3CE
27891 728A           50                         push	ax
27892                                           ! Debug: func () void = outb+0 (used reg = )
27893 728B           E8         0B18            call	_outb
27894 728E           83C4                   04  add	sp,*4
27895                                           !BCC_EOS
27896                                           ! 3988             write_byte(ES, BX, inb(
27897                                           ! 3988 0x3cf)); BX++;
27898                                           ! Debug: list int = const $3CF (used reg = )
27899 7291           B8                   03CF  mov	ax,#$3CF
27900 7294           50                         push	ax
27901                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27902 7295           E8         0AF8            call	_inb
27903 7298           44                         inc	sp
27904 7299           44                         inc	sp
27905                                           ! Debug: list unsigned char = al+0 (used reg = )
27906 729A           30E4                       xor	ah,ah
27907 729C           50                         push	ax
27908                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27909 729D           FF76         08            push	8[bp]
27910                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27911 72A0           FF76         06            push	6[bp]
27912                                           ! Debug: func () void = write_byte+0 (used reg = )
27913 72A3           E8         0ABA            call	_write_byte
27914 72A6           83C4                   06  add	sp,*6
27915                                           !BCC_EOS
27916                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27917 72A9           8B46         08            mov	ax,8[bp]
27918 72AC           40                         inc	ax
27919 72AD           8946         08            mov	8[bp],ax
27920                                           !BCC_EOS
27921                                           ! 3989         }
27922                                           ! 3990         write_word(ES, BX, crtc_addr); BX+= 2;
27923                       000072B0            .26E:
27924                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27925 72B0           8B46         FE            mov	ax,-2[bp]
27926 72B3           40                         inc	ax
27927 72B4           8946         FE            mov	-2[bp],ax
27928                       000072B7            .26F:
27929                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27930 72B7           8B46         FE            mov	ax,-2[bp]
27931 72BA           3D                   0008  cmp	ax,*8
27932 72BD           76           C5            jbe	.270
27933                       000072BF            .271:
27934                       000072BF            .26D:
27935                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27936 72BF           FF76         FA            push	-6[bp]
27937                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27938 72C2           FF76         08            push	8[bp]
27939                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27940 72C5           FF76         06            push	6[bp]
27941                                           ! Debug: func () void = write_word+0 (used reg = )
27942 72C8           E8         0AAD            call	_write_word
27943 72CB           83C4                   06  add	sp,*6
27944                                           !BCC_EOS
27945                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27946 72CE           8B46         08            mov	ax,8[bp]
27947 72D1           40                         inc	ax
27948 72D2           40                         inc	ax
27949 72D3           8946         08            mov	8[bp],ax
27950                                           !BCC_EOS
27951                                           ! 3991         write_byte(ES, BX, 0); BX++;
27952                                           ! Debug: list int = const 0 (used reg = )
27953 72D6           31C0                       xor	ax,ax
27954 72D8           50                         push	ax
27955                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27956 72D9           FF76         08            push	8[bp]
27957                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27958 72DC           FF76         06            push	6[bp]
27959                                           ! Debug: func () void = write_byte+0 (used reg = )
27960 72DF           E8         0A7E            call	_write_byte
27961 72E2           83C4                   06  add	sp,*6
27962                                           !BCC_EOS
27963                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27964 72E5           8B46         08            mov	ax,8[bp]
27965 72E8           40                         inc	ax
27966 72E9           8946         08            mov	8[bp],ax
27967                                           !BCC_EOS
27968                                           ! 3992         write_byte(ES, BX, 0); BX++;
27969                                           ! Debug: list int = const 0 (used reg = )
27970 72EC           31C0                       xor	ax,ax
27971 72EE           50                         push	ax
27972                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27973 72EF           FF76         08            push	8[bp]
27974                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27975 72F2           FF76         06            push	6[bp]
27976                                           ! Debug: func () void = write_byte+0 (used reg = )
27977 72F5           E8         0A68            call	_write_byte
27978 72F8           83C4                   06  add	sp,*6
27979                                           !BCC_EOS
27980                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27981 72FB           8B46         08            mov	ax,8[bp]
27982 72FE           40                         inc	ax
27983 72FF           8946         08            mov	8[bp],ax
27984                                           !BCC_EOS
27985                                           ! 3993         write_byte(ES, BX, 0); BX++;
27986                                           ! Debug: list int = const 0 (used reg = )
27987 7302           31C0                       xor	ax,ax
27988 7304           50                         push	ax
27989                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27990 7305           FF76         08            push	8[bp]
27991                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27992 7308           FF76         06            push	6[bp]
27993                                           ! Debug: func () void = write_byte+0 (used reg = )
27994 730B           E8         0A52            call	_write_byte
27995 730E           83C4                   06  add	sp,*6
27996                                           !BCC_EOS
27997                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27998 7311           8B46         08            mov	ax,8[bp]
27999 7314           40                         inc	ax
28000 7315           8946         08            mov	8[bp],ax
28001                                           !BCC_EOS
28002                                           ! 3994         write_byte(ES, BX, 0); BX++;
28003                                           ! Debug: list int = const 0 (used reg = )
28004 7318           31C0                       xor	ax,ax
28005 731A           50                         push	ax
28006                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28007 731B           FF76         08            push	8[bp]
28008                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28009 731E           FF76         06            push	6[bp]
28010                                           ! Debug: func () void = write_byte+0 (used reg = )
28011 7321           E8         0A3C            call	_write_byte
28012 7324           83C4                   06  add	sp,*6
28013                                           !BCC_EOS
28014                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28015 7327           8B46         08            mov	ax,8[bp]
28016 732A           40                         inc	ax
28017 732B           8946         08            mov	8[bp],ax
28018                                           !BCC_EOS
28019                                           ! 3995     }
28020                                           ! 3996     if (CX & 2) {
28021                       0000732E            .25C:
28022                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
28023 732E           8A46         04            mov	al,4[bp]
28024 7331           24                     02  and	al,*2
28025 7333           84C0                       test	al,al
28026 7335         0F84         0270            beq 	.272
28027                       00007339            .273:
28028                                           ! 3997         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
28029                                           ! Debug: list int = const $49 (used reg = )
28030 7339           B8                   0049  mov	ax,*$49
28031 733C           50                         push	ax
28032                                           ! Debug: list int = const $40 (used reg = )
28033 733D           B8                   0040  mov	ax,*$40
28034 7340           50                         push	ax
28035                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28036 7341           E8         09F6            call	_read_byte
28037 7344           83C4                   04  add	sp,*4
28038                                           ! Debug: list unsigned char = al+0 (used reg = )
28039 7347           30E4                       xor	ah,ah
28040 7349           50                         push	ax
28041                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28042 734A           FF76         08            push	8[bp]
28043                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28044 734D           FF76         06            push	6[bp]
28045                                           ! Debug: func () void = write_byte+0 (used reg = )
28046 7350           E8         0A0D            call	_write_byte
28047 7353           83C4                   06  add	sp,*6
28048                                           !BCC_EOS
28049                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28050 7356           8B46         08            mov	ax,8[bp]
28051 7359           40                         inc	ax
28052 735A           8946         08            mov	8[bp],ax
28053                                           !BCC_EOS
28054                                           ! 3998         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
28055                                           ! Debug: list int = const $4A (used reg = )
28056 735D           B8                   004A  mov	ax,*$4A
28057 7360           50                         push	ax
28058                                           ! Debug: list int = const $40 (used reg = )
28059 7361           B8                   0040  mov	ax,*$40
28060 7364           50                         push	ax
28061                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28062 7365           E8         09E5            call	_read_word
28063 7368           83C4                   04  add	sp,*4
28064                                           ! Debug: list unsigned short = ax+0 (used reg = )
28065 736B           50                         push	ax
28066                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28067 736C           FF76         08            push	8[bp]
28068                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28069 736F           FF76         06            push	6[bp]
28070                                           ! Debug: func () void = write_word+0 (used reg = )
28071 7372           E8         0A03            call	_write_word
28072 7375           83C4                   06  add	sp,*6
28073                                           !BCC_EOS
28074                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28075 7378           8B46         08            mov	ax,8[bp]
28076 737B           40                         inc	ax
28077 737C           40                         inc	ax
28078 737D           8946         08            mov	8[bp],ax
28079                                           !BCC_EOS
28080                                           ! 3999         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
28081                                           ! Debug: list int = const $4C (used reg = )
28082 7380           B8                   004C  mov	ax,*$4C
28083 7383           50                         push	ax
28084                                           ! Debug: list int = const $40 (used reg = )
28085 7384           B8                   0040  mov	ax,*$40
28086 7387           50                         push	ax
28087                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28088 7388           E8         09C2            call	_read_word
28089 738B           83C4                   04  add	sp,*4
28090                                           ! Debug: list unsigned short = ax+0 (used reg = )
28091 738E           50                         push	ax
28092                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28093 738F           FF76         08            push	8[bp]
28094                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28095 7392           FF76         06            push	6[bp]
28096                                           ! Debug: func () void = write_word+0 (used reg = )
28097 7395           E8         09E0            call	_write_word
28098 7398           83C4                   06  add	sp,*6
28099                                           !BCC_EOS
28100                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28101 739B           8B46         08            mov	ax,8[bp]
28102 739E           40                         inc	ax
28103 739F           40                         inc	ax
28104 73A0           8946         08            mov	8[bp],ax
28105                                           !BCC_EOS
28106                                           ! 4000         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
28107                                           ! Debug: list int = const $63 (used reg = )
28108 73A3           B8                   0063  mov	ax,*$63
28109 73A6           50                         push	ax
28110                                           ! Debug: list int = const $40 (used reg = )
28111 73A7           B8                   0040  mov	ax,*$40
28112 73AA           50                         push	ax
28113                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28114 73AB           E8         099F            call	_read_word
28115 73AE           83C4                   04  add	sp,*4
28116                                           ! Debug: list unsigned short = ax+0 (used reg = )
28117 73B1           50                         push	ax
28118                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28119 73B2           FF76         08            push	8[bp]
28120                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28121 73B5           FF76         06            push	6[bp]
28122                                           ! Debug: func () void = write_word+0 (used reg = )
28123 73B8           E8         09BD            call	_write_word
28124 73BB           83C4                   06  add	sp,*6
28125                                           !BCC_EOS
28126                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28127 73BE           8B46         08            mov	ax,8[bp]
28128 73C1           40                         inc	ax
28129 73C2           40                         inc	ax
28130 73C3           8946         08            mov	8[bp],ax
28131                                           !BCC_EOS
28132                                           ! 4001         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
28133                                           ! Debug: list int = const $84 (used reg = )
28134 73C6           B8                   0084  mov	ax,#$84
28135 73C9           50                         push	ax
28136                                           ! Debug: list int = const $40 (used reg = )
28137 73CA           B8                   0040  mov	ax,*$40
28138 73CD           50                         push	ax
28139                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28140 73CE           E8         0969            call	_read_byte
28141 73D1           83C4                   04  add	sp,*4
28142                                           ! Debug: list unsigned char = al+0 (used reg = )
28143 73D4           30E4                       xor	ah,ah
28144 73D6           50                         push	ax
28145                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28146 73D7           FF76         08            push	8[bp]
28147                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28148 73DA           FF76         06            push	6[bp]
28149                                           ! Debug: func () void = write_byte+0 (used reg = )
28150 73DD           E8         0980            call	_write_byte
28151 73E0           83C4                   06  add	sp,*6
28152                                           !BCC_EOS
28153                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28154 73E3           8B46         08            mov	ax,8[bp]
28155 73E6           40                         inc	ax
28156 73E7           8946         08            mov	8[bp],ax
28157                                           !BCC_EOS
28158                                           ! 4002         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
28159                                           ! Debug: list int = const $85 (used reg = )
28160 73EA           B8                   0085  mov	ax,#$85
28161 73ED           50                         push	ax
28162                                           ! Debug: list int = const $40 (used reg = )
28163 73EE           B8                   0040  mov	ax,*$40
28164 73F1           50                         push	ax
28165                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28166 73F2           E8         0958            call	_read_word
28167 73F5           83C4                   04  add	sp,*4
28168                                           ! Debug: list unsigned short = ax+0 (used reg = )
28169 73F8           50                         push	ax
28170                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28171 73F9           FF76         08            push	8[bp]
28172                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28173 73FC           FF76         06            push	6[bp]
28174                                           ! Debug: func () void = write_word+0 (used reg = )
28175 73FF           E8         0976            call	_write_word
28176 7402           83C4                   06  add	sp,*6
28177                                           !BCC_EOS
28178                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28179 7405           8B46         08            mov	ax,8[bp]
28180 7408           40                         inc	ax
28181 7409           40                         inc	ax
28182 740A           8946         08            mov	8[bp],ax
28183                                           !BCC_EOS
28184                                           ! 4003         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
28185                                           ! Debug: list int = const $87 (used reg = )
28186 740D           B8                   0087  mov	ax,#$87
28187 7410           50                         push	ax
28188                                           ! Debug: list int = const $40 (used reg = )
28189 7411           B8                   0040  mov	ax,*$40
28190 7414           50                         push	ax
28191                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28192 7415           E8         0922            call	_read_byte
28193 7418           83C4                   04  add	sp,*4
28194                                           ! Debug: list unsigned char = al+0 (used reg = )
28195 741B           30E4                       xor	ah,ah
28196 741D           50                         push	ax
28197                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28198 741E           FF76         08            push	8[bp]
28199                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28200 7421           FF76         06            push	6[bp]
28201                                           ! Debug: func () void = write_byte+0 (used reg = )
28202 7424           E8         0939            call	_write_byte
28203 7427           83C4                   06  add	sp,*6
28204                                           !BCC_EOS
28205                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28206 742A           8B46         08            mov	ax,8[bp]
28207 742D           40                         inc	ax
28208 742E           8946         08            mov	8[bp],ax
28209                                           !BCC_EOS
28210                                           ! 4004         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
28211                                           ! Debug: list int = const $88 (used reg = )
28212 7431           B8                   0088  mov	ax,#$88
28213 7434           50                         push	ax
28214                                           ! Debug: list int = const $40 (used reg = )
28215 7435           B8                   0040  mov	ax,*$40
28216 7438           50                         push	ax
28217                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28218 7439           E8         08FE            call	_read_byte
28219 743C           83C4                   04  add	sp,*4
28220                                           ! Debug: list unsigned char = al+0 (used reg = )
28221 743F           30E4                       xor	ah,ah
28222 7441           50                         push	ax
28223                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28224 7442           FF76         08            push	8[bp]
28225                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28226 7445           FF76         06            push	6[bp]
28227                                           ! Debug: func () void = write_byte+0 (used reg = )
28228 7448           E8         0915            call	_write_byte
28229 744B           83C4                   06  add	sp,*6
28230                                           !BCC_EOS
28231                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28232 744E           8B46         08            mov	ax,8[bp]
28233 7451           40                         inc	ax
28234 7452           8946         08            mov	8[bp],ax
28235                                           !BCC_EOS
28236                                           ! 4005         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
28237                                           ! Debug: list int = const $89 (used reg = )
28238 7455           B8                   0089  mov	ax,#$89
28239 7458           50                         push	ax
28240                                           ! Debug: list int = const $40 (used reg = )
28241 7459           B8                   0040  mov	ax,*$40
28242 745C           50                         push	ax
28243                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28244 745D           E8         08DA            call	_read_byte
28245 7460           83C4                   04  add	sp,*4
28246                                           ! Debug: list unsigned char = al+0 (used reg = )
28247 7463           30E4                       xor	ah,ah
28248 7465           50                         push	ax
28249                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28250 7466           FF76         08            push	8[bp]
28251                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28252 7469           FF76         06            push	6[bp]
28253                                           ! Debug: func () void = write_byte+0 (used reg = )
28254 746C           E8         08F1            call	_write_byte
28255 746F           83C4                   06  add	sp,*6
28256                                           !BCC_EOS
28257                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28258 7472           8B46         08            mov	ax,8[bp]
28259 7475           40                         inc	ax
28260 7476           8946         08            mov	8[bp],ax
28261                                           !BCC_EOS
28262                                           ! 4006         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
28263                                           ! Debug: list int = const $60 (used reg = )
28264 7479           B8                   0060  mov	ax,*$60
28265 747C           50                         push	ax
28266                                           ! Debug: list int = const $40 (used reg = )
28267 747D           B8                   0040  mov	ax,*$40
28268 7480           50                         push	ax
28269                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28270 7481           E8         08C9            call	_read_word
28271 7484           83C4                   04  add	sp,*4
28272                                           ! Debug: list unsigned short = ax+0 (used reg = )
28273 7487           50                         push	ax
28274                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28275 7488           FF76         08            push	8[bp]
28276                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28277 748B           FF76         06            push	6[bp]
28278                                           ! Debug: func () void = write_word+0 (used reg = )
28279 748E           E8         08E7            call	_write_word
28280 7491           83C4                   06  add	sp,*6
28281                                           !BCC_EOS
28282                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28283 7494           8B46         08            mov	ax,8[bp]
28284 7497           40                         inc	ax
28285 7498           40                         inc	ax
28286 7499           8946         08            mov	8[bp],ax
28287                                           !BCC_EOS
28288                                           ! 4007         for(i=0;i<8;i++) {
28289                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28290 749C           31C0                       xor	ax,ax
28291 749E           8946         FE            mov	-2[bp],ax
28292                                           !BCC_EOS
28293                                           !BCC_EOS
28294 74A1           EB           2F            jmp .276
28295                       000074A3            .277:
28296                                           ! 4008             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28297                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28298                                           ! Debug: expression subtree swapping
28299 74A3           8B46         FE            mov	ax,-2[bp]
28300 74A6           D1E0                       shl	ax,*1
28301                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28302                                           ! Debug: expression subtree swapping
28303                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28304 74A8           05                   0050  add	ax,*$50
28305 74AB           50                         push	ax
28306                                           ! Debug: list int = const $40 (used reg = )
28307 74AC           B8                   0040  mov	ax,*$40
28308 74AF           50                         push	ax
28309                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28310 74B0           E8         089A            call	_read_word
28311 74B3           83C4                   04  add	sp,*4
28312                                           ! Debug: list unsigned short = ax+0 (used reg = )
28313 74B6           50                         push	ax
28314                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28315 74B7           FF76         08            push	8[bp]
28316                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28317 74BA           FF76         06            push	6[bp]
28318                                           ! Debug: func () void = write_word+0 (used reg = )
28319 74BD           E8         08B8            call	_write_word
28320 74C0           83C4                   06  add	sp,*6
28321                                           !BCC_EOS
28322                                           ! 4009             BX += 2;
28323                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28324 74C3           8B46         08            mov	ax,8[bp]
28325 74C6           40                         inc	ax
28326 74C7           40                         inc	ax
28327 74C8           8946         08            mov	8[bp],ax
28328                                           !BCC_EOS
28329                                           ! 4010         }
28330                                           ! 4011         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28331                       000074CB            .275:
28332                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28333 74CB           8B46         FE            mov	ax,-2[bp]
28334 74CE           40                         inc	ax
28335 74CF           8946         FE            mov	-2[bp],ax
28336                       000074D2            .276:
28337                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28338 74D2           8B46         FE            mov	ax,-2[bp]
28339 74D5           3D                   0008  cmp	ax,*8
28340 74D8           72           C9            jb 	.277
28341                       000074DA            .278:
28342                       000074DA            .274:
28343                                           ! Debug: list int = const $4E (used reg = )
28344 74DA           B8                   004E  mov	ax,*$4E
28345 74DD           50                         push	ax
28346                                           ! Debug: list int = const $40 (used reg = )
28347 74DE           B8                   0040  mov	ax,*$40
28348 74E1           50                         push	ax
28349                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28350 74E2           E8         0868            call	_read_word
28351 74E5           83C4                   04  add	sp,*4
28352                                           ! Debug: list unsigned short = ax+0 (used reg = )
28353 74E8           50                         push	ax
28354                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28355 74E9           FF76         08            push	8[bp]
28356                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28357 74EC           FF76         06            push	6[bp]
28358                                           ! Debug: func () void = write_word+0 (used reg = )
28359 74EF           E8         0886            call	_write_word
28360 74F2           83C4                   06  add	sp,*6
28361                                           !BCC_EOS
28362                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28363 74F5           8B46         08            mov	ax,8[bp]
28364 74F8           40                         inc	ax
28365 74F9           40                         inc	ax
28366 74FA           8946         08            mov	8[bp],ax
28367                                           !BCC_EOS
28368                                           ! 4012         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28369                                           ! Debug: list int = const $62 (used reg = )
28370 74FD           B8                   0062  mov	ax,*$62
28371 7500           50                         push	ax
28372                                           ! Debug: list int = const $40 (used reg = )
28373 7501           B8                   0040  mov	ax,*$40
28374 7504           50                         push	ax
28375                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28376 7505           E8         0832            call	_read_byte
28377 7508           83C4                   04  add	sp,*4
28378                                           ! Debug: list unsigned char = al+0 (used reg = )
28379 750B           30E4                       xor	ah,ah
28380 750D           50                         push	ax
28381                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28382 750E           FF76         08            push	8[bp]
28383                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28384 7511           FF76         06            push	6[bp]
28385                                           ! Debug: func () void = write_byte+0 (used reg = )
28386 7514           E8         0849            call	_write_byte
28387 7517           83C4                   06  add	sp,*6
28388                                           !BCC_EOS
28389                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28390 751A           8B46         08            mov	ax,8[bp]
28391 751D           40                         inc	ax
28392 751E           8946         08            mov	8[bp],ax
28393                                           !BCC_EOS
28394                                           ! 4013         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28395                                           ! Debug: list int = const $7C (used reg = )
28396 7521           B8                   007C  mov	ax,*$7C
28397 7524           50                         push	ax
28398                                           ! Debug: list int = const 0 (used reg = )
28399 7525           31C0                       xor	ax,ax
28400 7527           50                         push	ax
28401                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28402 7528           E8         0822            call	_read_word
28403 752B           83C4                   04  add	sp,*4
28404                                           ! Debug: list unsigned short = ax+0 (used reg = )
28405 752E           50                         push	ax
28406                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28407 752F           FF76         08            push	8[bp]
28408                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28409 7532           FF76         06            push	6[bp]
28410                                           ! Debug: func () void = write_word+0 (used reg = )
28411 7535           E8         0840            call	_write_word
28412 7538           83C4                   06  add	sp,*6
28413                                           !BCC_EOS
28414                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28415 753B           8B46         08            mov	ax,8[bp]
28416 753E           40                         inc	ax
28417 753F           40                         inc	ax
28418 7540           8946         08            mov	8[bp],ax
28419                                           !BCC_EOS
28420                                           ! 4014         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28421                                           ! Debug: list int = const $7E (used reg = )
28422 7543           B8                   007E  mov	ax,*$7E
28423 7546           50                         push	ax
28424                                           ! Debug: list int = const 0 (used reg = )
28425 7547           31C0                       xor	ax,ax
28426 7549           50                         push	ax
28427                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28428 754A           E8         0800            call	_read_word
28429 754D           83C4                   04  add	sp,*4
28430                                           ! Debug: list unsigned short = ax+0 (used reg = )
28431 7550           50                         push	ax
28432                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28433 7551           FF76         08            push	8[bp]
28434                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28435 7554           FF76         06            push	6[bp]
28436                                           ! Debug: func () void = write_word+0 (used reg = )
28437 7557           E8         081E            call	_write_word
28438 755A           83C4                   06  add	sp,*6
28439                                           !BCC_EOS
28440                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28441 755D           8B46         08            mov	ax,8[bp]
28442 7560           40                         inc	ax
28443 7561           40                         inc	ax
28444 7562           8946         08            mov	8[bp],ax
28445                                           !BCC_EOS
28446                                           ! 4015         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28447                                           ! Debug: list int = const $10C (used reg = )
28448 7565           B8                   010C  mov	ax,#$10C
28449 7568           50                         push	ax
28450                                           ! Debug: list int = const 0 (used reg = )
28451 7569           31C0                       xor	ax,ax
28452 756B           50                         push	ax
28453                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28454 756C           E8         07DE            call	_read_word
28455 756F           83C4                   04  add	sp,*4
28456                                           ! Debug: list unsigned short = ax+0 (used reg = )
28457 7572           50                         push	ax
28458                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28459 7573           FF76         08            push	8[bp]
28460                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28461 7576           FF76         06            push	6[bp]
28462                                           ! Debug: func () void = write_word+0 (used reg = )
28463 7579           E8         07FC            call	_write_word
28464 757C           83C4                   06  add	sp,*6
28465                                           !BCC_EOS
28466                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28467 757F           8B46         08            mov	ax,8[bp]
28468 7582           40                         inc	ax
28469 7583           40                         inc	ax
28470 7584           8946         08            mov	8[bp],ax
28471                                           !BCC_EOS
28472                                           ! 4016         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28473                                           ! Debug: list int = const $10E (used reg = )
28474 7587           B8                   010E  mov	ax,#$10E
28475 758A           50                         push	ax
28476                                           ! Debug: list int = const 0 (used reg = )
28477 758B           31C0                       xor	ax,ax
28478 758D           50                         push	ax
28479                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28480 758E           E8         07BC            call	_read_word
28481 7591           83C4                   04  add	sp,*4
28482                                           ! Debug: list unsigned short = ax+0 (used reg = )
28483 7594           50                         push	ax
28484                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28485 7595           FF76         08            push	8[bp]
28486                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28487 7598           FF76         06            push	6[bp]
28488                                           ! Debug: func () void = write_word+0 (used reg = )
28489 759B           E8         07DA            call	_write_word
28490 759E           83C4                   06  add	sp,*6
28491                                           !BCC_EOS
28492                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28493 75A1           8B46         08            mov	ax,8[bp]
28494 75A4           40                         inc	ax
28495 75A5           40                         inc	ax
28496 75A6           8946         08            mov	8[bp],ax
28497                                           !BCC_EOS
28498                                           ! 4017     }
28499                                           ! 4018     if (CX & 4) {
28500                       000075A9            .272:
28501                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28502 75A9           8A46         04            mov	al,4[bp]
28503 75AC           24                     04  and	al,*4
28504 75AE           84C0                       test	al,al
28505 75B0         0F84         00B5            beq 	.279
28506                       000075B4            .27A:
28507                                           ! 4019         write_byte(ES, BX, inb(0x3c7)); BX++;
28508                                           ! Debug: list int = const $3C7 (used reg = )
28509 75B4           B8                   03C7  mov	ax,#$3C7
28510 75B7           50                         push	ax
28511                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28512 75B8           E8         07D5            call	_inb
28513 75BB           44                         inc	sp
28514 75BC           44                         inc	sp
28515                                           ! Debug: list unsigned char = al+0 (used reg = )
28516 75BD           30E4                       xor	ah,ah
28517 75BF           50                         push	ax
28518                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28519 75C0           FF76         08            push	8[bp]
28520                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28521 75C3           FF76         06            push	6[bp]
28522                                           ! Debug: func () void = write_byte+0 (used reg = )
28523 75C6           E8         0797            call	_write_byte
28524 75C9           83C4                   06  add	sp,*6
28525                                           !BCC_EOS
28526                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28527 75CC           8B46         08            mov	ax,8[bp]
28528 75CF           40                         inc	ax
28529 75D0           8946         08            mov	8[bp],ax
28530                                           !BCC_EOS
28531                                           ! 4020         write_byte(ES, BX, inb(0x3c8)); BX++;
28532                                           ! Debug: list int = const $3C8 (used reg = )
28533 75D3           B8                   03C8  mov	ax,#$3C8
28534 75D6           50                         push	ax
28535                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28536 75D7           E8         07B6            call	_inb
28537 75DA           44                         inc	sp
28538 75DB           44                         inc	sp
28539                                           ! Debug: list unsigned char = al+0 (used reg = )
28540 75DC           30E4                       xor	ah,ah
28541 75DE           50                         push	ax
28542                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28543 75DF           FF76         08            push	8[bp]
28544                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28545 75E2           FF76         06            push	6[bp]
28546                                           ! Debug: func () void = write_byte+0 (used reg = )
28547 75E5           E8         0778            call	_write_byte
28548 75E8           83C4                   06  add	sp,*6
28549                                           !BCC_EOS
28550                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28551 75EB           8B46         08            mov	ax,8[bp]
28552 75EE           40                         inc	ax
28553 75EF           8946         08            mov	8[bp],ax
28554                                           !BCC_EOS
28555                                           ! 4021         write_byte(ES, BX, inb(0x3c6)); BX++;
28556                                           ! Debug: list int = const $3C6 (used reg = )
28557 75F2           B8                   03C6  mov	ax,#$3C6
28558 75F5           50                         push	ax
28559                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28560 75F6           E8         0797            call	_inb
28561 75F9           44                         inc	sp
28562 75FA           44                         inc	sp
28563                                           ! Debug: list unsigned char = al+0 (used reg = )
28564 75FB           30E4                       xor	ah,ah
28565 75FD           50                         push	ax
28566                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28567 75FE           FF76         08            push	8[bp]
28568                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28569 7601           FF76         06            push	6[bp]
28570                                           ! Debug: func () void = write_byte+0 (used reg = )
28571 7604           E8         0759            call	_write_byte
28572 7607           83C4                   06  add	sp,*6
28573                                           !BCC_EOS
28574                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28575 760A           8B46         08            mov	ax,8[bp]
28576 760D           40                         inc	ax
28577 760E           8946         08            mov	8[bp],ax
28578                                           !BCC_EOS
28579                                           ! 4022         outb(0x3c8,0x00);
28580                                           ! Debug: list int = const 0 (used reg = )
28581 7611           31C0                       xor	ax,ax
28582 7613           50                         push	ax
28583                                           ! Debug: list int = const $3C8 (used reg = )
28584 7614           B8                   03C8  mov	ax,#$3C8
28585 7617           50                         push	ax
28586                                           ! Debug: func () void = outb+0 (used reg = )
28587 7618           E8         078B            call	_outb
28588 761B           83C4                   04  add	sp,*4
28589                                           !BCC_EOS
28590                                           ! 4023         for(i=0;i<256*3;i++) {
28591                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28592 761E           31C0                       xor	ax,ax
28593 7620           8946         FE            mov	-2[bp],ax
28594                                           !BCC_EOS
28595                                           !BCC_EOS
28596 7623           EB           26            jmp .27D
28597                       00007625            .27E:
28598                                           ! 4024             write_byte(ES, BX, inb(0x3c9)); BX++;
28599                                           ! Debug: list int = const $3C9 (used reg = )
28600 7625           B8                   03C9  mov	ax,#$3C9
28601 7628           50                         push	ax
28602                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28603 7629           E8         0764            call	_inb
28604 762C           44                         inc	sp
28605 762D           44                         inc	sp
28606                                           ! Debug: list unsigned char = al+0 (used reg = )
28607 762E           30E4                       xor	ah,ah
28608 7630           50                         push	ax
28609                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28610 7631           FF76         08            push	8[bp]
28611                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28612 7634           FF76         06            push	6[bp]
28613                                           ! Debug: func () void = write_byte+0 (used reg = )
28614 7637           E8         0726            call	_write_byte
28615 763A           83C4                   06  add	sp,*6
28616                                           !BCC_EOS
28617                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28618 763D           8B46         08            mov	ax,8[bp]
28619 7640           40                         inc	ax
28620 7641           8946         08            mov	8[bp],ax
28621                                           !BCC_EOS
28622                                           ! 4025         }
28623                                           ! 4026         write_byte(ES, BX, 0); BX++;
28624                       00007644            .27C:
28625                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28626 7644           8B46         FE            mov	ax,-2[bp]
28627 7647           40                         inc	ax
28628 7648           8946         FE            mov	-2[bp],ax
28629                       0000764B            .27D:
28630                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28631 764B           8B46         FE            mov	ax,-2[bp]
28632 764E           3D                   0300  cmp	ax,#$300
28633 7651           72           D2            jb 	.27E
28634                       00007653            .27F:
28635                       00007653            .27B:
28636                                           ! Debug: list int = const 0 (used reg = )
28637 7653           31C0                       xor	ax,ax
28638 7655           50                         push	ax
28639                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28640 7656           FF76         08            push	8[bp]
28641                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28642 7659           FF76         06            push	6[bp]
28643                                           ! Debug: func () void = write_byte+0 (used reg = )
28644 765C           E8         0701            call	_write_byte
28645 765F           83C4                   06  add	sp,*6
28646                                           !BCC_EOS
28647                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28648 7662           8B46         08            mov	ax,8[bp]
28649 7665           40                         inc	ax
28650 7666           8946         08            mov	8[bp],ax
28651                                           !BCC_EOS
28652                                           ! 4027     }
28653                                           ! 4028     return BX;
28654                       00007669            .279:
28655 7669           8B46         08            mov	ax,8[bp]
28656 766C           89EC                       mov	sp,bp
28657 766E           5D                         pop	bp
28658 766F           C3                         ret
28659                                           !BCC_EOS
28660                                           ! 4029 }
28661                                           ! 4030 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28662                                           ! 4031      Bit16u CX;Bit16u ES;Bit16u BX;
28663                       00007670            _biosfn_restore_video_state:
28664                                           !BCC_EOS
28665                                           !BCC_EOS
28666                                           !BCC_EOS
28667                                           ! 4032 {
28668                                           ! 4033     Bit16u i, crtc_addr, v, addr1, ar_index;
28669                                           !BCC_EOS
28670                                           ! 4034     if (CX & 1) {
28671 7670           55                         push	bp
28672 7671           89E5                       mov	bp,sp
28673 7673           83C4                   F6  add	sp,*-$A
28674                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28675 7676           8A46         04            mov	al,4[bp]
28676 7679           24                     01  and	al,*1
28677 767B           84C0                       test	al,al
28678 767D         0F84         02AA            beq 	.280
28679                       00007681            .281:
28680                                           ! 4035         inb(0x3da);
28681                                           ! Debug: list int = const $3DA (used reg = )
28682 7681           B8                   03DA  mov	ax,#$3DA
28683 7684           50                         push	ax
28684                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28685 7685           E8         0708            call	_inb
28686 7688           44                         inc	sp
28687 7689           44                         inc	sp
28688                                           !BCC_EOS
28689                                           ! 4036         crtc_addr = read_word(ES, BX + 0x40);
28690                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28691 768A           8B46         08            mov	ax,8[bp]
28692                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28693 768D           05                   0040  add	ax,*$40
28694 7690           50                         push	ax
28695                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28696 7691           FF76         06            push	6[bp]
28697                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28698 7694           E8         06B6            call	_read_word
28699 7697           83C4                   04  add	sp,*4
28700                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28701 769A           8946         FC            mov	-4[bp],ax
28702                                           !BCC_EOS
28703                                           ! 4037         addr1 = BX;
28704                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28705 769D           8B46         08            mov	ax,8[bp]
28706 76A0           8946         F8            mov	-8[bp],ax
28707                                           !BCC_EOS
28708                                           ! 4038         BX += 5;
28709                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28710 76A3           8B46         08            mov	ax,8[bp]
28711 76A6           05                   0005  add	ax,*5
28712 76A9           8946         08            mov	8[bp],ax
28713                                           !BCC_EOS
28714                                           ! 4039         for(i=1;i<=4;i++){
28715                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28716 76AC           B8                   0001  mov	ax,*1
28717 76AF           8946         FE            mov	-2[bp],ax
28718                                           !BCC_EOS
28719                                           !BCC_EOS
28720 76B2           EB           34            jmp .284
28721                       000076B4            .285:
28722                                           ! 4040             outb(0x3c4, i);
28723                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28724 76B4           FF76         FE            push	-2[bp]
28725                                           ! Debug: list int = const $3C4 (used reg = )
28726 76B7           B8                   03C4  mov	ax,#$3C4
28727 76BA           50                         push	ax
28728                                           ! Debug: func () void = outb+0 (used reg = )
28729 76BB           E8         06E8            call	_outb
28730 76BE           83C4                   04  add	sp,*4
28731                                           !BCC_EOS
28732                                           ! 4041             outb(0x3c5, read_byte(ES, BX)); BX++;
28733                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28734 76C1           FF76         08            push	8[bp]
28735                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28736 76C4           FF76         06            push	6[bp]
28737                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28738 76C7           E8         0670            call	_read_byte
28739 76CA           83C4                   04  add	sp,*4
28740                                           ! Debug: list unsigned char = al+0 (used reg = )
28741 76CD           30E4                       xor	ah,ah
28742 76CF           50                         push	ax
28743                                           ! Debug: list int = const $3C5 (used reg = )
28744 76D0           B8                   03C5  mov	ax,#$3C5
28745 76D3           50                         push	ax
28746                                           ! Debug: func () void = outb+0 (used reg = )
28747 76D4           E8         06CF            call	_outb
28748 76D7           83C4                   04  add	sp,*4
28749                                           !BCC_EOS
28750                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28751 76DA           8B46         08            mov	ax,8[bp]
28752 76DD           40                         inc	ax
28753 76DE           8946         08            mov	8[bp],ax
28754                                           !BCC_EOS
28755                                           ! 4042         }
28756                                           ! 4043         outb(0x3c4, 0);
28757                       000076E1            .283:
28758                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28759 76E1           8B46         FE            mov	ax,-2[bp]
28760 76E4           40                         inc	ax
28761 76E5           8946         FE            mov	-2[bp],ax
28762                       000076E8            .284:
28763                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28764 76E8           8B46         FE            mov	ax,-2[bp]
28765 76EB           3D                   0004  cmp	ax,*4
28766 76EE           76           C4            jbe	.285
28767                       000076F0            .286:
28768                       000076F0            .282:
28769                                           ! Debug: list int = const 0 (used reg = )
28770 76F0           31C0                       xor	ax,ax
28771 76F2           50                         push	ax
28772                                           ! Debug: list int = const $3C4 (used reg = )
28773 76F3           B8                   03C4  mov	ax,#$3C4
28774 76F6           50                         push	ax
28775                                           ! Debug: func () void = outb+0 (used reg = )
28776 76F7           E8         06AC            call	_outb
28777 76FA           83C4                   04  add	sp,*4
28778                                           !BCC_EOS
28779                                           ! 4044         ou
28780                                           ! 4044 tb(0x3c5, read_byte(ES, BX)); BX++;
28781                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28782 76FD           FF76         08            push	8[bp]
28783                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28784 7700           FF76         06            push	6[bp]
28785                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28786 7703           E8         0634            call	_read_byte
28787 7706           83C4                   04  add	sp,*4
28788                                           ! Debug: list unsigned char = al+0 (used reg = )
28789 7709           30E4                       xor	ah,ah
28790 770B           50                         push	ax
28791                                           ! Debug: list int = const $3C5 (used reg = )
28792 770C           B8                   03C5  mov	ax,#$3C5
28793 770F           50                         push	ax
28794                                           ! Debug: func () void = outb+0 (used reg = )
28795 7710           E8         0693            call	_outb
28796 7713           83C4                   04  add	sp,*4
28797                                           !BCC_EOS
28798                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28799 7716           8B46         08            mov	ax,8[bp]
28800 7719           40                         inc	ax
28801 771A           8946         08            mov	8[bp],ax
28802                                           !BCC_EOS
28803                                           ! 4045         outw(crtc_addr,0x0011);
28804                                           ! Debug: list int = const $11 (used reg = )
28805 771D           B8                   0011  mov	ax,*$11
28806 7720           50                         push	ax
28807                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28808 7721           FF76         FC            push	-4[bp]
28809                                           ! Debug: func () void = outw+0 (used reg = )
28810 7724           E8         068F            call	_outw
28811 7727           83C4                   04  add	sp,*4
28812                                           !BCC_EOS
28813                                           ! 4046         for(i=0;i<=0x18;i++) {
28814                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28815 772A           31C0                       xor	ax,ax
28816 772C           8946         FE            mov	-2[bp],ax
28817                                           !BCC_EOS
28818                                           !BCC_EOS
28819 772F           EB           3C            jmp .289
28820                       00007731            .28A:
28821                                           ! 4047             if (i != 0x11) {
28822                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28823 7731           8B46         FE            mov	ax,-2[bp]
28824 7734           3D                   0011  cmp	ax,*$11
28825 7737           74           26            je  	.28B
28826                       00007739            .28C:
28827                                           ! 4048                 outb(crtc_addr,i);
28828                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28829 7739           FF76         FE            push	-2[bp]
28830                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28831 773C           FF76         FC            push	-4[bp]
28832                                           ! Debug: func () void = outb+0 (used reg = )
28833 773F           E8         0664            call	_outb
28834 7742           83C4                   04  add	sp,*4
28835                                           !BCC_EOS
28836                                           ! 4049                 outb(crtc_addr+1, read_byte(ES, BX));
28837                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28838 7745           FF76         08            push	8[bp]
28839                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28840 7748           FF76         06            push	6[bp]
28841                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28842 774B           E8         05EC            call	_read_byte
28843 774E           83C4                   04  add	sp,*4
28844                                           ! Debug: list unsigned char = al+0 (used reg = )
28845 7751           30E4                       xor	ah,ah
28846 7753           50                         push	ax
28847                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28848 7754           8B46         FC            mov	ax,-4[bp]
28849                                           ! Debug: list unsigned int = ax+1 (used reg = )
28850 7757           40                         inc	ax
28851 7758           50                         push	ax
28852                                           ! Debug: func () void = outb+0 (used reg = )
28853 7759           E8         064A            call	_outb
28854 775C           83C4                   04  add	sp,*4
28855                                           !BCC_EOS
28856                                           ! 4050             }
28857                                           ! 4051             BX++;
28858                       0000775F            .28B:
28859                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28860 775F           8B46         08            mov	ax,8[bp]
28861 7762           40                         inc	ax
28862 7763           8946         08            mov	8[bp],ax
28863                                           !BCC_EOS
28864                                           ! 4052         }
28865                                           ! 4053         v = inb(0x3cc) & ~0x01;
28866                       00007766            .288:
28867                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28868 7766           8B46         FE            mov	ax,-2[bp]
28869 7769           40                         inc	ax
28870 776A           8946         FE            mov	-2[bp],ax
28871                       0000776D            .289:
28872                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28873 776D           8B46         FE            mov	ax,-2[bp]
28874 7770           3D                   0018  cmp	ax,*$18
28875 7773           76           BC            jbe	.28A
28876                       00007775            .28D:
28877                       00007775            .287:
28878                                           ! Debug: list int = const $3CC (used reg = )
28879 7775           B8                   03CC  mov	ax,#$3CC
28880 7778           50                         push	ax
28881                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28882 7779           E8         0614            call	_inb
28883 777C           44                         inc	sp
28884 777D           44                         inc	sp
28885                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28886 777E           24                     FE  and	al,#$FE
28887                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28888 7780           30E4                       xor	ah,ah
28889 7782           8946         FA            mov	-6[bp],ax
28890                                           !BCC_EOS
28891                                           ! 4054         if (crtc_addr = 0x3d4)
28892                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28893 7785           B8                   03D4  mov	ax,#$3D4
28894 7788           8946         FC            mov	-4[bp],ax
28895 778B           85C0                       test	ax,ax
28896 778D           74           08            je  	.28E
28897                       0000778F            .28F:
28898                                           ! 4055             v |= 0x01;
28899                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28900 778F           8B46         FA            mov	ax,-6[bp]
28901 7792           0C                     01  or	al,*1
28902 7794           8946         FA            mov	-6[bp],ax
28903                                           !BCC_EOS
28904                                           ! 4056         outb(0x3c2, v);
28905                       00007797            .28E:
28906                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28907 7797           FF76         FA            push	-6[bp]
28908                                           ! Debug: list int = const $3C2 (used reg = )
28909 779A           B8                   03C2  mov	ax,#$3C2
28910 779D           50                         push	ax
28911                                           ! Debug: func () void = outb+0 (used reg = )
28912 779E           E8         0605            call	_outb
28913 77A1           83C4                   04  add	sp,*4
28914                                           !BCC_EOS
28915                                           ! 4057         outb(crtc_addr, 0x11);
28916                                           ! Debug: list int = const $11 (used reg = )
28917 77A4           B8                   0011  mov	ax,*$11
28918 77A7           50                         push	ax
28919                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28920 77A8           FF76         FC            push	-4[bp]
28921                                           ! Debug: func () void = outb+0 (used reg = )
28922 77AB           E8         05F8            call	_outb
28923 77AE           83C4                   04  add	sp,*4
28924                                           !BCC_EOS
28925                                           ! 4058         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28926                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28927 77B1           8B46         08            mov	ax,8[bp]
28928                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28929                                           ! Debug: list unsigned int = ax-7 (used reg = )
28930 77B4           05                   FFF9  add	ax,*-7
28931 77B7           50                         push	ax
28932                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28933 77B8           FF76         06            push	6[bp]
28934                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28935 77BB           E8         057C            call	_read_byte
28936 77BE           83C4                   04  add	sp,*4
28937                                           ! Debug: list unsigned char = al+0 (used reg = )
28938 77C1           30E4                       xor	ah,ah
28939 77C3           50                         push	ax
28940                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28941 77C4           8B46         FC            mov	ax,-4[bp]
28942                                           ! Debug: list unsigned int = ax+1 (used reg = )
28943 77C7           40                         inc	ax
28944 77C8           50                         push	ax
28945                                           ! Debug: func () void = outb+0 (used reg = )
28946 77C9           E8         05DA            call	_outb
28947 77CC           83C4                   04  add	sp,*4
28948                                           !BCC_EOS
28949                                           ! 4059         ar_index = read_byte(ES, addr1 + 0x03);
28950                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28951 77CF           8B46         F8            mov	ax,-8[bp]
28952                                           ! Debug: list unsigned int = ax+3 (used reg = )
28953 77D2           05                   0003  add	ax,*3
28954 77D5           50                         push	ax
28955                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28956 77D6           FF76         06            push	6[bp]
28957                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28958 77D9           E8         055E            call	_read_byte
28959 77DC           83C4                   04  add	sp,*4
28960                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28961 77DF           30E4                       xor	ah,ah
28962 77E1           8946         F6            mov	-$A[bp],ax
28963                                           !BCC_EOS
28964                                           ! 4060         inb(0x3da);
28965                                           ! Debug: list int = const $3DA (used reg = )
28966 77E4           B8                   03DA  mov	ax,#$3DA
28967 77E7           50                         push	ax
28968                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28969 77E8           E8         05A5            call	_inb
28970 77EB           44                         inc	sp
28971 77EC           44                         inc	sp
28972                                           !BCC_EOS
28973                                           ! 4061         for(i=0;i<=0x13;i++) {
28974                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28975 77ED           31C0                       xor	ax,ax
28976 77EF           8946         FE            mov	-2[bp],ax
28977                                           !BCC_EOS
28978                                           !BCC_EOS
28979 77F2           EB           3C            jmp .292
28980                       000077F4            .293:
28981                                           ! 4062             outb(0x3c0, i | (ar_index & 0x20));
28982                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28983 77F4           8A46         F6            mov	al,-$A[bp]
28984 77F7           24                     20  and	al,*$20
28985                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28986                                           ! Debug: expression subtree swapping
28987 77F9           30E4                       xor	ah,ah
28988 77FB           0B46         FE            or	ax,-2[bp]
28989                                           ! Debug: list unsigned int = ax+0 (used reg = )
28990 77FE           50                         push	ax
28991                                           ! Debug: list int = const $3C0 (used reg = )
28992 77FF           B8                   03C0  mov	ax,#$3C0
28993 7802           50                         push	ax
28994                                           ! Debug: func () void = outb+0 (used reg = )
28995 7803           E8         05A0            call	_outb
28996 7806           83C4                   04  add	sp,*4
28997                                           !BCC_EOS
28998                                           ! 4063             outb(0x3c0, read_byte(ES, BX)); BX++;
28999                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29000 7809           FF76         08            push	8[bp]
29001                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29002 780C           FF76         06            push	6[bp]
29003                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29004 780F           E8         0528            call	_read_byte
29005 7812           83C4                   04  add	sp,*4
29006                                           ! Debug: list unsigned char = al+0 (used reg = )
29007 7815           30E4                       xor	ah,ah
29008 7817           50                         push	ax
29009                                           ! Debug: list int = const $3C0 (used reg = )
29010 7818           B8                   03C0  mov	ax,#$3C0
29011 781B           50                         push	ax
29012                                           ! Debug: func () void = outb+0 (used reg = )
29013 781C           E8         0587            call	_outb
29014 781F           83C4                   04  add	sp,*4
29015                                           !BCC_EOS
29016                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29017 7822           8B46         08            mov	ax,8[bp]
29018 7825           40                         inc	ax
29019 7826           8946         08            mov	8[bp],ax
29020                                           !BCC_EOS
29021                                           ! 4064         }
29022                                           ! 4065         outb(0x3c0, ar_index);
29023                       00007829            .291:
29024                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29025 7829           8B46         FE            mov	ax,-2[bp]
29026 782C           40                         inc	ax
29027 782D           8946         FE            mov	-2[bp],ax
29028                       00007830            .292:
29029                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
29030 7830           8B46         FE            mov	ax,-2[bp]
29031 7833           3D                   0013  cmp	ax,*$13
29032 7836           76           BC            jbe	.293
29033                       00007838            .294:
29034                       00007838            .290:
29035                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
29036 7838           FF76         F6            push	-$A[bp]
29037                                           ! Debug: list int = const $3C0 (used reg = )
29038 783B           B8                   03C0  mov	ax,#$3C0
29039 783E           50                         push	ax
29040                                           ! Debug: func () void = outb+0 (used reg = )
29041 783F           E8         0564            call	_outb
29042 7842           83C4                   04  add	sp,*4
29043                                           !BCC_EOS
29044                                           ! 4066         inb(0x3da);
29045                                           ! Debug: list int = const $3DA (used reg = )
29046 7845           B8                   03DA  mov	ax,#$3DA
29047 7848           50                         push	ax
29048                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29049 7849           E8         0544            call	_inb
29050 784C           44                         inc	sp
29051 784D           44                         inc	sp
29052                                           !BCC_EOS
29053                                           ! 4067         for(i=0;i<=8;i++) {
29054                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29055 784E           31C0                       xor	ax,ax
29056 7850           8946         FE            mov	-2[bp],ax
29057                                           !BCC_EOS
29058                                           !BCC_EOS
29059 7853           EB           34            jmp .297
29060                       00007855            .298:
29061                                           ! 4068             outb(0x3ce,i);
29062                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
29063 7855           FF76         FE            push	-2[bp]
29064                                           ! Debug: list int = const $3CE (used reg = )
29065 7858           B8                   03CE  mov	ax,#$3CE
29066 785B           50                         push	ax
29067                                           ! Debug: func () void = outb+0 (used reg = )
29068 785C           E8         0547            call	_outb
29069 785F           83C4                   04  add	sp,*4
29070                                           !BCC_EOS
29071                                           ! 4069             outb(0x3cf, read_byte(ES, BX)); BX++;
29072                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29073 7862           FF76         08            push	8[bp]
29074                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29075 7865           FF76         06            push	6[bp]
29076                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29077 7868           E8         04CF            call	_read_byte
29078 786B           83C4                   04  add	sp,*4
29079                                           ! Debug: list unsigned char = al+0 (used reg = )
29080 786E           30E4                       xor	ah,ah
29081 7870           50                         push	ax
29082                                           ! Debug: list int = const $3CF (used reg = )
29083 7871           B8                   03CF  mov	ax,#$3CF
29084 7874           50                         push	ax
29085                                           ! Debug: func () void = outb+0 (used reg = )
29086 7875           E8         052E            call	_outb
29087 7878           83C4                   04  add	sp,*4
29088                                           !BCC_EOS
29089                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29090 787B           8B46         08            mov	ax,8[bp]
29091 787E           40                         inc	ax
29092 787F           8946         08            mov	8[bp],ax
29093                                           !BCC_EOS
29094                                           ! 4070         }
29095                                           ! 4071         BX += 2;
29096                       00007882            .296:
29097                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29098 7882           8B46         FE            mov	ax,-2[bp]
29099 7885           40                         inc	ax
29100 7886           8946         FE            mov	-2[bp],ax
29101                       00007889            .297:
29102                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29103 7889           8B46         FE            mov	ax,-2[bp]
29104 788C           3D                   0008  cmp	ax,*8
29105 788F           76           C4            jbe	.298
29106                       00007891            .299:
29107                       00007891            .295:
29108                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29109 7891           8B46         08            mov	ax,8[bp]
29110 7894           40                         inc	ax
29111 7895           40                         inc	ax
29112 7896           8946         08            mov	8[bp],ax
29113                                           !BCC_EOS
29114                                           ! 4072         BX += 4;
29115                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
29116 7899           8B46         08            mov	ax,8[bp]
29117 789C           05                   0004  add	ax,*4
29118 789F           8946         08            mov	8[bp],ax
29119                                           !BCC_EOS
29120                                           ! 4073         outb(0x3c4, read_byte(ES, addr1)); addr1++;
29121                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29122 78A2           FF76         F8            push	-8[bp]
29123                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29124 78A5           FF76         06            push	6[bp]
29125                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29126 78A8           E8         048F            call	_read_byte
29127 78AB           83C4                   04  add	sp,*4
29128                                           ! Debug: list unsigned char = al+0 (used reg = )
29129 78AE           30E4                       xor	ah,ah
29130 78B0           50                         push	ax
29131                                           ! Debug: list int = const $3C4 (used reg = )
29132 78B1           B8                   03C4  mov	ax,#$3C4
29133 78B4           50                         push	ax
29134                                           ! Debug: func () void = outb+0 (used reg = )
29135 78B5           E8         04EE            call	_outb
29136 78B8           83C4                   04  add	sp,*4
29137                                           !BCC_EOS
29138                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29139 78BB           8B46         F8            mov	ax,-8[bp]
29140 78BE           40                         inc	ax
29141 78BF           8946         F8            mov	-8[bp],ax
29142                                           !BCC_EOS
29143                                           ! 4074         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
29144                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29145 78C2           FF76         F8            push	-8[bp]
29146                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29147 78C5           FF76         06            push	6[bp]
29148                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29149 78C8           E8         046F            call	_read_byte
29150 78CB           83C4                   04  add	sp,*4
29151                                           ! Debug: list unsigned char = al+0 (used reg = )
29152 78CE           30E4                       xor	ah,ah
29153 78D0           50                         push	ax
29154                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29155 78D1           FF76         FC            push	-4[bp]
29156                                           ! Debug: func () void = outb+0 (used reg = )
29157 78D4           E8         04CF            call	_outb
29158 78D7           83C4                   04  add	sp,*4
29159                                           !BCC_EOS
29160                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29161 78DA           8B46         F8            mov	ax,-8[bp]
29162 78DD           40                         inc	ax
29163 78DE           8946         F8            mov	-8[bp],ax
29164                                           !BCC_EOS
29165                                           ! 4075         outb(0x3ce, read_byte(ES, addr1)); addr1++;
29166                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29167 78E1           FF76         F8            push	-8[bp]
29168                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29169 78E4           FF76         06            push	6[bp]
29170                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29171 78E7           E8         0450            call	_read_byte
29172 78EA           83C4                   04  add	sp,*4
29173                                           ! Debug: list unsigned char = al+0 (used reg = )
29174 78ED           30E4                       xor	ah,ah
29175 78EF           50                         push	ax
29176                                           ! Debug: list int = const $3CE (used reg = )
29177 78F0           B8                   03CE  mov	ax,#$3CE
29178 78F3           50                         push	ax
29179                                           ! Debug: func () void = outb+0 (used reg = )
29180 78F4           E8         04AF            call	_outb
29181 78F7           83C4                   04  add	sp,*4
29182                                           !BCC_EOS
29183                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29184 78FA           8B46         F8            mov	ax,-8[bp]
29185 78FD           40                         inc	ax
29186 78FE           8946         F8            mov	-8[bp],ax
29187                                           !BCC_EOS
29188                                           ! 4076         addr1++;
29189                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29190 7901           8B46         F8            mov	ax,-8[bp]
29191 7904           40                         inc	ax
29192 7905           8946         F8            mov	-8[bp],ax
29193                                           !BCC_EOS
29194                                           ! 4077         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
29195                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29196 7908           FF76         F8            push	-8[bp]
29197                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29198 790B           FF76         06            push	6[bp]
29199                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29200 790E           E8         0429            call	_read_byte
29201 7911           83C4                   04  add	sp,*4
29202                                           ! Debug: list unsigned char = al+0 (used reg = )
29203 7914           30E4                       xor	ah,ah
29204 7916           50                         push	ax
29205                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29206 7917           8B46         FC            mov	ax,-4[bp]
29207                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
29208                                           ! Debug: list unsigned int = ax+6 (used reg = )
29209 791A           05                   0006  add	ax,*6
29210 791D           50                         push	ax
29211                                           ! Debug: func () void = outb+0 (used reg = )
29212 791E           E8         0485            call	_outb
29213 7921           83C4                   04  add	sp,*4
29214                                           !BCC_EOS
29215                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29216 7924           8B46         F8            mov	ax,-8[bp]
29217 7927           40                         inc	ax
29218 7928           8946         F8            mov	-8[bp],ax
29219                                           !BCC_EOS
29220                                           ! 4078     }
29221                                           ! 4079     if (CX & 2) {
29222                       0000792B            .280:
29223                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
29224 792B           8A46         04            mov	al,4[bp]
29225 792E           24                     02  and	al,*2
29226 7930           84C0                       test	al,al
29227 7932         0F84         0270            beq 	.29A
29228                       00007936            .29B:
29229                                           ! 4080         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
29230                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29231 7936           FF76         08            push	8[bp]
29232                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29233 7939           FF76         06            push	6[bp]
29234                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29235 793C           E8         03FB            call	_read_byte
29236 793F           83C4                   04  add	sp,*4
29237                                           ! Debug: list unsigned char = al+0 (used reg = )
29238 7942           30E4                       xor	ah,ah
29239 7944           50                         push	ax
29240                                           ! Debug: list int = const $49 (used reg = )
29241 7945           B8                   0049  mov	ax,*$49
29242 7948           50                         push	ax
29243                                           ! Debug: list int = const $40 (used reg = )
29244 7949           B8                   0040  mov	ax,*$40
29245 794C           50                         push	ax
29246                                           ! Debug: func () void = write_byte+0 (used reg = )
29247 794D           E8         0410            call	_write_byte
29248 7950           83C4                   06  add	sp,*6
29249                                           !BCC_EOS
29250                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29251 7953           8B46         08            mov	ax,8[bp]
29252 7956           40                         inc	ax
29253 7957           8946         08            mov	8[bp],ax
29254                                           !BCC_EOS
29255                                           ! 4081         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
29256                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29257 795A           FF76         08            push	8[bp]
29258                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29259 795D           FF76         06            push	6[bp]
29260                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29261 7960           E8         03EA            call	_read_word
29262 7963           83C4                   04  add	sp,*4
29263                                           ! Debug: list unsigned short = ax+0 (used reg = )
29264 7966           50                         push	ax
29265                                           ! Debug: list int = const $4A (used reg = )
29266 7967           B8                   004A  mov	ax,*$4A
29267 796A           50                         push	ax
29268                                           ! Debug: list int = const $40 (used reg = )
29269 796B           B8                   0040  mov	ax,*$40
29270 796E           50                         push	ax
29271                                           ! Debug: func () void = write_word+0 (used reg = )
29272 796F           E8         0406            call	_write_word
29273 7972           83C4                   06  add	sp,*6
29274                                           !BCC_EOS
29275                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29276 7975           8B46         08            mov	ax,8[bp]
29277 7978           40                         inc	ax
29278 7979           40                         inc	ax
29279 797A           8946         08            mov	8[bp],ax
29280                                           !BCC_EOS
29281                                           ! 4082         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
29282                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29283 797D           FF76         08            push	8[bp]
29284                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29285 7980           FF76         06            push	6[bp]
29286                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29287 7983           E8         03C7            call	_read_word
29288 7986           83C4                   04  add	sp,*4
29289                                           ! Debug: list unsigned short = ax+0 (used reg = )
29290 7989           50                         push	ax
29291                                           ! Debug: list int = const $4C (used reg = )
29292 798A           B8                   004C  mov	ax,*$4C
29293 798D           50                         push	ax
29294                                           ! Debug: list int = const $40 (used reg = )
29295 798E           B8                   0040  mov	ax,*$40
29296 7991           50                         push	ax
29297                                           ! Debug: func () void = write_word+0 (used reg = )
29298 7992           E8         03E3            call	_write_word
29299 7995           83C4                   06  add	sp,*6
29300                                           !BCC_EOS
29301                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29302 7998           8B46         08            mov	ax,8[bp]
29303 799B           40                         inc	ax
29304 799C           40                         inc	ax
29305 799D           8946         08            mov	8[bp],ax
29306                                           !BCC_EOS
29307                                           ! 4083         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29308                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29309 79A0           FF76         08            push	8[bp]
29310                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29311 79A3           FF76         06            push	6[bp]
29312                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29313 79A6           E8         03A4            call	_read_word
29314 79A9           83C4                   04  add	sp,*4
29315                                           ! Debug: list unsigned short = ax+0 (used reg = )
29316 79AC           50                         push	ax
29317                                           ! Debug: list int = const $63 (used reg = )
29318 79AD           B8                   0063  mov	ax,*$63
29319 79B0           50                         push	ax
29320                                           ! Debug: list int = const $40 (used reg = )
29321 79B1           B8                   0040  mov	ax,*$40
29322 79B4           50                         push	ax
29323                                           ! Debug: func () void = write_word+0 (used reg = )
29324 79B5           E8         03C0            call	_write_word
29325 79B8           83C4                   06  add	sp,*6
29326                                           !BCC_EOS
29327                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29328 79BB           8B46         08            mov	ax,8[bp]
29329 79BE           40                         inc	ax
29330 79BF           40                         inc	ax
29331 79C0           8946         08            mov	8[bp],ax
29332                                           !BCC_EOS
29333                                           ! 4084         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29334                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29335 79C3           FF76         08            push	8[bp]
29336                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29337 79C6           FF76         06            push	6[bp]
29338                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29339 79C9           E8         036E            call	_read_byte
29340 79CC           83C4                   04  add	sp,*4
29341                                           ! Debug: list unsigned char = al+0 (used reg = )
29342 79CF           30E4                       xor	ah,ah
29343 79D1           50                         push	ax
29344                                           ! Debug: list int = const $84 (used reg = )
29345 79D2           B8                   0084  mov	ax,#$84
29346 79D5           50                         push	ax
29347                                           ! Debug: list int = const $40 (used reg = )
29348 79D6           B8                   0040  mov	ax,*$40
29349 79D9           50                         push	ax
29350                                           ! Debug: func () void = write_byte+0 (used reg = )
29351 79DA           E8         0383            call	_write_byte
29352 79DD           83C4                   06  add	sp,*6
29353                                           !BCC_EOS
29354                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29355 79E0           8B46         08            mov	ax,8[bp]
29356 79E3           40                         inc	ax
29357 79E4           8946         08            mov	8[bp],ax
29358                                           !BCC_EOS
29359                                           ! 4085         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29360                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29361 79E7           FF76         08            push	8[bp]
29362                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29363 79EA           FF76         06            push	6[bp]
29364                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29365 79ED           E8         035D            call	_read_word
29366 79F0           83C4                   04  add	sp,*4
29367                                           ! Debug: list unsigned short = ax+0 (used reg = )
29368 79F3           50                         push	ax
29369                                           ! Debug: list int = const $85 (used reg = )
29370 79F4           B8                   0085  mov	ax,#$85
29371 79F7           50                         push	ax
29372                                           ! Debug: list int = const $40 (used reg = )
29373 79F8           B8                   0040  mov	ax,*$40
29374 79FB           50                         push	ax
29375                                           ! Debug: func () void = write_word+0 (used reg = )
29376 79FC           E8         0379            call	_write_word
29377 79FF           83C4                   06  add	sp,*6
29378                                           !BCC_EOS
29379                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29380 7A02           8B46         08            mov	ax,8[bp]
29381 7A05           40                         inc	ax
29382 7A06           40                         inc	ax
29383 7A07           8946         08            mov	8[bp],ax
29384                                           !BCC_EOS
29385                                           ! 4086         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29386                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29387 7A0A           FF76         08            push	8[bp]
29388                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29389 7A0D           FF76         06            push	6[bp]
29390                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29391 7A10           E8         0327            call	_read_byte
29392 7A13           83C4                   04  add	sp,*4
29393                                           ! Debug: list unsigned char = al+0 (used reg = )
29394 7A16           30E4                       xor	ah,ah
29395 7A18           50                         push	ax
29396                                           ! Debug: list int = const $87 (used reg = )
29397 7A19           B8                   0087  mov	ax,#$87
29398 7A1C           50                         push	ax
29399                                           ! Debug: list int = const $40 (used reg = )
29400 7A1D           B8                   0040  mov	ax,*$40
29401 7A20           50                         push	ax
29402                                           ! Debug: func () void = write_byte+0 (used reg = )
29403 7A21           E8         033C            call	_write_byte
29404 7A24           83C4                   06  add	sp,*6
29405                                           !BCC_EOS
29406                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29407 7A27           8B46         08            mov	ax,8[bp]
29408 7A2A           40                         inc	ax
29409 7A2B           8946         08            mov	8[bp],ax
29410                                           !BCC_EOS
29411                                           ! 4087         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29412                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29413 7A2E           FF76         08            push	8[bp]
29414                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29415 7A31           FF76         06            push	6[bp]
29416                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29417 7A34           E8         0303            call	_read_byte
29418 7A37           83C4                   04  add	sp,*4
29419                                           ! Debug: list unsigned char = al+0 (used reg = )
29420 7A3A           30E4                       xor	ah,ah
29421 7A3C           50                         push	ax
29422                                           ! Debug: list int = const $88 (used reg = )
29423 7A3D           B8                   0088  mov	ax,#$88
29424 7A40           50                         push	ax
29425                                           ! Debug: list int = const $40 (used reg = )
29426 7A41           B8                   0040  mov	ax,*$40
29427 7A44           50                         push	ax
29428                                           ! Debug: func () void = write_byte+0 (used reg = )
29429 7A45           E8         0318            call	_write_byte
29430 7A48           83C4                   06  add	sp,*6
29431                                           !BCC_EOS
29432                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29433 7A4B           8B46         08            mov	ax,8[bp]
29434 7A4E           40                         inc	ax
29435 7A4F           8946         08            mov	8[bp],ax
29436                                           !BCC_EOS
29437                                           ! 4088         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29438                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29439 7A52           FF76         08            push	8[bp]
29440                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29441 7A55           FF76         06            push	6[bp]
29442                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29443 7A58           E8         02DF            call	_read_byte
29444 7A5B           83C4                   04  add	sp,*4
29445                                           ! Debug: list unsigned char = al+0 (used reg = )
29446 7A5E           30E4                       xor	ah,ah
29447 7A60           50                         push	ax
29448                                           ! Debug: list int = const $89 (used reg = )
29449 7A61           B8                   0089  mov	ax,#$89
29450 7A64           50                         push	ax
29451                                           ! Debug: list int = const $40 (used reg = )
29452 7A65           B8                   0040  mov	ax,*$40
29453 7A68           50                         push	ax
29454                                           ! Debug: func () void = write_byte+0 (used reg = )
29455 7A69           E8         02F4            call	_write_byte
29456 7A6C           83C4                   06  add	sp,*6
29457                                           !BCC_EOS
29458                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29459 7A6F           8B46         08            mov	ax,8[bp]
29460 7A72           40                         inc	ax
29461 7A73           8946         08            mov	8[bp],ax
29462                                           !BCC_EOS
29463                                           ! 4089         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29464                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29465 7A76           FF76         08            push	8[bp]
29466                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29467 7A79           FF76         06            push	6[bp]
29468                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29469 7A7C           E8         02CE            call	_read_word
29470 7A7F           83C4                   04  add	sp,*4
29471                                           ! Debug: list unsigned short = ax+0 (used reg = )
29472 7A82           50                         push	ax
29473                                           ! Debug: list int = const $60 (used reg = )
29474 7A83           B8                   0060  mov	ax,*$60
29475 7A86           50                         push	ax
29476                                           ! Debug: list int = const $40 (used reg = )
29477 7A87           B8                   0040  mov	ax,*$40
29478 7A8A           50                         push	ax
29479                                           ! Debug: func () void = write_word+0 (used reg = )
29480 7A8B           E8         02EA            call	_write_word
29481 7A8E           83C4                   06  add	sp,*6
29482                                           !BCC_EOS
29483                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29484 7A91           8B46         08            mov	ax,8[bp]
29485 7A94           40                         inc	ax
29486 7A95           40                         inc	ax
29487 7A96           8946         08            mov	8[bp],ax
29488                                           !BCC_EOS
29489                                           ! 4090         for(i=0;i<8;i++) {
29490                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29491 7A99           31C0                       xor	ax,ax
29492 7A9B           8946         FE            mov	-2[bp],ax
29493                                           !BCC_EOS
29494                                           !BCC_EOS
29495 7A9E           EB           2F            jmp .29E
29496                       00007AA0            .29F:
29497                                           ! 4091             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29498                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29499 7AA0           FF76         08            push	8[bp]
29500                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29501 7AA3           FF76         06            push	6[bp]
29502                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29503 7AA6           E8         02A4            call	_read_word
29504 7AA9           83C4                   04  add	sp,*4
29505                                           ! Debug: list unsigned short = ax+0 (used reg = )
29506 7AAC           50                         push	ax
29507                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29508                                           ! Debug: expression subtree swapping
29509 7AAD           8B46         FE            mov	ax,-2[bp]
29510 7AB0           D1E0                       shl	ax,*1
29511                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29512                                           ! Debug: expression subtree swapping
29513                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29514 7AB2           05                   0050  add	ax,*$50
29515 7AB5           50                         push	ax
29516                                           ! Debug: list int = const $40 (used reg = )
29517 7AB6           B8                   0040  mov	ax,*$40
29518 7AB9           50                         push	ax
29519                                           ! Debug: func () void = write_word+0 (used reg = )
29520 7ABA           E8         02BB            call	_write_word
29521 7ABD           83C4                   06  add	sp,*6
29522                                           !BCC_EOS
29523                                           ! 4092             BX += 2;
29524                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29525 7AC0           8B46         08            mov	ax,8[bp]
29526 7AC3           40                         inc	ax
29527 7AC4           40                         inc	ax
29528 7AC5           8946         08            mov	8[bp],ax
29529                                           !BCC_EOS
29530                                           ! 4093         }
29531                                           ! 4094         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29532                       00007AC8            .29D:
29533                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29534 7AC8           8B46         FE            mov	ax,-2[bp]
29535 7ACB           40                         inc	ax
29536 7ACC           8946         FE            mov	-2[bp],ax
29537                       00007ACF            .29E:
29538                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29539 7ACF           8B46         FE            mov	ax,-2[bp]
29540 7AD2           3D                   0008  cmp	ax,*8
29541 7AD5           72           C9            jb 	.29F
29542                       00007AD7            .2A0:
29543                       00007AD7            .29C:
29544                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29545 7AD7           FF76         08            push	8[bp]
29546                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29547 7ADA           FF76         06            push	6[bp]
29548                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29549 7ADD           E8         026D            call	_read_word
29550 7AE0           83C4                   04  add	sp,*4
29551                                           ! Debug: list unsigned short = ax+0 (used reg = )
29552 7AE3           50                         push	ax
29553                                           ! Debug: list int = const $4E (used reg = )
29554 7AE4           B8                   004E  mov	ax,*$4E
29555 7AE7           50                         push	ax
29556                                           ! Debug: list int = const $40 (used reg = )
29557 7AE8           B8                   0040  mov	ax,*$40
29558 7AEB           50                         push	ax
29559                                           ! Debug: func () void = write_word+0 (used reg = )
29560 7AEC           E8         0289            call	_write_word
29561 7AEF           83C4                   06  add	sp,*6
29562                                           !BCC_EOS
29563                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29564 7AF2           8B46         08            mov	ax,8[bp]
29565 7AF5           40                         inc	ax
29566 7AF6           40                         inc	ax
29567 7AF7           8946         08            mov	8[bp],ax
29568                                           !BCC_EOS
29569                                           ! 4095         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29570                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29571 7AFA           FF76         08            push	8[bp]
29572                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29573 7AFD           FF76         06            push	6[bp]
29574                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29575 7B00           E8         0237            call	_read_byte
29576 7B03           83C4                   04  add	sp,*4
29577                                           ! Debug: list unsigned char = al+0 (used reg = )
29578 7B06           30E4                       xor	ah,ah
29579 7B08           50                         push	ax
29580                                           ! Debug: list int = const $62 (used reg = )
29581 7B09           B8                   0062  mov	ax,*$62
29582 7B0C           50                         push	ax
29583                                           ! Debug: list int = const $40 (used reg = )
29584 7B0D           B8                   0040  mov	ax,*$40
29585 7B10           50                         push	ax
29586                                           ! Debug: func () void = write_byte+0 (used reg = )
29587 7B11           E8         024C            call	_write_byte
29588 7B14           83C4                   06  add	sp,*6
29589                                           !BCC_EOS
29590                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29591 7B17           8B46         08            mov	ax,8[bp]
29592 7B1A           40                         inc	ax
29593 7B1B           8946         08            mov	8[bp],ax
29594                                           !BCC_EOS
29595                                           ! 4096         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29596                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29597 7B1E           FF76         08            push	8[bp]
29598                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29599 7B21           FF76         06            push	6[bp]
29600                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29601 7B24           E8         0226            call	_read_word
29602 7B27           83C4                   04  add	sp,*4
29603                                           ! Debug: list unsigned short = ax+0 (used reg = )
29604 7B2A           50                         push	ax
29605                                           ! Debug: list int = const $7C (used reg = )
29606 7B2B           B8                   007C  mov	ax,*$7C
29607 7B2E           50                         push	ax
29608                                           ! Debug: list int = const 0 (used reg = )
29609 7B2F           31C0                       xor	ax,ax
29610 7B31           50                         push	ax
29611                                           ! Debug: func () void = write_word+0 (used reg = )
29612 7B32           E8         0243            call	_write_word
29613 7B35           83C4                   06  add	sp,*6
29614                                           !BCC_EOS
29615                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29616 7B38           8B46         08            mov	ax,8[bp]
29617 7B3B           40                         inc	ax
29618 7B3C           40                         inc	ax
29619 7B3D           8946         08            mov	8[bp],ax
29620                                           !BCC_EOS
29621                                           ! 4097         write_word(0, 0x1f * 4 + 2, read_wo
29622                                           ! 4097 rd(ES, BX)); BX += 2;
29623                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29624 7B40           FF76         08            push	8[bp]
29625                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29626 7B43           FF76         06            push	6[bp]
29627                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29628 7B46           E8         0204            call	_read_word
29629 7B49           83C4                   04  add	sp,*4
29630                                           ! Debug: list unsigned short = ax+0 (used reg = )
29631 7B4C           50                         push	ax
29632                                           ! Debug: list int = const $7E (used reg = )
29633 7B4D           B8                   007E  mov	ax,*$7E
29634 7B50           50                         push	ax
29635                                           ! Debug: list int = const 0 (used reg = )
29636 7B51           31C0                       xor	ax,ax
29637 7B53           50                         push	ax
29638                                           ! Debug: func () void = write_word+0 (used reg = )
29639 7B54           E8         0221            call	_write_word
29640 7B57           83C4                   06  add	sp,*6
29641                                           !BCC_EOS
29642                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29643 7B5A           8B46         08            mov	ax,8[bp]
29644 7B5D           40                         inc	ax
29645 7B5E           40                         inc	ax
29646 7B5F           8946         08            mov	8[bp],ax
29647                                           !BCC_EOS
29648                                           ! 4098         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29649                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29650 7B62           FF76         08            push	8[bp]
29651                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29652 7B65           FF76         06            push	6[bp]
29653                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29654 7B68           E8         01E2            call	_read_word
29655 7B6B           83C4                   04  add	sp,*4
29656                                           ! Debug: list unsigned short = ax+0 (used reg = )
29657 7B6E           50                         push	ax
29658                                           ! Debug: list int = const $10C (used reg = )
29659 7B6F           B8                   010C  mov	ax,#$10C
29660 7B72           50                         push	ax
29661                                           ! Debug: list int = const 0 (used reg = )
29662 7B73           31C0                       xor	ax,ax
29663 7B75           50                         push	ax
29664                                           ! Debug: func () void = write_word+0 (used reg = )
29665 7B76           E8         01FF            call	_write_word
29666 7B79           83C4                   06  add	sp,*6
29667                                           !BCC_EOS
29668                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29669 7B7C           8B46         08            mov	ax,8[bp]
29670 7B7F           40                         inc	ax
29671 7B80           40                         inc	ax
29672 7B81           8946         08            mov	8[bp],ax
29673                                           !BCC_EOS
29674                                           ! 4099         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29675                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29676 7B84           FF76         08            push	8[bp]
29677                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29678 7B87           FF76         06            push	6[bp]
29679                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29680 7B8A           E8         01C0            call	_read_word
29681 7B8D           83C4                   04  add	sp,*4
29682                                           ! Debug: list unsigned short = ax+0 (used reg = )
29683 7B90           50                         push	ax
29684                                           ! Debug: list int = const $10E (used reg = )
29685 7B91           B8                   010E  mov	ax,#$10E
29686 7B94           50                         push	ax
29687                                           ! Debug: list int = const 0 (used reg = )
29688 7B95           31C0                       xor	ax,ax
29689 7B97           50                         push	ax
29690                                           ! Debug: func () void = write_word+0 (used reg = )
29691 7B98           E8         01DD            call	_write_word
29692 7B9B           83C4                   06  add	sp,*6
29693                                           !BCC_EOS
29694                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29695 7B9E           8B46         08            mov	ax,8[bp]
29696 7BA1           40                         inc	ax
29697 7BA2           40                         inc	ax
29698 7BA3           8946         08            mov	8[bp],ax
29699                                           !BCC_EOS
29700                                           ! 4100     }
29701                                           ! 4101     if (CX & 4) {
29702                       00007BA6            .29A:
29703                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29704 7BA6           8A46         04            mov	al,4[bp]
29705 7BA9           24                     04  and	al,*4
29706 7BAB           84C0                       test	al,al
29707 7BAD         0F84         0096            beq 	.2A1
29708                       00007BB1            .2A2:
29709                                           ! 4102         BX++;
29710                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29711 7BB1           8B46         08            mov	ax,8[bp]
29712 7BB4           40                         inc	ax
29713 7BB5           8946         08            mov	8[bp],ax
29714                                           !BCC_EOS
29715                                           ! 4103         v = read_byte(ES, BX); BX++;
29716                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29717 7BB8           FF76         08            push	8[bp]
29718                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29719 7BBB           FF76         06            push	6[bp]
29720                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29721 7BBE           E8         0179            call	_read_byte
29722 7BC1           83C4                   04  add	sp,*4
29723                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29724 7BC4           30E4                       xor	ah,ah
29725 7BC6           8946         FA            mov	-6[bp],ax
29726                                           !BCC_EOS
29727                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29728 7BC9           8B46         08            mov	ax,8[bp]
29729 7BCC           40                         inc	ax
29730 7BCD           8946         08            mov	8[bp],ax
29731                                           !BCC_EOS
29732                                           ! 4104         outb(0x3c6, read_byte(ES, BX)); BX++;
29733                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29734 7BD0           FF76         08            push	8[bp]
29735                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29736 7BD3           FF76         06            push	6[bp]
29737                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29738 7BD6           E8         0161            call	_read_byte
29739 7BD9           83C4                   04  add	sp,*4
29740                                           ! Debug: list unsigned char = al+0 (used reg = )
29741 7BDC           30E4                       xor	ah,ah
29742 7BDE           50                         push	ax
29743                                           ! Debug: list int = const $3C6 (used reg = )
29744 7BDF           B8                   03C6  mov	ax,#$3C6
29745 7BE2           50                         push	ax
29746                                           ! Debug: func () void = outb+0 (used reg = )
29747 7BE3           E8         01C0            call	_outb
29748 7BE6           83C4                   04  add	sp,*4
29749                                           !BCC_EOS
29750                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29751 7BE9           8B46         08            mov	ax,8[bp]
29752 7BEC           40                         inc	ax
29753 7BED           8946         08            mov	8[bp],ax
29754                                           !BCC_EOS
29755                                           ! 4105         outb(0x3c8,0x00);
29756                                           ! Debug: list int = const 0 (used reg = )
29757 7BF0           31C0                       xor	ax,ax
29758 7BF2           50                         push	ax
29759                                           ! Debug: list int = const $3C8 (used reg = )
29760 7BF3           B8                   03C8  mov	ax,#$3C8
29761 7BF6           50                         push	ax
29762                                           ! Debug: func () void = outb+0 (used reg = )
29763 7BF7           E8         01AC            call	_outb
29764 7BFA           83C4                   04  add	sp,*4
29765                                           !BCC_EOS
29766                                           ! 4106         for(i=0;i<256*3;i++) {
29767                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29768 7BFD           31C0                       xor	ax,ax
29769 7BFF           8946         FE            mov	-2[bp],ax
29770                                           !BCC_EOS
29771                                           !BCC_EOS
29772 7C02           EB           27            jmp .2A5
29773                       00007C04            .2A6:
29774                                           ! 4107             outb(0x3c9, read_byte(ES, BX)); BX++;
29775                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29776 7C04           FF76         08            push	8[bp]
29777                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29778 7C07           FF76         06            push	6[bp]
29779                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29780 7C0A           E8         012D            call	_read_byte
29781 7C0D           83C4                   04  add	sp,*4
29782                                           ! Debug: list unsigned char = al+0 (used reg = )
29783 7C10           30E4                       xor	ah,ah
29784 7C12           50                         push	ax
29785                                           ! Debug: list int = const $3C9 (used reg = )
29786 7C13           B8                   03C9  mov	ax,#$3C9
29787 7C16           50                         push	ax
29788                                           ! Debug: func () void = outb+0 (used reg = )
29789 7C17           E8         018C            call	_outb
29790 7C1A           83C4                   04  add	sp,*4
29791                                           !BCC_EOS
29792                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29793 7C1D           8B46         08            mov	ax,8[bp]
29794 7C20           40                         inc	ax
29795 7C21           8946         08            mov	8[bp],ax
29796                                           !BCC_EOS
29797                                           ! 4108         }
29798                                           ! 4109         BX++;
29799                       00007C24            .2A4:
29800                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29801 7C24           8B46         FE            mov	ax,-2[bp]
29802 7C27           40                         inc	ax
29803 7C28           8946         FE            mov	-2[bp],ax
29804                       00007C2B            .2A5:
29805                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29806 7C2B           8B46         FE            mov	ax,-2[bp]
29807 7C2E           3D                   0300  cmp	ax,#$300
29808 7C31           72           D1            jb 	.2A6
29809                       00007C33            .2A7:
29810                       00007C33            .2A3:
29811                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29812 7C33           8B46         08            mov	ax,8[bp]
29813 7C36           40                         inc	ax
29814 7C37           8946         08            mov	8[bp],ax
29815                                           !BCC_EOS
29816                                           ! 4110         outb(0x3c8, v);
29817                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29818 7C3A           FF76         FA            push	-6[bp]
29819                                           ! Debug: list int = const $3C8 (used reg = )
29820 7C3D           B8                   03C8  mov	ax,#$3C8
29821 7C40           50                         push	ax
29822                                           ! Debug: func () void = outb+0 (used reg = )
29823 7C41           E8         0162            call	_outb
29824 7C44           83C4                   04  add	sp,*4
29825                                           !BCC_EOS
29826                                           ! 4111     }
29827                                           ! 4112     return BX;
29828                       00007C47            .2A1:
29829 7C47           8B46         08            mov	ax,8[bp]
29830 7C4A           89EC                       mov	sp,bp
29831 7C4C           5D                         pop	bp
29832 7C4D           C3                         ret
29833                                           !BCC_EOS
29834                                           ! 4113 }
29835                                           ! 4114 static Bit8u find_vga_entry(mode)
29836                                           ! 4115 Bit8u mode;
29837                       00007C4E            _find_vga_entry:
29838                                           !BCC_EOS
29839                                           ! 4116 {
29840                                           ! 4117  Bit8u i,line=0xFF;
29841 7C4E           55                         push	bp
29842 7C4F           89E5                       mov	bp,sp
29843 7C51           4C                         dec	sp
29844 7C52           4C                         dec	sp
29845                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29846 7C53           B0                     FF  mov	al,#$FF
29847 7C55           8846         FE            mov	-2[bp],al
29848                                           !BCC_EOS
29849                                           ! 4118  for(i=0;i<=15;i++)
29850                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29851 7C58           30C0                       xor	al,al
29852 7C5A           8846         FF            mov	-1[bp],al
29853                                           !BCC_EOS
29854                                           !BCC_EOS
29855                                           ! 4119   if(vga_modes[i].svgamode==mode)
29856 7C5D           EB           23            jmp .2AA
29857                       00007C5F            .2AB:
29858                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29859 7C5F           8A46         FF            mov	al,-1[bp]
29860 7C62           30E4                       xor	ah,ah
29861 7C64           B1                     03  mov	cl,*3
29862 7C66           D3E0                       shl	ax,cl
29863 7C68           89C3                       mov	bx,ax
29864                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29865 7C6A           8A87       0206            mov	al,_vga_modes[bx]
29866 7C6E           3A46         04            cmp	al,4[bp]
29867 7C71           75           08            jne 	.2AC
29868                       00007C73            .2AD:
29869                                           ! 4120    {line=i;
29870                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29871 7C73           8A46         FF            mov	al,-1[bp]
29872 7C76           8846         FE            mov	-2[bp],al
29873                                           !BCC_EOS
29874                                           ! 4121     break;
29875 7C79           EB           0E            jmp .2A8
29876                                           !BCC_EOS
29877                                           ! 4122    }
29878                                           ! 4123  return line;
29879                       00007C7B            .2AC:
29880                       00007C7B            .2A9:
29881                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29882 7C7B           8A46         FF            mov	al,-1[bp]
29883 7C7E           40                         inc	ax
29884 7C7F           8846         FF            mov	-1[bp],al
29885                       00007C82            .2AA:
29886                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29887 7C82           8A46         FF            mov	al,-1[bp]
29888 7C85           3C                     0F  cmp	al,*$F
29889 7C87           76           D6            jbe	.2AB
29890                       00007C89            .2AE:
29891                       00007C89            .2A8:
29892 7C89           8A46         FE            mov	al,-2[bp]
29893 7C8C           89EC                       mov	sp,bp
29894 7C8E           5D                         pop	bp
29895 7C8F           C3                         ret
29896                                           !BCC_EOS
29897                                           ! 4124 }
29898                                           ! 4125 static void memsetb(seg,offset,value,count)
29899                                           ! Register BX used in function find_vga_entry
29900                                           ! 4126   Bit16u seg;
29901                       00007C90            _memsetb:
29902                                           !BCC_EOS
29903                                           ! 4127   Bit16u offset;
29904                                           !BCC_EOS
29905                                           ! 4128   Bit16u value;
29906                                           !BCC_EOS
29907                                           ! 4129   Bit16u count;
29908                                           !BCC_EOS
29909                                           ! 4130 {
29910                                           ! 4131 #asm
29911                                           !BCC_ASM
29912                       00000008            _memsetb.count	set	8
29913                       00000002            _memsetb.seg	set	2
29914                       00000006            _memsetb.value	set	6
29915                       00000004            _memsetb.offset	set	4
29916 7C90           55                           push bp
29917 7C91           89E5                         mov bp, sp
29918 7C93           50                             push ax
29919 7C94           51                             push cx
29920 7C95           06                             push es
29921 7C96           57                             push di
29922 7C97           8B4E         0A                mov cx, 10[bp] ; count
29923 7C9A           83F9                   00      cmp cx, #0x00
29924 7C9D           74           10                je memsetb_end
29925 7C9F           8B46         04                mov ax, 4[bp] ; segment
29926 7CA2           8EC0                           mov es, ax
29927 7CA4           8B46         06                mov ax, 6[bp] ; offset
29928 7CA7           89C7                           mov di, ax
29929 7CA9           8A46         08                mov al, 8[bp] ; value
29930 7CAC           FC                             cld
29931 7CAD           F3                             rep
29932 7CAE           AA                              stosb
29933                       00007CAF            memsetb_end:
29934 7CAF           5F                             pop di
29935 7CB0           07                             pop es
29936 7CB1           59                             pop cx
29937 7CB2           58                             pop ax
29938 7CB3           5D                           pop bp
29939                                           ! 4155 endasm
29940                                           !BCC_ENDASM
29941                                           ! 4156 }
29942 7CB4           C3                         ret
29943                                           ! 4157 static void memsetw(seg,offset,value,count)
29944                                           ! 4158   Bit16u seg;
29945                       00007CB5            _memsetw:
29946                                           !BCC_EOS
29947                                           ! 4159   Bit16u offset;
29948                                           !BCC_EOS
29949                                           ! 4160   Bit16u value;
29950                                           !BCC_EOS
29951                                           ! 4161   Bit16u count;
29952                                           !BCC_EOS
29953                                           ! 4162 {
29954                                           ! 4163 #asm
29955                                           !BCC_ASM
29956                       00000008            _memsetw.count	set	8
29957                       00000002            _memsetw.seg	set	2
29958                       00000006            _memsetw.value	set	6
29959                       00000004            _memsetw.offset	set	4
29960 7CB5           55                           push bp
29961 7CB6           89E5                         mov bp, sp
29962 7CB8           50                             push ax
29963 7CB9           51                             push cx
29964 7CBA           06                             push es
29965 7CBB           57                             push di
29966 7CBC           8B4E         0A                mov cx, 10[bp] ; count
29967 7CBF           83F9                   00      cmp cx, #0x00
29968 7CC2           74           10                je memsetw_end
29969 7CC4           8B46         04                mov ax, 4[bp] ; segment
29970 7CC7           8EC0                           mov es, ax
29971 7CC9           8B46         06                mov ax, 6[bp] ; offset
29972 7CCC           89C7                           mov di, ax
29973 7CCE           8B46         08                mov ax, 8[bp] ; value
29974 7CD1           FC                             cld
29975 7CD2           F3                             rep
29976 7CD3           AB                              stosw
29977                       00007CD4            memsetw_end:
29978 7CD4           5F                             pop di
29979 7CD5           07                             pop es
29980 7CD6           59                             pop cx
29981 7CD7           58                             pop ax
29982 7CD8           5D                           pop bp
29983                                           ! 4187 endasm
29984                                           !BCC_ENDASM
29985                                           ! 4188 }
29986 7CD9           C3                         ret
29987                                           ! 4189 static void memcpyb(dseg,doffset,sseg,soffset,count)
29988                                           ! 4190   Bit16u dseg;
29989                       00007CDA            _memcpyb:
29990                                           !BCC_EOS
29991                                           ! 4191   Bit16u doffset;
29992                                           !BCC_EOS
29993                                           ! 4192   Bit16u sseg;
29994                                           !BCC_EOS
29995                                           ! 4193   Bit16u soffset;
29996                                           !BCC_EOS
29997                                           ! 4194   Bit16u count;
29998                                           !BCC_EOS
29999                                           ! 4195 {
30000                                           ! 4196 #asm
30001                                           !BCC_ASM
30002                       0000000A            _memcpyb.count	set	$A
30003                       00000006            _memcpyb.sseg	set	6
30004                       00000008            _memcpyb.soffset	set	8
30005                       00000002            _memcpyb.dseg	set	2
30006                       00000004            _memcpyb.doffset	set	4
30007 7CDA           55                           push bp
30008 7CDB           89E5                         mov bp, sp
30009 7CDD           50                             push ax
30010 7CDE           51                             push cx
30011 7CDF           06                             push es
30012 7CE0           57                             push di
30013 7CE1           1E                             push ds
30014 7CE2           56                             push si
30015 7CE3           8B4E         0C                mov cx, 12[bp] ; count
30016 7CE6           83F9                   00      cmp cx, #0x0000
30017 7CE9           74           17                je memcpyb_end
30018 7CEB           8B46         04                mov ax, 4[bp] ; dsegment
30019 7CEE           8EC0                           mov es, ax
30020 7CF0           8B46         06                mov ax, 6[bp] ; doffset
30021 7CF3           89C7                           mov di, ax
30022 7CF5           8B46         08                mov ax, 8[bp] ; ssegment
30023 7CF8           8ED8                           mov ds, ax
30024 7CFA           8B46         0A                mov ax, 10[bp] ; soffset
30025 7CFD           89C6                           mov si, ax
30026 7CFF           FC                             cld
30027 7D00           F3                             rep
30028 7D01           A4                              movsb
30029                       00007D02            memcpyb_end:
30030 7D02           5E                             pop si
30031 7D03           1F                             pop ds
30032 7D04           5F                             pop di
30033 7D05           07                             pop es
30034 7D06           59                             pop cx
30035 7D07           58                             pop ax
30036 7D08           5D                           pop bp
30037                                           ! 4227 endasm
30038                                           !BCC_ENDASM
30039                                           ! 4228 }
30040 7D09           C3                         ret
30041                                           ! 4229 static void memcpyw(dseg,doffset,sseg,soffset,count)
30042                                           ! 4230   Bit16u dseg;
30043                       00007D0A            _memcpyw:
30044                                           !BCC_EOS
30045                                           ! 4231   Bit16u doffset;
30046                                           !BCC_EOS
30047                                           ! 4232   Bit16u sseg;
30048                                           !BCC_EOS
30049                                           ! 4233   Bit16u soffset;
30050                                           !BCC_EOS
30051                                           ! 4234   Bit16u count;
30052                                           !BCC_EOS
30053                                           ! 4235 {
30054                                           ! 4236 #asm
30055                                           !BCC_ASM
30056                       0000000A            _memcpyw.count	set	$A
30057                       00000006            _memcpyw.sseg	set	6
30058                       00000008            _memcpyw.soffset	set	8
30059                       00000002            _memcpyw.dseg	set	2
30060                       00000004            _memcpyw.doffset	set	4
30061 7D0A           55                           push bp
30062 7D0B           89E5                         mov bp, sp
30063 7D0D           50                             push ax
30064 7D0E           51                             push cx
30065 7D0F           06                             push es
30066 7D10           57                             push di
30067 7D11           1E                             push ds
30068 7D12           56                             push si
30069 7D13           8B4E         0C                mov cx, 12[bp] ; count
30070 7D16           83F9                   00      cmp cx, #0x0000
30071 7D19           74           17                je memcpyw_end
30072 7D1B           8B46         04                mov ax, 4[bp] ; dsegment
30073 7D1E           8EC0                           mov es, ax
30074 7D20           8B46         06                mov ax, 6[bp] ; doffset
30075 7D23           89C7                           mov di, ax
30076 7D25           8B46         08                mov ax, 8[bp] ; ssegment
30077 7D28           8ED8                           mov ds, ax
30078 7D2A           8B46         0A                mov ax, 10[bp] ; soffset
30079 7D2D           89C6                           mov si, ax
30080 7D2F           FC                             cld
30081 7D30           F3                             rep
30082 7D31           A5                              movsw
30083                       00007D32            memcpyw_end:
30084 7D32           5E                             pop si
30085 7D33           1F                             pop ds
30086 7D34           5F                             pop di
30087 7D35           07                             pop es
30088 7D36           59                             pop cx
30089 7D37           58                             pop ax
30090 7D38           5D                           pop bp
30091                                           ! 4267 endasm
30092                                           !BCC_ENDASM
30093                                           ! 4268 }
30094 7D39           C3                         ret
30095                                           ! 4269 static Bit8u
30096                                           ! 4270 read_byte(seg, offset)
30097                                           ! 4271   Bit16u seg;
30098                       00007D3A            _read_byte:
30099                                           !BCC_EOS
30100                                           ! 4272   Bit16u offset;
30101                                           !BCC_EOS
30102                                           ! 4273 {
30103                                           ! 4274 #asm
30104                                           !BCC_ASM
30105                       00000002            _read_byte.seg	set	2
30106                       00000004            _read_byte.offset	set	4
30107 7D3A           55                           push bp
30108 7D3B           89E5                         mov bp, sp
30109 7D3D           53                             push bx
30110 7D3E           1E                             push ds
30111 7D3F           8B46         04                mov ax, 4[bp] ; segment
30112 7D42           8ED8                           mov ds, ax
30113 7D44           8B5E         06                mov bx, 6[bp] ; offset
30114 7D47           8A07                           mov al, [bx]
30115                                               ;; al = return value (byte)
30116 7D49           1F                             pop ds
30117 7D4A           5B                             pop bx
30118 7D4B           5D                           pop bp
30119                                           ! 4287 endasm
30120                                           !BCC_ENDASM
30121                                           ! 4288 }
30122 7D4C           C3                         ret
30123                                           ! 4289 static Bit16u
30124                                           ! 4290 read_word(seg, offset)
30125                                           ! 4291   Bit16u seg;
30126                       00007D4D            _read_word:
30127                                           !BCC_EOS
30128                                           ! 4292   Bit16u offset;
30129                                           !BCC_EOS
30130                                           ! 4293 {
30131                                           ! 4294 #asm
30132                                           !BCC_ASM
30133                       00000002            _read_word.seg	set	2
30134                       00000004            _read_word.offset	set	4
30135 7D4D           55                           push bp
30136 7D4E           89E5                         mov bp, sp
30137 7D50           53                             push bx
30138 7D51           1E                             push ds
30139 7D52           8B46         04                mov ax, 4[bp] ; segment
30140 7D55           8ED8                           mov ds, ax
30141 7D57           8B5E         06                mov bx, 6[bp] ; offset
30142 7D5A           8B07                           mov ax, [bx]
30143                                               ;; ax = return value (word)
30144 7D5C           1F                             pop ds
30145 7D5D           5B                             pop bx
30146 7D5E           5D                           pop bp
30147                                           ! 4307 endasm
30148                                           !BCC_ENDASM
30149                                           ! 4308 }
30150 7D5F           C3                         ret
30151                                           ! 4309 static void
30152                                           ! 4310 write_byte(seg, offset, data)
30153                                           ! 4311   Bit16u seg;
30154                       00007D60            _write_byte:
30155                                           !BCC_EOS
30156                                           ! 4312   Bit16u offset;
30157                                           !BCC_EOS
30158                                           ! 4313   Bit8u data;
30159                                           !BCC_EOS
30160                                           ! 4314 {
30161                                           ! 4315 #asm
30162                                           !BCC_ASM
30163                       00000002            _write_byte.seg	set	2
30164                       00000006            _write_byte.data	set	6
30165                       00000004            _write_byte.offset	set	4
30166 7D60           55                           push bp
30167 7D61           89E5                         mov bp, sp
30168 7D63           50                             push ax
30169 7D64           53                             push bx
30170 7D65           1E                             push ds
30171 7D66           8B46         04                mov ax, 4[bp] ; segment
30172 7D69           8ED8                           mov ds, ax
30173 7D6B           8B5E         06                mov bx, 6[bp] ; offset
30174 7D6E           8A46         08                mov al, 8[bp] ; data byte
30175 7D71           8807                           mov [bx], al ; write data byte
30176 7D73           1F                             pop ds
30177 7D74           5B                             pop bx
30178 7D75           58                             pop ax
30179 7D76           5D                           pop bp
30180                                           ! 4330 endasm
30181                                           !BCC_ENDASM
30182                                           ! 4331 }
30183 7D77           C3                         ret
30184                                           ! 4332 static void
30185                                           ! 4333 write_word(seg, offset, data)
30186                                           ! 4334   Bit16u seg;
30187                       00007D78            _write_word:
30188                                           !BCC_EOS
30189                                           ! 4335   Bit16u offset;
30190                                           !BCC_EOS
30191                                           ! 4336   Bit16u data;
30192                                           !BCC_EOS
30193                                           ! 4337 {
30194                                           ! 4338 #asm
30195                                           !BCC_ASM
30196                       00000002            _write_word.seg	set	2
30197                       00000006            _write_word.data	set	6
30198                       00000004            _write_word.offset	set	4
30199 7D78           55                           push bp
30200 7D79           89E5                         mov bp, sp
30201 7D7B           50                             push ax
30202 7D7C           53                             push bx
30203 7D7D           1E                             push ds
30204 7D7E           8B46         04                mov ax, 4[bp] ; segment
30205 7D81           8ED8                           mov ds, ax
30206 7D83           8B5E         06                mov bx, 6[bp] ; offset
30207 7D86           8B46         08                mov ax, 8[bp] ; data word
30208 7D89           8907                           mov [bx], ax ; write data word
30209 7D8B           1F                             pop ds
30210 7D8C           5B                             pop bx
30211 7D8D           58                             pop ax
30212 7D8E           5D                           pop bp
30213                                           ! 4353 endasm
30214                                           !BCC_ENDASM
30215                                           ! 4354 }
30216 7D8F           C3                         ret
30217                                           ! 4355  Bit8u
30218                                           ! 4356 inb(port)
30219                                           ! 4357   Bit16u port;
30220                                           export	_inb
30221                       00007D90            _inb:
30222                                           !BCC_EOS
30223                                           ! 4358 {
30224                                           ! 4359 #asm
30225                                           !BCC_ASM
30226                       00000002            _inb.port	set	2
30227 7D90           55                           push bp
30228 7D91           89E5                         mov bp, sp
30229 7D93           52                             push dx
30230 7D94           8B56         04                mov dx, 4[bp]
30231 7D97           EC                             in al, dx
30232 7D98           5A                             pop dx
30233 7D99           5D                           pop bp
30234                                           ! 4367 endasm
30235                                           !BCC_ENDASM
30236                                           ! 4368 }
30237 7D9A           C3                         ret
30238                                           ! 4369   Bit16u
30239                                           ! 4370 inw(port)
30240                                           ! 4371   Bit16u port;
30241                                           export	_inw
30242                       00007D9B            _inw:
30243                                           !BCC_EOS
30244                                           ! 4372 {
30245                                           ! 4373 #asm
30246                                           !BCC_ASM
30247                       00000002            _inw.port	set	2
30248 7D9B           55                           push bp
30249 7D9C           89E5                         mov bp, sp
30250 7D9E           52                             push dx
30251 7D9F           8B56         04                mov dx, 4[bp]
30252 7DA2           ED                             in ax, dx
30253 7DA3           5A                             pop dx
30254 7DA4           5D                           pop bp
30255                                           ! 4381 endasm
30256                                           !BCC_ENDASM
30257                                           ! 4382 }
30258 7DA5           C3                         ret
30259                                           ! 4383   void
30260                                           ! 4384 outb(port, val)
30261                                           ! 4385   Bit16u port;
30262                                           export	_outb
30263                       00007DA6            _outb:
30264                                           !BCC_EOS
30265                                           ! 4386   Bit8u val;
30266                                           !BCC_EOS
30267                                           ! 4387 {
30268                                           ! 4388 #asm
30269                                           !BCC_ASM
30270                       00000004            _outb.val	set	4
30271                       00000002            _outb.port	set	2
30272 7DA6           55                           push bp
30273 7DA7           89E5                         mov bp, sp
30274 7DA9           50                             push ax
30275 7DAA           52                             push dx
30276 7DAB           8B56         04                mov dx, 4[bp]
30277 7DAE           8A46         06                mov al, 6[bp]
30278 7DB1           EE                             out dx, al
30279 7DB2           5A                             pop dx
30280 7DB3           58                             pop ax
30281 7DB4           5D                           pop bp
30282                                           ! 4399 endasm
30283                                           !BCC_ENDASM
30284                                           ! 4400 }
30285 7DB5           C3                         ret
30286                                           ! 4401   void
30287                                           ! 4402 outw(port, val)
30288                                           ! 4403   Bit16u port;
30289                                           export	_outw
30290                       00007DB6            _outw:
30291                                           !BCC_EOS
30292                                           ! 4404   Bit16u val;
30293                                           !BCC_EOS
30294                                           ! 4405 {
30295                                           ! 4406 #asm
30296                                           !BCC_ASM
30297                       00000004            _outw.val	set	4
30298                       00000002            _outw.port	set	2
30299 7DB6           55                           push bp
30300 7DB7           89E5                         mov bp, sp
30301 7DB9           50                             push ax
30302 7DBA           52                             push dx
30303 7DBB           8B56         04                mov dx, 4[bp]
30304 7DBE           8B46         06                mov ax, 6[bp]
30305 7DC1           EF                             out dx, ax
30306 7DC2           5A                             pop dx
30307 7DC3           58                             pop ax
30308 7DC4           5D                           pop bp
30309                                           ! 4417 endasm
30310                                           !BCC_ENDASM
30311                                           ! 4418 }
30312 7DC5           C3                         ret
30313                                           ! 4419 Bit16u get_SS()
30314                                           ! 4420 {
30315                                           export	_get_SS
30316                       00007DC6            _get_SS:
30317                                           ! 4421 #asm
30318                                           !BCC_ASM
30319 7DC6           8CD0                         mov ax, ss
30320                                           ! 4423 endasm
30321                                           !BCC_ENDASM
30322                                           ! 4424 }
30323 7DC8           C3                         ret
30324                                           ! 4425 void unimplemented()
30325                                           ! 4426 {
30326                                           export	_unimplemented
30327                       00007DC9            _unimplemented:
30328                                           ! 4427  printf("--> Unimplemented\n");
30329 7DC9           55                         push	bp
30330 7DCA           89E5                       mov	bp,sp
30331                                           ! Debug: list * char = .2AF+0 (used reg = )
30332 7DCC           BB                   A53C  mov	bx,#.2AF
30333 7DCF           53                         push	bx
30334                                           ! Debug: func () void = printf+0 (used reg = )
30335 7DD0           E8         0012            call	_printf
30336 7DD3           89EC                       mov	sp,bp
30337                                           !BCC_EOS
30338                                           ! 4428 }
30339 7DD5           5D                         pop	bp
30340 7DD6           C3                         ret
30341                                           ! 4429 void unknown()
30342                                           ! Register BX used in function unimplemented
30343                                           ! 4430 {
30344                                           export	_unknown
30345                       00007DD7            _unknown:
30346                                           ! 4431  printf("--> Unknown int10\n");
30347 7DD7           55                         push	bp
30348 7DD8           89E5                       mov	bp,sp
30349                                           ! Debug: list * char = .2B0+0 (used reg = )
30350 7DDA           BB                   A529  mov	bx,#.2B0
30351 7DDD           53                         push	bx
30352                                           ! Debug: func () void = printf+0 (used reg = )
30353 7DDE           E8         0004            call	_printf
30354 7DE1           89EC                       mov	sp,bp
30355                                           !BCC_EOS
30356                                           ! 4432 }
30357 7DE3           5D                         pop	bp
30358 7DE4           C3                         ret
30359                                           ! 4433 void printf(s)
30360                                           ! Register BX used in function unknown
30361                                           ! 4434   Bit8u *s;
30362                                           export	_printf
30363                       00007DE5            _printf:
30364                                           !BCC_EOS
30365                                           ! 4435 {
30366                                           ! 4436   Bit8u c, format_char;
30367                                           !BCC_EOS
30368                                           ! 4437   Boolean in_format;
30369                                           !BCC_EOS
30370                                           ! 4438   unsigned format_width, i;
30371                                           !BCC_EOS
30372                                           ! 4439   Bit16u *arg_ptr;
30373                                           !BCC_EOS
30374                                           ! 4440   Bit16u arg_seg, arg, digit, nibble, shift_count;
30375                                           !BCC_EOS
30376                                           ! 4441   arg_ptr = &s;
30377 7DE5           55                         push	bp
30378 7DE6           89E5                       mov	bp,sp
30379 7DE8           83C4                   EC  add	sp,*-$14
30380                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30381 7DEB           8D5E         04            lea	bx,4[bp]
30382 7DEE           895E         F6            mov	-$A[bp],bx
30383                                           !BCC_EOS
30384                                           ! 4442   arg_seg = get_SS();
30385                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30386 7DF1           E8         FFD2            call	_get_SS
30387                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30388 7DF4           8946         F4            mov	-$C[bp],ax
30389                                           !BCC_EOS
30390                                           ! 4443   in_format = 0;
30391                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30392 7DF7           31C0                       xor	ax,ax
30393 7DF9           8946         FC            mov	-4[bp],ax
30394                                           !BCC_EOS
30395                                           ! 4444   format_width = 0;
30396                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30397 7DFC           31C0                       xor	ax,ax
30398 7DFE           8946         FA            mov	-6[bp],ax
30399                                           !BCC_EOS
30400                                           ! 4445   while (c = read_byte(0xc000, s)) {
30401 7E01           E9         0104            br 	.2B2
30402                       00007E04            .2B3:
30403                                           ! 4446     if ( c == '%' ) {
30404                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30405 7E04           8A46         FF            mov	al,-1[bp]
30406 7E07           3C                     25  cmp	al,*$25
30407 7E09           75           0E            jne 	.2B4
30408                       00007E0B            .2B5:
30409                                           ! 4447       in_format = 1;
30410                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30411 7E0B           B8                   0001  mov	ax,*1
30412 7E0E           8946         FC            mov	-4[bp],ax
30413                                           !BCC_EOS
30414                                           ! 4448       format_width = 0;
30415                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30416 7E11           31C0                       xor	ax,ax
30417 7E13           8946         FA            mov	-6[bp],ax
30418                                           !BCC_EOS
30419                                           ! 4449       }
30420                                           ! 4450     else if (in_format) {
30421 7E16           E9         00E8            br 	.2B6
30422                       00007E19            .2B4:
30423 7E19           8B46         FC            mov	ax,-4[bp]
30424 7E1C           85C0                       test	ax,ax
30425 7E1E         0F84         00CF            beq 	.2B7
30426                       00007E22            .2B8:
30427                                           ! 4451       if ( (c>='0') && (c<='9') ) {
30428                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30429 7E22           8A46         FF            mov	al,-1[bp]
30430 7E25           3C                     30  cmp	al,*$30
30431 7E27           72           28            jb  	.2B9
30432                       00007E29            .2BB:
30433                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30434 7E29           8A46         FF            mov	al,-1[bp]
30435 7E2C           3C                     39  cmp	al,*$39
30436 7E2E           77           21            ja  	.2B9
30437                       00007E30            .2BA:
30438                                           ! 4452         format_width = (format_width * 10) + (c - '0');
30439                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30440 7E30           8A46         FF            mov	al,-1[bp]
30441 7E33           30E4                       xor	ah,ah
30442 7E35           05                   FFD0  add	ax,*-$30
30443 7E38           50                         push	ax
30444                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30445 7E39           8B46         FA            mov	ax,-6[bp]
30446 7E3C           89C2                       mov	dx,ax
30447 7E3E           D1E0                       shl	ax,*1
30448 7E40           D1E0                       shl	ax,*1
30449 7E42           01D0                       add	ax,dx
30450 7E44           D1E0                       shl	ax,*1
30451                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30452 7E46           0346         EA            add	ax,-$16[bp]
30453 7E49           44                         inc	sp
30454 7E4A           44                         inc	sp
30455                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30456 7E4B           8946         FA            mov	-6[bp],ax
30457                                           !BCC_EOS
30458                                           ! 4453         }
30459                                           ! 4454       else if (c == 'x') {
30460 7E4E           E9         009E            br 	.2BC
30461                       00007E51            .2B9:
30462                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30463 7E51           8A46         FF            mov	al,-1[bp]
30464 7E54           3C                     78  cmp	al,*$78
30465 7E56         0F85         0095            bne 	.2BD
30466                       00007E5A            .2BE:
30467                                           ! 4455         arg_ptr++;
30468                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30469 7E5A           8B5E         F6            mov	bx,-$A[bp]
30470 7E5D           43                         inc	bx
30471 7E5E           43                         inc	bx
30472 7E5F           895E         F6            mov	-$A[bp],bx
30473                                           !BCC_EOS
30474                                           ! 4456         arg = read_word(arg_seg, arg_ptr);
30475                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30476 7E62           FF76         F6            push	-$A[bp]
30477                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30478 7E65           FF76         F4            push	-$C[bp]
30479                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30480 7E68           E8         FEE2            call	_read_word
30481 7E6B           83C4                   04  add	sp,*4
30482                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30483 7E6E           8946         F2            mov	-$E[bp],ax
30484                                           !BCC_EOS
30485                                           ! 4457         if (format_width == 0)
30486                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30487 7E71           8B46         FA            mov	ax,-6[bp]
30488 7E74           85C0                       test	ax,ax
30489 7E76           75           06            jne 	.2BF
30490                       00007E78            .2C0:
30491                                           ! 4458           format_width = 4;
30492                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30493 7E78           B8                   0004  mov	ax,*4
30494 7E7B           8946         FA            mov	-6[bp],ax
30495                                           !BCC_EOS
30496                                           ! 4459         i = 0;
30497                       00007E7E            .2BF:
30498                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30499 7E7E           31C0                       xor	ax,ax
30500 7E80           8946         F8            mov	-8[bp],ax
30501                                           !BCC_EOS
30502                                           ! 4460         digit = format_width - 1;
30503                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30504 7E83           8B46         FA            mov	ax,-6[bp]
30505                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30506 7E86           48                         dec	ax
30507 7E87           8946         F0            mov	-$10[bp],ax
30508                                           !BCC_EOS
30509                                           ! 4461         for (i=0; i<format_width; i++) {
30510                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30511 7E8A           31C0                       xor	ax,ax
30512 7E8C           8946         F8            mov	-8[bp],ax
30513                                           !BCC_EOS
30514                                           !BCC_EOS
30515 7E8F           EB           51            jmp .2C3
30516                       00007E91            .2C4:
30517                                           ! 4462           nibble = (arg >> (4 * digit)) & 0x000f;
30518                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30519                                           ! Debug: expression subtree swapping
30520 7E91           8B46         F0            mov	ax,-$10[bp]
30521 7E94           D1E0                       shl	ax,*1
30522 7E96           D1E0                       shl	ax,*1
30523                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30524 7E98           89C3                       mov	bx,ax
30525 7E9A           8B46         F2            mov	ax,-$E[bp]
30526 7E9D           89D9                       mov	cx,bx
30527 7E9F           D3E8                       shr	ax,cl
30528                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30529 7EA1           24                     0F  and	al,*$F
30530                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30531 7EA3           30E4                       xor	ah,ah
30532 7EA5           8946         EE            mov	-$12[bp],ax
30533                                           !BCC_EOS
30534                                           ! 4463           if (nibble <= 9)
30535                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30536 7EA8           8B46         EE            mov	ax,-$12[bp]
30537 7EAB           3D                   0009  cmp	ax,*9
30538 7EAE           77           13            ja  	.2C5
30539                       00007EB0            .2C6:
30540                                           ! 4464             outb(0x0500, nibble + '0');
30541                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30542 7EB0           8B46         EE            mov	ax,-$12[bp]
30543                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30544 7EB3           05                   0030  add	ax,*$30
30545 7EB6           50                         push	ax
30546                                           ! Debug: list int = const $500 (used reg = )
30547 7EB7           B8                   0500  mov	ax,#$500
30548 7EBA           50                         push	ax
30549                                           ! Debug: func () void = outb+0 (used reg = )
30550 7EBB           E8         FEE8            call	_outb
30551 7EBE           83C4                   04  add	sp,*4
30552                                           !BCC_EOS
30553                                           ! 4465           else
30554                                           ! 4466             outb(0x0500, (nibble - 10) + 'A');
30555 7EC1           EB           11            jmp .2C7
30556                       00007EC3            .2C5:
30557                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30558 7EC3           8B46         EE            mov	ax,-$12[bp]
30559                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30560                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30561 7EC6           05                   0037  add	ax,*$37
30562 7EC9           50                         push	ax
30563                                           ! Debug: list int = const $500 (used reg = )
30564 7ECA           B8                   0500  mov	ax,#$500
30565 7ECD           50                         push	ax
30566                                           ! Debug: func () void = outb+0 (used reg = )
30567 7ECE           E8         FED5            call	_outb
30568 7ED1           83C4                   04  add	sp,*4
30569                                           !BCC_EOS
30570                                           ! 4467           digit--;
30571                       00007ED4            .2C7:
30572                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30573 7ED4           8B46         F0            mov	ax,-$10[bp]
30574 7ED7           48                         dec	ax
30575 7ED8           8946         F0            mov	-$10[bp],ax
30576                                           !BCC_EOS
30577                                           ! 4468           }
30578                                           ! 4469         in_format = 0;
30579                       00007EDB            .2C2:
30580                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30581 7EDB           8B46         F8            mov	ax,-8[bp]
30582 7EDE           40                         inc	ax
30583 7EDF           8946         F8            mov	-8[bp],ax
30584                       00007EE2            .2C3:
30585                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30586 7EE2           8B46         F8            mov	ax,-8[bp]
30587 7EE5           3B46         FA            cmp	ax,-6[bp]
30588 7EE8           72           A7            jb 	.2C4
30589                       00007EEA            .2C8:
30590                       00007EEA            .2C1:
30591                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30592 7EEA           31C0                       xor	ax,ax
30593 7EEC           8946         FC            mov	-4[bp],ax
30594                                           !BCC_EOS
30595                                           ! 4470         }
30596                                           ! 4471       }
30597                       00007EEF            .2BD:
30598                       00007EEF            .2BC:
30599                                           ! 4472     else {
30600 7EEF           EB           10            jmp .2C9
30601                       00007EF1            .2B7:
30602                                           ! 4473       outb(0x0500, c);
30603                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30604 7EF1           8A46         FF            mov	al,-1[bp]
30605 7EF4           30E4                       xor	ah,ah
30606 7EF6           50                         push	ax
30607                                           ! Debug: list int = const $500 (used reg = )
30608 7EF7           B8                   0500  mov	ax,#$500
30609 7EFA           50                         push	ax
30610                                           ! Debug: func () void = outb+0 (used reg = )
30611 7EFB           E8         FEA8            call	_outb
30612 7EFE           83C4                   04  add	sp,*4
30613                                           !BCC_EOS
30614                                           ! 4474       }
30615                                           ! 4475     s ++;
30616                       00007F01            .2C9:
30617                       00007F01            .2B6:
30618                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30619 7F01           8B5E         04            mov	bx,4[bp]
30620 7F04           43                         inc	bx
30621 7F05           895E         04            mov	4[bp],bx
30622                                           !BCC_EOS
30623                                           ! 4476     }
30624                                           ! 4477 }
30625                       00007F08            .2B2:
30626                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30627 7F08           FF76         04            push	4[bp]
30628                                           ! Debug: list unsigned int = const $C000 (used reg = )
30629 7F0B           B8                   C000  mov	ax,#$C000
30630 7F0E           50                         push	ax
30631                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30632 7F0F           E8         FE28            call	_read_byte
30633 7F12           83C4                   04  add	sp,*4
30634                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30635 7F15           8846         FF            mov	-1[bp],al
30636 7F18           84C0                       test	al,al
30637 7F1A         0F85         FEE6            bne 	.2B3
30638                       00007F1E            .2CA:
30639                       00007F1E            .2B1:
30640 7F1E           89EC                       mov	sp,bp
30641 7F20           5D                         pop	bp
30642 7F21           C3                         ret
30643                                           ! 4478 #asm
30644                                           !BCC_ASM
30645                       00000002            _printf.s	set	2
30646                                             ; get LFB address from PCI
30647                                             ; in - ax: PCI device vendor
30648                                             ; out - ax: LFB address (high 16 bit)
30649                                             ;; NOTE - may be called in protected mode
30650                       00007F22            _pci_get_lfb_addr:
30651 7F22           53                           push bx
30652 7F23           51                           push cx
30653 7F24           52                           push dx
30654 7F25     66    50                           push eax
30655 7F27           89C3                           mov bx, ax
30656 7F29           31C9                           xor cx, cx
30657 7F2B           B2                     00      mov dl, #0x00
30658 7F2D           E8         003D                call pci_read_reg
30659 7F30           3D                   FFFF      cmp ax, #0xffff
30660 7F33           74           12                jz pci_get_lfb_addr_fail
30661                       00007F35             pci_get_lfb_addr_next_dev:
30662 7F35           B2                     00      mov dl, #0x00
30663 7F37           E8         0033                call pci_read_reg
30664 7F3A           39D8                           cmp ax, bx ;; check vendor
30665 7F3C           74           0D                jz pci_get_lfb_addr_found
30666 7F3E           83C1                   08      add cx, #0x8
30667 7F41           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
30668 7F45           72           EE                jb pci_get_lfb_addr_next_dev
30669                       00007F47             pci_get_lfb_addr_fail:
30670 7F47           31D2                           xor dx, dx ;; no LFB
30671 7F49           EB           1A                jmp pci_get_lfb_addr_return
30672                       00007F4B             pci_get_lfb_addr_found:
30673 7F4B           B2                     10      mov dl, #0x10 ;; I/O space #0
30674 7F4D           E8         001D                call pci_read_reg
30675 7F50           A9                   FFF1      test ax, #0xfff1
30676 7F53           74           0A                jz pci_get_lfb_addr_success
30677 7F55           B2                     14      mov dl, #0x14 ;; I/O space #1
30678 7F57           E8         0013                call pci_read_reg
30679 7F5A           A9                   FFF1      test ax, #0xfff1
30680 7F5D           75           E8                jnz pci_get_lfb_addr_fail
30681                       00007F5F             pci_get_lfb_addr_success:
30682 7F5F     66    C1E8                   10      shr eax, #16
30683 7F63           89C2                           mov dx, ax ;; LFB address
30684                       00007F65             pci_get_lfb_addr_return:
30685 7F65     66    58                           pop eax
30686 7F67           89D0                         mov ax, dx
30687 7F69           5A                           pop dx
30688 7F6A           59                           pop cx
30689 7F6B           5B                           pop bx
30690 7F6C           C3                           ret
30691                                             ; read PCI register
30692                                             ; in - cx: device/function
30693                                             ; in - dl: register
30694                                             ; out - eax: value
30695                       00007F6D            pci_read_reg:
30696 7F6D     66    B8               00800000    mov eax, #0x00800000
30697 7F73           89C8                         mov ax, cx
30698 7F75     66    C1E0                   08    shl eax, #8
30699 7F79           88D0                         mov al, dl
30700 7F7B           BA                   0CF8    mov dx, #0xcf8
30701 7F7E     66    EF                           out dx, eax
30702 7F80           80C2                   04    add dl, #4
30703 7F83     66    ED                           in eax, dx
30704 7F85           C3                           ret
30705                                           ! 4538 endasm
30706                                           !BCC_ENDASM
30707                                           ! 4539 static ModeInfoListItem mode_info_list[]=
30708                                           ! Register BX used in function printf
30709                                           ! 4540 {
30710                                           
30711                       00007F86            _mode_info_list:
30712                                           ! 4541 { 0x0100,
30713 7F86                      0100            .word	$100
30714                                           ! 4542 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30715 7F88                      009B            .word	$9B
30716                                           ! 4543                           0x01 | 0x02 | 0x04,
30717 7F8A                        07            .byte	7
30718                                           ! 4544                           0,
30719 7F8B                        00            .byte	0
30720                                           ! 4545                           64,
30721 7F8C                      0040            .word	$40
30722                                           ! 4546                    64,
30723 7F8E                      0040            .word	$40
30724                                           ! 4547                        0xA000,
30725 7F90                      A000            .word	$A000
30726                                           ! 4548                        0x0000,
30727 7F92                      0000            .word	0
30728                                           ! 4549                       0,
30729 7F94                      0000            .word	0
30730 7F96                      0000            .word	0
30731                                           ! 4550                             640,
30732 7F98                      0280            .word	$280
30733                                           ! 4551                        640,
30734 7F9A                      0280            .word	$280
30735                                           ! 4552                        400,
30736 7F9C                      0190            .word	$190
30737                                           ! 4553                      8,
30738 7F9E                        08            .byte	8
30739                                           ! 4554                      16,
30740 7F9F                        10            .byte	$10
30741                                           ! 4555                           1,
30742 7FA0                        01            .byte	1
30743                                           ! 4556                         8,
30744 7FA1                        08            .byte	8
30745                                           ! 4557                          4,
30746 7FA2                        04            .byte	4
30747                                           ! 4558                        0x04,
30748 7FA3                        04            .byte	4
30749                                           ! 4559                     0,
30750 7FA4                        00            .byte	0
30751                                           ! 4560                               64,
30752 7FA5                        40            .byte	$40
30753                                           ! 4561                          0,
30754 7FA6                        00            .byte	0
30755                                           ! 4562                        0,
30756 7FA7                        00            .byte	0
30757                                           ! 4563                             0,
30758 7FA8                        00            .byte	0
30759                                           ! 4564                          0,
30760 7FA9                        00            .byte	0
30761                                           ! 4565                               0,
30762 7FAA                        00            .byte	0
30763                                           ! 4566                         0,
30764 7FAB                        00            .byte	0
30765                                           ! 4567                              0,
30766 7FAC                        00            .byte	0
30767                                           ! 4568                         0,
30768 7FAD                        00            .byte	0
30769                                           ! 4569                              0,
30770 7FAE                        00            .byte	0
30771                                           ! 4570                                0,
30772 7FAF                        00            .byte	0
30773                                           ! 4571                        0xE0000000,
30774 7FB0                      0000            .word	0
30775 7FB2                      E000            .word	$E000
30776                                           ! 4572                               0,
30777 7FB4                      0000            .word	0
30778 7FB6                      0000            .word	0
30779                                           ! 4573                             0,
30780 7FB8                      0000            .word	0
30781                                           ! 4574                                640,
30782 7FBA                      0280            .word	$280
30783                                           ! 4575                   
30784                                           ! 4575           0,
30785 7FBC                        00            .byte	0
30786                                           ! 4576                             0,
30787 7FBD                        00            .byte	0
30788                                           ! 4577                           0,
30789 7FBE                        00            .byte	0
30790                                           ! 4578                                0,
30791 7FBF                        00            .byte	0
30792                                           ! 4579                             0,
30793 7FC0                        00            .byte	0
30794                                           ! 4580                                  0,
30795 7FC1                        00            .byte	0
30796                                           ! 4581                            0,
30797 7FC2                        00            .byte	0
30798                                           ! 4582                                 0,
30799 7FC3                        00            .byte	0
30800                                           ! 4583                            0,
30801 7FC4                        00            .byte	0
30802                                           ! 4584                                 0,
30803 7FC5                        00            .byte	0
30804                                           ! 4585                          0,
30805 7FC6                      0000            .word	0
30806 7FC8                      0000            .word	0
30807                                           ! 4586 } },
30808                                           ! 4587 { 0x0101,
30809 7FCA                      0101            .word	$101
30810                                           ! 4588 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30811 7FCC                      009B            .word	$9B
30812                                           ! 4589                           0x01 | 0x02 | 0x04,
30813 7FCE                        07            .byte	7
30814                                           ! 4590                           0,
30815 7FCF                        00            .byte	0
30816                                           ! 4591                           64,
30817 7FD0                      0040            .word	$40
30818                                           ! 4592                    64,
30819 7FD2                      0040            .word	$40
30820                                           ! 4593                        0xA000,
30821 7FD4                      A000            .word	$A000
30822                                           ! 4594                        0x0000,
30823 7FD6                      0000            .word	0
30824                                           ! 4595                       0,
30825 7FD8                      0000            .word	0
30826 7FDA                      0000            .word	0
30827                                           ! 4596                             640,
30828 7FDC                      0280            .word	$280
30829                                           ! 4597                        640,
30830 7FDE                      0280            .word	$280
30831                                           ! 4598                        480,
30832 7FE0                      01E0            .word	$1E0
30833                                           ! 4599                      8,
30834 7FE2                        08            .byte	8
30835                                           ! 4600                      16,
30836 7FE3                        10            .byte	$10
30837                                           ! 4601                           1,
30838 7FE4                        01            .byte	1
30839                                           ! 4602                         8,
30840 7FE5                        08            .byte	8
30841                                           ! 4603                          5,
30842 7FE6                        05            .byte	5
30843                                           ! 4604                        0x04,
30844 7FE7                        04            .byte	4
30845                                           ! 4605                     0,
30846 7FE8                        00            .byte	0
30847                                           ! 4606                               53,
30848 7FE9                        35            .byte	$35
30849                                           ! 4607                          0,
30850 7FEA                        00            .byte	0
30851                                           ! 4608                        0,
30852 7FEB                        00            .byte	0
30853                                           ! 4609                             0,
30854 7FEC                        00            .byte	0
30855                                           ! 4610                          0,
30856 7FED                        00            .byte	0
30857                                           ! 4611                               0,
30858 7FEE                        00            .byte	0
30859                                           ! 4612                         0,
30860 7FEF                        00            .byte	0
30861                                           ! 4613                              0,
30862 7FF0                        00            .byte	0
30863                                           ! 4614                         0,
30864 7FF1                        00            .byte	0
30865                                           ! 4615                              0,
30866 7FF2                        00            .byte	0
30867                                           ! 4616                                0,
30868 7FF3                        00            .byte	0
30869                                           ! 4617                        0xE0000000,
30870 7FF4                      0000            .word	0
30871 7FF6                      E000            .word	$E000
30872                                           ! 4618                               0,
30873 7FF8                      0000            .word	0
30874 7FFA                      0000            .word	0
30875                                           ! 4619                             0,
30876 7FFC                      0000            .word	0
30877                                           ! 4620                                640,
30878 7FFE                      0280            .word	$280
30879                                           ! 4621                             0,
30880 8000                        00            .byte	0
30881                                           ! 4622                             0,
30882 8001                        00            .byte	0
30883                                           ! 4623                           0,
30884 8002                        00            .byte	0
30885                                           ! 4624                                0,
30886 8003                        00            .byte	0
30887                                           ! 4625                             0,
30888 8004                        00            .byte	0
30889                                           ! 4626                                  0,
30890 8005                        00            .byte	0
30891                                           ! 4627                            0,
30892 8006                        00            .byte	0
30893                                           ! 4628                                 0,
30894 8007                        00            .byte	0
30895                                           ! 4629                            0,
30896 8008                        00            .byte	0
30897                                           ! 4630                                 0,
30898 8009                        00            .byte	0
30899                                           ! 4631                          0,
30900 800A                      0000            .word	0
30901 800C                      0000            .word	0
30902                                           ! 4632 } },
30903                                           ! 4633 { 0x0102,
30904 800E                      0102            .word	$102
30905                                           ! 4634 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30906 8010                      001F            .word	$1F
30907                                           ! 4635                           0x01 | 0x02 | 0x04,
30908 8012                        07            .byte	7
30909                                           ! 4636                           0,
30910 8013                        00            .byte	0
30911                                           ! 4637                           64,
30912 8014                      0040            .word	$40
30913                                           ! 4638                    64,
30914 8016                      0040            .word	$40
30915                                           ! 4639                        0xA000,
30916 8018                      A000            .word	$A000
30917                                           ! 4640                        0x0000,
30918 801A                      0000            .word	0
30919                                           ! 4641                       0,
30920 801C                      0000            .word	0
30921 801E                      0000            .word	0
30922                                           ! 4642                             100,
30923 8020                      0064            .word	$64
30924                                           ! 4643                        800,
30925 8022                      0320            .word	$320
30926                                           ! 4644             
30927                                           ! 4644            600,
30928 8024                      0258            .word	$258
30929                                           ! 4645                      8,
30930 8026                        08            .byte	8
30931                                           ! 4646                      16,
30932 8027                        10            .byte	$10
30933                                           ! 4647                           4,
30934 8028                        04            .byte	4
30935                                           ! 4648                         4,
30936 8029                        04            .byte	4
30937                                           ! 4649                          1,
30938 802A                        01            .byte	1
30939                                           ! 4650                        0x03,
30940 802B                        03            .byte	3
30941                                           ! 4651                     0,
30942 802C                        00            .byte	0
30943                                           ! 4652                               68,
30944 802D                        44            .byte	$44
30945                                           ! 4653                          0,
30946 802E                        00            .byte	0
30947                                           ! 4654                        0,
30948 802F                        00            .byte	0
30949                                           ! 4655                             0,
30950 8030                        00            .byte	0
30951                                           ! 4656                          0,
30952 8031                        00            .byte	0
30953                                           ! 4657                               0,
30954 8032                        00            .byte	0
30955                                           ! 4658                         0,
30956 8033                        00            .byte	0
30957                                           ! 4659                              0,
30958 8034                        00            .byte	0
30959                                           ! 4660                         0,
30960 8035                        00            .byte	0
30961                                           ! 4661                              0,
30962 8036                        00            .byte	0
30963                                           ! 4662                                0,
30964 8037                        00            .byte	0
30965                                           ! 4663                        0,
30966 8038                      0000            .word	0
30967 803A                      0000            .word	0
30968                                           ! 4664                               0,
30969 803C                      0000            .word	0
30970 803E                      0000            .word	0
30971                                           ! 4665                             0,
30972 8040                      0000            .word	0
30973                                           ! 4666                                100,
30974 8042                      0064            .word	$64
30975                                           ! 4667                             0,
30976 8044                        00            .byte	0
30977                                           ! 4668                             0,
30978 8045                        00            .byte	0
30979                                           ! 4669                           0,
30980 8046                        00            .byte	0
30981                                           ! 4670                                0,
30982 8047                        00            .byte	0
30983                                           ! 4671                             0,
30984 8048                        00            .byte	0
30985                                           ! 4672                                  0,
30986 8049                        00            .byte	0
30987                                           ! 4673                            0,
30988 804A                        00            .byte	0
30989                                           ! 4674                                 0,
30990 804B                        00            .byte	0
30991                                           ! 4675                            0,
30992 804C                        00            .byte	0
30993                                           ! 4676                                 0,
30994 804D                        00            .byte	0
30995                                           ! 4677                          0,
30996 804E                      0000            .word	0
30997 8050                      0000            .word	0
30998                                           ! 4678 } },
30999                                           ! 4679 { 0x0103,
31000 8052                      0103            .word	$103
31001                                           ! 4680 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31002 8054                      009B            .word	$9B
31003                                           ! 4681                           0x01 | 0x02 | 0x04,
31004 8056                        07            .byte	7
31005                                           ! 4682                           0,
31006 8057                        00            .byte	0
31007                                           ! 4683                           64,
31008 8058                      0040            .word	$40
31009                                           ! 4684                    64,
31010 805A                      0040            .word	$40
31011                                           ! 4685                        0xA000,
31012 805C                      A000            .word	$A000
31013                                           ! 4686                        0x0000,
31014 805E                      0000            .word	0
31015                                           ! 4687                       0,
31016 8060                      0000            .word	0
31017 8062                      0000            .word	0
31018                                           ! 4688                             800,
31019 8064                      0320            .word	$320
31020                                           ! 4689                        800,
31021 8066                      0320            .word	$320
31022                                           ! 4690                        600,
31023 8068                      0258            .word	$258
31024                                           ! 4691                      8,
31025 806A                        08            .byte	8
31026                                           ! 4692                      16,
31027 806B                        10            .byte	$10
31028                                           ! 4693                           1,
31029 806C                        01            .byte	1
31030                                           ! 4694                         8,
31031 806D                        08            .byte	8
31032                                           ! 4695                          8,
31033 806E                        08            .byte	8
31034                                           ! 4696                        0x04,
31035 806F                        04            .byte	4
31036                                           ! 4697                     0,
31037 8070                        00            .byte	0
31038                                           ! 4698                               33,
31039 8071                        21            .byte	$21
31040                                           ! 4699                          0,
31041 8072                        00            .byte	0
31042                                           ! 4700                        0,
31043 8073                        00            .byte	0
31044                                           ! 4701                             0,
31045 8074                        00            .byte	0
31046                                           ! 4702                          0,
31047 8075                        00            .byte	0
31048                                           ! 4703                               0,
31049 8076                        00            .byte	0
31050                                           ! 4704                         0,
31051 8077                        00            .byte	0
31052                                           ! 4705                              0,
31053 8078                        00            .byte	0
31054                                           ! 4706                         0,
31055 8079                        00            .byte	0
31056                                           ! 4707                              0,
31057 807A                        00            .byte	0
31058                                           ! 4708                                0,
31059 807B                        00            .byte	0
31060                                           ! 4709                        0xE0000000,
31061 807C                      0000            .word	0
31062 807E                      E000            .word	$E000
31063                                           ! 4710                               0,
31064 8080                      0000            .word	0
31065 8082                      0000            .word	0
31066                                           ! 4711                             0,
31067 8084                      0000            .word	0
31068                                           ! 4712                                800,
31069 8086                      0320            .word	$320
31070                                           ! 4713                       
31071                                           ! 4713       0,
31072 8088                        00            .byte	0
31073                                           ! 4714                             0,
31074 8089                        00            .byte	0
31075                                           ! 4715                           0,
31076 808A                        00            .byte	0
31077                                           ! 4716                                0,
31078 808B                        00            .byte	0
31079                                           ! 4717                             0,
31080 808C                        00            .byte	0
31081                                           ! 4718                                  0,
31082 808D                        00            .byte	0
31083                                           ! 4719                            0,
31084 808E                        00            .byte	0
31085                                           ! 4720                                 0,
31086 808F                        00            .byte	0
31087                                           ! 4721                            0,
31088 8090                        00            .byte	0
31089                                           ! 4722                                 0,
31090 8091                        00            .byte	0
31091                                           ! 4723                          0,
31092 8092                      0000            .word	0
31093 8094                      0000            .word	0
31094                                           ! 4724 } },
31095                                           ! 4725 { 0x0104,
31096 8096                      0104            .word	$104
31097                                           ! 4726 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31098 8098                      001F            .word	$1F
31099                                           ! 4727                           0x01 | 0x02 | 0x04,
31100 809A                        07            .byte	7
31101                                           ! 4728                           0,
31102 809B                        00            .byte	0
31103                                           ! 4729                           64,
31104 809C                      0040            .word	$40
31105                                           ! 4730                    64,
31106 809E                      0040            .word	$40
31107                                           ! 4731                        0xA000,
31108 80A0                      A000            .word	$A000
31109                                           ! 4732                        0x0000,
31110 80A2                      0000            .word	0
31111                                           ! 4733                       0,
31112 80A4                      0000            .word	0
31113 80A6                      0000            .word	0
31114                                           ! 4734                             128,
31115 80A8                      0080            .word	$80
31116                                           ! 4735                        1024,
31117 80AA                      0400            .word	$400
31118                                           ! 4736                        768,
31119 80AC                      0300            .word	$300
31120                                           ! 4737                      8,
31121 80AE                        08            .byte	8
31122                                           ! 4738                      16,
31123 80AF                        10            .byte	$10
31124                                           ! 4739                           4,
31125 80B0                        04            .byte	4
31126                                           ! 4740                         4,
31127 80B1                        04            .byte	4
31128                                           ! 4741                          2,
31129 80B2                        02            .byte	2
31130                                           ! 4742                        0x03,
31131 80B3                        03            .byte	3
31132                                           ! 4743                     0,
31133 80B4                        00            .byte	0
31134                                           ! 4744                               41,
31135 80B5                        29            .byte	$29
31136                                           ! 4745                          0,
31137 80B6                        00            .byte	0
31138                                           ! 4746                        0,
31139 80B7                        00            .byte	0
31140                                           ! 4747                             0,
31141 80B8                        00            .byte	0
31142                                           ! 4748                          0,
31143 80B9                        00            .byte	0
31144                                           ! 4749                               0,
31145 80BA                        00            .byte	0
31146                                           ! 4750                         0,
31147 80BB                        00            .byte	0
31148                                           ! 4751                              0,
31149 80BC                        00            .byte	0
31150                                           ! 4752                         0,
31151 80BD                        00            .byte	0
31152                                           ! 4753                              0,
31153 80BE                        00            .byte	0
31154                                           ! 4754                                0,
31155 80BF                        00            .byte	0
31156                                           ! 4755                        0,
31157 80C0                      0000            .word	0
31158 80C2                      0000            .word	0
31159                                           ! 4756                               0,
31160 80C4                      0000            .word	0
31161 80C6                      0000            .word	0
31162                                           ! 4757                             0,
31163 80C8                      0000            .word	0
31164                                           ! 4758                                128,
31165 80CA                      0080            .word	$80
31166                                           ! 4759                             0,
31167 80CC                        00            .byte	0
31168                                           ! 4760                             0,
31169 80CD                        00            .byte	0
31170                                           ! 4761                           0,
31171 80CE                        00            .byte	0
31172                                           ! 4762                                0,
31173 80CF                        00            .byte	0
31174                                           ! 4763                             0,
31175 80D0                        00            .byte	0
31176                                           ! 4764                                  0,
31177 80D1                        00            .byte	0
31178                                           ! 4765                            0,
31179 80D2                        00            .byte	0
31180                                           ! 4766                                 0,
31181 80D3                        00            .byte	0
31182                                           ! 4767                            0,
31183 80D4                        00            .byte	0
31184                                           ! 4768                                 0,
31185 80D5                        00            .byte	0
31186                                           ! 4769                          0,
31187 80D6                      0000            .word	0
31188 80D8                      0000            .word	0
31189                                           ! 4770 } },
31190                                           ! 4771 { 0x0105,
31191 80DA                      0105            .word	$105
31192                                           ! 4772 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31193 80DC                      009B            .word	$9B
31194                                           ! 4773                           0x01 | 0x02 | 0x04,
31195 80DE                        07            .byte	7
31196                                           ! 4774                           0,
31197 80DF                        00            .byte	0
31198                                           ! 4775                           64,
31199 80E0                      0040            .word	$40
31200                                           ! 4776                    64,
31201 80E2                      0040            .word	$40
31202                                           ! 4777                        0xA000,
31203 80E4                      A000            .word	$A000
31204                                           ! 4778                        0x0000,
31205 80E6                      0000            .word	0
31206                                           ! 4779                       0,
31207 80E8                      0000            .word	0
31208 80EA                      0000            .word	0
31209                                           ! 4780                             1024,
31210 80EC                      0400            .word	$400
31211                                           ! 4781                        1024,
31212 80EE                      0400            .word	$400
31213                                           ! 4782                       
31214                                           ! 4782  768,
31215 80F0                      0300            .word	$300
31216                                           ! 4783                      8,
31217 80F2                        08            .byte	8
31218                                           ! 4784                      16,
31219 80F3                        10            .byte	$10
31220                                           ! 4785                           1,
31221 80F4                        01            .byte	1
31222                                           ! 4786                         8,
31223 80F5                        08            .byte	8
31224                                           ! 4787                          12,
31225 80F6                        0C            .byte	$C
31226                                           ! 4788                        0x04,
31227 80F7                        04            .byte	4
31228                                           ! 4789                     0,
31229 80F8                        00            .byte	0
31230                                           ! 4790                               20,
31231 80F9                        14            .byte	$14
31232                                           ! 4791                          0,
31233 80FA                        00            .byte	0
31234                                           ! 4792                        0,
31235 80FB                        00            .byte	0
31236                                           ! 4793                             0,
31237 80FC                        00            .byte	0
31238                                           ! 4794                          0,
31239 80FD                        00            .byte	0
31240                                           ! 4795                               0,
31241 80FE                        00            .byte	0
31242                                           ! 4796                         0,
31243 80FF                        00            .byte	0
31244                                           ! 4797                              0,
31245 8100                        00            .byte	0
31246                                           ! 4798                         0,
31247 8101                        00            .byte	0
31248                                           ! 4799                              0,
31249 8102                        00            .byte	0
31250                                           ! 4800                                0,
31251 8103                        00            .byte	0
31252                                           ! 4801                        0xE0000000,
31253 8104                      0000            .word	0
31254 8106                      E000            .word	$E000
31255                                           ! 4802                               0,
31256 8108                      0000            .word	0
31257 810A                      0000            .word	0
31258                                           ! 4803                             0,
31259 810C                      0000            .word	0
31260                                           ! 4804                                1024,
31261 810E                      0400            .word	$400
31262                                           ! 4805                             0,
31263 8110                        00            .byte	0
31264                                           ! 4806                             0,
31265 8111                        00            .byte	0
31266                                           ! 4807                           0,
31267 8112                        00            .byte	0
31268                                           ! 4808                                0,
31269 8113                        00            .byte	0
31270                                           ! 4809                             0,
31271 8114                        00            .byte	0
31272                                           ! 4810                                  0,
31273 8115                        00            .byte	0
31274                                           ! 4811                            0,
31275 8116                        00            .byte	0
31276                                           ! 4812                                 0,
31277 8117                        00            .byte	0
31278                                           ! 4813                            0,
31279 8118                        00            .byte	0
31280                                           ! 4814                                 0,
31281 8119                        00            .byte	0
31282                                           ! 4815                          0,
31283 811A                      0000            .word	0
31284 811C                      0000            .word	0
31285                                           ! 4816 } },
31286                                           ! 4817 { 0x0106,
31287 811E                      0106            .word	$106
31288                                           ! 4818 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31289 8120                      001F            .word	$1F
31290                                           ! 4819                           0x01 | 0x02 | 0x04,
31291 8122                        07            .byte	7
31292                                           ! 4820                           0,
31293 8123                        00            .byte	0
31294                                           ! 4821                           64,
31295 8124                      0040            .word	$40
31296                                           ! 4822                    64,
31297 8126                      0040            .word	$40
31298                                           ! 4823                        0xA000,
31299 8128                      A000            .word	$A000
31300                                           ! 4824                        0x0000,
31301 812A                      0000            .word	0
31302                                           ! 4825                       0,
31303 812C                      0000            .word	0
31304 812E                      0000            .word	0
31305                                           ! 4826                             160,
31306 8130                      00A0            .word	$A0
31307                                           ! 4827                        1280,
31308 8132                      0500            .word	$500
31309                                           ! 4828                        1024,
31310 8134                      0400            .word	$400
31311                                           ! 4829                      8,
31312 8136                        08            .byte	8
31313                                           ! 4830                      16,
31314 8137                        10            .byte	$10
31315                                           ! 4831                           4,
31316 8138                        04            .byte	4
31317                                           ! 4832                         4,
31318 8139                        04            .byte	4
31319                                           ! 4833                          3,
31320 813A                        03            .byte	3
31321                                           ! 4834                        0x03,
31322 813B                        03            .byte	3
31323                                           ! 4835                     0,
31324 813C                        00            .byte	0
31325                                           ! 4836                               24,
31326 813D                        18            .byte	$18
31327                                           ! 4837                          0,
31328 813E                        00            .byte	0
31329                                           ! 4838                        0,
31330 813F                        00            .byte	0
31331                                           ! 4839                             0,
31332 8140                        00            .byte	0
31333                                           ! 4840                          0,
31334 8141                        00            .byte	0
31335                                           ! 4841                               0,
31336 8142                        00            .byte	0
31337                                           ! 4842                         0,
31338 8143                        00            .byte	0
31339                                           ! 4843                              0,
31340 8144                        00            .byte	0
31341                                           ! 4844                         0,
31342 8145                        00            .byte	0
31343                                           ! 4845                              0,
31344 8146                        00            .byte	0
31345                                           ! 4846                                0,
31346 8147                        00            .byte	0
31347                                           ! 4847                        0,
31348 8148                      0000            .word	0
31349 814A                      0000            .word	0
31350                                           ! 4848                               0,
31351 814C                      0000            .word	0
31352 814E                      0000            .word	0
31353                                           ! 4849                             0,
31354 8150                      0000            .word	0
31355                                           ! 4850                                160,
31356 8152                      00A0            .word	$A0
31357                                           ! 4851                             
31358                                           ! 4851 0,
31359 8154                        00            .byte	0
31360                                           ! 4852                             0,
31361 8155                        00            .byte	0
31362                                           ! 4853                           0,
31363 8156                        00            .byte	0
31364                                           ! 4854                                0,
31365 8157                        00            .byte	0
31366                                           ! 4855                             0,
31367 8158                        00            .byte	0
31368                                           ! 4856                                  0,
31369 8159                        00            .byte	0
31370                                           ! 4857                            0,
31371 815A                        00            .byte	0
31372                                           ! 4858                                 0,
31373 815B                        00            .byte	0
31374                                           ! 4859                            0,
31375 815C                        00            .byte	0
31376                                           ! 4860                                 0,
31377 815D                        00            .byte	0
31378                                           ! 4861                          0,
31379 815E                      0000            .word	0
31380 8160                      0000            .word	0
31381                                           ! 4862 } },
31382                                           ! 4863 { 0x0107,
31383 8162                      0107            .word	$107
31384                                           ! 4864 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31385 8164                      009B            .word	$9B
31386                                           ! 4865                           0x01 | 0x02 | 0x04,
31387 8166                        07            .byte	7
31388                                           ! 4866                           0,
31389 8167                        00            .byte	0
31390                                           ! 4867                           64,
31391 8168                      0040            .word	$40
31392                                           ! 4868                    64,
31393 816A                      0040            .word	$40
31394                                           ! 4869                        0xA000,
31395 816C                      A000            .word	$A000
31396                                           ! 4870                        0x0000,
31397 816E                      0000            .word	0
31398                                           ! 4871                       0,
31399 8170                      0000            .word	0
31400 8172                      0000            .word	0
31401                                           ! 4872                             1280,
31402 8174                      0500            .word	$500
31403                                           ! 4873                        1280,
31404 8176                      0500            .word	$500
31405                                           ! 4874                        1024,
31406 8178                      0400            .word	$400
31407                                           ! 4875                      8,
31408 817A                        08            .byte	8
31409                                           ! 4876                      16,
31410 817B                        10            .byte	$10
31411                                           ! 4877                           1,
31412 817C                        01            .byte	1
31413                                           ! 4878                         8,
31414 817D                        08            .byte	8
31415                                           ! 4879                          20,
31416 817E                        14            .byte	$14
31417                                           ! 4880                        0x04,
31418 817F                        04            .byte	4
31419                                           ! 4881                     0,
31420 8180                        00            .byte	0
31421                                           ! 4882                               11,
31422 8181                        0B            .byte	$B
31423                                           ! 4883                          0,
31424 8182                        00            .byte	0
31425                                           ! 4884                        0,
31426 8183                        00            .byte	0
31427                                           ! 4885                             0,
31428 8184                        00            .byte	0
31429                                           ! 4886                          0,
31430 8185                        00            .byte	0
31431                                           ! 4887                               0,
31432 8186                        00            .byte	0
31433                                           ! 4888                         0,
31434 8187                        00            .byte	0
31435                                           ! 4889                              0,
31436 8188                        00            .byte	0
31437                                           ! 4890                         0,
31438 8189                        00            .byte	0
31439                                           ! 4891                              0,
31440 818A                        00            .byte	0
31441                                           ! 4892                                0,
31442 818B                        00            .byte	0
31443                                           ! 4893                        0xE0000000,
31444 818C                      0000            .word	0
31445 818E                      E000            .word	$E000
31446                                           ! 4894                               0,
31447 8190                      0000            .word	0
31448 8192                      0000            .word	0
31449                                           ! 4895                             0,
31450 8194                      0000            .word	0
31451                                           ! 4896                                1280,
31452 8196                      0500            .word	$500
31453                                           ! 4897                             0,
31454 8198                        00            .byte	0
31455                                           ! 4898                             0,
31456 8199                        00            .byte	0
31457                                           ! 4899                           0,
31458 819A                        00            .byte	0
31459                                           ! 4900                                0,
31460 819B                        00            .byte	0
31461                                           ! 4901                             0,
31462 819C                        00            .byte	0
31463                                           ! 4902                                  0,
31464 819D                        00            .byte	0
31465                                           ! 4903                            0,
31466 819E                        00            .byte	0
31467                                           ! 4904                                 0,
31468 819F                        00            .byte	0
31469                                           ! 4905                            0,
31470 81A0                        00            .byte	0
31471                                           ! 4906                                 0,
31472 81A1                        00            .byte	0
31473                                           ! 4907                          0,
31474 81A2                      0000            .word	0
31475 81A4                      0000            .word	0
31476                                           ! 4908 } },
31477                                           ! 4909 { 0x010d,
31478 81A6                      010D            .word	$10D
31479                                           ! 4910 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31480 81A8                      009B            .word	$9B
31481                                           ! 4911                           0x01 | 0x02 | 0x04,
31482 81AA                        07            .byte	7
31483                                           ! 4912                           0,
31484 81AB                        00            .byte	0
31485                                           ! 4913                           64,
31486 81AC                      0040            .word	$40
31487                                           ! 4914                    64,
31488 81AE                      0040            .word	$40
31489                                           ! 4915                        0xA000,
31490 81B0                      A000            .word	$A000
31491                                           ! 4916                        0x0000,
31492 81B2                      0000            .word	0
31493                                           ! 4917                       0,
31494 81B4                      0000            .word	0
31495 81B6                      0000            .word	0
31496                                           ! 4918                             640,
31497 81B8                      0280            .word	$280
31498                                           ! 4919                        320,
31499 81BA                      0140            .word	$140
31500                                           ! 4920                  
31501                                           ! 4920       200,
31502 81BC                      00C8            .word	$C8
31503                                           ! 4921                      8,
31504 81BE                        08            .byte	8
31505                                           ! 4922                      16,
31506 81BF                        10            .byte	$10
31507                                           ! 4923                           1,
31508 81C0                        01            .byte	1
31509                                           ! 4924                         15,
31510 81C1                        0F            .byte	$F
31511                                           ! 4925                          2,
31512 81C2                        02            .byte	2
31513                                           ! 4926                        0x06,
31514 81C3                        06            .byte	6
31515                                           ! 4927                     0,
31516 81C4                        00            .byte	0
31517                                           ! 4928                               130,
31518 81C5                        82            .byte	$82
31519                                           ! 4929                          0,
31520 81C6                        00            .byte	0
31521                                           ! 4930                        5,
31522 81C7                        05            .byte	5
31523                                           ! 4931                             10,
31524 81C8                        0A            .byte	$A
31525                                           ! 4932                          5,
31526 81C9                        05            .byte	5
31527                                           ! 4933                               5,
31528 81CA                        05            .byte	5
31529                                           ! 4934                         5,
31530 81CB                        05            .byte	5
31531                                           ! 4935                              0,
31532 81CC                        00            .byte	0
31533                                           ! 4936                         1,
31534 81CD                        01            .byte	1
31535                                           ! 4937                              15,
31536 81CE                        0F            .byte	$F
31537                                           ! 4938                                0,
31538 81CF                        00            .byte	0
31539                                           ! 4939                        0xE0000000,
31540 81D0                      0000            .word	0
31541 81D2                      E000            .word	$E000
31542                                           ! 4940                               0,
31543 81D4                      0000            .word	0
31544 81D6                      0000            .word	0
31545                                           ! 4941                             0,
31546 81D8                      0000            .word	0
31547                                           ! 4942                                640,
31548 81DA                      0280            .word	$280
31549                                           ! 4943                             0,
31550 81DC                        00            .byte	0
31551                                           ! 4944                             0,
31552 81DD                        00            .byte	0
31553                                           ! 4945                           5,
31554 81DE                        05            .byte	5
31555                                           ! 4946                                10,
31556 81DF                        0A            .byte	$A
31557                                           ! 4947                             5,
31558 81E0                        05            .byte	5
31559                                           ! 4948                                  5,
31560 81E1                        05            .byte	5
31561                                           ! 4949                            5,
31562 81E2                        05            .byte	5
31563                                           ! 4950                                 0,
31564 81E3                        00            .byte	0
31565                                           ! 4951                            1,
31566 81E4                        01            .byte	1
31567                                           ! 4952                                 15,
31568 81E5                        0F            .byte	$F
31569                                           ! 4953                          0,
31570 81E6                      0000            .word	0
31571 81E8                      0000            .word	0
31572                                           ! 4954 } },
31573                                           ! 4955 { 0x010e,
31574 81EA                      010E            .word	$10E
31575                                           ! 4956 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31576 81EC                      009B            .word	$9B
31577                                           ! 4957                           0x01 | 0x02 | 0x04,
31578 81EE                        07            .byte	7
31579                                           ! 4958                           0,
31580 81EF                        00            .byte	0
31581                                           ! 4959                           64,
31582 81F0                      0040            .word	$40
31583                                           ! 4960                    64,
31584 81F2                      0040            .word	$40
31585                                           ! 4961                        0xA000,
31586 81F4                      A000            .word	$A000
31587                                           ! 4962                        0x0000,
31588 81F6                      0000            .word	0
31589                                           ! 4963                       0,
31590 81F8                      0000            .word	0
31591 81FA                      0000            .word	0
31592                                           ! 4964                             640,
31593 81FC                      0280            .word	$280
31594                                           ! 4965                        320,
31595 81FE                      0140            .word	$140
31596                                           ! 4966                        200,
31597 8200                      00C8            .word	$C8
31598                                           ! 4967                      8,
31599 8202                        08            .byte	8
31600                                           ! 4968                      16,
31601 8203                        10            .byte	$10
31602                                           ! 4969                           1,
31603 8204                        01            .byte	1
31604                                           ! 4970                         16,
31605 8205                        10            .byte	$10
31606                                           ! 4971                          2,
31607 8206                        02            .byte	2
31608                                           ! 4972                        0x06,
31609 8207                        06            .byte	6
31610                                           ! 4973                     0,
31611 8208                        00            .byte	0
31612                                           ! 4974                               130,
31613 8209                        82            .byte	$82
31614                                           ! 4975                          0,
31615 820A                        00            .byte	0
31616                                           ! 4976                        5,
31617 820B                        05            .byte	5
31618                                           ! 4977                             11,
31619 820C                        0B            .byte	$B
31620                                           ! 4978                          6,
31621 820D                        06            .byte	6
31622                                           ! 4979                               5,
31623 820E                        05            .byte	5
31624                                           ! 4980                         5,
31625 820F                        05            .byte	5
31626                                           ! 4981                              0,
31627 8210                        00            .byte	0
31628                                           ! 4982                         0,
31629 8211                        00            .byte	0
31630                                           ! 4983                              0,
31631 8212                        00            .byte	0
31632                                           ! 4984                                0,
31633 8213                        00            .byte	0
31634                                           ! 4985                        0xE0000000,
31635 8214                      0000            .word	0
31636 8216                      E000            .word	$E000
31637                                           ! 4986                               0,
31638 8218                      0000            .word	0
31639 821A                      0000            .word	0
31640                                           ! 4987                             0,
31641 821C                      0000            .word	0
31642                                           ! 4988                                640,
31643 821E                      0280            .word	$280
31644                                           ! 4989          
31645                                           ! 4989                    0,
31646 8220                        00            .byte	0
31647                                           ! 4990                             0,
31648 8221                        00            .byte	0
31649                                           ! 4991                           5,
31650 8222                        05            .byte	5
31651                                           ! 4992                                11,
31652 8223                        0B            .byte	$B
31653                                           ! 4993                             6,
31654 8224                        06            .byte	6
31655                                           ! 4994                                  5,
31656 8225                        05            .byte	5
31657                                           ! 4995                            5,
31658 8226                        05            .byte	5
31659                                           ! 4996                                 0,
31660 8227                        00            .byte	0
31661                                           ! 4997                            0,
31662 8228                        00            .byte	0
31663                                           ! 4998                                 0,
31664 8229                        00            .byte	0
31665                                           ! 4999                          0,
31666 822A                      0000            .word	0
31667 822C                      0000            .word	0
31668                                           ! 5000 } },
31669                                           ! 5001 { 0x010f,
31670 822E                      010F            .word	$10F
31671                                           ! 5002 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31672 8230                      009B            .word	$9B
31673                                           ! 5003                           0x01 | 0x02 | 0x04,
31674 8232                        07            .byte	7
31675                                           ! 5004                           0,
31676 8233                        00            .byte	0
31677                                           ! 5005                           64,
31678 8234                      0040            .word	$40
31679                                           ! 5006                    64,
31680 8236                      0040            .word	$40
31681                                           ! 5007                        0xA000,
31682 8238                      A000            .word	$A000
31683                                           ! 5008                        0x0000,
31684 823A                      0000            .word	0
31685                                           ! 5009                       0,
31686 823C                      0000            .word	0
31687 823E                      0000            .word	0
31688                                           ! 5010                             960,
31689 8240                      03C0            .word	$3C0
31690                                           ! 5011                        320,
31691 8242                      0140            .word	$140
31692                                           ! 5012                        200,
31693 8244                      00C8            .word	$C8
31694                                           ! 5013                      8,
31695 8246                        08            .byte	8
31696                                           ! 5014                      16,
31697 8247                        10            .byte	$10
31698                                           ! 5015                           1,
31699 8248                        01            .byte	1
31700                                           ! 5016                         24,
31701 8249                        18            .byte	$18
31702                                           ! 5017                          3,
31703 824A                        03            .byte	3
31704                                           ! 5018                        0x06,
31705 824B                        06            .byte	6
31706                                           ! 5019                     0,
31707 824C                        00            .byte	0
31708                                           ! 5020                               86,
31709 824D                        56            .byte	$56
31710                                           ! 5021                          0,
31711 824E                        00            .byte	0
31712                                           ! 5022                        8,
31713 824F                        08            .byte	8
31714                                           ! 5023                             16,
31715 8250                        10            .byte	$10
31716                                           ! 5024                          8,
31717 8251                        08            .byte	8
31718                                           ! 5025                               8,
31719 8252                        08            .byte	8
31720                                           ! 5026                         8,
31721 8253                        08            .byte	8
31722                                           ! 5027                              0,
31723 8254                        00            .byte	0
31724                                           ! 5028                         0,
31725 8255                        00            .byte	0
31726                                           ! 5029                              0,
31727 8256                        00            .byte	0
31728                                           ! 5030                                0,
31729 8257                        00            .byte	0
31730                                           ! 5031                        0xE0000000,
31731 8258                      0000            .word	0
31732 825A                      E000            .word	$E000
31733                                           ! 5032                               0,
31734 825C                      0000            .word	0
31735 825E                      0000            .word	0
31736                                           ! 5033                             0,
31737 8260                      0000            .word	0
31738                                           ! 5034                                960,
31739 8262                      03C0            .word	$3C0
31740                                           ! 5035                             0,
31741 8264                        00            .byte	0
31742                                           ! 5036                             0,
31743 8265                        00            .byte	0
31744                                           ! 5037                           8,
31745 8266                        08            .byte	8
31746                                           ! 5038                                16,
31747 8267                        10            .byte	$10
31748                                           ! 5039                             8,
31749 8268                        08            .byte	8
31750                                           ! 5040                                  8,
31751 8269                        08            .byte	8
31752                                           ! 5041                            8,
31753 826A                        08            .byte	8
31754                                           ! 5042                                 0,
31755 826B                        00            .byte	0
31756                                           ! 5043                            0,
31757 826C                        00            .byte	0
31758                                           ! 5044                                 0,
31759 826D                        00            .byte	0
31760                                           ! 5045                          0,
31761 826E                      0000            .word	0
31762 8270                      0000            .word	0
31763                                           ! 5046 } },
31764                                           ! 5047 { 0x0110,
31765 8272                      0110            .word	$110
31766                                           ! 5048 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31767 8274                      009B            .word	$9B
31768                                           ! 5049                           0x01 | 0x02 | 0x04,
31769 8276                        07            .byte	7
31770                                           ! 5050                           0,
31771 8277                        00            .byte	0
31772                                           ! 5051                           64,
31773 8278                      0040            .word	$40
31774                                           ! 5052                    64,
31775 827A                      0040            .word	$40
31776                                           ! 5053                        0xA000,
31777 827C                      A000            .word	$A000
31778                                           ! 5054                        0x0000,
31779 827E                      0000            .word	0
31780                                           ! 5055                       0,
31781 8280                      0000            .word	0
31782 8282                      0000            .word	0
31783                                           ! 5056                             1280,
31784 8284                      0500            .word	$500
31785                                           ! 5057                        640
31786                                           ! 5057 ,
31787 8286                      0280            .word	$280
31788                                           ! 5058                        480,
31789 8288                      01E0            .word	$1E0
31790                                           ! 5059                      8,
31791 828A                        08            .byte	8
31792                                           ! 5060                      16,
31793 828B                        10            .byte	$10
31794                                           ! 5061                           1,
31795 828C                        01            .byte	1
31796                                           ! 5062                         15,
31797 828D                        0F            .byte	$F
31798                                           ! 5063                          10,
31799 828E                        0A            .byte	$A
31800                                           ! 5064                        0x06,
31801 828F                        06            .byte	6
31802                                           ! 5065                     0,
31803 8290                        00            .byte	0
31804                                           ! 5066                               26,
31805 8291                        1A            .byte	$1A
31806                                           ! 5067                          0,
31807 8292                        00            .byte	0
31808                                           ! 5068                        5,
31809 8293                        05            .byte	5
31810                                           ! 5069                             10,
31811 8294                        0A            .byte	$A
31812                                           ! 5070                          5,
31813 8295                        05            .byte	5
31814                                           ! 5071                               5,
31815 8296                        05            .byte	5
31816                                           ! 5072                         5,
31817 8297                        05            .byte	5
31818                                           ! 5073                              0,
31819 8298                        00            .byte	0
31820                                           ! 5074                         1,
31821 8299                        01            .byte	1
31822                                           ! 5075                              15,
31823 829A                        0F            .byte	$F
31824                                           ! 5076                                0,
31825 829B                        00            .byte	0
31826                                           ! 5077                        0xE0000000,
31827 829C                      0000            .word	0
31828 829E                      E000            .word	$E000
31829                                           ! 5078                               0,
31830 82A0                      0000            .word	0
31831 82A2                      0000            .word	0
31832                                           ! 5079                             0,
31833 82A4                      0000            .word	0
31834                                           ! 5080                                1280,
31835 82A6                      0500            .word	$500
31836                                           ! 5081                             0,
31837 82A8                        00            .byte	0
31838                                           ! 5082                             0,
31839 82A9                        00            .byte	0
31840                                           ! 5083                           5,
31841 82AA                        05            .byte	5
31842                                           ! 5084                                10,
31843 82AB                        0A            .byte	$A
31844                                           ! 5085                             5,
31845 82AC                        05            .byte	5
31846                                           ! 5086                                  5,
31847 82AD                        05            .byte	5
31848                                           ! 5087                            5,
31849 82AE                        05            .byte	5
31850                                           ! 5088                                 0,
31851 82AF                        00            .byte	0
31852                                           ! 5089                            1,
31853 82B0                        01            .byte	1
31854                                           ! 5090                                 15,
31855 82B1                        0F            .byte	$F
31856                                           ! 5091                          0,
31857 82B2                      0000            .word	0
31858 82B4                      0000            .word	0
31859                                           ! 5092 } },
31860                                           ! 5093 { 0x0111,
31861 82B6                      0111            .word	$111
31862                                           ! 5094 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31863 82B8                      009B            .word	$9B
31864                                           ! 5095                           0x01 | 0x02 | 0x04,
31865 82BA                        07            .byte	7
31866                                           ! 5096                           0,
31867 82BB                        00            .byte	0
31868                                           ! 5097                           64,
31869 82BC                      0040            .word	$40
31870                                           ! 5098                    64,
31871 82BE                      0040            .word	$40
31872                                           ! 5099                        0xA000,
31873 82C0                      A000            .word	$A000
31874                                           ! 5100                        0x0000,
31875 82C2                      0000            .word	0
31876                                           ! 5101                       0,
31877 82C4                      0000            .word	0
31878 82C6                      0000            .word	0
31879                                           ! 5102                             1280,
31880 82C8                      0500            .word	$500
31881                                           ! 5103                        640,
31882 82CA                      0280            .word	$280
31883                                           ! 5104                        480,
31884 82CC                      01E0            .word	$1E0
31885                                           ! 5105                      8,
31886 82CE                        08            .byte	8
31887                                           ! 5106                      16,
31888 82CF                        10            .byte	$10
31889                                           ! 5107                           1,
31890 82D0                        01            .byte	1
31891                                           ! 5108                         16,
31892 82D1                        10            .byte	$10
31893                                           ! 5109                          10,
31894 82D2                        0A            .byte	$A
31895                                           ! 5110                        0x06,
31896 82D3                        06            .byte	6
31897                                           ! 5111                     0,
31898 82D4                        00            .byte	0
31899                                           ! 5112                               26,
31900 82D5                        1A            .byte	$1A
31901                                           ! 5113                          0,
31902 82D6                        00            .byte	0
31903                                           ! 5114                        5,
31904 82D7                        05            .byte	5
31905                                           ! 5115                             11,
31906 82D8                        0B            .byte	$B
31907                                           ! 5116                          6,
31908 82D9                        06            .byte	6
31909                                           ! 5117                               5,
31910 82DA                        05            .byte	5
31911                                           ! 5118                         5,
31912 82DB                        05            .byte	5
31913                                           ! 5119                              0,
31914 82DC                        00            .byte	0
31915                                           ! 5120                         0,
31916 82DD                        00            .byte	0
31917                                           ! 5121                              0,
31918 82DE                        00            .byte	0
31919                                           ! 5122                                0,
31920 82DF                        00            .byte	0
31921                                           ! 5123                        0xE0000000,
31922 82E0                      0000            .word	0
31923 82E2                      E000            .word	$E000
31924                                           ! 5124                               0,
31925 82E4                      0000            .word	0
31926 82E6                      0000            .word	0
31927                                           ! 5125                             0,
31928 82E8                      0000            .word	0
31929                                           ! 5126                         
31930                                           ! 5126        1280,
31931 82EA                      0500            .word	$500
31932                                           ! 5127                             0,
31933 82EC                        00            .byte	0
31934                                           ! 5128                             0,
31935 82ED                        00            .byte	0
31936                                           ! 5129                           5,
31937 82EE                        05            .byte	5
31938                                           ! 5130                                11,
31939 82EF                        0B            .byte	$B
31940                                           ! 5131                             6,
31941 82F0                        06            .byte	6
31942                                           ! 5132                                  5,
31943 82F1                        05            .byte	5
31944                                           ! 5133                            5,
31945 82F2                        05            .byte	5
31946                                           ! 5134                                 0,
31947 82F3                        00            .byte	0
31948                                           ! 5135                            0,
31949 82F4                        00            .byte	0
31950                                           ! 5136                                 0,
31951 82F5                        00            .byte	0
31952                                           ! 5137                          0,
31953 82F6                      0000            .word	0
31954 82F8                      0000            .word	0
31955                                           ! 5138 } },
31956                                           ! 5139 { 0x0112,
31957 82FA                      0112            .word	$112
31958                                           ! 5140 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31959 82FC                      009B            .word	$9B
31960                                           ! 5141                           0x01 | 0x02 | 0x04,
31961 82FE                        07            .byte	7
31962                                           ! 5142                           0,
31963 82FF                        00            .byte	0
31964                                           ! 5143                           64,
31965 8300                      0040            .word	$40
31966                                           ! 5144                    64,
31967 8302                      0040            .word	$40
31968                                           ! 5145                        0xA000,
31969 8304                      A000            .word	$A000
31970                                           ! 5146                        0x0000,
31971 8306                      0000            .word	0
31972                                           ! 5147                       0,
31973 8308                      0000            .word	0
31974 830A                      0000            .word	0
31975                                           ! 5148                             1920,
31976 830C                      0780            .word	$780
31977                                           ! 5149                        640,
31978 830E                      0280            .word	$280
31979                                           ! 5150                        480,
31980 8310                      01E0            .word	$1E0
31981                                           ! 5151                      8,
31982 8312                        08            .byte	8
31983                                           ! 5152                      16,
31984 8313                        10            .byte	$10
31985                                           ! 5153                           1,
31986 8314                        01            .byte	1
31987                                           ! 5154                         24,
31988 8315                        18            .byte	$18
31989                                           ! 5155                          15,
31990 8316                        0F            .byte	$F
31991                                           ! 5156                        0x06,
31992 8317                        06            .byte	6
31993                                           ! 5157                     0,
31994 8318                        00            .byte	0
31995                                           ! 5158                               17,
31996 8319                        11            .byte	$11
31997                                           ! 5159                          0,
31998 831A                        00            .byte	0
31999                                           ! 5160                        8,
32000 831B                        08            .byte	8
32001                                           ! 5161                             16,
32002 831C                        10            .byte	$10
32003                                           ! 5162                          8,
32004 831D                        08            .byte	8
32005                                           ! 5163                               8,
32006 831E                        08            .byte	8
32007                                           ! 5164                         8,
32008 831F                        08            .byte	8
32009                                           ! 5165                              0,
32010 8320                        00            .byte	0
32011                                           ! 5166                         0,
32012 8321                        00            .byte	0
32013                                           ! 5167                              0,
32014 8322                        00            .byte	0
32015                                           ! 5168                                0,
32016 8323                        00            .byte	0
32017                                           ! 5169                        0xE0000000,
32018 8324                      0000            .word	0
32019 8326                      E000            .word	$E000
32020                                           ! 5170                               0,
32021 8328                      0000            .word	0
32022 832A                      0000            .word	0
32023                                           ! 5171                             0,
32024 832C                      0000            .word	0
32025                                           ! 5172                                1920,
32026 832E                      0780            .word	$780
32027                                           ! 5173                             0,
32028 8330                        00            .byte	0
32029                                           ! 5174                             0,
32030 8331                        00            .byte	0
32031                                           ! 5175                           8,
32032 8332                        08            .byte	8
32033                                           ! 5176                                16,
32034 8333                        10            .byte	$10
32035                                           ! 5177                             8,
32036 8334                        08            .byte	8
32037                                           ! 5178                                  8,
32038 8335                        08            .byte	8
32039                                           ! 5179                            8,
32040 8336                        08            .byte	8
32041                                           ! 5180                                 0,
32042 8337                        00            .byte	0
32043                                           ! 5181                            0,
32044 8338                        00            .byte	0
32045                                           ! 5182                                 0,
32046 8339                        00            .byte	0
32047                                           ! 5183                          0,
32048 833A                      0000            .word	0
32049 833C                      0000            .word	0
32050                                           ! 5184 } },
32051                                           ! 5185 { 0x0113,
32052 833E                      0113            .word	$113
32053                                           ! 5186 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32054 8340                      009B            .word	$9B
32055                                           ! 5187                           0x01 | 0x02 | 0x04,
32056 8342                        07            .byte	7
32057                                           ! 5188                           0,
32058 8343                        00            .byte	0
32059                                           ! 5189                           64,
32060 8344                      0040            .word	$40
32061                                           ! 5190                    64,
32062 8346                      0040            .word	$40
32063                                           ! 5191                        0xA000,
32064 8348                      A000            .word	$A000
32065                                           ! 5192                        0x0000,
32066 834A                      0000            .word	0
32067                                           ! 5193                       0,
32068 834C                      0000            .word	0
32069 834E                      0000            .word	0
32070                                           ! 5194                             1600,
32071 8350                      0640            .word	$640
32072                                           ! 5195  
32073                                           ! 5195                       800,
32074 8352                      0320            .word	$320
32075                                           ! 5196                        600,
32076 8354                      0258            .word	$258
32077                                           ! 5197                      8,
32078 8356                        08            .byte	8
32079                                           ! 5198                      16,
32080 8357                        10            .byte	$10
32081                                           ! 5199                           1,
32082 8358                        01            .byte	1
32083                                           ! 5200                         15,
32084 8359                        0F            .byte	$F
32085                                           ! 5201                          15,
32086 835A                        0F            .byte	$F
32087                                           ! 5202                        0x06,
32088 835B                        06            .byte	6
32089                                           ! 5203                     0,
32090 835C                        00            .byte	0
32091                                           ! 5204                               16,
32092 835D                        10            .byte	$10
32093                                           ! 5205                          0,
32094 835E                        00            .byte	0
32095                                           ! 5206                        5,
32096 835F                        05            .byte	5
32097                                           ! 5207                             10,
32098 8360                        0A            .byte	$A
32099                                           ! 5208                          5,
32100 8361                        05            .byte	5
32101                                           ! 5209                               5,
32102 8362                        05            .byte	5
32103                                           ! 5210                         5,
32104 8363                        05            .byte	5
32105                                           ! 5211                              0,
32106 8364                        00            .byte	0
32107                                           ! 5212                         1,
32108 8365                        01            .byte	1
32109                                           ! 5213                              15,
32110 8366                        0F            .byte	$F
32111                                           ! 5214                                0,
32112 8367                        00            .byte	0
32113                                           ! 5215                        0xE0000000,
32114 8368                      0000            .word	0
32115 836A                      E000            .word	$E000
32116                                           ! 5216                               0,
32117 836C                      0000            .word	0
32118 836E                      0000            .word	0
32119                                           ! 5217                             0,
32120 8370                      0000            .word	0
32121                                           ! 5218                                1600,
32122 8372                      0640            .word	$640
32123                                           ! 5219                             0,
32124 8374                        00            .byte	0
32125                                           ! 5220                             0,
32126 8375                        00            .byte	0
32127                                           ! 5221                           5,
32128 8376                        05            .byte	5
32129                                           ! 5222                                10,
32130 8377                        0A            .byte	$A
32131                                           ! 5223                             5,
32132 8378                        05            .byte	5
32133                                           ! 5224                                  5,
32134 8379                        05            .byte	5
32135                                           ! 5225                            5,
32136 837A                        05            .byte	5
32137                                           ! 5226                                 0,
32138 837B                        00            .byte	0
32139                                           ! 5227                            1,
32140 837C                        01            .byte	1
32141                                           ! 5228                                 15,
32142 837D                        0F            .byte	$F
32143                                           ! 5229                          0,
32144 837E                      0000            .word	0
32145 8380                      0000            .word	0
32146                                           ! 5230 } },
32147                                           ! 5231 { 0x0114,
32148 8382                      0114            .word	$114
32149                                           ! 5232 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32150 8384                      009B            .word	$9B
32151                                           ! 5233                           0x01 | 0x02 | 0x04,
32152 8386                        07            .byte	7
32153                                           ! 5234                           0,
32154 8387                        00            .byte	0
32155                                           ! 5235                           64,
32156 8388                      0040            .word	$40
32157                                           ! 5236                    64,
32158 838A                      0040            .word	$40
32159                                           ! 5237                        0xA000,
32160 838C                      A000            .word	$A000
32161                                           ! 5238                        0x0000,
32162 838E                      0000            .word	0
32163                                           ! 5239                       0,
32164 8390                      0000            .word	0
32165 8392                      0000            .word	0
32166                                           ! 5240                             1600,
32167 8394                      0640            .word	$640
32168                                           ! 5241                        800,
32169 8396                      0320            .word	$320
32170                                           ! 5242                        600,
32171 8398                      0258            .word	$258
32172                                           ! 5243                      8,
32173 839A                        08            .byte	8
32174                                           ! 5244                      16,
32175 839B                        10            .byte	$10
32176                                           ! 5245                           1,
32177 839C                        01            .byte	1
32178                                           ! 5246                         16,
32179 839D                        10            .byte	$10
32180                                           ! 5247                          15,
32181 839E                        0F            .byte	$F
32182                                           ! 5248                        0x06,
32183 839F                        06            .byte	6
32184                                           ! 5249                     0,
32185 83A0                        00            .byte	0
32186                                           ! 5250                               16,
32187 83A1                        10            .byte	$10
32188                                           ! 5251                          0,
32189 83A2                        00            .byte	0
32190                                           ! 5252                        5,
32191 83A3                        05            .byte	5
32192                                           ! 5253                             11,
32193 83A4                        0B            .byte	$B
32194                                           ! 5254                          6,
32195 83A5                        06            .byte	6
32196                                           ! 5255                               5,
32197 83A6                        05            .byte	5
32198                                           ! 5256                         5,
32199 83A7                        05            .byte	5
32200                                           ! 5257                              0,
32201 83A8                        00            .byte	0
32202                                           ! 5258                         0,
32203 83A9                        00            .byte	0
32204                                           ! 5259                              0,
32205 83AA                        00            .byte	0
32206                                           ! 5260                                0,
32207 83AB                        00            .byte	0
32208                                           ! 5261                        0xE0000000,
32209 83AC                      0000            .word	0
32210 83AE                      E000            .word	$E000
32211                                           ! 5262                               0,
32212 83B0                      0000            .word	0
32213 83B2                      0000            .word	0
32214                                           ! 5263                             0,
32215                                           ! 5263 
32216 83B4                      0000            .word	0
32217                                           ! 5264                                1600,
32218 83B6                      0640            .word	$640
32219                                           ! 5265                             0,
32220 83B8                        00            .byte	0
32221                                           ! 5266                             0,
32222 83B9                        00            .byte	0
32223                                           ! 5267                           5,
32224 83BA                        05            .byte	5
32225                                           ! 5268                                11,
32226 83BB                        0B            .byte	$B
32227                                           ! 5269                             6,
32228 83BC                        06            .byte	6
32229                                           ! 5270                                  5,
32230 83BD                        05            .byte	5
32231                                           ! 5271                            5,
32232 83BE                        05            .byte	5
32233                                           ! 5272                                 0,
32234 83BF                        00            .byte	0
32235                                           ! 5273                            0,
32236 83C0                        00            .byte	0
32237                                           ! 5274                                 0,
32238 83C1                        00            .byte	0
32239                                           ! 5275                          0,
32240 83C2                      0000            .word	0
32241 83C4                      0000            .word	0
32242                                           ! 5276 } },
32243                                           ! 5277 { 0x0115,
32244 83C6                      0115            .word	$115
32245                                           ! 5278 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32246 83C8                      009B            .word	$9B
32247                                           ! 5279                           0x01 | 0x02 | 0x04,
32248 83CA                        07            .byte	7
32249                                           ! 5280                           0,
32250 83CB                        00            .byte	0
32251                                           ! 5281                           64,
32252 83CC                      0040            .word	$40
32253                                           ! 5282                    64,
32254 83CE                      0040            .word	$40
32255                                           ! 5283                        0xA000,
32256 83D0                      A000            .word	$A000
32257                                           ! 5284                        0x0000,
32258 83D2                      0000            .word	0
32259                                           ! 5285                       0,
32260 83D4                      0000            .word	0
32261 83D6                      0000            .word	0
32262                                           ! 5286                             2400,
32263 83D8                      0960            .word	$960
32264                                           ! 5287                        800,
32265 83DA                      0320            .word	$320
32266                                           ! 5288                        600,
32267 83DC                      0258            .word	$258
32268                                           ! 5289                      8,
32269 83DE                        08            .byte	8
32270                                           ! 5290                      16,
32271 83DF                        10            .byte	$10
32272                                           ! 5291                           1,
32273 83E0                        01            .byte	1
32274                                           ! 5292                         24,
32275 83E1                        18            .byte	$18
32276                                           ! 5293                          22,
32277 83E2                        16            .byte	$16
32278                                           ! 5294                        0x06,
32279 83E3                        06            .byte	6
32280                                           ! 5295                     0,
32281 83E4                        00            .byte	0
32282                                           ! 5296                               10,
32283 83E5                        0A            .byte	$A
32284                                           ! 5297                          0,
32285 83E6                        00            .byte	0
32286                                           ! 5298                        8,
32287 83E7                        08            .byte	8
32288                                           ! 5299                             16,
32289 83E8                        10            .byte	$10
32290                                           ! 5300                          8,
32291 83E9                        08            .byte	8
32292                                           ! 5301                               8,
32293 83EA                        08            .byte	8
32294                                           ! 5302                         8,
32295 83EB                        08            .byte	8
32296                                           ! 5303                              0,
32297 83EC                        00            .byte	0
32298                                           ! 5304                         0,
32299 83ED                        00            .byte	0
32300                                           ! 5305                              0,
32301 83EE                        00            .byte	0
32302                                           ! 5306                                0,
32303 83EF                        00            .byte	0
32304                                           ! 5307                        0xE0000000,
32305 83F0                      0000            .word	0
32306 83F2                      E000            .word	$E000
32307                                           ! 5308                               0,
32308 83F4                      0000            .word	0
32309 83F6                      0000            .word	0
32310                                           ! 5309                             0,
32311 83F8                      0000            .word	0
32312                                           ! 5310                                2400,
32313 83FA                      0960            .word	$960
32314                                           ! 5311                             0,
32315 83FC                        00            .byte	0
32316                                           ! 5312                             0,
32317 83FD                        00            .byte	0
32318                                           ! 5313                           8,
32319 83FE                        08            .byte	8
32320                                           ! 5314                                16,
32321 83FF                        10            .byte	$10
32322                                           ! 5315                             8,
32323 8400                        08            .byte	8
32324                                           ! 5316                                  8,
32325 8401                        08            .byte	8
32326                                           ! 5317                            8,
32327 8402                        08            .byte	8
32328                                           ! 5318                                 0,
32329 8403                        00            .byte	0
32330                                           ! 5319                            0,
32331 8404                        00            .byte	0
32332                                           ! 5320                                 0,
32333 8405                        00            .byte	0
32334                                           ! 5321                          0,
32335 8406                      0000            .word	0
32336 8408                      0000            .word	0
32337                                           ! 5322 } },
32338                                           ! 5323 { 0x0116,
32339 840A                      0116            .word	$116
32340                                           ! 5324 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32341 840C                      009B            .word	$9B
32342                                           ! 5325                           0x01 | 0x02 | 0x04,
32343 840E                        07            .byte	7
32344                                           ! 5326                           0,
32345 840F                        00            .byte	0
32346                                           ! 5327                           64,
32347 8410                      0040            .word	$40
32348                                           ! 5328                    64,
32349 8412                      0040            .word	$40
32350                                           ! 5329                        0xA000,
32351 8414                      A000            .word	$A000
32352                                           ! 5330                        0x0000,
32353 8416                      0000            .word	0
32354                                           ! 5331                       0,
32355 8418                      0000            .word	0
32356 841A                      0000            .word	0
32357                                           ! 5332           
32358                                           ! 5332                   2048,
32359 841C                      0800            .word	$800
32360                                           ! 5333                        1024,
32361 841E                      0400            .word	$400
32362                                           ! 5334                        768,
32363 8420                      0300            .word	$300
32364                                           ! 5335                      8,
32365 8422                        08            .byte	8
32366                                           ! 5336                      16,
32367 8423                        10            .byte	$10
32368                                           ! 5337                           1,
32369 8424                        01            .byte	1
32370                                           ! 5338                         15,
32371 8425                        0F            .byte	$F
32372                                           ! 5339                          24,
32373 8426                        18            .byte	$18
32374                                           ! 5340                        0x06,
32375 8427                        06            .byte	6
32376                                           ! 5341                     0,
32377 8428                        00            .byte	0
32378                                           ! 5342                               9,
32379 8429                        09            .byte	9
32380                                           ! 5343                          0,
32381 842A                        00            .byte	0
32382                                           ! 5344                        5,
32383 842B                        05            .byte	5
32384                                           ! 5345                             10,
32385 842C                        0A            .byte	$A
32386                                           ! 5346                          5,
32387 842D                        05            .byte	5
32388                                           ! 5347                               5,
32389 842E                        05            .byte	5
32390                                           ! 5348                         5,
32391 842F                        05            .byte	5
32392                                           ! 5349                              0,
32393 8430                        00            .byte	0
32394                                           ! 5350                         1,
32395 8431                        01            .byte	1
32396                                           ! 5351                              15,
32397 8432                        0F            .byte	$F
32398                                           ! 5352                                0,
32399 8433                        00            .byte	0
32400                                           ! 5353                        0xE0000000,
32401 8434                      0000            .word	0
32402 8436                      E000            .word	$E000
32403                                           ! 5354                               0,
32404 8438                      0000            .word	0
32405 843A                      0000            .word	0
32406                                           ! 5355                             0,
32407 843C                      0000            .word	0
32408                                           ! 5356                                2048,
32409 843E                      0800            .word	$800
32410                                           ! 5357                             0,
32411 8440                        00            .byte	0
32412                                           ! 5358                             0,
32413 8441                        00            .byte	0
32414                                           ! 5359                           5,
32415 8442                        05            .byte	5
32416                                           ! 5360                                10,
32417 8443                        0A            .byte	$A
32418                                           ! 5361                             5,
32419 8444                        05            .byte	5
32420                                           ! 5362                                  5,
32421 8445                        05            .byte	5
32422                                           ! 5363                            5,
32423 8446                        05            .byte	5
32424                                           ! 5364                                 0,
32425 8447                        00            .byte	0
32426                                           ! 5365                            1,
32427 8448                        01            .byte	1
32428                                           ! 5366                                 15,
32429 8449                        0F            .byte	$F
32430                                           ! 5367                          0,
32431 844A                      0000            .word	0
32432 844C                      0000            .word	0
32433                                           ! 5368 } },
32434                                           ! 5369 { 0x0117,
32435 844E                      0117            .word	$117
32436                                           ! 5370 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32437 8450                      009B            .word	$9B
32438                                           ! 5371                           0x01 | 0x02 | 0x04,
32439 8452                        07            .byte	7
32440                                           ! 5372                           0,
32441 8453                        00            .byte	0
32442                                           ! 5373                           64,
32443 8454                      0040            .word	$40
32444                                           ! 5374                    64,
32445 8456                      0040            .word	$40
32446                                           ! 5375                        0xA000,
32447 8458                      A000            .word	$A000
32448                                           ! 5376                        0x0000,
32449 845A                      0000            .word	0
32450                                           ! 5377                       0,
32451 845C                      0000            .word	0
32452 845E                      0000            .word	0
32453                                           ! 5378                             2048,
32454 8460                      0800            .word	$800
32455                                           ! 5379                        1024,
32456 8462                      0400            .word	$400
32457                                           ! 5380                        768,
32458 8464                      0300            .word	$300
32459                                           ! 5381                      8,
32460 8466                        08            .byte	8
32461                                           ! 5382                      16,
32462 8467                        10            .byte	$10
32463                                           ! 5383                           1,
32464 8468                        01            .byte	1
32465                                           ! 5384                         16,
32466 8469                        10            .byte	$10
32467                                           ! 5385                          24,
32468 846A                        18            .byte	$18
32469                                           ! 5386                        0x06,
32470 846B                        06            .byte	6
32471                                           ! 5387                     0,
32472 846C                        00            .byte	0
32473                                           ! 5388                               9,
32474 846D                        09            .byte	9
32475                                           ! 5389                          0,
32476 846E                        00            .byte	0
32477                                           ! 5390                        5,
32478 846F                        05            .byte	5
32479                                           ! 5391                             11,
32480 8470                        0B            .byte	$B
32481                                           ! 5392                          6,
32482 8471                        06            .byte	6
32483                                           ! 5393                               5,
32484 8472                        05            .byte	5
32485                                           ! 5394                         5,
32486 8473                        05            .byte	5
32487                                           ! 5395                              0,
32488 8474                        00            .byte	0
32489                                           ! 5396                         0,
32490 8475                        00            .byte	0
32491                                           ! 5397                              0,
32492 8476                        00            .byte	0
32493                                           ! 5398                                0,
32494 8477                        00            .byte	0
32495                                           ! 5399                        0xE0000000,
32496 8478                      0000            .word	0
32497 847A                      E000            .word	$E000
32498                                           ! 5400                               0,
32499 847C                      0000            .word	0
32500 847E                      0000            .word	0
32501                                           ! 5401      
32502                                           ! 5401                        0,
32503 8480                      0000            .word	0
32504                                           ! 5402                                2048,
32505 8482                      0800            .word	$800
32506                                           ! 5403                             0,
32507 8484                        00            .byte	0
32508                                           ! 5404                             0,
32509 8485                        00            .byte	0
32510                                           ! 5405                           5,
32511 8486                        05            .byte	5
32512                                           ! 5406                                11,
32513 8487                        0B            .byte	$B
32514                                           ! 5407                             6,
32515 8488                        06            .byte	6
32516                                           ! 5408                                  5,
32517 8489                        05            .byte	5
32518                                           ! 5409                            5,
32519 848A                        05            .byte	5
32520                                           ! 5410                                 0,
32521 848B                        00            .byte	0
32522                                           ! 5411                            0,
32523 848C                        00            .byte	0
32524                                           ! 5412                                 0,
32525 848D                        00            .byte	0
32526                                           ! 5413                          0,
32527 848E                      0000            .word	0
32528 8490                      0000            .word	0
32529                                           ! 5414 } },
32530                                           ! 5415 { 0x0118,
32531 8492                      0118            .word	$118
32532                                           ! 5416 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32533 8494                      009B            .word	$9B
32534                                           ! 5417                           0x01 | 0x02 | 0x04,
32535 8496                        07            .byte	7
32536                                           ! 5418                           0,
32537 8497                        00            .byte	0
32538                                           ! 5419                           64,
32539 8498                      0040            .word	$40
32540                                           ! 5420                    64,
32541 849A                      0040            .word	$40
32542                                           ! 5421                        0xA000,
32543 849C                      A000            .word	$A000
32544                                           ! 5422                        0x0000,
32545 849E                      0000            .word	0
32546                                           ! 5423                       0,
32547 84A0                      0000            .word	0
32548 84A2                      0000            .word	0
32549                                           ! 5424                             3072,
32550 84A4                      0C00            .word	$C00
32551                                           ! 5425                        1024,
32552 84A6                      0400            .word	$400
32553                                           ! 5426                        768,
32554 84A8                      0300            .word	$300
32555                                           ! 5427                      8,
32556 84AA                        08            .byte	8
32557                                           ! 5428                      16,
32558 84AB                        10            .byte	$10
32559                                           ! 5429                           1,
32560 84AC                        01            .byte	1
32561                                           ! 5430                         24,
32562 84AD                        18            .byte	$18
32563                                           ! 5431                          36,
32564 84AE                        24            .byte	$24
32565                                           ! 5432                        0x06,
32566 84AF                        06            .byte	6
32567                                           ! 5433                     0,
32568 84B0                        00            .byte	0
32569                                           ! 5434                               6,
32570 84B1                        06            .byte	6
32571                                           ! 5435                          0,
32572 84B2                        00            .byte	0
32573                                           ! 5436                        8,
32574 84B3                        08            .byte	8
32575                                           ! 5437                             16,
32576 84B4                        10            .byte	$10
32577                                           ! 5438                          8,
32578 84B5                        08            .byte	8
32579                                           ! 5439                               8,
32580 84B6                        08            .byte	8
32581                                           ! 5440                         8,
32582 84B7                        08            .byte	8
32583                                           ! 5441                              0,
32584 84B8                        00            .byte	0
32585                                           ! 5442                         0,
32586 84B9                        00            .byte	0
32587                                           ! 5443                              0,
32588 84BA                        00            .byte	0
32589                                           ! 5444                                0,
32590 84BB                        00            .byte	0
32591                                           ! 5445                        0xE0000000,
32592 84BC                      0000            .word	0
32593 84BE                      E000            .word	$E000
32594                                           ! 5446                               0,
32595 84C0                      0000            .word	0
32596 84C2                      0000            .word	0
32597                                           ! 5447                             0,
32598 84C4                      0000            .word	0
32599                                           ! 5448                                3072,
32600 84C6                      0C00            .word	$C00
32601                                           ! 5449                             0,
32602 84C8                        00            .byte	0
32603                                           ! 5450                             0,
32604 84C9                        00            .byte	0
32605                                           ! 5451                           8,
32606 84CA                        08            .byte	8
32607                                           ! 5452                                16,
32608 84CB                        10            .byte	$10
32609                                           ! 5453                             8,
32610 84CC                        08            .byte	8
32611                                           ! 5454                                  8,
32612 84CD                        08            .byte	8
32613                                           ! 5455                            8,
32614 84CE                        08            .byte	8
32615                                           ! 5456                                 0,
32616 84CF                        00            .byte	0
32617                                           ! 5457                            0,
32618 84D0                        00            .byte	0
32619                                           ! 5458                                 0,
32620 84D1                        00            .byte	0
32621                                           ! 5459                          0,
32622 84D2                      0000            .word	0
32623 84D4                      0000            .word	0
32624                                           ! 5460 } },
32625                                           ! 5461 { 0x0119,
32626 84D6                      0119            .word	$119
32627                                           ! 5462 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32628 84D8                      009B            .word	$9B
32629                                           ! 5463                           0x01 | 0x02 | 0x04,
32630 84DA                        07            .byte	7
32631                                           ! 5464                           0,
32632 84DB                        00            .byte	0
32633                                           ! 5465                           64,
32634 84DC                      0040            .word	$40
32635                                           ! 5466                    64,
32636 84DE                      0040            .word	$40
32637                                           ! 5467                        0xA000,
32638 84E0                      A000            .word	$A000
32639                                           ! 5468                        0x0000,
32640 84E2                      0000            .word	0
32641                                           ! 5469           
32642                                           ! 5469             0,
32643 84E4                      0000            .word	0
32644 84E6                      0000            .word	0
32645                                           ! 5470                             2560,
32646 84E8                      0A00            .word	$A00
32647                                           ! 5471                        1280,
32648 84EA                      0500            .word	$500
32649                                           ! 5472                        1024,
32650 84EC                      0400            .word	$400
32651                                           ! 5473                      8,
32652 84EE                        08            .byte	8
32653                                           ! 5474                      16,
32654 84EF                        10            .byte	$10
32655                                           ! 5475                           1,
32656 84F0                        01            .byte	1
32657                                           ! 5476                         15,
32658 84F1                        0F            .byte	$F
32659                                           ! 5477                          40,
32660 84F2                        28            .byte	$28
32661                                           ! 5478                        0x06,
32662 84F3                        06            .byte	6
32663                                           ! 5479                     0,
32664 84F4                        00            .byte	0
32665                                           ! 5480                               5,
32666 84F5                        05            .byte	5
32667                                           ! 5481                          0,
32668 84F6                        00            .byte	0
32669                                           ! 5482                        5,
32670 84F7                        05            .byte	5
32671                                           ! 5483                             10,
32672 84F8                        0A            .byte	$A
32673                                           ! 5484                          5,
32674 84F9                        05            .byte	5
32675                                           ! 5485                               5,
32676 84FA                        05            .byte	5
32677                                           ! 5486                         5,
32678 84FB                        05            .byte	5
32679                                           ! 5487                              0,
32680 84FC                        00            .byte	0
32681                                           ! 5488                         1,
32682 84FD                        01            .byte	1
32683                                           ! 5489                              15,
32684 84FE                        0F            .byte	$F
32685                                           ! 5490                                0,
32686 84FF                        00            .byte	0
32687                                           ! 5491                        0xE0000000,
32688 8500                      0000            .word	0
32689 8502                      E000            .word	$E000
32690                                           ! 5492                               0,
32691 8504                      0000            .word	0
32692 8506                      0000            .word	0
32693                                           ! 5493                             0,
32694 8508                      0000            .word	0
32695                                           ! 5494                                2560,
32696 850A                      0A00            .word	$A00
32697                                           ! 5495                             0,
32698 850C                        00            .byte	0
32699                                           ! 5496                             0,
32700 850D                        00            .byte	0
32701                                           ! 5497                           5,
32702 850E                        05            .byte	5
32703                                           ! 5498                                10,
32704 850F                        0A            .byte	$A
32705                                           ! 5499                             5,
32706 8510                        05            .byte	5
32707                                           ! 5500                                  5,
32708 8511                        05            .byte	5
32709                                           ! 5501                            5,
32710 8512                        05            .byte	5
32711                                           ! 5502                                 0,
32712 8513                        00            .byte	0
32713                                           ! 5503                            1,
32714 8514                        01            .byte	1
32715                                           ! 5504                                 15,
32716 8515                        0F            .byte	$F
32717                                           ! 5505                          0,
32718 8516                      0000            .word	0
32719 8518                      0000            .word	0
32720                                           ! 5506 } },
32721                                           ! 5507 { 0x011a,
32722 851A                      011A            .word	$11A
32723                                           ! 5508 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32724 851C                      009B            .word	$9B
32725                                           ! 5509                           0x01 | 0x02 | 0x04,
32726 851E                        07            .byte	7
32727                                           ! 5510                           0,
32728 851F                        00            .byte	0
32729                                           ! 5511                           64,
32730 8520                      0040            .word	$40
32731                                           ! 5512                    64,
32732 8522                      0040            .word	$40
32733                                           ! 5513                        0xA000,
32734 8524                      A000            .word	$A000
32735                                           ! 5514                        0x0000,
32736 8526                      0000            .word	0
32737                                           ! 5515                       0,
32738 8528                      0000            .word	0
32739 852A                      0000            .word	0
32740                                           ! 5516                             2560,
32741 852C                      0A00            .word	$A00
32742                                           ! 5517                        1280,
32743 852E                      0500            .word	$500
32744                                           ! 5518                        1024,
32745 8530                      0400            .word	$400
32746                                           ! 5519                      8,
32747 8532                        08            .byte	8
32748                                           ! 5520                      16,
32749 8533                        10            .byte	$10
32750                                           ! 5521                           1,
32751 8534                        01            .byte	1
32752                                           ! 5522                         16,
32753 8535                        10            .byte	$10
32754                                           ! 5523                          40,
32755 8536                        28            .byte	$28
32756                                           ! 5524                        0x06,
32757 8537                        06            .byte	6
32758                                           ! 5525                     0,
32759 8538                        00            .byte	0
32760                                           ! 5526                               5,
32761 8539                        05            .byte	5
32762                                           ! 5527                          0,
32763 853A                        00            .byte	0
32764                                           ! 5528                        5,
32765 853B                        05            .byte	5
32766                                           ! 5529                             11,
32767 853C                        0B            .byte	$B
32768                                           ! 5530                          6,
32769 853D                        06            .byte	6
32770                                           ! 5531                               5,
32771 853E                        05            .byte	5
32772                                           ! 5532                         5,
32773 853F                        05            .byte	5
32774                                           ! 5533                              0,
32775 8540                        00            .byte	0
32776                                           ! 5534                         0,
32777 8541                        00            .byte	0
32778                                           ! 5535                              0,
32779 8542                        00            .byte	0
32780                                           ! 5536                                0,
32781 8543                        00            .byte	0
32782                                           ! 5537                        0xE0000000,
32783 8544                      0000            .word	0
32784 8546                      E000            .word	$E000
32785                                           ! 5538            
32786                                           ! 5538                    0,
32787 8548                      0000            .word	0
32788 854A                      0000            .word	0
32789                                           ! 5539                             0,
32790 854C                      0000            .word	0
32791                                           ! 5540                                2560,
32792 854E                      0A00            .word	$A00
32793                                           ! 5541                             0,
32794 8550                        00            .byte	0
32795                                           ! 5542                             0,
32796 8551                        00            .byte	0
32797                                           ! 5543                           5,
32798 8552                        05            .byte	5
32799                                           ! 5544                                11,
32800 8553                        0B            .byte	$B
32801                                           ! 5545                             6,
32802 8554                        06            .byte	6
32803                                           ! 5546                                  5,
32804 8555                        05            .byte	5
32805                                           ! 5547                            5,
32806 8556                        05            .byte	5
32807                                           ! 5548                                 0,
32808 8557                        00            .byte	0
32809                                           ! 5549                            0,
32810 8558                        00            .byte	0
32811                                           ! 5550                                 0,
32812 8559                        00            .byte	0
32813                                           ! 5551                          0,
32814 855A                      0000            .word	0
32815 855C                      0000            .word	0
32816                                           ! 5552 } },
32817                                           ! 5553 { 0x011b,
32818 855E                      011B            .word	$11B
32819                                           ! 5554 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32820 8560                      009B            .word	$9B
32821                                           ! 5555                           0x01 | 0x02 | 0x04,
32822 8562                        07            .byte	7
32823                                           ! 5556                           0,
32824 8563                        00            .byte	0
32825                                           ! 5557                           64,
32826 8564                      0040            .word	$40
32827                                           ! 5558                    64,
32828 8566                      0040            .word	$40
32829                                           ! 5559                        0xA000,
32830 8568                      A000            .word	$A000
32831                                           ! 5560                        0x0000,
32832 856A                      0000            .word	0
32833                                           ! 5561                       0,
32834 856C                      0000            .word	0
32835 856E                      0000            .word	0
32836                                           ! 5562                             3840,
32837 8570                      0F00            .word	$F00
32838                                           ! 5563                        1280,
32839 8572                      0500            .word	$500
32840                                           ! 5564                        1024,
32841 8574                      0400            .word	$400
32842                                           ! 5565                      8,
32843 8576                        08            .byte	8
32844                                           ! 5566                      16,
32845 8577                        10            .byte	$10
32846                                           ! 5567                           1,
32847 8578                        01            .byte	1
32848                                           ! 5568                         24,
32849 8579                        18            .byte	$18
32850                                           ! 5569                          60,
32851 857A                        3C            .byte	$3C
32852                                           ! 5570                        0x06,
32853 857B                        06            .byte	6
32854                                           ! 5571                     0,
32855 857C                        00            .byte	0
32856                                           ! 5572                               3,
32857 857D                        03            .byte	3
32858                                           ! 5573                          0,
32859 857E                        00            .byte	0
32860                                           ! 5574                        8,
32861 857F                        08            .byte	8
32862                                           ! 5575                             16,
32863 8580                        10            .byte	$10
32864                                           ! 5576                          8,
32865 8581                        08            .byte	8
32866                                           ! 5577                               8,
32867 8582                        08            .byte	8
32868                                           ! 5578                         8,
32869 8583                        08            .byte	8
32870                                           ! 5579                              0,
32871 8584                        00            .byte	0
32872                                           ! 5580                         0,
32873 8585                        00            .byte	0
32874                                           ! 5581                              0,
32875 8586                        00            .byte	0
32876                                           ! 5582                                0,
32877 8587                        00            .byte	0
32878                                           ! 5583                        0xE0000000,
32879 8588                      0000            .word	0
32880 858A                      E000            .word	$E000
32881                                           ! 5584                               0,
32882 858C                      0000            .word	0
32883 858E                      0000            .word	0
32884                                           ! 5585                             0,
32885 8590                      0000            .word	0
32886                                           ! 5586                                3840,
32887 8592                      0F00            .word	$F00
32888                                           ! 5587                             0,
32889 8594                        00            .byte	0
32890                                           ! 5588                             0,
32891 8595                        00            .byte	0
32892                                           ! 5589                           8,
32893 8596                        08            .byte	8
32894                                           ! 5590                                16,
32895 8597                        10            .byte	$10
32896                                           ! 5591                             8,
32897 8598                        08            .byte	8
32898                                           ! 5592                                  8,
32899 8599                        08            .byte	8
32900                                           ! 5593                            8,
32901 859A                        08            .byte	8
32902                                           ! 5594                                 0,
32903 859B                        00            .byte	0
32904                                           ! 5595                            0,
32905 859C                        00            .byte	0
32906                                           ! 5596                                 0,
32907 859D                        00            .byte	0
32908                                           ! 5597                          0,
32909 859E                      0000            .word	0
32910 85A0                      0000            .word	0
32911                                           ! 5598 } },
32912                                           ! 5599 { 0x011c,
32913 85A2                      011C            .word	$11C
32914                                           ! 5600 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32915 85A4                      009B            .word	$9B
32916                                           ! 5601                           0x01 | 0x02 | 0x04,
32917 85A6                        07            .byte	7
32918                                           ! 5602                           0,
32919 85A7                        00            .byte	0
32920                                           ! 5603                           64,
32921 85A8                      0040            .word	$40
32922                                           ! 5604                    64,
32923 85AA                      0040            .word	$40
32924                                           ! 5605                        0xA000,
32925 85AC                      A000            .word	$A000
32926                                           ! 5606              
32927                                           ! 5606           0x0000,
32928 85AE                      0000            .word	0
32929                                           ! 5607                       0,
32930 85B0                      0000            .word	0
32931 85B2                      0000            .word	0
32932                                           ! 5608                             1600,
32933 85B4                      0640            .word	$640
32934                                           ! 5609                        1600,
32935 85B6                      0640            .word	$640
32936                                           ! 5610                        1200,
32937 85B8                      04B0            .word	$4B0
32938                                           ! 5611                      8,
32939 85BA                        08            .byte	8
32940                                           ! 5612                      16,
32941 85BB                        10            .byte	$10
32942                                           ! 5613                           1,
32943 85BC                        01            .byte	1
32944                                           ! 5614                         8,
32945 85BD                        08            .byte	8
32946                                           ! 5615                          30,
32947 85BE                        1E            .byte	$1E
32948                                           ! 5616                        0x04,
32949 85BF                        04            .byte	4
32950                                           ! 5617                     0,
32951 85C0                        00            .byte	0
32952                                           ! 5618                               7,
32953 85C1                        07            .byte	7
32954                                           ! 5619                          0,
32955 85C2                        00            .byte	0
32956                                           ! 5620                        0,
32957 85C3                        00            .byte	0
32958                                           ! 5621                             0,
32959 85C4                        00            .byte	0
32960                                           ! 5622                          0,
32961 85C5                        00            .byte	0
32962                                           ! 5623                               0,
32963 85C6                        00            .byte	0
32964                                           ! 5624                         0,
32965 85C7                        00            .byte	0
32966                                           ! 5625                              0,
32967 85C8                        00            .byte	0
32968                                           ! 5626                         0,
32969 85C9                        00            .byte	0
32970                                           ! 5627                              0,
32971 85CA                        00            .byte	0
32972                                           ! 5628                                0,
32973 85CB                        00            .byte	0
32974                                           ! 5629                        0xE0000000,
32975 85CC                      0000            .word	0
32976 85CE                      E000            .word	$E000
32977                                           ! 5630                               0,
32978 85D0                      0000            .word	0
32979 85D2                      0000            .word	0
32980                                           ! 5631                             0,
32981 85D4                      0000            .word	0
32982                                           ! 5632                                1600,
32983 85D6                      0640            .word	$640
32984                                           ! 5633                             0,
32985 85D8                        00            .byte	0
32986                                           ! 5634                             0,
32987 85D9                        00            .byte	0
32988                                           ! 5635                           0,
32989 85DA                        00            .byte	0
32990                                           ! 5636                                0,
32991 85DB                        00            .byte	0
32992                                           ! 5637                             0,
32993 85DC                        00            .byte	0
32994                                           ! 5638                                  0,
32995 85DD                        00            .byte	0
32996                                           ! 5639                            0,
32997 85DE                        00            .byte	0
32998                                           ! 5640                                 0,
32999 85DF                        00            .byte	0
33000                                           ! 5641                            0,
33001 85E0                        00            .byte	0
33002                                           ! 5642                                 0,
33003 85E1                        00            .byte	0
33004                                           ! 5643                          0,
33005 85E2                      0000            .word	0
33006 85E4                      0000            .word	0
33007                                           ! 5644 } },
33008                                           ! 5645 { 0x011d,
33009 85E6                      011D            .word	$11D
33010                                           ! 5646 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33011 85E8                      009B            .word	$9B
33012                                           ! 5647                           0x01 | 0x02 | 0x04,
33013 85EA                        07            .byte	7
33014                                           ! 5648                           0,
33015 85EB                        00            .byte	0
33016                                           ! 5649                           64,
33017 85EC                      0040            .word	$40
33018                                           ! 5650                    64,
33019 85EE                      0040            .word	$40
33020                                           ! 5651                        0xA000,
33021 85F0                      A000            .word	$A000
33022                                           ! 5652                        0x0000,
33023 85F2                      0000            .word	0
33024                                           ! 5653                       0,
33025 85F4                      0000            .word	0
33026 85F6                      0000            .word	0
33027                                           ! 5654                             3200,
33028 85F8                      0C80            .word	$C80
33029                                           ! 5655                        1600,
33030 85FA                      0640            .word	$640
33031                                           ! 5656                        1200,
33032 85FC                      04B0            .word	$4B0
33033                                           ! 5657                      8,
33034 85FE                        08            .byte	8
33035                                           ! 5658                      16,
33036 85FF                        10            .byte	$10
33037                                           ! 5659                           1,
33038 8600                        01            .byte	1
33039                                           ! 5660                         15,
33040 8601                        0F            .byte	$F
33041                                           ! 5661                          59,
33042 8602                        3B            .byte	$3B
33043                                           ! 5662                        0x06,
33044 8603                        06            .byte	6
33045                                           ! 5663                     0,
33046 8604                        00            .byte	0
33047                                           ! 5664                               3,
33048 8605                        03            .byte	3
33049                                           ! 5665                          0,
33050 8606                        00            .byte	0
33051                                           ! 5666                        5,
33052 8607                        05            .byte	5
33053                                           ! 5667                             10,
33054 8608                        0A            .byte	$A
33055                                           ! 5668                          5,
33056 8609                        05            .byte	5
33057                                           ! 5669                               5,
33058 860A                        05            .byte	5
33059                                           ! 5670                         5,
33060 860B                        05            .byte	5
33061                                           ! 5671                              0,
33062 860C                        00            .byte	0
33063                                           ! 5672                         1,
33064 860D                        01            .byte	1
33065                                           ! 5673                              15,
33066 860E                        0F            .byte	$F
33067                                           ! 5674                                0,
33068 860F                        00            .byte	0
33069                                           ! 5675                       
33070                                           ! 5675  0xE0000000,
33071 8610                      0000            .word	0
33072 8612                      E000            .word	$E000
33073                                           ! 5676                               0,
33074 8614                      0000            .word	0
33075 8616                      0000            .word	0
33076                                           ! 5677                             0,
33077 8618                      0000            .word	0
33078                                           ! 5678                                3200,
33079 861A                      0C80            .word	$C80
33080                                           ! 5679                             0,
33081 861C                        00            .byte	0
33082                                           ! 5680                             0,
33083 861D                        00            .byte	0
33084                                           ! 5681                           5,
33085 861E                        05            .byte	5
33086                                           ! 5682                                10,
33087 861F                        0A            .byte	$A
33088                                           ! 5683                             5,
33089 8620                        05            .byte	5
33090                                           ! 5684                                  5,
33091 8621                        05            .byte	5
33092                                           ! 5685                            5,
33093 8622                        05            .byte	5
33094                                           ! 5686                                 0,
33095 8623                        00            .byte	0
33096                                           ! 5687                            1,
33097 8624                        01            .byte	1
33098                                           ! 5688                                 15,
33099 8625                        0F            .byte	$F
33100                                           ! 5689                          0,
33101 8626                      0000            .word	0
33102 8628                      0000            .word	0
33103                                           ! 5690 } },
33104                                           ! 5691 { 0x011e,
33105 862A                      011E            .word	$11E
33106                                           ! 5692 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33107 862C                      009B            .word	$9B
33108                                           ! 5693                           0x01 | 0x02 | 0x04,
33109 862E                        07            .byte	7
33110                                           ! 5694                           0,
33111 862F                        00            .byte	0
33112                                           ! 5695                           64,
33113 8630                      0040            .word	$40
33114                                           ! 5696                    64,
33115 8632                      0040            .word	$40
33116                                           ! 5697                        0xA000,
33117 8634                      A000            .word	$A000
33118                                           ! 5698                        0x0000,
33119 8636                      0000            .word	0
33120                                           ! 5699                       0,
33121 8638                      0000            .word	0
33122 863A                      0000            .word	0
33123                                           ! 5700                             3200,
33124 863C                      0C80            .word	$C80
33125                                           ! 5701                        1600,
33126 863E                      0640            .word	$640
33127                                           ! 5702                        1200,
33128 8640                      04B0            .word	$4B0
33129                                           ! 5703                      8,
33130 8642                        08            .byte	8
33131                                           ! 5704                      16,
33132 8643                        10            .byte	$10
33133                                           ! 5705                           1,
33134 8644                        01            .byte	1
33135                                           ! 5706                         16,
33136 8645                        10            .byte	$10
33137                                           ! 5707                          59,
33138 8646                        3B            .byte	$3B
33139                                           ! 5708                        0x06,
33140 8647                        06            .byte	6
33141                                           ! 5709                     0,
33142 8648                        00            .byte	0
33143                                           ! 5710                               3,
33144 8649                        03            .byte	3
33145                                           ! 5711                          0,
33146 864A                        00            .byte	0
33147                                           ! 5712                        5,
33148 864B                        05            .byte	5
33149                                           ! 5713                             11,
33150 864C                        0B            .byte	$B
33151                                           ! 5714                          6,
33152 864D                        06            .byte	6
33153                                           ! 5715                               5,
33154 864E                        05            .byte	5
33155                                           ! 5716                         5,
33156 864F                        05            .byte	5
33157                                           ! 5717                              0,
33158 8650                        00            .byte	0
33159                                           ! 5718                         0,
33160 8651                        00            .byte	0
33161                                           ! 5719                              0,
33162 8652                        00            .byte	0
33163                                           ! 5720                                0,
33164 8653                        00            .byte	0
33165                                           ! 5721                        0xE0000000,
33166 8654                      0000            .word	0
33167 8656                      E000            .word	$E000
33168                                           ! 5722                               0,
33169 8658                      0000            .word	0
33170 865A                      0000            .word	0
33171                                           ! 5723                             0,
33172 865C                      0000            .word	0
33173                                           ! 5724                                3200,
33174 865E                      0C80            .word	$C80
33175                                           ! 5725                             0,
33176 8660                        00            .byte	0
33177                                           ! 5726                             0,
33178 8661                        00            .byte	0
33179                                           ! 5727                           5,
33180 8662                        05            .byte	5
33181                                           ! 5728                                11,
33182 8663                        0B            .byte	$B
33183                                           ! 5729                             6,
33184 8664                        06            .byte	6
33185                                           ! 5730                                  5,
33186 8665                        05            .byte	5
33187                                           ! 5731                            5,
33188 8666                        05            .byte	5
33189                                           ! 5732                                 0,
33190 8667                        00            .byte	0
33191                                           ! 5733                            0,
33192 8668                        00            .byte	0
33193                                           ! 5734                                 0,
33194 8669                        00            .byte	0
33195                                           ! 5735                          0,
33196 866A                      0000            .word	0
33197 866C                      0000            .word	0
33198                                           ! 5736 } },
33199                                           ! 5737 { 0x011f,
33200 866E                      011F            .word	$11F
33201                                           ! 5738 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33202 8670                      009B            .word	$9B
33203                                           ! 5739                           0x01 | 0x02 | 0x04,
33204 8672                        07            .byte	7
33205                                           ! 5740                           0,
33206 8673                        00            .byte	0
33207                                           ! 5741                           64,
33208 8674                      0040            .word	$40
33209                                           ! 5742                    64,
33210 8676                      0040            .word	$40
33211                                           ! 5743                    
33212                                           ! 5743     0xA000,
33213 8678                      A000            .word	$A000
33214                                           ! 5744                        0x0000,
33215 867A                      0000            .word	0
33216                                           ! 5745                       0,
33217 867C                      0000            .word	0
33218 867E                      0000            .word	0
33219                                           ! 5746                             4800,
33220 8680                      12C0            .word	$12C0
33221                                           ! 5747                        1600,
33222 8682                      0640            .word	$640
33223                                           ! 5748                        1200,
33224 8684                      04B0            .word	$4B0
33225                                           ! 5749                      8,
33226 8686                        08            .byte	8
33227                                           ! 5750                      16,
33228 8687                        10            .byte	$10
33229                                           ! 5751                           1,
33230 8688                        01            .byte	1
33231                                           ! 5752                         24,
33232 8689                        18            .byte	$18
33233                                           ! 5753                          88,
33234 868A                        58            .byte	$58
33235                                           ! 5754                        0x06,
33236 868B                        06            .byte	6
33237                                           ! 5755                     0,
33238 868C                        00            .byte	0
33239                                           ! 5756                               1,
33240 868D                        01            .byte	1
33241                                           ! 5757                          0,
33242 868E                        00            .byte	0
33243                                           ! 5758                        8,
33244 868F                        08            .byte	8
33245                                           ! 5759                             16,
33246 8690                        10            .byte	$10
33247                                           ! 5760                          8,
33248 8691                        08            .byte	8
33249                                           ! 5761                               8,
33250 8692                        08            .byte	8
33251                                           ! 5762                         8,
33252 8693                        08            .byte	8
33253                                           ! 5763                              0,
33254 8694                        00            .byte	0
33255                                           ! 5764                         0,
33256 8695                        00            .byte	0
33257                                           ! 5765                              0,
33258 8696                        00            .byte	0
33259                                           ! 5766                                0,
33260 8697                        00            .byte	0
33261                                           ! 5767                        0xE0000000,
33262 8698                      0000            .word	0
33263 869A                      E000            .word	$E000
33264                                           ! 5768                               0,
33265 869C                      0000            .word	0
33266 869E                      0000            .word	0
33267                                           ! 5769                             0,
33268 86A0                      0000            .word	0
33269                                           ! 5770                                4800,
33270 86A2                      12C0            .word	$12C0
33271                                           ! 5771                             0,
33272 86A4                        00            .byte	0
33273                                           ! 5772                             0,
33274 86A5                        00            .byte	0
33275                                           ! 5773                           8,
33276 86A6                        08            .byte	8
33277                                           ! 5774                                16,
33278 86A7                        10            .byte	$10
33279                                           ! 5775                             8,
33280 86A8                        08            .byte	8
33281                                           ! 5776                                  8,
33282 86A9                        08            .byte	8
33283                                           ! 5777                            8,
33284 86AA                        08            .byte	8
33285                                           ! 5778                                 0,
33286 86AB                        00            .byte	0
33287                                           ! 5779                            0,
33288 86AC                        00            .byte	0
33289                                           ! 5780                                 0,
33290 86AD                        00            .byte	0
33291                                           ! 5781                          0,
33292 86AE                      0000            .word	0
33293 86B0                      0000            .word	0
33294                                           ! 5782 } },
33295                                           ! 5783 { 0x0140,
33296 86B2                      0140            .word	$140
33297                                           ! 5784 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33298 86B4                      009B            .word	$9B
33299                                           ! 5785                           0x01 | 0x02 | 0x04,
33300 86B6                        07            .byte	7
33301                                           ! 5786                           0,
33302 86B7                        00            .byte	0
33303                                           ! 5787                           64,
33304 86B8                      0040            .word	$40
33305                                           ! 5788                    64,
33306 86BA                      0040            .word	$40
33307                                           ! 5789                        0xA000,
33308 86BC                      A000            .word	$A000
33309                                           ! 5790                        0x0000,
33310 86BE                      0000            .word	0
33311                                           ! 5791                       0,
33312 86C0                      0000            .word	0
33313 86C2                      0000            .word	0
33314                                           ! 5792                             1280,
33315 86C4                      0500            .word	$500
33316                                           ! 5793                        320,
33317 86C6                      0140            .word	$140
33318                                           ! 5794                        200,
33319 86C8                      00C8            .word	$C8
33320                                           ! 5795                      8,
33321 86CA                        08            .byte	8
33322                                           ! 5796                      16,
33323 86CB                        10            .byte	$10
33324                                           ! 5797                           1,
33325 86CC                        01            .byte	1
33326                                           ! 5798                         32,
33327 86CD                        20            .byte	$20
33328                                           ! 5799                          4,
33329 86CE                        04            .byte	4
33330                                           ! 5800                        0x06,
33331 86CF                        06            .byte	6
33332                                           ! 5801                     0,
33333 86D0                        00            .byte	0
33334                                           ! 5802                               64,
33335 86D1                        40            .byte	$40
33336                                           ! 5803                          0,
33337 86D2                        00            .byte	0
33338                                           ! 5804                        8,
33339 86D3                        08            .byte	8
33340                                           ! 5805                             16,
33341 86D4                        10            .byte	$10
33342                                           ! 5806                          8,
33343 86D5                        08            .byte	8
33344                                           ! 5807                               8,
33345 86D6                        08            .byte	8
33346                                           ! 5808                         8,
33347 86D7                        08            .byte	8
33348                                           ! 5809                              0,
33349 86D8                        00            .byte	0
33350                                           ! 5810                         8,
33351 86D9                        08            .byte	8
33352                                           ! 5811                              24,
33353 86DA                        18            .byte	$18
33354                                           ! 5812                               
33355                                           ! 5812  0x02,
33356 86DB                        02            .byte	2
33357                                           ! 5813                        0xE0000000,
33358 86DC                      0000            .word	0
33359 86DE                      E000            .word	$E000
33360                                           ! 5814                               0,
33361 86E0                      0000            .word	0
33362 86E2                      0000            .word	0
33363                                           ! 5815                             0,
33364 86E4                      0000            .word	0
33365                                           ! 5816                                1280,
33366 86E6                      0500            .word	$500
33367                                           ! 5817                             0,
33368 86E8                        00            .byte	0
33369                                           ! 5818                             0,
33370 86E9                        00            .byte	0
33371                                           ! 5819                           8,
33372 86EA                        08            .byte	8
33373                                           ! 5820                                16,
33374 86EB                        10            .byte	$10
33375                                           ! 5821                             8,
33376 86EC                        08            .byte	8
33377                                           ! 5822                                  8,
33378 86ED                        08            .byte	8
33379                                           ! 5823                            8,
33380 86EE                        08            .byte	8
33381                                           ! 5824                                 0,
33382 86EF                        00            .byte	0
33383                                           ! 5825                            8,
33384 86F0                        08            .byte	8
33385                                           ! 5826                                 24,
33386 86F1                        18            .byte	$18
33387                                           ! 5827                          0,
33388 86F2                      0000            .word	0
33389 86F4                      0000            .word	0
33390                                           ! 5828 } },
33391                                           ! 5829 { 0x0141,
33392 86F6                      0141            .word	$141
33393                                           ! 5830 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33394 86F8                      009B            .word	$9B
33395                                           ! 5831                           0x01 | 0x02 | 0x04,
33396 86FA                        07            .byte	7
33397                                           ! 5832                           0,
33398 86FB                        00            .byte	0
33399                                           ! 5833                           64,
33400 86FC                      0040            .word	$40
33401                                           ! 5834                    64,
33402 86FE                      0040            .word	$40
33403                                           ! 5835                        0xA000,
33404 8700                      A000            .word	$A000
33405                                           ! 5836                        0x0000,
33406 8702                      0000            .word	0
33407                                           ! 5837                       0,
33408 8704                      0000            .word	0
33409 8706                      0000            .word	0
33410                                           ! 5838                             2560,
33411 8708                      0A00            .word	$A00
33412                                           ! 5839                        640,
33413 870A                      0280            .word	$280
33414                                           ! 5840                        400,
33415 870C                      0190            .word	$190
33416                                           ! 5841                      8,
33417 870E                        08            .byte	8
33418                                           ! 5842                      16,
33419 870F                        10            .byte	$10
33420                                           ! 5843                           1,
33421 8710                        01            .byte	1
33422                                           ! 5844                         32,
33423 8711                        20            .byte	$20
33424                                           ! 5845                          16,
33425 8712                        10            .byte	$10
33426                                           ! 5846                        0x06,
33427 8713                        06            .byte	6
33428                                           ! 5847                     0,
33429 8714                        00            .byte	0
33430                                           ! 5848                               15,
33431 8715                        0F            .byte	$F
33432                                           ! 5849                          0,
33433 8716                        00            .byte	0
33434                                           ! 5850                        8,
33435 8717                        08            .byte	8
33436                                           ! 5851                             16,
33437 8718                        10            .byte	$10
33438                                           ! 5852                          8,
33439 8719                        08            .byte	8
33440                                           ! 5853                               8,
33441 871A                        08            .byte	8
33442                                           ! 5854                         8,
33443 871B                        08            .byte	8
33444                                           ! 5855                              0,
33445 871C                        00            .byte	0
33446                                           ! 5856                         8,
33447 871D                        08            .byte	8
33448                                           ! 5857                              24,
33449 871E                        18            .byte	$18
33450                                           ! 5858                                0x02,
33451 871F                        02            .byte	2
33452                                           ! 5859                        0xE0000000,
33453 8720                      0000            .word	0
33454 8722                      E000            .word	$E000
33455                                           ! 5860                               0,
33456 8724                      0000            .word	0
33457 8726                      0000            .word	0
33458                                           ! 5861                             0,
33459 8728                      0000            .word	0
33460                                           ! 5862                                2560,
33461 872A                      0A00            .word	$A00
33462                                           ! 5863                             0,
33463 872C                        00            .byte	0
33464                                           ! 5864                             0,
33465 872D                        00            .byte	0
33466                                           ! 5865                           8,
33467 872E                        08            .byte	8
33468                                           ! 5866                                16,
33469 872F                        10            .byte	$10
33470                                           ! 5867                             8,
33471 8730                        08            .byte	8
33472                                           ! 5868                                  8,
33473 8731                        08            .byte	8
33474                                           ! 5869                            8,
33475 8732                        08            .byte	8
33476                                           ! 5870                                 0,
33477 8733                        00            .byte	0
33478                                           ! 5871                            8,
33479 8734                        08            .byte	8
33480                                           ! 5872                                 24,
33481 8735                        18            .byte	$18
33482                                           ! 5873                          0,
33483 8736                      0000            .word	0
33484 8738                      0000            .word	0
33485                                           ! 5874 } },
33486                                           ! 5875 { 0x0142,
33487 873A                      0142            .word	$142
33488                                           ! 5876 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33489 873C                      009B            .word	$9B
33490                                           ! 5877                           0x01 | 0x02 | 0x04,
33491 873E                        07            .byte	7
33492                                           ! 5878                           0,
33493 873F                        00            .byte	0
33494                                           ! 5879                           64,
33495 8740                      0040            .word	$40
33496                                           ! 5880          
33497                                           ! 5880           64,
33498 8742                      0040            .word	$40
33499                                           ! 5881                        0xA000,
33500 8744                      A000            .word	$A000
33501                                           ! 5882                        0x0000,
33502 8746                      0000            .word	0
33503                                           ! 5883                       0,
33504 8748                      0000            .word	0
33505 874A                      0000            .word	0
33506                                           ! 5884                             2560,
33507 874C                      0A00            .word	$A00
33508                                           ! 5885                        640,
33509 874E                      0280            .word	$280
33510                                           ! 5886                        480,
33511 8750                      01E0            .word	$1E0
33512                                           ! 5887                      8,
33513 8752                        08            .byte	8
33514                                           ! 5888                      16,
33515 8753                        10            .byte	$10
33516                                           ! 5889                           1,
33517 8754                        01            .byte	1
33518                                           ! 5890                         32,
33519 8755                        20            .byte	$20
33520                                           ! 5891                          19,
33521 8756                        13            .byte	$13
33522                                           ! 5892                        0x06,
33523 8757                        06            .byte	6
33524                                           ! 5893                     0,
33525 8758                        00            .byte	0
33526                                           ! 5894                               12,
33527 8759                        0C            .byte	$C
33528                                           ! 5895                          0,
33529 875A                        00            .byte	0
33530                                           ! 5896                        8,
33531 875B                        08            .byte	8
33532                                           ! 5897                             16,
33533 875C                        10            .byte	$10
33534                                           ! 5898                          8,
33535 875D                        08            .byte	8
33536                                           ! 5899                               8,
33537 875E                        08            .byte	8
33538                                           ! 5900                         8,
33539 875F                        08            .byte	8
33540                                           ! 5901                              0,
33541 8760                        00            .byte	0
33542                                           ! 5902                         8,
33543 8761                        08            .byte	8
33544                                           ! 5903                              24,
33545 8762                        18            .byte	$18
33546                                           ! 5904                                0x02,
33547 8763                        02            .byte	2
33548                                           ! 5905                        0xE0000000,
33549 8764                      0000            .word	0
33550 8766                      E000            .word	$E000
33551                                           ! 5906                               0,
33552 8768                      0000            .word	0
33553 876A                      0000            .word	0
33554                                           ! 5907                             0,
33555 876C                      0000            .word	0
33556                                           ! 5908                                2560,
33557 876E                      0A00            .word	$A00
33558                                           ! 5909                             0,
33559 8770                        00            .byte	0
33560                                           ! 5910                             0,
33561 8771                        00            .byte	0
33562                                           ! 5911                           8,
33563 8772                        08            .byte	8
33564                                           ! 5912                                16,
33565 8773                        10            .byte	$10
33566                                           ! 5913                             8,
33567 8774                        08            .byte	8
33568                                           ! 5914                                  8,
33569 8775                        08            .byte	8
33570                                           ! 5915                            8,
33571 8776                        08            .byte	8
33572                                           ! 5916                                 0,
33573 8777                        00            .byte	0
33574                                           ! 5917                            8,
33575 8778                        08            .byte	8
33576                                           ! 5918                                 24,
33577 8779                        18            .byte	$18
33578                                           ! 5919                          0,
33579 877A                      0000            .word	0
33580 877C                      0000            .word	0
33581                                           ! 5920 } },
33582                                           ! 5921 { 0x0143,
33583 877E                      0143            .word	$143
33584                                           ! 5922 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33585 8780                      009B            .word	$9B
33586                                           ! 5923                           0x01 | 0x02 | 0x04,
33587 8782                        07            .byte	7
33588                                           ! 5924                           0,
33589 8783                        00            .byte	0
33590                                           ! 5925                           64,
33591 8784                      0040            .word	$40
33592                                           ! 5926                    64,
33593 8786                      0040            .word	$40
33594                                           ! 5927                        0xA000,
33595 8788                      A000            .word	$A000
33596                                           ! 5928                        0x0000,
33597 878A                      0000            .word	0
33598                                           ! 5929                       0,
33599 878C                      0000            .word	0
33600 878E                      0000            .word	0
33601                                           ! 5930                             3200,
33602 8790                      0C80            .word	$C80
33603                                           ! 5931                        800,
33604 8792                      0320            .word	$320
33605                                           ! 5932                        600,
33606 8794                      0258            .word	$258
33607                                           ! 5933                      8,
33608 8796                        08            .byte	8
33609                                           ! 5934                      16,
33610 8797                        10            .byte	$10
33611                                           ! 5935                           1,
33612 8798                        01            .byte	1
33613                                           ! 5936                         32,
33614 8799                        20            .byte	$20
33615                                           ! 5937                          30,
33616 879A                        1E            .byte	$1E
33617                                           ! 5938                        0x06,
33618 879B                        06            .byte	6
33619                                           ! 5939                     0,
33620 879C                        00            .byte	0
33621                                           ! 5940                               7,
33622 879D                        07            .byte	7
33623                                           ! 5941                          0,
33624 879E                        00            .byte	0
33625                                           ! 5942                        8,
33626 879F                        08            .byte	8
33627                                           ! 5943                             16,
33628 87A0                        10            .byte	$10
33629                                           ! 5944                          8,
33630 87A1                        08            .byte	8
33631                                           ! 5945                               8,
33632 87A2                        08            .byte	8
33633                                           ! 5946                         8,
33634 87A3                        08            .byte	8
33635                                           ! 5947                              0,
33636 87A4                        00            .byte	0
33637                                           ! 5948                         8,
33638 87A5                        08            .byte	8
33639                                           ! 5949                           
33640                                           ! 5949    24,
33641 87A6                        18            .byte	$18
33642                                           ! 5950                                0x02,
33643 87A7                        02            .byte	2
33644                                           ! 5951                        0xE0000000,
33645 87A8                      0000            .word	0
33646 87AA                      E000            .word	$E000
33647                                           ! 5952                               0,
33648 87AC                      0000            .word	0
33649 87AE                      0000            .word	0
33650                                           ! 5953                             0,
33651 87B0                      0000            .word	0
33652                                           ! 5954                                3200,
33653 87B2                      0C80            .word	$C80
33654                                           ! 5955                             0,
33655 87B4                        00            .byte	0
33656                                           ! 5956                             0,
33657 87B5                        00            .byte	0
33658                                           ! 5957                           8,
33659 87B6                        08            .byte	8
33660                                           ! 5958                                16,
33661 87B7                        10            .byte	$10
33662                                           ! 5959                             8,
33663 87B8                        08            .byte	8
33664                                           ! 5960                                  8,
33665 87B9                        08            .byte	8
33666                                           ! 5961                            8,
33667 87BA                        08            .byte	8
33668                                           ! 5962                                 0,
33669 87BB                        00            .byte	0
33670                                           ! 5963                            8,
33671 87BC                        08            .byte	8
33672                                           ! 5964                                 24,
33673 87BD                        18            .byte	$18
33674                                           ! 5965                          0,
33675 87BE                      0000            .word	0
33676 87C0                      0000            .word	0
33677                                           ! 5966 } },
33678                                           ! 5967 { 0x0144,
33679 87C2                      0144            .word	$144
33680                                           ! 5968 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33681 87C4                      009B            .word	$9B
33682                                           ! 5969                           0x01 | 0x02 | 0x04,
33683 87C6                        07            .byte	7
33684                                           ! 5970                           0,
33685 87C7                        00            .byte	0
33686                                           ! 5971                           64,
33687 87C8                      0040            .word	$40
33688                                           ! 5972                    64,
33689 87CA                      0040            .word	$40
33690                                           ! 5973                        0xA000,
33691 87CC                      A000            .word	$A000
33692                                           ! 5974                        0x0000,
33693 87CE                      0000            .word	0
33694                                           ! 5975                       0,
33695 87D0                      0000            .word	0
33696 87D2                      0000            .word	0
33697                                           ! 5976                             4096,
33698 87D4                      1000            .word	$1000
33699                                           ! 5977                        1024,
33700 87D6                      0400            .word	$400
33701                                           ! 5978                        768,
33702 87D8                      0300            .word	$300
33703                                           ! 5979                      8,
33704 87DA                        08            .byte	8
33705                                           ! 5980                      16,
33706 87DB                        10            .byte	$10
33707                                           ! 5981                           1,
33708 87DC                        01            .byte	1
33709                                           ! 5982                         32,
33710 87DD                        20            .byte	$20
33711                                           ! 5983                          48,
33712 87DE                        30            .byte	$30
33713                                           ! 5984                        0x06,
33714 87DF                        06            .byte	6
33715                                           ! 5985                     0,
33716 87E0                        00            .byte	0
33717                                           ! 5986                               4,
33718 87E1                        04            .byte	4
33719                                           ! 5987                          0,
33720 87E2                        00            .byte	0
33721                                           ! 5988                        8,
33722 87E3                        08            .byte	8
33723                                           ! 5989                             16,
33724 87E4                        10            .byte	$10
33725                                           ! 5990                          8,
33726 87E5                        08            .byte	8
33727                                           ! 5991                               8,
33728 87E6                        08            .byte	8
33729                                           ! 5992                         8,
33730 87E7                        08            .byte	8
33731                                           ! 5993                              0,
33732 87E8                        00            .byte	0
33733                                           ! 5994                         8,
33734 87E9                        08            .byte	8
33735                                           ! 5995                              24,
33736 87EA                        18            .byte	$18
33737                                           ! 5996                                0x02,
33738 87EB                        02            .byte	2
33739                                           ! 5997                        0xE0000000,
33740 87EC                      0000            .word	0
33741 87EE                      E000            .word	$E000
33742                                           ! 5998                               0,
33743 87F0                      0000            .word	0
33744 87F2                      0000            .word	0
33745                                           ! 5999                             0,
33746 87F4                      0000            .word	0
33747                                           ! 6000                                4096,
33748 87F6                      1000            .word	$1000
33749                                           ! 6001                             0,
33750 87F8                        00            .byte	0
33751                                           ! 6002                             0,
33752 87F9                        00            .byte	0
33753                                           ! 6003                           8,
33754 87FA                        08            .byte	8
33755                                           ! 6004                                16,
33756 87FB                        10            .byte	$10
33757                                           ! 6005                             8,
33758 87FC                        08            .byte	8
33759                                           ! 6006                                  8,
33760 87FD                        08            .byte	8
33761                                           ! 6007                            8,
33762 87FE                        08            .byte	8
33763                                           ! 6008                                 0,
33764 87FF                        00            .byte	0
33765                                           ! 6009                            8,
33766 8800                        08            .byte	8
33767                                           ! 6010                                 24,
33768 8801                        18            .byte	$18
33769                                           ! 6011                          0,
33770 8802                      0000            .word	0
33771 8804                      0000            .word	0
33772                                           ! 6012 } },
33773                                           ! 6013 { 0x0145,
33774 8806                      0145            .word	$145
33775                                           ! 6014 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33776 8808                      009B            .word	$9B
33777                                           ! 6015                           0x01 | 0x02 | 0x04,
33778 880A                        07            .byte	7
33779                                           ! 6016                           0,
33780 880B                        00            .byte	0
33781                                           ! 6017   
33782                                           ! 6017                         64,
33783 880C                      0040            .word	$40
33784                                           ! 6018                    64,
33785 880E                      0040            .word	$40
33786                                           ! 6019                        0xA000,
33787 8810                      A000            .word	$A000
33788                                           ! 6020                        0x0000,
33789 8812                      0000            .word	0
33790                                           ! 6021                       0,
33791 8814                      0000            .word	0
33792 8816                      0000            .word	0
33793                                           ! 6022                             5120,
33794 8818                      1400            .word	$1400
33795                                           ! 6023                        1280,
33796 881A                      0500            .word	$500
33797                                           ! 6024                        1024,
33798 881C                      0400            .word	$400
33799                                           ! 6025                      8,
33800 881E                        08            .byte	8
33801                                           ! 6026                      16,
33802 881F                        10            .byte	$10
33803                                           ! 6027                           1,
33804 8820                        01            .byte	1
33805                                           ! 6028                         32,
33806 8821                        20            .byte	$20
33807                                           ! 6029                          80,
33808 8822                        50            .byte	$50
33809                                           ! 6030                        0x06,
33810 8823                        06            .byte	6
33811                                           ! 6031                     0,
33812 8824                        00            .byte	0
33813                                           ! 6032                               2,
33814 8825                        02            .byte	2
33815                                           ! 6033                          0,
33816 8826                        00            .byte	0
33817                                           ! 6034                        8,
33818 8827                        08            .byte	8
33819                                           ! 6035                             16,
33820 8828                        10            .byte	$10
33821                                           ! 6036                          8,
33822 8829                        08            .byte	8
33823                                           ! 6037                               8,
33824 882A                        08            .byte	8
33825                                           ! 6038                         8,
33826 882B                        08            .byte	8
33827                                           ! 6039                              0,
33828 882C                        00            .byte	0
33829                                           ! 6040                         8,
33830 882D                        08            .byte	8
33831                                           ! 6041                              24,
33832 882E                        18            .byte	$18
33833                                           ! 6042                                0x02,
33834 882F                        02            .byte	2
33835                                           ! 6043                        0xE0000000,
33836 8830                      0000            .word	0
33837 8832                      E000            .word	$E000
33838                                           ! 6044                               0,
33839 8834                      0000            .word	0
33840 8836                      0000            .word	0
33841                                           ! 6045                             0,
33842 8838                      0000            .word	0
33843                                           ! 6046                                5120,
33844 883A                      1400            .word	$1400
33845                                           ! 6047                             0,
33846 883C                        00            .byte	0
33847                                           ! 6048                             0,
33848 883D                        00            .byte	0
33849                                           ! 6049                           8,
33850 883E                        08            .byte	8
33851                                           ! 6050                                16,
33852 883F                        10            .byte	$10
33853                                           ! 6051                             8,
33854 8840                        08            .byte	8
33855                                           ! 6052                                  8,
33856 8841                        08            .byte	8
33857                                           ! 6053                            8,
33858 8842                        08            .byte	8
33859                                           ! 6054                                 0,
33860 8843                        00            .byte	0
33861                                           ! 6055                            8,
33862 8844                        08            .byte	8
33863                                           ! 6056                                 24,
33864 8845                        18            .byte	$18
33865                                           ! 6057                          0,
33866 8846                      0000            .word	0
33867 8848                      0000            .word	0
33868                                           ! 6058 } },
33869                                           ! 6059 { 0x0146,
33870 884A                      0146            .word	$146
33871                                           ! 6060 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33872 884C                      009B            .word	$9B
33873                                           ! 6061                           0x01 | 0x02 | 0x04,
33874 884E                        07            .byte	7
33875                                           ! 6062                           0,
33876 884F                        00            .byte	0
33877                                           ! 6063                           64,
33878 8850                      0040            .word	$40
33879                                           ! 6064                    64,
33880 8852                      0040            .word	$40
33881                                           ! 6065                        0xA000,
33882 8854                      A000            .word	$A000
33883                                           ! 6066                        0x0000,
33884 8856                      0000            .word	0
33885                                           ! 6067                       0,
33886 8858                      0000            .word	0
33887 885A                      0000            .word	0
33888                                           ! 6068                             320,
33889 885C                      0140            .word	$140
33890                                           ! 6069                        320,
33891 885E                      0140            .word	$140
33892                                           ! 6070                        200,
33893 8860                      00C8            .word	$C8
33894                                           ! 6071                      8,
33895 8862                        08            .byte	8
33896                                           ! 6072                      16,
33897 8863                        10            .byte	$10
33898                                           ! 6073                           1,
33899 8864                        01            .byte	1
33900                                           ! 6074                         8,
33901 8865                        08            .byte	8
33902                                           ! 6075                          1,
33903 8866                        01            .byte	1
33904                                           ! 6076                        0x04,
33905 8867                        04            .byte	4
33906                                           ! 6077                     0,
33907 8868                        00            .byte	0
33908                                           ! 6078                               261,
33909 8869                        05            .byte	5
33910                                           ! 6079                          0,
33911 886A                        00            .byte	0
33912                                           ! 6080                        0,
33913 886B                        00            .byte	0
33914                                           ! 6081                             0,
33915 886C                        00            .byte	0
33916                                           ! 6082                          0,
33917 886D                        00            .byte	0
33918                                           ! 6083                               0,
33919 886E                        00            .byte	0
33920                                           ! 6084                         0,
33921 886F                        00            .byte	0
33922                                           ! 6085                              0,
33923 8870                        00            .byte	0
33924                                           ! 6086                  
33925                                           ! 6086        0,
33926 8871                        00            .byte	0
33927                                           ! 6087                              0,
33928 8872                        00            .byte	0
33929                                           ! 6088                                0,
33930 8873                        00            .byte	0
33931                                           ! 6089                        0xE0000000,
33932 8874                      0000            .word	0
33933 8876                      E000            .word	$E000
33934                                           ! 6090                               0,
33935 8878                      0000            .word	0
33936 887A                      0000            .word	0
33937                                           ! 6091                             0,
33938 887C                      0000            .word	0
33939                                           ! 6092                                320,
33940 887E                      0140            .word	$140
33941                                           ! 6093                             0,
33942 8880                        00            .byte	0
33943                                           ! 6094                             0,
33944 8881                        00            .byte	0
33945                                           ! 6095                           0,
33946 8882                        00            .byte	0
33947                                           ! 6096                                0,
33948 8883                        00            .byte	0
33949                                           ! 6097                             0,
33950 8884                        00            .byte	0
33951                                           ! 6098                                  0,
33952 8885                        00            .byte	0
33953                                           ! 6099                            0,
33954 8886                        00            .byte	0
33955                                           ! 6100                                 0,
33956 8887                        00            .byte	0
33957                                           ! 6101                            0,
33958 8888                        00            .byte	0
33959                                           ! 6102                                 0,
33960 8889                        00            .byte	0
33961                                           ! 6103                          0,
33962 888A                      0000            .word	0
33963 888C                      0000            .word	0
33964                                           ! 6104 } },
33965                                           ! 6105 { 0x0147,
33966 888E                      0147            .word	$147
33967                                           ! 6106 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33968 8890                      009B            .word	$9B
33969                                           ! 6107                           0x01 | 0x02 | 0x04,
33970 8892                        07            .byte	7
33971                                           ! 6108                           0,
33972 8893                        00            .byte	0
33973                                           ! 6109                           64,
33974 8894                      0040            .word	$40
33975                                           ! 6110                    64,
33976 8896                      0040            .word	$40
33977                                           ! 6111                        0xA000,
33978 8898                      A000            .word	$A000
33979                                           ! 6112                        0x0000,
33980 889A                      0000            .word	0
33981                                           ! 6113                       0,
33982 889C                      0000            .word	0
33983 889E                      0000            .word	0
33984                                           ! 6114                             6400,
33985 88A0                      1900            .word	$1900
33986                                           ! 6115                        1600,
33987 88A2                      0640            .word	$640
33988                                           ! 6116                        1200,
33989 88A4                      04B0            .word	$4B0
33990                                           ! 6117                      8,
33991 88A6                        08            .byte	8
33992                                           ! 6118                      16,
33993 88A7                        10            .byte	$10
33994                                           ! 6119                           1,
33995 88A8                        01            .byte	1
33996                                           ! 6120                         32,
33997 88A9                        20            .byte	$20
33998                                           ! 6121                          118,
33999 88AA                        76            .byte	$76
34000                                           ! 6122                        0x06,
34001 88AB                        06            .byte	6
34002                                           ! 6123                     0,
34003 88AC                        00            .byte	0
34004                                           ! 6124                               1,
34005 88AD                        01            .byte	1
34006                                           ! 6125                          0,
34007 88AE                        00            .byte	0
34008                                           ! 6126                        8,
34009 88AF                        08            .byte	8
34010                                           ! 6127                             16,
34011 88B0                        10            .byte	$10
34012                                           ! 6128                          8,
34013 88B1                        08            .byte	8
34014                                           ! 6129                               8,
34015 88B2                        08            .byte	8
34016                                           ! 6130                         8,
34017 88B3                        08            .byte	8
34018                                           ! 6131                              0,
34019 88B4                        00            .byte	0
34020                                           ! 6132                         8,
34021 88B5                        08            .byte	8
34022                                           ! 6133                              24,
34023 88B6                        18            .byte	$18
34024                                           ! 6134                                0x02,
34025 88B7                        02            .byte	2
34026                                           ! 6135                        0xE0000000,
34027 88B8                      0000            .word	0
34028 88BA                      E000            .word	$E000
34029                                           ! 6136                               0,
34030 88BC                      0000            .word	0
34031 88BE                      0000            .word	0
34032                                           ! 6137                             0,
34033 88C0                      0000            .word	0
34034                                           ! 6138                                6400,
34035 88C2                      1900            .word	$1900
34036                                           ! 6139                             0,
34037 88C4                        00            .byte	0
34038                                           ! 6140                             0,
34039 88C5                        00            .byte	0
34040                                           ! 6141                           8,
34041 88C6                        08            .byte	8
34042                                           ! 6142                                16,
34043 88C7                        10            .byte	$10
34044                                           ! 6143                             8,
34045 88C8                        08            .byte	8
34046                                           ! 6144                                  8,
34047 88C9                        08            .byte	8
34048                                           ! 6145                            8,
34049 88CA                        08            .byte	8
34050                                           ! 6146                                 0,
34051 88CB                        00            .byte	0
34052                                           ! 6147                            8,
34053 88CC                        08            .byte	8
34054                                           ! 6148                                 24,
34055 88CD                        18            .byte	$18
34056                                           ! 6149                          0,
34057 88CE                      0000            .word	0
34058 88D0                      0000            .word	0
34059                                           ! 6150 } },
34060                                           ! 6151 { 0x0148,
34061 88D2                      0148            .word	$148
34062                                           ! 6152 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34063 88D4                      009B            .word	$9B
34064                                           ! 6153                           0x01 | 0x02 | 0x04,
34065 88D6                        07            .byte	7
34066                                           ! 6154 
34067                                           ! 6154                           0,
34068 88D7                        00            .byte	0
34069                                           ! 6155                           64,
34070 88D8                      0040            .word	$40
34071                                           ! 6156                    64,
34072 88DA                      0040            .word	$40
34073                                           ! 6157                        0xA000,
34074 88DC                      A000            .word	$A000
34075                                           ! 6158                        0x0000,
34076 88DE                      0000            .word	0
34077                                           ! 6159                       0,
34078 88E0                      0000            .word	0
34079 88E2                      0000            .word	0
34080                                           ! 6160                             1152,
34081 88E4                      0480            .word	$480
34082                                           ! 6161                        1152,
34083 88E6                      0480            .word	$480
34084                                           ! 6162                        864,
34085 88E8                      0360            .word	$360
34086                                           ! 6163                      8,
34087 88EA                        08            .byte	8
34088                                           ! 6164                      16,
34089 88EB                        10            .byte	$10
34090                                           ! 6165                           1,
34091 88EC                        01            .byte	1
34092                                           ! 6166                         8,
34093 88ED                        08            .byte	8
34094                                           ! 6167                          16,
34095 88EE                        10            .byte	$10
34096                                           ! 6168                        0x04,
34097 88EF                        04            .byte	4
34098                                           ! 6169                     0,
34099 88F0                        00            .byte	0
34100                                           ! 6170                               15,
34101 88F1                        0F            .byte	$F
34102                                           ! 6171                          0,
34103 88F2                        00            .byte	0
34104                                           ! 6172                        0,
34105 88F3                        00            .byte	0
34106                                           ! 6173                             0,
34107 88F4                        00            .byte	0
34108                                           ! 6174                          0,
34109 88F5                        00            .byte	0
34110                                           ! 6175                               0,
34111 88F6                        00            .byte	0
34112                                           ! 6176                         0,
34113 88F7                        00            .byte	0
34114                                           ! 6177                              0,
34115 88F8                        00            .byte	0
34116                                           ! 6178                         0,
34117 88F9                        00            .byte	0
34118                                           ! 6179                              0,
34119 88FA                        00            .byte	0
34120                                           ! 6180                                0,
34121 88FB                        00            .byte	0
34122                                           ! 6181                        0xE0000000,
34123 88FC                      0000            .word	0
34124 88FE                      E000            .word	$E000
34125                                           ! 6182                               0,
34126 8900                      0000            .word	0
34127 8902                      0000            .word	0
34128                                           ! 6183                             0,
34129 8904                      0000            .word	0
34130                                           ! 6184                                1152,
34131 8906                      0480            .word	$480
34132                                           ! 6185                             0,
34133 8908                        00            .byte	0
34134                                           ! 6186                             0,
34135 8909                        00            .byte	0
34136                                           ! 6187                           0,
34137 890A                        00            .byte	0
34138                                           ! 6188                                0,
34139 890B                        00            .byte	0
34140                                           ! 6189                             0,
34141 890C                        00            .byte	0
34142                                           ! 6190                                  0,
34143 890D                        00            .byte	0
34144                                           ! 6191                            0,
34145 890E                        00            .byte	0
34146                                           ! 6192                                 0,
34147 890F                        00            .byte	0
34148                                           ! 6193                            0,
34149 8910                        00            .byte	0
34150                                           ! 6194                                 0,
34151 8911                        00            .byte	0
34152                                           ! 6195                          0,
34153 8912                      0000            .word	0
34154 8914                      0000            .word	0
34155                                           ! 6196 } },
34156                                           ! 6197 { 0x0149,
34157 8916                      0149            .word	$149
34158                                           ! 6198 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34159 8918                      009B            .word	$9B
34160                                           ! 6199                           0x01 | 0x02 | 0x04,
34161 891A                        07            .byte	7
34162                                           ! 6200                           0,
34163 891B                        00            .byte	0
34164                                           ! 6201                           64,
34165 891C                      0040            .word	$40
34166                                           ! 6202                    64,
34167 891E                      0040            .word	$40
34168                                           ! 6203                        0xA000,
34169 8920                      A000            .word	$A000
34170                                           ! 6204                        0x0000,
34171 8922                      0000            .word	0
34172                                           ! 6205                       0,
34173 8924                      0000            .word	0
34174 8926                      0000            .word	0
34175                                           ! 6206                             2304,
34176 8928                      0900            .word	$900
34177                                           ! 6207                        1152,
34178 892A                      0480            .word	$480
34179                                           ! 6208                        864,
34180 892C                      0360            .word	$360
34181                                           ! 6209                      8,
34182 892E                        08            .byte	8
34183                                           ! 6210                      16,
34184 892F                        10            .byte	$10
34185                                           ! 6211                           1,
34186 8930                        01            .byte	1
34187                                           ! 6212                         15,
34188 8931                        0F            .byte	$F
34189                                           ! 6213                          31,
34190 8932                        1F            .byte	$1F
34191                                           ! 6214                        0x06,
34192 8933                        06            .byte	6
34193                                           ! 6215                     0,
34194 8934                        00            .byte	0
34195                                           ! 6216                               7,
34196 8935                        07            .byte	7
34197                                           ! 6217                          0,
34198 8936                        00            .byte	0
34199                                           ! 6218                        5,
34200 8937                        05            .byte	5
34201                                           ! 6219                             10,
34202 8938                        0A            .byte	$A
34203                                           ! 6220                          5,
34204 8939                        05            .byte	5
34205                                           ! 6221                               5,
34206 893A                        05            .byte	5
34207                                           ! 6222                         5,
34208 893B                        05            .byte	5
34209                                           ! 6223                        
34210                                           ! 6223       0,
34211 893C                        00            .byte	0
34212                                           ! 6224                         1,
34213 893D                        01            .byte	1
34214                                           ! 6225                              15,
34215 893E                        0F            .byte	$F
34216                                           ! 6226                                0,
34217 893F                        00            .byte	0
34218                                           ! 6227                        0xE0000000,
34219 8940                      0000            .word	0
34220 8942                      E000            .word	$E000
34221                                           ! 6228                               0,
34222 8944                      0000            .word	0
34223 8946                      0000            .word	0
34224                                           ! 6229                             0,
34225 8948                      0000            .word	0
34226                                           ! 6230                                2304,
34227 894A                      0900            .word	$900
34228                                           ! 6231                             0,
34229 894C                        00            .byte	0
34230                                           ! 6232                             0,
34231 894D                        00            .byte	0
34232                                           ! 6233                           5,
34233 894E                        05            .byte	5
34234                                           ! 6234                                10,
34235 894F                        0A            .byte	$A
34236                                           ! 6235                             5,
34237 8950                        05            .byte	5
34238                                           ! 6236                                  5,
34239 8951                        05            .byte	5
34240                                           ! 6237                            5,
34241 8952                        05            .byte	5
34242                                           ! 6238                                 0,
34243 8953                        00            .byte	0
34244                                           ! 6239                            1,
34245 8954                        01            .byte	1
34246                                           ! 6240                                 15,
34247 8955                        0F            .byte	$F
34248                                           ! 6241                          0,
34249 8956                      0000            .word	0
34250 8958                      0000            .word	0
34251                                           ! 6242 } },
34252                                           ! 6243 { 0x014a,
34253 895A                      014A            .word	$14A
34254                                           ! 6244 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34255 895C                      009B            .word	$9B
34256                                           ! 6245                           0x01 | 0x02 | 0x04,
34257 895E                        07            .byte	7
34258                                           ! 6246                           0,
34259 895F                        00            .byte	0
34260                                           ! 6247                           64,
34261 8960                      0040            .word	$40
34262                                           ! 6248                    64,
34263 8962                      0040            .word	$40
34264                                           ! 6249                        0xA000,
34265 8964                      A000            .word	$A000
34266                                           ! 6250                        0x0000,
34267 8966                      0000            .word	0
34268                                           ! 6251                       0,
34269 8968                      0000            .word	0
34270 896A                      0000            .word	0
34271                                           ! 6252                             2304,
34272 896C                      0900            .word	$900
34273                                           ! 6253                        1152,
34274 896E                      0480            .word	$480
34275                                           ! 6254                        864,
34276 8970                      0360            .word	$360
34277                                           ! 6255                      8,
34278 8972                        08            .byte	8
34279                                           ! 6256                      16,
34280 8973                        10            .byte	$10
34281                                           ! 6257                           1,
34282 8974                        01            .byte	1
34283                                           ! 6258                         16,
34284 8975                        10            .byte	$10
34285                                           ! 6259                          31,
34286 8976                        1F            .byte	$1F
34287                                           ! 6260                        0x06,
34288 8977                        06            .byte	6
34289                                           ! 6261                     0,
34290 8978                        00            .byte	0
34291                                           ! 6262                               7,
34292 8979                        07            .byte	7
34293                                           ! 6263                          0,
34294 897A                        00            .byte	0
34295                                           ! 6264                        5,
34296 897B                        05            .byte	5
34297                                           ! 6265                             11,
34298 897C                        0B            .byte	$B
34299                                           ! 6266                          6,
34300 897D                        06            .byte	6
34301                                           ! 6267                               5,
34302 897E                        05            .byte	5
34303                                           ! 6268                         5,
34304 897F                        05            .byte	5
34305                                           ! 6269                              0,
34306 8980                        00            .byte	0
34307                                           ! 6270                         0,
34308 8981                        00            .byte	0
34309                                           ! 6271                              0,
34310 8982                        00            .byte	0
34311                                           ! 6272                                0,
34312 8983                        00            .byte	0
34313                                           ! 6273                        0xE0000000,
34314 8984                      0000            .word	0
34315 8986                      E000            .word	$E000
34316                                           ! 6274                               0,
34317 8988                      0000            .word	0
34318 898A                      0000            .word	0
34319                                           ! 6275                             0,
34320 898C                      0000            .word	0
34321                                           ! 6276                                2304,
34322 898E                      0900            .word	$900
34323                                           ! 6277                             0,
34324 8990                        00            .byte	0
34325                                           ! 6278                             0,
34326 8991                        00            .byte	0
34327                                           ! 6279                           5,
34328 8992                        05            .byte	5
34329                                           ! 6280                                11,
34330 8993                        0B            .byte	$B
34331                                           ! 6281                             6,
34332 8994                        06            .byte	6
34333                                           ! 6282                                  5,
34334 8995                        05            .byte	5
34335                                           ! 6283                            5,
34336 8996                        05            .byte	5
34337                                           ! 6284                                 0,
34338 8997                        00            .byte	0
34339                                           ! 6285                            0,
34340 8998                        00            .byte	0
34341                                           ! 6286                                 0,
34342 8999                        00            .byte	0
34343                                           ! 6287                          0,
34344 899A                      0000            .word	0
34345 899C                      0000            .word	0
34346                                           ! 6288 } },
34347                                           ! 6289 { 0x014b,
34348 899E                      014B            .word	$14B
34349                                           ! 6290 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34350 89A0                      009B            .word	$9B
34351                                           ! 6291                        
34352                                           ! 6291    0x01 | 0x02 | 0x04,
34353 89A2                        07            .byte	7
34354                                           ! 6292                           0,
34355 89A3                        00            .byte	0
34356                                           ! 6293                           64,
34357 89A4                      0040            .word	$40
34358                                           ! 6294                    64,
34359 89A6                      0040            .word	$40
34360                                           ! 6295                        0xA000,
34361 89A8                      A000            .word	$A000
34362                                           ! 6296                        0x0000,
34363 89AA                      0000            .word	0
34364                                           ! 6297                       0,
34365 89AC                      0000            .word	0
34366 89AE                      0000            .word	0
34367                                           ! 6298                             3456,
34368 89B0                      0D80            .word	$D80
34369                                           ! 6299                        1152,
34370 89B2                      0480            .word	$480
34371                                           ! 6300                        864,
34372 89B4                      0360            .word	$360
34373                                           ! 6301                      8,
34374 89B6                        08            .byte	8
34375                                           ! 6302                      16,
34376 89B7                        10            .byte	$10
34377                                           ! 6303                           1,
34378 89B8                        01            .byte	1
34379                                           ! 6304                         24,
34380 89B9                        18            .byte	$18
34381                                           ! 6305                          46,
34382 89BA                        2E            .byte	$2E
34383                                           ! 6306                        0x06,
34384 89BB                        06            .byte	6
34385                                           ! 6307                     0,
34386 89BC                        00            .byte	0
34387                                           ! 6308                               4,
34388 89BD                        04            .byte	4
34389                                           ! 6309                          0,
34390 89BE                        00            .byte	0
34391                                           ! 6310                        8,
34392 89BF                        08            .byte	8
34393                                           ! 6311                             16,
34394 89C0                        10            .byte	$10
34395                                           ! 6312                          8,
34396 89C1                        08            .byte	8
34397                                           ! 6313                               8,
34398 89C2                        08            .byte	8
34399                                           ! 6314                         8,
34400 89C3                        08            .byte	8
34401                                           ! 6315                              0,
34402 89C4                        00            .byte	0
34403                                           ! 6316                         0,
34404 89C5                        00            .byte	0
34405                                           ! 6317                              0,
34406 89C6                        00            .byte	0
34407                                           ! 6318                                0,
34408 89C7                        00            .byte	0
34409                                           ! 6319                        0xE0000000,
34410 89C8                      0000            .word	0
34411 89CA                      E000            .word	$E000
34412                                           ! 6320                               0,
34413 89CC                      0000            .word	0
34414 89CE                      0000            .word	0
34415                                           ! 6321                             0,
34416 89D0                      0000            .word	0
34417                                           ! 6322                                3456,
34418 89D2                      0D80            .word	$D80
34419                                           ! 6323                             0,
34420 89D4                        00            .byte	0
34421                                           ! 6324                             0,
34422 89D5                        00            .byte	0
34423                                           ! 6325                           8,
34424 89D6                        08            .byte	8
34425                                           ! 6326                                16,
34426 89D7                        10            .byte	$10
34427                                           ! 6327                             8,
34428 89D8                        08            .byte	8
34429                                           ! 6328                                  8,
34430 89D9                        08            .byte	8
34431                                           ! 6329                            8,
34432 89DA                        08            .byte	8
34433                                           ! 6330                                 0,
34434 89DB                        00            .byte	0
34435                                           ! 6331                            0,
34436 89DC                        00            .byte	0
34437                                           ! 6332                                 0,
34438 89DD                        00            .byte	0
34439                                           ! 6333                          0,
34440 89DE                      0000            .word	0
34441 89E0                      0000            .word	0
34442                                           ! 6334 } },
34443                                           ! 6335 { 0x014c,
34444 89E2                      014C            .word	$14C
34445                                           ! 6336 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34446 89E4                      009B            .word	$9B
34447                                           ! 6337                           0x01 | 0x02 | 0x04,
34448 89E6                        07            .byte	7
34449                                           ! 6338                           0,
34450 89E7                        00            .byte	0
34451                                           ! 6339                           64,
34452 89E8                      0040            .word	$40
34453                                           ! 6340                    64,
34454 89EA                      0040            .word	$40
34455                                           ! 6341                        0xA000,
34456 89EC                      A000            .word	$A000
34457                                           ! 6342                        0x0000,
34458 89EE                      0000            .word	0
34459                                           ! 6343                       0,
34460 89F0                      0000            .word	0
34461 89F2                      0000            .word	0
34462                                           ! 6344                             4608,
34463 89F4                      1200            .word	$1200
34464                                           ! 6345                        1152,
34465 89F6                      0480            .word	$480
34466                                           ! 6346                        864,
34467 89F8                      0360            .word	$360
34468                                           ! 6347                      8,
34469 89FA                        08            .byte	8
34470                                           ! 6348                      16,
34471 89FB                        10            .byte	$10
34472                                           ! 6349                           1,
34473 89FC                        01            .byte	1
34474                                           ! 6350                         32,
34475 89FD                        20            .byte	$20
34476                                           ! 6351                          61,
34477 89FE                        3D            .byte	$3D
34478                                           ! 6352                        0x06,
34479 89FF                        06            .byte	6
34480                                           ! 6353                     0,
34481 8A00                        00            .byte	0
34482                                           ! 6354                               3,
34483 8A01                        03            .byte	3
34484                                           ! 6355                          0,
34485 8A02                        00            .byte	0
34486                                           ! 6356                        8,
34487 8A03                        08            .byte	8
34488                                           ! 6357                             16,
34489 8A04                        10            .byte	$10
34490                                           ! 6358                          8,
34491 8A05                        08            .byte	8
34492                                           ! 6359                               8,
34493 8A06                        08            .byte	8
34494                                           ! 6360                         8
34495                                           ! 6360 ,
34496 8A07                        08            .byte	8
34497                                           ! 6361                              0,
34498 8A08                        00            .byte	0
34499                                           ! 6362                         8,
34500 8A09                        08            .byte	8
34501                                           ! 6363                              24,
34502 8A0A                        18            .byte	$18
34503                                           ! 6364                                0x02,
34504 8A0B                        02            .byte	2
34505                                           ! 6365                        0xE0000000,
34506 8A0C                      0000            .word	0
34507 8A0E                      E000            .word	$E000
34508                                           ! 6366                               0,
34509 8A10                      0000            .word	0
34510 8A12                      0000            .word	0
34511                                           ! 6367                             0,
34512 8A14                      0000            .word	0
34513                                           ! 6368                                4608,
34514 8A16                      1200            .word	$1200
34515                                           ! 6369                             0,
34516 8A18                        00            .byte	0
34517                                           ! 6370                             0,
34518 8A19                        00            .byte	0
34519                                           ! 6371                           8,
34520 8A1A                        08            .byte	8
34521                                           ! 6372                                16,
34522 8A1B                        10            .byte	$10
34523                                           ! 6373                             8,
34524 8A1C                        08            .byte	8
34525                                           ! 6374                                  8,
34526 8A1D                        08            .byte	8
34527                                           ! 6375                            8,
34528 8A1E                        08            .byte	8
34529                                           ! 6376                                 0,
34530 8A1F                        00            .byte	0
34531                                           ! 6377                            8,
34532 8A20                        08            .byte	8
34533                                           ! 6378                                 24,
34534 8A21                        18            .byte	$18
34535                                           ! 6379                          0,
34536 8A22                      0000            .word	0
34537 8A24                      0000            .word	0
34538                                           ! 6380 } },
34539                                           ! 6381 { 0x0178,
34540 8A26                      0178            .word	$178
34541                                           ! 6382 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34542 8A28                      009B            .word	$9B
34543                                           ! 6383                           0x01 | 0x02 | 0x04,
34544 8A2A                        07            .byte	7
34545                                           ! 6384                           0,
34546 8A2B                        00            .byte	0
34547                                           ! 6385                           64,
34548 8A2C                      0040            .word	$40
34549                                           ! 6386                    64,
34550 8A2E                      0040            .word	$40
34551                                           ! 6387                        0xA000,
34552 8A30                      A000            .word	$A000
34553                                           ! 6388                        0x0000,
34554 8A32                      0000            .word	0
34555                                           ! 6389                       0,
34556 8A34                      0000            .word	0
34557 8A36                      0000            .word	0
34558                                           ! 6390                             2560,
34559 8A38                      0A00            .word	$A00
34560                                           ! 6391                        1280,
34561 8A3A                      0500            .word	$500
34562                                           ! 6392                        800,
34563 8A3C                      0320            .word	$320
34564                                           ! 6393                      8,
34565 8A3E                        08            .byte	8
34566                                           ! 6394                      16,
34567 8A3F                        10            .byte	$10
34568                                           ! 6395                           1,
34569 8A40                        01            .byte	1
34570                                           ! 6396                         16,
34571 8A41                        10            .byte	$10
34572                                           ! 6397                          32,
34573 8A42                        20            .byte	$20
34574                                           ! 6398                        0x06,
34575 8A43                        06            .byte	6
34576                                           ! 6399                     0,
34577 8A44                        00            .byte	0
34578                                           ! 6400                               7,
34579 8A45                        07            .byte	7
34580                                           ! 6401                          0,
34581 8A46                        00            .byte	0
34582                                           ! 6402                        5,
34583 8A47                        05            .byte	5
34584                                           ! 6403                             11,
34585 8A48                        0B            .byte	$B
34586                                           ! 6404                          6,
34587 8A49                        06            .byte	6
34588                                           ! 6405                               5,
34589 8A4A                        05            .byte	5
34590                                           ! 6406                         5,
34591 8A4B                        05            .byte	5
34592                                           ! 6407                              0,
34593 8A4C                        00            .byte	0
34594                                           ! 6408                         0,
34595 8A4D                        00            .byte	0
34596                                           ! 6409                              0,
34597 8A4E                        00            .byte	0
34598                                           ! 6410                                0,
34599 8A4F                        00            .byte	0
34600                                           ! 6411                        0xE0000000,
34601 8A50                      0000            .word	0
34602 8A52                      E000            .word	$E000
34603                                           ! 6412                               0,
34604 8A54                      0000            .word	0
34605 8A56                      0000            .word	0
34606                                           ! 6413                             0,
34607 8A58                      0000            .word	0
34608                                           ! 6414                                2560,
34609 8A5A                      0A00            .word	$A00
34610                                           ! 6415                             0,
34611 8A5C                        00            .byte	0
34612                                           ! 6416                             0,
34613 8A5D                        00            .byte	0
34614                                           ! 6417                           5,
34615 8A5E                        05            .byte	5
34616                                           ! 6418                                11,
34617 8A5F                        0B            .byte	$B
34618                                           ! 6419                             6,
34619 8A60                        06            .byte	6
34620                                           ! 6420                                  5,
34621 8A61                        05            .byte	5
34622                                           ! 6421                            5,
34623 8A62                        05            .byte	5
34624                                           ! 6422                                 0,
34625 8A63                        00            .byte	0
34626                                           ! 6423                            0,
34627 8A64                        00            .byte	0
34628                                           ! 6424                                 0,
34629 8A65                        00            .byte	0
34630                                           ! 6425                          0,
34631 8A66                      0000            .word	0
34632 8A68                      0000            .word	0
34633                                           ! 6426 } },
34634                                           ! 6427 { 0x0179,
34635 8A6A                      0179            .word	$179
34636                                           ! 6428 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0
34637                                           ! 6428 010,
34638 8A6C                      009B            .word	$9B
34639                                           ! 6429                           0x01 | 0x02 | 0x04,
34640 8A6E                        07            .byte	7
34641                                           ! 6430                           0,
34642 8A6F                        00            .byte	0
34643                                           ! 6431                           64,
34644 8A70                      0040            .word	$40
34645                                           ! 6432                    64,
34646 8A72                      0040            .word	$40
34647                                           ! 6433                        0xA000,
34648 8A74                      A000            .word	$A000
34649                                           ! 6434                        0x0000,
34650 8A76                      0000            .word	0
34651                                           ! 6435                       0,
34652 8A78                      0000            .word	0
34653 8A7A                      0000            .word	0
34654                                           ! 6436                             3840,
34655 8A7C                      0F00            .word	$F00
34656                                           ! 6437                        1280,
34657 8A7E                      0500            .word	$500
34658                                           ! 6438                        800,
34659 8A80                      0320            .word	$320
34660                                           ! 6439                      8,
34661 8A82                        08            .byte	8
34662                                           ! 6440                      16,
34663 8A83                        10            .byte	$10
34664                                           ! 6441                           1,
34665 8A84                        01            .byte	1
34666                                           ! 6442                         24,
34667 8A85                        18            .byte	$18
34668                                           ! 6443                          47,
34669 8A86                        2F            .byte	$2F
34670                                           ! 6444                        0x06,
34671 8A87                        06            .byte	6
34672                                           ! 6445                     0,
34673 8A88                        00            .byte	0
34674                                           ! 6446                               4,
34675 8A89                        04            .byte	4
34676                                           ! 6447                          0,
34677 8A8A                        00            .byte	0
34678                                           ! 6448                        8,
34679 8A8B                        08            .byte	8
34680                                           ! 6449                             16,
34681 8A8C                        10            .byte	$10
34682                                           ! 6450                          8,
34683 8A8D                        08            .byte	8
34684                                           ! 6451                               8,
34685 8A8E                        08            .byte	8
34686                                           ! 6452                         8,
34687 8A8F                        08            .byte	8
34688                                           ! 6453                              0,
34689 8A90                        00            .byte	0
34690                                           ! 6454                         0,
34691 8A91                        00            .byte	0
34692                                           ! 6455                              0,
34693 8A92                        00            .byte	0
34694                                           ! 6456                                0,
34695 8A93                        00            .byte	0
34696                                           ! 6457                        0xE0000000,
34697 8A94                      0000            .word	0
34698 8A96                      E000            .word	$E000
34699                                           ! 6458                               0,
34700 8A98                      0000            .word	0
34701 8A9A                      0000            .word	0
34702                                           ! 6459                             0,
34703 8A9C                      0000            .word	0
34704                                           ! 6460                                3840,
34705 8A9E                      0F00            .word	$F00
34706                                           ! 6461                             0,
34707 8AA0                        00            .byte	0
34708                                           ! 6462                             0,
34709 8AA1                        00            .byte	0
34710                                           ! 6463                           8,
34711 8AA2                        08            .byte	8
34712                                           ! 6464                                16,
34713 8AA3                        10            .byte	$10
34714                                           ! 6465                             8,
34715 8AA4                        08            .byte	8
34716                                           ! 6466                                  8,
34717 8AA5                        08            .byte	8
34718                                           ! 6467                            8,
34719 8AA6                        08            .byte	8
34720                                           ! 6468                                 0,
34721 8AA7                        00            .byte	0
34722                                           ! 6469                            0,
34723 8AA8                        00            .byte	0
34724                                           ! 6470                                 0,
34725 8AA9                        00            .byte	0
34726                                           ! 6471                          0,
34727 8AAA                      0000            .word	0
34728 8AAC                      0000            .word	0
34729                                           ! 6472 } },
34730                                           ! 6473 { 0x017a,
34731 8AAE                      017A            .word	$17A
34732                                           ! 6474 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34733 8AB0                      009B            .word	$9B
34734                                           ! 6475                           0x01 | 0x02 | 0x04,
34735 8AB2                        07            .byte	7
34736                                           ! 6476                           0,
34737 8AB3                        00            .byte	0
34738                                           ! 6477                           64,
34739 8AB4                      0040            .word	$40
34740                                           ! 6478                    64,
34741 8AB6                      0040            .word	$40
34742                                           ! 6479                        0xA000,
34743 8AB8                      A000            .word	$A000
34744                                           ! 6480                        0x0000,
34745 8ABA                      0000            .word	0
34746                                           ! 6481                       0,
34747 8ABC                      0000            .word	0
34748 8ABE                      0000            .word	0
34749                                           ! 6482                             5120,
34750 8AC0                      1400            .word	$1400
34751                                           ! 6483                        1280,
34752 8AC2                      0500            .word	$500
34753                                           ! 6484                        800,
34754 8AC4                      0320            .word	$320
34755                                           ! 6485                      8,
34756 8AC6                        08            .byte	8
34757                                           ! 6486                      16,
34758 8AC7                        10            .byte	$10
34759                                           ! 6487                           1,
34760 8AC8                        01            .byte	1
34761                                           ! 6488                         32,
34762 8AC9                        20            .byte	$20
34763                                           ! 6489                          63,
34764 8ACA                        3F            .byte	$3F
34765                                           ! 6490                        0x06,
34766 8ACB                        06            .byte	6
34767                                           ! 6491                     0,
34768 8ACC                        00            .byte	0
34769                                           ! 6492                               3,
34770 8ACD                        03            .byte	3
34771                                           ! 6493                          0,
34772 8ACE                        00            .byte	0
34773                                           ! 6494                        8,
34774 8ACF                        08            .byte	8
34775                                           ! 6495                             16,
34776 8AD0                        10            .byte	$10
34777                                           ! 6496                          8,
34778 8AD1                        08            .byte	8
34779                                           ! 6497                               
34780                                           ! 6497 8,
34781 8AD2                        08            .byte	8
34782                                           ! 6498                         8,
34783 8AD3                        08            .byte	8
34784                                           ! 6499                              0,
34785 8AD4                        00            .byte	0
34786                                           ! 6500                         8,
34787 8AD5                        08            .byte	8
34788                                           ! 6501                              24,
34789 8AD6                        18            .byte	$18
34790                                           ! 6502                                0x02,
34791 8AD7                        02            .byte	2
34792                                           ! 6503                        0xE0000000,
34793 8AD8                      0000            .word	0
34794 8ADA                      E000            .word	$E000
34795                                           ! 6504                               0,
34796 8ADC                      0000            .word	0
34797 8ADE                      0000            .word	0
34798                                           ! 6505                             0,
34799 8AE0                      0000            .word	0
34800                                           ! 6506                                5120,
34801 8AE2                      1400            .word	$1400
34802                                           ! 6507                             0,
34803 8AE4                        00            .byte	0
34804                                           ! 6508                             0,
34805 8AE5                        00            .byte	0
34806                                           ! 6509                           8,
34807 8AE6                        08            .byte	8
34808                                           ! 6510                                16,
34809 8AE7                        10            .byte	$10
34810                                           ! 6511                             8,
34811 8AE8                        08            .byte	8
34812                                           ! 6512                                  8,
34813 8AE9                        08            .byte	8
34814                                           ! 6513                            8,
34815 8AEA                        08            .byte	8
34816                                           ! 6514                                 0,
34817 8AEB                        00            .byte	0
34818                                           ! 6515                            8,
34819 8AEC                        08            .byte	8
34820                                           ! 6516                                 24,
34821 8AED                        18            .byte	$18
34822                                           ! 6517                          0,
34823 8AEE                      0000            .word	0
34824 8AF0                      0000            .word	0
34825                                           ! 6518 } },
34826                                           ! 6519 { 0x017b,
34827 8AF2                      017B            .word	$17B
34828                                           ! 6520 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34829 8AF4                      009B            .word	$9B
34830                                           ! 6521                           0x01 | 0x02 | 0x04,
34831 8AF6                        07            .byte	7
34832                                           ! 6522                           0,
34833 8AF7                        00            .byte	0
34834                                           ! 6523                           64,
34835 8AF8                      0040            .word	$40
34836                                           ! 6524                    64,
34837 8AFA                      0040            .word	$40
34838                                           ! 6525                        0xA000,
34839 8AFC                      A000            .word	$A000
34840                                           ! 6526                        0x0000,
34841 8AFE                      0000            .word	0
34842                                           ! 6527                       0,
34843 8B00                      0000            .word	0
34844 8B02                      0000            .word	0
34845                                           ! 6528                             2560,
34846 8B04                      0A00            .word	$A00
34847                                           ! 6529                        1280,
34848 8B06                      0500            .word	$500
34849                                           ! 6530                        960,
34850 8B08                      03C0            .word	$3C0
34851                                           ! 6531                      8,
34852 8B0A                        08            .byte	8
34853                                           ! 6532                      16,
34854 8B0B                        10            .byte	$10
34855                                           ! 6533                           1,
34856 8B0C                        01            .byte	1
34857                                           ! 6534                         16,
34858 8B0D                        10            .byte	$10
34859                                           ! 6535                          38,
34860 8B0E                        26            .byte	$26
34861                                           ! 6536                        0x06,
34862 8B0F                        06            .byte	6
34863                                           ! 6537                     0,
34864 8B10                        00            .byte	0
34865                                           ! 6538                               5,
34866 8B11                        05            .byte	5
34867                                           ! 6539                          0,
34868 8B12                        00            .byte	0
34869                                           ! 6540                        5,
34870 8B13                        05            .byte	5
34871                                           ! 6541                             11,
34872 8B14                        0B            .byte	$B
34873                                           ! 6542                          6,
34874 8B15                        06            .byte	6
34875                                           ! 6543                               5,
34876 8B16                        05            .byte	5
34877                                           ! 6544                         5,
34878 8B17                        05            .byte	5
34879                                           ! 6545                              0,
34880 8B18                        00            .byte	0
34881                                           ! 6546                         0,
34882 8B19                        00            .byte	0
34883                                           ! 6547                              0,
34884 8B1A                        00            .byte	0
34885                                           ! 6548                                0,
34886 8B1B                        00            .byte	0
34887                                           ! 6549                        0xE0000000,
34888 8B1C                      0000            .word	0
34889 8B1E                      E000            .word	$E000
34890                                           ! 6550                               0,
34891 8B20                      0000            .word	0
34892 8B22                      0000            .word	0
34893                                           ! 6551                             0,
34894 8B24                      0000            .word	0
34895                                           ! 6552                                2560,
34896 8B26                      0A00            .word	$A00
34897                                           ! 6553                             0,
34898 8B28                        00            .byte	0
34899                                           ! 6554                             0,
34900 8B29                        00            .byte	0
34901                                           ! 6555                           5,
34902 8B2A                        05            .byte	5
34903                                           ! 6556                                11,
34904 8B2B                        0B            .byte	$B
34905                                           ! 6557                             6,
34906 8B2C                        06            .byte	6
34907                                           ! 6558                                  5,
34908 8B2D                        05            .byte	5
34909                                           ! 6559                            5,
34910 8B2E                        05            .byte	5
34911                                           ! 6560                                 0,
34912 8B2F                        00            .byte	0
34913                                           ! 6561                            0,
34914 8B30                        00            .byte	0
34915                                           ! 6562                                 0,
34916 8B31                        00            .byte	0
34917                                           ! 6563                          0,
34918 8B32                      0000            .word	0
34919 8B34                      0000            .word	0
34920                                           ! 6564 } },
34921                                           ! 6565 { 0x017c,
34922 8B36                      017C            .word	$17C
34923                                           ! 6566 { 0x0001 | 0x
34924                                           ! 6566 0002 | 0x0008 | 0x0080 | 0x0010,
34925 8B38                      009B            .word	$9B
34926                                           ! 6567                           0x01 | 0x02 | 0x04,
34927 8B3A                        07            .byte	7
34928                                           ! 6568                           0,
34929 8B3B                        00            .byte	0
34930                                           ! 6569                           64,
34931 8B3C                      0040            .word	$40
34932                                           ! 6570                    64,
34933 8B3E                      0040            .word	$40
34934                                           ! 6571                        0xA000,
34935 8B40                      A000            .word	$A000
34936                                           ! 6572                        0x0000,
34937 8B42                      0000            .word	0
34938                                           ! 6573                       0,
34939 8B44                      0000            .word	0
34940 8B46                      0000            .word	0
34941                                           ! 6574                             3840,
34942 8B48                      0F00            .word	$F00
34943                                           ! 6575                        1280,
34944 8B4A                      0500            .word	$500
34945                                           ! 6576                        960,
34946 8B4C                      03C0            .word	$3C0
34947                                           ! 6577                      8,
34948 8B4E                        08            .byte	8
34949                                           ! 6578                      16,
34950 8B4F                        10            .byte	$10
34951                                           ! 6579                           1,
34952 8B50                        01            .byte	1
34953                                           ! 6580                         24,
34954 8B51                        18            .byte	$18
34955                                           ! 6581                          57,
34956 8B52                        39            .byte	$39
34957                                           ! 6582                        0x06,
34958 8B53                        06            .byte	6
34959                                           ! 6583                     0,
34960 8B54                        00            .byte	0
34961                                           ! 6584                               3,
34962 8B55                        03            .byte	3
34963                                           ! 6585                          0,
34964 8B56                        00            .byte	0
34965                                           ! 6586                        8,
34966 8B57                        08            .byte	8
34967                                           ! 6587                             16,
34968 8B58                        10            .byte	$10
34969                                           ! 6588                          8,
34970 8B59                        08            .byte	8
34971                                           ! 6589                               8,
34972 8B5A                        08            .byte	8
34973                                           ! 6590                         8,
34974 8B5B                        08            .byte	8
34975                                           ! 6591                              0,
34976 8B5C                        00            .byte	0
34977                                           ! 6592                         0,
34978 8B5D                        00            .byte	0
34979                                           ! 6593                              0,
34980 8B5E                        00            .byte	0
34981                                           ! 6594                                0,
34982 8B5F                        00            .byte	0
34983                                           ! 6595                        0xE0000000,
34984 8B60                      0000            .word	0
34985 8B62                      E000            .word	$E000
34986                                           ! 6596                               0,
34987 8B64                      0000            .word	0
34988 8B66                      0000            .word	0
34989                                           ! 6597                             0,
34990 8B68                      0000            .word	0
34991                                           ! 6598                                3840,
34992 8B6A                      0F00            .word	$F00
34993                                           ! 6599                             0,
34994 8B6C                        00            .byte	0
34995                                           ! 6600                             0,
34996 8B6D                        00            .byte	0
34997                                           ! 6601                           8,
34998 8B6E                        08            .byte	8
34999                                           ! 6602                                16,
35000 8B6F                        10            .byte	$10
35001                                           ! 6603                             8,
35002 8B70                        08            .byte	8
35003                                           ! 6604                                  8,
35004 8B71                        08            .byte	8
35005                                           ! 6605                            8,
35006 8B72                        08            .byte	8
35007                                           ! 6606                                 0,
35008 8B73                        00            .byte	0
35009                                           ! 6607                            0,
35010 8B74                        00            .byte	0
35011                                           ! 6608                                 0,
35012 8B75                        00            .byte	0
35013                                           ! 6609                          0,
35014 8B76                      0000            .word	0
35015 8B78                      0000            .word	0
35016                                           ! 6610 } },
35017                                           ! 6611 { 0x017d,
35018 8B7A                      017D            .word	$17D
35019                                           ! 6612 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35020 8B7C                      009B            .word	$9B
35021                                           ! 6613                           0x01 | 0x02 | 0x04,
35022 8B7E                        07            .byte	7
35023                                           ! 6614                           0,
35024 8B7F                        00            .byte	0
35025                                           ! 6615                           64,
35026 8B80                      0040            .word	$40
35027                                           ! 6616                    64,
35028 8B82                      0040            .word	$40
35029                                           ! 6617                        0xA000,
35030 8B84                      A000            .word	$A000
35031                                           ! 6618                        0x0000,
35032 8B86                      0000            .word	0
35033                                           ! 6619                       0,
35034 8B88                      0000            .word	0
35035 8B8A                      0000            .word	0
35036                                           ! 6620                             5120,
35037 8B8C                      1400            .word	$1400
35038                                           ! 6621                        1280,
35039 8B8E                      0500            .word	$500
35040                                           ! 6622                        960,
35041 8B90                      03C0            .word	$3C0
35042                                           ! 6623                      8,
35043 8B92                        08            .byte	8
35044                                           ! 6624                      16,
35045 8B93                        10            .byte	$10
35046                                           ! 6625                           1,
35047 8B94                        01            .byte	1
35048                                           ! 6626                         32,
35049 8B95                        20            .byte	$20
35050                                           ! 6627                          75,
35051 8B96                        4B            .byte	$4B
35052                                           ! 6628                        0x06,
35053 8B97                        06            .byte	6
35054                                           ! 6629                     0,
35055 8B98                        00            .byte	0
35056                                           ! 6630                               2,
35057 8B99                        02            .byte	2
35058                                           ! 6631                          0,
35059 8B9A                        00            .byte	0
35060                                           ! 6632                        8,
35061 8B9B                        08            .byte	8
35062                                           ! 6633                             16,
35063 8B9C                        10            .byte	$10
35064                                           ! 6634                          8,
35065 8B9D                        08            .byte	8
35066                                           ! 6635   
35067                                           ! 6635                             8,
35068 8B9E                        08            .byte	8
35069                                           ! 6636                         8,
35070 8B9F                        08            .byte	8
35071                                           ! 6637                              0,
35072 8BA0                        00            .byte	0
35073                                           ! 6638                         8,
35074 8BA1                        08            .byte	8
35075                                           ! 6639                              24,
35076 8BA2                        18            .byte	$18
35077                                           ! 6640                                0x02,
35078 8BA3                        02            .byte	2
35079                                           ! 6641                        0xE0000000,
35080 8BA4                      0000            .word	0
35081 8BA6                      E000            .word	$E000
35082                                           ! 6642                               0,
35083 8BA8                      0000            .word	0
35084 8BAA                      0000            .word	0
35085                                           ! 6643                             0,
35086 8BAC                      0000            .word	0
35087                                           ! 6644                                5120,
35088 8BAE                      1400            .word	$1400
35089                                           ! 6645                             0,
35090 8BB0                        00            .byte	0
35091                                           ! 6646                             0,
35092 8BB1                        00            .byte	0
35093                                           ! 6647                           8,
35094 8BB2                        08            .byte	8
35095                                           ! 6648                                16,
35096 8BB3                        10            .byte	$10
35097                                           ! 6649                             8,
35098 8BB4                        08            .byte	8
35099                                           ! 6650                                  8,
35100 8BB5                        08            .byte	8
35101                                           ! 6651                            8,
35102 8BB6                        08            .byte	8
35103                                           ! 6652                                 0,
35104 8BB7                        00            .byte	0
35105                                           ! 6653                            8,
35106 8BB8                        08            .byte	8
35107                                           ! 6654                                 24,
35108 8BB9                        18            .byte	$18
35109                                           ! 6655                          0,
35110 8BBA                      0000            .word	0
35111 8BBC                      0000            .word	0
35112                                           ! 6656 } },
35113                                           ! 6657 { 0x017e,
35114 8BBE                      017E            .word	$17E
35115                                           ! 6658 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35116 8BC0                      009B            .word	$9B
35117                                           ! 6659                           0x01 | 0x02 | 0x04,
35118 8BC2                        07            .byte	7
35119                                           ! 6660                           0,
35120 8BC3                        00            .byte	0
35121                                           ! 6661                           64,
35122 8BC4                      0040            .word	$40
35123                                           ! 6662                    64,
35124 8BC6                      0040            .word	$40
35125                                           ! 6663                        0xA000,
35126 8BC8                      A000            .word	$A000
35127                                           ! 6664                        0x0000,
35128 8BCA                      0000            .word	0
35129                                           ! 6665                       0,
35130 8BCC                      0000            .word	0
35131 8BCE                      0000            .word	0
35132                                           ! 6666                             2880,
35133 8BD0                      0B40            .word	$B40
35134                                           ! 6667                        1440,
35135 8BD2                      05A0            .word	$5A0
35136                                           ! 6668                        900,
35137 8BD4                      0384            .word	$384
35138                                           ! 6669                      8,
35139 8BD6                        08            .byte	8
35140                                           ! 6670                      16,
35141 8BD7                        10            .byte	$10
35142                                           ! 6671                           1,
35143 8BD8                        01            .byte	1
35144                                           ! 6672                         16,
35145 8BD9                        10            .byte	$10
35146                                           ! 6673                          40,
35147 8BDA                        28            .byte	$28
35148                                           ! 6674                        0x06,
35149 8BDB                        06            .byte	6
35150                                           ! 6675                     0,
35151 8BDC                        00            .byte	0
35152                                           ! 6676                               5,
35153 8BDD                        05            .byte	5
35154                                           ! 6677                          0,
35155 8BDE                        00            .byte	0
35156                                           ! 6678                        5,
35157 8BDF                        05            .byte	5
35158                                           ! 6679                             11,
35159 8BE0                        0B            .byte	$B
35160                                           ! 6680                          6,
35161 8BE1                        06            .byte	6
35162                                           ! 6681                               5,
35163 8BE2                        05            .byte	5
35164                                           ! 6682                         5,
35165 8BE3                        05            .byte	5
35166                                           ! 6683                              0,
35167 8BE4                        00            .byte	0
35168                                           ! 6684                         0,
35169 8BE5                        00            .byte	0
35170                                           ! 6685                              0,
35171 8BE6                        00            .byte	0
35172                                           ! 6686                                0,
35173 8BE7                        00            .byte	0
35174                                           ! 6687                        0xE0000000,
35175 8BE8                      0000            .word	0
35176 8BEA                      E000            .word	$E000
35177                                           ! 6688                               0,
35178 8BEC                      0000            .word	0
35179 8BEE                      0000            .word	0
35180                                           ! 6689                             0,
35181 8BF0                      0000            .word	0
35182                                           ! 6690                                2880,
35183 8BF2                      0B40            .word	$B40
35184                                           ! 6691                             0,
35185 8BF4                        00            .byte	0
35186                                           ! 6692                             0,
35187 8BF5                        00            .byte	0
35188                                           ! 6693                           5,
35189 8BF6                        05            .byte	5
35190                                           ! 6694                                11,
35191 8BF7                        0B            .byte	$B
35192                                           ! 6695                             6,
35193 8BF8                        06            .byte	6
35194                                           ! 6696                                  5,
35195 8BF9                        05            .byte	5
35196                                           ! 6697                            5,
35197 8BFA                        05            .byte	5
35198                                           ! 6698                                 0,
35199 8BFB                        00            .byte	0
35200                                           ! 6699                            0,
35201 8BFC                        00            .byte	0
35202                                           ! 6700                                 0,
35203 8BFD                        00            .byte	0
35204                                           ! 6701                          0,
35205 8BFE                      0000            .word	0
35206 8C00                      0000            .word	0
35207                                           ! 6702 
35208                                           ! 6702 } },
35209                                           ! 6703 { 0x017f,
35210 8C02                      017F            .word	$17F
35211                                           ! 6704 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35212 8C04                      009B            .word	$9B
35213                                           ! 6705                           0x01 | 0x02 | 0x04,
35214 8C06                        07            .byte	7
35215                                           ! 6706                           0,
35216 8C07                        00            .byte	0
35217                                           ! 6707                           64,
35218 8C08                      0040            .word	$40
35219                                           ! 6708                    64,
35220 8C0A                      0040            .word	$40
35221                                           ! 6709                        0xA000,
35222 8C0C                      A000            .word	$A000
35223                                           ! 6710                        0x0000,
35224 8C0E                      0000            .word	0
35225                                           ! 6711                       0,
35226 8C10                      0000            .word	0
35227 8C12                      0000            .word	0
35228                                           ! 6712                             4320,
35229 8C14                      10E0            .word	$10E0
35230                                           ! 6713                        1440,
35231 8C16                      05A0            .word	$5A0
35232                                           ! 6714                        900,
35233 8C18                      0384            .word	$384
35234                                           ! 6715                      8,
35235 8C1A                        08            .byte	8
35236                                           ! 6716                      16,
35237 8C1B                        10            .byte	$10
35238                                           ! 6717                           1,
35239 8C1C                        01            .byte	1
35240                                           ! 6718                         24,
35241 8C1D                        18            .byte	$18
35242                                           ! 6719                          60,
35243 8C1E                        3C            .byte	$3C
35244                                           ! 6720                        0x06,
35245 8C1F                        06            .byte	6
35246                                           ! 6721                     0,
35247 8C20                        00            .byte	0
35248                                           ! 6722                               3,
35249 8C21                        03            .byte	3
35250                                           ! 6723                          0,
35251 8C22                        00            .byte	0
35252                                           ! 6724                        8,
35253 8C23                        08            .byte	8
35254                                           ! 6725                             16,
35255 8C24                        10            .byte	$10
35256                                           ! 6726                          8,
35257 8C25                        08            .byte	8
35258                                           ! 6727                               8,
35259 8C26                        08            .byte	8
35260                                           ! 6728                         8,
35261 8C27                        08            .byte	8
35262                                           ! 6729                              0,
35263 8C28                        00            .byte	0
35264                                           ! 6730                         0,
35265 8C29                        00            .byte	0
35266                                           ! 6731                              0,
35267 8C2A                        00            .byte	0
35268                                           ! 6732                                0,
35269 8C2B                        00            .byte	0
35270                                           ! 6733                        0xE0000000,
35271 8C2C                      0000            .word	0
35272 8C2E                      E000            .word	$E000
35273                                           ! 6734                               0,
35274 8C30                      0000            .word	0
35275 8C32                      0000            .word	0
35276                                           ! 6735                             0,
35277 8C34                      0000            .word	0
35278                                           ! 6736                                4320,
35279 8C36                      10E0            .word	$10E0
35280                                           ! 6737                             0,
35281 8C38                        00            .byte	0
35282                                           ! 6738                             0,
35283 8C39                        00            .byte	0
35284                                           ! 6739                           8,
35285 8C3A                        08            .byte	8
35286                                           ! 6740                                16,
35287 8C3B                        10            .byte	$10
35288                                           ! 6741                             8,
35289 8C3C                        08            .byte	8
35290                                           ! 6742                                  8,
35291 8C3D                        08            .byte	8
35292                                           ! 6743                            8,
35293 8C3E                        08            .byte	8
35294                                           ! 6744                                 0,
35295 8C3F                        00            .byte	0
35296                                           ! 6745                            0,
35297 8C40                        00            .byte	0
35298                                           ! 6746                                 0,
35299 8C41                        00            .byte	0
35300                                           ! 6747                          0,
35301 8C42                      0000            .word	0
35302 8C44                      0000            .word	0
35303                                           ! 6748 } },
35304                                           ! 6749 { 0x0180,
35305 8C46                      0180            .word	$180
35306                                           ! 6750 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35307 8C48                      009B            .word	$9B
35308                                           ! 6751                           0x01 | 0x02 | 0x04,
35309 8C4A                        07            .byte	7
35310                                           ! 6752                           0,
35311 8C4B                        00            .byte	0
35312                                           ! 6753                           64,
35313 8C4C                      0040            .word	$40
35314                                           ! 6754                    64,
35315 8C4E                      0040            .word	$40
35316                                           ! 6755                        0xA000,
35317 8C50                      A000            .word	$A000
35318                                           ! 6756                        0x0000,
35319 8C52                      0000            .word	0
35320                                           ! 6757                       0,
35321 8C54                      0000            .word	0
35322 8C56                      0000            .word	0
35323                                           ! 6758                             5760,
35324 8C58                      1680            .word	$1680
35325                                           ! 6759                        1440,
35326 8C5A                      05A0            .word	$5A0
35327                                           ! 6760                        900,
35328 8C5C                      0384            .word	$384
35329                                           ! 6761                      8,
35330 8C5E                        08            .byte	8
35331                                           ! 6762                      16,
35332 8C5F                        10            .byte	$10
35333                                           ! 6763                           1,
35334 8C60                        01            .byte	1
35335                                           ! 6764                         32,
35336 8C61                        20            .byte	$20
35337                                           ! 6765                          80,
35338 8C62                        50            .byte	$50
35339                                           ! 6766                        0x06,
35340 8C63                        06            .byte	6
35341                                           ! 6767                     0,
35342 8C64                        00            .byte	0
35343                                           ! 6768                               2,
35344 8C65                        02            .byte	2
35345                                           ! 6769                          0,
35346 8C66                        00            .byte	0
35347                                           ! 6770                        8,
35348 8C67                        08            .byte	8
35349                                           ! 6771                             16,
35350 8C68                        10            .byte	$10
35351                                           ! 6772   
35352                                           ! 6772                        8,
35353 8C69                        08            .byte	8
35354                                           ! 6773                               8,
35355 8C6A                        08            .byte	8
35356                                           ! 6774                         8,
35357 8C6B                        08            .byte	8
35358                                           ! 6775                              0,
35359 8C6C                        00            .byte	0
35360                                           ! 6776                         8,
35361 8C6D                        08            .byte	8
35362                                           ! 6777                              24,
35363 8C6E                        18            .byte	$18
35364                                           ! 6778                                0x02,
35365 8C6F                        02            .byte	2
35366                                           ! 6779                        0xE0000000,
35367 8C70                      0000            .word	0
35368 8C72                      E000            .word	$E000
35369                                           ! 6780                               0,
35370 8C74                      0000            .word	0
35371 8C76                      0000            .word	0
35372                                           ! 6781                             0,
35373 8C78                      0000            .word	0
35374                                           ! 6782                                5760,
35375 8C7A                      1680            .word	$1680
35376                                           ! 6783                             0,
35377 8C7C                        00            .byte	0
35378                                           ! 6784                             0,
35379 8C7D                        00            .byte	0
35380                                           ! 6785                           8,
35381 8C7E                        08            .byte	8
35382                                           ! 6786                                16,
35383 8C7F                        10            .byte	$10
35384                                           ! 6787                             8,
35385 8C80                        08            .byte	8
35386                                           ! 6788                                  8,
35387 8C81                        08            .byte	8
35388                                           ! 6789                            8,
35389 8C82                        08            .byte	8
35390                                           ! 6790                                 0,
35391 8C83                        00            .byte	0
35392                                           ! 6791                            8,
35393 8C84                        08            .byte	8
35394                                           ! 6792                                 24,
35395 8C85                        18            .byte	$18
35396                                           ! 6793                          0,
35397 8C86                      0000            .word	0
35398 8C88                      0000            .word	0
35399                                           ! 6794 } },
35400                                           ! 6795 { 0x0181,
35401 8C8A                      0181            .word	$181
35402                                           ! 6796 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35403 8C8C                      009B            .word	$9B
35404                                           ! 6797                           0x01 | 0x02 | 0x04,
35405 8C8E                        07            .byte	7
35406                                           ! 6798                           0,
35407 8C8F                        00            .byte	0
35408                                           ! 6799                           64,
35409 8C90                      0040            .word	$40
35410                                           ! 6800                    64,
35411 8C92                      0040            .word	$40
35412                                           ! 6801                        0xA000,
35413 8C94                      A000            .word	$A000
35414                                           ! 6802                        0x0000,
35415 8C96                      0000            .word	0
35416                                           ! 6803                       0,
35417 8C98                      0000            .word	0
35418 8C9A                      0000            .word	0
35419                                           ! 6804                             2800,
35420 8C9C                      0AF0            .word	$AF0
35421                                           ! 6805                        1400,
35422 8C9E                      0578            .word	$578
35423                                           ! 6806                        1050,
35424 8CA0                      041A            .word	$41A
35425                                           ! 6807                      8,
35426 8CA2                        08            .byte	8
35427                                           ! 6808                      16,
35428 8CA3                        10            .byte	$10
35429                                           ! 6809                           1,
35430 8CA4                        01            .byte	1
35431                                           ! 6810                         16,
35432 8CA5                        10            .byte	$10
35433                                           ! 6811                          45,
35434 8CA6                        2D            .byte	$2D
35435                                           ! 6812                        0x06,
35436 8CA7                        06            .byte	6
35437                                           ! 6813                     0,
35438 8CA8                        00            .byte	0
35439                                           ! 6814                               4,
35440 8CA9                        04            .byte	4
35441                                           ! 6815                          0,
35442 8CAA                        00            .byte	0
35443                                           ! 6816                        5,
35444 8CAB                        05            .byte	5
35445                                           ! 6817                             11,
35446 8CAC                        0B            .byte	$B
35447                                           ! 6818                          6,
35448 8CAD                        06            .byte	6
35449                                           ! 6819                               5,
35450 8CAE                        05            .byte	5
35451                                           ! 6820                         5,
35452 8CAF                        05            .byte	5
35453                                           ! 6821                              0,
35454 8CB0                        00            .byte	0
35455                                           ! 6822                         0,
35456 8CB1                        00            .byte	0
35457                                           ! 6823                              0,
35458 8CB2                        00            .byte	0
35459                                           ! 6824                                0,
35460 8CB3                        00            .byte	0
35461                                           ! 6825                        0xE0000000,
35462 8CB4                      0000            .word	0
35463 8CB6                      E000            .word	$E000
35464                                           ! 6826                               0,
35465 8CB8                      0000            .word	0
35466 8CBA                      0000            .word	0
35467                                           ! 6827                             0,
35468 8CBC                      0000            .word	0
35469                                           ! 6828                                2800,
35470 8CBE                      0AF0            .word	$AF0
35471                                           ! 6829                             0,
35472 8CC0                        00            .byte	0
35473                                           ! 6830                             0,
35474 8CC1                        00            .byte	0
35475                                           ! 6831                           5,
35476 8CC2                        05            .byte	5
35477                                           ! 6832                                11,
35478 8CC3                        0B            .byte	$B
35479                                           ! 6833                             6,
35480 8CC4                        06            .byte	6
35481                                           ! 6834                                  5,
35482 8CC5                        05            .byte	5
35483                                           ! 6835                            5,
35484 8CC6                        05            .byte	5
35485                                           ! 6836                                 0,
35486 8CC7                        00            .byte	0
35487                                           ! 6837                            0,
35488 8CC8                        00            .byte	0
35489                                           ! 6838                                 0,
35490                                           ! 6838 
35491 8CC9                        00            .byte	0
35492                                           ! 6839                          0,
35493 8CCA                      0000            .word	0
35494 8CCC                      0000            .word	0
35495                                           ! 6840 } },
35496                                           ! 6841 { 0x0182,
35497 8CCE                      0182            .word	$182
35498                                           ! 6842 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35499 8CD0                      009B            .word	$9B
35500                                           ! 6843                           0x01 | 0x02 | 0x04,
35501 8CD2                        07            .byte	7
35502                                           ! 6844                           0,
35503 8CD3                        00            .byte	0
35504                                           ! 6845                           64,
35505 8CD4                      0040            .word	$40
35506                                           ! 6846                    64,
35507 8CD6                      0040            .word	$40
35508                                           ! 6847                        0xA000,
35509 8CD8                      A000            .word	$A000
35510                                           ! 6848                        0x0000,
35511 8CDA                      0000            .word	0
35512                                           ! 6849                       0,
35513 8CDC                      0000            .word	0
35514 8CDE                      0000            .word	0
35515                                           ! 6850                             4200,
35516 8CE0                      1068            .word	$1068
35517                                           ! 6851                        1400,
35518 8CE2                      0578            .word	$578
35519                                           ! 6852                        1050,
35520 8CE4                      041A            .word	$41A
35521                                           ! 6853                      8,
35522 8CE6                        08            .byte	8
35523                                           ! 6854                      16,
35524 8CE7                        10            .byte	$10
35525                                           ! 6855                           1,
35526 8CE8                        01            .byte	1
35527                                           ! 6856                         24,
35528 8CE9                        18            .byte	$18
35529                                           ! 6857                          68,
35530 8CEA                        44            .byte	$44
35531                                           ! 6858                        0x06,
35532 8CEB                        06            .byte	6
35533                                           ! 6859                     0,
35534 8CEC                        00            .byte	0
35535                                           ! 6860                               2,
35536 8CED                        02            .byte	2
35537                                           ! 6861                          0,
35538 8CEE                        00            .byte	0
35539                                           ! 6862                        8,
35540 8CEF                        08            .byte	8
35541                                           ! 6863                             16,
35542 8CF0                        10            .byte	$10
35543                                           ! 6864                          8,
35544 8CF1                        08            .byte	8
35545                                           ! 6865                               8,
35546 8CF2                        08            .byte	8
35547                                           ! 6866                         8,
35548 8CF3                        08            .byte	8
35549                                           ! 6867                              0,
35550 8CF4                        00            .byte	0
35551                                           ! 6868                         0,
35552 8CF5                        00            .byte	0
35553                                           ! 6869                              0,
35554 8CF6                        00            .byte	0
35555                                           ! 6870                                0,
35556 8CF7                        00            .byte	0
35557                                           ! 6871                        0xE0000000,
35558 8CF8                      0000            .word	0
35559 8CFA                      E000            .word	$E000
35560                                           ! 6872                               0,
35561 8CFC                      0000            .word	0
35562 8CFE                      0000            .word	0
35563                                           ! 6873                             0,
35564 8D00                      0000            .word	0
35565                                           ! 6874                                4200,
35566 8D02                      1068            .word	$1068
35567                                           ! 6875                             0,
35568 8D04                        00            .byte	0
35569                                           ! 6876                             0,
35570 8D05                        00            .byte	0
35571                                           ! 6877                           8,
35572 8D06                        08            .byte	8
35573                                           ! 6878                                16,
35574 8D07                        10            .byte	$10
35575                                           ! 6879                             8,
35576 8D08                        08            .byte	8
35577                                           ! 6880                                  8,
35578 8D09                        08            .byte	8
35579                                           ! 6881                            8,
35580 8D0A                        08            .byte	8
35581                                           ! 6882                                 0,
35582 8D0B                        00            .byte	0
35583                                           ! 6883                            0,
35584 8D0C                        00            .byte	0
35585                                           ! 6884                                 0,
35586 8D0D                        00            .byte	0
35587                                           ! 6885                          0,
35588 8D0E                      0000            .word	0
35589 8D10                      0000            .word	0
35590                                           ! 6886 } },
35591                                           ! 6887 { 0x0183,
35592 8D12                      0183            .word	$183
35593                                           ! 6888 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35594 8D14                      009B            .word	$9B
35595                                           ! 6889                           0x01 | 0x02 | 0x04,
35596 8D16                        07            .byte	7
35597                                           ! 6890                           0,
35598 8D17                        00            .byte	0
35599                                           ! 6891                           64,
35600 8D18                      0040            .word	$40
35601                                           ! 6892                    64,
35602 8D1A                      0040            .word	$40
35603                                           ! 6893                        0xA000,
35604 8D1C                      A000            .word	$A000
35605                                           ! 6894                        0x0000,
35606 8D1E                      0000            .word	0
35607                                           ! 6895                       0,
35608 8D20                      0000            .word	0
35609 8D22                      0000            .word	0
35610                                           ! 6896                             5600,
35611 8D24                      15E0            .word	$15E0
35612                                           ! 6897                        1400,
35613 8D26                      0578            .word	$578
35614                                           ! 6898                        1050,
35615 8D28                      041A            .word	$41A
35616                                           ! 6899                      8,
35617 8D2A                        08            .byte	8
35618                                           ! 6900                      16,
35619 8D2B                        10            .byte	$10
35620                                           ! 6901                           1,
35621 8D2C                        01            .byte	1
35622                                           ! 6902                         32,
35623 8D2D                        20            .byte	$20
35624                                           ! 6903                          90,
35625 8D2E                        5A            .byte	$5A
35626                                           ! 6904                        0x06,
35627 8D2F                        06            .byte	6
35628                                           ! 6905                     0,
35629 8D30                        00            .byte	0
35630                                           ! 6906                               1,
35631 8D31                        01            .byte	1
35632                                           ! 6907                          0,
35633 8D32                        00            .byte	0
35634                                           ! 6908                        8,
35635 8D33                        08            .byte	8
35636                                           ! 6909    
35637                                           ! 6909                          16,
35638 8D34                        10            .byte	$10
35639                                           ! 6910                          8,
35640 8D35                        08            .byte	8
35641                                           ! 6911                               8,
35642 8D36                        08            .byte	8
35643                                           ! 6912                         8,
35644 8D37                        08            .byte	8
35645                                           ! 6913                              0,
35646 8D38                        00            .byte	0
35647                                           ! 6914                         8,
35648 8D39                        08            .byte	8
35649                                           ! 6915                              24,
35650 8D3A                        18            .byte	$18
35651                                           ! 6916                                0x02,
35652 8D3B                        02            .byte	2
35653                                           ! 6917                        0xE0000000,
35654 8D3C                      0000            .word	0
35655 8D3E                      E000            .word	$E000
35656                                           ! 6918                               0,
35657 8D40                      0000            .word	0
35658 8D42                      0000            .word	0
35659                                           ! 6919                             0,
35660 8D44                      0000            .word	0
35661                                           ! 6920                                5600,
35662 8D46                      15E0            .word	$15E0
35663                                           ! 6921                             0,
35664 8D48                        00            .byte	0
35665                                           ! 6922                             0,
35666 8D49                        00            .byte	0
35667                                           ! 6923                           8,
35668 8D4A                        08            .byte	8
35669                                           ! 6924                                16,
35670 8D4B                        10            .byte	$10
35671                                           ! 6925                             8,
35672 8D4C                        08            .byte	8
35673                                           ! 6926                                  8,
35674 8D4D                        08            .byte	8
35675                                           ! 6927                            8,
35676 8D4E                        08            .byte	8
35677                                           ! 6928                                 0,
35678 8D4F                        00            .byte	0
35679                                           ! 6929                            8,
35680 8D50                        08            .byte	8
35681                                           ! 6930                                 24,
35682 8D51                        18            .byte	$18
35683                                           ! 6931                          0,
35684 8D52                      0000            .word	0
35685 8D54                      0000            .word	0
35686                                           ! 6932 } },
35687                                           ! 6933 { 0x0184,
35688 8D56                      0184            .word	$184
35689                                           ! 6934 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35690 8D58                      009B            .word	$9B
35691                                           ! 6935                           0x01 | 0x02 | 0x04,
35692 8D5A                        07            .byte	7
35693                                           ! 6936                           0,
35694 8D5B                        00            .byte	0
35695                                           ! 6937                           64,
35696 8D5C                      0040            .word	$40
35697                                           ! 6938                    64,
35698 8D5E                      0040            .word	$40
35699                                           ! 6939                        0xA000,
35700 8D60                      A000            .word	$A000
35701                                           ! 6940                        0x0000,
35702 8D62                      0000            .word	0
35703                                           ! 6941                       0,
35704 8D64                      0000            .word	0
35705 8D66                      0000            .word	0
35706                                           ! 6942                             3360,
35707 8D68                      0D20            .word	$D20
35708                                           ! 6943                        1680,
35709 8D6A                      0690            .word	$690
35710                                           ! 6944                        1050,
35711 8D6C                      041A            .word	$41A
35712                                           ! 6945                      8,
35713 8D6E                        08            .byte	8
35714                                           ! 6946                      16,
35715 8D6F                        10            .byte	$10
35716                                           ! 6947                           1,
35717 8D70                        01            .byte	1
35718                                           ! 6948                         16,
35719 8D71                        10            .byte	$10
35720                                           ! 6949                          54,
35721 8D72                        36            .byte	$36
35722                                           ! 6950                        0x06,
35723 8D73                        06            .byte	6
35724                                           ! 6951                     0,
35725 8D74                        00            .byte	0
35726                                           ! 6952                               3,
35727 8D75                        03            .byte	3
35728                                           ! 6953                          0,
35729 8D76                        00            .byte	0
35730                                           ! 6954                        5,
35731 8D77                        05            .byte	5
35732                                           ! 6955                             11,
35733 8D78                        0B            .byte	$B
35734                                           ! 6956                          6,
35735 8D79                        06            .byte	6
35736                                           ! 6957                               5,
35737 8D7A                        05            .byte	5
35738                                           ! 6958                         5,
35739 8D7B                        05            .byte	5
35740                                           ! 6959                              0,
35741 8D7C                        00            .byte	0
35742                                           ! 6960                         0,
35743 8D7D                        00            .byte	0
35744                                           ! 6961                              0,
35745 8D7E                        00            .byte	0
35746                                           ! 6962                                0,
35747 8D7F                        00            .byte	0
35748                                           ! 6963                        0xE0000000,
35749 8D80                      0000            .word	0
35750 8D82                      E000            .word	$E000
35751                                           ! 6964                               0,
35752 8D84                      0000            .word	0
35753 8D86                      0000            .word	0
35754                                           ! 6965                             0,
35755 8D88                      0000            .word	0
35756                                           ! 6966                                3360,
35757 8D8A                      0D20            .word	$D20
35758                                           ! 6967                             0,
35759 8D8C                        00            .byte	0
35760                                           ! 6968                             0,
35761 8D8D                        00            .byte	0
35762                                           ! 6969                           5,
35763 8D8E                        05            .byte	5
35764                                           ! 6970                                11,
35765 8D8F                        0B            .byte	$B
35766                                           ! 6971                             6,
35767 8D90                        06            .byte	6
35768                                           ! 6972                                  5,
35769 8D91                        05            .byte	5
35770                                           ! 6973                            5,
35771 8D92                        05            .byte	5
35772                                           ! 6974                                 0,
35773 8D93                        00            .byte	0
35774                                           ! 6975                            0,
35775 8D94                        00            .byte	0
35776                                           ! 6976    
35777                                           ! 6976                              0,
35778 8D95                        00            .byte	0
35779                                           ! 6977                          0,
35780 8D96                      0000            .word	0
35781 8D98                      0000            .word	0
35782                                           ! 6978 } },
35783                                           ! 6979 { 0x0185,
35784 8D9A                      0185            .word	$185
35785                                           ! 6980 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35786 8D9C                      009B            .word	$9B
35787                                           ! 6981                           0x01 | 0x02 | 0x04,
35788 8D9E                        07            .byte	7
35789                                           ! 6982                           0,
35790 8D9F                        00            .byte	0
35791                                           ! 6983                           64,
35792 8DA0                      0040            .word	$40
35793                                           ! 6984                    64,
35794 8DA2                      0040            .word	$40
35795                                           ! 6985                        0xA000,
35796 8DA4                      A000            .word	$A000
35797                                           ! 6986                        0x0000,
35798 8DA6                      0000            .word	0
35799                                           ! 6987                       0,
35800 8DA8                      0000            .word	0
35801 8DAA                      0000            .word	0
35802                                           ! 6988                             5040,
35803 8DAC                      13B0            .word	$13B0
35804                                           ! 6989                        1680,
35805 8DAE                      0690            .word	$690
35806                                           ! 6990                        1050,
35807 8DB0                      041A            .word	$41A
35808                                           ! 6991                      8,
35809 8DB2                        08            .byte	8
35810                                           ! 6992                      16,
35811 8DB3                        10            .byte	$10
35812                                           ! 6993                           1,
35813 8DB4                        01            .byte	1
35814                                           ! 6994                         24,
35815 8DB5                        18            .byte	$18
35816                                           ! 6995                          81,
35817 8DB6                        51            .byte	$51
35818                                           ! 6996                        0x06,
35819 8DB7                        06            .byte	6
35820                                           ! 6997                     0,
35821 8DB8                        00            .byte	0
35822                                           ! 6998                               2,
35823 8DB9                        02            .byte	2
35824                                           ! 6999                          0,
35825 8DBA                        00            .byte	0
35826                                           ! 7000                        8,
35827 8DBB                        08            .byte	8
35828                                           ! 7001                             16,
35829 8DBC                        10            .byte	$10
35830                                           ! 7002                          8,
35831 8DBD                        08            .byte	8
35832                                           ! 7003                               8,
35833 8DBE                        08            .byte	8
35834                                           ! 7004                         8,
35835 8DBF                        08            .byte	8
35836                                           ! 7005                              0,
35837 8DC0                        00            .byte	0
35838                                           ! 7006                         0,
35839 8DC1                        00            .byte	0
35840                                           ! 7007                              0,
35841 8DC2                        00            .byte	0
35842                                           ! 7008                                0,
35843 8DC3                        00            .byte	0
35844                                           ! 7009                        0xE0000000,
35845 8DC4                      0000            .word	0
35846 8DC6                      E000            .word	$E000
35847                                           ! 7010                               0,
35848 8DC8                      0000            .word	0
35849 8DCA                      0000            .word	0
35850                                           ! 7011                             0,
35851 8DCC                      0000            .word	0
35852                                           ! 7012                                5040,
35853 8DCE                      13B0            .word	$13B0
35854                                           ! 7013                             0,
35855 8DD0                        00            .byte	0
35856                                           ! 7014                             0,
35857 8DD1                        00            .byte	0
35858                                           ! 7015                           8,
35859 8DD2                        08            .byte	8
35860                                           ! 7016                                16,
35861 8DD3                        10            .byte	$10
35862                                           ! 7017                             8,
35863 8DD4                        08            .byte	8
35864                                           ! 7018                                  8,
35865 8DD5                        08            .byte	8
35866                                           ! 7019                            8,
35867 8DD6                        08            .byte	8
35868                                           ! 7020                                 0,
35869 8DD7                        00            .byte	0
35870                                           ! 7021                            0,
35871 8DD8                        00            .byte	0
35872                                           ! 7022                                 0,
35873 8DD9                        00            .byte	0
35874                                           ! 7023                          0,
35875 8DDA                      0000            .word	0
35876 8DDC                      0000            .word	0
35877                                           ! 7024 } },
35878                                           ! 7025 { 0x0186,
35879 8DDE                      0186            .word	$186
35880                                           ! 7026 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35881 8DE0                      009B            .word	$9B
35882                                           ! 7027                           0x01 | 0x02 | 0x04,
35883 8DE2                        07            .byte	7
35884                                           ! 7028                           0,
35885 8DE3                        00            .byte	0
35886                                           ! 7029                           64,
35887 8DE4                      0040            .word	$40
35888                                           ! 7030                    64,
35889 8DE6                      0040            .word	$40
35890                                           ! 7031                        0xA000,
35891 8DE8                      A000            .word	$A000
35892                                           ! 7032                        0x0000,
35893 8DEA                      0000            .word	0
35894                                           ! 7033                       0,
35895 8DEC                      0000            .word	0
35896 8DEE                      0000            .word	0
35897                                           ! 7034                             6720,
35898 8DF0                      1A40            .word	$1A40
35899                                           ! 7035                        1680,
35900 8DF2                      0690            .word	$690
35901                                           ! 7036                        1050,
35902 8DF4                      041A            .word	$41A
35903                                           ! 7037                      8,
35904 8DF6                        08            .byte	8
35905                                           ! 7038                      16,
35906 8DF7                        10            .byte	$10
35907                                           ! 7039                           1,
35908 8DF8                        01            .byte	1
35909                                           ! 7040                         32,
35910 8DF9                        20            .byte	$20
35911                                           ! 7041                          108,
35912 8DFA                        6C            .byte	$6C
35913                                           ! 7042                        0x06,
35914 8DFB                        06            .byte	6
35915                                           ! 7043                     0,
35916 8DFC                        00            .byte	0
35917                                           ! 7044                               1,
35918 8DFD                        01            .byte	1
35919                                           ! 7045                          
35920                                           ! 7045 0,
35921 8DFE                        00            .byte	0
35922                                           ! 7046                        8,
35923 8DFF                        08            .byte	8
35924                                           ! 7047                             16,
35925 8E00                        10            .byte	$10
35926                                           ! 7048                          8,
35927 8E01                        08            .byte	8
35928                                           ! 7049                               8,
35929 8E02                        08            .byte	8
35930                                           ! 7050                         8,
35931 8E03                        08            .byte	8
35932                                           ! 7051                              0,
35933 8E04                        00            .byte	0
35934                                           ! 7052                         8,
35935 8E05                        08            .byte	8
35936                                           ! 7053                              24,
35937 8E06                        18            .byte	$18
35938                                           ! 7054                                0x02,
35939 8E07                        02            .byte	2
35940                                           ! 7055                        0xE0000000,
35941 8E08                      0000            .word	0
35942 8E0A                      E000            .word	$E000
35943                                           ! 7056                               0,
35944 8E0C                      0000            .word	0
35945 8E0E                      0000            .word	0
35946                                           ! 7057                             0,
35947 8E10                      0000            .word	0
35948                                           ! 7058                                6720,
35949 8E12                      1A40            .word	$1A40
35950                                           ! 7059                             0,
35951 8E14                        00            .byte	0
35952                                           ! 7060                             0,
35953 8E15                        00            .byte	0
35954                                           ! 7061                           8,
35955 8E16                        08            .byte	8
35956                                           ! 7062                                16,
35957 8E17                        10            .byte	$10
35958                                           ! 7063                             8,
35959 8E18                        08            .byte	8
35960                                           ! 7064                                  8,
35961 8E19                        08            .byte	8
35962                                           ! 7065                            8,
35963 8E1A                        08            .byte	8
35964                                           ! 7066                                 0,
35965 8E1B                        00            .byte	0
35966                                           ! 7067                            8,
35967 8E1C                        08            .byte	8
35968                                           ! 7068                                 24,
35969 8E1D                        18            .byte	$18
35970                                           ! 7069                          0,
35971 8E1E                      0000            .word	0
35972 8E20                      0000            .word	0
35973                                           ! 7070 } },
35974                                           ! 7071 { 0x0187,
35975 8E22                      0187            .word	$187
35976                                           ! 7072 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35977 8E24                      009B            .word	$9B
35978                                           ! 7073                           0x01 | 0x02 | 0x04,
35979 8E26                        07            .byte	7
35980                                           ! 7074                           0,
35981 8E27                        00            .byte	0
35982                                           ! 7075                           64,
35983 8E28                      0040            .word	$40
35984                                           ! 7076                    64,
35985 8E2A                      0040            .word	$40
35986                                           ! 7077                        0xA000,
35987 8E2C                      A000            .word	$A000
35988                                           ! 7078                        0x0000,
35989 8E2E                      0000            .word	0
35990                                           ! 7079                       0,
35991 8E30                      0000            .word	0
35992 8E32                      0000            .word	0
35993                                           ! 7080                             3840,
35994 8E34                      0F00            .word	$F00
35995                                           ! 7081                        1920,
35996 8E36                      0780            .word	$780
35997                                           ! 7082                        1200,
35998 8E38                      04B0            .word	$4B0
35999                                           ! 7083                      8,
36000 8E3A                        08            .byte	8
36001                                           ! 7084                      16,
36002 8E3B                        10            .byte	$10
36003                                           ! 7085                           1,
36004 8E3C                        01            .byte	1
36005                                           ! 7086                         16,
36006 8E3D                        10            .byte	$10
36007                                           ! 7087                          71,
36008 8E3E                        47            .byte	$47
36009                                           ! 7088                        0x06,
36010 8E3F                        06            .byte	6
36011                                           ! 7089                     0,
36012 8E40                        00            .byte	0
36013                                           ! 7090                               2,
36014 8E41                        02            .byte	2
36015                                           ! 7091                          0,
36016 8E42                        00            .byte	0
36017                                           ! 7092                        5,
36018 8E43                        05            .byte	5
36019                                           ! 7093                             11,
36020 8E44                        0B            .byte	$B
36021                                           ! 7094                          6,
36022 8E45                        06            .byte	6
36023                                           ! 7095                               5,
36024 8E46                        05            .byte	5
36025                                           ! 7096                         5,
36026 8E47                        05            .byte	5
36027                                           ! 7097                              0,
36028 8E48                        00            .byte	0
36029                                           ! 7098                         0,
36030 8E49                        00            .byte	0
36031                                           ! 7099                              0,
36032 8E4A                        00            .byte	0
36033                                           ! 7100                                0,
36034 8E4B                        00            .byte	0
36035                                           ! 7101                        0xE0000000,
36036 8E4C                      0000            .word	0
36037 8E4E                      E000            .word	$E000
36038                                           ! 7102                               0,
36039 8E50                      0000            .word	0
36040 8E52                      0000            .word	0
36041                                           ! 7103                             0,
36042 8E54                      0000            .word	0
36043                                           ! 7104                                3840,
36044 8E56                      0F00            .word	$F00
36045                                           ! 7105                             0,
36046 8E58                        00            .byte	0
36047                                           ! 7106                             0,
36048 8E59                        00            .byte	0
36049                                           ! 7107                           5,
36050 8E5A                        05            .byte	5
36051                                           ! 7108                                11,
36052 8E5B                        0B            .byte	$B
36053                                           ! 7109                             6,
36054 8E5C                        06            .byte	6
36055                                           ! 7110                                  5,
36056 8E5D                        05            .byte	5
36057                                           ! 7111                            5,
36058 8E5E                        05            .byte	5
36059                                           ! 7112                                 0,
36060 8E5F                        00            .byte	0
36061                                           ! 7113  
36062                                           ! 7113                           0,
36063 8E60                        00            .byte	0
36064                                           ! 7114                                 0,
36065 8E61                        00            .byte	0
36066                                           ! 7115                          0,
36067 8E62                      0000            .word	0
36068 8E64                      0000            .word	0
36069                                           ! 7116 } },
36070                                           ! 7117 { 0x0188,
36071 8E66                      0188            .word	$188
36072                                           ! 7118 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36073 8E68                      009B            .word	$9B
36074                                           ! 7119                           0x01 | 0x02 | 0x04,
36075 8E6A                        07            .byte	7
36076                                           ! 7120                           0,
36077 8E6B                        00            .byte	0
36078                                           ! 7121                           64,
36079 8E6C                      0040            .word	$40
36080                                           ! 7122                    64,
36081 8E6E                      0040            .word	$40
36082                                           ! 7123                        0xA000,
36083 8E70                      A000            .word	$A000
36084                                           ! 7124                        0x0000,
36085 8E72                      0000            .word	0
36086                                           ! 7125                       0,
36087 8E74                      0000            .word	0
36088 8E76                      0000            .word	0
36089                                           ! 7126                             5760,
36090 8E78                      1680            .word	$1680
36091                                           ! 7127                        1920,
36092 8E7A                      0780            .word	$780
36093                                           ! 7128                        1200,
36094 8E7C                      04B0            .word	$4B0
36095                                           ! 7129                      8,
36096 8E7E                        08            .byte	8
36097                                           ! 7130                      16,
36098 8E7F                        10            .byte	$10
36099                                           ! 7131                           1,
36100 8E80                        01            .byte	1
36101                                           ! 7132                         24,
36102 8E81                        18            .byte	$18
36103                                           ! 7133                          106,
36104 8E82                        6A            .byte	$6A
36105                                           ! 7134                        0x06,
36106 8E83                        06            .byte	6
36107                                           ! 7135                     0,
36108 8E84                        00            .byte	0
36109                                           ! 7136                               1,
36110 8E85                        01            .byte	1
36111                                           ! 7137                          0,
36112 8E86                        00            .byte	0
36113                                           ! 7138                        8,
36114 8E87                        08            .byte	8
36115                                           ! 7139                             16,
36116 8E88                        10            .byte	$10
36117                                           ! 7140                          8,
36118 8E89                        08            .byte	8
36119                                           ! 7141                               8,
36120 8E8A                        08            .byte	8
36121                                           ! 7142                         8,
36122 8E8B                        08            .byte	8
36123                                           ! 7143                              0,
36124 8E8C                        00            .byte	0
36125                                           ! 7144                         0,
36126 8E8D                        00            .byte	0
36127                                           ! 7145                              0,
36128 8E8E                        00            .byte	0
36129                                           ! 7146                                0,
36130 8E8F                        00            .byte	0
36131                                           ! 7147                        0xE0000000,
36132 8E90                      0000            .word	0
36133 8E92                      E000            .word	$E000
36134                                           ! 7148                               0,
36135 8E94                      0000            .word	0
36136 8E96                      0000            .word	0
36137                                           ! 7149                             0,
36138 8E98                      0000            .word	0
36139                                           ! 7150                                5760,
36140 8E9A                      1680            .word	$1680
36141                                           ! 7151                             0,
36142 8E9C                        00            .byte	0
36143                                           ! 7152                             0,
36144 8E9D                        00            .byte	0
36145                                           ! 7153                           8,
36146 8E9E                        08            .byte	8
36147                                           ! 7154                                16,
36148 8E9F                        10            .byte	$10
36149                                           ! 7155                             8,
36150 8EA0                        08            .byte	8
36151                                           ! 7156                                  8,
36152 8EA1                        08            .byte	8
36153                                           ! 7157                            8,
36154 8EA2                        08            .byte	8
36155                                           ! 7158                                 0,
36156 8EA3                        00            .byte	0
36157                                           ! 7159                            0,
36158 8EA4                        00            .byte	0
36159                                           ! 7160                                 0,
36160 8EA5                        00            .byte	0
36161                                           ! 7161                          0,
36162 8EA6                      0000            .word	0
36163 8EA8                      0000            .word	0
36164                                           ! 7162 } },
36165                                           ! 7163 { 0x0189,
36166 8EAA                      0189            .word	$189
36167                                           ! 7164 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36168 8EAC                      009B            .word	$9B
36169                                           ! 7165                           0x01 | 0x02 | 0x04,
36170 8EAE                        07            .byte	7
36171                                           ! 7166                           0,
36172 8EAF                        00            .byte	0
36173                                           ! 7167                           64,
36174 8EB0                      0040            .word	$40
36175                                           ! 7168                    64,
36176 8EB2                      0040            .word	$40
36177                                           ! 7169                        0xA000,
36178 8EB4                      A000            .word	$A000
36179                                           ! 7170                        0x0000,
36180 8EB6                      0000            .word	0
36181                                           ! 7171                       0,
36182 8EB8                      0000            .word	0
36183 8EBA                      0000            .word	0
36184                                           ! 7172                             7680,
36185 8EBC                      1E00            .word	$1E00
36186                                           ! 7173                        1920,
36187 8EBE                      0780            .word	$780
36188                                           ! 7174                        1200,
36189 8EC0                      04B0            .word	$4B0
36190                                           ! 7175                      8,
36191 8EC2                        08            .byte	8
36192                                           ! 7176                      16,
36193 8EC3                        10            .byte	$10
36194                                           ! 7177                           1,
36195 8EC4                        01            .byte	1
36196                                           ! 7178                         32,
36197 8EC5                        20            .byte	$20
36198                                           ! 7179                          141,
36199 8EC6                        8D            .byte	$8D
36200                                           ! 7180                        0x06,
36201 8EC7                        06            .byte	6
36202                                           ! 7181                     0,
36203 8EC8                        00            .byte	0
36204                                           ! 7182                          
36205                                           ! 7182      0,
36206 8EC9                        00            .byte	0
36207                                           ! 7183                          0,
36208 8ECA                        00            .byte	0
36209                                           ! 7184                        8,
36210 8ECB                        08            .byte	8
36211                                           ! 7185                             16,
36212 8ECC                        10            .byte	$10
36213                                           ! 7186                          8,
36214 8ECD                        08            .byte	8
36215                                           ! 7187                               8,
36216 8ECE                        08            .byte	8
36217                                           ! 7188                         8,
36218 8ECF                        08            .byte	8
36219                                           ! 7189                              0,
36220 8ED0                        00            .byte	0
36221                                           ! 7190                         8,
36222 8ED1                        08            .byte	8
36223                                           ! 7191                              24,
36224 8ED2                        18            .byte	$18
36225                                           ! 7192                                0x02,
36226 8ED3                        02            .byte	2
36227                                           ! 7193                        0xE0000000,
36228 8ED4                      0000            .word	0
36229 8ED6                      E000            .word	$E000
36230                                           ! 7194                               0,
36231 8ED8                      0000            .word	0
36232 8EDA                      0000            .word	0
36233                                           ! 7195                             0,
36234 8EDC                      0000            .word	0
36235                                           ! 7196                                7680,
36236 8EDE                      1E00            .word	$1E00
36237                                           ! 7197                             0,
36238 8EE0                        00            .byte	0
36239                                           ! 7198                             0,
36240 8EE1                        00            .byte	0
36241                                           ! 7199                           8,
36242 8EE2                        08            .byte	8
36243                                           ! 7200                                16,
36244 8EE3                        10            .byte	$10
36245                                           ! 7201                             8,
36246 8EE4                        08            .byte	8
36247                                           ! 7202                                  8,
36248 8EE5                        08            .byte	8
36249                                           ! 7203                            8,
36250 8EE6                        08            .byte	8
36251                                           ! 7204                                 0,
36252 8EE7                        00            .byte	0
36253                                           ! 7205                            8,
36254 8EE8                        08            .byte	8
36255                                           ! 7206                                 24,
36256 8EE9                        18            .byte	$18
36257                                           ! 7207                          0,
36258 8EEA                      0000            .word	0
36259 8EEC                      0000            .word	0
36260                                           ! 7208 } },
36261                                           ! 7209 { 0x018a,
36262 8EEE                      018A            .word	$18A
36263                                           ! 7210 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36264 8EF0                      009B            .word	$9B
36265                                           ! 7211                           0x01 | 0x02 | 0x04,
36266 8EF2                        07            .byte	7
36267                                           ! 7212                           0,
36268 8EF3                        00            .byte	0
36269                                           ! 7213                           64,
36270 8EF4                      0040            .word	$40
36271                                           ! 7214                    64,
36272 8EF6                      0040            .word	$40
36273                                           ! 7215                        0xA000,
36274 8EF8                      A000            .word	$A000
36275                                           ! 7216                        0x0000,
36276 8EFA                      0000            .word	0
36277                                           ! 7217                       0,
36278 8EFC                      0000            .word	0
36279 8EFE                      0000            .word	0
36280                                           ! 7218                             5120,
36281 8F00                      1400            .word	$1400
36282                                           ! 7219                        2560,
36283 8F02                      0A00            .word	$A00
36284                                           ! 7220                        1600,
36285 8F04                      0640            .word	$640
36286                                           ! 7221                      8,
36287 8F06                        08            .byte	8
36288                                           ! 7222                      16,
36289 8F07                        10            .byte	$10
36290                                           ! 7223                           1,
36291 8F08                        01            .byte	1
36292                                           ! 7224                         16,
36293 8F09                        10            .byte	$10
36294                                           ! 7225                          125,
36295 8F0A                        7D            .byte	$7D
36296                                           ! 7226                        0x06,
36297 8F0B                        06            .byte	6
36298                                           ! 7227                     0,
36299 8F0C                        00            .byte	0
36300                                           ! 7228                               1,
36301 8F0D                        01            .byte	1
36302                                           ! 7229                          0,
36303 8F0E                        00            .byte	0
36304                                           ! 7230                        5,
36305 8F0F                        05            .byte	5
36306                                           ! 7231                             11,
36307 8F10                        0B            .byte	$B
36308                                           ! 7232                          6,
36309 8F11                        06            .byte	6
36310                                           ! 7233                               5,
36311 8F12                        05            .byte	5
36312                                           ! 7234                         5,
36313 8F13                        05            .byte	5
36314                                           ! 7235                              0,
36315 8F14                        00            .byte	0
36316                                           ! 7236                         0,
36317 8F15                        00            .byte	0
36318                                           ! 7237                              0,
36319 8F16                        00            .byte	0
36320                                           ! 7238                                0,
36321 8F17                        00            .byte	0
36322                                           ! 7239                        0xE0000000,
36323 8F18                      0000            .word	0
36324 8F1A                      E000            .word	$E000
36325                                           ! 7240                               0,
36326 8F1C                      0000            .word	0
36327 8F1E                      0000            .word	0
36328                                           ! 7241                             0,
36329 8F20                      0000            .word	0
36330                                           ! 7242                                5120,
36331 8F22                      1400            .word	$1400
36332                                           ! 7243                             0,
36333 8F24                        00            .byte	0
36334                                           ! 7244                             0,
36335 8F25                        00            .byte	0
36336                                           ! 7245                           5,
36337 8F26                        05            .byte	5
36338                                           ! 7246                                11,
36339 8F27                        0B            .byte	$B
36340                                           ! 7247                             6,
36341 8F28                        06            .byte	6
36342                                           ! 7248                                  5,
36343 8F29                        05            .byte	5
36344                                           ! 7249                            5,
36345 8F2A                        05            .byte	5
36346                                           ! 7250   
36347                                           ! 7250                               0,
36348 8F2B                        00            .byte	0
36349                                           ! 7251                            0,
36350 8F2C                        00            .byte	0
36351                                           ! 7252                                 0,
36352 8F2D                        00            .byte	0
36353                                           ! 7253                          0,
36354 8F2E                      0000            .word	0
36355 8F30                      0000            .word	0
36356                                           ! 7254 } },
36357                                           ! 7255 { 0x018b,
36358 8F32                      018B            .word	$18B
36359                                           ! 7256 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36360 8F34                      009B            .word	$9B
36361                                           ! 7257                           0x01 | 0x02 | 0x04,
36362 8F36                        07            .byte	7
36363                                           ! 7258                           0,
36364 8F37                        00            .byte	0
36365                                           ! 7259                           64,
36366 8F38                      0040            .word	$40
36367                                           ! 7260                    64,
36368 8F3A                      0040            .word	$40
36369                                           ! 7261                        0xA000,
36370 8F3C                      A000            .word	$A000
36371                                           ! 7262                        0x0000,
36372 8F3E                      0000            .word	0
36373                                           ! 7263                       0,
36374 8F40                      0000            .word	0
36375 8F42                      0000            .word	0
36376                                           ! 7264                             7680,
36377 8F44                      1E00            .word	$1E00
36378                                           ! 7265                        2560,
36379 8F46                      0A00            .word	$A00
36380                                           ! 7266                        1600,
36381 8F48                      0640            .word	$640
36382                                           ! 7267                      8,
36383 8F4A                        08            .byte	8
36384                                           ! 7268                      16,
36385 8F4B                        10            .byte	$10
36386                                           ! 7269                           1,
36387 8F4C                        01            .byte	1
36388                                           ! 7270                         24,
36389 8F4D                        18            .byte	$18
36390                                           ! 7271                          188,
36391 8F4E                        BC            .byte	$BC
36392                                           ! 7272                        0x06,
36393 8F4F                        06            .byte	6
36394                                           ! 7273                     0,
36395 8F50                        00            .byte	0
36396                                           ! 7274                               0,
36397 8F51                        00            .byte	0
36398                                           ! 7275                          0,
36399 8F52                        00            .byte	0
36400                                           ! 7276                        8,
36401 8F53                        08            .byte	8
36402                                           ! 7277                             16,
36403 8F54                        10            .byte	$10
36404                                           ! 7278                          8,
36405 8F55                        08            .byte	8
36406                                           ! 7279                               8,
36407 8F56                        08            .byte	8
36408                                           ! 7280                         8,
36409 8F57                        08            .byte	8
36410                                           ! 7281                              0,
36411 8F58                        00            .byte	0
36412                                           ! 7282                         0,
36413 8F59                        00            .byte	0
36414                                           ! 7283                              0,
36415 8F5A                        00            .byte	0
36416                                           ! 7284                                0,
36417 8F5B                        00            .byte	0
36418                                           ! 7285                        0xE0000000,
36419 8F5C                      0000            .word	0
36420 8F5E                      E000            .word	$E000
36421                                           ! 7286                               0,
36422 8F60                      0000            .word	0
36423 8F62                      0000            .word	0
36424                                           ! 7287                             0,
36425 8F64                      0000            .word	0
36426                                           ! 7288                                7680,
36427 8F66                      1E00            .word	$1E00
36428                                           ! 7289                             0,
36429 8F68                        00            .byte	0
36430                                           ! 7290                             0,
36431 8F69                        00            .byte	0
36432                                           ! 7291                           8,
36433 8F6A                        08            .byte	8
36434                                           ! 7292                                16,
36435 8F6B                        10            .byte	$10
36436                                           ! 7293                             8,
36437 8F6C                        08            .byte	8
36438                                           ! 7294                                  8,
36439 8F6D                        08            .byte	8
36440                                           ! 7295                            8,
36441 8F6E                        08            .byte	8
36442                                           ! 7296                                 0,
36443 8F6F                        00            .byte	0
36444                                           ! 7297                            0,
36445 8F70                        00            .byte	0
36446                                           ! 7298                                 0,
36447 8F71                        00            .byte	0
36448                                           ! 7299                          0,
36449 8F72                      0000            .word	0
36450 8F74                      0000            .word	0
36451                                           ! 7300 } },
36452                                           ! 7301 { 0x018c,
36453 8F76                      018C            .word	$18C
36454                                           ! 7302 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36455 8F78                      009B            .word	$9B
36456                                           ! 7303                           0x01 | 0x02 | 0x04,
36457 8F7A                        07            .byte	7
36458                                           ! 7304                           0,
36459 8F7B                        00            .byte	0
36460                                           ! 7305                           64,
36461 8F7C                      0040            .word	$40
36462                                           ! 7306                    64,
36463 8F7E                      0040            .word	$40
36464                                           ! 7307                        0xA000,
36465 8F80                      A000            .word	$A000
36466                                           ! 7308                        0x0000,
36467 8F82                      0000            .word	0
36468                                           ! 7309                       0,
36469 8F84                      0000            .word	0
36470 8F86                      0000            .word	0
36471                                           ! 7310                             10240,
36472 8F88                      2800            .word	$2800
36473                                           ! 7311                        2560,
36474 8F8A                      0A00            .word	$A00
36475                                           ! 7312                        1600,
36476 8F8C                      0640            .word	$640
36477                                           ! 7313                      8,
36478 8F8E                        08            .byte	8
36479                                           ! 7314                      16,
36480 8F8F                        10            .byte	$10
36481                                           ! 7315                           1,
36482 8F90                        01            .byte	1
36483                                           ! 7316                         32,
36484 8F91                        20            .byte	$20
36485                                           ! 7317                          250,
36486 8F92                        FA            .byte	$FA
36487                                           ! 7318                        0x06,
36488 8F93                        06            .byte	6
36489                                           ! 7319              
36490                                           ! 7319        0,
36491 8F94                        00            .byte	0
36492                                           ! 7320                               0,
36493 8F95                        00            .byte	0
36494                                           ! 7321                          0,
36495 8F96                        00            .byte	0
36496                                           ! 7322                        8,
36497 8F97                        08            .byte	8
36498                                           ! 7323                             16,
36499 8F98                        10            .byte	$10
36500                                           ! 7324                          8,
36501 8F99                        08            .byte	8
36502                                           ! 7325                               8,
36503 8F9A                        08            .byte	8
36504                                           ! 7326                         8,
36505 8F9B                        08            .byte	8
36506                                           ! 7327                              0,
36507 8F9C                        00            .byte	0
36508                                           ! 7328                         8,
36509 8F9D                        08            .byte	8
36510                                           ! 7329                              24,
36511 8F9E                        18            .byte	$18
36512                                           ! 7330                                0x02,
36513 8F9F                        02            .byte	2
36514                                           ! 7331                        0xE0000000,
36515 8FA0                      0000            .word	0
36516 8FA2                      E000            .word	$E000
36517                                           ! 7332                               0,
36518 8FA4                      0000            .word	0
36519 8FA6                      0000            .word	0
36520                                           ! 7333                             0,
36521 8FA8                      0000            .word	0
36522                                           ! 7334                                10240,
36523 8FAA                      2800            .word	$2800
36524                                           ! 7335                             0,
36525 8FAC                        00            .byte	0
36526                                           ! 7336                             0,
36527 8FAD                        00            .byte	0
36528                                           ! 7337                           8,
36529 8FAE                        08            .byte	8
36530                                           ! 7338                                16,
36531 8FAF                        10            .byte	$10
36532                                           ! 7339                             8,
36533 8FB0                        08            .byte	8
36534                                           ! 7340                                  8,
36535 8FB1                        08            .byte	8
36536                                           ! 7341                            8,
36537 8FB2                        08            .byte	8
36538                                           ! 7342                                 0,
36539 8FB3                        00            .byte	0
36540                                           ! 7343                            8,
36541 8FB4                        08            .byte	8
36542                                           ! 7344                                 24,
36543 8FB5                        18            .byte	$18
36544                                           ! 7345                          0,
36545 8FB6                      0000            .word	0
36546 8FB8                      0000            .word	0
36547                                           ! 7346 } },
36548                                           ! 7347 { 0x018d,
36549 8FBA                      018D            .word	$18D
36550                                           ! 7348 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36551 8FBC                      009B            .word	$9B
36552                                           ! 7349                           0x01 | 0x02 | 0x04,
36553 8FBE                        07            .byte	7
36554                                           ! 7350                           0,
36555 8FBF                        00            .byte	0
36556                                           ! 7351                           64,
36557 8FC0                      0040            .word	$40
36558                                           ! 7352                    64,
36559 8FC2                      0040            .word	$40
36560                                           ! 7353                        0xA000,
36561 8FC4                      A000            .word	$A000
36562                                           ! 7354                        0x0000,
36563 8FC6                      0000            .word	0
36564                                           ! 7355                       0,
36565 8FC8                      0000            .word	0
36566 8FCA                      0000            .word	0
36567                                           ! 7356                             640,
36568 8FCC                      0280            .word	$280
36569                                           ! 7357                        320,
36570 8FCE                      0140            .word	$140
36571                                           ! 7358                        480,
36572 8FD0                      01E0            .word	$1E0
36573                                           ! 7359                      8,
36574 8FD2                        08            .byte	8
36575                                           ! 7360                      16,
36576 8FD3                        10            .byte	$10
36577                                           ! 7361                           1,
36578 8FD4                        01            .byte	1
36579                                           ! 7362                         16,
36580 8FD5                        10            .byte	$10
36581                                           ! 7363                          5,
36582 8FD6                        05            .byte	5
36583                                           ! 7364                        0x06,
36584 8FD7                        06            .byte	6
36585                                           ! 7365                     0,
36586 8FD8                        00            .byte	0
36587                                           ! 7366                               53,
36588 8FD9                        35            .byte	$35
36589                                           ! 7367                          0,
36590 8FDA                        00            .byte	0
36591                                           ! 7368                        5,
36592 8FDB                        05            .byte	5
36593                                           ! 7369                             11,
36594 8FDC                        0B            .byte	$B
36595                                           ! 7370                          6,
36596 8FDD                        06            .byte	6
36597                                           ! 7371                               5,
36598 8FDE                        05            .byte	5
36599                                           ! 7372                         5,
36600 8FDF                        05            .byte	5
36601                                           ! 7373                              0,
36602 8FE0                        00            .byte	0
36603                                           ! 7374                         0,
36604 8FE1                        00            .byte	0
36605                                           ! 7375                              0,
36606 8FE2                        00            .byte	0
36607                                           ! 7376                                0,
36608 8FE3                        00            .byte	0
36609                                           ! 7377                        0xE0000000,
36610 8FE4                      0000            .word	0
36611 8FE6                      E000            .word	$E000
36612                                           ! 7378                               0,
36613 8FE8                      0000            .word	0
36614 8FEA                      0000            .word	0
36615                                           ! 7379                             0,
36616 8FEC                      0000            .word	0
36617                                           ! 7380                                640,
36618 8FEE                      0280            .word	$280
36619                                           ! 7381                             0,
36620 8FF0                        00            .byte	0
36621                                           ! 7382                             0,
36622 8FF1                        00            .byte	0
36623                                           ! 7383                           5,
36624 8FF2                        05            .byte	5
36625                                           ! 7384                                11,
36626 8FF3                        0B            .byte	$B
36627                                           ! 7385                             6,
36628 8FF4                        06            .byte	6
36629                                           ! 7386                                  5,
36630 8FF5                        05            .byte	5
36631                                           ! 7387  
36632                                           ! 7387                           5,
36633 8FF6                        05            .byte	5
36634                                           ! 7388                                 0,
36635 8FF7                        00            .byte	0
36636                                           ! 7389                            0,
36637 8FF8                        00            .byte	0
36638                                           ! 7390                                 0,
36639 8FF9                        00            .byte	0
36640                                           ! 7391                          0,
36641 8FFA                      0000            .word	0
36642 8FFC                      0000            .word	0
36643                                           ! 7392 } },
36644                                           ! 7393 { 0x018e,
36645 8FFE                      018E            .word	$18E
36646                                           ! 7394 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36647 9000                      009B            .word	$9B
36648                                           ! 7395                           0x01 | 0x02 | 0x04,
36649 9002                        07            .byte	7
36650                                           ! 7396                           0,
36651 9003                        00            .byte	0
36652                                           ! 7397                           64,
36653 9004                      0040            .word	$40
36654                                           ! 7398                    64,
36655 9006                      0040            .word	$40
36656                                           ! 7399                        0xA000,
36657 9008                      A000            .word	$A000
36658                                           ! 7400                        0x0000,
36659 900A                      0000            .word	0
36660                                           ! 7401                       0,
36661 900C                      0000            .word	0
36662 900E                      0000            .word	0
36663                                           ! 7402                             960,
36664 9010                      03C0            .word	$3C0
36665                                           ! 7403                        320,
36666 9012                      0140            .word	$140
36667                                           ! 7404                        480,
36668 9014                      01E0            .word	$1E0
36669                                           ! 7405                      8,
36670 9016                        08            .byte	8
36671                                           ! 7406                      16,
36672 9017                        10            .byte	$10
36673                                           ! 7407                           1,
36674 9018                        01            .byte	1
36675                                           ! 7408                         24,
36676 9019                        18            .byte	$18
36677                                           ! 7409                          8,
36678 901A                        08            .byte	8
36679                                           ! 7410                        0x06,
36680 901B                        06            .byte	6
36681                                           ! 7411                     0,
36682 901C                        00            .byte	0
36683                                           ! 7412                               35,
36684 901D                        23            .byte	$23
36685                                           ! 7413                          0,
36686 901E                        00            .byte	0
36687                                           ! 7414                        8,
36688 901F                        08            .byte	8
36689                                           ! 7415                             16,
36690 9020                        10            .byte	$10
36691                                           ! 7416                          8,
36692 9021                        08            .byte	8
36693                                           ! 7417                               8,
36694 9022                        08            .byte	8
36695                                           ! 7418                         8,
36696 9023                        08            .byte	8
36697                                           ! 7419                              0,
36698 9024                        00            .byte	0
36699                                           ! 7420                         0,
36700 9025                        00            .byte	0
36701                                           ! 7421                              0,
36702 9026                        00            .byte	0
36703                                           ! 7422                                0,
36704 9027                        00            .byte	0
36705                                           ! 7423                        0xE0000000,
36706 9028                      0000            .word	0
36707 902A                      E000            .word	$E000
36708                                           ! 7424                               0,
36709 902C                      0000            .word	0
36710 902E                      0000            .word	0
36711                                           ! 7425                             0,
36712 9030                      0000            .word	0
36713                                           ! 7426                                960,
36714 9032                      03C0            .word	$3C0
36715                                           ! 7427                             0,
36716 9034                        00            .byte	0
36717                                           ! 7428                             0,
36718 9035                        00            .byte	0
36719                                           ! 7429                           8,
36720 9036                        08            .byte	8
36721                                           ! 7430                                16,
36722 9037                        10            .byte	$10
36723                                           ! 7431                             8,
36724 9038                        08            .byte	8
36725                                           ! 7432                                  8,
36726 9039                        08            .byte	8
36727                                           ! 7433                            8,
36728 903A                        08            .byte	8
36729                                           ! 7434                                 0,
36730 903B                        00            .byte	0
36731                                           ! 7435                            0,
36732 903C                        00            .byte	0
36733                                           ! 7436                                 0,
36734 903D                        00            .byte	0
36735                                           ! 7437                          0,
36736 903E                      0000            .word	0
36737 9040                      0000            .word	0
36738                                           ! 7438 } },
36739                                           ! 7439 { 0x018f,
36740 9042                      018F            .word	$18F
36741                                           ! 7440 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36742 9044                      009B            .word	$9B
36743                                           ! 7441                           0x01 | 0x02 | 0x04,
36744 9046                        07            .byte	7
36745                                           ! 7442                           0,
36746 9047                        00            .byte	0
36747                                           ! 7443                           64,
36748 9048                      0040            .word	$40
36749                                           ! 7444                    64,
36750 904A                      0040            .word	$40
36751                                           ! 7445                        0xA000,
36752 904C                      A000            .word	$A000
36753                                           ! 7446                        0x0000,
36754 904E                      0000            .word	0
36755                                           ! 7447                       0,
36756 9050                      0000            .word	0
36757 9052                      0000            .word	0
36758                                           ! 7448                             1280,
36759 9054                      0500            .word	$500
36760                                           ! 7449                        320,
36761 9056                      0140            .word	$140
36762                                           ! 7450                        480,
36763 9058                      01E0            .word	$1E0
36764                                           ! 7451                      8,
36765 905A                        08            .byte	8
36766                                           ! 7452                      16,
36767 905B                        10            .byte	$10
36768                                           ! 7453                           1,
36769 905C                        01            .byte	1
36770                                           ! 7454                         32,
36771 905D                        20            .byte	$20
36772                                           ! 7455                          10,
36773 905E                        0A            .byte	$A
36774                                           ! 7456                     
36775                                           ! 7456    0x06,
36776 905F                        06            .byte	6
36777                                           ! 7457                     0,
36778 9060                        00            .byte	0
36779                                           ! 7458                               26,
36780 9061                        1A            .byte	$1A
36781                                           ! 7459                          0,
36782 9062                        00            .byte	0
36783                                           ! 7460                        8,
36784 9063                        08            .byte	8
36785                                           ! 7461                             16,
36786 9064                        10            .byte	$10
36787                                           ! 7462                          8,
36788 9065                        08            .byte	8
36789                                           ! 7463                               8,
36790 9066                        08            .byte	8
36791                                           ! 7464                         8,
36792 9067                        08            .byte	8
36793                                           ! 7465                              0,
36794 9068                        00            .byte	0
36795                                           ! 7466                         8,
36796 9069                        08            .byte	8
36797                                           ! 7467                              24,
36798 906A                        18            .byte	$18
36799                                           ! 7468                                0x02,
36800 906B                        02            .byte	2
36801                                           ! 7469                        0xE0000000,
36802 906C                      0000            .word	0
36803 906E                      E000            .word	$E000
36804                                           ! 7470                               0,
36805 9070                      0000            .word	0
36806 9072                      0000            .word	0
36807                                           ! 7471                             0,
36808 9074                      0000            .word	0
36809                                           ! 7472                                1280,
36810 9076                      0500            .word	$500
36811                                           ! 7473                             0,
36812 9078                        00            .byte	0
36813                                           ! 7474                             0,
36814 9079                        00            .byte	0
36815                                           ! 7475                           8,
36816 907A                        08            .byte	8
36817                                           ! 7476                                16,
36818 907B                        10            .byte	$10
36819                                           ! 7477                             8,
36820 907C                        08            .byte	8
36821                                           ! 7478                                  8,
36822 907D                        08            .byte	8
36823                                           ! 7479                            8,
36824 907E                        08            .byte	8
36825                                           ! 7480                                 0,
36826 907F                        00            .byte	0
36827                                           ! 7481                            8,
36828 9080                        08            .byte	8
36829                                           ! 7482                                 24,
36830 9081                        18            .byte	$18
36831                                           ! 7483                          0,
36832 9082                      0000            .word	0
36833 9084                      0000            .word	0
36834                                           ! 7484 } },
36835                                           ! 7485 { 0x0190,
36836 9086                      0190            .word	$190
36837                                           ! 7486 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36838 9088                      009B            .word	$9B
36839                                           ! 7487                           0x01 | 0x02 | 0x04,
36840 908A                        07            .byte	7
36841                                           ! 7488                           0,
36842 908B                        00            .byte	0
36843                                           ! 7489                           64,
36844 908C                      0040            .word	$40
36845                                           ! 7490                    64,
36846 908E                      0040            .word	$40
36847                                           ! 7491                        0xA000,
36848 9090                      A000            .word	$A000
36849                                           ! 7492                        0x0000,
36850 9092                      0000            .word	0
36851                                           ! 7493                       0,
36852 9094                      0000            .word	0
36853 9096                      0000            .word	0
36854                                           ! 7494                             960,
36855 9098                      03C0            .word	$3C0
36856                                           ! 7495                        480,
36857 909A                      01E0            .word	$1E0
36858                                           ! 7496                        800,
36859 909C                      0320            .word	$320
36860                                           ! 7497                      8,
36861 909E                        08            .byte	8
36862                                           ! 7498                      16,
36863 909F                        10            .byte	$10
36864                                           ! 7499                           1,
36865 90A0                        01            .byte	1
36866                                           ! 7500                         16,
36867 90A1                        10            .byte	$10
36868                                           ! 7501                          12,
36869 90A2                        0C            .byte	$C
36870                                           ! 7502                        0x06,
36871 90A3                        06            .byte	6
36872                                           ! 7503                     0,
36873 90A4                        00            .byte	0
36874                                           ! 7504                               20,
36875 90A5                        14            .byte	$14
36876                                           ! 7505                          0,
36877 90A6                        00            .byte	0
36878                                           ! 7506                        5,
36879 90A7                        05            .byte	5
36880                                           ! 7507                             11,
36881 90A8                        0B            .byte	$B
36882                                           ! 7508                          6,
36883 90A9                        06            .byte	6
36884                                           ! 7509                               5,
36885 90AA                        05            .byte	5
36886                                           ! 7510                         5,
36887 90AB                        05            .byte	5
36888                                           ! 7511                              0,
36889 90AC                        00            .byte	0
36890                                           ! 7512                         0,
36891 90AD                        00            .byte	0
36892                                           ! 7513                              0,
36893 90AE                        00            .byte	0
36894                                           ! 7514                                0,
36895 90AF                        00            .byte	0
36896                                           ! 7515                        0xE0000000,
36897 90B0                      0000            .word	0
36898 90B2                      E000            .word	$E000
36899                                           ! 7516                               0,
36900 90B4                      0000            .word	0
36901 90B6                      0000            .word	0
36902                                           ! 7517                             0,
36903 90B8                      0000            .word	0
36904                                           ! 7518                                960,
36905 90BA                      03C0            .word	$3C0
36906                                           ! 7519                             0,
36907 90BC                        00            .byte	0
36908                                           ! 7520                             0,
36909 90BD                        00            .byte	0
36910                                           ! 7521                           5,
36911 90BE                        05            .byte	5
36912                                           ! 7522                                11,
36913 90BF                        0B            .byte	$B
36914                                           ! 7523                             6,
36915 90C0                        06            .byte	6
36916                                           ! 7524               
36917                                           ! 7524                    5,
36918 90C1                        05            .byte	5
36919                                           ! 7525                            5,
36920 90C2                        05            .byte	5
36921                                           ! 7526                                 0,
36922 90C3                        00            .byte	0
36923                                           ! 7527                            0,
36924 90C4                        00            .byte	0
36925                                           ! 7528                                 0,
36926 90C5                        00            .byte	0
36927                                           ! 7529                          0,
36928 90C6                      0000            .word	0
36929 90C8                      0000            .word	0
36930                                           ! 7530 } },
36931                                           ! 7531 { 0x0191,
36932 90CA                      0191            .word	$191
36933                                           ! 7532 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36934 90CC                      009B            .word	$9B
36935                                           ! 7533                           0x01 | 0x02 | 0x04,
36936 90CE                        07            .byte	7
36937                                           ! 7534                           0,
36938 90CF                        00            .byte	0
36939                                           ! 7535                           64,
36940 90D0                      0040            .word	$40
36941                                           ! 7536                    64,
36942 90D2                      0040            .word	$40
36943                                           ! 7537                        0xA000,
36944 90D4                      A000            .word	$A000
36945                                           ! 7538                        0x0000,
36946 90D6                      0000            .word	0
36947                                           ! 7539                       0,
36948 90D8                      0000            .word	0
36949 90DA                      0000            .word	0
36950                                           ! 7540                             1440,
36951 90DC                      05A0            .word	$5A0
36952                                           ! 7541                        480,
36953 90DE                      01E0            .word	$1E0
36954                                           ! 7542                        800,
36955 90E0                      0320            .word	$320
36956                                           ! 7543                      8,
36957 90E2                        08            .byte	8
36958                                           ! 7544                      16,
36959 90E3                        10            .byte	$10
36960                                           ! 7545                           1,
36961 90E4                        01            .byte	1
36962                                           ! 7546                         24,
36963 90E5                        18            .byte	$18
36964                                           ! 7547                          18,
36965 90E6                        12            .byte	$12
36966                                           ! 7548                        0x06,
36967 90E7                        06            .byte	6
36968                                           ! 7549                     0,
36969 90E8                        00            .byte	0
36970                                           ! 7550                               13,
36971 90E9                        0D            .byte	$D
36972                                           ! 7551                          0,
36973 90EA                        00            .byte	0
36974                                           ! 7552                        8,
36975 90EB                        08            .byte	8
36976                                           ! 7553                             16,
36977 90EC                        10            .byte	$10
36978                                           ! 7554                          8,
36979 90ED                        08            .byte	8
36980                                           ! 7555                               8,
36981 90EE                        08            .byte	8
36982                                           ! 7556                         8,
36983 90EF                        08            .byte	8
36984                                           ! 7557                              0,
36985 90F0                        00            .byte	0
36986                                           ! 7558                         0,
36987 90F1                        00            .byte	0
36988                                           ! 7559                              0,
36989 90F2                        00            .byte	0
36990                                           ! 7560                                0,
36991 90F3                        00            .byte	0
36992                                           ! 7561                        0xE0000000,
36993 90F4                      0000            .word	0
36994 90F6                      E000            .word	$E000
36995                                           ! 7562                               0,
36996 90F8                      0000            .word	0
36997 90FA                      0000            .word	0
36998                                           ! 7563                             0,
36999 90FC                      0000            .word	0
37000                                           ! 7564                                1440,
37001 90FE                      05A0            .word	$5A0
37002                                           ! 7565                             0,
37003 9100                        00            .byte	0
37004                                           ! 7566                             0,
37005 9101                        00            .byte	0
37006                                           ! 7567                           8,
37007 9102                        08            .byte	8
37008                                           ! 7568                                16,
37009 9103                        10            .byte	$10
37010                                           ! 7569                             8,
37011 9104                        08            .byte	8
37012                                           ! 7570                                  8,
37013 9105                        08            .byte	8
37014                                           ! 7571                            8,
37015 9106                        08            .byte	8
37016                                           ! 7572                                 0,
37017 9107                        00            .byte	0
37018                                           ! 7573                            0,
37019 9108                        00            .byte	0
37020                                           ! 7574                                 0,
37021 9109                        00            .byte	0
37022                                           ! 7575                          0,
37023 910A                      0000            .word	0
37024 910C                      0000            .word	0
37025                                           ! 7576 } },
37026                                           ! 7577 { 0x0192,
37027 910E                      0192            .word	$192
37028                                           ! 7578 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37029 9110                      009B            .word	$9B
37030                                           ! 7579                           0x01 | 0x02 | 0x04,
37031 9112                        07            .byte	7
37032                                           ! 7580                           0,
37033 9113                        00            .byte	0
37034                                           ! 7581                           64,
37035 9114                      0040            .word	$40
37036                                           ! 7582                    64,
37037 9116                      0040            .word	$40
37038                                           ! 7583                        0xA000,
37039 9118                      A000            .word	$A000
37040                                           ! 7584                        0x0000,
37041 911A                      0000            .word	0
37042                                           ! 7585                       0,
37043 911C                      0000            .word	0
37044 911E                      0000            .word	0
37045                                           ! 7586                             1920,
37046 9120                      0780            .word	$780
37047                                           ! 7587                        480,
37048 9122                      01E0            .word	$1E0
37049                                           ! 7588                        800,
37050 9124                      0320            .word	$320
37051                                           ! 7589                      8,
37052 9126                        08            .byte	8
37053                                           ! 7590                      16,
37054 9127                        10            .byte	$10
37055                                           ! 7591                           1,
37056 9128                        01            .byte	1
37057                                           ! 7592                         32,
37058 9129                        20            .byte	$20
37059                                           ! 7593                        
37060                                           ! 7593   24,
37061 912A                        18            .byte	$18
37062                                           ! 7594                        0x06,
37063 912B                        06            .byte	6
37064                                           ! 7595                     0,
37065 912C                        00            .byte	0
37066                                           ! 7596                               9,
37067 912D                        09            .byte	9
37068                                           ! 7597                          0,
37069 912E                        00            .byte	0
37070                                           ! 7598                        8,
37071 912F                        08            .byte	8
37072                                           ! 7599                             16,
37073 9130                        10            .byte	$10
37074                                           ! 7600                          8,
37075 9131                        08            .byte	8
37076                                           ! 7601                               8,
37077 9132                        08            .byte	8
37078                                           ! 7602                         8,
37079 9133                        08            .byte	8
37080                                           ! 7603                              0,
37081 9134                        00            .byte	0
37082                                           ! 7604                         8,
37083 9135                        08            .byte	8
37084                                           ! 7605                              24,
37085 9136                        18            .byte	$18
37086                                           ! 7606                                0x02,
37087 9137                        02            .byte	2
37088                                           ! 7607                        0xE0000000,
37089 9138                      0000            .word	0
37090 913A                      E000            .word	$E000
37091                                           ! 7608                               0,
37092 913C                      0000            .word	0
37093 913E                      0000            .word	0
37094                                           ! 7609                             0,
37095 9140                      0000            .word	0
37096                                           ! 7610                                1920,
37097 9142                      0780            .word	$780
37098                                           ! 7611                             0,
37099 9144                        00            .byte	0
37100                                           ! 7612                             0,
37101 9145                        00            .byte	0
37102                                           ! 7613                           8,
37103 9146                        08            .byte	8
37104                                           ! 7614                                16,
37105 9147                        10            .byte	$10
37106                                           ! 7615                             8,
37107 9148                        08            .byte	8
37108                                           ! 7616                                  8,
37109 9149                        08            .byte	8
37110                                           ! 7617                            8,
37111 914A                        08            .byte	8
37112                                           ! 7618                                 0,
37113 914B                        00            .byte	0
37114                                           ! 7619                            8,
37115 914C                        08            .byte	8
37116                                           ! 7620                                 24,
37117 914D                        18            .byte	$18
37118                                           ! 7621                          0,
37119 914E                      0000            .word	0
37120 9150                      0000            .word	0
37121                                           ! 7622 } },
37122                                           ! 7623 { 0x0193,
37123 9152                      0193            .word	$193
37124                                           ! 7624 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37125 9154                      009B            .word	$9B
37126                                           ! 7625                           0x01 | 0x02 | 0x04,
37127 9156                        07            .byte	7
37128                                           ! 7626                           0,
37129 9157                        00            .byte	0
37130                                           ! 7627                           64,
37131 9158                      0040            .word	$40
37132                                           ! 7628                    64,
37133 915A                      0040            .word	$40
37134                                           ! 7629                        0xA000,
37135 915C                      A000            .word	$A000
37136                                           ! 7630                        0x0000,
37137 915E                      0000            .word	0
37138                                           ! 7631                       0,
37139 9160                      0000            .word	0
37140 9162                      0000            .word	0
37141                                           ! 7632                             960,
37142 9164                      03C0            .word	$3C0
37143                                           ! 7633                        480,
37144 9166                      01E0            .word	$1E0
37145                                           ! 7634                        854,
37146 9168                      0356            .word	$356
37147                                           ! 7635                      8,
37148 916A                        08            .byte	8
37149                                           ! 7636                      16,
37150 916B                        10            .byte	$10
37151                                           ! 7637                           1,
37152 916C                        01            .byte	1
37153                                           ! 7638                         16,
37154 916D                        10            .byte	$10
37155                                           ! 7639                          13,
37156 916E                        0D            .byte	$D
37157                                           ! 7640                        0x06,
37158 916F                        06            .byte	6
37159                                           ! 7641                     0,
37160 9170                        00            .byte	0
37161                                           ! 7642                               19,
37162 9171                        13            .byte	$13
37163                                           ! 7643                          0,
37164 9172                        00            .byte	0
37165                                           ! 7644                        5,
37166 9173                        05            .byte	5
37167                                           ! 7645                             11,
37168 9174                        0B            .byte	$B
37169                                           ! 7646                          6,
37170 9175                        06            .byte	6
37171                                           ! 7647                               5,
37172 9176                        05            .byte	5
37173                                           ! 7648                         5,
37174 9177                        05            .byte	5
37175                                           ! 7649                              0,
37176 9178                        00            .byte	0
37177                                           ! 7650                         0,
37178 9179                        00            .byte	0
37179                                           ! 7651                              0,
37180 917A                        00            .byte	0
37181                                           ! 7652                                0,
37182 917B                        00            .byte	0
37183                                           ! 7653                        0xE0000000,
37184 917C                      0000            .word	0
37185 917E                      E000            .word	$E000
37186                                           ! 7654                               0,
37187 9180                      0000            .word	0
37188 9182                      0000            .word	0
37189                                           ! 7655                             0,
37190 9184                      0000            .word	0
37191                                           ! 7656                                960,
37192 9186                      03C0            .word	$3C0
37193                                           ! 7657                             0,
37194 9188                        00            .byte	0
37195                                           ! 7658                             0,
37196 9189                        00            .byte	0
37197                                           ! 7659                           5,
37198 918A                        05            .byte	5
37199                                           ! 7660                                11,
37200 918B                        0B            .byte	$B
37201                                           ! 7661                     
37202                                           ! 7661         6,
37203 918C                        06            .byte	6
37204                                           ! 7662                                  5,
37205 918D                        05            .byte	5
37206                                           ! 7663                            5,
37207 918E                        05            .byte	5
37208                                           ! 7664                                 0,
37209 918F                        00            .byte	0
37210                                           ! 7665                            0,
37211 9190                        00            .byte	0
37212                                           ! 7666                                 0,
37213 9191                        00            .byte	0
37214                                           ! 7667                          0,
37215 9192                      0000            .word	0
37216 9194                      0000            .word	0
37217                                           ! 7668 } },
37218                                           ! 7669 { 0x0194,
37219 9196                      0194            .word	$194
37220                                           ! 7670 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37221 9198                      009B            .word	$9B
37222                                           ! 7671                           0x01 | 0x02 | 0x04,
37223 919A                        07            .byte	7
37224                                           ! 7672                           0,
37225 919B                        00            .byte	0
37226                                           ! 7673                           64,
37227 919C                      0040            .word	$40
37228                                           ! 7674                    64,
37229 919E                      0040            .word	$40
37230                                           ! 7675                        0xA000,
37231 91A0                      A000            .word	$A000
37232                                           ! 7676                        0x0000,
37233 91A2                      0000            .word	0
37234                                           ! 7677                       0,
37235 91A4                      0000            .word	0
37236 91A6                      0000            .word	0
37237                                           ! 7678                             1440,
37238 91A8                      05A0            .word	$5A0
37239                                           ! 7679                        480,
37240 91AA                      01E0            .word	$1E0
37241                                           ! 7680                        854,
37242 91AC                      0356            .word	$356
37243                                           ! 7681                      8,
37244 91AE                        08            .byte	8
37245                                           ! 7682                      16,
37246 91AF                        10            .byte	$10
37247                                           ! 7683                           1,
37248 91B0                        01            .byte	1
37249                                           ! 7684                         24,
37250 91B1                        18            .byte	$18
37251                                           ! 7685                          19,
37252 91B2                        13            .byte	$13
37253                                           ! 7686                        0x06,
37254 91B3                        06            .byte	6
37255                                           ! 7687                     0,
37256 91B4                        00            .byte	0
37257                                           ! 7688                               12,
37258 91B5                        0C            .byte	$C
37259                                           ! 7689                          0,
37260 91B6                        00            .byte	0
37261                                           ! 7690                        8,
37262 91B7                        08            .byte	8
37263                                           ! 7691                             16,
37264 91B8                        10            .byte	$10
37265                                           ! 7692                          8,
37266 91B9                        08            .byte	8
37267                                           ! 7693                               8,
37268 91BA                        08            .byte	8
37269                                           ! 7694                         8,
37270 91BB                        08            .byte	8
37271                                           ! 7695                              0,
37272 91BC                        00            .byte	0
37273                                           ! 7696                         0,
37274 91BD                        00            .byte	0
37275                                           ! 7697                              0,
37276 91BE                        00            .byte	0
37277                                           ! 7698                                0,
37278 91BF                        00            .byte	0
37279                                           ! 7699                        0xE0000000,
37280 91C0                      0000            .word	0
37281 91C2                      E000            .word	$E000
37282                                           ! 7700                               0,
37283 91C4                      0000            .word	0
37284 91C6                      0000            .word	0
37285                                           ! 7701                             0,
37286 91C8                      0000            .word	0
37287                                           ! 7702                                1440,
37288 91CA                      05A0            .word	$5A0
37289                                           ! 7703                             0,
37290 91CC                        00            .byte	0
37291                                           ! 7704                             0,
37292 91CD                        00            .byte	0
37293                                           ! 7705                           8,
37294 91CE                        08            .byte	8
37295                                           ! 7706                                16,
37296 91CF                        10            .byte	$10
37297                                           ! 7707                             8,
37298 91D0                        08            .byte	8
37299                                           ! 7708                                  8,
37300 91D1                        08            .byte	8
37301                                           ! 7709                            8,
37302 91D2                        08            .byte	8
37303                                           ! 7710                                 0,
37304 91D3                        00            .byte	0
37305                                           ! 7711                            0,
37306 91D4                        00            .byte	0
37307                                           ! 7712                                 0,
37308 91D5                        00            .byte	0
37309                                           ! 7713                          0,
37310 91D6                      0000            .word	0
37311 91D8                      0000            .word	0
37312                                           ! 7714 } },
37313                                           ! 7715 { 0x0195,
37314 91DA                      0195            .word	$195
37315                                           ! 7716 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37316 91DC                      009B            .word	$9B
37317                                           ! 7717                           0x01 | 0x02 | 0x04,
37318 91DE                        07            .byte	7
37319                                           ! 7718                           0,
37320 91DF                        00            .byte	0
37321                                           ! 7719                           64,
37322 91E0                      0040            .word	$40
37323                                           ! 7720                    64,
37324 91E2                      0040            .word	$40
37325                                           ! 7721                        0xA000,
37326 91E4                      A000            .word	$A000
37327                                           ! 7722                        0x0000,
37328 91E6                      0000            .word	0
37329                                           ! 7723                       0,
37330 91E8                      0000            .word	0
37331 91EA                      0000            .word	0
37332                                           ! 7724                             1920,
37333 91EC                      0780            .word	$780
37334                                           ! 7725                        480,
37335 91EE                      01E0            .word	$1E0
37336                                           ! 7726                        854,
37337 91F0                      0356            .word	$356
37338                                           ! 7727                      8,
37339 91F2                        08            .byte	8
37340                                           ! 7728                      16,
37341 91F3                        10            .byte	$10
37342                                           ! 7729                           1,
37343 91F4                        01            .byte	1
37344                                           ! 7730                         32
37345                                           ! 7730 ,
37346 91F5                        20            .byte	$20
37347                                           ! 7731                          26,
37348 91F6                        1A            .byte	$1A
37349                                           ! 7732                        0x06,
37350 91F7                        06            .byte	6
37351                                           ! 7733                     0,
37352 91F8                        00            .byte	0
37353                                           ! 7734                               9,
37354 91F9                        09            .byte	9
37355                                           ! 7735                          0,
37356 91FA                        00            .byte	0
37357                                           ! 7736                        8,
37358 91FB                        08            .byte	8
37359                                           ! 7737                             16,
37360 91FC                        10            .byte	$10
37361                                           ! 7738                          8,
37362 91FD                        08            .byte	8
37363                                           ! 7739                               8,
37364 91FE                        08            .byte	8
37365                                           ! 7740                         8,
37366 91FF                        08            .byte	8
37367                                           ! 7741                              0,
37368 9200                        00            .byte	0
37369                                           ! 7742                         8,
37370 9201                        08            .byte	8
37371                                           ! 7743                              24,
37372 9202                        18            .byte	$18
37373                                           ! 7744                                0x02,
37374 9203                        02            .byte	2
37375                                           ! 7745                        0xE0000000,
37376 9204                      0000            .word	0
37377 9206                      E000            .word	$E000
37378                                           ! 7746                               0,
37379 9208                      0000            .word	0
37380 920A                      0000            .word	0
37381                                           ! 7747                             0,
37382 920C                      0000            .word	0
37383                                           ! 7748                                1920,
37384 920E                      0780            .word	$780
37385                                           ! 7749                             0,
37386 9210                        00            .byte	0
37387                                           ! 7750                             0,
37388 9211                        00            .byte	0
37389                                           ! 7751                           8,
37390 9212                        08            .byte	8
37391                                           ! 7752                                16,
37392 9213                        10            .byte	$10
37393                                           ! 7753                             8,
37394 9214                        08            .byte	8
37395                                           ! 7754                                  8,
37396 9215                        08            .byte	8
37397                                           ! 7755                            8,
37398 9216                        08            .byte	8
37399                                           ! 7756                                 0,
37400 9217                        00            .byte	0
37401                                           ! 7757                            8,
37402 9218                        08            .byte	8
37403                                           ! 7758                                 24,
37404 9219                        18            .byte	$18
37405                                           ! 7759                          0,
37406 921A                      0000            .word	0
37407 921C                      0000            .word	0
37408                                           ! 7760 } },
37409                                           ! 7761 { 0x0196,
37410 921E                      0196            .word	$196
37411                                           ! 7762 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37412 9220                      009B            .word	$9B
37413                                           ! 7763                           0x01 | 0x02 | 0x04,
37414 9222                        07            .byte	7
37415                                           ! 7764                           0,
37416 9223                        00            .byte	0
37417                                           ! 7765                           64,
37418 9224                      0040            .word	$40
37419                                           ! 7766                    64,
37420 9226                      0040            .word	$40
37421                                           ! 7767                        0xA000,
37422 9228                      A000            .word	$A000
37423                                           ! 7768                        0x0000,
37424 922A                      0000            .word	0
37425                                           ! 7769                       0,
37426 922C                      0000            .word	0
37427 922E                      0000            .word	0
37428                                           ! 7770                             1080,
37429 9230                      0438            .word	$438
37430                                           ! 7771                        540,
37431 9232                      021C            .word	$21C
37432                                           ! 7772                        960,
37433 9234                      03C0            .word	$3C0
37434                                           ! 7773                      8,
37435 9236                        08            .byte	8
37436                                           ! 7774                      16,
37437 9237                        10            .byte	$10
37438                                           ! 7775                           1,
37439 9238                        01            .byte	1
37440                                           ! 7776                         16,
37441 9239                        10            .byte	$10
37442                                           ! 7777                          16,
37443 923A                        10            .byte	$10
37444                                           ! 7778                        0x06,
37445 923B                        06            .byte	6
37446                                           ! 7779                     0,
37447 923C                        00            .byte	0
37448                                           ! 7780                               15,
37449 923D                        0F            .byte	$F
37450                                           ! 7781                          0,
37451 923E                        00            .byte	0
37452                                           ! 7782                        5,
37453 923F                        05            .byte	5
37454                                           ! 7783                             11,
37455 9240                        0B            .byte	$B
37456                                           ! 7784                          6,
37457 9241                        06            .byte	6
37458                                           ! 7785                               5,
37459 9242                        05            .byte	5
37460                                           ! 7786                         5,
37461 9243                        05            .byte	5
37462                                           ! 7787                              0,
37463 9244                        00            .byte	0
37464                                           ! 7788                         0,
37465 9245                        00            .byte	0
37466                                           ! 7789                              0,
37467 9246                        00            .byte	0
37468                                           ! 7790                                0,
37469 9247                        00            .byte	0
37470                                           ! 7791                        0xE0000000,
37471 9248                      0000            .word	0
37472 924A                      E000            .word	$E000
37473                                           ! 7792                               0,
37474 924C                      0000            .word	0
37475 924E                      0000            .word	0
37476                                           ! 7793                             0,
37477 9250                      0000            .word	0
37478                                           ! 7794                                1080,
37479 9252                      0438            .word	$438
37480                                           ! 7795                             0,
37481 9254                        00            .byte	0
37482                                           ! 7796                             0,
37483 9255                        00            .byte	0
37484                                           ! 7797                           5,
37485 9256                        05            .byte	5
37486                                           ! 7798                             
37487                                           ! 7798    11,
37488 9257                        0B            .byte	$B
37489                                           ! 7799                             6,
37490 9258                        06            .byte	6
37491                                           ! 7800                                  5,
37492 9259                        05            .byte	5
37493                                           ! 7801                            5,
37494 925A                        05            .byte	5
37495                                           ! 7802                                 0,
37496 925B                        00            .byte	0
37497                                           ! 7803                            0,
37498 925C                        00            .byte	0
37499                                           ! 7804                                 0,
37500 925D                        00            .byte	0
37501                                           ! 7805                          0,
37502 925E                      0000            .word	0
37503 9260                      0000            .word	0
37504                                           ! 7806 } },
37505                                           ! 7807 { 0x0197,
37506 9262                      0197            .word	$197
37507                                           ! 7808 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37508 9264                      009B            .word	$9B
37509                                           ! 7809                           0x01 | 0x02 | 0x04,
37510 9266                        07            .byte	7
37511                                           ! 7810                           0,
37512 9267                        00            .byte	0
37513                                           ! 7811                           64,
37514 9268                      0040            .word	$40
37515                                           ! 7812                    64,
37516 926A                      0040            .word	$40
37517                                           ! 7813                        0xA000,
37518 926C                      A000            .word	$A000
37519                                           ! 7814                        0x0000,
37520 926E                      0000            .word	0
37521                                           ! 7815                       0,
37522 9270                      0000            .word	0
37523 9272                      0000            .word	0
37524                                           ! 7816                             1620,
37525 9274                      0654            .word	$654
37526                                           ! 7817                        540,
37527 9276                      021C            .word	$21C
37528                                           ! 7818                        960,
37529 9278                      03C0            .word	$3C0
37530                                           ! 7819                      8,
37531 927A                        08            .byte	8
37532                                           ! 7820                      16,
37533 927B                        10            .byte	$10
37534                                           ! 7821                           1,
37535 927C                        01            .byte	1
37536                                           ! 7822                         24,
37537 927D                        18            .byte	$18
37538                                           ! 7823                          24,
37539 927E                        18            .byte	$18
37540                                           ! 7824                        0x06,
37541 927F                        06            .byte	6
37542                                           ! 7825                     0,
37543 9280                        00            .byte	0
37544                                           ! 7826                               9,
37545 9281                        09            .byte	9
37546                                           ! 7827                          0,
37547 9282                        00            .byte	0
37548                                           ! 7828                        8,
37549 9283                        08            .byte	8
37550                                           ! 7829                             16,
37551 9284                        10            .byte	$10
37552                                           ! 7830                          8,
37553 9285                        08            .byte	8
37554                                           ! 7831                               8,
37555 9286                        08            .byte	8
37556                                           ! 7832                         8,
37557 9287                        08            .byte	8
37558                                           ! 7833                              0,
37559 9288                        00            .byte	0
37560                                           ! 7834                         0,
37561 9289                        00            .byte	0
37562                                           ! 7835                              0,
37563 928A                        00            .byte	0
37564                                           ! 7836                                0,
37565 928B                        00            .byte	0
37566                                           ! 7837                        0xE0000000,
37567 928C                      0000            .word	0
37568 928E                      E000            .word	$E000
37569                                           ! 7838                               0,
37570 9290                      0000            .word	0
37571 9292                      0000            .word	0
37572                                           ! 7839                             0,
37573 9294                      0000            .word	0
37574                                           ! 7840                                1620,
37575 9296                      0654            .word	$654
37576                                           ! 7841                             0,
37577 9298                        00            .byte	0
37578                                           ! 7842                             0,
37579 9299                        00            .byte	0
37580                                           ! 7843                           8,
37581 929A                        08            .byte	8
37582                                           ! 7844                                16,
37583 929B                        10            .byte	$10
37584                                           ! 7845                             8,
37585 929C                        08            .byte	8
37586                                           ! 7846                                  8,
37587 929D                        08            .byte	8
37588                                           ! 7847                            8,
37589 929E                        08            .byte	8
37590                                           ! 7848                                 0,
37591 929F                        00            .byte	0
37592                                           ! 7849                            0,
37593 92A0                        00            .byte	0
37594                                           ! 7850                                 0,
37595 92A1                        00            .byte	0
37596                                           ! 7851                          0,
37597 92A2                      0000            .word	0
37598 92A4                      0000            .word	0
37599                                           ! 7852 } },
37600                                           ! 7853 { 0x0198,
37601 92A6                      0198            .word	$198
37602                                           ! 7854 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37603 92A8                      009B            .word	$9B
37604                                           ! 7855                           0x01 | 0x02 | 0x04,
37605 92AA                        07            .byte	7
37606                                           ! 7856                           0,
37607 92AB                        00            .byte	0
37608                                           ! 7857                           64,
37609 92AC                      0040            .word	$40
37610                                           ! 7858                    64,
37611 92AE                      0040            .word	$40
37612                                           ! 7859                        0xA000,
37613 92B0                      A000            .word	$A000
37614                                           ! 7860                        0x0000,
37615 92B2                      0000            .word	0
37616                                           ! 7861                       0,
37617 92B4                      0000            .word	0
37618 92B6                      0000            .word	0
37619                                           ! 7862                             2160,
37620 92B8                      0870            .word	$870
37621                                           ! 7863                        540,
37622 92BA                      021C            .word	$21C
37623                                           ! 7864                        960,
37624 92BC                      03C0            .word	$3C0
37625                                           ! 7865                      8,
37626 92BE                        08            .byte	8
37627                                           ! 7866                      16,
37628 92BF                        10            .byte	$10
37629                                           ! 7867                           1,
37630 92C0                        01            .byte	1
37631                                           ! 7868 
37632                                           ! 7868                         32,
37633 92C1                        20            .byte	$20
37634                                           ! 7869                          32,
37635 92C2                        20            .byte	$20
37636                                           ! 7870                        0x06,
37637 92C3                        06            .byte	6
37638                                           ! 7871                     0,
37639 92C4                        00            .byte	0
37640                                           ! 7872                               7,
37641 92C5                        07            .byte	7
37642                                           ! 7873                          0,
37643 92C6                        00            .byte	0
37644                                           ! 7874                        8,
37645 92C7                        08            .byte	8
37646                                           ! 7875                             16,
37647 92C8                        10            .byte	$10
37648                                           ! 7876                          8,
37649 92C9                        08            .byte	8
37650                                           ! 7877                               8,
37651 92CA                        08            .byte	8
37652                                           ! 7878                         8,
37653 92CB                        08            .byte	8
37654                                           ! 7879                              0,
37655 92CC                        00            .byte	0
37656                                           ! 7880                         8,
37657 92CD                        08            .byte	8
37658                                           ! 7881                              24,
37659 92CE                        18            .byte	$18
37660                                           ! 7882                                0x02,
37661 92CF                        02            .byte	2
37662                                           ! 7883                        0xE0000000,
37663 92D0                      0000            .word	0
37664 92D2                      E000            .word	$E000
37665                                           ! 7884                               0,
37666 92D4                      0000            .word	0
37667 92D6                      0000            .word	0
37668                                           ! 7885                             0,
37669 92D8                      0000            .word	0
37670                                           ! 7886                                2160,
37671 92DA                      0870            .word	$870
37672                                           ! 7887                             0,
37673 92DC                        00            .byte	0
37674                                           ! 7888                             0,
37675 92DD                        00            .byte	0
37676                                           ! 7889                           8,
37677 92DE                        08            .byte	8
37678                                           ! 7890                                16,
37679 92DF                        10            .byte	$10
37680                                           ! 7891                             8,
37681 92E0                        08            .byte	8
37682                                           ! 7892                                  8,
37683 92E1                        08            .byte	8
37684                                           ! 7893                            8,
37685 92E2                        08            .byte	8
37686                                           ! 7894                                 0,
37687 92E3                        00            .byte	0
37688                                           ! 7895                            8,
37689 92E4                        08            .byte	8
37690                                           ! 7896                                 24,
37691 92E5                        18            .byte	$18
37692                                           ! 7897                          0,
37693 92E6                      0000            .word	0
37694 92E8                      0000            .word	0
37695                                           ! 7898 } },
37696                                           ! 7899 { 0x0199,
37697 92EA                      0199            .word	$199
37698                                           ! 7900 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37699 92EC                      009B            .word	$9B
37700                                           ! 7901                           0x01 | 0x02 | 0x04,
37701 92EE                        07            .byte	7
37702                                           ! 7902                           0,
37703 92EF                        00            .byte	0
37704                                           ! 7903                           64,
37705 92F0                      0040            .word	$40
37706                                           ! 7904                    64,
37707 92F2                      0040            .word	$40
37708                                           ! 7905                        0xA000,
37709 92F4                      A000            .word	$A000
37710                                           ! 7906                        0x0000,
37711 92F6                      0000            .word	0
37712                                           ! 7907                       0,
37713 92F8                      0000            .word	0
37714 92FA                      0000            .word	0
37715                                           ! 7908                             1440,
37716 92FC                      05A0            .word	$5A0
37717                                           ! 7909                        720,
37718 92FE                      02D0            .word	$2D0
37719                                           ! 7910                        1280,
37720 9300                      0500            .word	$500
37721                                           ! 7911                      8,
37722 9302                        08            .byte	8
37723                                           ! 7912                      16,
37724 9303                        10            .byte	$10
37725                                           ! 7913                           1,
37726 9304                        01            .byte	1
37727                                           ! 7914                         16,
37728 9305                        10            .byte	$10
37729                                           ! 7915                          29,
37730 9306                        1D            .byte	$1D
37731                                           ! 7916                        0x06,
37732 9307                        06            .byte	6
37733                                           ! 7917                     0,
37734 9308                        00            .byte	0
37735                                           ! 7918                               8,
37736 9309                        08            .byte	8
37737                                           ! 7919                          0,
37738 930A                        00            .byte	0
37739                                           ! 7920                        5,
37740 930B                        05            .byte	5
37741                                           ! 7921                             11,
37742 930C                        0B            .byte	$B
37743                                           ! 7922                          6,
37744 930D                        06            .byte	6
37745                                           ! 7923                               5,
37746 930E                        05            .byte	5
37747                                           ! 7924                         5,
37748 930F                        05            .byte	5
37749                                           ! 7925                              0,
37750 9310                        00            .byte	0
37751                                           ! 7926                         0,
37752 9311                        00            .byte	0
37753                                           ! 7927                              0,
37754 9312                        00            .byte	0
37755                                           ! 7928                                0,
37756 9313                        00            .byte	0
37757                                           ! 7929                        0xE0000000,
37758 9314                      0000            .word	0
37759 9316                      E000            .word	$E000
37760                                           ! 7930                               0,
37761 9318                      0000            .word	0
37762 931A                      0000            .word	0
37763                                           ! 7931                             0,
37764 931C                      0000            .word	0
37765                                           ! 7932                                1440,
37766 931E                      05A0            .word	$5A0
37767                                           ! 7933                             0,
37768 9320                        00            .byte	0
37769                                           ! 7934                             0,
37770 9321                        00            .byte	0
37771                                           ! 7935                           5,
37772 9322                        05            .byte	5
37773                                           ! 7936   
37774                                           ! 7936                              11,
37775 9323                        0B            .byte	$B
37776                                           ! 7937                             6,
37777 9324                        06            .byte	6
37778                                           ! 7938                                  5,
37779 9325                        05            .byte	5
37780                                           ! 7939                            5,
37781 9326                        05            .byte	5
37782                                           ! 7940                                 0,
37783 9327                        00            .byte	0
37784                                           ! 7941                            0,
37785 9328                        00            .byte	0
37786                                           ! 7942                                 0,
37787 9329                        00            .byte	0
37788                                           ! 7943                          0,
37789 932A                      0000            .word	0
37790 932C                      0000            .word	0
37791                                           ! 7944 } },
37792                                           ! 7945 { 0x019a,
37793 932E                      019A            .word	$19A
37794                                           ! 7946 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37795 9330                      009B            .word	$9B
37796                                           ! 7947                           0x01 | 0x02 | 0x04,
37797 9332                        07            .byte	7
37798                                           ! 7948                           0,
37799 9333                        00            .byte	0
37800                                           ! 7949                           64,
37801 9334                      0040            .word	$40
37802                                           ! 7950                    64,
37803 9336                      0040            .word	$40
37804                                           ! 7951                        0xA000,
37805 9338                      A000            .word	$A000
37806                                           ! 7952                        0x0000,
37807 933A                      0000            .word	0
37808                                           ! 7953                       0,
37809 933C                      0000            .word	0
37810 933E                      0000            .word	0
37811                                           ! 7954                             2160,
37812 9340                      0870            .word	$870
37813                                           ! 7955                        720,
37814 9342                      02D0            .word	$2D0
37815                                           ! 7956                        1280,
37816 9344                      0500            .word	$500
37817                                           ! 7957                      8,
37818 9346                        08            .byte	8
37819                                           ! 7958                      16,
37820 9347                        10            .byte	$10
37821                                           ! 7959                           1,
37822 9348                        01            .byte	1
37823                                           ! 7960                         24,
37824 9349                        18            .byte	$18
37825                                           ! 7961                          43,
37826 934A                        2B            .byte	$2B
37827                                           ! 7962                        0x06,
37828 934B                        06            .byte	6
37829                                           ! 7963                     0,
37830 934C                        00            .byte	0
37831                                           ! 7964                               5,
37832 934D                        05            .byte	5
37833                                           ! 7965                          0,
37834 934E                        00            .byte	0
37835                                           ! 7966                        8,
37836 934F                        08            .byte	8
37837                                           ! 7967                             16,
37838 9350                        10            .byte	$10
37839                                           ! 7968                          8,
37840 9351                        08            .byte	8
37841                                           ! 7969                               8,
37842 9352                        08            .byte	8
37843                                           ! 7970                         8,
37844 9353                        08            .byte	8
37845                                           ! 7971                              0,
37846 9354                        00            .byte	0
37847                                           ! 7972                         0,
37848 9355                        00            .byte	0
37849                                           ! 7973                              0,
37850 9356                        00            .byte	0
37851                                           ! 7974                                0,
37852 9357                        00            .byte	0
37853                                           ! 7975                        0xE0000000,
37854 9358                      0000            .word	0
37855 935A                      E000            .word	$E000
37856                                           ! 7976                               0,
37857 935C                      0000            .word	0
37858 935E                      0000            .word	0
37859                                           ! 7977                             0,
37860 9360                      0000            .word	0
37861                                           ! 7978                                2160,
37862 9362                      0870            .word	$870
37863                                           ! 7979                             0,
37864 9364                        00            .byte	0
37865                                           ! 7980                             0,
37866 9365                        00            .byte	0
37867                                           ! 7981                           8,
37868 9366                        08            .byte	8
37869                                           ! 7982                                16,
37870 9367                        10            .byte	$10
37871                                           ! 7983                             8,
37872 9368                        08            .byte	8
37873                                           ! 7984                                  8,
37874 9369                        08            .byte	8
37875                                           ! 7985                            8,
37876 936A                        08            .byte	8
37877                                           ! 7986                                 0,
37878 936B                        00            .byte	0
37879                                           ! 7987                            0,
37880 936C                        00            .byte	0
37881                                           ! 7988                                 0,
37882 936D                        00            .byte	0
37883                                           ! 7989                          0,
37884 936E                      0000            .word	0
37885 9370                      0000            .word	0
37886                                           ! 7990 } },
37887                                           ! 7991 { 0x019b,
37888 9372                      019B            .word	$19B
37889                                           ! 7992 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37890 9374                      009B            .word	$9B
37891                                           ! 7993                           0x01 | 0x02 | 0x04,
37892 9376                        07            .byte	7
37893                                           ! 7994                           0,
37894 9377                        00            .byte	0
37895                                           ! 7995                           64,
37896 9378                      0040            .word	$40
37897                                           ! 7996                    64,
37898 937A                      0040            .word	$40
37899                                           ! 7997                        0xA000,
37900 937C                      A000            .word	$A000
37901                                           ! 7998                        0x0000,
37902 937E                      0000            .word	0
37903                                           ! 7999                       0,
37904 9380                      0000            .word	0
37905 9382                      0000            .word	0
37906                                           ! 8000                             2880,
37907 9384                      0B40            .word	$B40
37908                                           ! 8001                        720,
37909 9386                      02D0            .word	$2D0
37910                                           ! 8002                        1280,
37911 9388                      0500            .word	$500
37912                                           ! 8003                      8,
37913 938A                        08            .byte	8
37914                                           ! 8004                      16,
37915 938B                        10            .byte	$10
37916                                           ! 8005  
37917                                           ! 8005                          1,
37918 938C                        01            .byte	1
37919                                           ! 8006                         32,
37920 938D                        20            .byte	$20
37921                                           ! 8007                          57,
37922 938E                        39            .byte	$39
37923                                           ! 8008                        0x06,
37924 938F                        06            .byte	6
37925                                           ! 8009                     0,
37926 9390                        00            .byte	0
37927                                           ! 8010                               3,
37928 9391                        03            .byte	3
37929                                           ! 8011                          0,
37930 9392                        00            .byte	0
37931                                           ! 8012                        8,
37932 9393                        08            .byte	8
37933                                           ! 8013                             16,
37934 9394                        10            .byte	$10
37935                                           ! 8014                          8,
37936 9395                        08            .byte	8
37937                                           ! 8015                               8,
37938 9396                        08            .byte	8
37939                                           ! 8016                         8,
37940 9397                        08            .byte	8
37941                                           ! 8017                              0,
37942 9398                        00            .byte	0
37943                                           ! 8018                         8,
37944 9399                        08            .byte	8
37945                                           ! 8019                              24,
37946 939A                        18            .byte	$18
37947                                           ! 8020                                0x02,
37948 939B                        02            .byte	2
37949                                           ! 8021                        0xE0000000,
37950 939C                      0000            .word	0
37951 939E                      E000            .word	$E000
37952                                           ! 8022                               0,
37953 93A0                      0000            .word	0
37954 93A2                      0000            .word	0
37955                                           ! 8023                             0,
37956 93A4                      0000            .word	0
37957                                           ! 8024                                2880,
37958 93A6                      0B40            .word	$B40
37959                                           ! 8025                             0,
37960 93A8                        00            .byte	0
37961                                           ! 8026                             0,
37962 93A9                        00            .byte	0
37963                                           ! 8027                           8,
37964 93AA                        08            .byte	8
37965                                           ! 8028                                16,
37966 93AB                        10            .byte	$10
37967                                           ! 8029                             8,
37968 93AC                        08            .byte	8
37969                                           ! 8030                                  8,
37970 93AD                        08            .byte	8
37971                                           ! 8031                            8,
37972 93AE                        08            .byte	8
37973                                           ! 8032                                 0,
37974 93AF                        00            .byte	0
37975                                           ! 8033                            8,
37976 93B0                        08            .byte	8
37977                                           ! 8034                                 24,
37978 93B1                        18            .byte	$18
37979                                           ! 8035                          0,
37980 93B2                      0000            .word	0
37981 93B4                      0000            .word	0
37982                                           ! 8036 } },
37983                                           ! 8037 { 0x019c,
37984 93B6                      019C            .word	$19C
37985                                           ! 8038 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37986 93B8                      009B            .word	$9B
37987                                           ! 8039                           0x01 | 0x02 | 0x04,
37988 93BA                        07            .byte	7
37989                                           ! 8040                           0,
37990 93BB                        00            .byte	0
37991                                           ! 8041                           64,
37992 93BC                      0040            .word	$40
37993                                           ! 8042                    64,
37994 93BE                      0040            .word	$40
37995                                           ! 8043                        0xA000,
37996 93C0                      A000            .word	$A000
37997                                           ! 8044                        0x0000,
37998 93C2                      0000            .word	0
37999                                           ! 8045                       0,
38000 93C4                      0000            .word	0
38001 93C6                      0000            .word	0
38002                                           ! 8046                             1600,
38003 93C8                      0640            .word	$640
38004                                           ! 8047                        800,
38005 93CA                      0320            .word	$320
38006                                           ! 8048                        1280,
38007 93CC                      0500            .word	$500
38008                                           ! 8049                      8,
38009 93CE                        08            .byte	8
38010                                           ! 8050                      16,
38011 93CF                        10            .byte	$10
38012                                           ! 8051                           1,
38013 93D0                        01            .byte	1
38014                                           ! 8052                         16,
38015 93D1                        10            .byte	$10
38016                                           ! 8053                          32,
38017 93D2                        20            .byte	$20
38018                                           ! 8054                        0x06,
38019 93D3                        06            .byte	6
38020                                           ! 8055                     0,
38021 93D4                        00            .byte	0
38022                                           ! 8056                               7,
38023 93D5                        07            .byte	7
38024                                           ! 8057                          0,
38025 93D6                        00            .byte	0
38026                                           ! 8058                        5,
38027 93D7                        05            .byte	5
38028                                           ! 8059                             11,
38029 93D8                        0B            .byte	$B
38030                                           ! 8060                          6,
38031 93D9                        06            .byte	6
38032                                           ! 8061                               5,
38033 93DA                        05            .byte	5
38034                                           ! 8062                         5,
38035 93DB                        05            .byte	5
38036                                           ! 8063                              0,
38037 93DC                        00            .byte	0
38038                                           ! 8064                         0,
38039 93DD                        00            .byte	0
38040                                           ! 8065                              0,
38041 93DE                        00            .byte	0
38042                                           ! 8066                                0,
38043 93DF                        00            .byte	0
38044                                           ! 8067                        0xE0000000,
38045 93E0                      0000            .word	0
38046 93E2                      E000            .word	$E000
38047                                           ! 8068                               0,
38048 93E4                      0000            .word	0
38049 93E6                      0000            .word	0
38050                                           ! 8069                             0,
38051 93E8                      0000            .word	0
38052                                           ! 8070                                1600,
38053 93EA                      0640            .word	$640
38054                                           ! 8071                             0,
38055 93EC                        00            .byte	0
38056                                           ! 8072                             0,
38057 93ED                        00            .byte	0
38058                                           ! 8073    
38059                                           ! 8073                        5,
38060 93EE                        05            .byte	5
38061                                           ! 8074                                11,
38062 93EF                        0B            .byte	$B
38063                                           ! 8075                             6,
38064 93F0                        06            .byte	6
38065                                           ! 8076                                  5,
38066 93F1                        05            .byte	5
38067                                           ! 8077                            5,
38068 93F2                        05            .byte	5
38069                                           ! 8078                                 0,
38070 93F3                        00            .byte	0
38071                                           ! 8079                            0,
38072 93F4                        00            .byte	0
38073                                           ! 8080                                 0,
38074 93F5                        00            .byte	0
38075                                           ! 8081                          0,
38076 93F6                      0000            .word	0
38077 93F8                      0000            .word	0
38078                                           ! 8082 } },
38079                                           ! 8083 { 0x019d,
38080 93FA                      019D            .word	$19D
38081                                           ! 8084 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
38082 93FC                      009B            .word	$9B
38083                                           ! 8085                           0x01 | 0x02 | 0x04,
38084 93FE                        07            .byte	7
38085                                           ! 8086                           0,
38086 93FF                        00            .byte	0
38087                                           ! 8087                           64,
38088 9400                      0040            .word	$40
38089                                           ! 8088                    64,
38090 9402                      0040            .word	$40
38091                                           ! 8089                        0xA000,
38092 9404                      A000            .word	$A000
38093                                           ! 8090                        0x0000,
38094 9406                      0000            .word	0
38095                                           ! 8091                       0,
38096 9408                      0000            .word	0
38097 940A                      0000            .word	0
38098                                           ! 8092                             2400,
38099 940C                      0960            .word	$960
38100                                           ! 8093                        800,
38101 940E                      0320            .word	$320
38102                                           ! 8094                        1280,
38103 9410                      0500            .word	$500
38104                                           ! 8095                      8,
38105 9412                        08            .byte	8
38106                                           ! 8096                      16,
38107 9413                        10            .byte	$10
38108                                           ! 8097                           1,
38109 9414                        01            .byte	1
38110                                           ! 8098                         24,
38111 9415                        18            .byte	$18
38112                                           ! 8099                          47,
38113 9416                        2F            .byte	$2F
38114                                           ! 8100                        0x06,
38115 9417                        06            .byte	6
38116                                           ! 8101                     0,
38117 9418                        00            .byte	0
38118                                           ! 8102                               4,
38119 9419                        04            .byte	4
38120                                           ! 8103                          0,
38121 941A                        00            .byte	0
38122                                           ! 8104                        8,
38123 941B                        08            .byte	8
38124                                           ! 8105                             16,
38125 941C                        10            .byte	$10
38126                                           ! 8106                          8,
38127 941D                        08            .byte	8
38128                                           ! 8107                               8,
38129 941E                        08            .byte	8
38130                                           ! 8108                         8,
38131 941F                        08            .byte	8
38132                                           ! 8109                              0,
38133 9420                        00            .byte	0
38134                                           ! 8110                         0,
38135 9421                        00            .byte	0
38136                                           ! 8111                              0,
38137 9422                        00            .byte	0
38138                                           ! 8112                                0,
38139 9423                        00            .byte	0
38140                                           ! 8113                        0xE0000000,
38141 9424                      0000            .word	0
38142 9426                      E000            .word	$E000
38143                                           ! 8114                               0,
38144 9428                      0000            .word	0
38145 942A                      0000            .word	0
38146                                           ! 8115                             0,
38147 942C                      0000            .word	0
38148                                           ! 8116                                2400,
38149 942E                      0960            .word	$960
38150                                           ! 8117                             0,
38151 9430                        00            .byte	0
38152                                           ! 8118                             0,
38153 9431                        00            .byte	0
38154                                           ! 8119                           8,
38155 9432                        08            .byte	8
38156                                           ! 8120                                16,
38157 9433                        10            .byte	$10
38158                                           ! 8121                             8,
38159 9434                        08            .byte	8
38160                                           ! 8122                                  8,
38161 9435                        08            .byte	8
38162                                           ! 8123                            8,
38163 9436                        08            .byte	8
38164                                           ! 8124                                 0,
38165 9437                        00            .byte	0
38166                                           ! 8125                            0,
38167 9438                        00            .byte	0
38168                                           ! 8126                                 0,
38169 9439                        00            .byte	0
38170                                           ! 8127                          0,
38171 943A                      0000            .word	0
38172 943C                      0000            .word	0
38173                                           ! 8128 } },
38174                                           ! 8129 { 0x019e,
38175 943E                      019E            .word	$19E
38176                                           ! 8130 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
38177 9440                      009B            .word	$9B
38178                                           ! 8131                           0x01 | 0x02 | 0x04,
38179 9442                        07            .byte	7
38180                                           ! 8132                           0,
38181 9443                        00            .byte	0
38182                                           ! 8133                           64,
38183 9444                      0040            .word	$40
38184                                           ! 8134                    64,
38185 9446                      0040            .word	$40
38186                                           ! 8135                        0xA000,
38187 9448                      A000            .word	$A000
38188                                           ! 8136                        0x0000,
38189 944A                      0000            .word	0
38190                                           ! 8137                       0,
38191 944C                      0000            .word	0
38192 944E                      0000            .word	0
38193                                           ! 8138                             3200,
38194 9450                      0C80            .word	$C80
38195                                           ! 8139                        800,
38196 9452                      0320            .word	$320
38197                                           ! 8140                        1280,
38198 9454                      0500            .word	$500
38199                                           ! 8141                      8
38200                                           ! 8141 ,
38201 9456                        08            .byte	8
38202                                           ! 8142                      16,
38203 9457                        10            .byte	$10
38204                                           ! 8143                           1,
38205 9458                        01            .byte	1
38206                                           ! 8144                         32,
38207 9459                        20            .byte	$20
38208                                           ! 8145                          63,
38209 945A                        3F            .byte	$3F
38210                                           ! 8146                        0x06,
38211 945B                        06            .byte	6
38212                                           ! 8147                     0,
38213 945C                        00            .byte	0
38214                                           ! 8148                               3,
38215 945D                        03            .byte	3
38216                                           ! 8149                          0,
38217 945E                        00            .byte	0
38218                                           ! 8150                        8,
38219 945F                        08            .byte	8
38220                                           ! 8151                             16,
38221 9460                        10            .byte	$10
38222                                           ! 8152                          8,
38223 9461                        08            .byte	8
38224                                           ! 8153                               8,
38225 9462                        08            .byte	8
38226                                           ! 8154                         8,
38227 9463                        08            .byte	8
38228                                           ! 8155                              0,
38229 9464                        00            .byte	0
38230                                           ! 8156                         8,
38231 9465                        08            .byte	8
38232                                           ! 8157                              24,
38233 9466                        18            .byte	$18
38234                                           ! 8158                                0x02,
38235 9467                        02            .byte	2
38236                                           ! 8159                        0xE0000000,
38237 9468                      0000            .word	0
38238 946A                      E000            .word	$E000
38239                                           ! 8160                               0,
38240 946C                      0000            .word	0
38241 946E                      0000            .word	0
38242                                           ! 8161                             0,
38243 9470                      0000            .word	0
38244                                           ! 8162                                3200,
38245 9472                      0C80            .word	$C80
38246                                           ! 8163                             0,
38247 9474                        00            .byte	0
38248                                           ! 8164                             0,
38249 9475                        00            .byte	0
38250                                           ! 8165                           8,
38251 9476                        08            .byte	8
38252                                           ! 8166                                16,
38253 9477                        10            .byte	$10
38254                                           ! 8167                             8,
38255 9478                        08            .byte	8
38256                                           ! 8168                                  8,
38257 9479                        08            .byte	8
38258                                           ! 8169                            8,
38259 947A                        08            .byte	8
38260                                           ! 8170                                 0,
38261 947B                        00            .byte	0
38262                                           ! 8171                            8,
38263 947C                        08            .byte	8
38264                                           ! 8172                                 24,
38265 947D                        18            .byte	$18
38266                                           ! 8173                          0,
38267 947E                      0000            .word	0
38268 9480                      0000            .word	0
38269                                           ! 8174 } },
38270                                           ! 8175 { 0xFFFF,
38271 9482                      FFFF            .word	$FFFF
38272                                           ! 8176 { 0,
38273 9484                      0000            .word	0
38274                                           ! 8177 } },
38275 9486                  00000040            .blkb	$40
38276                                           ! 8178 };
38277                                           !BCC_EOS
38278                                           ! 8179 extern char vbebios_copyright;
38279                                           !BCC_EOS
38280                                           ! 8180 extern char vbebios_vendor_name;
38281                                           !BCC_EOS
38282                                           ! 8181 extern char vbebios_product_name;
38283                                           !BCC_EOS
38284                                           ! 8182 extern char vbebios_product_revision;
38285                                           !BCC_EOS
38286                                           ! 8183 #asm
38287                                           !BCC_ASM
38288                       000094C6            _vbebios_copyright:
38289 94C6                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
38290 950B                        00            .byte 0x00
38291                       0000950C            _vbebios_vendor_name:
38292 950C                        42            .ascii "Bochs/Plex86 Developers"
38293 9523                        00            .byte 0x00
38294                       00009524            _vbebios_product_name:
38295 9524                        42            .ascii "Bochs/Plex86 VBE Adapter"
38296 953C                        00            .byte 0x00
38297                       0000953D            _vbebios_product_revision:
38298 953D                        24            .ascii "$Id$"
38299 9541                        00            .byte 0x00
38300                       00009542            _vbebios_info_string:
38301 9542                        42            .ascii "Bochs VBE Display Adapter enabled"
38302 9563                        0A            .byte 0x0a,0x0d
38303 9565                        0A            .byte 0x0a,0x0d
38304 9567                        00            .byte 0x00
38305                       00009568            _no_vbebios_info_string:
38306 9568                        4E            .ascii "NO Bochs VBE Support available!"
38307 9587                        0A            .byte 0x0a,0x0d
38308 9589                        0A            .byte 0x0a,0x0d
38309 958B                        00            .byte 0x00
38310                       0000958C            msg_vbe_init:
38311 958C                        56            .ascii "VBE Bios $Id$"
38312 9599                        0A            .byte 0x0a,0x0d, 0x00
38313 959C                  00000002              .align 2
38314                       0000959C            vesa_pm_start:
38315 959C                      0014              dw vesa_pm_set_window - vesa_pm_start
38316 959E                      004B              dw vesa_pm_set_display_start - vesa_pm_start
38317 95A0                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
38318 95A2                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
38319                       000095A4            vesa_pm_io_ports_table:
38320 95A4                      01CE              dw 0x01CE
38321 95A6                      01CF              dw 0x01CE + 1
38322 95A8                      01CF              dw 0x01CF
38323 95AA                      01D0              dw 0x01CF + 1
38324 95AC                      FFFF              dw 0xffff
38325 95AE                      FFFF              dw 0xffff
38326                                             USE32
38327                       000095B0            vesa_pm_set_window:
38328 95B0     66    83FB                   00    cmp bx, #0x00
38329 95B4           74           05              je vesa_pm_set_display_window1
38330 95B6     66    B8                   0100    mov ax, #0x0100
38331 95BA           C3                           ret
38332                       000095BB            vesa_pm_set_display_window1:
38333 95BB     66    89D0                         mov ax, dx
38334 95BE     66    52                           push dx
38335 95C0     66    50                           push ax
38336 95C2     66    BA                   01CE    mov dx, # 0x01CE
38337 95C6     66    B8                   0005    mov ax, # 0x5
38338 95CA     66    EF                           out dx, ax
38339 95CC     66    58                           pop ax
38340 95CE     66    BA                   01CF    mov dx, # 0x01CF
38341 95D2     66    EF                           out dx, ax
38342 95D4     66    ED                           in ax, dx
38343 95D6     66    5A                           pop dx
38344 95D8     66    39C2                         cmp dx, ax
38345 95DB           75           05              jne illegal_window
38346 95DD     66    B8                   004F    mov ax, #0x004f
38347 95E1           C3                           ret
38348                       000095E2            illegal_window:
38349 95E2     66    B8                   014F    mov ax, #0x014f
38350 95E6           C3                           ret
38351                       000095E7            vesa_pm_set_display_start:
38352 95E7           80FB                   80    cmp bl, #0x80
38353 95EA           74           0A              je vesa_pm_set_display_start1
38354 95EC           80FB                   00    cmp bl, #0x00
38355 95EF           74           05              je vesa_pm_set_display_start1
38356 95F1     66    B8                   0100    mov ax, #0x0100
38357 95F5           C3                           ret
38358                       000095F6            vesa_pm_set_display_start1:
38359                                           ; convert offset to (X, Y) coordinate
38360                                           ; (would be simpler to change Bochs 1 API...)
38361 95F6           50                           push eax
38362 95F7           51                           push ecx
38363 95F8           52                           push edx
38364 95F9           56                           push esi
38365 95FA           57                           push edi
38366 95FB           C1E2                   10    shl edx, #16
38367 95FE           81E1             0000FFFF    and ecx, #0xffff
38368 9604           09D1                         or ecx, edx
38369 9606           C1E1                   02    shl ecx, #2
38370 9609           89C8                         mov eax, ecx
38371 960B           50                           push eax
38372 960C     66    BA                   01CE    mov dx, # 0x01CE
38373 9610     66    B8                   0006    mov ax, # 0x6
38374 9614     66    EF                           out dx, ax
38375 9616     66    BA                   01CF    mov dx, # 0x01CF
38376 961A     66    ED                           in ax, dx
38377 961C         0FB7C8                         movzx ecx, ax
38378 961F     66    BA                   01CE    mov dx, # 0x01CE
38379 9623     66    B8                   0003    mov ax, # 0x3
38380 9627     66    EF                           out dx, ax
38381 9629     66    BA                   01CF    mov dx, # 0x01CF
38382 962D     66    ED                           in ax, dx
38383 962F         0FB7F0                         movzx esi, ax
38384 9632           58                           pop eax
38385 9633           83FE                   04    cmp esi, #4
38386 9636           74           17              jz bpp4_mode
38387 9638           83C6                   07    add esi, #7
38388 963B           C1EE                   03    shr esi, #3
38389 963E         0FAFCE                         imul ecx, esi
38390 9641           31D2                         xor edx, edx
38391 9643           F7F1                         div ecx
38392 9645           89C7                         mov edi, eax
38393 9647           89D0                         mov eax, edx
38394 9649           31D2                         xor edx, edx
38395 964B           F7F6                         div esi
38396 964D           EB           0C              jmp set_xy_regs
38397                       0000964F            bpp4_mode:
38398 964F           D1E9                         shr ecx, #1
38399 9651           31D2                         xor edx, edx
38400 9653           F7F1                         div ecx
38401 9655           89C7                         mov edi, eax
38402 9657           89D0                         mov eax, edx
38403 9659           D1E0                         shl eax, #1
38404                       0000965B            set_xy_regs:
38405 965B     66    52                           push dx
38406 965D     66    50                           push ax
38407 965F     66    BA                   01CE    mov dx, # 0x01CE
38408 9663     66    B8                   0008    mov ax, # 0x8
38409 9667     66    EF                           out dx, ax
38410 9669     66    58                           pop ax
38411 966B     66    BA                   01CF    mov dx, # 0x01CF
38412 966F     66    EF                           out dx, ax
38413 9671     66    5A                           pop dx
38414 9673     66    89F8                         mov ax, di
38415 9676     66    52                           push dx
38416 9678     66    50                           push ax
38417 967A     66    BA                   01CE    mov dx, # 0x01CE
38418 967E     66    B8                   0009    mov ax, # 0x9
38419 9682     66    EF                           out dx, ax
38420 9684     66    58                           pop ax
38421 9686     66    BA                   01CF    mov dx, # 0x01CF
38422 968A     66    EF                           out dx, ax
38423 968C     66    5A                           pop dx
38424 968E           5F                           pop edi
38425 968F           5E                           pop esi
38426 9690           5A                           pop edx
38427 9691           59                           pop ecx
38428 9692           58                           pop eax
38429 9693     66    B8                   004F    mov ax, #0x004f
38430 9697           C3                           ret
38431                       00009698            vesa_pm_unimplemented:
38432 9698     66    B8                   014F    mov ax, #0x014f
38433 969C           C3                           ret
38434                                             USE16
38435                       0000969D            vesa_pm_end:
38436                                           ; DISPI ioport functions
38437                       0000969D            dispi_get_id:
38438 969D           52                           push dx
38439 969E           BA                   01CE    mov dx, # 0x01CE
38440 96A1           B8                   0000    mov ax, # 0x0
38441 96A4           EF                           out dx, ax
38442 96A5           BA                   01CF    mov dx, # 0x01CF
38443 96A8           ED                           in ax, dx
38444 96A9           5A                           pop dx
38445 96AA           C3                           ret
38446                       000096AB            dispi_set_id:
38447 96AB           52                           push dx
38448 96AC           50                           push ax
38449 96AD           BA                   01CE    mov dx, # 0x01CE
38450 96B0           B8                   0000    mov ax, # 0x0
38451 96B3           EF                           out dx, ax
38452 96B4           58                           pop ax
38453 96B5           BA                   01CF    mov dx, # 0x01CF
38454 96B8           EF                           out dx, ax
38455 96B9           5A                           pop dx
38456 96BA           C3                           ret
38457                                           ! 8353 endasm
38458                                           !BCC_ENDASM
38459                                           ! 8354 static void dispi_set_xres(xres)
38460                                           ! 8355   Bit16u xres;
38461                                           
38462                       000096BB            _dispi_set_xres:
38463                                           !BCC_EOS
38464                                           ! 8356 {
38465                                           ! 8357 #asm
38466                                           !BCC_ASM
38467                       00000002            _dispi_set_xres.xres	set	2
38468 96BB           55                           push bp
38469 96BC           89E5                         mov bp, sp
38470 96BE           50                           push ax
38471 96BF           52                           push dx
38472 96C0           BA                   01CE    mov dx, # 0x01CE
38473 96C3           B8                   0001    mov ax, # 0x1
38474 96C6           EF                           out dx, ax
38475 96C7           BA                   01CF    mov dx, # 0x01CF
38476 96CA           8B46         04              mov ax, 4[bp] ; xres
38477 96CD           EF                           out dx, ax
38478 96CE           5A                           pop dx
38479 96CF           58                           pop ax
38480 96D0           5D                           pop bp
38481                                           ! 8371 endasm
38482                                           !BCC_ENDASM
38483                                           ! 8372 }
38484 96D1           C3                         ret
38485                                           ! 8373 static void dispi_set_yres(yres)
38486                                           ! 8374   Bit16u yres;
38487                       000096D2            _dispi_set_yres:
38488                                           !BCC_EOS
38489                                           ! 8375 {
38490                                           ! 8376   outw(0x01CE,0x2);
38491 96D2           55                         push	bp
38492 96D3           89E5                       mov	bp,sp
38493                                           ! Debug: list int = const 2 (used reg = )
38494 96D5           B8                   0002  mov	ax,*2
38495 96D8           50                         push	ax
38496                                           ! Debug: list int = const $1CE (used reg = )
38497 96D9           B8                   01CE  mov	ax,#$1CE
38498 96DC           50                         push	ax
38499                                           ! Debug: func () void = outw+0 (used reg = )
38500 96DD           E8         E6D6            call	_outw
38501 96E0           89EC                       mov	sp,bp
38502                                           !BCC_EOS
38503                                           ! 8377   outw(0x01CF,yres);
38504                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
38505 96E2           FF76         04            push	4[bp]
38506                                           ! Debug: list int = const $1CF (used reg = )
38507 96E5           B8                   01CF  mov	ax,#$1CF
38508 96E8           50                         push	ax
38509                                           ! Debug: func () void = outw+0 (used reg = )
38510 96E9           E8         E6CA            call	_outw
38511 96EC           89EC                       mov	sp,bp
38512                                           !BCC_EOS
38513                                           ! 8378 }
38514 96EE           5D                         pop	bp
38515 96EF           C3                         ret
38516                                           ! 8379 static void dispi_set_bpp(bpp)
38517                                           ! 8380   Bit16u bpp;
38518                       000096F0            _dispi_set_bpp:
38519                                           !BCC_EOS
38520                                           ! 8381 {
38521                                           ! 8382   outw(0x01CE,0x3);
38522 96F0           55                         push	bp
38523 96F1           89E5                       mov	bp,sp
38524                                           ! Debug: list int = const 3 (used reg = )
38525 96F3           B8                   0003  mov	ax,*3
38526 96F6           50                         push	ax
38527                                           ! Debug: list int = const $1CE (used reg = )
38528 96F7           B8                   01CE  mov	ax,#$1CE
38529 96FA           50                         push	ax
38530                                           ! Debug: func () void = outw+0 (used reg = )
38531 96FB           E8         E6B8            call	_outw
38532 96FE           89EC                       mov	sp,bp
38533                                           !BCC_EOS
38534                                           ! 8383   outw(0x01CF,bpp);
38535                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
38536 9700           FF76         04            push	4[bp]
38537                                           ! Debug: list int = const $1CF (used reg = )
38538 9703           B8                   01CF  mov	ax,#$1CF
38539 9706           50                         push	ax
38540                                           ! Debug: func () void = outw+0 (used reg = )
38541 9707           E8         E6AC            call	_outw
38542 970A           89EC                       mov	sp,bp
38543                                           !BCC_EOS
38544                                           ! 8384 }
38545 970C           5D                         pop	bp
38546 970D           C3                         ret
38547                                           ! 8385 #asm
38548                                           !BCC_ASM
38549                       00000002            _dispi_set_bpp.bpp	set	2
38550                                           ; AL = bits per pixel / AH = bytes per pixel
38551                       0000970E            dispi_get_bpp:
38552 970E           52                           push dx
38553 970F           BA                   01CE    mov dx, # 0x01CE
38554 9712           B8                   0003    mov ax, # 0x3
38555 9715           EF                           out dx, ax
38556 9716           BA                   01CF    mov dx, # 0x01CF
38557 9719           ED                           in ax, dx
38558 971A           88C4                         mov ah, al
38559 971C           C0EC                   03    shr ah, 3
38560 971F           A8                     07    test al, #0x07
38561 9721           74           02              jz get_bpp_noinc
38562 9723           FEC4                         inc ah
38563                       00009725            get_bpp_noinc:
38564 9725           5A                           pop dx
38565 9726           C3                           ret
38566                                           ; get display capabilities
38567                       00009727            _dispi_get_max_xres:
38568 9727           52                           push dx
38569 9728           53                           push bx
38570 9729           E8         004F              call dispi_get_enable
38571 972C           89C3                         mov bx, ax
38572 972E           0D                   0002    or ax, # 0x02
38573 9731           E8         0037              call _dispi_set_enable
38574 9734           BA                   01CE    mov dx, # 0x01CE
38575 9737           B8                   0001    mov ax, # 0x1
38576 973A           EF                           out dx, ax
38577 973B           BA                   01CF    mov dx, # 0x01CF
38578 973E           ED                           in ax, dx
38579 973F           50                           push ax
38580 9740           89D8                         mov ax, bx
38581 9742           E8         0026              call _dispi_set_enable
38582 9745           58                           pop ax
38583 9746           5B                           pop bx
38584 9747           5A                           pop dx
38585 9748           C3                           ret
38586                       00009749            _dispi_get_max_bpp:
38587 9749           52                           push dx
38588 974A           53                           push bx
38589 974B           E8         002D              call dispi_get_enable
38590 974E           89C3                         mov bx, ax
38591 9750           0D                   0002    or ax, # 0x02
38592 9753           E8         0015              call _dispi_set_enable
38593 9756           BA                   01CE    mov dx, # 0x01CE
38594 9759           B8                   0003    mov ax, # 0x3
38595 975C           EF                           out dx, ax
38596 975D           BA                   01CF    mov dx, # 0x01CF
38597 9760           ED                           in ax, dx
38598 9761           50                           push ax
38599 9762           89D8                         mov ax, bx
38600 9764           E8         0004              call _dispi_set_enable
38601 9767           58                           pop ax
38602 9768           5B                           pop bx
38603 9769           5A                           pop dx
38604 976A           C3                           ret
38605                       0000976B            _dispi_set_enable:
38606 976B           52                           push dx
38607 976C           50                           push ax
38608 976D           BA                   01CE    mov dx, # 0x01CE
38609 9770           B8                   0004    mov ax, # 0x4
38610 9773           EF                           out dx, ax
38611 9774           58                           pop ax
38612 9775           BA                   01CF    mov dx, # 0x01CF
38613 9778           EF                           out dx, ax
38614 9779           5A                           pop dx
38615 977A           C3                           ret
38616                       0000977B            dispi_get_enable:
38617 977B           52                           push dx
38618 977C           BA                   01CE    mov dx, # 0x01CE
38619 977F           B8                   0004    mov ax, # 0x4
38620 9782           EF                           out dx, ax
38621 9783           BA                   01CF    mov dx, # 0x01CF
38622 9786           ED                           in ax, dx
38623 9787           5A                           pop dx
38624 9788           C3                           ret
38625                       00009789            _dispi_set_bank:
38626 9789           52                           push dx
38627 978A           50                           push ax
38628 978B           BA                   01CE    mov dx, # 0x01CE
38629 978E           B8                   0005    mov ax, # 0x5
38630 9791           EF                           out dx, ax
38631 9792           58                           pop ax
38632 9793           BA                   01CF    mov dx, # 0x01CF
38633 9796           EF                           out dx, ax
38634 9797           5A                           pop dx
38635 9798           C3                           ret
38636                       00009799            dispi_get_bank:
38637 9799           52                           push dx
38638 979A           BA                   01CE    mov dx, # 0x01CE
38639 979D           B8                   0005    mov ax, # 0x5
38640 97A0           EF                           out dx, ax
38641 97A1           BA                   01CF    mov dx, # 0x01CF
38642 97A4           ED                           in ax, dx
38643 97A5           5A                           pop dx
38644 97A6           C3                           ret
38645                                           ! 8481 endasm
38646                                           !BCC_ENDASM
38647                                           ! 8482 static void dispi_set_bank_farcall()
38648                                           ! 8483 {
38649                       000097A7            _dispi_set_bank_farcall:
38650                                           ! 8484 #asm
38651                                           !BCC_ASM
38652 97A7           81FB                 0100    cmp bx,#0x0100
38653 97AB           74           1E              je dispi_set_bank_farcall_get
38654 97AD           09DB                         or bx,bx
38655 97AF           75           28              jnz dispi_set_bank_farcall_error
38656 97B1           89D0                         mov ax,dx
38657 97B3           52                           push dx
38658 97B4           50                           push ax
38659 97B5           B8                   0005    mov ax,# 0x5
38660 97B8           BA                   01CE    mov dx,# 0x01CE
38661 97BB           EF                           out dx,ax
38662 97BC           58                           pop ax
38663 97BD           BA                   01CF    mov dx,# 0x01CF
38664 97C0           EF                           out dx,ax
38665 97C1           ED                           in ax,dx
38666 97C2           5A                           pop dx
38667 97C3           39C2                         cmp dx,ax
38668 97C5           75           12              jne dispi_set_bank_farcall_error
38669 97C7           B8                   004F    mov ax, #0x004f
38670 97CA           CB                           retf
38671                       000097CB            dispi_set_bank_farcall_get:
38672 97CB           B8                   0005    mov ax,# 0x5
38673 97CE           BA                   01CE    mov dx,# 0x01CE
38674 97D1           EF                           out dx,ax
38675 97D2           BA                   01CF    mov dx,# 0x01CF
38676 97D5           ED                           in ax,dx
38677 97D6           89C2                         mov dx,ax
38678 97D8           CB                           retf
38679                       000097D9            dispi_set_bank_farcall_error:
38680 97D9           B8                   014F    mov ax,#0x014F
38681 97DC           CB                           retf
38682                                           ! 8515 endasm
38683                                           !BCC_ENDASM
38684                                           ! 8516 }
38685 97DD           C3                         ret
38686                                           ! 8517 #asm
38687                                           !BCC_ASM
38688                       000097DE            dispi_set_x_offset:
38689 97DE           52                           push dx
38690 97DF           50                           push ax
38691 97E0           BA                   01CE    mov dx, # 0x01CE
38692 97E3           B8                   0008    mov ax, # 0x8
38693 97E6           EF                           out dx, ax
38694 97E7           58                           pop ax
38695 97E8           BA                   01CF    mov dx, # 0x01CF
38696 97EB           EF                           out dx, ax
38697 97EC           5A                           pop dx
38698 97ED           C3                           ret
38699                       000097EE            dispi_get_x_offset:
38700 97EE           52                           push dx
38701 97EF           BA                   01CE    mov dx, # 0x01CE
38702 97F2           B8                   0008    mov ax, # 0x8
38703 97F5           EF                           out dx, ax
38704 97F6           BA                   01CF    mov dx, # 0x01CF
38705 97F9           ED                           in ax, dx
38706 97FA           5A                           pop dx
38707 97FB           C3                           ret
38708                       000097FC            dispi_set_y_offset:
38709 97FC           52                           push dx
38710 97FD           50                           push ax
38711 97FE           BA                   01CE    mov dx, # 0x01CE
38712 9801           B8                   0009    mov ax, # 0x9
38713 9804           EF                           out dx, ax
38714 9805           58                           pop ax
38715 9806           BA                   01CF    mov dx, # 0x01CF
38716 9809           EF                           out dx, ax
38717 980A           5A                           pop dx
38718 980B           C3                           ret
38719                       0000980C            dispi_get_y_offset:
38720 980C           52                           push dx
38721 980D           BA                   01CE    mov dx, # 0x01CE
38722 9810           B8                   0009    mov ax, # 0x9
38723 9813           EF                           out dx, ax
38724 9814           BA                   01CF    mov dx, # 0x01CF
38725 9817           ED                           in ax, dx
38726 9818           5A                           pop dx
38727 9819           C3                           ret
38728                       0000981A            vga_set_virt_width:
38729 981A           50                           push ax
38730 981B           53                           push bx
38731 981C           52                           push dx
38732 981D           89C3                         mov bx, ax
38733 981F           E8         FEEC              call dispi_get_bpp
38734 9822           3C                     04    cmp al, #0x04
38735 9824           77           02              ja set_width_svga
38736 9826           D1EB                         shr bx, #1
38737                       00009828            set_width_svga:
38738 9828           C1EB                   03    shr bx, #3
38739 982B           BA                   03D4    mov dx, # 0x3d4
38740 982E           88DC                         mov ah, bl
38741 9830           B0                     13    mov al, #0x13
38742 9832           EF                           out dx, ax
38743 9833           5A                           pop dx
38744 9834           5B                           pop bx
38745 9835           58                           pop ax
38746 9836           C3                           ret
38747                       00009837            dispi_set_virt_width:
38748 9837           E8         FFE0              call vga_set_virt_width
38749 983A           52                           push dx
38750 983B           50                           push ax
38751 983C           BA                   01CE    mov dx, # 0x01CE
38752 983F           B8                   0006    mov ax, # 0x6
38753 9842           EF                           out dx, ax
38754 9843           58                           pop ax
38755 9844           BA                   01CF    mov dx, # 0x01CF
38756 9847           EF                           out dx, ax
38757 9848           5A                           pop dx
38758 9849           C3                           ret
38759                       0000984A            dispi_get_virt_width:
38760 984A           52                           push dx
38761 984B           BA                   01CE    mov dx, # 0x01CE
38762 984E           B8                   0006    mov ax, # 0x6
38763 9851           EF                           out dx, ax
38764 9852           BA                   01CF    mov dx, # 0x01CF
38765 9855           ED                           in ax, dx
38766 9856           5A                           pop dx
38767 9857           C3                           ret
38768                       00009858            dispi_get_virt_height:
38769 9858           52                           push dx
38770 9859           BA                   01CE    mov dx, # 0x01CE
38771 985C           B8                   0007    mov ax, # 0x7
38772 985F           EF                           out dx, ax
38773 9860           BA                   01CF    mov dx, # 0x01CF
38774 9863           ED                           in ax, dx
38775 9864           5A                           pop dx
38776 9865           C3                           ret
38777                       00009866            _vga_compat_setup:
38778 9866           50                           push ax
38779 9867           52                           push dx
38780                                             ; set CRT X resolution
38781 9868           BA                   01CE    mov dx, # 0x01CE
38782 986B           B8                   0001    mov ax, # 0x1
38783 986E           EF                           out dx, ax
38784 986F           BA                   01CF    mov dx, # 0x01CF
38785 9872           ED                           in ax, dx
38786 9873           50                           push ax
38787 9874           BA                   03D4    mov dx, # 0x3d4
38788 9877           B8                   0011    mov ax, #0x0011
38789 987A           EF                           out dx, ax
38790 987B           58                           pop ax
38791 987C           50                           push ax
38792 987D           C1E8                   03    shr ax, #3
38793 9880           48                           dec ax
38794 9881           88C4                         mov ah, al
38795 9883           B0                     01    mov al, #0x01
38796 9885           EF                           out dx, ax
38797 9886           58                           pop ax
38798 9887           E8         FF90              call vga_set_virt_width
38799                                             ; set CRT Y resolution
38800 988A           BA                   01CE    mov dx, # 0x01CE
38801 988D           B8                   0002    mov ax, # 0x2
38802 9890           EF                           out dx, ax
38803 9891           BA                   01CF    mov dx, # 0x01CF
38804 9894           ED                           in ax, dx
38805 9895           48                           dec ax
38806 9896           50                           push ax
38807 9897           BA                   03D4    mov dx, # 0x3d4
38808 989A           88C4                         mov ah, al
38809 989C           B0                     12    mov al, #0x12
38810 989E           EF                           out dx, ax
38811 989F           58                           pop ax
38812 98A0           B0                     07    mov al, #0x07
38813 98A2           EE                           out dx, al
38814 98A3           42                           inc dx
38815 98A4           EC                           in al, dx
38816 98A5           24                     BD    and al, #0xbd
38817 98A7           F6C4                   01    test ah, #0x01
38818 98AA           74           02              jz bit8_clear
38819 98AC           0C                     02    or al, #0x02
38820                       000098AE            bit8_clear:
38821 98AE           F6C4                   02    test ah, #0x02
38822 98B1           74           02              jz bit9_clear
38823 98B3           0C                     40    or al, #0x40
38824                       000098B5            bit9_clear:
38825 98B5           EE                           out dx, al
38826                                             ; other settings
38827 98B6           BA                   03D4    mov dx, # 0x3d4
38828 98B9           B8                   0009    mov ax, #0x0009
38829 98BC           EF                           out dx, ax
38830 98BD           B0                     17    mov al, #0x17
38831 98BF           EE                           out dx, al
38832 98C0           BA                   03D5    mov dx, # 0x3d5
38833 98C3           EC                           in al, dx
38834 98C4           0C                     03    or al, #0x03
38835 98C6           EE                           out dx, al
38836 98C7           BA                   03DA    mov dx, # 0x3da
38837 98CA           EC                           in al, dx
38838 98CB           BA                   03C0    mov dx, # 0x3c0
38839 98CE           B0                     10    mov al, #0x10
38840 98D0           EE                           out dx, al
38841 98D1           BA                   03C1    mov dx, # 0x3c1
38842 98D4           EC                           in al, dx
38843 98D5           0C                     01    or al, #0x01
38844 98D7           BA                   03C0    mov dx, # 0x3c0
38845 98DA           EE                           out dx, al
38846 98DB           B0                     20    mov al, #0x20
38847 98DD           EE                           out dx, al
38848 98DE           BA                   03CE    mov dx, # 0x3ce
38849 98E1           B8                   0506    mov ax, #0x0506
38850 98E4           EF                           out dx, ax
38851 98E5           BA                   03C4    mov dx, # 0x3c4
38852 98E8           B8                   0F02    mov ax, #0x0f02
38853 98EB           EF                           out dx, ax
38854                                             ; settings for >= 8bpp
38855 98EC           BA                   01CE    mov dx, # 0x01CE
38856 98EF           B8                   0003    mov ax, # 0x3
38857 98F2           EF                           out dx, ax
38858 98F3           BA                   01CF    mov dx, # 0x01CF
38859 98F6           ED                           in ax, dx
38860 98F7           3C                     08    cmp al, #0x08
38861 98F9           72           40              jb vga_compat_end
38862 98FB           BA                   03D4    mov dx, # 0x3d4
38863 98FE           B0                     14    mov al, #0x14
38864 9900           EE                           out dx, al
38865 9901           BA                   03D5    mov dx, # 0x3d5
38866 9904           EC                           in al, dx
38867 9905           0C                     40    or al, #0x40
38868 9907           EE                           out dx, al
38869 9908           BA                   03DA    mov dx, # 0x3da
38870 990B           EC                           in al, dx
38871 990C           BA                   03C0    mov dx, # 0x3c0
38872 990F           B0                     10    mov al, #0x10
38873 9911           EE                           out dx, al
38874 9912           BA                   03C1    mov dx, # 0x3c1
38875 9915           EC                           in al, dx
38876 9916           0C                     40    or al, #0x40
38877 9918           BA                   03C0    mov dx, # 0x3c0
38878 991B           EE                           out dx, al
38879 991C           B0                     20    mov al, #0x20
38880 991E           EE                           out dx, al
38881 991F           BA                   03C4    mov dx, # 0x3c4
38882 9922           B0                     04    mov al, #0x04
38883 9924           EE                           out dx, al
38884 9925           BA                   03C5    mov dx, # 0x3c5
38885 9928           EC                           in al, dx
38886 9929           0C                     08    or al, #0x08
38887 992B           EE                           out dx, al
38888 992C           BA                   03CE    mov dx, # 0x3ce
38889 992F           B0                     05    mov al, #0x05
38890 9931           EE                           out dx, al
38891 9932           BA                   03CF    mov dx, # 0x3cf
38892 9935           EC                           in al, dx
38893 9936           24                     9F    and al, #0x9f
38894 9938           0C                     40    or al, #0x40
38895 993A           EE                           out dx, al
38896                       0000993B            vga_compat_end:
38897 993B           5A                           pop dx
38898 993C           58                           pop ax
38899                                           ! 8729 endasm
38900                                           !BCC_ENDASM
38901                                           ! 8730 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
38902                                           ! 8731   Bit16u mode; Boolean using_lfb;
38903                       0000993D            _mode_info_find_mode:
38904                                           !BCC_EOS
38905                                           !BCC_EOS
38906                                           ! 8732 {
38907                                           ! 8733   ModeInfoListItem *cur_info=&mode_info_list;
38908 993D           55                         push	bp
38909 993E           89E5                       mov	bp,sp
38910 9940           4C                         dec	sp
38911 9941           4C                         dec	sp
38912                                           ! Debug: eq * [$50] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38913 9942           BB                   7F86  mov	bx,#_mode_info_list
38914 9945           895E         FE            mov	-2[bp],bx
38915                                           !BCC_EOS
38916                                           ! 8734   while (cur_info->mode != 0xFFFF)
38917                                           ! 8735   {
38918 9948           EB           43            jmp .2CC
38919                       0000994A            .2CD:
38920                                           ! 8736     if (cur_info->mode == mode)
38921 994A           8B5E         FE            mov	bx,-2[bp]
38922                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
38923 994D           8B1F                       mov	bx,[bx]
38924 994F           3B5E         04            cmp	bx,4[bp]
38925 9952           75           30            jne 	.2CE
38926                       00009954            .2CF:
38927                                           ! 8737     {
38928                                           ! 8738       if (!using_lfb)
38929 9954           8B46         06            mov	ax,6[bp]
38930 9957           85C0                       test	ax,ax
38931 9959           75           09            jne 	.2D0
38932                       0000995B            .2D1:
38933                                           ! 8739       {
38934                                           ! 8740         return cur_info;
38935 995B           8B46         FE            mov	ax,-2[bp]
38936 995E           89EC                       mov	sp,bp
38937 9960           5D                         pop	bp
38938 9961           C3                         ret
38939                                           !BCC_EOS
38940                                           ! 8741       }
38941                                           ! 8742       else if (cur_info->info.ModeAttributes & 0x0080)
38942 9962           EB           1E            jmp .2D2
38943                       00009964            .2D0:
38944 9964           8B5E         FE            mov	bx,-2[bp]
38945                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
38946 9967           8A47         02            mov	al,2[bx]
38947 996A           24                     80  and	al,#$80
38948 996C           84C0                       test	al,al
38949 996E           74           09            je  	.2D3
38950                       00009970            .2D4:
38951                                           ! 8743       {
38952                                           ! 8744         return cur_info;
38953 9970           8B46         FE            mov	ax,-2[bp]
38954 9973           89EC                       mov	sp,bp
38955 9975           5D                         pop	bp
38956 9976           C3                         ret
38957                                           !BCC_EOS
38958                                           ! 8745       }
38959                                           ! 8746       else
38960                                           ! 8747       {
38961 9977           EB           09            jmp .2D5
38962                       00009979            .2D3:
38963                                           ! 8748         cur_info++;
38964                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38965 9979           8B5E         FE            mov	bx,-2[bp]
38966 997C           83C3                   44  add	bx,*$44
38967 997F           895E         FE            mov	-2[bp],bx
38968                                           !BCC_EOS
38969                                           ! 8749       }
38970                                           ! 8750     }
38971                       00009982            .2D5:
38972                       00009982            .2D2:
38973                                           ! 8751     else
38974                                           ! 8752     {
38975 9982           EB           09            jmp .2D6
38976                       00009984            .2CE:
38977                                           ! 8753       cur_info++;
38978                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38979 9984           8B5E         FE            mov	bx,-2[bp]
38980 9987           83C3                   44  add	bx,*$44
38981 998A           895E         FE            mov	-2[bp],bx
38982                                           !BCC_EOS
38983                                           ! 8754     }
38984                                           ! 8755   }
38985                       0000998D            .2D6:
38986                                           ! 8756   return 0;
38987                       0000998D            .2CC:
38988 998D           8B5E         FE            mov	bx,-2[bp]
38989                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
38990 9990           8B1F                       mov	bx,[bx]
38991 9992           81FB                 FFFF  cmp	bx,#$FFFF
38992 9996           75           B2            jne	.2CD
38993                       00009998            .2D7:
38994                       00009998            .2CB:
38995 9998           31C0                       xor	ax,ax
38996 999A           89EC                       mov	sp,bp
38997 999C           5D                         pop	bp
38998 999D           C3                         ret
38999                                           !BCC_EOS
39000                                           ! 8757 }
39001                                           ! 8758 #asm
39002                                           !BCC_ASM
39003                       00000004            _mode_info_find_mode.using_lfb	set	4
39004                       00000002            _mode_info_find_mode.mode	set	2
39005                                           ; Has 1 display - Returns true if 1 display detected
39006                       0000999E            _vbe_has_vbe_display:
39007 999E           1E                           push ds
39008 999F           53                           push bx
39009 99A0           B8                   0040    mov ax, # 0x40
39010 99A3           8ED8                         mov ds, ax
39011 99A5           BB                   00B9    mov bx, # 0xB9
39012 99A8           8A07                         mov al, [bx]
39013 99AA           24                     01    and al, #0x01
39014 99AC           30E4                         xor ah, ah
39015 99AE           5B                           pop bx
39016 99AF           1F                           pop ds
39017 99B0           C3                           ret
39018                                           ; 1 Init - Initialise the Vesa Bios Extension Code
39019                                           ; This function does a sanity check on the host side display code interface.
39020                       000099B1            vbe_init:
39021 99B1           B8                   B0C0    mov ax, # 0xB0C0
39022 99B4           E8         FCF4              call dispi_set_id
39023 99B7           E8         FCE3              call dispi_get_id
39024 99BA           3D                   B0C0    cmp ax, # 0xB0C0
39025 99BD           75           16              jne no_vbe_interface
39026 99BF           1E                           push ds
39027 99C0           53                           push bx
39028 99C1           B8                   0040    mov ax, # 0x40
39029 99C4           8ED8                         mov ds, ax
39030 99C6           BB                   00B9    mov bx, # 0xB9
39031 99C9           B0                     01    mov al, #0x01
39032 99CB           8807                         mov [bx], al
39033 99CD           5B                           pop bx
39034 99CE           1F                           pop ds
39035 99CF           B8                   B0C5    mov ax, # 0xB0C5
39036 99D2           E8         FCD6              call dispi_set_id
39037                       000099D5            no_vbe_interface:
39038 99D5           BB                   958C    mov bx, #msg_vbe_init
39039 99D8           53                           push bx
39040 99D9           E8         E409              call _printf
39041 99DC           44                           inc sp
39042 99DD           44                           inc sp
39043 99DE           C3                           ret
39044                                           ; 1 Display Info - Display information on screen about the 1
39045                       000099DF            vbe_display_info:
39046 99DF           E8         FFBC              call _vbe_has_vbe_display
39047 99E2           85C0                         test ax, ax
39048 99E4           74           0B              jz no_vbe_flag
39049 99E6           B8                   C000    mov ax, #0xc000
39050 99E9           8ED8                         mov ds, ax
39051 99EB           BE                   9542    mov si, #_vbebios_info_string
39052 99EE           E9         9C19              jmp _display_string
39053                       000099F1            no_vbe_flag:
39054 99F1           B8                   C000    mov ax, #0xc000
39055 99F4           8ED8                         mov ds, ax
39056 99F6           BE                   9568    mov si, #_no_vbebios_info_string
39057 99F9           E9         9C0E              jmp _display_string
39058                                           ; helper function for memory size calculation
39059                       000099FC            lmulul:
39060 99FC     66    25               0000FFFF    and eax, #0x0000FFFF
39061 9A02     66    C1E3                   10    shl ebx, #16
39062 9A06     66    09D8                         or eax, ebx
39063 9A09           36                           SEG SS
39064 9A0A     66    F725                         mul eax, dword ptr [di]
39065 9A0D     66    89C3                         mov ebx, eax
39066 9A10     66    C1EB                   10    shr ebx, #16
39067 9A14           C3                           ret
39068                                           ! 8822 endasm
39069                                           !BCC_ENDASM
39070                                           ! 8823 void vbe_biosfn_return_controller_information(AX, ES, DI)
39071                                           ! Register BX used in function mode_info_find_mode
39072                                           ! 8824 Bit16u *AX;Bit16u ES;Bit16u DI;
39073                                           export	_vbe_biosfn_return_controller_information
39074                       00009A15            _vbe_biosfn_return_controller_information:
39075                                           !BCC_EOS
39076                                           !BCC_EOS
39077                                           !BCC_EOS
39078                                           ! 8825 {
39079                                           ! 8826         Bit16u ss=get_SS();
39080 9A15           55                         push	bp
39081 9A16           89E5                       mov	bp,sp
39082 9A18           4C                         dec	sp
39083 9A19           4C                         dec	sp
39084                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39085 9A1A           E8         E3A9            call	_get_SS
39086                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
39087 9A1D           8946         FE            mov	-2[bp],ax
39088                                           !BCC_EOS
39089                                           ! 8827         VbeInfoBlock vbe_info_block;
39090                                           !BCC_EOS
39091                                           ! 8828         Bit16u status;
39092                                           !BCC_EOS
39093                                           ! 8829         Bit16u result;
39094                                           !BCC_EOS
39095                                           ! 8830         Bit16u vbe2_info;
39096                                           !BCC_EOS
39097                                           ! 8831         Bit16u cur_mode=0;
39098 9A20           81C4                 FDF8  add	sp,#-$208
39099                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
39100 9A24           31C0                       xor	ax,ax
39101 9A26           8986       FDF6            mov	-$20A[bp],ax
39102                                           !BCC_EOS
39103                                           ! 8832         Bit16u cur_ptr=34;
39104 9A2A           4C                         dec	sp
39105 9A2B           4C                         dec	sp
39106                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
39107 9A2C           B8                   0022  mov	ax,*$22
39108 9A2F           8986       FDF4            mov	-$20C[bp],ax
39109                                           !BCC_EOS
39110                                           ! 8833         Bit16u size_64k;
39111                                           !BCC_EOS
39112                                           ! 8834         ModeInfoListItem *cur_info=&mode_info_list;
39113 9A33           83C4                   FC  add	sp,*-4
39114                                           ! Debug: eq * [$50] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
39115 9A36           BB                   7F86  mov	bx,#_mode_info_list
39116 9A39           899E       FDF0            mov	-$210[bp],bx
39117                                           !BCC_EOS
39118                                           ! 8835         status = read_word(ss, AX);
39119                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
39120 9A3D           FF76         04            push	4[bp]
39121                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
39122 9A40           FF76         FE            push	-2[bp]
39123                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39124 9A43           E8         E307            call	_read_word
39125 9A46           83C4                   04  add	sp,*4
39126                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$212-$206] (used reg = )
39127 9A49           8986       FDFC            mov	-$204[bp],ax
39128                                           !BCC_EOS
39129                                           ! 8836         printf("VBE vbe_biosfn_return_vbe_info ES%x DI%x AX%x\n",ES,DI,status);
39130                                           ! Debug: list unsigned short status = [S+$212-$206] (used reg = )
39131 9A4D           FFB6       FDFC            push	-$204[bp]
39132                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
39133 9A51           FF76         08            push	8[bp]
39134                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39135 9A54           FF76         06            push	6[bp]
39136                                           ! Debug: list * char = .2D8+0 (used reg = )
39137 9A57           BB                   A4FA  mov	bx,#.2D8
39138 9A5A           53                         push	bx
39139                                           ! Debug: func () void = printf+0 (used reg = )
39140 9A5B           E8         E387            call	_printf
39141 9A5E           83C4                   08  add	sp,*8
39142                                           !BCC_EOS
39143                                           ! 8837         vbe2_info = 0;
39144                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
39145 9A61           31C0                       xor	ax,ax
39146 9A63           8986       FDF8            mov	-$208[bp],ax
39147                                           !BCC_EOS
39148                                           ! 8838         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
39149                                           ! Debug: list int = const $200 (used reg = )
39150 9A67           B8                   0200  mov	ax,#$200
39151 9A6A           50                         push	ax
39152                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
39153 9A6B           FF76         08            push	8[bp]
39154                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39155 9A6E           FF76         06            push	6[bp]
39156                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$218-$204 (used reg = )
39157 9A71           8D9E       FDFE            lea	bx,-$202[bp]
39158 9A75           53                         push	bx
39159                                           ! Debug: list unsigned short ss = [S+$21A-4] (used reg = )
39160 9A76           FF76         FE            push	-2[bp]
39161                                           ! Debug: func () void = memcpyb+0 (used reg = )
39162 9A79           E8         E25E            call	_memcpyb
39163 9A7C           83C4                   0A  add	sp,*$A
39164                                           !BCC_EOS
39165                                           ! 8839         if (((vbe_info_block.VbeSignature[0] == 'V') &&
39166                                           ! 8840              (vbe_info_block.VbeSignature[1] == 'B') &&
39167                                           ! 8841              (vbe_info_block.VbeSignature[2] == 'E') &&
39168                                           ! 8842              (vbe_info_block.VbeSignature[3] == '2')) ||
39169                                           ! 8843             ((vbe_info_block.VbeSignature[0] == 'V') &&
39170                                           ! 8844              (vbe_info_block.VbeSignature[1] == 'E') &&
39171                                           ! 8845              (vbe_info_block.VbeSignature[2] == 'S') &&
39172                                           ! 8846              (vbe_info_block.VbeSignature[3] == 'A')) )
39173                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
39174 9A7F           8A86       FDFE            mov	al,-$202[bp]
39175 9A83           3C                     56  cmp	al,*$56
39176 9A85           75           18            jne 	.2DB
39177                       00009A87            .2DE:
39178                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
39179 9A87           8A86       FDFF            mov	al,-$201[bp]
39180 9A8B           3C                     42  cmp	al,*$42
39181 9A8D           75           10            jne 	.2DB
39182                       00009A8F            .2DD:
39183                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
39184 9A8F           8A86       FE00            mov	al,-$200[bp]
39185 9A93           3C                     45  cmp	al,*$45
39186 9A95           75           08            jne 	.2DB
39187                       00009A97            .2DC:
39188                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
39189 9A97           8A86       FE01            mov	al,-$1FF[bp]
39190 9A9B           3C                     32  cmp	al,*$32
39191 9A9D           74           20            je  	.2DA
39192                       00009A9F            .2DB:
39193                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
39194 9A9F           8A86       FDFE            mov	al,-$202[bp]
39195 9AA3           3C                     56  cmp	al,*$56
39196 9AA5           75           28            jne 	.2D9
39197                       00009AA7            .2E1:
39198                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
39199 9AA7           8A86       FDFF            mov	al,-$201[bp]
39200 9AAB           3C                     45  cmp	al,*$45
39201 9AAD           75           20            jne 	.2D9
39202                       00009AAF            .2E0:
39203                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
39204 9AAF           8A86       FE00            mov	al,-$200[bp]
39205 9AB3           3C                     53  cmp	al,*$53
39206 9AB5           75           18            jne 	.2D9
39207                       00009AB7            .2DF:
39208                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
39209 9AB7           8A86       FE01            mov	al,-$1FF[bp]
39210 9ABB           3C                     41  cmp	al,*$41
39211 9ABD           75           10            jne 	.2D9
39212                       00009ABF            .2DA:
39213                                           ! 8847         {
39214                                           ! 8848                 vbe2_info = 1;
39215                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
39216 9ABF           B8                   0001  mov	ax,*1
39217 9AC2           8986       FDF8            mov	-$208[bp],ax
39218                                           !BCC_EOS
39219                                           ! 8849                 printf("VBE correct VESA/VBE2 signature found\n");
39220                                           ! Debug: list * char = .2E2+0 (used reg = )
39221 9AC6           BB                   A4D3  mov	bx,#.2E2
39222 9AC9           53                         push	bx
39223                                           ! Debug: func () void = printf+0 (used reg = )
39224 9ACA           E8         E318            call	_printf
39225 9ACD           44                         inc	sp
39226 9ACE           44                         inc	sp
39227                                           !BCC_EOS
39228                                           ! 8850         }
39229                                           ! 8851         vbe_info_block.VbeSignature[0] = 'V';
39230                       00009ACF            .2D9:
39231                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
39232 9ACF           B0                     56  mov	al,*$56
39233 9AD1           8886       FDFE            mov	-$202[bp],al
39234                                           !BCC_EOS
39235                                           ! 8852         vbe_info_block.VbeSignature[1] = 'E';
39236                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
39237 9AD5           B0                     45  mov	al,*$45
39238 9AD7           8886       FDFF            mov	-$201[bp],al
39239                                           !BCC_EOS
39240                                           ! 8853         vb
39241                                           ! 8853 e_info_block.VbeSignature[2] = 'S';
39242                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
39243 9ADB           B0                     53  mov	al,*$53
39244 9ADD           8886       FE00            mov	-$200[bp],al
39245                                           !BCC_EOS
39246                                           ! 8854         vbe_info_block.VbeSignature[3] = 'A';
39247                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
39248 9AE1           B0                     41  mov	al,*$41
39249 9AE3           8886       FE01            mov	-$1FF[bp],al
39250                                           !BCC_EOS
39251                                           ! 8855         vbe_info_block.VbeVersion = 0x0200;
39252                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$212-$200] (used reg = )
39253 9AE7           B8                   0200  mov	ax,#$200
39254 9AEA           8986       FE02            mov	-$1FE[bp],ax
39255                                           !BCC_EOS
39256                                           ! 8856         vbe_info_block.OemStringPtr_Seg = 0xc000;
39257                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1FC] (used reg = )
39258 9AEE           B8                   C000  mov	ax,#$C000
39259 9AF1           8986       FE06            mov	-$1FA[bp],ax
39260                                           !BCC_EOS
39261                                           ! 8857         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
39262                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$212-$1FE] (used reg = )
39263 9AF5           BB                   94C6  mov	bx,#_vbebios_copyright
39264 9AF8           899E       FE04            mov	-$1FC[bp],bx
39265                                           !BCC_EOS
39266                                           ! 8858         vbe_info_block.Capabilities[0] = 0x0001;
39267                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$212-$1FA] (used reg = )
39268 9AFC           B0                     01  mov	al,*1
39269 9AFE           8886       FE08            mov	-$1F8[bp],al
39270                                           !BCC_EOS
39271                                           ! 8859         vbe_info_block.Capabilities[1] = 0;
39272                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F9] (used reg = )
39273 9B02           30C0                       xor	al,al
39274 9B04           8886       FE09            mov	-$1F7[bp],al
39275                                           !BCC_EOS
39276                                           ! 8860         vbe_info_block.Capabilities[2] = 0;
39277                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F8] (used reg = )
39278 9B08           30C0                       xor	al,al
39279 9B0A           8886       FE0A            mov	-$1F6[bp],al
39280                                           !BCC_EOS
39281                                           ! 8861         vbe_info_block.Capabilities[3] = 0;
39282                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F7] (used reg = )
39283 9B0E           30C0                       xor	al,al
39284 9B10           8886       FE0B            mov	-$1F5[bp],al
39285                                           !BCC_EOS
39286                                           ! 8862         vbe_info_block.VideoModePtr_Seg= ES ;
39287                                           ! Debug: eq unsigned short ES = [S+$212+4] to unsigned short vbe_info_block = [S+$212-$1F4] (used reg = )
39288 9B14           8B46         06            mov	ax,6[bp]
39289 9B17           8986       FE0E            mov	-$1F2[bp],ax
39290                                           !BCC_EOS
39291                                           ! 8863         vbe_info_block.VideoModePtr_Off= DI + 34;
39292                                           ! Debug: add int = const $22 to unsigned short DI = [S+$212+6] (used reg = )
39293 9B1B           8B46         08            mov	ax,8[bp]
39294                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$212-$1F6] (used reg = )
39295 9B1E           05                   0022  add	ax,*$22
39296 9B21           8986       FE0C            mov	-$1F4[bp],ax
39297                                           !BCC_EOS
39298                                           ! 8864         outw(0x01CE, 0xa);
39299                                           ! Debug: list int = const $A (used reg = )
39300 9B25           B8                   000A  mov	ax,*$A
39301 9B28           50                         push	ax
39302                                           ! Debug: list int = const $1CE (used reg = )
39303 9B29           B8                   01CE  mov	ax,#$1CE
39304 9B2C           50                         push	ax
39305                                           ! Debug: func () void = outw+0 (used reg = )
39306 9B2D           E8         E286            call	_outw
39307 9B30           83C4                   04  add	sp,*4
39308                                           !BCC_EOS
39309                                           ! 8865         vbe_info_block.TotalMemory = inw(0x01CF);
39310                                           ! Debug: list int = const $1CF (used reg = )
39311 9B33           B8                   01CF  mov	ax,#$1CF
39312 9B36           50                         push	ax
39313                                           ! Debug: func () unsigned short = inw+0 (used reg = )
39314 9B37           E8         E261            call	_inw
39315 9B3A           44                         inc	sp
39316 9B3B           44                         inc	sp
39317                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$212-$1F2] (used reg = )
39318 9B3C           8986       FE10            mov	-$1F0[bp],ax
39319                                           !BCC_EOS
39320                                           ! 8866         if (vbe2_info)
39321 9B40           8B86       FDF8            mov	ax,-$208[bp]
39322 9B44           85C0                       test	ax,ax
39323 9B46           74           4B            je  	.2E3
39324                       00009B48            .2E4:
39325                                           ! 8867         {
39326                                           ! 8868                 vbe_info_block.OemSoftwareRev = 0x0002;;
39327                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$212-$1F0] (used reg = )
39328 9B48           B8                   0002  mov	ax,*2
39329 9B4B           8986       FE12            mov	-$1EE[bp],ax
39330                                           !BCC_EOS
39331                                           !BCC_EOS
39332                                           ! 8869                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
39333                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1EC] (used reg = )
39334 9B4F           B8                   C000  mov	ax,#$C000
39335 9B52           8986       FE16            mov	-$1EA[bp],ax
39336                                           !BCC_EOS
39337                                           ! 8870                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
39338                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$212-$1EE] (used reg = )
39339 9B56           BB                   950C  mov	bx,#_vbebios_vendor_name
39340 9B59           899E       FE14            mov	-$1EC[bp],bx
39341                                           !BCC_EOS
39342                                           ! 8871                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
39343                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E8] (used reg = )
39344 9B5D           B8                   C000  mov	ax,#$C000
39345 9B60           8986       FE1A            mov	-$1E6[bp],ax
39346                                           !BCC_EOS
39347                                           ! 8872                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
39348                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$212-$1EA] (used reg = )
39349 9B64           BB                   9524  mov	bx,#_vbebios_product_name
39350 9B67           899E       FE18            mov	-$1E8[bp],bx
39351                                           !BCC_EOS
39352                                           ! 8873                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
39353                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E4] (used reg = )
39354 9B6B           B8                   C000  mov	ax,#$C000
39355 9B6E           8986       FE1E            mov	-$1E2[bp],ax
39356                                           !BCC_EOS
39357                                           ! 8874                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
39358                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$212-$1E6] (used reg = )
39359 9B72           BB                   953D  mov	bx,#_vbebios_product_revision
39360 9B75           899E       FE1C            mov	-$1E4[bp],bx
39361                                           !BCC_EOS
39362                                           ! 8875                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
39363                                           ! Debug: list int = const $200 (used reg = )
39364 9B79           B8                   0200  mov	ax,#$200
39365 9B7C           50                         push	ax
39366                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
39367 9B7D           8D9E       FDFE            lea	bx,-$202[bp]
39368 9B81           53                         push	bx
39369                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39370 9B82           FF76         FE            push	-2[bp]
39371                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
39372 9B85           FF76         08            push	8[bp]
39373                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
39374 9B88           FF76         06            push	6[bp]
39375                                           ! Debug: func () void = memcpyb+0 (used reg = )
39376 9B8B           E8         E14C            call	_memcpyb
39377 9B8E           83C4                   0A  add	sp,*$A
39378                                           !BCC_EOS
39379                                           ! 8876         }
39380                                           ! 8877         else
39381                                           ! 8878         {
39382 9B91           EB           18            jmp .2E5
39383                       00009B93            .2E3:
39384                                           ! 8879                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
39385                                           ! Debug: list int = const $100 (used reg = )
39386 9B93           B8                   0100  mov	ax,#$100
39387 9B96           50                         push	ax
39388                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
39389 9B97           8D9E       FDFE            lea	bx,-$202[bp]
39390 9B9B           53                         push	bx
39391                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39392 9B9C           FF76         FE            push	-2[bp]
39393                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
39394 9B9F           FF76         08            push	8[bp]
39395                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
39396 9BA2           FF76         06            push	6[bp]
39397                                           ! Debug: func () void = memcpyb+0 (used reg = )
39398 9BA5           E8         E132            call	_memcpyb
39399 9BA8           83C4                   0A  add	sp,*$A
39400                                           !BCC_EOS
39401                                           ! 8880         }
39402                                           ! 8881         do
39403                       00009BAB            .2E5:
39404                                           ! 8882         {
39405                       00009BAB            .2E8:
39406                                           ! 8883                 size_64k = (Bit16u)((Bit32u)cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel) >> 19;
39407 9BAB           8B9E       FDF0            mov	bx,-$210[bp]
39408                                           ! Debug: cast unsigned long = const 0 to unsigned char = [bx+$1B] (used reg = )
39409 9BAF           8A47         1B            mov	al,$1B[bx]
39410 9BB2           30E4                       xor	ah,ah
39411 9BB4           31DB                       xor	bx,bx
39412 9BB6           53                         push	bx
39413 9BB7           50                         push	ax
39414 9BB8           8B9E       FDF0            mov	bx,-$210[bp]
39415                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
39416 9BBC           8B47         14            mov	ax,$14[bx]
39417 9BBF           31DB                       xor	bx,bx
39418 9BC1           53                         push	bx
39419 9BC2           50                         push	ax
39420 9BC3           8B9E       FDF0            mov	bx,-$210[bp]
39421                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
39422 9BC7           8B47         14            mov	ax,$14[bx]
39423 9BCA           31DB                       xor	bx,bx
39424                                           ! Debug: mul unsigned long (temp) = [S+$21A-$21A] to unsigned long = bx+0 (used reg = )
39425 9BCC           8DBE       FDE8            lea	di,-$218[bp]
39426 9BD0           E8         FE29            call	lmulul
39427 9BD3           83C4                   04  add	sp,*4
39428                                           ! Debug: mul unsigned long (temp) = [S+$216-$216] to unsigned long = bx+0 (used reg = )
39429 9BD6           8DBE       FDEC            lea	di,-$214[bp]
39430 9BDA           E8         FE1F            call	lmulul
39431 9BDD           83C4                   04  add	sp,*4
39432                                           ! Debug: cast unsigned short = const 0 to unsigned long = bx+0 (used reg = )
39433                                           ! Debug: sr int = const $13 to unsigned short = ax+0 (used reg = )
39434 9BE0           31C0                       xor	ax,ax
39435                                           ! Debug: eq unsigned int = ax+0 to unsigned short size_64k = [S+$212-$210] (used reg = )
39436 9BE2           8986       FDF2            mov	-$20E[bp],ax
39437                                           !BCC_EOS
39438                                           ! 8884                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
39439                                           ! 8885                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
39440                                           ! 8886                     (size_64k <= vbe_info_block.TotalMemory)) {
39441                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
39442 9BE6           E8         FB3E            call	_dispi_get_max_xres
39443 9BE9           8B9E       FDF0            mov	bx,-$210[bp]
39444                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
39445 9BED           3B47         14            cmp	ax,$14[bx]
39446 9BF0           72           61            jb  	.2E9
39447                       00009BF2            .2EC:
39448                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
39449 9BF2           E8         FB54            call	_dispi_get_max_bpp
39450 9BF5           8B9E       FDF0            mov	bx,-$210[bp]
39451                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
39452 9BF9           50                         push	ax
39453 9BFA           8A47         1B            mov	al,$1B[bx]
39454 9BFD           30E4                       xor	ah,ah
39455 9BFF           3B86       FDEE            cmp	ax,-$212[bp]
39456 9C03           8DA6       FDF0            lea	sp,-$210[bp]
39457 9C07           77           4A            ja  	.2E9
39458                       00009C09            .2EB:
39459                                           ! Debug: le unsigned short vbe_info_block = [S+$212-$1F2] to unsigned short size_64k = [S+$212-$210] (used reg = )
39460 9C09           8B86       FDF2            mov	ax,-$20E[bp]
39461 9C0D           3B86       FE10            cmp	ax,-$1F0[bp]
39462 9C11           77           40            ja  	.2E9
39463                       00009C13            .2EA:
39464                                           ! 8887                   printf("VBE found mode %x => %x\n", cur_info->mode,cur_mode);
39465                                           ! Debug: list unsigned short cur_mode = [S+$212-$20C] (used reg = )
39466 9C13           FFB6       FDF6            push	-$20A[bp]
39467 9C17           8B9E       FDF0            mov	bx,-$210[bp]
39468                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39469 9C1B           FF37                       push	[bx]
39470                                           ! Debug: list * char = .2ED+0 (used reg = )
39471 9C1D           BB                   A4BA  mov	bx,#.2ED
39472 9C20           53                         push	bx
39473                                           ! Debug: func () void = printf+0 (used reg = )
39474 9C21           E8         E1C1            call	_printf
39475 9C24           83C4                   06  add	sp,*6
39476                                           !BCC_EOS
39477                                           ! 8888                   write_word(ES, DI + cur_ptr, cur_info->mode);
39478 9C27           8B9E       FDF0            mov	bx,-$210[bp]
39479                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39480 9C2B           FF37                       push	[bx]
39481                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
39482 9C2D           8B46         08            mov	ax,8[bp]
39483 9C30           0386       FDF4            add	ax,-$20C[bp]
39484                                           ! Debug: list unsigned int = ax+0 (used reg = )
39485 9C34           50                         push	ax
39486                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39487 9C35           FF76         06            push	6[bp]
39488                                           ! Debug: func () void = write_word+0 (used reg = )
39489 9C38           E8         E13D            call	_write_word
39490 9C3B           83C4                   06  add	sp,*6
39491                                           !BCC_EOS
39492                                           ! 8889                   cur_mode++;
39493                                           ! Debug: postinc unsigned short cur_mode = [S+$212-$20C] (used reg = )
39494 9C3E           8B86       FDF6            mov	ax,-$20A[bp]
39495 9C42           40                         inc	ax
39496 9C43           8986       FDF6            mov	-$20A[bp],ax
39497                                           !BCC_EOS
39498                                           ! 8890                   cur_ptr+=2;
39499                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$212-$20E] (used reg = )
39500 9C47           8B86       FDF4            mov	ax,-$20C[bp]
39501 9C4B           40                         inc	ax
39502 9C4C           40                         inc	ax
39503 9C4D           8986       FDF4            mov	-$20C[bp],ax
39504                                           !BCC_EOS
39505                                           ! 8891                 } else {
39506 9C51           EB           21            jmp .2EE
39507                       00009C53            .2E9:
39508                                           ! 8892                   printf("VBE mode %x (xres=%x / bpp=%02x) not supported \n", cur_info->mode,cur_info->info.XResolution,cur_info->info.BitsPerPixel);
39509 9C53           8B9E       FDF0            mov	bx,-$210[bp]
39510                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
39511 9C57           8A47         1B            mov	al,$1B[bx]
39512 9C5A           30E4                       xor	ah,ah
39513 9C5C           50                         push	ax
39514 9C5D           8B9E       FDF0            mov	bx,-$210[bp]
39515                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
39516 9C61           FF77         14            push	$14[bx]
39517 9C64           8B9E       FDF0            mov	bx,-$210[bp]
39518                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39519 9C68           FF37                       push	[bx]
39520                                           ! Debug: list * char = .2EF+0 (used reg = )
39521 9C6A           BB                   A489  mov	bx,#.2EF
39522 9C6D           53                         push	bx
39523                                           ! Debug: func () void = printf+0 (used reg = )
39524 9C6E           E8         E174            call	_printf
39525 9C71           83C4                   08  add	sp,*8
39526                                           !BCC_EOS
39527                                           ! 8893           
39528                                           ! 8893       }
39529                                           ! 8894                 cur_info++;
39530                       00009C74            .2EE:
39531                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
39532 9C74           8B9E       FDF0            mov	bx,-$210[bp]
39533 9C78           83C3                   44  add	bx,*$44
39534 9C7B           899E       FDF0            mov	-$210[bp],bx
39535                                           !BCC_EOS
39536                                           ! 8895         } while (cur_info->mode != 0xFFFF);
39537                       00009C7F            .2E7:
39538 9C7F           8B9E       FDF0            mov	bx,-$210[bp]
39539                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
39540 9C83           8B1F                       mov	bx,[bx]
39541 9C85           81FB                 FFFF  cmp	bx,#$FFFF
39542 9C89         0F85         FF1E            bne 	.2E8
39543                       00009C8D            .2F0:
39544                                           !BCC_EOS
39545                                           ! 8896         write_word(ES, DI + cur_ptr, cur_info->mode);
39546                       00009C8D            .2E6:
39547 9C8D           8B9E       FDF0            mov	bx,-$210[bp]
39548                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39549 9C91           FF37                       push	[bx]
39550                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
39551 9C93           8B46         08            mov	ax,8[bp]
39552 9C96           0386       FDF4            add	ax,-$20C[bp]
39553                                           ! Debug: list unsigned int = ax+0 (used reg = )
39554 9C9A           50                         push	ax
39555                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39556 9C9B           FF76         06            push	6[bp]
39557                                           ! Debug: func () void = write_word+0 (used reg = )
39558 9C9E           E8         E0D7            call	_write_word
39559 9CA1           83C4                   06  add	sp,*6
39560                                           !BCC_EOS
39561                                           ! 8897         result = 0x4f;
39562                                           ! Debug: eq int = const $4F to unsigned short result = [S+$212-$208] (used reg = )
39563 9CA4           B8                   004F  mov	ax,*$4F
39564 9CA7           8986       FDFA            mov	-$206[bp],ax
39565                                           !BCC_EOS
39566                                           ! 8898         write_word(ss, AX, result);
39567                                           ! Debug: list unsigned short result = [S+$212-$208] (used reg = )
39568 9CAB           FFB6       FDFA            push	-$206[bp]
39569                                           ! Debug: list * unsigned short AX = [S+$214+2] (used reg = )
39570 9CAF           FF76         04            push	4[bp]
39571                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39572 9CB2           FF76         FE            push	-2[bp]
39573                                           ! Debug: func () void = write_word+0 (used reg = )
39574 9CB5           E8         E0C0            call	_write_word
39575 9CB8           83C4                   06  add	sp,*6
39576                                           !BCC_EOS
39577                                           ! 8899 }
39578 9CBB           89EC                       mov	sp,bp
39579 9CBD           5D                         pop	bp
39580 9CBE           C3                         ret
39581                                           ! 8900 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
39582                                           ! Register BX used in function vbe_biosfn_return_controller_information
39583                                           ! 8901 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
39584                                           export	_vbe_biosfn_return_mode_information
39585                       00009CBF            _vbe_biosfn_return_mode_information:
39586                                           !BCC_EOS
39587                                           !BCC_EOS
39588                                           !BCC_EOS
39589                                           !BCC_EOS
39590                                           ! 8902 {
39591                                           ! 8903         Bit16u result=0x0100;
39592 9CBF           55                         push	bp
39593 9CC0           89E5                       mov	bp,sp
39594 9CC2           4C                         dec	sp
39595 9CC3           4C                         dec	sp
39596                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
39597 9CC4           B8                   0100  mov	ax,#$100
39598 9CC7           8946         FE            mov	-2[bp],ax
39599                                           !BCC_EOS
39600                                           ! 8904         Bit16u ss=get_SS();
39601 9CCA           4C                         dec	sp
39602 9CCB           4C                         dec	sp
39603                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39604 9CCC           E8         E0F7            call	_get_SS
39605                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
39606 9CCF           8946         FC            mov	-4[bp],ax
39607                                           !BCC_EOS
39608                                           ! 8905         ModeInfoBlock info;
39609                                           !BCC_EOS
39610                                           ! 8906         ModeInfoListItem *cur_info;
39611                                           !BCC_EOS
39612                                           ! 8907         Boolean using_lfb;
39613                                           !BCC_EOS
39614                                           ! 8908         Bit16u lfb_addr;
39615                                           !BCC_EOS
39616                                           ! 8909         printf("VBE vbe_biosfn_return_mode_information ES%x DI%x CX%x\n",ES,DI,CX);
39617 9CD2           81C4                 FEFA  add	sp,#-$106
39618                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
39619 9CD6           FF76         06            push	6[bp]
39620                                           ! Debug: list unsigned short DI = [S+$10E+8] (used reg = )
39621 9CD9           FF76         0A            push	$A[bp]
39622                                           ! Debug: list unsigned short ES = [S+$110+6] (used reg = )
39623 9CDC           FF76         08            push	8[bp]
39624                                           ! Debug: list * char = .2F1+0 (used reg = )
39625 9CDF           BB                   A452  mov	bx,#.2F1
39626 9CE2           53                         push	bx
39627                                           ! Debug: func () void = printf+0 (used reg = )
39628 9CE3           E8         E0FF            call	_printf
39629 9CE6           83C4                   08  add	sp,*8
39630                                           !BCC_EOS
39631                                           ! 8910         using_lfb=((CX & 0x4000) == 0x4000);
39632                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10C+4] (used reg = )
39633 9CE9           8B46         06            mov	ax,6[bp]
39634 9CEC           25                   4000  and	ax,#$4000
39635                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
39636 9CEF           3D                   4000  cmp	ax,#$4000
39637 9CF2           75           04            jne	.2F2
39638 9CF4           B0                     01  mov	al,*1
39639 9CF6           EB           02            jmp	.2F3
39640                       00009CF8            .2F2:
39641 9CF8           30C0                       xor	al,al
39642                       00009CFA            .2F3:
39643                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10C-$10A] (used reg = )
39644 9CFA           30E4                       xor	ah,ah
39645 9CFC           8986       FEF8            mov	-$108[bp],ax
39646                                           !BCC_EOS
39647                                           ! 8911         CX = (CX & 0x1ff);
39648                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10C+4] (used reg = )
39649 9D00           8B46         06            mov	ax,6[bp]
39650 9D03           25                   01FF  and	ax,#$1FF
39651                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10C+4] (used reg = )
39652 9D06           8946         06            mov	6[bp],ax
39653                                           !BCC_EOS
39654                                           ! 8912         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
39655                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10C-$108 (used reg = )
39656 9D09           8D9E       FEFA            lea	bx,-$106[bp]
39657 9D0D           53                         push	bx
39658                                           ! Debug: list unsigned short using_lfb = [S+$10E-$10A] (used reg = )
39659 9D0E           FFB6       FEF8            push	-$108[bp]
39660                                           ! Debug: list unsigned short CX = [S+$110+4] (used reg = )
39661 9D12           FF76         06            push	6[bp]
39662                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39663 9D15           E8         FC25            call	_mode_info_find_mode
39664 9D18           83C4                   06  add	sp,*6
39665                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
39666 9D1B           8986       FEFA            mov	-$106[bp],ax
39667                                           !BCC_EOS
39668                                           ! 8913         if (cur_info != 0)
39669                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
39670 9D1F           8B86       FEFA            mov	ax,-$106[bp]
39671 9D23           85C0                       test	ax,ax
39672 9D25         0F84         0099            beq 	.2F4
39673                       00009D29            .2F5:
39674                                           ! 8914         {
39675                                           ! 8915                 printf("VBE found mode %x\n",CX);
39676                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
39677 9D29           FF76         06            push	6[bp]
39678                                           ! Debug: list * char = .2F6+0 (used reg = )
39679 9D2C           BB                   A43F  mov	bx,#.2F6
39680 9D2F           53                         push	bx
39681                                           ! Debug: func () void = printf+0 (used reg = )
39682 9D30           E8         E0B2            call	_printf
39683 9D33           83C4                   04  add	sp,*4
39684                                           !BCC_EOS
39685                                           ! 8916                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
39686                                           ! Debug: list int = const $100 (used reg = )
39687 9D36           B8                   0100  mov	ax,#$100
39688 9D39           50                         push	ax
39689                                           ! Debug: list int = const 0 (used reg = )
39690 9D3A           31C0                       xor	ax,ax
39691 9D3C           50                         push	ax
39692                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
39693 9D3D           8D9E       FEFC            lea	bx,-$104[bp]
39694 9D41           53                         push	bx
39695                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
39696 9D42           FF76         FC            push	-4[bp]
39697                                           ! Debug: func () void = memsetb+0 (used reg = )
39698 9D45           E8         DF48            call	_memsetb
39699 9D48           83C4                   08  add	sp,*8
39700                                           !BCC_EOS
39701                                           ! 8917                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
39702                                           ! Debug: list int = const $42 (used reg = )
39703 9D4B           B8                   0042  mov	ax,*$42
39704 9D4E           50                         push	ax
39705 9D4F           8B9E       FEFA            mov	bx,-$106[bp]
39706                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
39707                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
39708 9D53           43                         inc	bx
39709 9D54           43                         inc	bx
39710 9D55           53                         push	bx
39711                                           ! Debug: list unsigned int = const $C000 (used reg = )
39712 9D56           B8                   C000  mov	ax,#$C000
39713 9D59           50                         push	ax
39714                                           ! Debug: list * struct ModeInfoBlock info = S+$112-$106 (used reg = )
39715 9D5A           8D9E       FEFC            lea	bx,-$104[bp]
39716 9D5E           53                         push	bx
39717                                           ! Debug: list unsigned short ss = [S+$114-6] (used reg = )
39718 9D5F           FF76         FC            push	-4[bp]
39719                                           ! Debug: func () void = memcpyb+0 (used reg = )
39720 9D62           E8         DF75            call	_memcpyb
39721 9D65           83C4                   0A  add	sp,*$A
39722                                           !BCC_EOS
39723                                           ! 8918                 if (using_lfb) {
39724 9D68           8B86       FEF8            mov	ax,-$108[bp]
39725 9D6C           85C0                       test	ax,ax
39726 9D6E           74           06            je  	.2F7
39727                       00009D70            .2F8:
39728                                           ! 8919                   info.NumberOfBanks = 1;
39729                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10C-$EC] (used reg = )
39730 9D70           B0                     01  mov	al,*1
39731 9D72           8886       FF16            mov	-$EA[bp],al
39732                                           !BCC_EOS
39733                                           ! 8920                 }
39734                                           ! 8921                 lfb_addr = pci_get_lfb_addr(0x1234);
39735                       00009D76            .2F7:
39736                                           ! Debug: list int = const $1234 (used reg = )
39737 9D76           B8                   1234  mov	ax,#$1234
39738 9D79           50                         push	ax
39739                                           ! Debug: func () int = pci_get_lfb_addr+0 (used reg = )
39740 9D7A           E8         E1A5            call	_pci_get_lfb_addr
39741 9D7D           44                         inc	sp
39742 9D7E           44                         inc	sp
39743                                           ! Debug: eq int = ax+0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39744 9D7F           8986       FEF6            mov	-$10A[bp],ax
39745                                           !BCC_EOS
39746                                           ! 8922                 if (lfb_addr > 0) {
39747                                           ! Debug: gt int = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39748 9D83           8B86       FEF6            mov	ax,-$10A[bp]
39749 9D87           85C0                       test	ax,ax
39750 9D89           74           11            je  	.2F9
39751                       00009D8B            .2FA:
39752                                           ! 8923                   info.PhysBasePtr = ((Bit32u)lfb_addr << 16);
39753                                           ! Debug: cast unsigned long = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39754 9D8B           8B86       FEF6            mov	ax,-$10A[bp]
39755 9D8F           31DB                       xor	bx,bx
39756                                           ! Debug: sl int = const $10 to unsigned long = bx+0 (used reg = )
39757 9D91           93                         xchg	bx,ax
39758 9D92           31C0                       xor	ax,ax
39759                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10C-$DE] (used reg = )
39760 9D94           8986       FF24            mov	-$DC[bp],ax
39761 9D98           899E       FF26            mov	-$DA[bp],bx
39762                                           !BCC_EOS
39763                                           ! 8924                 }
39764                                           ! 8925                 if (info.WinAAttributes & 0x01) {
39765                       00009D9C            .2F9:
39766                                           ! Debug: and int = const 1 to unsigned char info = [S+$10C-$104] (used reg = )
39767 9D9C           8A86       FEFE            mov	al,-$102[bp]
39768 9DA0           24                     01  and	al,*1
39769 9DA2           84C0                       test	al,al
39770 9DA4           74           14            je  	.2FB
39771                       00009DA6            .2FC:
39772                                           ! 8926                   info.WinFuncPtr = 0xC0000000UL;
39773                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10C-$FA] (used reg = )
39774 9DA6           31C0                       xor	ax,ax
39775 9DA8           BB                   C000  mov	bx,#$C000
39776 9DAB           8986       FF08            mov	-$F8[bp],ax
39777 9DAF           899E       FF0A            mov	-$F6[bp],bx
39778                                           !BCC_EOS
39779                                           ! 8927                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
39780                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
39781                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10C-$FA] (used reg = )
39782 9DB3           BB                   97A7  mov	bx,#_dispi_set_bank_farcall
39783 9DB6           899E       FF08            mov	-$F8[bp],bx
39784                                           !BCC_EOS
39785                                           ! 8928                 }
39786                                           ! 8929                 result = 0x4f;
39787                       00009DBA            .2FB:
39788                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
39789 9DBA           B8                   004F  mov	ax,*$4F
39790 9DBD           8946         FE            mov	-2[bp],ax
39791                                           !BCC_EOS
39792                                           ! 8930         }
39793                                           ! 8931         else
39794                                           ! 8932         {
39795 9DC0           EB           13            jmp .2FD
39796                       00009DC2            .2F4:
39797                                           ! 8933                 printf("VBE *NOT* found mode %x\n",CX);
39798                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
39799 9DC2           FF76         06            push	6[bp]
39800                                           ! Debug: list * char = .2FE+0 (used reg = )
39801 9DC5           BB                   A426  mov	bx,#.2FE
39802 9DC8           53                         push	bx
39803                                           ! Debug: func () void = printf+0 (used reg = )
39804 9DC9           E8         E019            call	_printf
39805 9DCC           83C4                   04  add	sp,*4
39806                                           !BCC_EOS
39807                                           ! 8934                 result = 0x100;
39808                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10C-4] (used reg = )
39809 9DCF           B8                   0100  mov	ax,#$100
39810 9DD2           8946         FE            mov	-2[bp],ax
39811                                           !BCC_EOS
39812                                           ! 8935         }
39813                                           ! 8936         if (result == 0x4f)
39814                       00009DD5            .2FD:
39815                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
39816 9DD5           8B46         FE            mov	ax,-2[bp]
39817 9DD8           3D                   004F  cmp	ax,*$4F
39818 9DDB           75           18            jne 	.2FF
39819                       00009DDD            .300:
39820                                           ! 8937         {
39821                                           ! 8938                 memcpyb(ES, DI, ss, &info, sizeof(info));
39822                                           ! Debug: list int = const $100 (used reg = )
39823 9DDD           B8                   0100  mov	ax,#$100
39824 9DE0           50                         push	ax
39825                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
39826 9DE1           8D9E       FEFC            lea	bx,-$104[bp]
39827 9DE5           53                         push	bx
39828                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
39829 9DE6           FF76         FC            push	-4[bp]
39830                                           ! Debug: list unsigned short DI = [S+$112+8] (used reg = )
39831 9DE9           FF76         0A            push	$A[bp]
39832                                           ! Debug: list unsigned short ES = [S+$114+6] (used reg = )
39833 9DEC           FF76         08            push	8[bp]
39834                                           ! Debug: func () void = memcpyb+0 (used reg = )
39835 9DEF           E8         DEE8            call	_memcpyb
39836 9DF2           83C4                   0A  add	sp,*$A
39837                                           !BCC_EOS
39838                                           ! 8939         }
39839                                           ! 8940         write_word(ss, AX, result);
39840                       00009DF5            .2FF:
39841                                           ! Debug: list unsigned short result = [S+$10C-4] (used reg = )
39842 9DF5           FF76         FE            push	-2[bp]
39843                                           ! Debug: list * unsigned short AX = [S+$10E+2] (used reg = )
39844 9DF8           FF76         04            push	4[bp]
39845                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
39846 9DFB           FF76         FC            push	-4[bp]
39847                                           ! Debug: func () void = write_word+0 (used reg = )
39848 9DFE           E8         DF77            call	_write_word
39849 9E01           83C4                   06  add	sp,*6
39850                                           !BCC_EOS
39851                                           ! 8941 }
39852 9E04           89EC                       mov	sp,bp
39853 9E06           5D                         pop	bp
39854 9E07           C3                         ret
39855                                           ! 8942 void vbe_biosfn_set_mode(AX, BX, ES, DI)
39856                                           ! Register BX used in function vbe_biosfn_return_mode_information
39857                                           ! 8943 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
39858                                           export	_vbe_biosfn_set_mode
39859                       00009E08            _vbe_biosfn_set_mode:
39860                                           !BCC_EOS
39861                                           !BCC_EOS
39862                                           !BCC_EOS
39863                                           !BCC_EOS
39864                                           ! 8944 {
39865                                           ! 8945         Bit16u ss = get_SS();
39866 9E08           55                         push	bp
39867 9E09           89E5                       mov	bp,sp
39868 9E0B           4C                         dec	sp
39869 9E0C           4C                         dec	sp
39870                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39871 9E0D           E8         DFB6            call	_get_SS
39872                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
39873 9E10           8946         FE            mov	-2[bp],ax
39874                                           !BCC_EOS
39875                                           ! 8946         Bit16u result;
39876                                           !BCC_EOS
39877                                           ! 8947         ModeInfoListItem *cur_info;
39878                                           !BCC_EOS
39879                                           ! 8948         Boolean using_lfb;
39880                                           !BCC_EOS
39881                                           ! 8949         Bit8u no_clear;
39882                                           !BCC_EOS
39883                                           ! 8950         Bit8u lfb_flag;
39884                                           !BCC_EOS
39885                                           ! 8951         using_lfb=((BX & 0x4000) == 0x4000);
39886 9E13           83C4                   F8  add	sp,*-8
39887                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
39888 9E16           8B46         06            mov	ax,6[bp]
39889 9E19           25                   4000  and	ax,#$4000
39890                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
39891 9E1C           3D                   4000  cmp	ax,#$4000
39892 9E1F           75           04            jne	.301
39893 9E21           B0                     01  mov	al,*1
39894 9E23           EB           02            jmp	.302
39895                       00009E25            .301:
39896 9E25           30C0                       xor	al,al
39897                       00009E27            .302:
39898                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
39899 9E27           30E4                       xor	ah,ah
39900 9E29           8946         F8            mov	-8[bp],ax
39901                                           !BCC_EOS
39902                                           ! 8952         lfb_flag=using_lfb?0x40:0;
39903 9E2C           8B46         F8            mov	ax,-8[bp]
39904 9E2F           85C0                       test	ax,ax
39905 9E31           74           04            je  	.303
39906                       00009E33            .304:
39907 9E33           B0                     40  mov	al,*$40
39908 9E35           EB           02            jmp .305
39909                       00009E37            .303:
39910 9E37           30C0                       xor	al,al
39911                       00009E39            .305:
39912                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
39913 9E39           8846         F6            mov	-$A[bp],al
39914                                           !BCC_EOS
39915                                           ! 8953         no_cl
39916                                           ! 8953 ear=((BX & 0x8000) == 0x8000)?0x80:0;
39917                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
39918 9E3C           8B46         06            mov	ax,6[bp]
39919 9E3F           25                   8000  and	ax,#$8000
39920                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
39921 9E42           3D                   8000  cmp	ax,#$8000
39922 9E45           75           04            jne 	.306
39923                       00009E47            .307:
39924 9E47           B0                     80  mov	al,#$80
39925 9E49           EB           02            jmp .308
39926                       00009E4B            .306:
39927 9E4B           30C0                       xor	al,al
39928                       00009E4D            .308:
39929                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
39930 9E4D           8846         F7            mov	-9[bp],al
39931                                           !BCC_EOS
39932                                           ! 8954         BX = (BX & 0x1ff);
39933                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
39934 9E50           8B46         06            mov	ax,6[bp]
39935 9E53           25                   01FF  and	ax,#$1FF
39936                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
39937 9E56           8946         06            mov	6[bp],ax
39938                                           !BCC_EOS
39939                                           ! 8955         if (BX<0x0100)
39940                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
39941 9E59           8B46         06            mov	ax,6[bp]
39942 9E5C           3D                   0100  cmp	ax,#$100
39943 9E5F           73           23            jae 	.309
39944                       00009E61            .30A:
39945                                           ! 8956         {
39946                                           ! 8957                 Bit8u mode;
39947                                           !BCC_EOS
39948                                           ! 8958                 dispi_set_enable(0x00);
39949 9E61           4C                         dec	sp
39950 9E62           4C                         dec	sp
39951                                           ! Debug: list int = const 0 (used reg = )
39952 9E63           31C0                       xor	ax,ax
39953 9E65           50                         push	ax
39954                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39955 9E66           E8         F902            call	_dispi_set_enable
39956 9E69           44                         inc	sp
39957 9E6A           44                         inc	sp
39958                                           !BCC_EOS
39959                                           ! 8959                 mode=(BX & 0xff);
39960                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
39961 9E6B           8A46         06            mov	al,6[bp]
39962                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
39963 9E6E           8846         F5            mov	-$B[bp],al
39964                                           !BCC_EOS
39965                                           ! 8960                 biosfn_set_video_mode(mode);
39966                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
39967 9E71           8A46         F5            mov	al,-$B[bp]
39968 9E74           30E4                       xor	ah,ah
39969 9E76           50                         push	ax
39970                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
39971 9E77           E8         9D42            call	_biosfn_set_video_mode
39972 9E7A           44                         inc	sp
39973 9E7B           44                         inc	sp
39974                                           !BCC_EOS
39975                                           ! 8961                 result = 0x4f;
39976                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
39977 9E7C           B8                   004F  mov	ax,*$4F
39978 9E7F           8946         FC            mov	-4[bp],ax
39979                                           !BCC_EOS
39980                                           ! 8962         }
39981 9E82           44                         inc	sp
39982 9E83           44                         inc	sp
39983                                           ! 8963         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
39984                       00009E84            .309:
39985                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
39986 9E84           8D5E         FA            lea	bx,-6[bp]
39987 9E87           53                         push	bx
39988                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
39989 9E88           FF76         F8            push	-8[bp]
39990                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
39991 9E8B           FF76         06            push	6[bp]
39992                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39993 9E8E           E8         FAAC            call	_mode_info_find_mode
39994 9E91           83C4                   06  add	sp,*6
39995                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
39996 9E94           8946         FA            mov	-6[bp],ax
39997                                           !BCC_EOS
39998                                           ! 8964         if (cur_info != 0)
39999                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
40000 9E97           8B46         FA            mov	ax,-6[bp]
40001 9E9A           85C0                       test	ax,ax
40002 9E9C         0F84         00B5            beq 	.30B
40003                       00009EA0            .30C:
40004                                           ! 8965         {
40005                                           ! 8966                 printf("VBE found mode %x, setting:\n", BX);
40006                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
40007 9EA0           FF76         06            push	6[bp]
40008                                           ! Debug: list * char = .30D+0 (used reg = )
40009 9EA3           BB                   A409  mov	bx,#.30D
40010 9EA6           53                         push	bx
40011                                           ! Debug: func () void = printf+0 (used reg = )
40012 9EA7           E8         DF3B            call	_printf
40013 9EAA           83C4                   04  add	sp,*4
40014                                           !BCC_EOS
40015                                           ! 8967                 printf("\txres%x yres%x bpp%x\n",
40016                                           ! 8968                         cur_info->info.XResolution,
40017                                           ! 8969                         cur_info->info.YResolution,
40018                                           ! 8970                         cur_info->info.BitsPerPixel);
40019 9EAD           8B5E         FA            mov	bx,-6[bp]
40020                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
40021 9EB0           8A47         1B            mov	al,$1B[bx]
40022 9EB3           30E4                       xor	ah,ah
40023 9EB5           50                         push	ax
40024 9EB6           8B5E         FA            mov	bx,-6[bp]
40025                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
40026 9EB9           FF77         16            push	$16[bx]
40027 9EBC           8B5E         FA            mov	bx,-6[bp]
40028                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
40029 9EBF           FF77         14            push	$14[bx]
40030                                           ! Debug: list * char = .30E+0 (used reg = )
40031 9EC2           BB                   A3F3  mov	bx,#.30E
40032 9EC5           53                         push	bx
40033                                           ! Debug: func () void = printf+0 (used reg = )
40034 9EC6           E8         DF1C            call	_printf
40035 9EC9           83C4                   08  add	sp,*8
40036                                           !BCC_EOS
40037                                           ! 8971                 dispi_set_enable(0x00);
40038                                           ! Debug: list int = const 0 (used reg = )
40039 9ECC           31C0                       xor	ax,ax
40040 9ECE           50                         push	ax
40041                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
40042 9ECF           E8         F899            call	_dispi_set_enable
40043 9ED2           44                         inc	sp
40044 9ED3           44                         inc	sp
40045                                           !BCC_EOS
40046                                           ! 8972                 if (cur_info->info.BitsPerPixel == 4)
40047 9ED4           8B5E         FA            mov	bx,-6[bp]
40048                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
40049 9ED7           8A47         1B            mov	al,$1B[bx]
40050 9EDA           3C                     04  cmp	al,*4
40051 9EDC           75           09            jne 	.30F
40052                       00009EDE            .310:
40053                                           ! 8973                 {
40054                                           ! 8974                   biosfn_set_video_mode(0x6a);
40055                                           ! Debug: list int = const $6A (used reg = )
40056 9EDE           B8                   006A  mov	ax,*$6A
40057 9EE1           50                         push	ax
40058                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
40059 9EE2           E8         9CD7            call	_biosfn_set_video_mode
40060 9EE5           44                         inc	sp
40061 9EE6           44                         inc	sp
40062                                           !BCC_EOS
40063                                           ! 8975                 }
40064                                           ! 8976                 dispi_set_bpp(cur_info->info.BitsPerPixel);
40065                       00009EE7            .30F:
40066 9EE7           8B5E         FA            mov	bx,-6[bp]
40067                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
40068 9EEA           8A47         1B            mov	al,$1B[bx]
40069 9EED           30E4                       xor	ah,ah
40070 9EEF           50                         push	ax
40071                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
40072 9EF0           E8         F7FD            call	_dispi_set_bpp
40073 9EF3           44                         inc	sp
40074 9EF4           44                         inc	sp
40075                                           !BCC_EOS
40076                                           ! 8977                 dispi_set_xres(cur_info->info.XResolution);
40077 9EF5           8B5E         FA            mov	bx,-6[bp]
40078                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
40079 9EF8           FF77         14            push	$14[bx]
40080                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
40081 9EFB           E8         F7BD            call	_dispi_set_xres
40082 9EFE           44                         inc	sp
40083 9EFF           44                         inc	sp
40084                                           !BCC_EOS
40085                                           ! 8978                 dispi_set_yres(cur_info->info.YResolution);
40086 9F00           8B5E         FA            mov	bx,-6[bp]
40087                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
40088 9F03           FF77         16            push	$16[bx]
40089                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
40090 9F06           E8         F7C9            call	_dispi_set_yres
40091 9F09           44                         inc	sp
40092 9F0A           44                         inc	sp
40093                                           !BCC_EOS
40094                                           ! 8979                 dispi_set_bank(0);
40095                                           ! Debug: list int = const 0 (used reg = )
40096 9F0B           31C0                       xor	ax,ax
40097 9F0D           50                         push	ax
40098                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
40099 9F0E           E8         F878            call	_dispi_set_bank
40100 9F11           44                         inc	sp
40101 9F12           44                         inc	sp
40102                                           !BCC_EOS
40103                                           ! 8980                 dispi_set_enable(0x01 | no_clear | lfb_flag);
40104                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
40105                                           ! Debug: expression subtree swapping
40106 9F13           8A46         F7            mov	al,-9[bp]
40107 9F16           0C                     01  or	al,*1
40108                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
40109 9F18           0A46         F6            or	al,-$A[bp]
40110                                           ! Debug: list unsigned char = al+0 (used reg = )
40111 9F1B           30E4                       xor	ah,ah
40112 9F1D           50                         push	ax
40113                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
40114 9F1E           E8         F84A            call	_dispi_set_enable
40115 9F21           44                         inc	sp
40116 9F22           44                         inc	sp
40117                                           !BCC_EOS
40118                                           ! 8981                 vga_compat_setup();
40119                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
40120 9F23           E8         F940            call	_vga_compat_setup
40121                                           !BCC_EOS
40122                                           ! 8982                 write_word(0x40,0xBA,BX);
40123                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
40124 9F26           FF76         06            push	6[bp]
40125                                           ! Debug: list int = const $BA (used reg = )
40126 9F29           B8                   00BA  mov	ax,#$BA
40127 9F2C           50                         push	ax
40128                                           ! Debug: list int = const $40 (used reg = )
40129 9F2D           B8                   0040  mov	ax,*$40
40130 9F30           50                         push	ax
40131                                           ! Debug: func () void = write_word+0 (used reg = )
40132 9F31           E8         DE44            call	_write_word
40133 9F34           83C4                   06  add	sp,*6
40134                                           !BCC_EOS
40135                                           ! 8983                 write_byte(0x40,0x87,(0x60 | no_clear));
40136                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
40137                                           ! Debug: expression subtree swapping
40138 9F37           8A46         F7            mov	al,-9[bp]
40139 9F3A           0C                     60  or	al,*$60
40140                                           ! Debug: list unsigned char = al+0 (used reg = )
40141 9F3C           30E4                       xor	ah,ah
40142 9F3E           50                         push	ax
40143                                           ! Debug: list int = const $87 (used reg = )
40144 9F3F           B8                   0087  mov	ax,#$87
40145 9F42           50                         push	ax
40146                                           ! Debug: list int = const $40 (used reg = )
40147 9F43           B8                   0040  mov	ax,*$40
40148 9F46           50                         push	ax
40149                                           ! Debug: func () void = write_byte+0 (used reg = )
40150 9F47           E8         DE16            call	_write_byte
40151 9F4A           83C4                   06  add	sp,*6
40152                                           !BCC_EOS
40153                                           ! 8984                 result = 0x4f;
40154                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
40155 9F4D           B8                   004F  mov	ax,*$4F
40156 9F50           8946         FC            mov	-4[bp],ax
40157                                           !BCC_EOS
40158                                           ! 8985         }
40159                                           ! 8986         else
40160                                           ! 8987         {
40161 9F53           EB           21            jmp .311
40162                       00009F55            .30B:
40163                                           ! 8988                 printf("VBE *NOT* found mode %x\n" , BX);
40164                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
40165 9F55           FF76         06            push	6[bp]
40166                                           ! Debug: list * char = .312+0 (used reg = )
40167 9F58           BB                   A3DA  mov	bx,#.312
40168 9F5B           53                         push	bx
40169                                           ! Debug: func () void = printf+0 (used reg = )
40170 9F5C           E8         DE86            call	_printf
40171 9F5F           83C4                   04  add	sp,*4
40172                                           !BCC_EOS
40173                                           ! 8989                 result = 0x100;
40174                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
40175 9F62           B8                   0100  mov	ax,#$100
40176 9F65           8946         FC            mov	-4[bp],ax
40177                                           !BCC_EOS
40178                                           ! 8990                 if (BX == 3)
40179                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
40180 9F68           8B46         06            mov	ax,6[bp]
40181 9F6B           3D                   0003  cmp	ax,*3
40182 9F6E           75           06            jne 	.313
40183                       00009F70            .314:
40184                                           ! 8991                         result = 0x4f;
40185                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
40186 9F70           B8                   004F  mov	ax,*$4F
40187 9F73           8946         FC            mov	-4[bp],ax
40188                                           !BCC_EOS
40189                                           ! 8992         }
40190                       00009F76            .313:
40191                                           ! 8993         write_word(ss, AX, result);
40192                       00009F76            .311:
40193                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
40194 9F76           FF76         FC            push	-4[bp]
40195                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
40196 9F79           FF76         04            push	4[bp]
40197                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
40198 9F7C           FF76         FE            push	-2[bp]
40199                                           ! Debug: func () void = write_word+0 (used reg = )
40200 9F7F           E8         DDF6            call	_write_word
40201 9F82           83C4                   06  add	sp,*6
40202                                           !BCC_EOS
40203                                           ! 8994 }
40204 9F85           89EC                       mov	sp,bp
40205 9F87           5D                         pop	bp
40206 9F88           C3                         ret
40207                                           ! 8995 #asm
40208                                           !BCC_ASM
40209                       00000008            _vbe_biosfn_set_mode.DI	set	8
40210                       00000006            _vbe_biosfn_set_mode.ES	set	6
40211                       00000002            _vbe_biosfn_set_mode.AX	set	2
40212                       00000004            _vbe_biosfn_set_mode.BX	set	4
40213                       00009F89            vbe_biosfn_return_current_mode:
40214 9F89           1E                           push ds
40215 9F8A           B8                   0040    mov ax, # 0x40
40216 9F8D           8ED8                         mov ds, ax
40217 9F8F           E8         F7E9              call dispi_get_enable
40218 9F92           25                   0001    and ax, # 0x01
40219 9F95           74           09              jz no_vbe_mode
40220 9F97           BB                   00BA    mov bx, # 0xBA
40221 9F9A           8B07                         mov ax, [bx]
40222 9F9C           89C3                         mov bx, ax
40223 9F9E           75           09              jnz vbe_03_ok
40224                       00009FA0            no_vbe_mode:
40225 9FA0           BB                   0049    mov bx, # 0x49
40226 9FA3           8A07                         mov al, [bx]
40227 9FA5           88C3                         mov bl, al
40228 9FA7           30FF                         xor bh, bh
40229                       00009FA9            vbe_03_ok:
40230 9FA9           B8                   004F    mov ax, #0x004f
40231 9FAC           1F                           pop ds
40232 9FAD           C3                           ret
40233                                           ! 9016 endasm
40234                                           !BCC_ENDASM
40235                                           ! 9017 Bit16u vbe_biosfn_read_video_state_size()
40236                                           ! Register BX used in function vbe_biosfn_set_mode
40237                                           ! 9018 {
40238                                           export	_vbe_biosfn_read_video_state_size
40239                       00009FAE            _vbe_biosfn_read_video_state_size:
40240                                           ! 9019     return 9 * 2;
40241 9FAE           55                         push	bp
40242 9FAF           89E5                       mov	bp,sp
40243 9FB1           B8                   0012  mov	ax,*$12
40244 9FB4           5D                         pop	bp
40245 9FB5           C3                         ret
40246                                           !BCC_EOS
40247                                           ! 9020 }
40248                                           ! 9021 void vbe_biosfn_save_video_state(ES, BX)
40249                                           ! 9022      Bit16u ES; Bit16u BX;
40250                                           export	_vbe_biosfn_save_video_state
40251                       00009FB6            _vbe_biosfn_save_video_state:
40252                                           !BCC_EOS
40253                                           !BCC_EOS
40254                                           ! 9023 {
40255                                           ! 9024     Bit16u enable, i;
40256                                           !BCC_EOS
40257                                           ! 9025     outw(0x01CE,0x4);
40258 9FB6           55                         push	bp
40259 9FB7           89E5                       mov	bp,sp
40260 9FB9           83C4                   FC  add	sp,*-4
40261                                           ! Debug: list int = const 4 (used reg = )
40262 9FBC           B8                   0004  mov	ax,*4
40263 9FBF           50                         push	ax
40264                                           ! Debug: list int = const $1CE (used reg = )
40265 9FC0           B8                   01CE  mov	ax,#$1CE
40266 9FC3           50                         push	ax
40267                                           ! Debug: func () void = outw+0 (used reg = )
40268 9FC4           E8         DDEF            call	_outw
40269 9FC7           83C4                   04  add	sp,*4
40270                                           !BCC_EOS
40271                                           ! 9026     enable = inw(0x01CF);
40272                                           ! Debug: list int = const $1CF (used reg = )
40273 9FCA           B8                   01CF  mov	ax,#$1CF
40274 9FCD           50                         push	ax
40275                                           ! Debug: func () unsigned short = inw+0 (used reg = )
40276 9FCE           E8         DDCA            call	_inw
40277 9FD1           44                         inc	sp
40278 9FD2           44                         inc	sp
40279                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
40280 9FD3           8946         FE            mov	-2[bp],ax
40281                                           !BCC_EOS
40282                                           ! 9027     writ
40283                                           ! 9027 e_word(ES, BX, enable);
40284                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40285 9FD6           FF76         FE            push	-2[bp]
40286                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
40287 9FD9           FF76         06            push	6[bp]
40288                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
40289 9FDC           FF76         04            push	4[bp]
40290                                           ! Debug: func () void = write_word+0 (used reg = )
40291 9FDF           E8         DD96            call	_write_word
40292 9FE2           83C4                   06  add	sp,*6
40293                                           !BCC_EOS
40294                                           ! 9028     BX += 2;
40295                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40296 9FE5           8B46         06            mov	ax,6[bp]
40297 9FE8           40                         inc	ax
40298 9FE9           40                         inc	ax
40299 9FEA           8946         06            mov	6[bp],ax
40300                                           !BCC_EOS
40301                                           ! 9029     if (!(enable & 0x01))
40302                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
40303 9FED           8A46         FE            mov	al,-2[bp]
40304 9FF0           24                     01  and	al,*1
40305 9FF2           84C0                       test	al,al
40306 9FF4           75           04            jne 	.315
40307                       00009FF6            .316:
40308                                           ! 9030         return;
40309 9FF6           89EC                       mov	sp,bp
40310 9FF8           5D                         pop	bp
40311 9FF9           C3                         ret
40312                                           !BCC_EOS
40313                                           ! 9031     for(i = 0x1; i <= 0x9; i++) {
40314                       00009FFA            .315:
40315                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
40316 9FFA           B8                   0001  mov	ax,*1
40317 9FFD           8946         FC            mov	-4[bp],ax
40318                                           !BCC_EOS
40319                                           !BCC_EOS
40320 A000           EB           3A            jmp .319
40321                       0000A002            .31A:
40322                                           ! 9032         if (i != 0x4) {
40323                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
40324 A002           8B46         FC            mov	ax,-4[bp]
40325 A005           3D                   0004  cmp	ax,*4
40326 A008           74           2B            je  	.31B
40327                       0000A00A            .31C:
40328                                           ! 9033             outw(0x01CE, i);
40329                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
40330 A00A           FF76         FC            push	-4[bp]
40331                                           ! Debug: list int = const $1CE (used reg = )
40332 A00D           B8                   01CE  mov	ax,#$1CE
40333 A010           50                         push	ax
40334                                           ! Debug: func () void = outw+0 (used reg = )
40335 A011           E8         DDA2            call	_outw
40336 A014           83C4                   04  add	sp,*4
40337                                           !BCC_EOS
40338                                           ! 9034             write_word(ES, BX, inw(0x01CF));
40339                                           ! Debug: list int = const $1CF (used reg = )
40340 A017           B8                   01CF  mov	ax,#$1CF
40341 A01A           50                         push	ax
40342                                           ! Debug: func () unsigned short = inw+0 (used reg = )
40343 A01B           E8         DD7D            call	_inw
40344 A01E           44                         inc	sp
40345 A01F           44                         inc	sp
40346                                           ! Debug: list unsigned short = ax+0 (used reg = )
40347 A020           50                         push	ax
40348                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
40349 A021           FF76         06            push	6[bp]
40350                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
40351 A024           FF76         04            push	4[bp]
40352                                           ! Debug: func () void = write_word+0 (used reg = )
40353 A027           E8         DD4E            call	_write_word
40354 A02A           83C4                   06  add	sp,*6
40355                                           !BCC_EOS
40356                                           ! 9035             BX += 2;
40357                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40358 A02D           8B46         06            mov	ax,6[bp]
40359 A030           40                         inc	ax
40360 A031           40                         inc	ax
40361 A032           8946         06            mov	6[bp],ax
40362                                           !BCC_EOS
40363                                           ! 9036         }
40364                                           ! 9037     }
40365                       0000A035            .31B:
40366                                           ! 9038 }
40367                       0000A035            .318:
40368                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
40369 A035           8B46         FC            mov	ax,-4[bp]
40370 A038           40                         inc	ax
40371 A039           8946         FC            mov	-4[bp],ax
40372                       0000A03C            .319:
40373                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
40374 A03C           8B46         FC            mov	ax,-4[bp]
40375 A03F           3D                   0009  cmp	ax,*9
40376 A042           76           BE            jbe	.31A
40377                       0000A044            .31D:
40378                       0000A044            .317:
40379 A044           89EC                       mov	sp,bp
40380 A046           5D                         pop	bp
40381 A047           C3                         ret
40382                                           ! 9039 void vbe_biosfn_restore_video_state(ES, BX)
40383                                           ! 9040      Bit16u ES; Bit16u BX;
40384                                           export	_vbe_biosfn_restore_video_state
40385                       0000A048            _vbe_biosfn_restore_video_state:
40386                                           !BCC_EOS
40387                                           !BCC_EOS
40388                                           ! 9041 {
40389                                           ! 9042     Bit16u enable, i;
40390                                           !BCC_EOS
40391                                           ! 9043     enable = read_word(ES, BX);
40392 A048           55                         push	bp
40393 A049           89E5                       mov	bp,sp
40394 A04B           83C4                   FC  add	sp,*-4
40395                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40396 A04E           FF76         06            push	6[bp]
40397                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40398 A051           FF76         04            push	4[bp]
40399                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40400 A054           E8         DCF6            call	_read_word
40401 A057           83C4                   04  add	sp,*4
40402                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
40403 A05A           8946         FE            mov	-2[bp],ax
40404                                           !BCC_EOS
40405                                           ! 9044     BX += 2;
40406                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40407 A05D           8B46         06            mov	ax,6[bp]
40408 A060           40                         inc	ax
40409 A061           40                         inc	ax
40410 A062           8946         06            mov	6[bp],ax
40411                                           !BCC_EOS
40412                                           ! 9045     if (!(enable & 0x01)) {
40413                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
40414 A065           8A46         FE            mov	al,-2[bp]
40415 A068           24                     01  and	al,*1
40416 A06A           84C0                       test	al,al
40417 A06C           75           1E            jne 	.31E
40418                       0000A06E            .31F:
40419                                           ! 9046         outw(0x01CE,0x4);
40420                                           ! Debug: list int = const 4 (used reg = )
40421 A06E           B8                   0004  mov	ax,*4
40422 A071           50                         push	ax
40423                                           ! Debug: list int = const $1CE (used reg = )
40424 A072           B8                   01CE  mov	ax,#$1CE
40425 A075           50                         push	ax
40426                                           ! Debug: func () void = outw+0 (used reg = )
40427 A076           E8         DD3D            call	_outw
40428 A079           83C4                   04  add	sp,*4
40429                                           !BCC_EOS
40430                                           ! 9047         outw(0x01CF, enable);
40431                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40432 A07C           FF76         FE            push	-2[bp]
40433                                           ! Debug: list int = const $1CF (used reg = )
40434 A07F           B8                   01CF  mov	ax,#$1CF
40435 A082           50                         push	ax
40436                                           ! Debug: func () void = outw+0 (used reg = )
40437 A083           E8         DD30            call	_outw
40438 A086           83C4                   04  add	sp,*4
40439                                           !BCC_EOS
40440                                           ! 9048     } else {
40441 A089           E9         00E5            br 	.320
40442                       0000A08C            .31E:
40443                                           ! 9049         outw(0x01CE, 0x1);
40444                                           ! Debug: list int = const 1 (used reg = )
40445 A08C           B8                   0001  mov	ax,*1
40446 A08F           50                         push	ax
40447                                           ! Debug: list int = const $1CE (used reg = )
40448 A090           B8                   01CE  mov	ax,#$1CE
40449 A093           50                         push	ax
40450                                           ! Debug: func () void = outw+0 (used reg = )
40451 A094           E8         DD1F            call	_outw
40452 A097           83C4                   04  add	sp,*4
40453                                           !BCC_EOS
40454                                           ! 9050         outw(0x01CF, read_word(ES, BX));
40455                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40456 A09A           FF76         06            push	6[bp]
40457                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40458 A09D           FF76         04            push	4[bp]
40459                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40460 A0A0           E8         DCAA            call	_read_word
40461 A0A3           83C4                   04  add	sp,*4
40462                                           ! Debug: list unsigned short = ax+0 (used reg = )
40463 A0A6           50                         push	ax
40464                                           ! Debug: list int = const $1CF (used reg = )
40465 A0A7           B8                   01CF  mov	ax,#$1CF
40466 A0AA           50                         push	ax
40467                                           ! Debug: func () void = outw+0 (used reg = )
40468 A0AB           E8         DD08            call	_outw
40469 A0AE           83C4                   04  add	sp,*4
40470                                           !BCC_EOS
40471                                           ! 9051         BX += 2;
40472                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40473 A0B1           8B46         06            mov	ax,6[bp]
40474 A0B4           40                         inc	ax
40475 A0B5           40                         inc	ax
40476 A0B6           8946         06            mov	6[bp],ax
40477                                           !BCC_EOS
40478                                           ! 9052         outw(0x01CE, 0x2);
40479                                           ! Debug: list int = const 2 (used reg = )
40480 A0B9           B8                   0002  mov	ax,*2
40481 A0BC           50                         push	ax
40482                                           ! Debug: list int = const $1CE (used reg = )
40483 A0BD           B8                   01CE  mov	ax,#$1CE
40484 A0C0           50                         push	ax
40485                                           ! Debug: func () void = outw+0 (used reg = )
40486 A0C1           E8         DCF2            call	_outw
40487 A0C4           83C4                   04  add	sp,*4
40488                                           !BCC_EOS
40489                                           ! 9053         outw(0x01CF, read_word(ES, BX));
40490                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40491 A0C7           FF76         06            push	6[bp]
40492                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40493 A0CA           FF76         04            push	4[bp]
40494                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40495 A0CD           E8         DC7D            call	_read_word
40496 A0D0           83C4                   04  add	sp,*4
40497                                           ! Debug: list unsigned short = ax+0 (used reg = )
40498 A0D3           50                         push	ax
40499                                           ! Debug: list int = const $1CF (used reg = )
40500 A0D4           B8                   01CF  mov	ax,#$1CF
40501 A0D7           50                         push	ax
40502                                           ! Debug: func () void = outw+0 (used reg = )
40503 A0D8           E8         DCDB            call	_outw
40504 A0DB           83C4                   04  add	sp,*4
40505                                           !BCC_EOS
40506                                           ! 9054         BX += 2;
40507                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40508 A0DE           8B46         06            mov	ax,6[bp]
40509 A0E1           40                         inc	ax
40510 A0E2           40                         inc	ax
40511 A0E3           8946         06            mov	6[bp],ax
40512                                           !BCC_EOS
40513                                           ! 9055         outw(0x01CE, 0x3);
40514                                           ! Debug: list int = const 3 (used reg = )
40515 A0E6           B8                   0003  mov	ax,*3
40516 A0E9           50                         push	ax
40517                                           ! Debug: list int = const $1CE (used reg = )
40518 A0EA           B8                   01CE  mov	ax,#$1CE
40519 A0ED           50                         push	ax
40520                                           ! Debug: func () void = outw+0 (used reg = )
40521 A0EE           E8         DCC5            call	_outw
40522 A0F1           83C4                   04  add	sp,*4
40523                                           !BCC_EOS
40524                                           ! 9056         outw(0x01CF, read_word(ES, BX));
40525                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40526 A0F4           FF76         06            push	6[bp]
40527                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40528 A0F7           FF76         04            push	4[bp]
40529                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40530 A0FA           E8         DC50            call	_read_word
40531 A0FD           83C4                   04  add	sp,*4
40532                                           ! Debug: list unsigned short = ax+0 (used reg = )
40533 A100           50                         push	ax
40534                                           ! Debug: list int = const $1CF (used reg = )
40535 A101           B8                   01CF  mov	ax,#$1CF
40536 A104           50                         push	ax
40537                                           ! Debug: func () void = outw+0 (used reg = )
40538 A105           E8         DCAE            call	_outw
40539 A108           83C4                   04  add	sp,*4
40540                                           !BCC_EOS
40541                                           ! 9057         BX += 2;
40542                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40543 A10B           8B46         06            mov	ax,6[bp]
40544 A10E           40                         inc	ax
40545 A10F           40                         inc	ax
40546 A110           8946         06            mov	6[bp],ax
40547                                           !BCC_EOS
40548                                           ! 9058         outw(0x01CE,0x4);
40549                                           ! Debug: list int = const 4 (used reg = )
40550 A113           B8                   0004  mov	ax,*4
40551 A116           50                         push	ax
40552                                           ! Debug: list int = const $1CE (used reg = )
40553 A117           B8                   01CE  mov	ax,#$1CE
40554 A11A           50                         push	ax
40555                                           ! Debug: func () void = outw+0 (used reg = )
40556 A11B           E8         DC98            call	_outw
40557 A11E           83C4                   04  add	sp,*4
40558                                           !BCC_EOS
40559                                           ! 9059         outw(0x01CF, enable);
40560                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40561 A121           FF76         FE            push	-2[bp]
40562                                           ! Debug: list int = const $1CF (used reg = )
40563 A124           B8                   01CF  mov	ax,#$1CF
40564 A127           50                         push	ax
40565                                           ! Debug: func () void = outw+0 (used reg = )
40566 A128           E8         DC8B            call	_outw
40567 A12B           83C4                   04  add	sp,*4
40568                                           !BCC_EOS
40569                                           ! 9060         for(i = 0x5; i <= 0x9; i++) {
40570                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
40571 A12E           B8                   0005  mov	ax,*5
40572 A131           8946         FC            mov	-4[bp],ax
40573                                           !BCC_EOS
40574                                           !BCC_EOS
40575 A134           EB           33            jmp .323
40576                       0000A136            .324:
40577                                           ! 9061             outw(0x01CE, i);
40578                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
40579 A136           FF76         FC            push	-4[bp]
40580                                           ! Debug: list int = const $1CE (used reg = )
40581 A139           B8                   01CE  mov	ax,#$1CE
40582 A13C           50                         push	ax
40583                                           ! Debug: func () void = outw+0 (used reg = )
40584 A13D           E8         DC76            call	_outw
40585 A140           83C4                   04  add	sp,*4
40586                                           !BCC_EOS
40587                                           ! 9062             outw(0x01CF, read_word(ES, BX));
40588                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40589 A143           FF76         06            push	6[bp]
40590                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40591 A146           FF76         04            push	4[bp]
40592                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40593 A149           E8         DC01            call	_read_word
40594 A14C           83C4                   04  add	sp,*4
40595                                           ! Debug: list unsigned short = ax+0 (used reg = )
40596 A14F           50                         push	ax
40597                                           ! Debug: list int = const $1CF (used reg = )
40598 A150           B8                   01CF  mov	ax,#$1CF
40599 A153           50                         push	ax
40600                                           ! Debug: func () void = outw+0 (used reg = )
40601 A154           E8         DC5F            call	_outw
40602 A157           83C4                   04  add	sp,*4
40603                                           !BCC_EOS
40604                                           ! 9063             BX += 2;
40605                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40606 A15A           8B46         06            mov	ax,6[bp]
40607 A15D           40                         inc	ax
40608 A15E           40                         inc	ax
40609 A15F           8946         06            mov	6[bp],ax
40610                                           !BCC_EOS
40611                                           ! 9064         }
40612                                           ! 9065     }
40613                       0000A162            .322:
40614                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
40615 A162           8B46         FC            mov	ax,-4[bp]
40616 A165           40                         inc	ax
40617 A166           8946         FC            mov	-4[bp],ax
40618                       0000A169            .323:
40619                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
40620 A169           8B46         FC            mov	ax,-4[bp]
40621 A16C           3D                   0009  cmp	ax,*9
40622 A16F           76           C5            jbe	.324
40623                       0000A171            .325:
40624                       0000A171            .321:
40625                                           ! 9066 }
40626                       0000A171            .320:
40627 A171           89EC                       mov	sp,bp
40628 A173           5D                         pop	bp
40629 A174           C3                         ret
40630                                           ! 9067 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
40631                                           ! 9068 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
40632                                           export	_vbe_biosfn_save_restore_state
40633                       0000A175            _vbe_biosfn_save_restore_state:
40634                                           !BCC_EOS
40635                                           !BCC_EOS
40636                                           !BCC_EOS
40637                                           !BCC_EOS
40638                                           !BCC_EOS
40639                                           ! 9069 {
40640                                           ! 9070     Bit16u ss=get_SS();
40641 A175           55                         push	bp
40642 A176           89E5                       mov	bp,sp
40643 A178           4C                         dec	sp
40644 A179           4C                         dec	sp
40645                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
40646 A17A           E8         DC49            call	_get_SS
40647                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
40648 A17D           8946         FE            mov	-2[bp],ax
40649                                           !BCC_EOS
40650                                           ! 9071     Bit16u result, val;
40651                                           !BCC_EOS
40652                                           ! 9072     result = 0x4f;
40653 A180           83C4                   FC  add	sp,*-4
40654                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
40655 A183           B8                   004F  mov	ax,*$4F
40656 A186           8946         FC            mov	-4[bp],ax
40657                                           !BCC_EOS
40658                                           ! 9073     switch(( DX & 0x00ff )) {
40659                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
40660 A189           8A46         08            mov	al,8[bp]
40661 A18C           E9         00D0            br 	.328
40662                                           ! 9074     case 0x00:
40663                                           ! 9075         val = biosfn_read_video_state_size2(CX);
40664                       0000A18F            .329:
40665                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
40666 A18F           FF76         06            push	6[bp]
40667                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
40668 A192           E8         CEA6            call	_biosfn_read_video_state_size2
40669 A195           44                         inc	sp
40670 A196           44                         inc	sp
40671                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40672 A197           8946         FA            mov	-6[bp],ax
40673                                           !BCC_EOS
40674                                           ! 9076         printf("VGA state size=%x\n", val);
40675                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40676 A19A           FF76         FA            push	-6[bp]
40677                                           ! Debug: list * char = .32A+0 (used reg = )
40678 A19D           BB                   A3C7  mov	bx,#.32A
40679 A1A0           53                         push	bx
40680                                           ! Debug: func () void = printf+0 (used reg = )
40681 A1A1           E8         DC41            call	_printf
40682 A1A4           83C4                   04  add	sp,*4
40683                                           !BCC_EOS
40684                                           ! 9077         if (CX & 8)
40685                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40686 A1A7           8A46         06            mov	al,6[bp]
40687 A1AA           24                     08  and	al,*8
40688 A1AC           84C0                       test	al,al
40689 A1AE           74           09            je  	.32B
40690                       0000A1B0            .32C:
40691                                           ! 9078             val += vbe_biosfn_read_video_state_size();
40692                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
40693 A1B0           E8         FDFB            call	_vbe_biosfn_read_video_state_size
40694                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40695 A1B3           0346         FA            add	ax,-6[bp]
40696 A1B6           8946         FA            mov	-6[bp],ax
40697                                           !BCC_EOS
40698                                           ! 9079         write_word(ss, BX, val);
40699                       0000A1B9            .32B:
40700                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40701 A1B9           FF76         FA            push	-6[bp]
40702                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
40703 A1BC           FF76         0C            push	$C[bp]
40704                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
40705 A1BF           FF76         FE            push	-2[bp]
40706                                           ! Debug: func () void = write_word+0 (used reg = )
40707 A1C2           E8         DBB3            call	_write_word
40708 A1C5           83C4                   06  add	sp,*6
40709                                           !BCC_EOS
40710                                           ! 9080         break;
40711 A1C8           E9         00A6            br 	.326
40712                                           !BCC_EOS
40713                                           ! 9081     case 0x01:
40714                                           ! 9082         val = read_word(ss, BX);
40715                       0000A1CB            .32D:
40716                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
40717 A1CB           FF76         0C            push	$C[bp]
40718                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
40719 A1CE           FF76         FE            push	-2[bp]
40720                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40721 A1D1           E8         DB79            call	_read_word
40722 A1D4           83C4                   04  add	sp,*4
40723                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40724 A1D7           8946         FA            mov	-6[bp],ax
40725                                           !BCC_EOS
40726                                           ! 9083         val = biosfn_save_video_state(CX, ES, val);
40727                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40728 A1DA           FF76         FA            push	-6[bp]
40729                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40730 A1DD           FF76         0A            push	$A[bp]
40731                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
40732 A1E0           FF76         06            push	6[bp]
40733                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
40734 A1E3           E8         CEC0            call	_biosfn_save_video_state
40735 A1E6           83C4                   06  add	sp,*6
40736                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40737 A1E9           8946         FA            mov	-6[bp],ax
40738                                           !BCC_EOS
40739                                           ! 9084         printf("VGA save_state offset=%x\n", val);
40740                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40741 A1EC           FF76         FA            push	-6[bp]
40742                                           ! Debug: list * char = .32E+0 (used reg = )
40743 A1EF           BB                   A3AD  mov	bx,#.32E
40744 A1F2           53                         push	bx
40745                                           ! Debug: func () void = printf+0 (used reg = )
40746 A1F3           E8         DBEF            call	_printf
40747 A1F6           83C4                   04  add	sp,*4
40748                                           !BCC_EOS
40749                                           ! 9085         if (CX & 8)
40750                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40751 A1F9           8A46         06            mov	al,6[bp]
40752 A1FC           24                     08  and	al,*8
40753 A1FE           84C0                       test	al,al
40754 A200           74           0C            je  	.32F
40755                       0000A202            .330:
40756                                           ! 9086             vbe_biosfn_save_video_state(ES, val);
40757                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40758 A202           FF76         FA            push	-6[bp]
40759                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40760 A205           FF76         0A            push	$A[bp]
40761                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
40762 A208           E8         FDAB            call	_vbe_biosfn_save_video_state
40763 A20B           83C4                   04  add	sp,*4
40764                                           !BCC_EOS
40765                                           ! 9087         break;
40766                       0000A20E            .32F:
40767 A20E           EB           61            jmp .326
40768                                           !BCC_EOS
40769                                           ! 9088     case 0x02:
40770                                           ! 9089         val = read_word(ss, BX);
40771                       0000A210            .331:
40772                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
40773 A210           FF76         0C            push	$C[bp]
40774                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
40775 A213           FF76         FE            push	-2[bp]
40776                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40777 A216           E8         DB34            call	_read_word
40778 A219           83C4                   04  add	sp,*4
40779                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40780 A21C           8946         FA            mov	-6[bp],ax
40781                                           !BCC_EOS
40782                                           ! 9090         val = biosfn_restore_video_state(CX, ES, val);
40783                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40784 A21F           FF76         FA            push	-6[bp]
40785                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40786 A222           FF76         0A            push	$A[bp]
40787                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
40788 A225           FF76         06            push	6[bp]
40789                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
40790 A228           E8         D445            call	_biosfn_restore_video_state
40791 A22B           83C4                   06  add	sp,*6
40792                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40793 A22E           8946         FA            mov	-6[bp],ax
40794                                           !BCC_EOS
40795                                           ! 9091         printf("VGA restore_state offset=%x\n", val);
40796                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40797 A231           FF76         FA            push	-6[bp]
40798                                           ! Debug: list * char = .332+0 (used reg = )
40799 A234           BB                   A390  mov	bx,#.332
40800 A237           53                         push	bx
40801                                           ! Debug: func () void = printf+0 (used reg = )
40802 A238           E8         DBAA            call	_printf
40803 A23B           83C4                   04  add	sp,*4
40804                                           !BCC_EOS
40805                                           ! 9092         if (CX & 8)
40806                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40807 A23E           8A46         06            mov	al,6[bp]
40808 A241           24                     08  and	al,*8
40809 A243           84C0                       test	al,al
40810 A245           74           0C            je  	.333
40811                       0000A247            .334:
40812                                           ! 9093             vbe_biosfn_restore_video_state(ES, val);
40813                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40814 A247           FF76         FA            push	-6[bp]
40815                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40816 A24A           FF76         0A            push	$A[bp]
40817                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
40818 A24D           E8         FDF8            call	_vbe_biosfn_restore_video_state
40819 A250           83C4                   04  add	sp,*4
40820                                           !BCC_EOS
40821                                           ! 9094         break;
40822                       0000A253            .333:
40823 A253           EB           1C            jmp .326
40824                                           !BCC_EOS
40825                                           ! 9095     default:
40826                                           ! 9096         result = 0x100;
40827                       0000A255            .335:
40828                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
40829 A255           B8                   0100  mov	ax,#$100
40830 A258           8946         FC            mov	-4[bp],ax
40831                                           !BCC_EOS
40832                                           ! 9097         break;
40833 A25B           EB           14            jmp .326
40834                                           !BCC_EOS
40835                                           ! 9098     }
40836                                           ! 9099     write_word(ss, AX, result);
40837 A25D           EB           12            jmp .326
40838                       0000A25F            .328:
40839 A25F           2C                     00  sub	al,*0
40840 A261         0F84         FF2A            beq 	.329
40841 A265           2C                     01  sub	al,*1
40842 A267         0F84         FF60            beq 	.32D
40843 A26B           2C                     01  sub	al,*1
40844 A26D           74           A1            je 	.331
40845 A26F           EB           E4            jmp	.335
40846                       0000A271            .326:
40847                       FFFFFFF8            ..FFF4	=	-8
40848                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
40849 A271           FF76         FC            push	-4[bp]
40850                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
40851 A274           FF76         04            push	4[bp]
40852                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
40853 A277           FF76         FE            push	-2[bp]
40854                                           ! Debug: func () void = write_word+0 (used reg = )
40855 A27A           E8         DAFB            call	_write_word
40856 A27D           83C4                   06  add	sp,*6
40857                                           !BCC_EOS
40858                                           ! 9100 }
40859 A280           89EC                       mov	sp,bp
40860 A282           5D                         pop	bp
40861 A283           C3                         ret
40862                                           ! 9101 #asm
40863                                           !BCC_ASM
40864                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40865                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40866                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40867                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40868                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40869                       0000A284            vbe_biosfn_display_window_control:
40870 A284           80FB                   00    cmp bl, #0x00
40871 A287           75           24              jne vbe_05_failed
40872 A289           80FF                   01    cmp bh, #0x01
40873 A28C           74           16              je get_display_window
40874 A28E           72           04              jb set_display_window
40875 A290           B8                   0100    mov ax, #0x0100
40876 A293           C3                           ret
40877                       0000A294            set_display_window:
40878 A294           89D0                         mov ax, dx
40879 A296           E8         F4F0              call _dispi_set_bank
40880 A299           E8         F4FD              call dispi_get_bank
40881 A29C           39D0                         cmp ax, dx
40882 A29E           75           0D              jne vbe_05_failed
40883 A2A0           B8                   004F    mov ax, #0x004f
40884 A2A3           C3                           ret
40885                       0000A2A4            get_display_window:
40886 A2A4           E8         F4F2              call dispi_get_bank
40887 A2A7           89C2                         mov dx, ax
40888 A2A9           B8                   004F    mov ax, #0x004f
40889 A2AC           C3                           ret
40890                       0000A2AD            vbe_05_failed:
40891 A2AD           B8                   014F    mov ax, #0x014f
40892 A2B0           C3                           ret
40893                                           ! 9126 endasm
40894                                           !BCC_ENDASM
40895                                           ! 9127 #asm
40896                                           !BCC_ASM
40897                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40898                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40899                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40900                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40901                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40902                       0000A2B1            vbe_biosfn_set_get_logical_scan_line_length:
40903 A2B1           89C8                         mov ax, cx
40904 A2B3           80FB                   01    cmp bl, #0x01
40905 A2B6           74           24              je get_logical_scan_line_length
40906 A2B8           80FB                   02    cmp bl, #0x02
40907 A2BB           74           06              je set_logical_scan_line_bytes
40908 A2BD           72           1A              jb set_logical_scan_line_pixels
40909 A2BF           B8                   0100    mov ax, #0x0100
40910 A2C2           C3                           ret
40911                       0000A2C3            set_logical_scan_line_bytes:
40912 A2C3           50                           push ax
40913 A2C4           E8         F447              call dispi_get_bpp
40914 A2C7           30FF                         xor bh, bh
40915 A2C9           88E3                         mov bl, ah
40916 A2CB           08DB                         or bl, bl
40917 A2CD           75           05              jnz no_4bpp_1
40918 A2CF           C1E0                   03    shl ax, #3
40919 A2D2           B3                     01    mov bl, #1
40920                       0000A2D4            no_4bpp_1:
40921 A2D4           31D2                         xor dx, dx
40922 A2D6           58                           pop ax
40923 A2D7           F7F3                         div bx
40924                       0000A2D9            set_logical_scan_line_pixels:
40925 A2D9           E8         F55B              call dispi_set_virt_width
40926                       0000A2DC            get_logical_scan_line_length:
40927 A2DC           E8         F42F              call dispi_get_bpp
40928 A2DF           30FF                         xor bh, bh
40929 A2E1           88E3                         mov bl, ah
40930 A2E3           E8         F564              call dispi_get_virt_width
40931 A2E6           89C1                         mov cx, ax
40932 A2E8           08DB                         or bl, bl
40933 A2EA           75           05              jnz no_4bpp_2
40934 A2EC           C1E8                   03    shr ax, #3
40935 A2EF           B3                     01    mov bl, #1
40936                       0000A2F1            no_4bpp_2:
40937 A2F1           F7E3                         mul bx
40938 A2F3           89C3                         mov bx, ax
40939 A2F5           E8         F560              call dispi_get_virt_height
40940 A2F8           89C2                         mov dx, ax
40941 A2FA           B8                   004F    mov ax, #0x004f
40942 A2FD           C3                           ret
40943                                           ! 9169 endasm
40944                                           !BCC_ENDASM
40945                                           ! 9170 #asm
40946                                           !BCC_ASM
40947                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40948                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40949                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40950                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40951                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40952                       0000A2FE            vbe_biosfn_set_get_display_start:
40953 A2FE           80FB                   80    cmp bl, #0x80
40954 A301           74           0B              je set_display_start
40955 A303           80FB                   01    cmp bl, #0x01
40956 A306           74           14              je get_display_start
40957 A308           72           04              jb set_display_start
40958 A30A           B8                   0100    mov ax, #0x0100
40959 A30D           C3                           ret
40960                       0000A30E            set_display_start:
40961 A30E           89C8                         mov ax, cx
40962 A310           E8         F4CB              call dispi_set_x_offset
40963 A313           89D0                         mov ax, dx
40964 A315           E8         F4E4              call dispi_set_y_offset
40965 A318           B8                   004F    mov ax, #0x004f
40966 A31B           C3                           ret
40967                       0000A31C            get_display_start:
40968 A31C           E8         F4CF              call dispi_get_x_offset
40969 A31F           89C1                         mov cx, ax
40970 A321           E8         F4E8              call dispi_get_y_offset
40971 A324           89C2                         mov dx, ax
40972 A326           30FF                         xor bh, bh
40973 A328           B8                   004F    mov ax, #0x004f
40974 A32B           C3                           ret
40975                                           ! 9194 endasm
40976                                           !BCC_ENDASM
40977                                           ! 9195 #asm
40978                                           !BCC_ASM
40979                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40980                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40981                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40982                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40983                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40984                       0000A32C            vbe_biosfn_set_get_dac_palette_format:
40985 A32C           80FB                   01    cmp bl, #0x01
40986 A32F           74           1E              je get_dac_palette_format
40987 A331           72           04              jb set_dac_palette_format
40988 A333           B8                   0100    mov ax, #0x0100
40989 A336           C3                           ret
40990                       0000A337            set_dac_palette_format:
40991 A337           E8         F441              call dispi_get_enable
40992 A33A           80FF                   06    cmp bh, #0x06
40993 A33D           74           0A              je set_normal_dac
40994 A33F           80FF                   08    cmp bh, #0x08
40995 A342           75           1B              jne vbe_08_unsupported
40996 A344           0D                   0020    or ax, # 0x20
40997 A347           75           03              jnz set_dac_mode
40998                       0000A349            set_normal_dac:
40999 A349           25                   FFDF    and ax, #~ 0x20
41000                       0000A34C            set_dac_mode:
41001 A34C           E8         F41C              call _dispi_set_enable
41002                       0000A34F            get_dac_palette_format:
41003 A34F           B7                     06    mov bh, #0x06
41004 A351           E8         F427              call dispi_get_enable
41005 A354           25                   0020    and ax, # 0x20
41006 A357           74           02              jz vbe_08_ok
41007 A359           B7                     08    mov bh, #0x08
41008                       0000A35B            vbe_08_ok:
41009 A35B           B8                   004F    mov ax, #0x004f
41010 A35E           C3                           ret
41011                       0000A35F            vbe_08_unsupported:
41012 A35F           B8                   014F    mov ax, #0x014f
41013 A362           C3                           ret
41014                                           ! 9226 endasm
41015                                           !BCC_ENDASM
41016                                           ! 9227 void vbe_biosfn_set_get_palette_data(AX)
41017                                           ! Register BX used in function vbe_biosfn_save_restore_state
41018                                           ! 9228 {
41019                                           export	_vbe_biosfn_set_get_palette_data
41020                       0000A363            _vbe_biosfn_set_get_palette_data:
41021                                           ! 9229 }
41022 A363           C3                         ret
41023                                           ! 9230 #asm
41024                                           !BCC_ASM
41025                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
41026                       0000A364            vbe_biosfn_return_protected_mode_interface:
41027 A364           84DB                         test bl, bl
41028 A366           75           11              jnz _fail
41029 A368           BF                   C000    mov di, #0xc000
41030 A36B           8EC7                         mov es, di
41031 A36D           BF                   959C    mov di, # vesa_pm_start
41032 A370           B9                   969D    mov cx, # vesa_pm_end
41033 A373           29F9                         sub cx, di
41034 A375           B8                   004F    mov ax, #0x004f
41035 A378           C3                           ret
41036                       0000A379            _fail:
41037 A379           B8                   014F    mov ax, #0x014f
41038 A37C           C3                           ret
41039                                           ! 9244 endasm
41040                                           !BCC_ENDASM
41041                                           ! 9245 #asm
41042                                           !BCC_ASM
41043                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
41044                                           ;; DATA_SEG_DEFS_HERE
41045                                           ! 9247 endasm
41046                                           !BCC_ENDASM
41047                                           ! 9248 #asm
41048                                           !BCC_ASM
41049                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
41050 A37D                        76            .ascii "vgabios ends here"
41051 A38E                        00            .byte 0x00
41052                       0000A38F            vgabios_end:
41053 A38F                        CB            .byte 0xCB
41054                                           ;; BLOCK_STRINGS_BEGIN
41055                                           ! 9254 endasm
41056                                           !BCC_ENDASM
41057                                           ! 9255 
41058                                           
41059                       0000A390            .332:
41060                       0000A390            .336:
41061 A390                        56            .ascii	"VGA restore_state offset=%x"
41062 A3AB                        0A            .byte	$A
41063 A3AC                        00            .byte	0
41064                       0000A3AD            .32E:
41065                       0000A3AD            .337:
41066 A3AD                        56            .ascii	"VGA save_state offset=%x"
41067 A3C5                        0A            .byte	$A
41068 A3C6                        00            .byte	0
41069                       0000A3C7            .32A:
41070                       0000A3C7            .338:
41071 A3C7                        56            .ascii	"VGA state size=%x"
41072 A3D8                        0A            .byte	$A
41073 A3D9                        00            .byte	0
41074                       0000A3DA            .312:
41075                       0000A3DA            .339:
41076 A3DA                        56            .ascii	"VBE *NOT* found mode %x"
41077 A3F1                        0A            .byte	$A
41078 A3F2                        00            .byte	0
41079                       0000A3F3            .30E:
41080                       0000A3F3            .33A:
41081 A3F3                        09            .byte	9
41082 A3F4                        78            .ascii	"xres%x yres%x bpp%x"
41083 A407                        0A            .byte	$A
41084 A408                        00            .byte	0
41085                       0000A409            .30D:
41086                       0000A409            .33B:
41087 A409                        56            .ascii	"VBE found mode %x, setting:"
41088 A424                        0A            .byte	$A
41089 A425                        00            .byte	0
41090                       0000A426            .2FE:
41091                       0000A426            .33C:
41092 A426                        56            .ascii	"VBE *NOT* found mode %x"
41093 A43D                        0A            .byte	$A
41094 A43E                        00            .byte	0
41095                       0000A43F            .2F6:
41096                       0000A43F            .33D:
41097 A43F                        56            .ascii	"VBE found mode %x"
41098 A450                        0A            .byte	$A
41099 A451                        00            .byte	0
41100                       0000A452            .2F1:
41101                       0000A452            .33E:
41102 A452                        56            .ascii	"VBE vbe_biosfn_return_mode_information E"
41103 A47A                        53            .ascii	"S%x DI%x CX%x"
41104 A487                        0A            .byte	$A
41105 A488                        00            .byte	0
41106                       0000A489            .2EF:
41107                       0000A489            .33F:
41108 A489                        56            .ascii	"VBE mode %x (xres=%x / bpp=%02x) not sup"
41109 A4B1                        70            .ascii	"ported "
41110 A4B8                        0A            .byte	$A
41111 A4B9                        00            .byte	0
41112                       0000A4BA            .2ED:
41113                       0000A4BA            .340:
41114 A4BA                        56            .ascii	"VBE found mode %x => %x"
41115 A4D1                        0A            .byte	$A
41116 A4D2                        00            .byte	0
41117                       0000A4D3            .2E2:
41118                       0000A4D3            .341:
41119 A4D3                        56            .ascii	"VBE correct VESA/VBE2 signature found"
41120 A4F8                        0A            .byte	$A
41121 A4F9                        00            .byte	0
41122                       0000A4FA            .2D8:
41123                       0000A4FA            .342:
41124 A4FA                        56            .ascii	"VBE vbe_biosfn_return_vbe_info ES%x DI%x"
41125 A522                        20            .ascii	" AX%x"
41126 A527                        0A            .byte	$A
41127 A528                        00            .byte	0
41128                       0000A529            .2B0:
41129                       0000A529            .343:
41130 A529                        2D            .ascii	"--> Unknown int10"
41131 A53A                        0A            .byte	$A
41132 A53B                        00            .byte	0
41133                       0000A53C            .2AF:
41134                       0000A53C            .344:
41135 A53C                        2D            .ascii	"--> Unimplemented"
41136 A54D                        0A            .byte	$A
41137 A54E                        00            .byte	0
41138                       0000A54F            .249:
41139                       0000A54F            .345:
41140 A54F                        47            .ascii	"Get font info BH(%02x) was discarded"
41141 A573                        0A            .byte	$A
41142 A574                        00            .byte	0
41143                       0000A575            .147:
41144                       0000A575            .346:
41145 A575                        53            .ascii	"Scroll in graphics mode "
41146 A58D                        00            .byte	0
41147                       0000A58E            .E2:
41148                       0000A58E            .347:
41149 A58E                        53            .ascii	"Scroll, address %04x (%04x %04x %02x)"
41150 A5B3                        0A            .byte	$A
41151 A5B4                        00            .byte	0
41152                       0000A5B5            .B7:
41153                       0000A5B5            .348:
41154 A5B5                        53            .ascii	"Set active page %02x address %04x"
41155 A5D6                        0A            .byte	$A
41156 A5D7                        00            .byte	0
41157                       0000A5D8            .5E:
41158                       0000A5D8            .349:
41159 A5D8                        6D            .ascii	"mode search %02x found line %02x"
41160 A5F8                        0A            .byte	$A
41161 A5F9                        00            .byte	0
41162                       0000A5FA            .3:
41163                       0000A5FA            .34A:
41164 A5FA                        76            .ascii	"vgabios call ah%02x al%02x bx%04x cx%04x"
41165 A622                        20            .ascii	" dx%04x"
41166 A629                        0A            .byte	$A
41167 A62A                        00            .byte	0
41168 A62B                                      .bss
41169                                           
41170                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3660 A   .10                         0 368D A   
.100                        0 4CD2 A   .101                        0 50B9 A   
.102                        0 50B9 A   .104                        0 50A5 A   
.105                        0 4D07 A   .106                        0 4D07 A   
.107                        0 4D99 A   .108                        0 4D44 A   
.109                        0 4D32 A   .10A                        0 4D20 A   
.10B                        0 4D19 A   .10C                        0 4D10 A   
.10D                        0 4EBB A   .10E                        0 4E2C A   
.10F                        0 4DA2 A   .11                         0 368D A   
.110                        0 4E29 A   .111                        0 4E18 A   
.112                        0 4E1F A   .113                        0 4DAC A   
.114                        0 4DF0 A   .115                        0 4DCA A   
.116                        0 4DC3 A   .117                        0 4E18 A   
.118                        0 4E29 A   .119                        0 4EBB A   
.11A                        0 4EBB A   .11B                        0 4EA8 A   
.11C                        0 4EAF A   .11D                        0 4E37 A   
.11E                        0 4E74 A   .11F                        0 4E4E A   
.12                         0 368D A   .120                        0 4E47 A   
.121                        0 4E9C A   .122                        0 4EA8 A   
.123                        0 4EA6 A   .124                        0 4EBB A   
.125                        0 4EBE A   .126                        0 4F51 A   
.127                        0 4F0C A   .128                        0 4EFA A   
.129                        0 4EE8 A   .12A                        0 4EE1 A   
.12B                        0 4EDA A   .12C                        0 5095 A   
.12D                        0 4F74 A   .12E                        0 4F58 A   
.12F                        0 5007 A   .13                         0 3699 A   
.130                        0 4F7D A   .131                        0 5004 A   
.132                        0 4FF3 A   .133                        0 4FFA A   
.134                        0 4F87 A   .135                        0 4FCB A   
.136                        0 4FA5 A   .137                        0 4F9E A   
.138                        0 4FF3 A   .139                        0 5004 A   
.13A                        0 5095 A   .13B                        0 5095 A   
.13C                        0 5082 A   .13D                        0 5089 A   
.13E                        0 5011 A   .13F                        0 504E A   
.14                         0 36C8 A   .140                        0 5028 A   
.141                        0 5021 A   .142                        0 5076 A   
.143                        0 5082 A   .144                        0 5080 A   
.145                        0 5095 A   .146                        0 5097 A   
.147                        0 A575 A   .148                        0 50F5 A   
.149                        0 50F1 A   .14A                        0 51B4 A   
.14B                        0 5156 A   .14C                        0 51B7 A   
.14D                        0 51E8 A   .14F                        0 51DE A   
.15                         0 36B8 A   .150                        0 51C6 A   
.151                        0 51CE A   .152                        0 51D6 A   
.153                        0 5255 A   .154                        0 5245 A   
.155                        0 5263 A   .156                        0 531B A   
.157                        0 530A A   .158                        0 5311 A   
.159                        0 526B A   .15A                        0 530A A   
.15B                        0 52FA A   .15C                        0 5301 A   
.15D                        0 5288 A   .15E                        0 52EA A   
.15F                        0 52D3 A   .16                         0 36CD A   
.160                        0 52FA A   .161                        0 530A A   
.162                        0 531B A   .163                        0 552D A   
.164                        0 551D A   .165                        0 5524 A   
.166                        0 5371 A   .167                        0 5395 A   
.168                        0 538C A   .169                        0 5456 A   
.16A                        0 53A3 A   .16B                        0 53BE A   
.16C                        0 53AC A   .16D                        0 53C3 A   
.16E                        0 5440 A   .16F                        0 5432 A   
.17                         0 36E4 A   .170                        0 5439 A   
.171                        0 53CA A   .172                        0 5428 A   
.173                        0 53E1 A   .174                        0 540A A   
.175                        0 53EA A   .176                        0 5428 A   
.177                        0 5440 A   .178                        0 551D A   
.179                        0 551D A   .17A                        0 5514 A   
.17B                        0 5459 A   .17C                        0 5474 A   
.17D                        0 5462 A   .17E                        0 5479 A   
.17F                        0 54FA A   .18                         0 36F8 A   
.180                        0 54EC A   .181                        0 54F3 A   
.182                        0 5480 A   .183                        0 54E2 A   
.184                        0 5497 A   .185                        0 54C2 A   
.186                        0 54A0 A   .187                        0 54E2 A   
.188                        0 54FA A   .189                        0 551D A   
.18A                        0 552D A   .18B                        0 5601 A   
.18C                        0 55F1 A   .18D                        0 55F8 A   
.18E                        0 5577 A   .18F                        0 55F1 A   
.19                         0 3711 A   .190                        0 55E3 A   
.191                        0 55EA A   .192                        0 559D A   
.193                        0 55BF A   .194                        0 55B9 A   
.195                        0 55F1 A   .196                        0 5601 A   
.197                        0 5635 A   .198                        0 5631 A   
.199                        0 5700 A   .19A                        0 5696 A   
.19B                        0 57F8 A   .19C                        0 57F8 A   
.19D                        0 57E0 A   .19E                        0 5735 A   
.19F                        0 57D9 A   .1A                         0 372B A   
.1A1                        0 57C3 A   .1A2                        0 5749 A   
.1A3                        0 5749 A   .1A4                        0 5772 A   
.1A5                        0 579B A   .1A6                        0 57BE A   
.1A7                        0 57F8 A   .1A8                        0 57EC A   
.1A9                        0 582C A   .1AA                        0 5828 A   
.1AB                        0 58FB A   .1AC                        0 588D A   
.1AD                        0 58F8 A   .1AE                        0 58EC A   
.1AF                        0 58C3 A   .1B                         0 3739 A   
.1B0                        0 58F8 A   .1B1                        0 59F3 A   
.1B2                        0 59F3 A   .1B3                        0 59DB A   
.1B4                        0 5930 A   .1B5                        0 59D4 A   
.1B7                        0 59BE A   .1B8                        0 5944 A   
.1B9                        0 5944 A   .1BA                        0 596D A   
.1BB                        0 5996 A   .1BC                        0 59B9 A   
.1BD                        0 59F3 A   .1BE                        0 59E7 A   
.1BF                        0 5AA2 A   .1C                         0 3774 A   
.1C0                        0 5A9E A   .1C1                        0 5ABC A   
.1C2                        0 5AB8 A   .1C3                        0 5D0F A   
.1C5                        0 5CF7 A   .1C6                        0 5AD1 A   
.1C7                        0 5AD1 A   .1C8                        0 5B52 A   
.1C9                        0 5B44 A   .1CA                        0 5B77 A   
.1CB                        0 5BA9 A   .1CC                        0 5B8D A   
.1CD                        0 5BC3 A   .1CE                        0 5BD5 A   
.1CF                        0 5BCC A   .1D                         0 37AE A   
.1D0                        0 5C41 A   .1D1                        0 5BFB A   
.1D2                        0 5C81 A   .1D3                        0 5C95 A   
.1D4                        0 5C8A A   .1D5                        0 5CAB A   
.1D6                        0 5CC0 A   .1D7                        0 5CF2 A   
.1D8                        0 5D49 A   .1D9                        0 5D45 A   
.1DA                        0 5D63 A   .1DB                        0 5D5F A   
.1DC                        0 5EFA A   .1DE                        0 5EE2 A   
.1DF                        0 5D78 A   .1E                         0 37C3 A   
.1E0                        0 5D78 A   .1E1                        0 5E0C A   
.1E2                        0 5DFE A   .1E3                        0 5E05 A   
.1E4                        0 5DBA A   .1E5                        0 5DFE A   
.1E6                        0 5DEA A   .1E7                        0 5E0C A   
.1E8                        0 5E0F A   .1E9                        0 5E3B A   
.1EA                        0 5E32 A   .1EB                        0 5E86 A   
.1EC                        0 5E61 A   .1ED                        0 5EA7 A   
.1EE                        0 5EA9 A   .1EF                        0 5ED8 A   
.1F                         0 37E3 A   .1F0                        0 5F3A A   
.1F1                        0 5F29 A   .1F2                        0 5F64 A   
.1F3                        0 5F60 A   .1F4                        0 61C5 A   
.1F6                        0 61A4 A   .1F7                        0 5FB5 A   
.1F8                        0 5FB8 A   .1F9                        0 5FC6 A   
.1FA                        0 5FBF A   .1FB                        0 5FC9 A   
.1FC                        0 5FD1 A   .1FD                        0 5FDB A   
.1FE                        0 6028 A   .1FF                        0 601D A   
.2                          0 3640 A   .20                         0 3803 A   
.200                        0 5FDB A   .201                        0 6028 A   
.202                        0 602B A   .203                        0 60C5 A   
.204                        0 6043 A   .205                        0 60C2 A   
.206                        0 609F A   .207                        0 619B A   
.208                        0 619B A   .20A                        0 6185 A   
.20B                        0 610B A   .20C                        0 610B A   
.20D                        0 6134 A   .20E                        0 615D A   
.20F                        0 6180 A   .21                         0 3820 A   
.210                        0 61DB A   .211                        0 61CF A   
.212                        0 62B0 A   .213                        0 61E7 A   
.214                        0 6280 A   .215                        0 61FF A   
.216                        0 62A7 A   .217                        0 6660 A   
.218                        0 664F A   .219                        0 6656 A   
.21A                        0 6598 A   .21B                        0 660B A   
.21C                        0 6605 A   .21D                        0 6660 A   
.21E                        0 6741 A   .21F                        0 6731 A   
.22                         0 383B A   .220                        0 6759 A   
.221                        0 689E A   .222                        0 688F A   
.223                        0 6896 A   .224                        0 6852 A   
.225                        0 689E A   .226                        0 68B3 A   
.227                        0 68A8 A   .228                        0 6937 A   
.229                        0 6928 A   .22A                        0 692F A   
.22B                        0 68EE A   .22C                        0 6937 A   
.22D                        0 694A A   .22E                        0 6941 A   
.22F                        0 69C8 A   .23                         0 3858 A   
.230                        0 69B9 A   .231                        0 69C0 A   
.232                        0 6985 A   .233                        0 69C8 A   
.234                        0 69DB A   .235                        0 69D2 A   
.236                        0 6A66 A   .237                        0 6A57 A   
.238                        0 6A5E A   .239                        0 6A23 A   
.23A                        0 6A66 A   .23B                        0 6A79 A   
.23C                        0 6A70 A   .23D                        0 6C2F A   
.23F                        0 6C0A A   .24                         0 3867 A   
.240                        0 6AB6 A   .241                        0 6AED A   
.242                        0 6B24 A   .243                        0 6B47 A   
.244                        0 6B6A A   .245                        0 6B8D A   
.246                        0 6BB0 A   .247                        0 6BD2 A   
.248                        0 6BF4 A   .249                        0 A54F A   
.24A                        0 6C2D A   .24B                        0 6C1D A   
.24C                        0 6DEA A   .24D                        0 6DD8 A   
.24E                        0 6E74 A   .24F                        0 6E68 A   
.25                         0 39A7 A   .250                        0 6E19 A   
.251                        0 6E4C A   .252                        0 6E37 A   
.253                        0 6E74 A   .254                        0 6E8C A   
.255                        0 6E7D A   .256                        0 7057 A   
.257                        0 704E A   .258                        0 7069 A   
.259                        0 7060 A   .25A                        0 707B A   
.25B                        0 7072 A   .25C                        0 732E A   
.25D                        0 70C8 A   .25E                        0 71B3 A   
.25F                        0 71A4 A   .260                        0 71AB A   
.261                        0 7178 A   .262                        0 71B3 A   
.263                        0 7221 A   .264                        0 7212 A   
.265                        0 7219 A   .266                        0 71E6 A   
.267                        0 7221 A   .268                        0 7274 A   
.269                        0 7265 A   .26A                        0 726C A   
.26B                        0 7228 A   .26C                        0 7274 A   
.26D                        0 72BF A   .26E                        0 72B0 A   
.26F                        0 72B7 A   .27                         0 3951 A   
.270                        0 7284 A   .271                        0 72BF A   
.272                        0 75A9 A   .273                        0 7339 A   
.274                        0 74DA A   .275                        0 74CB A   
.276                        0 74D2 A   .277                        0 74A3 A   
.278                        0 74DA A   .279                        0 7669 A   
.27A                        0 75B4 A   .27B                        0 7653 A   
.27C                        0 7644 A   .27D                        0 764B A   
.27E                        0 7625 A   .27F                        0 7653 A   
.28                         0 386D A   .280                        0 792B A   
.281                        0 7681 A   .282                        0 76F0 A   
.283                        0 76E1 A   .284                        0 76E8 A   
.285                        0 76B4 A   .286                        0 76F0 A   
.287                        0 7775 A   .288                        0 7766 A   
.289                        0 776D A   .28A                        0 7731 A   
.28B                        0 775F A   .28C                        0 7739 A   
.28D                        0 7775 A   .28E                        0 7797 A   
.28F                        0 778F A   .29                         0 386D A   
.290                        0 7838 A   .291                        0 7829 A   
.292                        0 7830 A   .293                        0 77F4 A   
.294                        0 7838 A   .295                        0 7891 A   
.296                        0 7882 A   .297                        0 7889 A   
.298                        0 7855 A   .299                        0 7891 A   
.29A                        0 7BA6 A   .29B                        0 7936 A   
.29C                        0 7AD7 A   .29D                        0 7AC8 A   
.29E                        0 7ACF A   .29F                        0 7AA0 A   
.2A                         0 3896 A   .2A0                        0 7AD7 A   
.2A1                        0 7C47 A   .2A2                        0 7BB1 A   
.2A3                        0 7C33 A   .2A4                        0 7C24 A   
.2A5                        0 7C2B A   .2A6                        0 7C04 A   
.2A7                        0 7C33 A   .2A8                        0 7C89 A   
.2A9                        0 7C7B A   .2AA                        0 7C82 A   
.2AB                        0 7C5F A   .2AC                        0 7C7B A   
.2AD                        0 7C73 A   .2AE                        0 7C89 A   
.2AF                        0 A53C A   .2B                         0 3896 A   
.2B0                        0 A529 A   .2B1                        0 7F1E A   
.2B2                        0 7F08 A   .2B3                        0 7E04 A   
.2B4                        0 7E19 A   .2B5                        0 7E0B A   
.2B6                        0 7F01 A   .2B7                        0 7EF1 A   
.2B8                        0 7E22 A   .2B9                        0 7E51 A   
.2BA                        0 7E30 A   .2BB                        0 7E29 A   
.2BC                        0 7EEF A   .2BD                        0 7EEF A   
.2BE                        0 7E5A A   .2BF                        0 7E7E A   
.2C                         0 38AB A   .2C0                        0 7E78 A   
.2C1                        0 7EEA A   .2C2                        0 7EDB A   
.2C3                        0 7EE2 A   .2C4                        0 7E91 A   
.2C5                        0 7EC3 A   .2C6                        0 7EB0 A   
.2C7                        0 7ED4 A   .2C8                        0 7EEA A   
.2C9                        0 7F01 A   .2CA                        0 7F1E A   
.2CB                        0 9998 A   .2CC                        0 998D A   
.2CD                        0 994A A   .2CE                        0 9984 A   
.2CF                        0 9954 A   .2D                         0 38AB A   
.2D0                        0 9964 A   .2D1                        0 995B A   
.2D2                        0 9982 A   .2D3                        0 9979 A   
.2D4                        0 9970 A   .2D5                        0 9982 A   
.2D6                        0 998D A   .2D7                        0 9998 A   
.2D8                        0 A4FA A   .2D9                        0 9ACF A   
.2DA                        0 9ABF A   .2DB                        0 9A9F A   
.2DC                        0 9A97 A   .2DD                        0 9A8F A   
.2DE                        0 9A87 A   .2DF                        0 9AB7 A   
.2E                         0 38C0 A   .2E0                        0 9AAF A   
.2E1                        0 9AA7 A   .2E2                        0 A4D3 A   
.2E3                        0 9B93 A   .2E4                        0 9B48 A   
.2E5                        0 9BAB A   .2E6                        0 9C8D A   
.2E7                        0 9C7F A   .2E8                        0 9BAB A   
.2E9                        0 9C53 A   .2EA                        0 9C13 A   
.2EB                        0 9C09 A   .2EC                        0 9BF2 A   
.2ED                        0 A4BA A   .2EE                        0 9C74 A   
.2EF                        0 A489 A   .2F                         0 38C0 A   
.2F0                        0 9C8D A   .2F1                        0 A452 A   
.2F2                        0 9CF8 A   .2F3                        0 9CFA A   
.2F4                        0 9DC2 A   .2F5                        0 9D29 A   
.2F6                        0 A43F A   .2F7                        0 9D76 A   
.2F8                        0 9D70 A   .2F9                        0 9D9C A   
.2FA                        0 9D8B A   .2FB                        0 9DBA A   
.2FC                        0 9DA6 A   .2FD                        0 9DD5 A   
.2FE                        0 A426 A   .2FF                        0 9DF5 A   
.3                          0 A5FA A   .30                         0 38D5 A   
.300                        0 9DDD A   .301                        0 9E25 A   
.302                        0 9E27 A   .303                        0 9E37 A   
.304                        0 9E33 A   .305                        0 9E39 A   
.306                        0 9E4B A   .307                        0 9E47 A   
.308                        0 9E4D A   .309                        0 9E84 A   
.30A                        0 9E61 A   .30B                        0 9F55 A   
.30C                        0 9EA0 A   .30D                        0 A409 A   
.30E                        0 A3F3 A   .30F                        0 9EE7 A   
.31                         0 38E4 A   .310                        0 9EDE A   
.311                        0 9F76 A   .312                        0 A3DA A   
.313                        0 9F76 A   .314                        0 9F70 A   
.315                        0 9FFA A   .316                        0 9FF6 A   
.317                        0 A044 A   .318                        0 A035 A   
.319                        0 A03C A   .31A                        0 A002 A   
.31B                        0 A035 A   .31C                        0 A00A A   
.31D                        0 A044 A   .31E                        0 A08C A   
.31F                        0 A06E A   .32                         0 3902 A   
.320                        0 A171 A   .321                        0 A171 A   
.322                        0 A162 A   .323                        0 A169 A   
.324                        0 A136 A   .325                        0 A171 A   
.326                        0 A271 A   .328                        0 A25F A   
.329                        0 A18F A   .32A                        0 A3C7 A   
.32B                        0 A1B9 A   .32C                        0 A1B0 A   
.32D                        0 A1CB A   .32E                        0 A3AD A   
.32F                        0 A20E A   .33                         0 3910 A   
.330                        0 A202 A   .331                        0 A210 A   
.332                        0 A390 A   .333                        0 A253 A   
.334                        0 A247 A   .335                        0 A255 A   
.336                        0 A390 A   .337                        0 A3AD A   
.338                        0 A3C7 A   .339                        0 A3DA A   
.33A                        0 A3F3 A   .33B                        0 A409 A   
.33C                        0 A426 A   .33D                        0 A43F A   
.33E                        0 A452 A   .33F                        0 A489 A   
.34                         0 391E A   .340                        0 A4BA A   
.341                        0 A4D3 A   .342                        0 A4FA A   
.343                        0 A529 A   .344                        0 A53C A   
.345                        0 A54F A   .346                        0 A575 A   
.347                        0 A58E A   .348                        0 A5B5 A   
.349                        0 A5D8 A   .34A                        0 A5FA A   
.35                         0 392C A   .36                         0 394C A   
.37                         0 39AA A   .38                         0 39FC A   
.3A                         0 39EE A   .3B                         0 39AF A   
.3C                         0 39B4 A   .3D                         0 39D2 A   
.3E                         0 39E9 A   .3F                         0 39FF A   
.4                          0 3BBA A   .40                         0 3A33 A   
.41                         0 3A4F A   .42                         0 3A98 A   
.44                         0 3A8A A   .45                         0 3A54 A   
.46                         0 3A63 A   .47                         0 3A74 A   
.48                         0 3A85 A   .49                         0 3AA5 A   
.4A                         0 3B57 A   .4B                         0 3AAE A   
.4C                         0 3B55 A   .4E                         0 3B2A A   
.4F                         0 3AB3 A   .50                         0 3AC6 A   
.51                         0 3ADB A   .52                         0 3AF0 A   
.53                         0 3B09 A   .54                         0 3B14 A   
.55                         0 3B1F A   .56                         0 3B53 A   
.57                         0 3B3D A   .58                         0 3B5D A   
.59                         0 3B5F A   .5A                         0 3BB1 A   
.5B                         0 3B77 A   .5C                         0 3BDA A   
.5D                         0 3BD2 A   .5E                         0 A5D8 A   
.5F                         0 3C11 A   .6                          0 3B64 A   
.60                         0 3C0D A   .61                         0 3DE4 A   
.62                         0 3C9F A   .63                         0 3D11 A   
.65                         0 3D01 A   .66                         0 3CDF A   
.67                         0 3CE7 A   .68                         0 3CEF A   
.69                         0 3CF7 A   .6A                         0 3DCE A   
.6B                         0 3DBD A   .6C                         0 3DC4 A   
.6D                         0 3D19 A   .6E                         0 3D96 A   
.6F                         0 3D3A A   .7                          0 366F A   
.70                         0 3DBD A   .71                         0 3DCE A   
.72                         0 3DE4 A   .73                         0 3DD7 A   
.74                         0 3E34 A   .75                         0 3E25 A   
.76                         0 3E2C A   .77                         0 3DF4 A   
.78                         0 3E34 A   .79                         0 3EB9 A   
.7A                         0 3EAA A   .7B                         0 3EB1 A   
.7C                         0 3E72 A   .7D                         0 3EB9 A   
.7E                         0 3F00 A   .7F                         0 3EF1 A   
.8                          0 36CA A   .80                         0 3EF8 A   
.81                         0 3EC0 A   .82                         0 3F00 A   
.83                         0 3F1B A   .84                         0 3F16 A   
.85                         0 3F1E A   .86                         0 3F75 A   
.87                         0 3F66 A   .88                         0 3F6D A   
.89                         0 3F35 A   .8A                         0 3F75 A   
.8B                         0 4075 A   .8C                         0 3FB4 A   
.8D                         0 3FF0 A   .8E                         0 3FCA A   
.8F                         0 4075 A   .90                         0 401B A   
.91                         0 3FF7 A   .92                         0 4075 A   
.93                         0 41B2 A   .94                         0 41A4 A   
.95                         0 41D4 A   .96                         0 41C5 A   
.97                         0 41CC A   .98                         0 41B9 A   
.99                         0 41D4 A   .9A                         0 4200 A   
.9B                         0 41F2 A   .9C                         0 4265 A   
.9E                         0 4256 A   .9F                         0 4218 A   
.A                          0 36A5 A   .A0                         0 422C A   
.A1                         0 4240 A   .A2                         0 4333 A   
.A3                         0 42E3 A   .A4                         0 42DC A   
.A5                         0 42D5 A   .A6                         0 42CD A   
.A7                         0 430C A   .A8                         0 42F7 A   
.A9                         0 4320 A   .AA                         0 4395 A   
.AB                         0 4391 A   .AC                         0 4480 A   
.AD                         0 43C8 A   .AE                         0 44B8 A   
.AF                         0 44B4 A   .B                          0 3681 A   
.B0                         0 450A A   .B1                         0 4506 A   
.B2                         0 4534 A   .B3                         0 4530 A   
.B4                         0 45CC A   .B5                         0 455E A   
.B6                         0 45F0 A   .B7                         0 A5B5 A   
.B8                         0 472B A   .B9                         0 471C A   
.BA                         0 4723 A   .BB                         0 46E0 A   
.BC                         0 472B A   .BD                         0 47B6 A   
.BE                         0 47A7 A   .BF                         0 47AE A   
.C                          0 368D A   .C0                         0 477D A   
.C1                         0 47B6 A   .C2                         0 48D6 A   
.C3                         0 48C5 A   .C4                         0 48CC A   
.C5                         0 4824 A   .C6                         0 4883 A   
.C7                         0 482D A   .C8                         0 48C5 A   
.C9                         0 48D6 A   .CA                         0 498B A   
.CB                         0 497C A   .CC                         0 4983 A   
.CD                         0 490E A   .CE                         0 494F A   
.CF                         0 4917 A   .D                          0 368D A   
.D0                         0 497C A   .D1                         0 498B A   
.D2                         0 49A1 A   .D3                         0 499D A   
.D4                         0 49AD A   .D5                         0 49A9 A   
.D6                         0 49D7 A   .D7                         0 49D3 A   
.D8                         0 4A14 A   .D9                         0 4A03 A   
.DA                         0 4A25 A   .DB                         0 4A1E A   
.DC                         0 4A36 A   .DD                         0 4A2F A   
.DE                         0 4A45 A   .DF                         0 4A40 A   
.E                          0 368D A   .E0                         0 4CD5 A   
.E1                         0 4A6C A   .E2                         0 A58E A   
.E3                         0 4B0F A   .E4                         0 4ADA A   
.E5                         0 4AC8 A   .E6                         0 4AB6 A   
.E7                         0 4AAF A   .E8                         0 4AA8 A   
.E9                         0 4CD2 A   .EA                         0 4BF4 A   
.EB                         0 4B18 A   .EC                         0 4BF1 A   
.ED                         0 4BDE A   .EE                         0 4BE5 A   
.EF                         0 4B23 A   .F                          0 368D A   
.F0                         0 4B83 A   .F1                         0 4B41 A   
.F2                         0 4B3A A   .F3                         0 4BDE A   
.F4                         0 4BF1 A   .F5                         0 4CD2 A   
.F6                         0 4CD2 A   .F7                         0 4CBF A   
.F8                         0 4CC6 A   .F9                         0 4BFF A   
.FA                         0 4C58 A   .FB                         0 4C16 A   
.FC                         0 4C0F A   .FD                         0 4CB3 A   
.FE                         0 4CBF A   .FF                         0 4CBD A   
_biosfn_alternate_prtsc     0 6C90 A   _biosfn_enable_video_refre+ 0 6DAF A   
_biosfn_get_cursor_pos      0 4484 A   _biosfn_get_font_info       0 6AA5 A   
_biosfn_load_gfx_8_14_char+ 0 6A8D A   _biosfn_load_gfx_8_16_char+ 0 6A9D A   
_biosfn_load_gfx_8_8_chars  0 6A7D A   _biosfn_load_gfx_8_8_dd_ch+ 0 6A95 A   
_biosfn_load_gfx_user_char+ 0 6A85 A   _biosfn_load_text_8_14_pat  0 68B7 A   
_biosfn_load_text_8_16_pat  0 69EC A   _biosfn_load_text_8_8_pat   0 694E A   
_biosfn_load_text_user_pat  0 681B A   _biosfn_perform_gray_scale+ 0 6574 A   
_biosfn_read_char_attr      0 50BD A   _biosfn_read_pixel          0 5D13 A   
_biosfn_read_state_info     0 6F03 A   _biosfn_read_video_state_s+ 0 7082 A   
_biosfn_read_video_state_s+ 0 703B A   _biosfn_restore_video_stat+ 0 7670 A   
_biosfn_save_video_state    0 70A6 A   _biosfn_scroll              0 498F A   
_biosfn_set_active_page     0 44F9 A   _biosfn_set_cursor_pos      0 4384 A   
_biosfn_set_cursor_shape    0 4269 A   _biosfn_set_video_mode      0 3BBC A   
_biosfn_switch_video_inter+ 0 6DA7 A   _biosfn_write_char_attr     0 5605 A   
_biosfn_write_char_only     0 57FC A   _biosfn_write_pixel         0 5A72 A   
_biosfn_write_string        0 6DB7 A   _biosfn_write_teletype      0 5F1C A   
_dac_regs                   0 0296 A   _dispi_get_max_bpp          0 9749 A   
_dispi_get_max_xres         0 9727 A   _dispi_set_bank             0 9789 A   
_dispi_set_bank_farcall     0 97A7 A   _dispi_set_bpp              0 96F0 A   
_dispi_set_enable           0 976B A   _dispi_set_xres             0 96BB A   
_dispi_set_yres             0 96D2 A   _display_info               0 35EC A   
_display_splash_screen      0 35EB A   _display_string             0 360A A   
_fail                       0 A379 A   _find_vga_entry             0 7C4E A   
_get_SS                     0 7DC6 A E _get_font_access            0 667B A   
_inb                        0 7D90 A E _int10_debugmsg             0 3631 A   
_int10_func                 0 3662 A   _inw                        0 7D9B A E 
_line_to_vpti               0 0286 A   _memcpyb                    0 7CDA A   
_memcpyw                    0 7D0A A   _memsetb                    0 7C90 A   
_memsetw                    0 7CB5 A   _mode_info_find_mode        0 993D A   
_mode_info_list             0 7F86 A   _no_vbebios_info_string     0 9568 A   
_outb                       0 7DA6 A E _outw                       0 7DB6 A E 
_palette0                   0 0A1A A   _palette1                   0 0ADA A   
_palette2                   0 0B9A A   _palette3                   0 0C5A A   
_pci_get_lfb_addr           0 7F22 A   _printf                     0 7DE5 A E 
_read_byte                  0 7D3A A   _read_word                  0 7D4D A   
_release_font_access        0 669E A   _set_scan_lines             0 66D2 A   
_static_functionality       0 0F5A A   _unimplemented              0 7DC9 A E 
_unknown                    0 7DD7 A E _vbe_biosfn_read_video_sta+ 0 9FAE A E 
_vbe_biosfn_restore_video_+ 0 A048 A E _vbe_biosfn_return_control+ 0 9A15 A E 
_vbe_biosfn_return_mode_in+ 0 9CBF A E _vbe_biosfn_save_restore_s+ 0 A175 A E 
_vbe_biosfn_save_video_sta+ 0 9FB6 A E _vbe_biosfn_set_get_palett+ 0 A363 A E 
_vbe_biosfn_set_mode        0 9E08 A E _vbe_has_vbe_display        0 999E A   
_vbebios_copyright          0 94C6 A   _vbebios_info_string        0 9542 A   
_vbebios_product_name       0 9524 A   _vbebios_product_revision   0 953D A   
_vbebios_vendor_name        0 950C A   _vga_compat_setup           0 9866 A   
_vga_modes                  0 0206 A   _vgafont14                  0 176A A   
_vgafont14alt               0 356A A   _vgafont16                  0 256A A   
_vgafont16alt               0 356B A   _vgafont8                   0 0F6A A   
_vgamem_copy_cga            0 47C8 A   _vgamem_copy_pl4            0 467B A   
_vgamem_fill_cga            0 48DA A   _vgamem_fill_pl4            0 473D A   
_video_param_table          0 029A A   _video_save_pointer_table   0 35CF A   
_write_byte                 0 7D60 A   _write_gfx_char_cga         0 532E A   
_write_gfx_char_lin         0 5531 A   _write_gfx_char_pl4         0 51BB A   
_write_word                 0 7D78 A   biosfn_enable_cursor_emula+ 0 6D85 A   
biosfn_enable_default_pale+ 0 6D21 A   biosfn_enable_grayscale_su+ 0 6D61 A   
biosfn_enable_video_addres+ 0 6D43 A   biosfn_get_all_palette_reg  0 6419 A   
biosfn_get_ega_info         0 6C6D A   biosfn_get_single_palette_+ 0 63E7 A   
biosfn_get_video_mode       0 62E1 A   biosfn_group_0B             0 59F7 A   
biosfn_group_10             0 6308 A   biosfn_group_1A             0 6E90 A   
biosfn_read_all_dac_reg     0 64F9 A   biosfn_read_display_code    0 6E9C A   
biosfn_read_overscan_borde+ 0 640B A   biosfn_read_pel_mask        0 652C A   
biosfn_read_single_dac_reg  0 64DE A   biosfn_read_video_dac_stat+ 0 6537 A   
biosfn_select_vert_res      0 6C98 A   biosfn_select_video_dac_co+ 0 649B A   
biosfn_set_all_dac_reg      0 6473 A   biosfn_set_all_palette_reg  0 6394 A   
biosfn_set_border_color     0 5A05 A   biosfn_set_display_code     0 6EB1 A   
biosfn_set_overscan_border+ 0 638C A   biosfn_set_palette          0 5A44 A   
biosfn_set_pel_mask         0 6521 A   biosfn_set_single_dac_reg   0 645A A   
biosfn_set_single_palette_+ 0 6372 A   biosfn_set_text_block_spec+ 0 69DF A   
biosfn_toggle_intensity     0 63C1 A   bit8_clear                  0 98AE A   
bit9_clear                  0 98B5 A   bpp4_mode                   0 964F A   
dispi_get_bank              0 9799 A   dispi_get_bpp               0 970E A   
dispi_get_enable            0 977B A   dispi_get_id                0 969D A   
dispi_get_virt_height       0 9858 A   dispi_get_virt_width        0 984A A   
dispi_get_x_offset          0 97EE A   dispi_get_y_offset          0 980C A   
dispi_set_bank_farcall_err+ 0 97D9 A   dispi_set_bank_farcall_get  0 97CB A   
dispi_set_id                0 96AB A   dispi_set_virt_width        0 9837 A   
dispi_set_x_offset          0 97DE A   dispi_set_y_offset          0 97FC A   
get_bpp_noinc               0 9725 A   get_dac_16_page             0 6567 A   
get_dac_palette_format      0 A34F A   get_display_start           0 A31C A   
get_display_window          0 A2A4 A   get_logical_scan_line_leng+ 0 A2DC A   
get_palette_loop            0 6421 A   idiv_u                      0 66CD A   
illegal_window              0 95E2 A   init_bios_area              0 3597 A   
init_vga_card               0 356C A   int10_end                   0 0204 A   
int10_group_10_unknown      0 636E A   int10_normal                0 01F6 A   
int10_test_0B               0 0153 A   int10_test_1001             0 630E A   
int10_test_1002             0 6314 A   int10_test_1003             0 631A A   
int10_test_1007             0 6321 A   int10_test_1008             0 6328 A   
int10_test_1009             0 632F A   int10_test_1010             0 6336 A   
int10_test_1012             0 633D A   int10_test_1013             0 6344 A   
int10_test_1015             0 634B A   int10_test_1017             0 6352 A   
int10_test_1018             0 6359 A   int10_test_1019             0 6360 A   
int10_test_101A             0 6367 A   int10_test_101B             0 01AC A   
int10_test_1103             0 015E A   int10_test_12               0 0169 A   
int10_test_1A               0 0148 A   int10_test_4F               0 01BB A   
int10_test_BL30             0 0179 A   int10_test_BL31             0 0184 A   
int10_test_BL32             0 018E A   int10_test_BL33             0 0198 A   
int10_test_BL34             0 01A2 A   int10_test_vbe_05           0 01C9 A   
int10_test_vbe_06           0 01D2 A   int10_test_vbe_07           0 01DB A   
int10_test_vbe_08           0 01E4 A   int10_test_vbe_0A           0 01ED A   
lmulul                      0 99FC A   memcpyb_end                 0 7D02 A   
memcpyw_end                 0 7D32 A   memsetb_end                 0 7CAF A   
memsetw_end                 0 7CD4 A   mode_ega_color              0 6C8D A   
msg_alt_dcc                 0 6ED5 A   msg_vbe_init                0 958C A   
msg_vert_res                0 6CFA A   msg_vga_init                0 3588 A   
no_4bpp_1                   0 A2D4 A   no_4bpp_2                   0 A2F1 A   
no_actl_reg1                0 638B A   no_actl_reg2                0 640A A   
no_vbe_flag                 0 99F1 A   no_vbe_interface            0 99D5 A   
no_vbe_mode                 0 9FA0 A   pci_get_lfb_addr_fail       0 7F47 A   
pci_get_lfb_addr_found      0 7F4B A   pci_get_lfb_addr_next_dev   0 7F35 A   
pci_get_lfb_addr_return     0 7F65 A   pci_get_lfb_addr_success    0 7F5F A   
pci_read_reg                0 7F6D A   read_dac_loop               0 650A A   
set_actl_normal             0 64D7 A   set_cga_palette_loop        0 5A51 A   
set_dac_16_page             0 64D1 A   set_dac_loop                0 6484 A   
set_dac_mode                0 A34C A   set_dac_page                0 64BE A   
set_dac_palette_format      0 A337 A   set_display_start           0 A30E A   
set_display_window          0 A294 A   set_intensity_loop          0 5A23 A   
set_logical_scan_line_byte+ 0 A2C3 A   set_logical_scan_line_pixe+ 0 A2D9 A   
set_low_border              0 5A1D A   set_normal_dac              0 A349 A   
set_palette_loop            0 63A3 A   set_retcode                 0 6CF3 A   
set_vert_res                0 6CE9 A   set_width_svga              0 9828 A   
set_xy_regs                 0 965B A   vbe_03_ok                   0 9FA9 A   
vbe_05_failed               0 A2AD A   vbe_08_ok                   0 A35B A   
vbe_08_unsupported          0 A35F A   vbe_biosfn_display_window_+ 0 A284 A   
vbe_biosfn_return_current_+ 0 9F89 A   vbe_biosfn_return_protecte+ 0 A364 A   
vbe_biosfn_set_get_dac_pal+ 0 A32C A   vbe_biosfn_set_get_display+ 0 A2FE A   
vbe_biosfn_set_get_logical+ 0 A2B1 A   vbe_display_info            0 99DF A   
vbe_init                    0 99B1 A   vert_res_200                0 6CDF A   
vert_res_350                0 6CD5 A   vert_res_400                0 6CC9 A   
vesa_pm_end                 0 969D A   vesa_pm_io_ports_table      0 95A4 A   
vesa_pm_set_display_start   0 95E7 A   vesa_pm_set_display_start1  0 95F6 A   
vesa_pm_set_display_window+ 0 95BB A   vesa_pm_set_window          0 95B0 A   
vesa_pm_start               0 959C A   vesa_pm_unimplemented       0 9698 A   
vga_compat_end              0 993B A   vga_set_virt_width          0 981A A   
vgabios_copyright           0 004D A   vgabios_date                0 003F A   
vgabios_end                 0 A38F A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0104 A   vgabios_int10_handler       0 012E A   
vgabios_license             0 0079 A   vgabios_name                0 0022 A   
vgabios_start               0 0000 A   vgabios_version             0 0038 A   
vgabios_website             0 00AE A   

00000 errors
00000 warnings
