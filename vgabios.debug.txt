00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios-debug_.c"
00003                                           ! 1 # 7
00004                                           ! 7 typedef unsigned char Bit8u;
00005                                           !BCC_EOS
00006                                           ! 8 typedef unsigned short Bit16u;
00007                                           !BCC_EOS
00008                                           ! 9 typedef unsigned long Bit32u;
00009                                           !BCC_EOS
00010                                           ! 10 typedef unsigned short Boolean;
00011                                           !BCC_EOS
00012                                           ! 11 void dispi_set_enable(enable);
00013                                           !BCC_EOS
00014                                           ! 12 
00015                                           ! 13 
00016                                           ! 14 
00017                                           ! 15 Boolean vbe_has_vbe_display();
00018                                           !BCC_EOS
00019                                           ! 16 void vbe_biosfn_return_controller_information(AX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 17 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00022                                           !BCC_EOS
00023                                           ! 18 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00024                                           !BCC_EOS
00025                                           ! 19 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00026                                           !BCC_EOS
00027                                           ! 20 void vbe_biosfn_set_get_palette_data(AX);
00028                                           !BCC_EOS
00029                                           ! 21 void vbe_biosfn_return_protected_mode_interface(AX);
00030                                           !BCC_EOS
00031                                           ! 22 
00032                                           ! 23 
00033                                           ! 24 typedef struct VbeInfoBlock
00034                                           ! 25 {
00035                                           ! 26    Bit8u VbeSignature[4];
00036                                           !BCC_EOS
00037                                           ! 27    Bit16u VbeVersion;
00038                                           !BCC_EOS
00039                                           ! 28    Bit16u OemStringPtr_Off;
00040                                           !BCC_EOS
00041                                           ! 29    Bit16u OemStringPtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 30    Bit8u Capabilities[4];
00044                                           !BCC_EOS
00045                                           ! 31    Bit16u VideoModePtr_Off;
00046                                           !BCC_EOS
00047                                           ! 32    Bit16u VideoModePtr_Seg;
00048                                           !BCC_EOS
00049                                           ! 33    Bit16u TotalMemory;
00050                                           !BCC_EOS
00051                                           ! 34    Bit16u OemSoftwareRev;
00052                                           !BCC_EOS
00053                                           ! 35    Bit16u OemVendorNamePtr_Off;
00054                                           !BCC_EOS
00055                                           ! 36    Bit16u OemVendorNamePtr_Seg;
00056                                           !BCC_EOS
00057                                           ! 37    Bit16u OemProductNamePtr_Off;
00058                                           !BCC_EOS
00059                                           ! 38    Bit16u OemProductNamePtr_Seg;
00060                                           !BCC_EOS
00061                                           ! 39    Bit16u OemProductRevPtr_Off;
00062                                           !BCC_EOS
00063                                           ! 40    Bit16u OemProductRevPtr_Seg;
00064                                           !BCC_EOS
00065                                           ! 41    Bit16u Reserved[111];
00066                                           !BCC_EOS
00067                                           ! 42    Bit8u OemData[256];
00068                                           !BCC_EOS
00069                                           ! 43 } VbeInfoBlock;
00070                                           !BCC_EOS
00071                                           ! 44 # 48
00072                                           ! 48 typedef struct ModeInfoBlockCompact
00073                                           ! 49 {
00074                                           ! 50 
00075                                           ! 51    Bit16u ModeAttributes;
00076                                           !BCC_EOS
00077                                           ! 52    Bit8u WinAAttributes;
00078                                           !BCC_EOS
00079                                           ! 53    Bit8u WinBAttributes;
00080                                           !BCC_EOS
00081                                           ! 54    Bit16u WinGranularity;
00082                                           !BCC_EOS
00083                                           ! 55    Bit16u WinSize;
00084                                           !BCC_EOS
00085                                           ! 56    Bit16u WinASegment;
00086                                           !BCC_EOS
00087                                           ! 57    Bit16u WinBSegment;
00088                                           !BCC_EOS
00089                                           ! 58    Bit32u WinFuncPtr;
00090                                           !BCC_EOS
00091                                           ! 59    Bit16u BytesPerScanLine;
00092                                           !BCC_EOS
00093                                           ! 60 
00094                                           ! 61    Bit16u XResolution;
00095                                           !BCC_EOS
00096                                           ! 62    Bit16u YResolution;
00097                                           !BCC_EOS
00098                                           ! 63    Bit8u XCharSize;
00099                                           !BCC_EOS
00100                                           ! 64    Bit8u YCharSize;
00101                                           !BCC_EOS
00102                                           ! 65    Bit8u NumberOfPlanes;
00103                                           !BCC_EOS
00104                                           ! 66    Bit8u BitsPerPixel;
00105                                           !BCC_EOS
00106                                           ! 67    Bit8u NumberOfBanks;
00107                                           !BCC_EOS
00108                                           ! 68    Bit8u MemoryModel;
00109                                           !BCC_EOS
00110                                           ! 69    Bit8u BankSize;
00111                                           !BCC_EOS
00112                                           ! 70    Bit8u NumberOfImagePages;
00113                                           !BCC_EOS
00114                                           ! 71    Bit8u Reserved_page;
00115                                           !BCC_EOS
00116                                           ! 72 
00117                                           ! 73    Bit8u RedMaskSize;
00118                                           !BCC_EOS
00119                                           ! 74    Bit8u RedFieldPosition;
00120                                           !BCC_EOS
00121                                           ! 75    Bit8u GreenMaskSize;
00122                                           !BCC_EOS
00123                                           ! 76    Bit8u GreenFieldPosition;
00124                                           !BCC_EOS
00125                                           ! 77    Bit8u BlueMaskSize;
00126                                           !BCC_EOS
00127                                           ! 78    Bit8u BlueFieldPosition;
00128                                           !BCC_EOS
00129                                           ! 79    Bit8u RsvdMaskSize;
00130                                           !BCC_EOS
00131                                           ! 80    Bit8u RsvdFieldPosition;
00132                                           !BCC_EOS
00133                                           ! 81    Bit8u DirectColorModeInfo;
00134                                           !BCC_EOS
00135                                           ! 82 
00136                                           ! 83    Bit32u PhysBasePtr;
00137                                           !BCC_EOS
00138                                           ! 84    Bit32u OffScreenMemOffset;
00139                                           !BCC_EOS
00140                                           ! 85    Bit16u OffScreenMemSize;
00141                                           !BCC_EOS
00142                                           ! 86 
00143                                           ! 87    Bit16u LinBytesPerScanLine;
00144                                           !BCC_EOS
00145                                           ! 88    Bit8u BnkNumberOfPages;
00146                                           !BCC_EOS
00147                                           ! 89    Bit8u LinNumberOfPages;
00148                                           !BCC_EOS
00149                                           ! 90    Bit8u LinRedMaskSize;
00150                                           !BCC_EOS
00151                                           ! 91    Bit8u LinRedFieldPosition;
00152                                           !BCC_EOS
00153                                           ! 92    Bit8u LinGreenMaskSize;
00154                                           !BCC_EOS
00155                                           ! 93 
00156                                           ! 93    Bit8u LinGreenFieldPosition;
00157                                           !BCC_EOS
00158                                           ! 94    Bit8u LinBlueMaskSize;
00159                                           !BCC_EOS
00160                                           ! 95    Bit8u LinBlueFieldPosition;
00161                                           !BCC_EOS
00162                                           ! 96    Bit8u LinRsvdMaskSize;
00163                                           !BCC_EOS
00164                                           ! 97    Bit8u LinRsvdFieldPosition;
00165                                           !BCC_EOS
00166                                           ! 98    Bit32u MaxPixelClock;
00167                                           !BCC_EOS
00168                                           ! 99 
00169                                           ! 100 } ModeInfoBlockCompact;
00170                                           !BCC_EOS
00171                                           ! 101 
00172                                           ! 102 typedef struct ModeInfoBlock
00173                                           ! 103 {
00174                                           ! 104 
00175                                           ! 105    Bit16u ModeAttributes;
00176                                           !BCC_EOS
00177                                           ! 106    Bit8u WinAAttributes;
00178                                           !BCC_EOS
00179                                           ! 107    Bit8u WinBAttributes;
00180                                           !BCC_EOS
00181                                           ! 108    Bit16u WinGranularity;
00182                                           !BCC_EOS
00183                                           ! 109    Bit16u WinSize;
00184                                           !BCC_EOS
00185                                           ! 110    Bit16u WinASegment;
00186                                           !BCC_EOS
00187                                           ! 111    Bit16u WinBSegment;
00188                                           !BCC_EOS
00189                                           ! 112    Bit32u WinFuncPtr;
00190                                           !BCC_EOS
00191                                           ! 113    Bit16u BytesPerScanLine;
00192                                           !BCC_EOS
00193                                           ! 114 
00194                                           ! 115    Bit16u XResolution;
00195                                           !BCC_EOS
00196                                           ! 116    Bit16u YResolution;
00197                                           !BCC_EOS
00198                                           ! 117    Bit8u XCharSize;
00199                                           !BCC_EOS
00200                                           ! 118    Bit8u YCharSize;
00201                                           !BCC_EOS
00202                                           ! 119    Bit8u NumberOfPlanes;
00203                                           !BCC_EOS
00204                                           ! 120    Bit8u BitsPerPixel;
00205                                           !BCC_EOS
00206                                           ! 121    Bit8u NumberOfBanks;
00207                                           !BCC_EOS
00208                                           ! 122    Bit8u MemoryModel;
00209                                           !BCC_EOS
00210                                           ! 123    Bit8u BankSize;
00211                                           !BCC_EOS
00212                                           ! 124    Bit8u NumberOfImagePages;
00213                                           !BCC_EOS
00214                                           ! 125    Bit8u Reserved_page;
00215                                           !BCC_EOS
00216                                           ! 126 
00217                                           ! 127    Bit8u RedMaskSize;
00218                                           !BCC_EOS
00219                                           ! 128    Bit8u RedFieldPosition;
00220                                           !BCC_EOS
00221                                           ! 129    Bit8u GreenMaskSize;
00222                                           !BCC_EOS
00223                                           ! 130    Bit8u GreenFieldPosition;
00224                                           !BCC_EOS
00225                                           ! 131    Bit8u BlueMaskSize;
00226                                           !BCC_EOS
00227                                           ! 132    Bit8u BlueFieldPosition;
00228                                           !BCC_EOS
00229                                           ! 133    Bit8u RsvdMaskSize;
00230                                           !BCC_EOS
00231                                           ! 134    Bit8u RsvdFieldPosition;
00232                                           !BCC_EOS
00233                                           ! 135    Bit8u DirectColorModeInfo;
00234                                           !BCC_EOS
00235                                           ! 136 
00236                                           ! 137    Bit32u PhysBasePtr;
00237                                           !BCC_EOS
00238                                           ! 138    Bit32u OffScreenMemOffset;
00239                                           !BCC_EOS
00240                                           ! 139    Bit16u OffScreenMemSize;
00241                                           !BCC_EOS
00242                                           ! 140 
00243                                           ! 141    Bit16u LinBytesPerScanLine;
00244                                           !BCC_EOS
00245                                           ! 142    Bit8u BnkNumberOfPages;
00246                                           !BCC_EOS
00247                                           ! 143    Bit8u LinNumberOfPages;
00248                                           !BCC_EOS
00249                                           ! 144    Bit8u LinRedMaskSize;
00250                                           !BCC_EOS
00251                                           ! 145    Bit8u LinRedFieldPosition;
00252                                           !BCC_EOS
00253                                           ! 146    Bit8u LinGreenMaskSize;
00254                                           !BCC_EOS
00255                                           ! 147    Bit8u LinGreenFieldPosition;
00256                                           !BCC_EOS
00257                                           ! 148    Bit8u LinBlueMaskSize;
00258                                           !BCC_EOS
00259                                           ! 149    Bit8u LinBlueFieldPosition;
00260                                           !BCC_EOS
00261                                           ! 150    Bit8u LinRsvdMaskSize;
00262                                           !BCC_EOS
00263                                           ! 151    Bit8u LinRsvdFieldPosition;
00264                                           !BCC_EOS
00265                                           ! 152    Bit32u MaxPixelClock;
00266                                           !BCC_EOS
00267                                           ! 153    Bit8u Reserved[189];
00268                                           !BCC_EOS
00269                                           ! 154 } ModeInfoBlock;
00270                                           !BCC_EOS
00271                                           ! 155 
00272                                           ! 156 typedef struct ModeInfoListItem
00273                                           ! 157 {
00274                                           ! 158   Bit16u mode;
00275                                           !BCC_EOS
00276                                           ! 159   ModeInfoBlockCompact info;
00277                                           !BCC_EOS
00278                                           ! 160 } ModeInfoListItem;
00279                                           !BCC_EOS
00280                                           ! 161 static Bit8u read_byte();
00281                                           !BCC_EOS
00282                                           ! 162 static Bit16u read_word();
00283                                           !BCC_EOS
00284                                           ! 163 static void write_byte();
00285                                           !BCC_EOS
00286                                           ! 164 static void write_word();
00287                                           !BCC_EOS
00288                                           ! 165 static Bit8u inb();
00289                                           !BCC_EOS
00290                                           ! 166 static Bit16u inw();
00291                                           !BCC_EOS
00292                                           ! 167 static void outb();
00293                                           !BCC_EOS
00294                                           ! 168 static void outw();
00295                                           !BCC_EOS
00296                                           ! 169 static Bit16u get_SS();
00297                                           !BCC_EOS
00298                                           ! 170 static void printf();
00299                                           !BCC_EOS
00300                                           ! 171 static void unimplemented();
00301                                           !BCC_EOS
00302                                           ! 172 static void unknown();
00303                                           !BCC_EOS
00304                                           ! 173 static Bit8u find_vga_entry();
00305                                           !BCC_EOS
00306                                           ! 174 static void memsetb();
00307                                           !BCC_EOS
00308                                           ! 175 static void memsetw();
00309                                           !BCC_EOS
00310                                           ! 176 static void memcpyb();
00311                                           !BCC_EOS
00312                                           ! 177 static void memcpyw();
00313                                           !BCC_EOS
00314                                           ! 178 static void biosfn_set_video_mode();
00315                                           !BCC_EOS
00316                                           ! 179 static void biosfn_set_cursor_shape();
00317                                           !BCC_EOS
00318                                           ! 180 static void biosfn_set_cursor_pos();
00319                                           !BCC_EOS
00320                                           ! 181 static void biosfn_get_cursor_pos
00321                                           ! 181 ();
00322                                           !BCC_EOS
00323                                           ! 182 static void biosfn_set_active_page();
00324                                           !BCC_EOS
00325                                           ! 183 static void biosfn_scroll();
00326                                           !BCC_EOS
00327                                           ! 184 static void biosfn_read_char_attr();
00328                                           !BCC_EOS
00329                                           ! 185 static void biosfn_write_char_attr();
00330                                           !BCC_EOS
00331                                           ! 186 static void biosfn_write_char_only();
00332                                           !BCC_EOS
00333                                           ! 187 static void biosfn_write_pixel();
00334                                           !BCC_EOS
00335                                           ! 188 static void biosfn_read_pixel();
00336                                           !BCC_EOS
00337                                           ! 189 static void biosfn_write_teletype();
00338                                           !BCC_EOS
00339                                           ! 190 static void biosfn_perform_gray_scale_summing();
00340                                           !BCC_EOS
00341                                           ! 191 static void biosfn_load_text_user_pat();
00342                                           !BCC_EOS
00343                                           ! 192 static void biosfn_load_text_8_14_pat();
00344                                           !BCC_EOS
00345                                           ! 193 static void biosfn_load_text_8_8_pat();
00346                                           !BCC_EOS
00347                                           ! 194 static void biosfn_load_text_8_16_pat();
00348                                           !BCC_EOS
00349                                           ! 195 static void biosfn_load_gfx_8_8_chars();
00350                                           !BCC_EOS
00351                                           ! 196 static void biosfn_load_gfx_user_chars();
00352                                           !BCC_EOS
00353                                           ! 197 static void biosfn_load_gfx_8_14_chars();
00354                                           !BCC_EOS
00355                                           ! 198 static void biosfn_load_gfx_8_8_dd_chars();
00356                                           !BCC_EOS
00357                                           ! 199 static void biosfn_load_gfx_8_16_chars();
00358                                           !BCC_EOS
00359                                           ! 200 static void biosfn_get_font_info();
00360                                           !BCC_EOS
00361                                           ! 201 static void biosfn_alternate_prtsc();
00362                                           !BCC_EOS
00363                                           ! 202 static void biosfn_switch_video_interface();
00364                                           !BCC_EOS
00365                                           ! 203 static void biosfn_enable_video_refresh_control();
00366                                           !BCC_EOS
00367                                           ! 204 static void biosfn_write_string();
00368                                           !BCC_EOS
00369                                           ! 205 static void biosfn_read_state_info();
00370                                           !BCC_EOS
00371                                           ! 206 static void biosfn_read_video_state_size();
00372                                           !BCC_EOS
00373                                           ! 207 static Bit16u biosfn_save_video_state();
00374                                           !BCC_EOS
00375                                           ! 208 static Bit16u biosfn_restore_video_state();
00376                                           !BCC_EOS
00377                                           ! 209 extern Bit8u video_save_pointer_table[];
00378                                           !BCC_EOS
00379                                           ! 210 #asm
00380                                           !BCC_ASM
00381                                           MACRO SET_INT_VECTOR
00382                                             push ds
00383                                             xor ax, ax
00384                                             mov ds, ax
00385                                             mov ax, ?3
00386                                             mov ?1*4, ax
00387                                             mov ax, ?2
00388                                             mov ?1*4+2, ax
00389                                             pop ds
00390                                           MEND
00391                                           ! 221 endasm
00392                                           !BCC_ENDASM
00393                                           ! 222 #asm
00394                                           !BCC_ASM
00395                                           
00396 0000                                      .rom
00397 0000                                      .org 0
00398                                           use16 386
00399                       00000000            vgabios_start:
00400 0000                        55            .byte 0x55, 0xaa
00401 0002                        40            .byte 0x40
00402                       00000003            vgabios_entry_point:
00403 0003           E9         00FC              jmp vgabios_init_func
00404 001E                                      .org 0x1e
00405 001E                        49            .ascii "IBM"
00406 0021                        00            .byte 0x00
00407                       00000022            vgabios_name:
00408 0022                        50            .ascii "Plex86/Bochs VGABios"
00409 0036                        20            .ascii " "
00410 0037                        00            .byte 0x00
00411                       00000038            vgabios_version:
00412 0038                        30            .ascii "0.6c"
00413 003C                        20            .ascii " "
00414                       0000003D            vgabios_date:
00415 003D                        30            .ascii "08 Apr 2009"
00416 0048                        0A            .byte 0x0a,0x0d
00417 004A                        00            .byte 0x00
00418                       0000004B            vgabios_copyright:
00419 004B                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00420 0074                        0A            .byte 0x0a,0x0d
00421 0076                        00            .byte 0x00
00422                       00000077            vgabios_license:
00423 0077                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00424 00A7                        0A            .byte 0x0a,0x0d
00425 00A9                        0A            .byte 0x0a,0x0d
00426 00AB                        00            .byte 0x00
00427                       000000AC            vgabios_website:
00428 00AC                        50            .ascii "Please visit :"
00429 00BA                        0A            .byte 0x0a,0x0d
00430                                           ;;.ascii " . http://www.plex86.org"
00431                                           ;;.byte 0x0a,0x0d
00432 00BC                        20            .ascii " . http://bochs.sourceforge.net"
00433 00DB                        0A            .byte 0x0a,0x0d
00434 00DD                        20            .ascii " . http://www.nongnu.org/vgabios"
00435 00FD                        0A            .byte 0x0a,0x0d
00436 00FF                        0A            .byte 0x0a,0x0d
00437 0101                        00            .byte 0x00
00438                                           ;; ============================================================================================
00439                                           ;;
00440                                           ;; Init Entry point
00441                                           ;;
00442                                           ;; ============================================================================================
00443                       00000102            vgabios_init_func:
00444                                           ;; init vga card
00445 0102           E8         3465              call init_vga_card
00446                                           ;; init basic bios vars
00447 0105           E8         34C1              call init_bios_area
00448                                           ;; init vbe functions
00449 0108           E8         9466              call vbe_init
00450                                           ;; set int10 vect
00451                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   010B           1E                           push ds
 +a   010C           31C0                         xor ax, ax
 +a   010E           8ED8                         mov ds, ax
 +a   0110           B8                   012C    mov ax,  #vgabios_int10_handler
 +a   0113           A3         0040              mov 0x10*4, ax
 +a   0116           B8                   C000    mov ax,  #0xC000
 +a   0119           A3         0042              mov 0x10*4+2, ax
 +a   011C           1F                           pop ds
00452                                           ;; display splash screen
00453 011D           E8         34FD              call _display_splash_screen
00454                                           ;; init video mode and clear the screen
00455 0120           B8                   0003    mov ax,#0x0003
00456 0123           CD                     10    int #0x10
00457                                           ;; show info
00458 0125           E8         34F6              call _display_info
00459                                           ;; show vbe info
00460 0128           E8         9474              call vbe_display_info
00461 012B           CB                           retf
00462                                           ! 290 endasm
00463                                           !BCC_ENDASM
00464                                           ! 291 #asm
00465                                           !BCC_ASM
00466                       0000012C            vgabios_int10_handler:
00467 012C           9C                           pushf
00468 012D           06                           push es
00469 012E           1E                           push ds
00470 012F           60                           pusha
00471 0130           BB                   C000    mov bx, #0xc000
00472 0133           8EDB                         mov ds, bx
00473 0135           E8         352B              call _int10_debugmsg
00474 0138           61                           popa
00475 0139           1F                           pop ds
00476 013A           07                           pop es
00477 013B           80FC                   0F    cmp ah, #0x0f
00478 013E           75           06              jne int10_test_1A
00479 0140           E8         61D0              call biosfn_get_video_mode
00480 0143           E9         00BC              jmp int10_end
00481                       00000146            int10_test_1A:
00482 0146           80FC                   1A    cmp ah, #0x1a
00483 0149           75           06              jne int10_test_0B
00484 014B           E8         6D74              call biosfn_group_1A
00485 014E           E9         00B1              jmp int10_end
00486                       00000151            int10_test_0B:
00487 0151           80FC                   0B    cmp ah, #0x0b
00488 0154           75           06              jne int10_test_1103
00489 0156           E8         58D0              call biosfn_group_0B
00490 0159           E9         00A6              jmp int10_end
00491                       0000015C            int10_test_1103:
00492 015C           3D                   1103    cmp ax, #0x1103
00493 015F           75           06              jne int10_test_12
00494 0161           E8         68AD              call biosfn_set_text_block_specifier
00495 0164           E9         009B              jmp int10_end
00496                       00000167            int10_test_12:
00497 0167           80FC                   12    cmp ah, #0x12
00498 016A           75           3E              jne int10_test_101B
00499 016C           80FB                   10    cmp bl, #0x10
00500 016F           75           06              jne int10_test_BL30
00501 0171           E8         6B2B              call biosfn_get_ega_info
00502 0174           E9         008B              jmp int10_end
00503                       00000177            int10_test_BL30:
00504 0177           80FB                   30    cmp bl, #0x30
00505 017A           75           06              jne int10_test_BL31
00506 017C           E8         6B4B              call biosfn_select_vert_res
00507 017F           E9         0080              jmp int10_end
00508                       00000182            int10_test_BL31:
00509 0182           80FB                   31    cmp bl, #0x31
00510 0185           75           05              jne int10_test_BL32
00511 0187           E8         6BC9              call biosfn_enable_default_palette_loading
00512 018A           EB           76              jmp int10_end
00513                       0000018C            int10_test_BL32:
00514 018C           80FB                   32    cmp bl, #0x32
00515 018F           75           05              jne int10_test_BL33
00516 0191           E8         6BE1              call biosfn_enable_video_addressing
00517 0194           EB           6C              jmp int10_end
00518                       00000196            int10_test_BL33:
00519 0196           80FB                   33    cmp bl, #0x33
00520 0199           75           05              jne int10_test_BL34
00521 019B           E8         6BF5              call biosfn_enable_grayscale_summing
00522 019E           EB           62              jmp int10_end
00523                       000001A0            int10_test_BL34:
00524 01A0           80FB                   34    cmp bl, #0x34
00525 01A3           75           4F              jne int10_normal
00526 01A5           E8         6C0F              call biosfn_enable_cursor_emulation
00527 01A8           EB           58              jmp int10_end
00528                       000001AA            int10_test_101B:
00529 01AA           3D                   101B    cmp ax, #0x101b
00530 01AD           74           45              je int10_normal
00531 01AF           80FC                   10    cmp ah, #0x10
00532 01B2           75           05              jne int10_test_4F
00533 01B4           E8         6183              call biosfn_group_10
00534 01B7           EB           49              jmp int10_end
00535                       000001B9            int10_test_4F:
00536 01B9           80FC                   4F    cmp ah, #0x4f
00537 01BC           75           36              jne int10_normal
00538 01BE           3C                     03    cmp al, #0x03
00539 01C0           75           05              jne int10_test_vbe_05
00540 01C2           E8         9984              call vbe_biosfn_return_current_mode
00541 01C5           EB           3B              jmp int10_end
00542                       000001C7            int10_test_vbe_05:
00543 01C7           3C                     05    cmp al, #0x05
00544 01C9           75           05              jne int10_test_vbe_06
00545 01CB           E8         9C76              call vbe_biosfn_display_window_control
00546 01CE           EB           32              jmp int10_end
00547                       000001D0            int10_test_vbe_06:
00548 01D0           3C                     06    cmp al, #0x06
00549 01D2           75           05              jne int10_test_vbe_07
00550 01D4           E8         9C9A              call vbe_biosfn_set_get_logical_scan_line_length
00551 01D7           EB           29              jmp int10_end
00552                       000001D9            int10_test_vbe_07:
00553 01D9           3C                     07    cmp al, #0x07
00554 01DB           75           05              jne int10_test_vbe_08
00555 01DD           E8         9CDE              call vbe_biosfn_set_get_display_start
00556 01E0           EB           20              jmp int10_end
00557                       000001E2            int10_test_vbe_08:
00558 01E2           3C                     08    cmp al, #0x08
00559 01E4           75           05              jne int10_test_vbe_0A
00560 01E6           E8         9D03              call vbe_biosfn_set_get_dac_palette_format
00561 01E9           EB           17              jmp int10_end
00562                       000001EB            int10_test_vbe_0A:
00563 01EB           3C                     0A    cmp al, #0x0A
00564 01ED           75           05              jne int10_normal
00565 01EF           E8         9D32              call vbe_biosfn_return_protected_mode_interface
00566 01F2           EB           0E              jmp int10_end
00567                       000001F4            int10_normal:
00568 01F4           06                           push es
00569 01F5           1E                           push ds
00570 01F6           60                           pusha
00571                                           ;; We have to set ds to access the right data segment
00572 01F7           BB                   C000    mov bx, #0xc000
00573 01FA           8EDB                         mov ds, bx
00574 01FC           E8         3495              call _int10_func
00575                                           
00576 01FF           61                           popa
00577 0200           1F                           pop ds
00578 0201           07                           pop es
00579                       00000202            int10_end:
00580 0202           9D                           popf
00581 0203           CF                           iret
00582                                           ! 408 endasm
00583                                           !BCC_ENDASM
00584                                           ! 409 typedef struct
00585                                           ! 410 {Bit8u svgamode;
00586                                           !BCC_EOS
00587                                           ! 411  Bit8u class;
00588                                           !BCC_EOS
00589                                           ! 412  Bit8u memmodel;
00590                                           !BCC_EOS
00591                                           ! 413  Bit8u pixbits;
00592                                           !BCC_EOS
00593                                           ! 414  Bit16u sstart;
00594                                           !BCC_EOS
00595                                           ! 415  Bit8u pelmask;
00596                                           !BCC_EOS
00597                                           ! 416  Bit8u dacmodel;
00598                                           !BCC_EOS
00599                                           ! 417 } VGAMODES;
00600                                           !BCC_EOS
00601                                           ! 418 static VGAMODES vga_modes[15 +1]=
00602                                           ! 419 {
00603                                           
00604                       00000204            _vga_modes:
00605                                           ! 420  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00606 0204                        00            .byte	0
00607 0205                        00            .byte	0
00608 0206                        00            .byte	0
00609 0207                        04            .byte	4
00610 0208                      B800            .word	$B800
00611 020A                        FF            .byte	$FF
00612 020B                        02            .byte	2
00613                                           ! 421  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00614 020C                        01            .byte	1
00615 020D                        00            .byte	0
00616 020E                        00            .byte	0
00617 020F                        04            .byte	4
00618 0210                      B800            .word	$B800
00619 0212                        FF            .byte	$FF
00620 0213                        02            .byte	2
00621                                           ! 422  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00622 0214                        02            .byte	2
00623 0215                        00            .byte	0
00624 0216                        00            .byte	0
00625 0217                        04            .byte	4
00626 0218                      B800            .word	$B800
00627 021A                        FF            .byte	$FF
00628 021B                        02            .byte	2
00629                                           ! 423  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00630 021C                        03            .byte	3
00631 021D                        00            .byte	0
00632 021E                        00            .byte	0
00633 021F                        04            .byte	4
00634 0220                      B800            .word	$B800
00635 0222                        FF            .byte	$FF
00636 0223                        02            .byte	2
00637                                           ! 424  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00638 0224                        04            .byte	4
00639 0225                        01            .byte	1
00640 0226                        02            .byte	2
00641 0227                        02            .byte	2
00642 0228                      B800            .word	$B800
00643 022A                        FF            .byte	$FF
00644 022B                        01            .byte	1
00645                                           ! 425  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00646 022C                        05            .byte	5
00647 022D                        01            .byte	1
00648 022E                        02            .byte	2
00649 022F                        02            .byte	2
00650 0230                      B800            .word	$B800
00651 0232                        FF            .byte	$FF
00652 0233                        01            .byte	1
00653                                           ! 426  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00654 0234                        06            .byte	6
00655 0235                        01            .byte	1
00656 0236                        02            .byte	2
00657 0237                        01            .byte	1
00658 0238                      B800            .word	$B800
00659 023A                        FF            .byte	$FF
00660 023B                        01            .byte	1
00661                                           ! 427  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00662 023C                        07            .byte	7
00663 023D                        00            .byte	0
00664 023E                        01            .byte	1
00665 023F                        04            .byte	4
00666 0240                      B000            .word	$B000
00667 0242                        FF            .byte	$FF
00668 0243                        00            .byte	0
00669                                           ! 428  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00670 0244                        0D            .byte	$D
00671 0245                        01            .byte	1
00672 0246                        04            .byte	4
00673 0247                        04            .byte	4
00674 0248                      A000            .word	$A000
00675 024A                        FF            .byte	$FF
00676 024B                        01            .byte	1
00677                                           ! 429  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00678 024C                        0E            .byte	$E
00679 024D                        01            .byte	1
00680 024E                        04            .byte	4
00681 024F                        04            .byte	4
00682 0250                      A000            .word	$A000
00683 0252                        FF            .byte	$FF
00684 0253                        01            .byte	1
00685                                           ! 430  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00686 0254                        0F            .byte	$F
00687 0255                        01            .byte	1
00688 0256                        03            .byte	3
00689 0257                        01            .byte	1
00690 0258                      A000            .word	$A000
00691 025A                        FF            .byte	$FF
00692 025B                        00            .byte	0
00693                                           ! 431  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00694 025C                        10            .byte	$10
00695 025D                        01            .byte	1
00696 025E                        04            .byte	4
00697 025F                        04            .byte	4
00698 0260                      A000            .word	$A000
00699 0262                        FF            .byte	$FF
00700 0263                        02            .byte	2
00701                                           ! 432  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00702 0264                        11            .byte	$11
00703 0265                        01            .byte	1
00704 0266                        03            .byte	3
00705 0267                        01            .byte	1
00706 0268                      A000            .word	$A000
00707 026A                        FF            .byte	$FF
00708 026B                        02            .byte	2
00709                                           ! 433  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00710 026C                        12            .byte	$12
00711 026D                        01            .byte	1
00712 026E                        04            .byte	4
00713 026F                        04            .byte	4
00714 0270                      A000            .word	$A000
00715 0272                        FF            .byte	$FF
00716 0273                        02            .byte	2
00717                                           ! 434  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00718 0274                        13            .byte	$13
00719 0275                        01            .byte	1
00720 0276                        05            .byte	5
00721 0277                        08            .byte	8
00722 0278                      A000            .word	$A000
00723 027A                        FF            .byte	$FF
00724 027B                        03            .byte	3
00725                                           ! 435  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00726 027C                        6A            .byte	$6A
00727 027D                        01            .byte	1
00728 027E                        04            .byte	4
00729 027F                        04            .byte	4
00730 0280                      A000            .word	$A000
00731 0282                        FF            .byte	$FF
00732 0283                        02            .byte	2
00733                                           ! 436 };
00734                                           !BCC_EOS
00735                                           ! 437 static Bit8u line_to_vpti[15 +1]={
00736                       00000284            _line_to_vpti:
00737                                           ! 438     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00738 0284                        17            .byte	$17
00739 0285                        17            .byte	$17
00740 0286                        18            .byte	$18
00741 0287                        18            .byte	$18
00742 0288                        04            .byte	4
00743 0289                        05            .byte	5
00744 028A                        06            .byte	6
00745 028B                        07            .byte	7
00746                                           ! 439     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00747 028C                        0D            .byte	$D
00748 028D                        0E            .byte	$E
00749 028E                        11            .byte	$11
00750 028F                        12            .byte	$12
00751 0290                        1A            .byte	$1A
00752 0291                        1B            .byte	$1B
00753 0292                        1C            .byte	$1C
00754 0293                        1D            .byte	$1D
00755                                           ! 440 };
00756                                           !BCC_EOS
00757                                           ! 441 static Bit8u dac_regs[3 +1]=
00758                                           ! 442 {0x3f,0x3f,0x3f,0xff};
00759                       00000294            _dac_regs:
00760 0294                        3F            .byte	$3F
00761 0295                        3F            .byte	$3F
00762 0296                        3F            .byte	$3F
00763 0297                        FF            .byte	$FF
00764                                           !BCC_EOS
00765                                           ! 443 typedef struct {
00766                                           ! 444     Bit8u twidth;
00767                                           !BCC_EOS
00768                                           ! 445     Bit8u theightm1;
00769                                           !BCC_EOS
00770                                           ! 446     Bit8u cheight;
00771                                           !BCC_EOS
00772                                           ! 447     Bit8u slength_l;
00773                                           !BCC_EOS
00774                                           ! 448 
00775                                           ! 448     Bit8u slength_h;
00776                                           !BCC_EOS
00777                                           ! 449     Bit8u sequ_regs[4];
00778                                           !BCC_EOS
00779                                           ! 450     Bit8u miscreg;
00780                                           !BCC_EOS
00781                                           ! 451     Bit8u crtc_regs[25];
00782                                           !BCC_EOS
00783                                           ! 452     Bit8u actl_regs[20];
00784                                           !BCC_EOS
00785                                           ! 453     Bit8u grdc_regs[9];
00786                                           !BCC_EOS
00787                                           ! 454 } VideoParamTableEntry;
00788                                           !BCC_EOS
00789                                           ! 455 static VideoParamTableEntry video_param_table[30] = {
00790                       00000298            _video_param_table:
00791                                           ! 456 {
00792                                           ! 457  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00793 0298                        00            .byte	0
00794 0299                        00            .byte	0
00795 029A                        00            .byte	0
00796 029B                        00            .byte	0
00797 029C                        00            .byte	0
00798 029D                        00            .byte	0
00799 029E                        00            .byte	0
00800 029F                        00            .byte	0
00801                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00802 02A0                        00            .byte	0
00803 02A1                        00            .byte	0
00804 02A2                        00            .byte	0
00805 02A3                        00            .byte	0
00806 02A4                        00            .byte	0
00807 02A5                        00            .byte	0
00808 02A6                        00            .byte	0
00809 02A7                        00            .byte	0
00810                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00811 02A8                        00            .byte	0
00812 02A9                        00            .byte	0
00813 02AA                        00            .byte	0
00814 02AB                        00            .byte	0
00815 02AC                        00            .byte	0
00816 02AD                        00            .byte	0
00817 02AE                        00            .byte	0
00818 02AF                        00            .byte	0
00819                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00820 02B0                        00            .byte	0
00821 02B1                        00            .byte	0
00822 02B2                        00            .byte	0
00823 02B3                        00            .byte	0
00824 02B4                        00            .byte	0
00825 02B5                        00            .byte	0
00826 02B6                        00            .byte	0
00827 02B7                        00            .byte	0
00828                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00829 02B8                        00            .byte	0
00830 02B9                        00            .byte	0
00831 02BA                        00            .byte	0
00832 02BB                        00            .byte	0
00833 02BC                        00            .byte	0
00834 02BD                        00            .byte	0
00835 02BE                        00            .byte	0
00836 02BF                        00            .byte	0
00837                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00838 02C0                        00            .byte	0
00839 02C1                        00            .byte	0
00840 02C2                        00            .byte	0
00841 02C3                        00            .byte	0
00842 02C4                        00            .byte	0
00843 02C5                        00            .byte	0
00844 02C6                        00            .byte	0
00845 02C7                        00            .byte	0
00846                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00847 02C8                        00            .byte	0
00848 02C9                        00            .byte	0
00849 02CA                        00            .byte	0
00850 02CB                        00            .byte	0
00851 02CC                        00            .byte	0
00852 02CD                        00            .byte	0
00853 02CE                        00            .byte	0
00854 02CF                        00            .byte	0
00855                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00856 02D0                        00            .byte	0
00857 02D1                        00            .byte	0
00858 02D2                        00            .byte	0
00859 02D3                        00            .byte	0
00860 02D4                        00            .byte	0
00861 02D5                        00            .byte	0
00862 02D6                        00            .byte	0
00863 02D7                        00            .byte	0
00864                                           ! 465 },
00865                                           ! 466 {
00866                                           ! 467  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00867 02D8                        00            .byte	0
00868 02D9                        00            .byte	0
00869 02DA                        00            .byte	0
00870 02DB                        00            .byte	0
00871 02DC                        00            .byte	0
00872 02DD                        00            .byte	0
00873 02DE                        00            .byte	0
00874 02DF                        00            .byte	0
00875                                           ! 468  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00876 02E0                        00            .byte	0
00877 02E1                        00            .byte	0
00878 02E2                        00            .byte	0
00879 02E3                        00            .byte	0
00880 02E4                        00            .byte	0
00881 02E5                        00            .byte	0
00882 02E6                        00            .byte	0
00883 02E7                        00            .byte	0
00884                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00885 02E8                        00            .byte	0
00886 02E9                        00            .byte	0
00887 02EA                        00            .byte	0
00888 02EB                        00            .byte	0
00889 02EC                        00            .byte	0
00890 02ED                        00            .byte	0
00891 02EE                        00            .byte	0
00892 02EF                        00            .byte	0
00893                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00894 02F0                        00            .byte	0
00895 02F1                        00            .byte	0
00896 02F2                        00            .byte	0
00897 02F3                        00            .byte	0
00898 02F4                        00            .byte	0
00899 02F5                        00            .byte	0
00900 02F6                        00            .byte	0
00901 02F7                        00            .byte	0
00902                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00903 02F8                        00            .byte	0
00904 02F9                        00            .byte	0
00905 02FA                        00            .byte	0
00906 02FB                        00            .byte	0
00907 02FC                        00            .byte	0
00908 02FD                        00            .byte	0
00909 02FE                        00            .byte	0
00910 02FF                        00            .byte	0
00911                                           ! 472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00912 0300                        00            .byte	0
00913 0301                        00            .byte	0
00914 0302                        00            .byte	0
00915 0303                        00            .byte	0
00916 0304                        00            .byte	0
00917 0305                        00            .byte	0
00918 0306                        00            .byte	0
00919 0307                        00            .byte	0
00920                                           ! 473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00921 0308                        00            .byte	0
00922 0309                        00            .byte	0
00923 030A                        00            .byte	0
00924 030B                        00            .byte	0
00925 030C                        00            .byte	0
00926 030D                        00            .byte	0
00927 030E                        00            .byte	0
00928 030F                        00            .byte	0
00929                                           ! 474  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00930 0310                        00            .byte	0
00931 0311                        00            .byte	0
00932 0312                        00            .byte	0
00933 0313                        00            .byte	0
00934 0314                        00            .byte	0
00935 0315                        00            .byte	0
00936 0316                        00            .byte	0
00937 0317                        00            .byte	0
00938                                           ! 475 },
00939                                           ! 476 {
00940                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00941 0318                        00            .byte	0
00942 0319                        00            .byte	0
00943 031A                        00            .byte	0
00944 031B                        00            .byte	0
00945 031C                        00            .byte	0
00946 031D                        00            .byte	0
00947 031E                        00            .byte	0
00948 031F                        00            .byte	0
00949                                           ! 478  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00950 0320                        00            .byte	0
00951 0321                        00            .byte	0
00952 0322                        00            .byte	0
00953 0323                        00            .byte	0
00954 0324                        00            .byte	0
00955 0325                        00            .byte	0
00956 0326                        00            .byte	0
00957 0327                        00            .byte	0
00958                                           ! 479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00959 0328                        00            .byte	0
00960 0329                        00            .byte	0
00961 032A                        00            .byte	0
00962 032B                        00            .byte	0
00963 032C                        00            .byte	0
00964 032D                        00            .byte	0
00965 032E                        00            .byte	0
00966 032F                        00            .byte	0
00967                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00968 0330                        00            .byte	0
00969 0331                        00            .byte	0
00970 0332                        00            .byte	0
00971 0333                        00            .byte	0
00972 0334                        00            .byte	0
00973 0335                        00            .byte	0
00974 0336                        00            .byte	0
00975 0337                        00            .byte	0
00976                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00977 0338                        00            .byte	0
00978 0339                        00            .byte	0
00979 033A                        00            .byte	0
00980 033B                        00            .byte	0
00981 033C                        00            .byte	0
00982 033D                        00            .byte	0
00983 033E                        00            .byte	0
00984 033F                        00            .byte	0
00985                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00986 0340                        00            .byte	0
00987 0341                        00            .byte	0
00988 0342                        00            .byte	0
00989 0343                        00            .byte	0
00990 0344                        00            .byte	0
00991 0345                        00            .byte	0
00992 0346                        00            .byte	0
00993 0347                        00            .byte	0
00994                                           ! 483  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00995 0348                        00            .byte	0
00996 0349                        00            .byte	0
00997 034A                        00            .byte	0
00998 034B                        00            .byte	0
00999 034C                        00            .byte	0
01000 034D                        00            .byte	0
01001 034E                        00            .byte	0
01002 034F                        00            .byte	0
01003                                           ! 484  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01004 0350                        00            .byte	0
01005 0351                        00            .byte	0
01006 0352                        00            .byte	0
01007 0353                        00            .byte	0
01008 0354                        00            .byte	0
01009 0355                        00            .byte	0
01010 0356                        00            .byte	0
01011 0357                        00            .byte	0
01012                                           ! 485 },
01013                                           ! 486 {
01014                                           ! 487  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01015 0358                        00            .byte	0
01016 0359                        00            .byte	0
01017 035A                        00            .byte	0
01018 035B                        00            .byte	0
01019 035C                        00            .byte	0
01020 035D                        00            .byte	0
01021 035E                        00            .byte	0
01022 035F                        00            .byte	0
01023                                           ! 488  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01024 0360                        00            .byte	0
01025 0361                        00            .byte	0
01026 0362                        00            .byte	0
01027 0363                        00            .byte	0
01028 0364                        00            .byte	0
01029 0365                        00            .byte	0
01030 0366                        00            .byte	0
01031 0367                        00            .byte	0
01032                                           ! 489  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01033 0368                        00            .byte	0
01034 0369                        00            .byte	0
01035 036A                        00            .byte	0
01036 036B                        00            .byte	0
01037 036C                        00            .byte	0
01038 036D                        00            .byte	0
01039 036E                        00            .byte	0
01040 036F                        00            .byte	0
01041                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01042 0370                        00            .byte	0
01043 0371                        00            .byte	0
01044 0372                        00            .byte	0
01045 0373                        00            .byte	0
01046 0374                        00            .byte	0
01047 0375                        00            .byte	0
01048 0376                        00            .byte	0
01049 0377                        00            .byte	0
01050                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01051 0378                        00            .byte	0
01052 0379                        00            .byte	0
01053 037A                        00            .byte	0
01054 037B                        00            .byte	0
01055 037C                        00            .byte	0
01056 037D                        00            .byte	0
01057 037E                        00            .byte	0
01058 037F                        00            .byte	0
01059                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01060 0380                        00            .byte	0
01061 0381                        00            .byte	0
01062 0382                        00            .byte	0
01063 0383                        00            .byte	0
01064 0384                        00            .byte	0
01065 0385                        00            .byte	0
01066 0386                        00            .byte	0
01067 0387                        00            .byte	0
01068                                           ! 493  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01069 0388                        00            .byte	0
01070 0389                        00            .byte	0
01071 038A                        00            .byte	0
01072 038B                        00            .byte	0
01073 038C                        00            .byte	0
01074 038D                        00            .byte	0
01075 038E                        00            .byte	0
01076 038F                        00            .byte	0
01077                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01078 0390                        00            .byte	0
01079 0391                        00            .byte	0
01080 0392                        00            .byte	0
01081 0393                        00            .byte	0
01082 0394                        00            .byte	0
01083 0395                        00            .byte	0
01084 0396                        00            .byte	0
01085 0397                        00            .byte	0
01086                                           ! 495 },
01087                                           ! 496 {
01088                                           ! 497  40, 24, 8, 0x00, 0x08,
01089 0398                        28            .byte	$28
01090 0399                        18            .byte	$18
01091 039A                        08            .byte	8
01092 039B                        00            .byte	0
01093 039C                        08            .byte	8
01094                                           ! 498  0x09, 0x03, 0x00, 0x02,
01095 039D                        09            .byte	9
01096 039E                        03            .byte	3
01097 039F                        00            .byte	0
01098 03A0                        02            .byte	2
01099                                           ! 499  0x63,
01100 03A1                        63            .byte	$63
01101                                           ! 500  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01102 03A2                        2D            .byte	$2D
01103 03A3                        27            .byte	$27
01104 03A4                        28            .byte	$28
01105 03A5                        90            .byte	$90
01106 03A6                        2B            .byte	$2B
01107 03A7                        80            .byte	$80
01108 03A8                        BF            .byte	$BF
01109 03A9                        1F            .byte	$1F
01110                                           ! 501  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01111 03AA                        00            .byte	0
01112 03AB                        C1            .byte	$C1
01113 03AC                        00            .byte	0
01114 03AD                        00            .byte	0
01115 03AE                        00            .byte	0
01116 03AF                        00            .byte	0
01117 03B0                        00            .byte	0
01118 03B1                        00            .byte	0
01119                                           ! 502  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01120 03B2                        9C            .byte	$9C
01121 03B3                        8E            .byte	$8E
01122 03B4                        8F            .byte	$8F
01123 03B5                        14            .byte	$14
01124 03B6                        00            .byte	0
01125 03B7                        96            .byte	$96
01126 03B8                        B9            .byte	$B9
01127 03B9                        A2            .byte	$A2
01128                                           ! 503  0xff,
01129 03BA                        FF            .byte	$FF
01130                                           ! 504  0x00, 0x13, 0x15, 0x17, 0x02, 0
01131 03BB                        00            .byte	0
01132 03BC                        13            .byte	$13
01133 03BD                        15            .byte	$15
01134 03BE                        17            .byte	$17
01135 03BF                        02            .byte	2
01136                                           ! 504 x04, 0x06, 0x07,
01137 03C0                        04            .byte	4
01138 03C1                        06            .byte	6
01139 03C2                        07            .byte	7
01140                                           ! 505  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01141 03C3                        10            .byte	$10
01142 03C4                        11            .byte	$11
01143 03C5                        12            .byte	$12
01144 03C6                        13            .byte	$13
01145 03C7                        14            .byte	$14
01146 03C8                        15            .byte	$15
01147 03C9                        16            .byte	$16
01148 03CA                        17            .byte	$17
01149                                           ! 506  0x01, 0x00, 0x03, 0x00,
01150 03CB                        01            .byte	1
01151 03CC                        00            .byte	0
01152 03CD                        03            .byte	3
01153 03CE                        00            .byte	0
01154                                           ! 507  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01155 03CF                        00            .byte	0
01156 03D0                        00            .byte	0
01157 03D1                        00            .byte	0
01158 03D2                        00            .byte	0
01159 03D3                        00            .byte	0
01160 03D4                        30            .byte	$30
01161 03D5                        0F            .byte	$F
01162 03D6                        0F            .byte	$F
01163 03D7                        FF            .byte	$FF
01164                                           ! 508 },
01165                                           ! 509 {
01166                                           ! 510  40, 24, 8, 0x00, 0x08,
01167 03D8                        28            .byte	$28
01168 03D9                        18            .byte	$18
01169 03DA                        08            .byte	8
01170 03DB                        00            .byte	0
01171 03DC                        08            .byte	8
01172                                           ! 511  0x09, 0x03, 0x00, 0x02,
01173 03DD                        09            .byte	9
01174 03DE                        03            .byte	3
01175 03DF                        00            .byte	0
01176 03E0                        02            .byte	2
01177                                           ! 512  0x63,
01178 03E1                        63            .byte	$63
01179                                           ! 513  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01180 03E2                        2D            .byte	$2D
01181 03E3                        27            .byte	$27
01182 03E4                        28            .byte	$28
01183 03E5                        90            .byte	$90
01184 03E6                        2B            .byte	$2B
01185 03E7                        80            .byte	$80
01186 03E8                        BF            .byte	$BF
01187 03E9                        1F            .byte	$1F
01188                                           ! 514  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01189 03EA                        00            .byte	0
01190 03EB                        C1            .byte	$C1
01191 03EC                        00            .byte	0
01192 03ED                        00            .byte	0
01193 03EE                        00            .byte	0
01194 03EF                        00            .byte	0
01195 03F0                        00            .byte	0
01196 03F1                        00            .byte	0
01197                                           ! 515  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01198 03F2                        9C            .byte	$9C
01199 03F3                        8E            .byte	$8E
01200 03F4                        8F            .byte	$8F
01201 03F5                        14            .byte	$14
01202 03F6                        00            .byte	0
01203 03F7                        96            .byte	$96
01204 03F8                        B9            .byte	$B9
01205 03F9                        A2            .byte	$A2
01206                                           ! 516  0xff,
01207 03FA                        FF            .byte	$FF
01208                                           ! 517  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01209 03FB                        00            .byte	0
01210 03FC                        13            .byte	$13
01211 03FD                        15            .byte	$15
01212 03FE                        17            .byte	$17
01213 03FF                        02            .byte	2
01214 0400                        04            .byte	4
01215 0401                        06            .byte	6
01216 0402                        07            .byte	7
01217                                           ! 518  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01218 0403                        10            .byte	$10
01219 0404                        11            .byte	$11
01220 0405                        12            .byte	$12
01221 0406                        13            .byte	$13
01222 0407                        14            .byte	$14
01223 0408                        15            .byte	$15
01224 0409                        16            .byte	$16
01225 040A                        17            .byte	$17
01226                                           ! 519  0x01, 0x00, 0x03, 0x00,
01227 040B                        01            .byte	1
01228 040C                        00            .byte	0
01229 040D                        03            .byte	3
01230 040E                        00            .byte	0
01231                                           ! 520  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01232 040F                        00            .byte	0
01233 0410                        00            .byte	0
01234 0411                        00            .byte	0
01235 0412                        00            .byte	0
01236 0413                        00            .byte	0
01237 0414                        30            .byte	$30
01238 0415                        0F            .byte	$F
01239 0416                        0F            .byte	$F
01240 0417                        FF            .byte	$FF
01241                                           ! 521 },
01242                                           ! 522 {
01243                                           ! 523  80, 24, 8, 0x00, 0x10,
01244 0418                        50            .byte	$50
01245 0419                        18            .byte	$18
01246 041A                        08            .byte	8
01247 041B                        00            .byte	0
01248 041C                        10            .byte	$10
01249                                           ! 524  0x01, 0x01, 0x00, 0x06,
01250 041D                        01            .byte	1
01251 041E                        01            .byte	1
01252 041F                        00            .byte	0
01253 0420                        06            .byte	6
01254                                           ! 525  0x63,
01255 0421                        63            .byte	$63
01256                                           ! 526  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01257 0422                        5F            .byte	$5F
01258 0423                        4F            .byte	$4F
01259 0424                        50            .byte	$50
01260 0425                        82            .byte	$82
01261 0426                        54            .byte	$54
01262 0427                        80            .byte	$80
01263 0428                        BF            .byte	$BF
01264 0429                        1F            .byte	$1F
01265                                           ! 527  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01266 042A                        00            .byte	0
01267 042B                        C1            .byte	$C1
01268 042C                        00            .byte	0
01269 042D                        00            .byte	0
01270 042E                        00            .byte	0
01271 042F                        00            .byte	0
01272 0430                        00            .byte	0
01273 0431                        00            .byte	0
01274                                           ! 528  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01275 0432                        9C            .byte	$9C
01276 0433                        8E            .byte	$8E
01277 0434                        8F            .byte	$8F
01278 0435                        28            .byte	$28
01279 0436                        00            .byte	0
01280 0437                        96            .byte	$96
01281 0438                        B9            .byte	$B9
01282 0439                        C2            .byte	$C2
01283                                           ! 529  0xff,
01284 043A                        FF            .byte	$FF
01285                                           ! 530  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01286 043B                        00            .byte	0
01287 043C                        17            .byte	$17
01288 043D                        17            .byte	$17
01289 043E                        17            .byte	$17
01290 043F                        17            .byte	$17
01291 0440                        17            .byte	$17
01292 0441                        17            .byte	$17
01293 0442                        17            .byte	$17
01294                                           ! 531  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01295 0443                        17            .byte	$17
01296 0444                        17            .byte	$17
01297 0445                        17            .byte	$17
01298 0446                        17            .byte	$17
01299 0447                        17            .byte	$17
01300 0448                        17            .byte	$17
01301 0449                        17            .byte	$17
01302 044A                        17            .byte	$17
01303                                           ! 532  0x01, 0x00, 0x01, 0x00,
01304 044B                        01            .byte	1
01305 044C                        00            .byte	0
01306 044D                        01            .byte	1
01307 044E                        00            .byte	0
01308                                           ! 533  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01309 044F                        00            .byte	0
01310 0450                        00            .byte	0
01311 0451                        00            .byte	0
01312 0452                        00            .byte	0
01313 0453                        00            .byte	0
01314 0454                        00            .byte	0
01315 0455                        0D            .byte	$D
01316 0456                        0F            .byte	$F
01317 0457                        FF            .byte	$FF
01318                                           ! 534 },
01319                                           ! 535 {
01320                                           ! 536  80, 24, 16, 0x00, 0x10,
01321 0458                        50            .byte	$50
01322 0459                        18            .byte	$18
01323 045A                        10            .byte	$10
01324 045B                        00            .byte	0
01325 045C                        10            .byte	$10
01326                                           ! 537  0x00, 0x03, 0x00, 0x02,
01327 045D                        00            .byte	0
01328 045E                        03            .byte	3
01329 045F                        00            .byte	0
01330 0460                        02            .byte	2
01331                                           ! 538  0x66,
01332 0461                        66            .byte	$66
01333                                           ! 539  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01334 0462                        5F            .byte	$5F
01335 0463                        4F            .byte	$4F
01336 0464                        50            .byte	$50
01337 0465                        82            .byte	$82
01338 0466                        55            .byte	$55
01339 0467                        81            .byte	$81
01340 0468                        BF            .byte	$BF
01341 0469                        1F            .byte	$1F
01342                                           ! 540  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01343 046A                        00            .byte	0
01344 046B                        4F            .byte	$4F
01345 046C                        0D            .byte	$D
01346 046D                        0E            .byte	$E
01347 046E                        00            .byte	0
01348 046F                        00            .byte	0
01349 0470                        00            .byte	0
01350 0471                        00            .byte	0
01351                                           ! 541  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01352 0472                        9C            .byte	$9C
01353 0473                        8E            .byte	$8E
01354 0474                        8F            .byte	$8F
01355 0475                        28            .byte	$28
01356 0476                        0F            .byte	$F
01357 0477                        96            .byte	$96
01358 0478                        B9            .byte	$B9
01359 0479                        A3            .byte	$A3
01360                                           ! 542  0xff,
01361 047A                        FF            .byte	$FF
01362                                           ! 543  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01363 047B                        00            .byte	0
01364 047C                        08            .byte	8
01365 047D                        08            .byte	8
01366 047E                        08            .byte	8
01367 047F                        08            .byte	8
01368 0480                        08            .byte	8
01369 0481                        08            .byte	8
01370 0482                        08            .byte	8
01371                                           ! 544  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01372 0483                        10            .byte	$10
01373 0484                        18            .byte	$18
01374 0485                        18            .byte	$18
01375 0486                        18            .byte	$18
01376 0487                        18            .byte	$18
01377 0488                        18            .byte	$18
01378 0489                        18            .byte	$18
01379 048A                        18            .byte	$18
01380                                           ! 545  0x0e, 0x00, 0x0f, 0x08,
01381 048B                        0E            .byte	$E
01382 048C                        00            .byte	0
01383 048D                        0F            .byte	$F
01384 048E                        08            .byte	8
01385                                           ! 546  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01386 048F                        00            .byte	0
01387 0490                        00            .byte	0
01388 0491                        00            .byte	0
01389 0492                        00            .byte	0
01390 0493                        00            .byte	0
01391 0494                        10            .byte	$10
01392 0495                        0A            .byte	$A
01393 0496                        0F            .byte	$F
01394 0497                        FF            .byte	$FF
01395                                           ! 547 },
01396                                           ! 548 {
01397                                           ! 549  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01398 0498                        00            .byte	0
01399 0499                        00            .byte	0
01400 049A                        00            .byte	0
01401 049B                        00            .byte	0
01402 049C                        00            .byte	0
01403 049D                        00            .byte	0
01404 049E                        00            .byte	0
01405 049F                        00            .byte	0
01406                                           ! 550  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01407 04A0                        00            .byte	0
01408 04A1                        00            .byte	0
01409 04A2                        00            .byte	0
01410 04A3                        00            .byte	0
01411 04A4                        00            .byte	0
01412 04A5                        00            .byte	0
01413 04A6                        00            .byte	0
01414 04A7                        00            .byte	0
01415                                           ! 551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01416 04A8                        00            .byte	0
01417 04A9                        00            .byte	0
01418 04AA                        00            .byte	0
01419 04AB                        00            .byte	0
01420 04AC                        00            .byte	0
01421 04AD                        00            .byte	0
01422 04AE                        00            .byte	0
01423 04AF                        00            .byte	0
01424                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01425 04B0                        00            .byte	0
01426 04B1                        00            .byte	0
01427 04B2                        00            .byte	0
01428 04B3                        00            .byte	0
01429 04B4                        00            .byte	0
01430 04B5                        00            .byte	0
01431 04B6                        00            .byte	0
01432 04B7                        00            .byte	0
01433                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01434 04B8                        00            .byte	0
01435 04B9                        00            .byte	0
01436 04BA                        00            .byte	0
01437 04BB                        00            .byte	0
01438 04BC                        00            .byte	0
01439 04BD                        00            .byte	0
01440 04BE                        00            .byte	0
01441 04BF                        00            .byte	0
01442                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01443 04C0                        00            .byte	0
01444 04C1                        00            .byte	0
01445 04C2                        00            .byte	0
01446 04C3                        00            .byte	0
01447 04C4                        00            .byte	0
01448 04C5                        00            .byte	0
01449 04C6                        00            .byte	0
01450 04C7                        00            .byte	0
01451                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01452 04C8                        00            .byte	0
01453 04C9                        00            .byte	0
01454 04CA                        00            .byte	0
01455 04CB                        00            .byte	0
01456 04CC                        00            .byte	0
01457 04CD                        00            .byte	0
01458 04CE                        00            .byte	0
01459 04CF                        00            .byte	0
01460                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01461 04D0                        00            .byte	0
01462 04D1                        00            .byte	0
01463 04D2                        00            .byte	0
01464 04D3                        00            .byte	0
01465 04D4                        00            .byte	0
01466 04D5                        00            .byte	0
01467 04D6                        00            .byte	0
01468 04D7                        00            .byte	0
01469                                           ! 557 },
01470                                           ! 558 {
01471                                           ! 559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01472 04D8                        00            .byte	0
01473 04D9                        00            .byte	0
01474 04DA                        00            .byte	0
01475 04DB                        00            .byte	0
01476 04DC                        00            .byte	0
01477 04DD                        00            .byte	0
01478 04DE                        00            .byte	0
01479 04DF                        00            .byte	0
01480                                           ! 560  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01481 04E0                        00            .byte	0
01482 04E1                        00            .byte	0
01483 04E2                        00            .byte	0
01484 04E3                        00            .byte	0
01485 04E4                        00            .byte	0
01486 04E5                        00            .byte	0
01487 04E6                        00            .byte	0
01488 04E7                        00            .byte	0
01489                                           ! 561  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01490 04E8                        00            .byte	0
01491 04E9                        00            .byte	0
01492 04EA                        00            .byte	0
01493 04EB                        00            .byte	0
01494 04EC                        00            .byte	0
01495 04ED                        00            .byte	0
01496 04EE                        00            .byte	0
01497 04EF                        00            .byte	0
01498                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01499 04F0                        00            .byte	0
01500 04F1                        00            .byte	0
01501 04F2                        00            .byte	0
01502 04F3                        00            .byte	0
01503 04F4                        00            .byte	0
01504 04F5                        00            .byte	0
01505 04F6                        00            .byte	0
01506 04F7                        00            .byte	0
01507                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01508 04F8                        00            .byte	0
01509 04F9                        00            .byte	0
01510 04FA                        00            .byte	0
01511 04FB                        00            .byte	0
01512 04FC                        00            .byte	0
01513 04FD                        00            .byte	0
01514 04FE                        00            .byte	0
01515 04FF                        00            .byte	0
01516                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01517 0500                        00            .byte	0
01518 0501                        00            .byte	0
01519 0502                        00            .byte	0
01520 0503                        00            .byte	0
01521 0504                        00            .byte	0
01522 0505                        00            .byte	0
01523 0506                        00            .byte	0
01524 0507                        00            .byte	0
01525                                           ! 565  0x00, 0x00, 0x00, 0x00, 0
01526 0508                        00            .byte	0
01527 0509                        00            .byte	0
01528 050A                        00            .byte	0
01529 050B                        00            .byte	0
01530                                           ! 565 x00, 0x00, 0x00, 0x00,
01531 050C                        00            .byte	0
01532 050D                        00            .byte	0
01533 050E                        00            .byte	0
01534 050F                        00            .byte	0
01535                                           ! 566  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01536 0510                        00            .byte	0
01537 0511                        00            .byte	0
01538 0512                        00            .byte	0
01539 0513                        00            .byte	0
01540 0514                        00            .byte	0
01541 0515                        00            .byte	0
01542 0516                        00            .byte	0
01543 0517                        00            .byte	0
01544                                           ! 567 },
01545                                           ! 568 {
01546                                           ! 569  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01547 0518                        00            .byte	0
01548 0519                        00            .byte	0
01549 051A                        00            .byte	0
01550 051B                        00            .byte	0
01551 051C                        00            .byte	0
01552 051D                        00            .byte	0
01553 051E                        00            .byte	0
01554 051F                        00            .byte	0
01555                                           ! 570  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01556 0520                        00            .byte	0
01557 0521                        00            .byte	0
01558 0522                        00            .byte	0
01559 0523                        00            .byte	0
01560 0524                        00            .byte	0
01561 0525                        00            .byte	0
01562 0526                        00            .byte	0
01563 0527                        00            .byte	0
01564                                           ! 571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01565 0528                        00            .byte	0
01566 0529                        00            .byte	0
01567 052A                        00            .byte	0
01568 052B                        00            .byte	0
01569 052C                        00            .byte	0
01570 052D                        00            .byte	0
01571 052E                        00            .byte	0
01572 052F                        00            .byte	0
01573                                           ! 572  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01574 0530                        00            .byte	0
01575 0531                        00            .byte	0
01576 0532                        00            .byte	0
01577 0533                        00            .byte	0
01578 0534                        00            .byte	0
01579 0535                        00            .byte	0
01580 0536                        00            .byte	0
01581 0537                        00            .byte	0
01582                                           ! 573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01583 0538                        00            .byte	0
01584 0539                        00            .byte	0
01585 053A                        00            .byte	0
01586 053B                        00            .byte	0
01587 053C                        00            .byte	0
01588 053D                        00            .byte	0
01589 053E                        00            .byte	0
01590 053F                        00            .byte	0
01591                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01592 0540                        00            .byte	0
01593 0541                        00            .byte	0
01594 0542                        00            .byte	0
01595 0543                        00            .byte	0
01596 0544                        00            .byte	0
01597 0545                        00            .byte	0
01598 0546                        00            .byte	0
01599 0547                        00            .byte	0
01600                                           ! 575  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01601 0548                        00            .byte	0
01602 0549                        00            .byte	0
01603 054A                        00            .byte	0
01604 054B                        00            .byte	0
01605 054C                        00            .byte	0
01606 054D                        00            .byte	0
01607 054E                        00            .byte	0
01608 054F                        00            .byte	0
01609                                           ! 576  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01610 0550                        00            .byte	0
01611 0551                        00            .byte	0
01612 0552                        00            .byte	0
01613 0553                        00            .byte	0
01614 0554                        00            .byte	0
01615 0555                        00            .byte	0
01616 0556                        00            .byte	0
01617 0557                        00            .byte	0
01618                                           ! 577 },
01619                                           ! 578 {
01620                                           ! 579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01621 0558                        00            .byte	0
01622 0559                        00            .byte	0
01623 055A                        00            .byte	0
01624 055B                        00            .byte	0
01625 055C                        00            .byte	0
01626 055D                        00            .byte	0
01627 055E                        00            .byte	0
01628 055F                        00            .byte	0
01629                                           ! 580  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01630 0560                        00            .byte	0
01631 0561                        00            .byte	0
01632 0562                        00            .byte	0
01633 0563                        00            .byte	0
01634 0564                        00            .byte	0
01635 0565                        00            .byte	0
01636 0566                        00            .byte	0
01637 0567                        00            .byte	0
01638                                           ! 581  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01639 0568                        00            .byte	0
01640 0569                        00            .byte	0
01641 056A                        00            .byte	0
01642 056B                        00            .byte	0
01643 056C                        00            .byte	0
01644 056D                        00            .byte	0
01645 056E                        00            .byte	0
01646 056F                        00            .byte	0
01647                                           ! 582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01648 0570                        00            .byte	0
01649 0571                        00            .byte	0
01650 0572                        00            .byte	0
01651 0573                        00            .byte	0
01652 0574                        00            .byte	0
01653 0575                        00            .byte	0
01654 0576                        00            .byte	0
01655 0577                        00            .byte	0
01656                                           ! 583  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01657 0578                        00            .byte	0
01658 0579                        00            .byte	0
01659 057A                        00            .byte	0
01660 057B                        00            .byte	0
01661 057C                        00            .byte	0
01662 057D                        00            .byte	0
01663 057E                        00            .byte	0
01664 057F                        00            .byte	0
01665                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01666 0580                        00            .byte	0
01667 0581                        00            .byte	0
01668 0582                        00            .byte	0
01669 0583                        00            .byte	0
01670 0584                        00            .byte	0
01671 0585                        00            .byte	0
01672 0586                        00            .byte	0
01673 0587                        00            .byte	0
01674                                           ! 585  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01675 0588                        00            .byte	0
01676 0589                        00            .byte	0
01677 058A                        00            .byte	0
01678 058B                        00            .byte	0
01679 058C                        00            .byte	0
01680 058D                        00            .byte	0
01681 058E                        00            .byte	0
01682 058F                        00            .byte	0
01683                                           ! 586  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01684 0590                        00            .byte	0
01685 0591                        00            .byte	0
01686 0592                        00            .byte	0
01687 0593                        00            .byte	0
01688 0594                        00            .byte	0
01689 0595                        00            .byte	0
01690 0596                        00            .byte	0
01691 0597                        00            .byte	0
01692                                           ! 587 },
01693                                           ! 588 {
01694                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01695 0598                        00            .byte	0
01696 0599                        00            .byte	0
01697 059A                        00            .byte	0
01698 059B                        00            .byte	0
01699 059C                        00            .byte	0
01700 059D                        00            .byte	0
01701 059E                        00            .byte	0
01702 059F                        00            .byte	0
01703                                           ! 590  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01704 05A0                        00            .byte	0
01705 05A1                        00            .byte	0
01706 05A2                        00            .byte	0
01707 05A3                        00            .byte	0
01708 05A4                        00            .byte	0
01709 05A5                        00            .byte	0
01710 05A6                        00            .byte	0
01711 05A7                        00            .byte	0
01712                                           ! 591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01713 05A8                        00            .byte	0
01714 05A9                        00            .byte	0
01715 05AA                        00            .byte	0
01716 05AB                        00            .byte	0
01717 05AC                        00            .byte	0
01718 05AD                        00            .byte	0
01719 05AE                        00            .byte	0
01720 05AF                        00            .byte	0
01721                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01722 05B0                        00            .byte	0
01723 05B1                        00            .byte	0
01724 05B2                        00            .byte	0
01725 05B3                        00            .byte	0
01726 05B4                        00            .byte	0
01727 05B5                        00            .byte	0
01728 05B6                        00            .byte	0
01729 05B7                        00            .byte	0
01730                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01731 05B8                        00            .byte	0
01732 05B9                        00            .byte	0
01733 05BA                        00            .byte	0
01734 05BB                        00            .byte	0
01735 05BC                        00            .byte	0
01736 05BD                        00            .byte	0
01737 05BE                        00            .byte	0
01738 05BF                        00            .byte	0
01739                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01740 05C0                        00            .byte	0
01741 05C1                        00            .byte	0
01742 05C2                        00            .byte	0
01743 05C3                        00            .byte	0
01744 05C4                        00            .byte	0
01745 05C5                        00            .byte	0
01746 05C6                        00            .byte	0
01747 05C7                        00            .byte	0
01748                                           ! 595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01749 05C8                        00            .byte	0
01750 05C9                        00            .byte	0
01751 05CA                        00            .byte	0
01752 05CB                        00            .byte	0
01753 05CC                        00            .byte	0
01754 05CD                        00            .byte	0
01755 05CE                        00            .byte	0
01756 05CF                        00            .byte	0
01757                                           ! 596  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01758 05D0                        00            .byte	0
01759 05D1                        00            .byte	0
01760 05D2                        00            .byte	0
01761 05D3                        00            .byte	0
01762 05D4                        00            .byte	0
01763 05D5                        00            .byte	0
01764 05D6                        00            .byte	0
01765 05D7                        00            .byte	0
01766                                           ! 597 },
01767                                           ! 598 {
01768                                           ! 599  40, 24, 8, 0x00, 0x20,
01769 05D8                        28            .byte	$28
01770 05D9                        18            .byte	$18
01771 05DA                        08            .byte	8
01772 05DB                        00            .byte	0
01773 05DC                        20            .byte	$20
01774                                           ! 600  0x09, 0x0f, 0x00, 0x06,
01775 05DD                        09            .byte	9
01776 05DE                        0F            .byte	$F
01777 05DF                        00            .byte	0
01778 05E0                        06            .byte	6
01779                                           ! 601  0x63,
01780 05E1                        63            .byte	$63
01781                                           ! 602  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01782 05E2                        2D            .byte	$2D
01783 05E3                        27            .byte	$27
01784 05E4                        28            .byte	$28
01785 05E5                        90            .byte	$90
01786 05E6                        2B            .byte	$2B
01787 05E7                        80            .byte	$80
01788 05E8                        BF            .byte	$BF
01789 05E9                        1F            .byte	$1F
01790                                           ! 603  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01791 05EA                        00            .byte	0
01792 05EB                        C0            .byte	$C0
01793 05EC                        00            .byte	0
01794 05ED                        00            .byte	0
01795 05EE                        00            .byte	0
01796 05EF                        00            .byte	0
01797 05F0                        00            .byte	0
01798 05F1                        00            .byte	0
01799                                           ! 604  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01800 05F2                        9C            .byte	$9C
01801 05F3                        8E            .byte	$8E
01802 05F4                        8F            .byte	$8F
01803 05F5                        14            .byte	$14
01804 05F6                        00            .byte	0
01805 05F7                        96            .byte	$96
01806 05F8                        B9            .byte	$B9
01807 05F9                        E3            .byte	$E3
01808                                           ! 605  0xff,
01809 05FA                        FF            .byte	$FF
01810                                           ! 606  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01811 05FB                        00            .byte	0
01812 05FC                        01            .byte	1
01813 05FD                        02            .byte	2
01814 05FE                        03            .byte	3
01815 05FF                        04            .byte	4
01816 0600                        05            .byte	5
01817 0601                        06            .byte	6
01818 0602                        07            .byte	7
01819                                           ! 607  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01820 0603                        10            .byte	$10
01821 0604                        11            .byte	$11
01822 0605                        12            .byte	$12
01823 0606                        13            .byte	$13
01824 0607                        14            .byte	$14
01825 0608                        15            .byte	$15
01826 0609                        16            .byte	$16
01827 060A                        17            .byte	$17
01828                                           ! 608  0x01, 0x00, 0x0f, 0x00,
01829 060B                        01            .byte	1
01830 060C                        00            .byte	0
01831 060D                        0F            .byte	$F
01832 060E                        00            .byte	0
01833                                           ! 609  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01834 060F                        00            .byte	0
01835 0610                        00            .byte	0
01836 0611                        00            .byte	0
01837 0612                        00            .byte	0
01838 0613                        00            .byte	0
01839 0614                        00            .byte	0
01840 0615                        05            .byte	5
01841 0616                        0F            .byte	$F
01842 0617                        FF            .byte	$FF
01843                                           ! 610 },
01844                                           ! 611 {
01845                                           ! 612  80, 24, 8, 0x00, 0x40,
01846 0618                        50            .byte	$50
01847 0619                        18            .byte	$18
01848 061A                        08            .byte	8
01849 061B                        00            .byte	0
01850 061C                        40            .byte	$40
01851                                           ! 613  0x01, 0x0f, 0x00, 0x06,
01852 061D                        01            .byte	1
01853 061E                        0F            .byte	$F
01854 061F                        00            .byte	0
01855 0620                        06            .byte	6
01856                                           ! 614  0x63,
01857 0621                        63            .byte	$63
01858                                           ! 615  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01859 0622                        5F            .byte	$5F
01860 0623                        4F            .byte	$4F
01861 0624                        50            .byte	$50
01862 0625                        82            .byte	$82
01863 0626                        54            .byte	$54
01864 0627                        80            .byte	$80
01865 0628                        BF            .byte	$BF
01866 0629                        1F            .byte	$1F
01867                                           ! 616  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01868 062A                        00            .byte	0
01869 062B                        C0            .byte	$C0
01870 062C                        00            .byte	0
01871 062D                        00            .byte	0
01872 062E                        00            .byte	0
01873 062F                        00            .byte	0
01874 0630                        00            .byte	0
01875 0631                        00            .byte	0
01876                                           ! 617  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01877 0632                        9C            .byte	$9C
01878 0633                        8E            .byte	$8E
01879 0634                        8F            .byte	$8F
01880 0635                        28            .byte	$28
01881 0636                        00            .byte	0
01882 0637                        96            .byte	$96
01883 0638                        B9            .byte	$B9
01884 0639                        E3            .byte	$E3
01885                                           ! 618  0xff,
01886 063A                        FF            .byte	$FF
01887                                           ! 619  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01888 063B                        00            .byte	0
01889 063C                        01            .byte	1
01890 063D                        02            .byte	2
01891 063E                        03            .byte	3
01892 063F                        04            .byte	4
01893 0640                        05            .byte	5
01894 0641                        06            .byte	6
01895 0642                        07            .byte	7
01896                                           ! 620  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01897 0643                        10            .byte	$10
01898 0644                        11            .byte	$11
01899 0645                        12            .byte	$12
01900 0646                        13            .byte	$13
01901 0647                        14            .byte	$14
01902 0648                        15            .byte	$15
01903 0649                        16            .byte	$16
01904 064A                        17            .byte	$17
01905                                           ! 621  0x01, 0x00, 0x0f, 0x00,
01906 064B                        01            .byte	1
01907 064C                        00            .byte	0
01908 064D                        0F            .byte	$F
01909 064E                        00            .byte	0
01910                                           ! 622  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01911 064F                        00            .byte	0
01912 0650                        00            .byte	0
01913 0651                        00            .byte	0
01914 0652                        00            .byte	0
01915 0653                        00            .byte	0
01916 0654                        00            .byte	0
01917 0655                        05            .byte	5
01918 0656                        0F            .byte	$F
01919                                           ! 622 
01920 0657                        FF            .byte	$FF
01921                                           ! 623 },
01922                                           ! 624 {
01923                                           ! 625  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01924 0658                        00            .byte	0
01925 0659                        00            .byte	0
01926 065A                        00            .byte	0
01927 065B                        00            .byte	0
01928 065C                        00            .byte	0
01929 065D                        00            .byte	0
01930 065E                        00            .byte	0
01931 065F                        00            .byte	0
01932                                           ! 626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01933 0660                        00            .byte	0
01934 0661                        00            .byte	0
01935 0662                        00            .byte	0
01936 0663                        00            .byte	0
01937 0664                        00            .byte	0
01938 0665                        00            .byte	0
01939 0666                        00            .byte	0
01940 0667                        00            .byte	0
01941                                           ! 627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01942 0668                        00            .byte	0
01943 0669                        00            .byte	0
01944 066A                        00            .byte	0
01945 066B                        00            .byte	0
01946 066C                        00            .byte	0
01947 066D                        00            .byte	0
01948 066E                        00            .byte	0
01949 066F                        00            .byte	0
01950                                           ! 628  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01951 0670                        00            .byte	0
01952 0671                        00            .byte	0
01953 0672                        00            .byte	0
01954 0673                        00            .byte	0
01955 0674                        00            .byte	0
01956 0675                        00            .byte	0
01957 0676                        00            .byte	0
01958 0677                        00            .byte	0
01959                                           ! 629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01960 0678                        00            .byte	0
01961 0679                        00            .byte	0
01962 067A                        00            .byte	0
01963 067B                        00            .byte	0
01964 067C                        00            .byte	0
01965 067D                        00            .byte	0
01966 067E                        00            .byte	0
01967 067F                        00            .byte	0
01968                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01969 0680                        00            .byte	0
01970 0681                        00            .byte	0
01971 0682                        00            .byte	0
01972 0683                        00            .byte	0
01973 0684                        00            .byte	0
01974 0685                        00            .byte	0
01975 0686                        00            .byte	0
01976 0687                        00            .byte	0
01977                                           ! 631  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01978 0688                        00            .byte	0
01979 0689                        00            .byte	0
01980 068A                        00            .byte	0
01981 068B                        00            .byte	0
01982 068C                        00            .byte	0
01983 068D                        00            .byte	0
01984 068E                        00            .byte	0
01985 068F                        00            .byte	0
01986                                           ! 632  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01987 0690                        00            .byte	0
01988 0691                        00            .byte	0
01989 0692                        00            .byte	0
01990 0693                        00            .byte	0
01991 0694                        00            .byte	0
01992 0695                        00            .byte	0
01993 0696                        00            .byte	0
01994 0697                        00            .byte	0
01995                                           ! 633 },
01996                                           ! 634 {
01997                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01998 0698                        00            .byte	0
01999 0699                        00            .byte	0
02000 069A                        00            .byte	0
02001 069B                        00            .byte	0
02002 069C                        00            .byte	0
02003 069D                        00            .byte	0
02004 069E                        00            .byte	0
02005 069F                        00            .byte	0
02006                                           ! 636  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02007 06A0                        00            .byte	0
02008 06A1                        00            .byte	0
02009 06A2                        00            .byte	0
02010 06A3                        00            .byte	0
02011 06A4                        00            .byte	0
02012 06A5                        00            .byte	0
02013 06A6                        00            .byte	0
02014 06A7                        00            .byte	0
02015                                           ! 637  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02016 06A8                        00            .byte	0
02017 06A9                        00            .byte	0
02018 06AA                        00            .byte	0
02019 06AB                        00            .byte	0
02020 06AC                        00            .byte	0
02021 06AD                        00            .byte	0
02022 06AE                        00            .byte	0
02023 06AF                        00            .byte	0
02024                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02025 06B0                        00            .byte	0
02026 06B1                        00            .byte	0
02027 06B2                        00            .byte	0
02028 06B3                        00            .byte	0
02029 06B4                        00            .byte	0
02030 06B5                        00            .byte	0
02031 06B6                        00            .byte	0
02032 06B7                        00            .byte	0
02033                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02034 06B8                        00            .byte	0
02035 06B9                        00            .byte	0
02036 06BA                        00            .byte	0
02037 06BB                        00            .byte	0
02038 06BC                        00            .byte	0
02039 06BD                        00            .byte	0
02040 06BE                        00            .byte	0
02041 06BF                        00            .byte	0
02042                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02043 06C0                        00            .byte	0
02044 06C1                        00            .byte	0
02045 06C2                        00            .byte	0
02046 06C3                        00            .byte	0
02047 06C4                        00            .byte	0
02048 06C5                        00            .byte	0
02049 06C6                        00            .byte	0
02050 06C7                        00            .byte	0
02051                                           ! 641  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02052 06C8                        00            .byte	0
02053 06C9                        00            .byte	0
02054 06CA                        00            .byte	0
02055 06CB                        00            .byte	0
02056 06CC                        00            .byte	0
02057 06CD                        00            .byte	0
02058 06CE                        00            .byte	0
02059 06CF                        00            .byte	0
02060                                           ! 642  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02061 06D0                        00            .byte	0
02062 06D1                        00            .byte	0
02063 06D2                        00            .byte	0
02064 06D3                        00            .byte	0
02065 06D4                        00            .byte	0
02066 06D5                        00            .byte	0
02067 06D6                        00            .byte	0
02068 06D7                        00            .byte	0
02069                                           ! 643 },
02070                                           ! 644 {
02071                                           ! 645  80, 24, 14, 0x00, 0x80,
02072 06D8                        50            .byte	$50
02073 06D9                        18            .byte	$18
02074 06DA                        0E            .byte	$E
02075 06DB                        00            .byte	0
02076 06DC                        80            .byte	$80
02077                                           ! 646  0x01, 0x0f, 0x00, 0x06,
02078 06DD                        01            .byte	1
02079 06DE                        0F            .byte	$F
02080 06DF                        00            .byte	0
02081 06E0                        06            .byte	6
02082                                           ! 647  0xa3,
02083 06E1                        A3            .byte	$A3
02084                                           ! 648  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02085 06E2                        5F            .byte	$5F
02086 06E3                        4F            .byte	$4F
02087 06E4                        50            .byte	$50
02088 06E5                        82            .byte	$82
02089 06E6                        54            .byte	$54
02090 06E7                        80            .byte	$80
02091 06E8                        BF            .byte	$BF
02092 06E9                        1F            .byte	$1F
02093                                           ! 649  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02094 06EA                        00            .byte	0
02095 06EB                        40            .byte	$40
02096 06EC                        00            .byte	0
02097 06ED                        00            .byte	0
02098 06EE                        00            .byte	0
02099 06EF                        00            .byte	0
02100 06F0                        00            .byte	0
02101 06F1                        00            .byte	0
02102                                           ! 650  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02103 06F2                        83            .byte	$83
02104 06F3                        85            .byte	$85
02105 06F4                        5D            .byte	$5D
02106 06F5                        28            .byte	$28
02107 06F6                        0F            .byte	$F
02108 06F7                        63            .byte	$63
02109 06F8                        BA            .byte	$BA
02110 06F9                        E3            .byte	$E3
02111                                           ! 651  0xff,
02112 06FA                        FF            .byte	$FF
02113                                           ! 652  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02114 06FB                        00            .byte	0
02115 06FC                        08            .byte	8
02116 06FD                        00            .byte	0
02117 06FE                        00            .byte	0
02118 06FF                        18            .byte	$18
02119 0700                        18            .byte	$18
02120 0701                        00            .byte	0
02121 0702                        00            .byte	0
02122                                           ! 653  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02123 0703                        00            .byte	0
02124 0704                        08            .byte	8
02125 0705                        00            .byte	0
02126 0706                        00            .byte	0
02127 0707                        00            .byte	0
02128 0708                        18            .byte	$18
02129 0709                        00            .byte	0
02130 070A                        00            .byte	0
02131                                           ! 654  0x01, 0x00, 0x01, 0x00,
02132 070B                        01            .byte	1
02133 070C                        00            .byte	0
02134 070D                        01            .byte	1
02135 070E                        00            .byte	0
02136                                           ! 655  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02137 070F                        00            .byte	0
02138 0710                        00            .byte	0
02139 0711                        00            .byte	0
02140 0712                        00            .byte	0
02141 0713                        00            .byte	0
02142 0714                        00            .byte	0
02143 0715                        05            .byte	5
02144 0716                        0F            .byte	$F
02145 0717                        FF            .byte	$FF
02146                                           ! 656 },
02147                                           ! 657 {
02148                                           ! 658  80, 24, 14, 0x00, 0x80,
02149 0718                        50            .byte	$50
02150 0719                        18            .byte	$18
02151 071A                        0E            .byte	$E
02152 071B                        00            .byte	0
02153 071C                        80            .byte	$80
02154                                           ! 659  0x01, 0x0f, 0x00, 0x06,
02155 071D                        01            .byte	1
02156 071E                        0F            .byte	$F
02157 071F                        00            .byte	0
02158 0720                        06            .byte	6
02159                                           ! 660  0xa3,
02160 0721                        A3            .byte	$A3
02161                                           ! 661  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02162 0722                        5F            .byte	$5F
02163 0723                        4F            .byte	$4F
02164 0724                        50            .byte	$50
02165 0725                        82            .byte	$82
02166 0726                        54            .byte	$54
02167 0727                        80            .byte	$80
02168 0728                        BF            .byte	$BF
02169 0729                        1F            .byte	$1F
02170                                           ! 662  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02171 072A                        00            .byte	0
02172 072B                        40            .byte	$40
02173 072C                        00            .byte	0
02174 072D                        00            .byte	0
02175 072E                        00            .byte	0
02176 072F                        00            .byte	0
02177 0730                        00            .byte	0
02178 0731                        00            .byte	0
02179                                           ! 663  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02180 0732                        83            .byte	$83
02181 0733                        85            .byte	$85
02182 0734                        5D            .byte	$5D
02183 0735                        28            .byte	$28
02184 0736                        0F            .byte	$F
02185 0737                        63            .byte	$63
02186 0738                        BA            .byte	$BA
02187 0739                        E3            .byte	$E3
02188                                           ! 664  0xff,
02189 073A                        FF            .byte	$FF
02190                                           ! 665  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02191 073B                        00            .byte	0
02192 073C                        01            .byte	1
02193 073D                        02            .byte	2
02194 073E                        03            .byte	3
02195 073F                        04            .byte	4
02196 0740                        05            .byte	5
02197 0741                        14            .byte	$14
02198 0742                        07            .byte	7
02199                                           ! 666  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02200 0743                        38            .byte	$38
02201 0744                        39            .byte	$39
02202 0745                        3A            .byte	$3A
02203 0746                        3B            .byte	$3B
02204 0747                        3C            .byte	$3C
02205 0748                        3D            .byte	$3D
02206 0749                        3E            .byte	$3E
02207 074A                        3F            .byte	$3F
02208                                           ! 667  0x01, 0x00, 0x0f, 0x00,
02209 074B                        01            .byte	1
02210 074C                        00            .byte	0
02211 074D                        0F            .byte	$F
02212 074E                        00            .byte	0
02213                                           ! 668  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02214 074F                        00            .byte	0
02215 0750                        00            .byte	0
02216 0751                        00            .byte	0
02217 0752                        00            .byte	0
02218 0753                        00            .byte	0
02219 0754                        00            .byte	0
02220 0755                        05            .byte	5
02221 0756                        0F            .byte	$F
02222 0757                        FF            .byte	$FF
02223                                           ! 669 },
02224                                           ! 670 {
02225                                           ! 671  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02226 0758                        00            .byte	0
02227 0759                        00            .byte	0
02228 075A                        00            .byte	0
02229 075B                        00            .byte	0
02230 075C                        00            .byte	0
02231 075D                        00            .byte	0
02232 075E                        00            .byte	0
02233 075F                        00            .byte	0
02234                                           ! 672  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02235 0760                        00            .byte	0
02236 0761                        00            .byte	0
02237 0762                        00            .byte	0
02238 0763                        00            .byte	0
02239 0764                        00            .byte	0
02240 0765                        00            .byte	0
02241 0766                        00            .byte	0
02242 0767                        00            .byte	0
02243                                           ! 673  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02244 0768                        00            .byte	0
02245 0769                        00            .byte	0
02246 076A                        00            .byte	0
02247 076B                        00            .byte	0
02248 076C                        00            .byte	0
02249 076D                        00            .byte	0
02250 076E                        00            .byte	0
02251 076F                        00            .byte	0
02252                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02253 0770                        00            .byte	0
02254 0771                        00            .byte	0
02255 0772                        00            .byte	0
02256 0773                        00            .byte	0
02257 0774                        00            .byte	0
02258 0775                        00            .byte	0
02259 0776                        00            .byte	0
02260 0777                        00            .byte	0
02261                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02262 0778                        00            .byte	0
02263 0779                        00            .byte	0
02264 077A                        00            .byte	0
02265 077B                        00            .byte	0
02266 077C                        00            .byte	0
02267 077D                        00            .byte	0
02268 077E                        00            .byte	0
02269 077F                        00            .byte	0
02270                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02271 0780                        00            .byte	0
02272 0781                        00            .byte	0
02273 0782                        00            .byte	0
02274 0783                        00            .byte	0
02275 0784                        00            .byte	0
02276 0785                        00            .byte	0
02277 0786                        00            .byte	0
02278 0787                        00            .byte	0
02279                                           ! 677  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02280 0788                        00            .byte	0
02281 0789                        00            .byte	0
02282 078A                        00            .byte	0
02283 078B                        00            .byte	0
02284 078C                        00            .byte	0
02285 078D                        00            .byte	0
02286 078E                        00            .byte	0
02287 078F                        00            .byte	0
02288                                           ! 678  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02289 0790                        00            .byte	0
02290 0791                        00            .byte	0
02291 0792                        00            .byte	0
02292 0793                        00            .byte	0
02293 0794                        00            .byte	0
02294 0795                        00            .byte	0
02295 0796                        00            .byte	0
02296 0797                        00            .byte	0
02297                                           ! 679 },
02298                                           ! 680 {
02299                                           ! 681  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02300 0798                        00            .byte	0
02301 0799                        00            .byte	0
02302 079A                        00            .byte	0
02303 079B                        00            .byte	0
02304 079C                        00            .byte	0
02305 079D                        00            .byte	0
02306 079E                        00            .byte	0
02307 079F                        00            .byte	0
02308                                           ! 682  0x00, 0x00, 0
02309 07A0                        00            .byte	0
02310 07A1                        00            .byte	0
02311                                           ! 682 x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02312 07A2                        00            .byte	0
02313 07A3                        00            .byte	0
02314 07A4                        00            .byte	0
02315 07A5                        00            .byte	0
02316 07A6                        00            .byte	0
02317 07A7                        00            .byte	0
02318                                           ! 683  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02319 07A8                        00            .byte	0
02320 07A9                        00            .byte	0
02321 07AA                        00            .byte	0
02322 07AB                        00            .byte	0
02323 07AC                        00            .byte	0
02324 07AD                        00            .byte	0
02325 07AE                        00            .byte	0
02326 07AF                        00            .byte	0
02327                                           ! 684  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02328 07B0                        00            .byte	0
02329 07B1                        00            .byte	0
02330 07B2                        00            .byte	0
02331 07B3                        00            .byte	0
02332 07B4                        00            .byte	0
02333 07B5                        00            .byte	0
02334 07B6                        00            .byte	0
02335 07B7                        00            .byte	0
02336                                           ! 685  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02337 07B8                        00            .byte	0
02338 07B9                        00            .byte	0
02339 07BA                        00            .byte	0
02340 07BB                        00            .byte	0
02341 07BC                        00            .byte	0
02342 07BD                        00            .byte	0
02343 07BE                        00            .byte	0
02344 07BF                        00            .byte	0
02345                                           ! 686  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02346 07C0                        00            .byte	0
02347 07C1                        00            .byte	0
02348 07C2                        00            .byte	0
02349 07C3                        00            .byte	0
02350 07C4                        00            .byte	0
02351 07C5                        00            .byte	0
02352 07C6                        00            .byte	0
02353 07C7                        00            .byte	0
02354                                           ! 687  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02355 07C8                        00            .byte	0
02356 07C9                        00            .byte	0
02357 07CA                        00            .byte	0
02358 07CB                        00            .byte	0
02359 07CC                        00            .byte	0
02360 07CD                        00            .byte	0
02361 07CE                        00            .byte	0
02362 07CF                        00            .byte	0
02363                                           ! 688  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02364 07D0                        00            .byte	0
02365 07D1                        00            .byte	0
02366 07D2                        00            .byte	0
02367 07D3                        00            .byte	0
02368 07D4                        00            .byte	0
02369 07D5                        00            .byte	0
02370 07D6                        00            .byte	0
02371 07D7                        00            .byte	0
02372                                           ! 689 },
02373                                           ! 690 {
02374                                           ! 691  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02375 07D8                        00            .byte	0
02376 07D9                        00            .byte	0
02377 07DA                        00            .byte	0
02378 07DB                        00            .byte	0
02379 07DC                        00            .byte	0
02380 07DD                        00            .byte	0
02381 07DE                        00            .byte	0
02382 07DF                        00            .byte	0
02383                                           ! 692  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02384 07E0                        00            .byte	0
02385 07E1                        00            .byte	0
02386 07E2                        00            .byte	0
02387 07E3                        00            .byte	0
02388 07E4                        00            .byte	0
02389 07E5                        00            .byte	0
02390 07E6                        00            .byte	0
02391 07E7                        00            .byte	0
02392                                           ! 693  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02393 07E8                        00            .byte	0
02394 07E9                        00            .byte	0
02395 07EA                        00            .byte	0
02396 07EB                        00            .byte	0
02397 07EC                        00            .byte	0
02398 07ED                        00            .byte	0
02399 07EE                        00            .byte	0
02400 07EF                        00            .byte	0
02401                                           ! 694  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02402 07F0                        00            .byte	0
02403 07F1                        00            .byte	0
02404 07F2                        00            .byte	0
02405 07F3                        00            .byte	0
02406 07F4                        00            .byte	0
02407 07F5                        00            .byte	0
02408 07F6                        00            .byte	0
02409 07F7                        00            .byte	0
02410                                           ! 695  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02411 07F8                        00            .byte	0
02412 07F9                        00            .byte	0
02413 07FA                        00            .byte	0
02414 07FB                        00            .byte	0
02415 07FC                        00            .byte	0
02416 07FD                        00            .byte	0
02417 07FE                        00            .byte	0
02418 07FF                        00            .byte	0
02419                                           ! 696  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02420 0800                        00            .byte	0
02421 0801                        00            .byte	0
02422 0802                        00            .byte	0
02423 0803                        00            .byte	0
02424 0804                        00            .byte	0
02425 0805                        00            .byte	0
02426 0806                        00            .byte	0
02427 0807                        00            .byte	0
02428                                           ! 697  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02429 0808                        00            .byte	0
02430 0809                        00            .byte	0
02431 080A                        00            .byte	0
02432 080B                        00            .byte	0
02433 080C                        00            .byte	0
02434 080D                        00            .byte	0
02435 080E                        00            .byte	0
02436 080F                        00            .byte	0
02437                                           ! 698  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02438 0810                        00            .byte	0
02439 0811                        00            .byte	0
02440 0812                        00            .byte	0
02441 0813                        00            .byte	0
02442 0814                        00            .byte	0
02443 0815                        00            .byte	0
02444 0816                        00            .byte	0
02445 0817                        00            .byte	0
02446                                           ! 699 },
02447                                           ! 700 {
02448                                           ! 701  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02449 0818                        00            .byte	0
02450 0819                        00            .byte	0
02451 081A                        00            .byte	0
02452 081B                        00            .byte	0
02453 081C                        00            .byte	0
02454 081D                        00            .byte	0
02455 081E                        00            .byte	0
02456 081F                        00            .byte	0
02457                                           ! 702  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02458 0820                        00            .byte	0
02459 0821                        00            .byte	0
02460 0822                        00            .byte	0
02461 0823                        00            .byte	0
02462 0824                        00            .byte	0
02463 0825                        00            .byte	0
02464 0826                        00            .byte	0
02465 0827                        00            .byte	0
02466                                           ! 703  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02467 0828                        00            .byte	0
02468 0829                        00            .byte	0
02469 082A                        00            .byte	0
02470 082B                        00            .byte	0
02471 082C                        00            .byte	0
02472 082D                        00            .byte	0
02473 082E                        00            .byte	0
02474 082F                        00            .byte	0
02475                                           ! 704  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02476 0830                        00            .byte	0
02477 0831                        00            .byte	0
02478 0832                        00            .byte	0
02479 0833                        00            .byte	0
02480 0834                        00            .byte	0
02481 0835                        00            .byte	0
02482 0836                        00            .byte	0
02483 0837                        00            .byte	0
02484                                           ! 705  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02485 0838                        00            .byte	0
02486 0839                        00            .byte	0
02487 083A                        00            .byte	0
02488 083B                        00            .byte	0
02489 083C                        00            .byte	0
02490 083D                        00            .byte	0
02491 083E                        00            .byte	0
02492 083F                        00            .byte	0
02493                                           ! 706  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02494 0840                        00            .byte	0
02495 0841                        00            .byte	0
02496 0842                        00            .byte	0
02497 0843                        00            .byte	0
02498 0844                        00            .byte	0
02499 0845                        00            .byte	0
02500 0846                        00            .byte	0
02501 0847                        00            .byte	0
02502                                           ! 707  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02503 0848                        00            .byte	0
02504 0849                        00            .byte	0
02505 084A                        00            .byte	0
02506 084B                        00            .byte	0
02507 084C                        00            .byte	0
02508 084D                        00            .byte	0
02509 084E                        00            .byte	0
02510 084F                        00            .byte	0
02511                                           ! 708  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02512 0850                        00            .byte	0
02513 0851                        00            .byte	0
02514 0852                        00            .byte	0
02515 0853                        00            .byte	0
02516 0854                        00            .byte	0
02517 0855                        00            .byte	0
02518 0856                        00            .byte	0
02519 0857                        00            .byte	0
02520                                           ! 709 },
02521                                           ! 710 {
02522                                           ! 711  40, 24, 16, 0x00, 0x08,
02523 0858                        28            .byte	$28
02524 0859                        18            .byte	$18
02525 085A                        10            .byte	$10
02526 085B                        00            .byte	0
02527 085C                        08            .byte	8
02528                                           ! 712  0x08, 0x03, 0x00, 0x02,
02529 085D                        08            .byte	8
02530 085E                        03            .byte	3
02531 085F                        00            .byte	0
02532 0860                        02            .byte	2
02533                                           ! 713  0x67,
02534 0861                        67            .byte	$67
02535                                           ! 714  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02536 0862                        2D            .byte	$2D
02537 0863                        27            .byte	$27
02538 0864                        28            .byte	$28
02539 0865                        90            .byte	$90
02540 0866                        2B            .byte	$2B
02541 0867                        A0            .byte	$A0
02542 0868                        BF            .byte	$BF
02543 0869                        1F            .byte	$1F
02544                                           ! 715  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02545 086A                        00            .byte	0
02546 086B                        4F            .byte	$4F
02547 086C                        0D            .byte	$D
02548 086D                        0E            .byte	$E
02549 086E                        00            .byte	0
02550 086F                        00            .byte	0
02551 0870                        00            .byte	0
02552 0871                        00            .byte	0
02553                                           ! 716  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02554 0872                        9C            .byte	$9C
02555 0873                        8E            .byte	$8E
02556 0874                        8F            .byte	$8F
02557 0875                        14            .byte	$14
02558 0876                        1F            .byte	$1F
02559 0877                        96            .byte	$96
02560 0878                        B9            .byte	$B9
02561 0879                        A3            .byte	$A3
02562                                           ! 717  0xff,
02563 087A                        FF            .byte	$FF
02564                                           ! 718  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02565 087B                        00            .byte	0
02566 087C                        01            .byte	1
02567 087D                        02            .byte	2
02568 087E                        03            .byte	3
02569 087F                        04            .byte	4
02570 0880                        05            .byte	5
02571 0881                        14            .byte	$14
02572 0882                        07            .byte	7
02573                                           ! 719  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02574 0883                        38            .byte	$38
02575 0884                        39            .byte	$39
02576 0885                        3A            .byte	$3A
02577 0886                        3B            .byte	$3B
02578 0887                        3C            .byte	$3C
02579 0888                        3D            .byte	$3D
02580 0889                        3E            .byte	$3E
02581 088A                        3F            .byte	$3F
02582                                           ! 720  0x0c, 0x00, 0x0f, 0x08,
02583 088B                        0C            .byte	$C
02584 088C                        00            .byte	0
02585 088D                        0F            .byte	$F
02586 088E                        08            .byte	8
02587                                           ! 721  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02588 088F                        00            .byte	0
02589 0890                        00            .byte	0
02590 0891                        00            .byte	0
02591 0892                        00            .byte	0
02592 0893                        00            .byte	0
02593 0894                        10            .byte	$10
02594 0895                        0E            .byte	$E
02595 0896                        0F            .byte	$F
02596 0897                        FF            .byte	$FF
02597                                           ! 722 },
02598                                           ! 723 {
02599                                           ! 724  80, 24, 16, 0x00, 0x10,
02600 0898                        50            .byte	$50
02601 0899                        18            .byte	$18
02602 089A                        10            .byte	$10
02603 089B                        00            .byte	0
02604 089C                        10            .byte	$10
02605                                           ! 725  0x00, 0x03, 0x00, 0x02,
02606 089D                        00            .byte	0
02607 089E                        03            .byte	3
02608 089F                        00            .byte	0
02609 08A0                        02            .byte	2
02610                                           ! 726  0x67,
02611 08A1                        67            .byte	$67
02612                                           ! 727  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02613 08A2                        5F            .byte	$5F
02614 08A3                        4F            .byte	$4F
02615 08A4                        50            .byte	$50
02616 08A5                        82            .byte	$82
02617 08A6                        55            .byte	$55
02618 08A7                        81            .byte	$81
02619 08A8                        BF            .byte	$BF
02620 08A9                        1F            .byte	$1F
02621                                           ! 728  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02622 08AA                        00            .byte	0
02623 08AB                        4F            .byte	$4F
02624 08AC                        0D            .byte	$D
02625 08AD                        0E            .byte	$E
02626 08AE                        00            .byte	0
02627 08AF                        00            .byte	0
02628 08B0                        00            .byte	0
02629 08B1                        00            .byte	0
02630                                           ! 729  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02631 08B2                        9C            .byte	$9C
02632 08B3                        8E            .byte	$8E
02633 08B4                        8F            .byte	$8F
02634 08B5                        28            .byte	$28
02635 08B6                        1F            .byte	$1F
02636 08B7                        96            .byte	$96
02637 08B8                        B9            .byte	$B9
02638 08B9                        A3            .byte	$A3
02639                                           ! 730  0xff,
02640 08BA                        FF            .byte	$FF
02641                                           ! 731  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02642 08BB                        00            .byte	0
02643 08BC                        01            .byte	1
02644 08BD                        02            .byte	2
02645 08BE                        03            .byte	3
02646 08BF                        04            .byte	4
02647 08C0                        05            .byte	5
02648 08C1                        14            .byte	$14
02649 08C2                        07            .byte	7
02650                                           ! 732  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02651 08C3                        38            .byte	$38
02652 08C4                        39            .byte	$39
02653 08C5                        3A            .byte	$3A
02654 08C6                        3B            .byte	$3B
02655 08C7                        3C            .byte	$3C
02656 08C8                        3D            .byte	$3D
02657 08C9                        3E            .byte	$3E
02658 08CA                        3F            .byte	$3F
02659                                           ! 733  0x0c, 0x00, 0x0f, 0x08,
02660 08CB                        0C            .byte	$C
02661 08CC                        00            .byte	0
02662 08CD                        0F            .byte	$F
02663 08CE                        08            .byte	8
02664                                           ! 734  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02665 08CF                        00            .byte	0
02666 08D0                        00            .byte	0
02667 08D1                        00            .byte	0
02668 08D2                        00            .byte	0
02669 08D3                        00            .byte	0
02670 08D4                        10            .byte	$10
02671 08D5                        0E            .byte	$E
02672 08D6                        0F            .byte	$F
02673 08D7                        FF            .byte	$FF
02674                                           ! 735 },
02675                                           ! 736 {
02676                                           ! 737  80, 24, 16, 0x00, 0x10,
02677 08D8                        50            .byte	$50
02678 08D9                        18            .byte	$18
02679 08DA                        10            .byte	$10
02680 08DB                        00            .byte	0
02681 08DC                        10            .byte	$10
02682                                           ! 738  0x00, 0x03, 0x00, 0x02,
02683 08DD                        00            .byte	0
02684 08DE                        03            .byte	3
02685 08DF                        00            .byte	0
02686 08E0                        02            .byte	2
02687                                           ! 739  0x66,
02688 08E1                        66            .byte	$66
02689                                           ! 740  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02690 08E2                        5F            .byte	$5F
02691 08E3                        4F            .byte	$4F
02692 08E4                        50            .byte	$50
02693 08E5                        82            .byte	$82
02694 08E6                        55            .byte	$55
02695 08E7                        81            .byte	$81
02696 08E8                        BF            .byte	$BF
02697 08E9                        1F            .byte	$1F
02698                                           ! 741  0x00, 0x4f, 0x0d, 0x0e, 0
02699 08EA                        00            .byte	0
02700 08EB                        4F            .byte	$4F
02701 08EC                        0D            .byte	$D
02702 08ED                        0E            .byte	$E
02703                                           ! 741 x00, 0x00, 0x00, 0x00,
02704 08EE                        00            .byte	0
02705 08EF                        00            .byte	0
02706 08F0                        00            .byte	0
02707 08F1                        00            .byte	0
02708                                           ! 742  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02709 08F2                        9C            .byte	$9C
02710 08F3                        8E            .byte	$8E
02711 08F4                        8F            .byte	$8F
02712 08F5                        28            .byte	$28
02713 08F6                        0F            .byte	$F
02714 08F7                        96            .byte	$96
02715 08F8                        B9            .byte	$B9
02716 08F9                        A3            .byte	$A3
02717                                           ! 743  0xff,
02718 08FA                        FF            .byte	$FF
02719                                           ! 744  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02720 08FB                        00            .byte	0
02721 08FC                        08            .byte	8
02722 08FD                        08            .byte	8
02723 08FE                        08            .byte	8
02724 08FF                        08            .byte	8
02725 0900                        08            .byte	8
02726 0901                        08            .byte	8
02727 0902                        08            .byte	8
02728                                           ! 745  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02729 0903                        10            .byte	$10
02730 0904                        18            .byte	$18
02731 0905                        18            .byte	$18
02732 0906                        18            .byte	$18
02733 0907                        18            .byte	$18
02734 0908                        18            .byte	$18
02735 0909                        18            .byte	$18
02736 090A                        18            .byte	$18
02737                                           ! 746  0x0e, 0x00, 0x0f, 0x08,
02738 090B                        0E            .byte	$E
02739 090C                        00            .byte	0
02740 090D                        0F            .byte	$F
02741 090E                        08            .byte	8
02742                                           ! 747  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02743 090F                        00            .byte	0
02744 0910                        00            .byte	0
02745 0911                        00            .byte	0
02746 0912                        00            .byte	0
02747 0913                        00            .byte	0
02748 0914                        10            .byte	$10
02749 0915                        0A            .byte	$A
02750 0916                        0F            .byte	$F
02751 0917                        FF            .byte	$FF
02752                                           ! 748 },
02753                                           ! 749 {
02754                                           ! 750  80, 29, 16, 0x00, 0x00,
02755 0918                        50            .byte	$50
02756 0919                        1D            .byte	$1D
02757 091A                        10            .byte	$10
02758 091B                        00            .byte	0
02759 091C                        00            .byte	0
02760                                           ! 751  0x01, 0x0f, 0x00, 0x06,
02761 091D                        01            .byte	1
02762 091E                        0F            .byte	$F
02763 091F                        00            .byte	0
02764 0920                        06            .byte	6
02765                                           ! 752  0xe3,
02766 0921                        E3            .byte	$E3
02767                                           ! 753  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02768 0922                        5F            .byte	$5F
02769 0923                        4F            .byte	$4F
02770 0924                        50            .byte	$50
02771 0925                        82            .byte	$82
02772 0926                        54            .byte	$54
02773 0927                        80            .byte	$80
02774 0928                        0B            .byte	$B
02775 0929                        3E            .byte	$3E
02776                                           ! 754  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02777 092A                        00            .byte	0
02778 092B                        40            .byte	$40
02779 092C                        00            .byte	0
02780 092D                        00            .byte	0
02781 092E                        00            .byte	0
02782 092F                        00            .byte	0
02783 0930                        00            .byte	0
02784 0931                        00            .byte	0
02785                                           ! 755  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02786 0932                        EA            .byte	$EA
02787 0933                        8C            .byte	$8C
02788 0934                        DF            .byte	$DF
02789 0935                        28            .byte	$28
02790 0936                        00            .byte	0
02791 0937                        E7            .byte	$E7
02792 0938                        04            .byte	4
02793 0939                        E3            .byte	$E3
02794                                           ! 756  0xff,
02795 093A                        FF            .byte	$FF
02796                                           ! 757  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02797 093B                        00            .byte	0
02798 093C                        3F            .byte	$3F
02799 093D                        00            .byte	0
02800 093E                        3F            .byte	$3F
02801 093F                        00            .byte	0
02802 0940                        3F            .byte	$3F
02803 0941                        00            .byte	0
02804 0942                        3F            .byte	$3F
02805                                           ! 758  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02806 0943                        00            .byte	0
02807 0944                        3F            .byte	$3F
02808 0945                        00            .byte	0
02809 0946                        3F            .byte	$3F
02810 0947                        00            .byte	0
02811 0948                        3F            .byte	$3F
02812 0949                        00            .byte	0
02813 094A                        3F            .byte	$3F
02814                                           ! 759  0x01, 0x00, 0x0f, 0x00,
02815 094B                        01            .byte	1
02816 094C                        00            .byte	0
02817 094D                        0F            .byte	$F
02818 094E                        00            .byte	0
02819                                           ! 760  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02820 094F                        00            .byte	0
02821 0950                        00            .byte	0
02822 0951                        00            .byte	0
02823 0952                        00            .byte	0
02824 0953                        00            .byte	0
02825 0954                        00            .byte	0
02826 0955                        05            .byte	5
02827 0956                        0F            .byte	$F
02828 0957                        FF            .byte	$FF
02829                                           ! 761 },
02830                                           ! 762 {
02831                                           ! 763  80, 29, 16, 0x00, 0x00,
02832 0958                        50            .byte	$50
02833 0959                        1D            .byte	$1D
02834 095A                        10            .byte	$10
02835 095B                        00            .byte	0
02836 095C                        00            .byte	0
02837                                           ! 764  0x01, 0x0f, 0x00, 0x06,
02838 095D                        01            .byte	1
02839 095E                        0F            .byte	$F
02840 095F                        00            .byte	0
02841 0960                        06            .byte	6
02842                                           ! 765  0xe3,
02843 0961                        E3            .byte	$E3
02844                                           ! 766  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02845 0962                        5F            .byte	$5F
02846 0963                        4F            .byte	$4F
02847 0964                        50            .byte	$50
02848 0965                        82            .byte	$82
02849 0966                        54            .byte	$54
02850 0967                        80            .byte	$80
02851 0968                        0B            .byte	$B
02852 0969                        3E            .byte	$3E
02853                                           ! 767  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02854 096A                        00            .byte	0
02855 096B                        40            .byte	$40
02856 096C                        00            .byte	0
02857 096D                        00            .byte	0
02858 096E                        00            .byte	0
02859 096F                        00            .byte	0
02860 0970                        00            .byte	0
02861 0971                        00            .byte	0
02862                                           ! 768  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02863 0972                        EA            .byte	$EA
02864 0973                        8C            .byte	$8C
02865 0974                        DF            .byte	$DF
02866 0975                        28            .byte	$28
02867 0976                        00            .byte	0
02868 0977                        E7            .byte	$E7
02869 0978                        04            .byte	4
02870 0979                        E3            .byte	$E3
02871                                           ! 769  0xff,
02872 097A                        FF            .byte	$FF
02873                                           ! 770  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02874 097B                        00            .byte	0
02875 097C                        01            .byte	1
02876 097D                        02            .byte	2
02877 097E                        03            .byte	3
02878 097F                        04            .byte	4
02879 0980                        05            .byte	5
02880 0981                        14            .byte	$14
02881 0982                        07            .byte	7
02882                                           ! 771  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02883 0983                        38            .byte	$38
02884 0984                        39            .byte	$39
02885 0985                        3A            .byte	$3A
02886 0986                        3B            .byte	$3B
02887 0987                        3C            .byte	$3C
02888 0988                        3D            .byte	$3D
02889 0989                        3E            .byte	$3E
02890 098A                        3F            .byte	$3F
02891                                           ! 772  0x01, 0x00, 0x0f, 0x00,
02892 098B                        01            .byte	1
02893 098C                        00            .byte	0
02894 098D                        0F            .byte	$F
02895 098E                        00            .byte	0
02896                                           ! 773  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02897 098F                        00            .byte	0
02898 0990                        00            .byte	0
02899 0991                        00            .byte	0
02900 0992                        00            .byte	0
02901 0993                        00            .byte	0
02902 0994                        00            .byte	0
02903 0995                        05            .byte	5
02904 0996                        0F            .byte	$F
02905 0997                        FF            .byte	$FF
02906                                           ! 774 },
02907                                           ! 775 {
02908                                           ! 776  40, 24, 8, 0x00, 0x00,
02909 0998                        28            .byte	$28
02910 0999                        18            .byte	$18
02911 099A                        08            .byte	8
02912 099B                        00            .byte	0
02913 099C                        00            .byte	0
02914                                           ! 777  0x01, 0x0f, 0x00, 0x0e,
02915 099D                        01            .byte	1
02916 099E                        0F            .byte	$F
02917 099F                        00            .byte	0
02918 09A0                        0E            .byte	$E
02919                                           ! 778  0x63,
02920 09A1                        63            .byte	$63
02921                                           ! 779  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02922 09A2                        5F            .byte	$5F
02923 09A3                        4F            .byte	$4F
02924 09A4                        50            .byte	$50
02925 09A5                        82            .byte	$82
02926 09A6                        54            .byte	$54
02927 09A7                        80            .byte	$80
02928 09A8                        BF            .byte	$BF
02929 09A9                        1F            .byte	$1F
02930                                           ! 780  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02931 09AA                        00            .byte	0
02932 09AB                        41            .byte	$41
02933 09AC                        00            .byte	0
02934 09AD                        00            .byte	0
02935 09AE                        00            .byte	0
02936 09AF                        00            .byte	0
02937 09B0                        00            .byte	0
02938 09B1                        00            .byte	0
02939                                           ! 781  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02940 09B2                        9C            .byte	$9C
02941 09B3                        8E            .byte	$8E
02942 09B4                        8F            .byte	$8F
02943 09B5                        28            .byte	$28
02944 09B6                        40            .byte	$40
02945 09B7                        96            .byte	$96
02946 09B8                        B9            .byte	$B9
02947 09B9                        A3            .byte	$A3
02948                                           ! 782  0xff,
02949 09BA                        FF            .byte	$FF
02950                                           ! 783  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02951 09BB                        00            .byte	0
02952 09BC                        01            .byte	1
02953 09BD                        02            .byte	2
02954 09BE                        03            .byte	3
02955 09BF                        04            .byte	4
02956 09C0                        05            .byte	5
02957 09C1                        06            .byte	6
02958 09C2                        07            .byte	7
02959                                           ! 784  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02960 09C3                        08            .byte	8
02961 09C4                        09            .byte	9
02962 09C5                        0A            .byte	$A
02963 09C6                        0B            .byte	$B
02964 09C7                        0C            .byte	$C
02965 09C8                        0D            .byte	$D
02966 09C9                        0E            .byte	$E
02967 09CA                        0F            .byte	$F
02968                                           ! 785  0x41, 0x00, 0x0f, 0x00,
02969 09CB                        41            .byte	$41
02970 09CC                        00            .byte	0
02971 09CD                        0F            .byte	$F
02972 09CE                        00            .byte	0
02973                                           ! 786  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02974 09CF                        00            .byte	0
02975 09D0                        00            .byte	0
02976 09D1                        00            .byte	0
02977 09D2                        00            .byte	0
02978 09D3                        00            .byte	0
02979 09D4                        40            .byte	$40
02980 09D5                        05            .byte	5
02981 09D6                        0F            .byte	$F
02982 09D7                        FF            .byte	$FF
02983                                           ! 787 },
02984                                           ! 788 {
02985                                           ! 789  100, 36, 16, 0x00, 0x00,
02986 09D8                        64            .byte	$64
02987 09D9                        24            .byte	$24
02988 09DA                        10            .byte	$10
02989 09DB                        00            .byte	0
02990 09DC                        00            .byte	0
02991                                           ! 790  0x01, 0x0f, 0x00, 0x06,
02992 09DD                        01            .byte	1
02993 09DE                        0F            .byte	$F
02994 09DF                        00            .byte	0
02995 09E0                        06            .byte	6
02996                                           ! 791  0xe3,
02997 09E1                        E3            .byte	$E3
02998                                           ! 792  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02999 09E2                        7F            .byte	$7F
03000 09E3                        63            .byte	$63
03001 09E4                        63            .byte	$63
03002 09E5                        83            .byte	$83
03003 09E6                        6B            .byte	$6B
03004 09E7                        1B            .byte	$1B
03005 09E8                        72            .byte	$72
03006 09E9                        F0            .byte	$F0
03007                                           ! 793  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
03008 09EA                        00            .byte	0
03009 09EB                        60            .byte	$60
03010 09EC                        00            .byte	0
03011 09ED                        00            .byte	0
03012 09EE                        00            .byte	0
03013 09EF                        00            .byte	0
03014 09F0                        00            .byte	0
03015 09F1                        00            .byte	0
03016                                           ! 794  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
03017 09F2                        59            .byte	$59
03018 09F3                        8D            .byte	$8D
03019 09F4                        57            .byte	$57
03020 09F5                        32            .byte	$32
03021 09F6                        00            .byte	0
03022 09F7                        57            .byte	$57
03023 09F8                        73            .byte	$73
03024 09F9                        E3            .byte	$E3
03025                                           ! 795  0xff,
03026 09FA                        FF            .byte	$FF
03027                                           ! 796  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03028 09FB                        00            .byte	0
03029 09FC                        01            .byte	1
03030 09FD                        02            .byte	2
03031 09FE                        03            .byte	3
03032 09FF                        04            .byte	4
03033 0A00                        05            .byte	5
03034 0A01                        14            .byte	$14
03035 0A02                        07            .byte	7
03036                                           ! 797  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03037 0A03                        38            .byte	$38
03038 0A04                        39            .byte	$39
03039 0A05                        3A            .byte	$3A
03040 0A06                        3B            .byte	$3B
03041 0A07                        3C            .byte	$3C
03042 0A08                        3D            .byte	$3D
03043 0A09                        3E            .byte	$3E
03044 0A0A                        3F            .byte	$3F
03045                                           ! 798  0x01, 0x00, 0x0f, 0x00,
03046 0A0B                        01            .byte	1
03047 0A0C                        00            .byte	0
03048 0A0D                        0F            .byte	$F
03049 0A0E                        00            .byte	0
03050                                           ! 799  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03051 0A0F                        00            .byte	0
03052 0A10                        00            .byte	0
03053 0A11                        00            .byte	0
03054 0A12                        00            .byte	0
03055 0A13                        00            .byte	0
03056 0A14                        00            .byte	0
03057 0A15                        05            .byte	5
03058 0A16                        0F            .byte	$F
03059 0A17                        FF            .byte	$FF
03060                                           ! 800 },
03061                                           ! 801 };
03062                                           !BCC_EOS
03063                                           ! 802 static Bit8u palette0[63+1][3]=
03064                                           ! 803 {
03065                       00000A18            _palette0:
03066                                           ! 804   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03067 0A18                        00            .byte	0
03068 0A19                        00            .byte	0
03069 0A1A                        00            .byte	0
03070 0A1B                        00            .byte	0
03071 0A1C                        00            .byte	0
03072 0A1D                        00            .byte	0
03073 0A1E                        00            .byte	0
03074 0A1F                        00            .byte	0
03075 0A20                        00            .byte	0
03076 0A21                        00            .byte	0
03077 0A22                        00            .byte	0
03078 0A23                        00            .byte	0
03079 0A24                        00            .byte	0
03080 0A25                        00            .byte	0
03081 0A26                        00            .byte	0
03082 0A27                        00            .byte	0
03083 0A28                        00            .byte	0
03084 0A29                        00            .byte	0
03085 0A2A                        00            .byte	0
03086 0A2B                        00            .byte	0
03087 0A2C                        00            .byte	0
03088 0A2D                        00            .byte	0
03089 0A2E                        00            .byte	0
03090 0A2F                        00            .byte	0
03091                                           ! 805   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0
03092 0A30                        2A            .byte	$2A
03093 0A31                        2A            .byte	$2A
03094 0A32                        2A            .byte	$2A
03095 0A33                        2A            .byte	$2A
03096 0A34                        2A            .byte	$2A
03097 0A35                        2A            .byte	$2A
03098 0A36                        2A            .byte	$2A
03099 0A37                        2A            .byte	$2A
03100                                           ! 805 x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03101 0A38                        2A            .byte	$2A
03102 0A39                        2A            .byte	$2A
03103 0A3A                        2A            .byte	$2A
03104 0A3B                        2A            .byte	$2A
03105 0A3C                        2A            .byte	$2A
03106 0A3D                        2A            .byte	$2A
03107 0A3E                        2A            .byte	$2A
03108 0A3F                        2A            .byte	$2A
03109 0A40                        2A            .byte	$2A
03110 0A41                        2A            .byte	$2A
03111 0A42                        2A            .byte	$2A
03112 0A43                        2A            .byte	$2A
03113 0A44                        2A            .byte	$2A
03114 0A45                        2A            .byte	$2A
03115 0A46                        2A            .byte	$2A
03116 0A47                        2A            .byte	$2A
03117                                           ! 806   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03118 0A48                        2A            .byte	$2A
03119 0A49                        2A            .byte	$2A
03120 0A4A                        2A            .byte	$2A
03121 0A4B                        2A            .byte	$2A
03122 0A4C                        2A            .byte	$2A
03123 0A4D                        2A            .byte	$2A
03124 0A4E                        2A            .byte	$2A
03125 0A4F                        2A            .byte	$2A
03126 0A50                        2A            .byte	$2A
03127 0A51                        2A            .byte	$2A
03128 0A52                        2A            .byte	$2A
03129 0A53                        2A            .byte	$2A
03130 0A54                        2A            .byte	$2A
03131 0A55                        2A            .byte	$2A
03132 0A56                        2A            .byte	$2A
03133 0A57                        2A            .byte	$2A
03134 0A58                        2A            .byte	$2A
03135 0A59                        2A            .byte	$2A
03136 0A5A                        2A            .byte	$2A
03137 0A5B                        2A            .byte	$2A
03138 0A5C                        2A            .byte	$2A
03139 0A5D                        2A            .byte	$2A
03140 0A5E                        2A            .byte	$2A
03141 0A5F                        2A            .byte	$2A
03142                                           ! 807   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03143 0A60                        3F            .byte	$3F
03144 0A61                        3F            .byte	$3F
03145 0A62                        3F            .byte	$3F
03146 0A63                        3F            .byte	$3F
03147 0A64                        3F            .byte	$3F
03148 0A65                        3F            .byte	$3F
03149 0A66                        3F            .byte	$3F
03150 0A67                        3F            .byte	$3F
03151 0A68                        3F            .byte	$3F
03152 0A69                        3F            .byte	$3F
03153 0A6A                        3F            .byte	$3F
03154 0A6B                        3F            .byte	$3F
03155 0A6C                        3F            .byte	$3F
03156 0A6D                        3F            .byte	$3F
03157 0A6E                        3F            .byte	$3F
03158 0A6F                        3F            .byte	$3F
03159 0A70                        3F            .byte	$3F
03160 0A71                        3F            .byte	$3F
03161 0A72                        3F            .byte	$3F
03162 0A73                        3F            .byte	$3F
03163 0A74                        3F            .byte	$3F
03164 0A75                        3F            .byte	$3F
03165 0A76                        3F            .byte	$3F
03166 0A77                        3F            .byte	$3F
03167                                           ! 808   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03168 0A78                        00            .byte	0
03169 0A79                        00            .byte	0
03170 0A7A                        00            .byte	0
03171 0A7B                        00            .byte	0
03172 0A7C                        00            .byte	0
03173 0A7D                        00            .byte	0
03174 0A7E                        00            .byte	0
03175 0A7F                        00            .byte	0
03176 0A80                        00            .byte	0
03177 0A81                        00            .byte	0
03178 0A82                        00            .byte	0
03179 0A83                        00            .byte	0
03180 0A84                        00            .byte	0
03181 0A85                        00            .byte	0
03182 0A86                        00            .byte	0
03183 0A87                        00            .byte	0
03184 0A88                        00            .byte	0
03185 0A89                        00            .byte	0
03186 0A8A                        00            .byte	0
03187 0A8B                        00            .byte	0
03188 0A8C                        00            .byte	0
03189 0A8D                        00            .byte	0
03190 0A8E                        00            .byte	0
03191 0A8F                        00            .byte	0
03192                                           ! 809   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03193 0A90                        2A            .byte	$2A
03194 0A91                        2A            .byte	$2A
03195 0A92                        2A            .byte	$2A
03196 0A93                        2A            .byte	$2A
03197 0A94                        2A            .byte	$2A
03198 0A95                        2A            .byte	$2A
03199 0A96                        2A            .byte	$2A
03200 0A97                        2A            .byte	$2A
03201 0A98                        2A            .byte	$2A
03202 0A99                        2A            .byte	$2A
03203 0A9A                        2A            .byte	$2A
03204 0A9B                        2A            .byte	$2A
03205 0A9C                        2A            .byte	$2A
03206 0A9D                        2A            .byte	$2A
03207 0A9E                        2A            .byte	$2A
03208 0A9F                        2A            .byte	$2A
03209 0AA0                        2A            .byte	$2A
03210 0AA1                        2A            .byte	$2A
03211 0AA2                        2A            .byte	$2A
03212 0AA3                        2A            .byte	$2A
03213 0AA4                        2A            .byte	$2A
03214 0AA5                        2A            .byte	$2A
03215 0AA6                        2A            .byte	$2A
03216 0AA7                        2A            .byte	$2A
03217                                           ! 810   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03218 0AA8                        2A            .byte	$2A
03219 0AA9                        2A            .byte	$2A
03220 0AAA                        2A            .byte	$2A
03221 0AAB                        2A            .byte	$2A
03222 0AAC                        2A            .byte	$2A
03223 0AAD                        2A            .byte	$2A
03224 0AAE                        2A            .byte	$2A
03225 0AAF                        2A            .byte	$2A
03226 0AB0                        2A            .byte	$2A
03227 0AB1                        2A            .byte	$2A
03228 0AB2                        2A            .byte	$2A
03229 0AB3                        2A            .byte	$2A
03230 0AB4                        2A            .byte	$2A
03231 0AB5                        2A            .byte	$2A
03232 0AB6                        2A            .byte	$2A
03233 0AB7                        2A            .byte	$2A
03234 0AB8                        2A            .byte	$2A
03235 0AB9                        2A            .byte	$2A
03236 0ABA                        2A            .byte	$2A
03237 0ABB                        2A            .byte	$2A
03238 0ABC                        2A            .byte	$2A
03239 0ABD                        2A            .byte	$2A
03240 0ABE                        2A            .byte	$2A
03241 0ABF                        2A            .byte	$2A
03242                                           ! 811   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03243 0AC0                        3F            .byte	$3F
03244 0AC1                        3F            .byte	$3F
03245 0AC2                        3F            .byte	$3F
03246 0AC3                        3F            .byte	$3F
03247 0AC4                        3F            .byte	$3F
03248 0AC5                        3F            .byte	$3F
03249 0AC6                        3F            .byte	$3F
03250 0AC7                        3F            .byte	$3F
03251 0AC8                        3F            .byte	$3F
03252 0AC9                        3F            .byte	$3F
03253 0ACA                        3F            .byte	$3F
03254 0ACB                        3F            .byte	$3F
03255 0ACC                        3F            .byte	$3F
03256 0ACD                        3F            .byte	$3F
03257 0ACE                        3F            .byte	$3F
03258 0ACF                        3F            .byte	$3F
03259 0AD0                        3F            .byte	$3F
03260 0AD1                        3F            .byte	$3F
03261 0AD2                        3F            .byte	$3F
03262 0AD3                        3F            .byte	$3F
03263 0AD4                        3F            .byte	$3F
03264 0AD5                        3F            .byte	$3F
03265 0AD6                        3F            .byte	$3F
03266                                           ! 812 };
03267 0AD7                        3F            .byte	$3F
03268                                           !BCC_EOS
03269                                           ! 813 static Bit8u palette1[63+1][3]=
03270                                           ! 814 {
03271                       00000AD8            _palette1:
03272                                           ! 815   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03273 0AD8                        00            .byte	0
03274 0AD9                        00            .byte	0
03275 0ADA                        00            .byte	0
03276 0ADB                        00            .byte	0
03277 0ADC                        00            .byte	0
03278 0ADD                        2A            .byte	$2A
03279 0ADE                        00            .byte	0
03280 0ADF                        2A            .byte	$2A
03281 0AE0                        00            .byte	0
03282 0AE1                        00            .byte	0
03283 0AE2                        2A            .byte	$2A
03284 0AE3                        2A            .byte	$2A
03285 0AE4                        2A            .byte	$2A
03286 0AE5                        00            .byte	0
03287 0AE6                        00            .byte	0
03288 0AE7                        2A            .byte	$2A
03289 0AE8                        00            .byte	0
03290 0AE9                        2A            .byte	$2A
03291 0AEA                        2A            .byte	$2A
03292 0AEB                        15            .byte	$15
03293 0AEC                        00            .byte	0
03294 0AED                        2A            .byte	$2A
03295 0AEE                        2A            .byte	$2A
03296 0AEF                        2A            .byte	$2A
03297                                           ! 816   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03298 0AF0                        00            .byte	0
03299 0AF1                        00            .byte	0
03300 0AF2                        00            .byte	0
03301 0AF3                        00            .byte	0
03302 0AF4                        00            .byte	0
03303 0AF5                        2A            .byte	$2A
03304 0AF6                        00            .byte	0
03305 0AF7                        2A            .byte	$2A
03306 0AF8                        00            .byte	0
03307 0AF9                        00            .byte	0
03308 0AFA                        2A            .byte	$2A
03309 0AFB                        2A            .byte	$2A
03310 0AFC                        2A            .byte	$2A
03311 0AFD                        00            .byte	0
03312 0AFE                        00            .byte	0
03313 0AFF                        2A            .byte	$2A
03314 0B00                        00            .byte	0
03315 0B01                        2A            .byte	$2A
03316 0B02                        2A            .byte	$2A
03317 0B03                        15            .byte	$15
03318 0B04                        00            .byte	0
03319 0B05                        2A            .byte	$2A
03320 0B06                        2A            .byte	$2A
03321 0B07                        2A            .byte	$2A
03322                                           ! 817   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03323 0B08                        15            .byte	$15
03324 0B09                        15            .byte	$15
03325 0B0A                        15            .byte	$15
03326 0B0B                        15            .byte	$15
03327 0B0C                        15            .byte	$15
03328 0B0D                        3F            .byte	$3F
03329 0B0E                        15            .byte	$15
03330 0B0F                        3F            .byte	$3F
03331 0B10                        15            .byte	$15
03332 0B11                        15            .byte	$15
03333 0B12                        3F            .byte	$3F
03334 0B13                        3F            .byte	$3F
03335 0B14                        3F            .byte	$3F
03336 0B15                        15            .byte	$15
03337 0B16                        15            .byte	$15
03338 0B17                        3F            .byte	$3F
03339 0B18                        15            .byte	$15
03340 0B19                        3F            .byte	$3F
03341 0B1A                        3F            .byte	$3F
03342 0B1B                        3F            .byte	$3F
03343 0B1C                        15            .byte	$15
03344 0B1D                        3F            .byte	$3F
03345 0B1E                        3F            .byte	$3F
03346 0B1F                        3F            .byte	$3F
03347                                           ! 818   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03348 0B20                        15            .byte	$15
03349 0B21                        15            .byte	$15
03350 0B22                        15            .byte	$15
03351 0B23                        15            .byte	$15
03352 0B24                        15            .byte	$15
03353 0B25                        3F            .byte	$3F
03354 0B26                        15            .byte	$15
03355 0B27                        3F            .byte	$3F
03356 0B28                        15            .byte	$15
03357 0B29                        15            .byte	$15
03358 0B2A                        3F            .byte	$3F
03359 0B2B                        3F            .byte	$3F
03360 0B2C                        3F            .byte	$3F
03361 0B2D                        15            .byte	$15
03362 0B2E                        15            .byte	$15
03363 0B2F                        3F            .byte	$3F
03364 0B30                        15            .byte	$15
03365 0B31                        3F            .byte	$3F
03366 0B32                        3F            .byte	$3F
03367 0B33                        3F            .byte	$3F
03368 0B34                        15            .byte	$15
03369 0B35                        3F            .byte	$3F
03370 0B36                        3F            .byte	$3F
03371 0B37                        3F            .byte	$3F
03372                                           ! 819   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03373 0B38                        00            .byte	0
03374 0B39                        00            .byte	0
03375 0B3A                        00            .byte	0
03376 0B3B                        00            .byte	0
03377 0B3C                        00            .byte	0
03378 0B3D                        2A            .byte	$2A
03379 0B3E                        00            .byte	0
03380 0B3F                        2A            .byte	$2A
03381 0B40                        00            .byte	0
03382 0B41                        00            .byte	0
03383 0B42                        2A            .byte	$2A
03384 0B43                        2A            .byte	$2A
03385 0B44                        2A            .byte	$2A
03386 0B45                        00            .byte	0
03387 0B46                        00            .byte	0
03388 0B47                        2A            .byte	$2A
03389 0B48                        00            .byte	0
03390 0B49                        2A            .byte	$2A
03391 0B4A                        2A            .byte	$2A
03392 0B4B                        15            .byte	$15
03393 0B4C                        00            .byte	0
03394 0B4D                        2A            .byte	$2A
03395 0B4E                        2A            .byte	$2A
03396 0B4F                        2A            .byte	$2A
03397                                           ! 820   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03398 0B50                        00            .byte	0
03399 0B51                        00            .byte	0
03400 0B52                        00            .byte	0
03401 0B53                        00            .byte	0
03402 0B54                        00            .byte	0
03403 0B55                        2A            .byte	$2A
03404 0B56                        00            .byte	0
03405 0B57                        2A            .byte	$2A
03406 0B58                        00            .byte	0
03407 0B59                        00            .byte	0
03408 0B5A                        2A            .byte	$2A
03409 0B5B                        2A            .byte	$2A
03410 0B5C                        2A            .byte	$2A
03411 0B5D                        00            .byte	0
03412 0B5E                        00            .byte	0
03413 0B5F                        2A            .byte	$2A
03414 0B60                        00            .byte	0
03415 0B61                        2A            .byte	$2A
03416 0B62                        2A            .byte	$2A
03417 0B63                        15            .byte	$15
03418 0B64                        00            .byte	0
03419 0B65                        2A            .byte	$2A
03420 0B66                        2A            .byte	$2A
03421 0B67                        2A            .byte	$2A
03422                                           ! 821   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03423 0B68                        15            .byte	$15
03424 0B69                        15            .byte	$15
03425 0B6A                        15            .byte	$15
03426 0B6B                        15            .byte	$15
03427 0B6C                        15            .byte	$15
03428 0B6D                        3F            .byte	$3F
03429 0B6E                        15            .byte	$15
03430 0B6F                        3F            .byte	$3F
03431 0B70                        15            .byte	$15
03432 0B71                        15            .byte	$15
03433 0B72                        3F            .byte	$3F
03434 0B73                        3F            .byte	$3F
03435 0B74                        3F            .byte	$3F
03436 0B75                        15            .byte	$15
03437 0B76                        15            .byte	$15
03438 0B77                        3F            .byte	$3F
03439 0B78                        15            .byte	$15
03440 0B79                        3F            .byte	$3F
03441 0B7A                        3F            .byte	$3F
03442 0B7B                        3F            .byte	$3F
03443 0B7C                        15            .byte	$15
03444 0B7D                        3F            .byte	$3F
03445 0B7E                        3F            .byte	$3F
03446 0B7F                        3F            .byte	$3F
03447                                           ! 822   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03448 0B80                        15            .byte	$15
03449 0B81                        15            .byte	$15
03450 0B82                        15            .byte	$15
03451 0B83                        15            .byte	$15
03452 0B84                        15            .byte	$15
03453 0B85                        3F            .byte	$3F
03454 0B86                        15            .byte	$15
03455 0B87                        3F            .byte	$3F
03456 0B88                        15            .byte	$15
03457 0B89                        15            .byte	$15
03458 0B8A                        3F            .byte	$3F
03459 0B8B                        3F            .byte	$3F
03460 0B8C                        3F            .byte	$3F
03461 0B8D                        15            .byte	$15
03462 0B8E                        15            .byte	$15
03463 0B8F                        3F            .byte	$3F
03464 0B90                        15            .byte	$15
03465 0B91                        3F            .byte	$3F
03466 0B92                        3F            .byte	$3F
03467 0B93                        3F            .byte	$3F
03468 0B94                        15            .byte	$15
03469 0B95                        3F            .byte	$3F
03470 0B96                        3F            .byte	$3F
03471                                           ! 823 };
03472 0B97                        3F            .byte	$3F
03473                                           !BCC_EOS
03474                                           ! 824 static Bit8u palette2[63+1][3]=
03475                                           ! 825 {
03476                       00000B98            _palette2:
03477                                           ! 826   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,
03478 0B98                        00            .byte	0
03479 0B99                        00            .byte	0
03480 0B9A                        00            .byte	0
03481 0B9B                        00            .byte	0
03482 0B9C                        00            .byte	0
03483 0B9D                        2A            .byte	$2A
03484 0B9E                        00            .byte	0
03485 0B9F                        2A            .byte	$2A
03486 0BA0                        00            .byte	0
03487 0BA1                        00            .byte	0
03488 0BA2                        2A            .byte	$2A
03489 0BA3                        2A            .byte	$2A
03490                                           ! 826 0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03491 0BA4                        2A            .byte	$2A
03492 0BA5                        00            .byte	0
03493 0BA6                        00            .byte	0
03494 0BA7                        2A            .byte	$2A
03495 0BA8                        00            .byte	0
03496 0BA9                        2A            .byte	$2A
03497 0BAA                        2A            .byte	$2A
03498 0BAB                        2A            .byte	$2A
03499 0BAC                        00            .byte	0
03500 0BAD                        2A            .byte	$2A
03501 0BAE                        2A            .byte	$2A
03502 0BAF                        2A            .byte	$2A
03503                                           ! 827   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03504 0BB0                        00            .byte	0
03505 0BB1                        00            .byte	0
03506 0BB2                        15            .byte	$15
03507 0BB3                        00            .byte	0
03508 0BB4                        00            .byte	0
03509 0BB5                        3F            .byte	$3F
03510 0BB6                        00            .byte	0
03511 0BB7                        2A            .byte	$2A
03512 0BB8                        15            .byte	$15
03513 0BB9                        00            .byte	0
03514 0BBA                        2A            .byte	$2A
03515 0BBB                        3F            .byte	$3F
03516 0BBC                        2A            .byte	$2A
03517 0BBD                        00            .byte	0
03518 0BBE                        15            .byte	$15
03519 0BBF                        2A            .byte	$2A
03520 0BC0                        00            .byte	0
03521 0BC1                        3F            .byte	$3F
03522 0BC2                        2A            .byte	$2A
03523 0BC3                        2A            .byte	$2A
03524 0BC4                        15            .byte	$15
03525 0BC5                        2A            .byte	$2A
03526 0BC6                        2A            .byte	$2A
03527 0BC7                        3F            .byte	$3F
03528                                           ! 828   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03529 0BC8                        00            .byte	0
03530 0BC9                        15            .byte	$15
03531 0BCA                        00            .byte	0
03532 0BCB                        00            .byte	0
03533 0BCC                        15            .byte	$15
03534 0BCD                        2A            .byte	$2A
03535 0BCE                        00            .byte	0
03536 0BCF                        3F            .byte	$3F
03537 0BD0                        00            .byte	0
03538 0BD1                        00            .byte	0
03539 0BD2                        3F            .byte	$3F
03540 0BD3                        2A            .byte	$2A
03541 0BD4                        2A            .byte	$2A
03542 0BD5                        15            .byte	$15
03543 0BD6                        00            .byte	0
03544 0BD7                        2A            .byte	$2A
03545 0BD8                        15            .byte	$15
03546 0BD9                        2A            .byte	$2A
03547 0BDA                        2A            .byte	$2A
03548 0BDB                        3F            .byte	$3F
03549 0BDC                        00            .byte	0
03550 0BDD                        2A            .byte	$2A
03551 0BDE                        3F            .byte	$3F
03552 0BDF                        2A            .byte	$2A
03553                                           ! 829   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03554 0BE0                        00            .byte	0
03555 0BE1                        15            .byte	$15
03556 0BE2                        15            .byte	$15
03557 0BE3                        00            .byte	0
03558 0BE4                        15            .byte	$15
03559 0BE5                        3F            .byte	$3F
03560 0BE6                        00            .byte	0
03561 0BE7                        3F            .byte	$3F
03562 0BE8                        15            .byte	$15
03563 0BE9                        00            .byte	0
03564 0BEA                        3F            .byte	$3F
03565 0BEB                        3F            .byte	$3F
03566 0BEC                        2A            .byte	$2A
03567 0BED                        15            .byte	$15
03568 0BEE                        15            .byte	$15
03569 0BEF                        2A            .byte	$2A
03570 0BF0                        15            .byte	$15
03571 0BF1                        3F            .byte	$3F
03572 0BF2                        2A            .byte	$2A
03573 0BF3                        3F            .byte	$3F
03574 0BF4                        15            .byte	$15
03575 0BF5                        2A            .byte	$2A
03576 0BF6                        3F            .byte	$3F
03577 0BF7                        3F            .byte	$3F
03578                                           ! 830   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03579 0BF8                        15            .byte	$15
03580 0BF9                        00            .byte	0
03581 0BFA                        00            .byte	0
03582 0BFB                        15            .byte	$15
03583 0BFC                        00            .byte	0
03584 0BFD                        2A            .byte	$2A
03585 0BFE                        15            .byte	$15
03586 0BFF                        2A            .byte	$2A
03587 0C00                        00            .byte	0
03588 0C01                        15            .byte	$15
03589 0C02                        2A            .byte	$2A
03590 0C03                        2A            .byte	$2A
03591 0C04                        3F            .byte	$3F
03592 0C05                        00            .byte	0
03593 0C06                        00            .byte	0
03594 0C07                        3F            .byte	$3F
03595 0C08                        00            .byte	0
03596 0C09                        2A            .byte	$2A
03597 0C0A                        3F            .byte	$3F
03598 0C0B                        2A            .byte	$2A
03599 0C0C                        00            .byte	0
03600 0C0D                        3F            .byte	$3F
03601 0C0E                        2A            .byte	$2A
03602 0C0F                        2A            .byte	$2A
03603                                           ! 831   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03604 0C10                        15            .byte	$15
03605 0C11                        00            .byte	0
03606 0C12                        15            .byte	$15
03607 0C13                        15            .byte	$15
03608 0C14                        00            .byte	0
03609 0C15                        3F            .byte	$3F
03610 0C16                        15            .byte	$15
03611 0C17                        2A            .byte	$2A
03612 0C18                        15            .byte	$15
03613 0C19                        15            .byte	$15
03614 0C1A                        2A            .byte	$2A
03615 0C1B                        3F            .byte	$3F
03616 0C1C                        3F            .byte	$3F
03617 0C1D                        00            .byte	0
03618 0C1E                        15            .byte	$15
03619 0C1F                        3F            .byte	$3F
03620 0C20                        00            .byte	0
03621 0C21                        3F            .byte	$3F
03622 0C22                        3F            .byte	$3F
03623 0C23                        2A            .byte	$2A
03624 0C24                        15            .byte	$15
03625 0C25                        3F            .byte	$3F
03626 0C26                        2A            .byte	$2A
03627 0C27                        3F            .byte	$3F
03628                                           ! 832   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03629 0C28                        15            .byte	$15
03630 0C29                        15            .byte	$15
03631 0C2A                        00            .byte	0
03632 0C2B                        15            .byte	$15
03633 0C2C                        15            .byte	$15
03634 0C2D                        2A            .byte	$2A
03635 0C2E                        15            .byte	$15
03636 0C2F                        3F            .byte	$3F
03637 0C30                        00            .byte	0
03638 0C31                        15            .byte	$15
03639 0C32                        3F            .byte	$3F
03640 0C33                        2A            .byte	$2A
03641 0C34                        3F            .byte	$3F
03642 0C35                        15            .byte	$15
03643 0C36                        00            .byte	0
03644 0C37                        3F            .byte	$3F
03645 0C38                        15            .byte	$15
03646 0C39                        2A            .byte	$2A
03647 0C3A                        3F            .byte	$3F
03648 0C3B                        3F            .byte	$3F
03649 0C3C                        00            .byte	0
03650 0C3D                        3F            .byte	$3F
03651 0C3E                        3F            .byte	$3F
03652 0C3F                        2A            .byte	$2A
03653                                           ! 833   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03654 0C40                        15            .byte	$15
03655 0C41                        15            .byte	$15
03656 0C42                        15            .byte	$15
03657 0C43                        15            .byte	$15
03658 0C44                        15            .byte	$15
03659 0C45                        3F            .byte	$3F
03660 0C46                        15            .byte	$15
03661 0C47                        3F            .byte	$3F
03662 0C48                        15            .byte	$15
03663 0C49                        15            .byte	$15
03664 0C4A                        3F            .byte	$3F
03665 0C4B                        3F            .byte	$3F
03666 0C4C                        3F            .byte	$3F
03667 0C4D                        15            .byte	$15
03668 0C4E                        15            .byte	$15
03669 0C4F                        3F            .byte	$3F
03670 0C50                        15            .byte	$15
03671 0C51                        3F            .byte	$3F
03672 0C52                        3F            .byte	$3F
03673 0C53                        3F            .byte	$3F
03674 0C54                        15            .byte	$15
03675 0C55                        3F            .byte	$3F
03676 0C56                        3F            .byte	$3F
03677                                           ! 834 };
03678 0C57                        3F            .byte	$3F
03679                                           !BCC_EOS
03680                                           ! 835 static Bit8u palette3[256][3]=
03681                                           ! 836 {
03682                       00000C58            _palette3:
03683                                           ! 837   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03684 0C58                        00            .byte	0
03685 0C59                        00            .byte	0
03686 0C5A                        00            .byte	0
03687 0C5B                        00            .byte	0
03688 0C5C                        00            .byte	0
03689 0C5D                        2A            .byte	$2A
03690 0C5E                        00            .byte	0
03691 0C5F                        2A            .byte	$2A
03692 0C60                        00            .byte	0
03693 0C61                        00            .byte	0
03694 0C62                        2A            .byte	$2A
03695 0C63                        2A            .byte	$2A
03696 0C64                        2A            .byte	$2A
03697 0C65                        00            .byte	0
03698 0C66                        00            .byte	0
03699 0C67                        2A            .byte	$2A
03700 0C68                        00            .byte	0
03701 0C69                        2A            .byte	$2A
03702 0C6A                        2A            .byte	$2A
03703 0C6B                        15            .byte	$15
03704 0C6C                        00            .byte	0
03705 0C6D                        2A            .byte	$2A
03706 0C6E                        2A            .byte	$2A
03707 0C6F                        2A            .byte	$2A
03708                                           ! 838   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03709 0C70                        15            .byte	$15
03710 0C71                        15            .byte	$15
03711 0C72                        15            .byte	$15
03712 0C73                        15            .byte	$15
03713 0C74                        15            .byte	$15
03714 0C75                        3F            .byte	$3F
03715 0C76                        15            .byte	$15
03716 0C77                        3F            .byte	$3F
03717 0C78                        15            .byte	$15
03718 0C79                        15            .byte	$15
03719 0C7A                        3F            .byte	$3F
03720 0C7B                        3F            .byte	$3F
03721 0C7C                        3F            .byte	$3F
03722 0C7D                        15            .byte	$15
03723 0C7E                        15            .byte	$15
03724 0C7F                        3F            .byte	$3F
03725 0C80                        15            .byte	$15
03726 0C81                        3F            .byte	$3F
03727 0C82                        3F            .byte	$3F
03728 0C83                        3F            .byte	$3F
03729 0C84                        15            .byte	$15
03730 0C85                        3F            .byte	$3F
03731 0C86                        3F            .byte	$3F
03732 0C87                        3F            .byte	$3F
03733                                           ! 839   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03734 0C88                        00            .byte	0
03735 0C89                        00            .byte	0
03736 0C8A                        00            .byte	0
03737 0C8B                        05            .byte	5
03738 0C8C                        05            .byte	5
03739 0C8D                        05            .byte	5
03740 0C8E                        08            .byte	8
03741 0C8F                        08            .byte	8
03742 0C90                        08            .byte	8
03743 0C91                        0B            .byte	$B
03744 0C92                        0B            .byte	$B
03745 0C93                        0B            .byte	$B
03746 0C94                        0E            .byte	$E
03747 0C95                        0E            .byte	$E
03748 0C96                        0E            .byte	$E
03749 0C97                        11            .byte	$11
03750 0C98                        11            .byte	$11
03751 0C99                        11            .byte	$11
03752 0C9A                        14            .byte	$14
03753 0C9B                        14            .byte	$14
03754 0C9C                        14            .byte	$14
03755 0C9D                        18            .byte	$18
03756 0C9E                        18            .byte	$18
03757 0C9F                        18            .byte	$18
03758                                           ! 840   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03759 0CA0                        1C            .byte	$1C
03760 0CA1                        1C            .byte	$1C
03761 0CA2                        1C            .byte	$1C
03762 0CA3                        20            .byte	$20
03763 0CA4                        20            .byte	$20
03764 0CA5                        20            .byte	$20
03765 0CA6                        24            .byte	$24
03766 0CA7                        24            .byte	$24
03767 0CA8                        24            .byte	$24
03768 0CA9                        28            .byte	$28
03769 0CAA                        28            .byte	$28
03770 0CAB                        28            .byte	$28
03771 0CAC                        2D            .byte	$2D
03772 0CAD                        2D            .byte	$2D
03773 0CAE                        2D            .byte	$2D
03774 0CAF                        32            .byte	$32
03775 0CB0                        32            .byte	$32
03776 0CB1                        32            .byte	$32
03777 0CB2                        38            .byte	$38
03778 0CB3                        38            .byte	$38
03779 0CB4                        38            .byte	$38
03780 0CB5                        3F            .byte	$3F
03781 0CB6                        3F            .byte	$3F
03782 0CB7                        3F            .byte	$3F
03783                                           ! 841   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03784 0CB8                        00            .byte	0
03785 0CB9                        00            .byte	0
03786 0CBA                        3F            .byte	$3F
03787 0CBB                        10            .byte	$10
03788 0CBC                        00            .byte	0
03789 0CBD                        3F            .byte	$3F
03790 0CBE                        1F            .byte	$1F
03791 0CBF                        00            .byte	0
03792 0CC0                        3F            .byte	$3F
03793 0CC1                        2F            .byte	$2F
03794 0CC2                        00            .byte	0
03795 0CC3                        3F            .byte	$3F
03796 0CC4                        3F            .byte	$3F
03797 0CC5                        00            .byte	0
03798 0CC6                        3F            .byte	$3F
03799 0CC7                        3F            .byte	$3F
03800 0CC8                        00            .byte	0
03801 0CC9                        2F            .byte	$2F
03802 0CCA                        3F            .byte	$3F
03803 0CCB                        00            .byte	0
03804 0CCC                        1F            .byte	$1F
03805 0CCD                        3F            .byte	$3F
03806 0CCE                        00            .byte	0
03807 0CCF                        10            .byte	$10
03808                                           ! 842   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03809 0CD0                        3F            .byte	$3F
03810 0CD1                        00            .byte	0
03811 0CD2                        00            .byte	0
03812 0CD3                        3F            .byte	$3F
03813 0CD4                        10            .byte	$10
03814 0CD5                        00            .byte	0
03815 0CD6                        3F            .byte	$3F
03816 0CD7                        1F            .byte	$1F
03817 0CD8                        00            .byte	0
03818 0CD9                        3F            .byte	$3F
03819 0CDA                        2F            .byte	$2F
03820 0CDB                        00            .byte	0
03821 0CDC                        3F            .byte	$3F
03822 0CDD                        3F            .byte	$3F
03823 0CDE                        00            .byte	0
03824 0CDF                        2F            .byte	$2F
03825 0CE0                        3F            .byte	$3F
03826 0CE1                        00            .byte	0
03827 0CE2                        1F            .byte	$1F
03828 0CE3                        3F            .byte	$3F
03829 0CE4                        00            .byte	0
03830 0CE5                        10            .byte	$10
03831 0CE6                        3F            .byte	$3F
03832 0CE7                        00            .byte	0
03833                                           ! 843   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03834 0CE8                        00            .byte	0
03835 0CE9                        3F            .byte	$3F
03836 0CEA                        00            .byte	0
03837 0CEB                        00            .byte	0
03838 0CEC                        3F            .byte	$3F
03839 0CED                        10            .byte	$10
03840 0CEE                        00            .byte	0
03841 0CEF                        3F            .byte	$3F
03842 0CF0                        1F            .byte	$1F
03843 0CF1                        00            .byte	0
03844 0CF2                        3F            .byte	$3F
03845 0CF3                        2F            .byte	$2F
03846 0CF4                        00            .byte	0
03847 0CF5                        3F            .byte	$3F
03848 0CF6                        3F            .byte	$3F
03849 0CF7                        00            .byte	0
03850 0CF8                        2F            .byte	$2F
03851 0CF9                        3F            .byte	$3F
03852 0CFA                        00            .byte	0
03853 0CFB                        1F            .byte	$1F
03854 0CFC                        3F            .byte	$3F
03855 0CFD                        00            .byte	0
03856 0CFE                        10            .byte	$10
03857 0CFF                        3F            .byte	$3F
03858                                           ! 844   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03859 0D00                        1F            .byte	$1F
03860 0D01                        1F            .byte	$1F
03861 0D02                        3F            .byte	$3F
03862 0D03                        27            .byte	$27
03863 0D04                        1F            .byte	$1F
03864 0D05                        3F            .byte	$3F
03865 0D06                        2F            .byte	$2F
03866 0D07                        1F            .byte	$1F
03867 0D08                        3F            .byte	$3F
03868 0D09                        37            .byte	$37
03869 0D0A                        1F            .byte	$1F
03870 0D0B                        3F            .byte	$3F
03871 0D0C                        3F            .byte	$3F
03872 0D0D                        1F            .byte	$1F
03873 0D0E                        3F            .byte	$3F
03874 0D0F                        3F            .byte	$3F
03875 0D10                        1F            .byte	$1F
03876 0D11                        37            .byte	$37
03877 0D12                        3F            .byte	$3F
03878 0D13                        1F            .byte	$1F
03879 0D14                        2F            .byte	$2F
03880 0D15                        3F            .byte	$3F
03881 0D16                        1F            .byte	$1F
03882 0D17                        27            .byte	$27
03883                                           ! 845   0x
03884                                           ! 845 3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03885 0D18                        3F            .byte	$3F
03886 0D19                        1F            .byte	$1F
03887 0D1A                        1F            .byte	$1F
03888 0D1B                        3F            .byte	$3F
03889 0D1C                        27            .byte	$27
03890 0D1D                        1F            .byte	$1F
03891 0D1E                        3F            .byte	$3F
03892 0D1F                        2F            .byte	$2F
03893 0D20                        1F            .byte	$1F
03894 0D21                        3F            .byte	$3F
03895 0D22                        37            .byte	$37
03896 0D23                        1F            .byte	$1F
03897 0D24                        3F            .byte	$3F
03898 0D25                        3F            .byte	$3F
03899 0D26                        1F            .byte	$1F
03900 0D27                        37            .byte	$37
03901 0D28                        3F            .byte	$3F
03902 0D29                        1F            .byte	$1F
03903 0D2A                        2F            .byte	$2F
03904 0D2B                        3F            .byte	$3F
03905 0D2C                        1F            .byte	$1F
03906 0D2D                        27            .byte	$27
03907 0D2E                        3F            .byte	$3F
03908 0D2F                        1F            .byte	$1F
03909                                           ! 846   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03910 0D30                        1F            .byte	$1F
03911 0D31                        3F            .byte	$3F
03912 0D32                        1F            .byte	$1F
03913 0D33                        1F            .byte	$1F
03914 0D34                        3F            .byte	$3F
03915 0D35                        27            .byte	$27
03916 0D36                        1F            .byte	$1F
03917 0D37                        3F            .byte	$3F
03918 0D38                        2F            .byte	$2F
03919 0D39                        1F            .byte	$1F
03920 0D3A                        3F            .byte	$3F
03921 0D3B                        37            .byte	$37
03922 0D3C                        1F            .byte	$1F
03923 0D3D                        3F            .byte	$3F
03924 0D3E                        3F            .byte	$3F
03925 0D3F                        1F            .byte	$1F
03926 0D40                        37            .byte	$37
03927 0D41                        3F            .byte	$3F
03928 0D42                        1F            .byte	$1F
03929 0D43                        2F            .byte	$2F
03930 0D44                        3F            .byte	$3F
03931 0D45                        1F            .byte	$1F
03932 0D46                        27            .byte	$27
03933 0D47                        3F            .byte	$3F
03934                                           ! 847   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03935 0D48                        2D            .byte	$2D
03936 0D49                        2D            .byte	$2D
03937 0D4A                        3F            .byte	$3F
03938 0D4B                        31            .byte	$31
03939 0D4C                        2D            .byte	$2D
03940 0D4D                        3F            .byte	$3F
03941 0D4E                        36            .byte	$36
03942 0D4F                        2D            .byte	$2D
03943 0D50                        3F            .byte	$3F
03944 0D51                        3A            .byte	$3A
03945 0D52                        2D            .byte	$2D
03946 0D53                        3F            .byte	$3F
03947 0D54                        3F            .byte	$3F
03948 0D55                        2D            .byte	$2D
03949 0D56                        3F            .byte	$3F
03950 0D57                        3F            .byte	$3F
03951 0D58                        2D            .byte	$2D
03952 0D59                        3A            .byte	$3A
03953 0D5A                        3F            .byte	$3F
03954 0D5B                        2D            .byte	$2D
03955 0D5C                        36            .byte	$36
03956 0D5D                        3F            .byte	$3F
03957 0D5E                        2D            .byte	$2D
03958 0D5F                        31            .byte	$31
03959                                           ! 848   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03960 0D60                        3F            .byte	$3F
03961 0D61                        2D            .byte	$2D
03962 0D62                        2D            .byte	$2D
03963 0D63                        3F            .byte	$3F
03964 0D64                        31            .byte	$31
03965 0D65                        2D            .byte	$2D
03966 0D66                        3F            .byte	$3F
03967 0D67                        36            .byte	$36
03968 0D68                        2D            .byte	$2D
03969 0D69                        3F            .byte	$3F
03970 0D6A                        3A            .byte	$3A
03971 0D6B                        2D            .byte	$2D
03972 0D6C                        3F            .byte	$3F
03973 0D6D                        3F            .byte	$3F
03974 0D6E                        2D            .byte	$2D
03975 0D6F                        3A            .byte	$3A
03976 0D70                        3F            .byte	$3F
03977 0D71                        2D            .byte	$2D
03978 0D72                        36            .byte	$36
03979 0D73                        3F            .byte	$3F
03980 0D74                        2D            .byte	$2D
03981 0D75                        31            .byte	$31
03982 0D76                        3F            .byte	$3F
03983 0D77                        2D            .byte	$2D
03984                                           ! 849   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03985 0D78                        2D            .byte	$2D
03986 0D79                        3F            .byte	$3F
03987 0D7A                        2D            .byte	$2D
03988 0D7B                        2D            .byte	$2D
03989 0D7C                        3F            .byte	$3F
03990 0D7D                        31            .byte	$31
03991 0D7E                        2D            .byte	$2D
03992 0D7F                        3F            .byte	$3F
03993 0D80                        36            .byte	$36
03994 0D81                        2D            .byte	$2D
03995 0D82                        3F            .byte	$3F
03996 0D83                        3A            .byte	$3A
03997 0D84                        2D            .byte	$2D
03998 0D85                        3F            .byte	$3F
03999 0D86                        3F            .byte	$3F
04000 0D87                        2D            .byte	$2D
04001 0D88                        3A            .byte	$3A
04002 0D89                        3F            .byte	$3F
04003 0D8A                        2D            .byte	$2D
04004 0D8B                        36            .byte	$36
04005 0D8C                        3F            .byte	$3F
04006 0D8D                        2D            .byte	$2D
04007 0D8E                        31            .byte	$31
04008 0D8F                        3F            .byte	$3F
04009                                           ! 850   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
04010 0D90                        00            .byte	0
04011 0D91                        00            .byte	0
04012 0D92                        1C            .byte	$1C
04013 0D93                        07            .byte	7
04014 0D94                        00            .byte	0
04015 0D95                        1C            .byte	$1C
04016 0D96                        0E            .byte	$E
04017 0D97                        00            .byte	0
04018 0D98                        1C            .byte	$1C
04019 0D99                        15            .byte	$15
04020 0D9A                        00            .byte	0
04021 0D9B                        1C            .byte	$1C
04022 0D9C                        1C            .byte	$1C
04023 0D9D                        00            .byte	0
04024 0D9E                        1C            .byte	$1C
04025 0D9F                        1C            .byte	$1C
04026 0DA0                        00            .byte	0
04027 0DA1                        15            .byte	$15
04028 0DA2                        1C            .byte	$1C
04029 0DA3                        00            .byte	0
04030 0DA4                        0E            .byte	$E
04031 0DA5                        1C            .byte	$1C
04032 0DA6                        00            .byte	0
04033 0DA7                        07            .byte	7
04034                                           ! 851   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04035 0DA8                        1C            .byte	$1C
04036 0DA9                        00            .byte	0
04037 0DAA                        00            .byte	0
04038 0DAB                        1C            .byte	$1C
04039 0DAC                        07            .byte	7
04040 0DAD                        00            .byte	0
04041 0DAE                        1C            .byte	$1C
04042 0DAF                        0E            .byte	$E
04043 0DB0                        00            .byte	0
04044 0DB1                        1C            .byte	$1C
04045 0DB2                        15            .byte	$15
04046 0DB3                        00            .byte	0
04047 0DB4                        1C            .byte	$1C
04048 0DB5                        1C            .byte	$1C
04049 0DB6                        00            .byte	0
04050 0DB7                        15            .byte	$15
04051 0DB8                        1C            .byte	$1C
04052 0DB9                        00            .byte	0
04053 0DBA                        0E            .byte	$E
04054 0DBB                        1C            .byte	$1C
04055 0DBC                        00            .byte	0
04056 0DBD                        07            .byte	7
04057 0DBE                        1C            .byte	$1C
04058 0DBF                        00            .byte	0
04059                                           ! 852   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04060 0DC0                        00            .byte	0
04061 0DC1                        1C            .byte	$1C
04062 0DC2                        00            .byte	0
04063 0DC3                        00            .byte	0
04064 0DC4                        1C            .byte	$1C
04065 0DC5                        07            .byte	7
04066 0DC6                        00            .byte	0
04067 0DC7                        1C            .byte	$1C
04068 0DC8                        0E            .byte	$E
04069 0DC9                        00            .byte	0
04070 0DCA                        1C            .byte	$1C
04071 0DCB                        15            .byte	$15
04072 0DCC                        00            .byte	0
04073 0DCD                        1C            .byte	$1C
04074 0DCE                        1C            .byte	$1C
04075 0DCF                        00            .byte	0
04076 0DD0                        15            .byte	$15
04077 0DD1                        1C            .byte	$1C
04078 0DD2                        00            .byte	0
04079 0DD3                        0E            .byte	$E
04080 0DD4                        1C            .byte	$1C
04081 0DD5                        00            .byte	0
04082 0DD6                        07            .byte	7
04083 0DD7                        1C            .byte	$1C
04084                                           ! 853   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04085 0DD8                        0E            .byte	$E
04086 0DD9                        0E            .byte	$E
04087 0DDA                        1C            .byte	$1C
04088 0DDB                        11            .byte	$11
04089 0DDC                        0E            .byte	$E
04090 0DDD                        1C            .byte	$1C
04091 0DDE                        15            .byte	$15
04092 0DDF                        0E            .byte	$E
04093 0DE0                        1C            .byte	$1C
04094 0DE1                        18            .byte	$18
04095 0DE2                        0E            .byte	$E
04096 0DE3                        1C            .byte	$1C
04097 0DE4                        1C            .byte	$1C
04098 0DE5                        0E            .byte	$E
04099 0DE6                        1C            .byte	$1C
04100 0DE7                        1C            .byte	$1C
04101 0DE8                        0E            .byte	$E
04102 0DE9                        18            .byte	$18
04103 0DEA                        1C            .byte	$1C
04104 0DEB                        0E            .byte	$E
04105 0DEC                        15            .byte	$15
04106 0DED                        1C            .byte	$1C
04107 0DEE                        0E            .byte	$E
04108 0DEF                        11            .byte	$11
04109                                           ! 854   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04110 0DF0                        1C            .byte	$1C
04111 0DF1                        0E            .byte	$E
04112 0DF2                        0E            .byte	$E
04113 0DF3                        1C            .byte	$1C
04114 0DF4                        11            .byte	$11
04115 0DF5                        0E            .byte	$E
04116 0DF6                        1C            .byte	$1C
04117 0DF7                        15            .byte	$15
04118 0DF8                        0E            .byte	$E
04119 0DF9                        1C            .byte	$1C
04120 0DFA                        18            .byte	$18
04121 0DFB                        0E            .byte	$E
04122 0DFC                        1C            .byte	$1C
04123 0DFD                        1C            .byte	$1C
04124 0DFE                        0E            .byte	$E
04125 0DFF                        18            .byte	$18
04126 0E00                        1C            .byte	$1C
04127 0E01                        0E            .byte	$E
04128 0E02                        15            .byte	$15
04129 0E03                        1C            .byte	$1C
04130 0E04                        0E            .byte	$E
04131 0E05                        11            .byte	$11
04132 0E06                        1C            .byte	$1C
04133 0E07                        0E            .byte	$E
04134                                           ! 855   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04135 0E08                        0E            .byte	$E
04136 0E09                        1C            .byte	$1C
04137 0E0A                        0E            .byte	$E
04138 0E0B                        0E            .byte	$E
04139 0E0C                        1C            .byte	$1C
04140 0E0D                        11            .byte	$11
04141 0E0E                        0E            .byte	$E
04142 0E0F                        1C            .byte	$1C
04143 0E10                        15            .byte	$15
04144 0E11                        0E            .byte	$E
04145 0E12                        1C            .byte	$1C
04146 0E13                        18            .byte	$18
04147 0E14                        0E            .byte	$E
04148 0E15                        1C            .byte	$1C
04149 0E16                        1C            .byte	$1C
04150 0E17                        0E            .byte	$E
04151 0E18                        18            .byte	$18
04152 0E19                        1C            .byte	$1C
04153 0E1A                        0E            .byte	$E
04154 0E1B                        15            .byte	$15
04155 0E1C                        1C            .byte	$1C
04156 0E1D                        0E            .byte	$E
04157 0E1E                        11            .byte	$11
04158 0E1F                        1C            .byte	$1C
04159                                           ! 856   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04160 0E20                        14            .byte	$14
04161 0E21                        14            .byte	$14
04162 0E22                        1C            .byte	$1C
04163 0E23                        16            .byte	$16
04164 0E24                        14            .byte	$14
04165 0E25                        1C            .byte	$1C
04166 0E26                        18            .byte	$18
04167 0E27                        14            .byte	$14
04168 0E28                        1C            .byte	$1C
04169 0E29                        1A            .byte	$1A
04170 0E2A                        14            .byte	$14
04171 0E2B                        1C            .byte	$1C
04172 0E2C                        1C            .byte	$1C
04173 0E2D                        14            .byte	$14
04174 0E2E                        1C            .byte	$1C
04175 0E2F                        1C            .byte	$1C
04176 0E30                        14            .byte	$14
04177 0E31                        1A            .byte	$1A
04178 0E32                        1C            .byte	$1C
04179 0E33                        14            .byte	$14
04180 0E34                        18            .byte	$18
04181 0E35                        1C            .byte	$1C
04182 0E36                        14            .byte	$14
04183 0E37                        16            .byte	$16
04184                                           ! 857   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04185 0E38                        1C            .byte	$1C
04186 0E39                        14            .byte	$14
04187 0E3A                        14            .byte	$14
04188 0E3B                        1C            .byte	$1C
04189 0E3C                        16            .byte	$16
04190 0E3D                        14            .byte	$14
04191 0E3E                        1C            .byte	$1C
04192 0E3F                        18            .byte	$18
04193 0E40                        14            .byte	$14
04194 0E41                        1C            .byte	$1C
04195 0E42                        1A            .byte	$1A
04196 0E43                        14            .byte	$14
04197 0E44                        1C            .byte	$1C
04198 0E45                        1C            .byte	$1C
04199 0E46                        14            .byte	$14
04200 0E47                        1A            .byte	$1A
04201 0E48                        1C            .byte	$1C
04202 0E49                        14            .byte	$14
04203 0E4A                        18            .byte	$18
04204 0E4B                        1C            .byte	$1C
04205 0E4C                        14            .byte	$14
04206 0E4D                        16            .byte	$16
04207 0E4E                        1C            .byte	$1C
04208 0E4F                        14            .byte	$14
04209                                           ! 858   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04210 0E50                        14            .byte	$14
04211 0E51                        1C            .byte	$1C
04212 0E52                        14            .byte	$14
04213 0E53                        14            .byte	$14
04214 0E54                        1C            .byte	$1C
04215 0E55                        16            .byte	$16
04216 0E56                        14            .byte	$14
04217 0E57                        1C            .byte	$1C
04218 0E58                        18            .byte	$18
04219 0E59                        14            .byte	$14
04220 0E5A                        1C            .byte	$1C
04221 0E5B                        1A            .byte	$1A
04222 0E5C                        14            .byte	$14
04223 0E5D                        1C            .byte	$1C
04224 0E5E                        1C            .byte	$1C
04225 0E5F                        14            .byte	$14
04226 0E60                        1A            .byte	$1A
04227 0E61                        1C            .byte	$1C
04228 0E62                        14            .byte	$14
04229 0E63                        18            .byte	$18
04230 0E64                        1C            .byte	$1C
04231 0E65                        14            .byte	$14
04232 0E66                        16            .byte	$16
04233 0E67                        1C            .byte	$1C
04234                                           ! 859   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04235 0E68                        00            .byte	0
04236 0E69                        00            .byte	0
04237 0E6A                        10            .byte	$10
04238 0E6B                        04            .byte	4
04239 0E6C                        00            .byte	0
04240 0E6D                        10            .byte	$10
04241 0E6E                        08            .byte	8
04242 0E6F                        00            .byte	0
04243 0E70                        10            .byte	$10
04244 0E71                        0C            .byte	$C
04245 0E72                        00            .byte	0
04246 0E73                        10            .byte	$10
04247 0E74                        10            .byte	$10
04248 0E75                        00            .byte	0
04249 0E76                        10            .byte	$10
04250 0E77                        10            .byte	$10
04251 0E78                        00            .byte	0
04252 0E79                        0C            .byte	$C
04253 0E7A                        10            .byte	$10
04254 0E7B                        00            .byte	0
04255 0E7C                        08            .byte	8
04256 0E7D                        10            .byte	$10
04257 0E7E                        00            .byte	0
04258 0E7F                        04            .byte	4
04259                                           ! 860   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08
04260 0E80                        10            .byte	$10
04261 0E81                        00            .byte	0
04262 0E82                        00            .byte	0
04263 0E83                        10            .byte	$10
04264 0E84                        04            .byte	4
04265 0E85                        00            .byte	0
04266 0E86                        10            .byte	$10
04267 0E87                        08            .byte	8
04268 0E88                        00            .byte	0
04269 0E89                        10            .byte	$10
04270 0E8A                        0C            .byte	$C
04271 0E8B                        00            .byte	0
04272 0E8C                        10            .byte	$10
04273 0E8D                        10            .byte	$10
04274 0E8E                        00            .byte	0
04275 0E8F                        0C            .byte	$C
04276 0E90                        10            .byte	$10
04277 0E91                        00            .byte	0
04278                                           ! 860 ,0x10,0x00, 0x04,0x10,0x00,
04279 0E92                        08            .byte	8
04280 0E93                        10            .byte	$10
04281 0E94                        00            .byte	0
04282 0E95                        04            .byte	4
04283 0E96                        10            .byte	$10
04284 0E97                        00            .byte	0
04285                                           ! 861   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04286 0E98                        00            .byte	0
04287 0E99                        10            .byte	$10
04288 0E9A                        00            .byte	0
04289 0E9B                        00            .byte	0
04290 0E9C                        10            .byte	$10
04291 0E9D                        04            .byte	4
04292 0E9E                        00            .byte	0
04293 0E9F                        10            .byte	$10
04294 0EA0                        08            .byte	8
04295 0EA1                        00            .byte	0
04296 0EA2                        10            .byte	$10
04297 0EA3                        0C            .byte	$C
04298 0EA4                        00            .byte	0
04299 0EA5                        10            .byte	$10
04300 0EA6                        10            .byte	$10
04301 0EA7                        00            .byte	0
04302 0EA8                        0C            .byte	$C
04303 0EA9                        10            .byte	$10
04304 0EAA                        00            .byte	0
04305 0EAB                        08            .byte	8
04306 0EAC                        10            .byte	$10
04307 0EAD                        00            .byte	0
04308 0EAE                        04            .byte	4
04309 0EAF                        10            .byte	$10
04310                                           ! 862   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04311 0EB0                        08            .byte	8
04312 0EB1                        08            .byte	8
04313 0EB2                        10            .byte	$10
04314 0EB3                        0A            .byte	$A
04315 0EB4                        08            .byte	8
04316 0EB5                        10            .byte	$10
04317 0EB6                        0C            .byte	$C
04318 0EB7                        08            .byte	8
04319 0EB8                        10            .byte	$10
04320 0EB9                        0E            .byte	$E
04321 0EBA                        08            .byte	8
04322 0EBB                        10            .byte	$10
04323 0EBC                        10            .byte	$10
04324 0EBD                        08            .byte	8
04325 0EBE                        10            .byte	$10
04326 0EBF                        10            .byte	$10
04327 0EC0                        08            .byte	8
04328 0EC1                        0E            .byte	$E
04329 0EC2                        10            .byte	$10
04330 0EC3                        08            .byte	8
04331 0EC4                        0C            .byte	$C
04332 0EC5                        10            .byte	$10
04333 0EC6                        08            .byte	8
04334 0EC7                        0A            .byte	$A
04335                                           ! 863   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04336 0EC8                        10            .byte	$10
04337 0EC9                        08            .byte	8
04338 0ECA                        08            .byte	8
04339 0ECB                        10            .byte	$10
04340 0ECC                        0A            .byte	$A
04341 0ECD                        08            .byte	8
04342 0ECE                        10            .byte	$10
04343 0ECF                        0C            .byte	$C
04344 0ED0                        08            .byte	8
04345 0ED1                        10            .byte	$10
04346 0ED2                        0E            .byte	$E
04347 0ED3                        08            .byte	8
04348 0ED4                        10            .byte	$10
04349 0ED5                        10            .byte	$10
04350 0ED6                        08            .byte	8
04351 0ED7                        0E            .byte	$E
04352 0ED8                        10            .byte	$10
04353 0ED9                        08            .byte	8
04354 0EDA                        0C            .byte	$C
04355 0EDB                        10            .byte	$10
04356 0EDC                        08            .byte	8
04357 0EDD                        0A            .byte	$A
04358 0EDE                        10            .byte	$10
04359 0EDF                        08            .byte	8
04360                                           ! 864   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04361 0EE0                        08            .byte	8
04362 0EE1                        10            .byte	$10
04363 0EE2                        08            .byte	8
04364 0EE3                        08            .byte	8
04365 0EE4                        10            .byte	$10
04366 0EE5                        0A            .byte	$A
04367 0EE6                        08            .byte	8
04368 0EE7                        10            .byte	$10
04369 0EE8                        0C            .byte	$C
04370 0EE9                        08            .byte	8
04371 0EEA                        10            .byte	$10
04372 0EEB                        0E            .byte	$E
04373 0EEC                        08            .byte	8
04374 0EED                        10            .byte	$10
04375 0EEE                        10            .byte	$10
04376 0EEF                        08            .byte	8
04377 0EF0                        0E            .byte	$E
04378 0EF1                        10            .byte	$10
04379 0EF2                        08            .byte	8
04380 0EF3                        0C            .byte	$C
04381 0EF4                        10            .byte	$10
04382 0EF5                        08            .byte	8
04383 0EF6                        0A            .byte	$A
04384 0EF7                        10            .byte	$10
04385                                           ! 865   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04386 0EF8                        0B            .byte	$B
04387 0EF9                        0B            .byte	$B
04388 0EFA                        10            .byte	$10
04389 0EFB                        0C            .byte	$C
04390 0EFC                        0B            .byte	$B
04391 0EFD                        10            .byte	$10
04392 0EFE                        0D            .byte	$D
04393 0EFF                        0B            .byte	$B
04394 0F00                        10            .byte	$10
04395 0F01                        0F            .byte	$F
04396 0F02                        0B            .byte	$B
04397 0F03                        10            .byte	$10
04398 0F04                        10            .byte	$10
04399 0F05                        0B            .byte	$B
04400 0F06                        10            .byte	$10
04401 0F07                        10            .byte	$10
04402 0F08                        0B            .byte	$B
04403 0F09                        0F            .byte	$F
04404 0F0A                        10            .byte	$10
04405 0F0B                        0B            .byte	$B
04406 0F0C                        0D            .byte	$D
04407 0F0D                        10            .byte	$10
04408 0F0E                        0B            .byte	$B
04409 0F0F                        0C            .byte	$C
04410                                           ! 866   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04411 0F10                        10            .byte	$10
04412 0F11                        0B            .byte	$B
04413 0F12                        0B            .byte	$B
04414 0F13                        10            .byte	$10
04415 0F14                        0C            .byte	$C
04416 0F15                        0B            .byte	$B
04417 0F16                        10            .byte	$10
04418 0F17                        0D            .byte	$D
04419 0F18                        0B            .byte	$B
04420 0F19                        10            .byte	$10
04421 0F1A                        0F            .byte	$F
04422 0F1B                        0B            .byte	$B
04423 0F1C                        10            .byte	$10
04424 0F1D                        10            .byte	$10
04425 0F1E                        0B            .byte	$B
04426 0F1F                        0F            .byte	$F
04427 0F20                        10            .byte	$10
04428 0F21                        0B            .byte	$B
04429 0F22                        0D            .byte	$D
04430 0F23                        10            .byte	$10
04431 0F24                        0B            .byte	$B
04432 0F25                        0C            .byte	$C
04433 0F26                        10            .byte	$10
04434 0F27                        0B            .byte	$B
04435                                           ! 867   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04436 0F28                        0B            .byte	$B
04437 0F29                        10            .byte	$10
04438 0F2A                        0B            .byte	$B
04439 0F2B                        0B            .byte	$B
04440 0F2C                        10            .byte	$10
04441 0F2D                        0C            .byte	$C
04442 0F2E                        0B            .byte	$B
04443 0F2F                        10            .byte	$10
04444 0F30                        0D            .byte	$D
04445 0F31                        0B            .byte	$B
04446 0F32                        10            .byte	$10
04447 0F33                        0F            .byte	$F
04448 0F34                        0B            .byte	$B
04449 0F35                        10            .byte	$10
04450 0F36                        10            .byte	$10
04451 0F37                        0B            .byte	$B
04452 0F38                        0F            .byte	$F
04453 0F39                        10            .byte	$10
04454 0F3A                        0B            .byte	$B
04455 0F3B                        0D            .byte	$D
04456 0F3C                        10            .byte	$10
04457 0F3D                        0B            .byte	$B
04458 0F3E                        0C            .byte	$C
04459 0F3F                        10            .byte	$10
04460                                           ! 868   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04461 0F40                        00            .byte	0
04462 0F41                        00            .byte	0
04463 0F42                        00            .byte	0
04464 0F43                        00            .byte	0
04465 0F44                        00            .byte	0
04466 0F45                        00            .byte	0
04467 0F46                        00            .byte	0
04468 0F47                        00            .byte	0
04469 0F48                        00            .byte	0
04470 0F49                        00            .byte	0
04471 0F4A                        00            .byte	0
04472 0F4B                        00            .byte	0
04473 0F4C                        00            .byte	0
04474 0F4D                        00            .byte	0
04475 0F4E                        00            .byte	0
04476 0F4F                        00            .byte	0
04477 0F50                        00            .byte	0
04478 0F51                        00            .byte	0
04479 0F52                        00            .byte	0
04480 0F53                        00            .byte	0
04481 0F54                        00            .byte	0
04482 0F55                        00            .byte	0
04483 0F56                        00            .byte	0
04484                                           ! 869 };
04485 0F57                        00            .byte	0
04486                                           !BCC_EOS
04487                                           ! 870 static Bit8u static_functionality[0x10]=
04488                                           ! 871 {
04489                       00000F58            _static_functionality:
04490                                           ! 872          0xff,
04491 0F58                        FF            .byte	$FF
04492                                           ! 873          0xe0,
04493 0F59                        E0            .byte	$E0
04494                                           ! 874          0x0f,
04495 0F5A                        0F            .byte	$F
04496                                           ! 875          0x00, 0x00, 0x00, 0x00,
04497 0F5B                        00            .byte	0
04498 0F5C                        00            .byte	0
04499 0F5D                        00            .byte	0
04500 0F5E                        00            .byte	0
04501                                           ! 876          0x07,
04502 0F5F                        07            .byte	7
04503                                           ! 877          0x02,
04504 0F60                        02            .byte	2
04505                                           ! 878          0x08,
04506 0F61                        08            .byte	8
04507                                           ! 879          0xe7,
04508 0F62                        E7            .byte	$E7
04509                                           ! 880          0x0c,
04510 0F63                        0C            .byte	$C
04511                                           ! 881          0x00,
04512 0F64                        00            .byte	0
04513                                           ! 882          0x00,
04514 0F65                        00            .byte	0
04515                                           ! 883          0x00,
04516 0F66                        00            .byte	0
04517                                           ! 884          0x00
04518                                           ! 885 };
04519 0F67                        00            .byte	0
04520                                           !BCC_EOS
04521                                           ! 886 static Bit8u vgafont8[256*8]=
04522                                           ! 887 {
04523                       00000F68            _vgafont8:
04524                                           ! 888  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04525 0F68                        00            .byte	0
04526 0F69                        00            .byte	0
04527 0F6A                        00            .byte	0
04528 0F6B                        00            .byte	0
04529 0F6C                        00            .byte	0
04530 0F6D                        00            .byte	0
04531 0F6E                        00            .byte	0
04532 0F6F                        00            .byte	0
04533                                           ! 889  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04534 0F70                        7E            .byte	$7E
04535 0F71                        81            .byte	$81
04536 0F72                        A5            .byte	$A5
04537 0F73                        81            .byte	$81
04538 0F74                        BD            .byte	$BD
04539 0F75                        99            .byte	$99
04540 0F76                        81            .byte	$81
04541 0F77                        7E            .byte	$7E
04542                                           ! 890  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04543 0F78                        7E            .byte	$7E
04544 0F79                        FF            .byte	$FF
04545 0F7A                        DB            .byte	$DB
04546 0F7B                        FF            .byte	$FF
04547 0F7C                        C3            .byte	$C3
04548 0F7D                        E7            .byte	$E7
04549 0F7E                        FF            .byte	$FF
04550 0F7F                        7E            .byte	$7E
04551                                           ! 891  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04552 0F80                        6C            .byte	$6C
04553 0F81                        FE            .byte	$FE
04554 0F82                        FE            .byte	$FE
04555 0F83                        FE            .byte	$FE
04556 0F84                        7C            .byte	$7C
04557 0F85                        38            .byte	$38
04558 0F86                        10            .byte	$10
04559 0F87                        00            .byte	0
04560                                           ! 892  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04561 0F88                        10            .byte	$10
04562 0F89                        38            .byte	$38
04563 0F8A                        7C            .byte	$7C
04564 0F8B                        FE            .byte	$FE
04565 0F8C                        7C            .byte	$7C
04566 0F8D                        38            .byte	$38
04567 0F8E                        10            .byte	$10
04568 0F8F                        00            .byte	0
04569                                           ! 893  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04570 0F90                        38            .byte	$38
04571 0F91                        7C            .byte	$7C
04572 0F92                        38            .byte	$38
04573 0F93                        FE            .byte	$FE
04574 0F94                        FE            .byte	$FE
04575 0F95                        7C            .byte	$7C
04576 0F96                        38            .byte	$38
04577 0F97                        7C            .byte	$7C
04578                                           ! 894  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04579 0F98                        10            .byte	$10
04580 0F99                        10            .byte	$10
04581 0F9A                        38            .byte	$38
04582 0F9B                        7C            .byte	$7C
04583 0F9C                        FE            .byte	$FE
04584 0F9D                        7C            .byte	$7C
04585 0F9E                        38            .byte	$38
04586 0F9F                        7C            .byte	$7C
04587                                           ! 895  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04588 0FA0                        00            .byte	0
04589 0FA1                        00            .byte	0
04590 0FA2                        18            .byte	$18
04591 0FA3                        3C            .byte	$3C
04592 0FA4                        3C            .byte	$3C
04593 0FA5                        18            .byte	$18
04594 0FA6                        00            .byte	0
04595 0FA7                        00            .byte	0
04596                                           ! 896  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04597 0FA8                        FF            .byte	$FF
04598 0FA9                        FF            .byte	$FF
04599 0FAA                        E7            .byte	$E7
04600 0FAB                        C3            .byte	$C3
04601 0FAC                        C3            .byte	$C3
04602 0FAD                        E7            .byte	$E7
04603 0FAE                        FF            .byte	$FF
04604 0FAF                        FF            .byte	$FF
04605                                           ! 897  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04606 0FB0                        00            .byte	0
04607 0FB1                        3C            .byte	$3C
04608 0FB2                        66            .byte	$66
04609 0FB3                        42            .byte	$42
04610 0FB4                        42            .byte	$42
04611 0FB5                        66            .byte	$66
04612 0FB6                        3C            .byte	$3C
04613 0FB7                        00            .byte	0
04614                                           ! 898  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04615 0FB8                        FF            .byte	$FF
04616 0FB9                        C3            .byte	$C3
04617 0FBA                        99            .byte	$99
04618 0FBB                        BD            .byte	$BD
04619 0FBC                        BD            .byte	$BD
04620 0FBD                        99            .byte	$99
04621 0FBE                        C3            .byte	$C3
04622 0FBF                        FF            .byte	$FF
04623                                           ! 899  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04624 0FC0                        0F            .byte	$F
04625 0FC1                        07            .byte	7
04626 0FC2                        0F            .byte	$F
04627 0FC3                        7D            .byte	$7D
04628 0FC4                        CC            .byte	$CC
04629 0FC5                        CC            .byte	$CC
04630 0FC6                        CC            .byte	$CC
04631 0FC7                        78            .byte	$78
04632                                           ! 900  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04633 0FC8                        3C            .byte	$3C
04634 0FC9                        66            .byte	$66
04635 0FCA                        66            .byte	$66
04636 0FCB                        66            .byte	$66
04637 0FCC                        3C            .byte	$3C
04638 0FCD                        18            .byte	$18
04639 0FCE                        7E            .byte	$7E
04640 0FCF                        18            .byte	$18
04641                                           ! 901  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04642 0FD0                        3F            .byte	$3F
04643 0FD1                        33            .byte	$33
04644 0FD2                        3F            .byte	$3F
04645 0FD3                        30            .byte	$30
04646 0FD4                        30            .byte	$30
04647 0FD5                        70            .byte	$70
04648 0FD6                        F0            .byte	$F0
04649 0FD7                        E0            .byte	$E0
04650                                           ! 902  0
04651                                           ! 902 x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04652 0FD8                        7F            .byte	$7F
04653 0FD9                        63            .byte	$63
04654 0FDA                        7F            .byte	$7F
04655 0FDB                        63            .byte	$63
04656 0FDC                        63            .byte	$63
04657 0FDD                        67            .byte	$67
04658 0FDE                        E6            .byte	$E6
04659 0FDF                        C0            .byte	$C0
04660                                           ! 903  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04661 0FE0                        99            .byte	$99
04662 0FE1                        5A            .byte	$5A
04663 0FE2                        3C            .byte	$3C
04664 0FE3                        E7            .byte	$E7
04665 0FE4                        E7            .byte	$E7
04666 0FE5                        3C            .byte	$3C
04667 0FE6                        5A            .byte	$5A
04668 0FE7                        99            .byte	$99
04669                                           ! 904  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04670 0FE8                        80            .byte	$80
04671 0FE9                        E0            .byte	$E0
04672 0FEA                        F8            .byte	$F8
04673 0FEB                        FE            .byte	$FE
04674 0FEC                        F8            .byte	$F8
04675 0FED                        E0            .byte	$E0
04676 0FEE                        80            .byte	$80
04677 0FEF                        00            .byte	0
04678                                           ! 905  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04679 0FF0                        02            .byte	2
04680 0FF1                        0E            .byte	$E
04681 0FF2                        3E            .byte	$3E
04682 0FF3                        FE            .byte	$FE
04683 0FF4                        3E            .byte	$3E
04684 0FF5                        0E            .byte	$E
04685 0FF6                        02            .byte	2
04686 0FF7                        00            .byte	0
04687                                           ! 906  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04688 0FF8                        18            .byte	$18
04689 0FF9                        3C            .byte	$3C
04690 0FFA                        7E            .byte	$7E
04691 0FFB                        18            .byte	$18
04692 0FFC                        18            .byte	$18
04693 0FFD                        7E            .byte	$7E
04694 0FFE                        3C            .byte	$3C
04695 0FFF                        18            .byte	$18
04696                                           ! 907  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04697 1000                        66            .byte	$66
04698 1001                        66            .byte	$66
04699 1002                        66            .byte	$66
04700 1003                        66            .byte	$66
04701 1004                        66            .byte	$66
04702 1005                        00            .byte	0
04703 1006                        66            .byte	$66
04704 1007                        00            .byte	0
04705                                           ! 908  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04706 1008                        7F            .byte	$7F
04707 1009                        DB            .byte	$DB
04708 100A                        DB            .byte	$DB
04709 100B                        7B            .byte	$7B
04710 100C                        1B            .byte	$1B
04711 100D                        1B            .byte	$1B
04712 100E                        1B            .byte	$1B
04713 100F                        00            .byte	0
04714                                           ! 909  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04715 1010                        3E            .byte	$3E
04716 1011                        63            .byte	$63
04717 1012                        38            .byte	$38
04718 1013                        6C            .byte	$6C
04719 1014                        6C            .byte	$6C
04720 1015                        38            .byte	$38
04721 1016                        CC            .byte	$CC
04722 1017                        78            .byte	$78
04723                                           ! 910  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04724 1018                        00            .byte	0
04725 1019                        00            .byte	0
04726 101A                        00            .byte	0
04727 101B                        00            .byte	0
04728 101C                        7E            .byte	$7E
04729 101D                        7E            .byte	$7E
04730 101E                        7E            .byte	$7E
04731 101F                        00            .byte	0
04732                                           ! 911  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04733 1020                        18            .byte	$18
04734 1021                        3C            .byte	$3C
04735 1022                        7E            .byte	$7E
04736 1023                        18            .byte	$18
04737 1024                        7E            .byte	$7E
04738 1025                        3C            .byte	$3C
04739 1026                        18            .byte	$18
04740 1027                        FF            .byte	$FF
04741                                           ! 912  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04742 1028                        18            .byte	$18
04743 1029                        3C            .byte	$3C
04744 102A                        7E            .byte	$7E
04745 102B                        18            .byte	$18
04746 102C                        18            .byte	$18
04747 102D                        18            .byte	$18
04748 102E                        18            .byte	$18
04749 102F                        00            .byte	0
04750                                           ! 913  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04751 1030                        18            .byte	$18
04752 1031                        18            .byte	$18
04753 1032                        18            .byte	$18
04754 1033                        18            .byte	$18
04755 1034                        7E            .byte	$7E
04756 1035                        3C            .byte	$3C
04757 1036                        18            .byte	$18
04758 1037                        00            .byte	0
04759                                           ! 914  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04760 1038                        00            .byte	0
04761 1039                        18            .byte	$18
04762 103A                        0C            .byte	$C
04763 103B                        FE            .byte	$FE
04764 103C                        0C            .byte	$C
04765 103D                        18            .byte	$18
04766 103E                        00            .byte	0
04767 103F                        00            .byte	0
04768                                           ! 915  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04769 1040                        00            .byte	0
04770 1041                        30            .byte	$30
04771 1042                        60            .byte	$60
04772 1043                        FE            .byte	$FE
04773 1044                        60            .byte	$60
04774 1045                        30            .byte	$30
04775 1046                        00            .byte	0
04776 1047                        00            .byte	0
04777                                           ! 916  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04778 1048                        00            .byte	0
04779 1049                        00            .byte	0
04780 104A                        C0            .byte	$C0
04781 104B                        C0            .byte	$C0
04782 104C                        C0            .byte	$C0
04783 104D                        FE            .byte	$FE
04784 104E                        00            .byte	0
04785 104F                        00            .byte	0
04786                                           ! 917  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04787 1050                        00            .byte	0
04788 1051                        24            .byte	$24
04789 1052                        66            .byte	$66
04790 1053                        FF            .byte	$FF
04791 1054                        66            .byte	$66
04792 1055                        24            .byte	$24
04793 1056                        00            .byte	0
04794 1057                        00            .byte	0
04795                                           ! 918  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04796 1058                        00            .byte	0
04797 1059                        18            .byte	$18
04798 105A                        3C            .byte	$3C
04799 105B                        7E            .byte	$7E
04800 105C                        FF            .byte	$FF
04801 105D                        FF            .byte	$FF
04802 105E                        00            .byte	0
04803 105F                        00            .byte	0
04804                                           ! 919  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04805 1060                        00            .byte	0
04806 1061                        FF            .byte	$FF
04807 1062                        FF            .byte	$FF
04808 1063                        7E            .byte	$7E
04809 1064                        3C            .byte	$3C
04810 1065                        18            .byte	$18
04811 1066                        00            .byte	0
04812 1067                        00            .byte	0
04813                                           ! 920  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04814 1068                        00            .byte	0
04815 1069                        00            .byte	0
04816 106A                        00            .byte	0
04817 106B                        00            .byte	0
04818 106C                        00            .byte	0
04819 106D                        00            .byte	0
04820 106E                        00            .byte	0
04821 106F                        00            .byte	0
04822                                           ! 921  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04823 1070                        30            .byte	$30
04824 1071                        78            .byte	$78
04825 1072                        78            .byte	$78
04826 1073                        30            .byte	$30
04827 1074                        30            .byte	$30
04828 1075                        00            .byte	0
04829 1076                        30            .byte	$30
04830 1077                        00            .byte	0
04831                                           ! 922  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04832 1078                        6C            .byte	$6C
04833 1079                        6C            .byte	$6C
04834 107A                        6C            .byte	$6C
04835 107B                        00            .byte	0
04836 107C                        00            .byte	0
04837 107D                        00            .byte	0
04838 107E                        00            .byte	0
04839 107F                        00            .byte	0
04840                                           ! 923  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04841 1080                        6C            .byte	$6C
04842 1081                        6C            .byte	$6C
04843 1082                        FE            .byte	$FE
04844 1083                        6C            .byte	$6C
04845 1084                        FE            .byte	$FE
04846 1085                        6C            .byte	$6C
04847 1086                        6C            .byte	$6C
04848 1087                        00            .byte	0
04849                                           ! 924  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04850 1088                        30            .byte	$30
04851 1089                        7C            .byte	$7C
04852 108A                        C0            .byte	$C0
04853 108B                        78            .byte	$78
04854 108C                        0C            .byte	$C
04855 108D                        F8            .byte	$F8
04856 108E                        30            .byte	$30
04857 108F                        00            .byte	0
04858                                           ! 925  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04859 1090                        00            .byte	0
04860 1091                        C6            .byte	$C6
04861 1092                        CC            .byte	$CC
04862 1093                        18            .byte	$18
04863 1094                        30            .byte	$30
04864 1095                        66            .byte	$66
04865 1096                        C6            .byte	$C6
04866 1097                        00            .byte	0
04867                                           ! 926  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04868 1098                        38            .byte	$38
04869 1099                        6C            .byte	$6C
04870 109A                        38            .byte	$38
04871 109B                        76            .byte	$76
04872 109C                        DC            .byte	$DC
04873 109D                        CC            .byte	$CC
04874 109E                        76            .byte	$76
04875 109F                        00            .byte	0
04876                                           ! 927  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04877 10A0                        60            .byte	$60
04878 10A1                        60            .byte	$60
04879 10A2                        C0            .byte	$C0
04880 10A3                        00            .byte	0
04881 10A4                        00            .byte	0
04882 10A5                        00            .byte	0
04883 10A6                        00            .byte	0
04884 10A7                        00            .byte	0
04885                                           ! 928  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04886 10A8                        18            .byte	$18
04887 10A9                        30            .byte	$30
04888 10AA                        60            .byte	$60
04889 10AB                        60            .byte	$60
04890 10AC                        60            .byte	$60
04891 10AD                        30            .byte	$30
04892 10AE                        18            .byte	$18
04893 10AF                        00            .byte	0
04894                                           ! 929  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04895 10B0                        60            .byte	$60
04896 10B1                        30            .byte	$30
04897 10B2                        18            .byte	$18
04898 10B3                        18            .byte	$18
04899 10B4                        18            .byte	$18
04900 10B5                        30            .byte	$30
04901 10B6                        60            .byte	$60
04902 10B7                        00            .byte	0
04903                                           ! 930  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04904 10B8                        00            .byte	0
04905 10B9                        66            .byte	$66
04906 10BA                        3C            .byte	$3C
04907 10BB                        FF            .byte	$FF
04908 10BC                        3C            .byte	$3C
04909 10BD                        66            .byte	$66
04910 10BE                        00            .byte	0
04911 10BF                        00            .byte	0
04912                                           ! 931  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04913 10C0                        00            .byte	0
04914 10C1                        30            .byte	$30
04915 10C2                        30            .byte	$30
04916 10C3                        FC            .byte	$FC
04917 10C4                        30            .byte	$30
04918 10C5                        30            .byte	$30
04919 10C6                        00            .byte	0
04920 10C7                        00            .byte	0
04921                                           ! 932  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04922 10C8                        00            .byte	0
04923 10C9                        00            .byte	0
04924 10CA                        00            .byte	0
04925 10CB                        00            .byte	0
04926 10CC                        00            .byte	0
04927 10CD                        30            .byte	$30
04928 10CE                        30            .byte	$30
04929 10CF                        60            .byte	$60
04930                                           ! 933  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04931 10D0                        00            .byte	0
04932 10D1                        00            .byte	0
04933 10D2                        00            .byte	0
04934 10D3                        FC            .byte	$FC
04935 10D4                        00            .byte	0
04936 10D5                        00            .byte	0
04937 10D6                        00            .byte	0
04938 10D7                        00            .byte	0
04939                                           ! 934  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04940 10D8                        00            .byte	0
04941 10D9                        00            .byte	0
04942 10DA                        00            .byte	0
04943 10DB                        00            .byte	0
04944 10DC                        00            .byte	0
04945 10DD                        30            .byte	$30
04946 10DE                        30            .byte	$30
04947 10DF                        00            .byte	0
04948                                           ! 935  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04949 10E0                        06            .byte	6
04950 10E1                        0C            .byte	$C
04951 10E2                        18            .byte	$18
04952 10E3                        30            .byte	$30
04953 10E4                        60            .byte	$60
04954 10E5                        C0            .byte	$C0
04955 10E6                        80            .byte	$80
04956 10E7                        00            .byte	0
04957                                           ! 936  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04958 10E8                        7C            .byte	$7C
04959 10E9                        C6            .byte	$C6
04960 10EA                        CE            .byte	$CE
04961 10EB                        DE            .byte	$DE
04962 10EC                        F6            .byte	$F6
04963 10ED                        E6            .byte	$E6
04964 10EE                        7C            .byte	$7C
04965 10EF                        00            .byte	0
04966                                           ! 937  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04967 10F0                        30            .byte	$30
04968 10F1                        70            .byte	$70
04969 10F2                        30            .byte	$30
04970 10F3                        30            .byte	$30
04971 10F4                        30            .byte	$30
04972 10F5                        30            .byte	$30
04973 10F6                        FC            .byte	$FC
04974 10F7                        00            .byte	0
04975                                           ! 938  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04976 10F8                        78            .byte	$78
04977 10F9                        CC            .byte	$CC
04978 10FA                        0C            .byte	$C
04979 10FB                        38            .byte	$38
04980 10FC                        60            .byte	$60
04981 10FD                        CC            .byte	$CC
04982 10FE                        FC            .byte	$FC
04983 10FF                        00            .byte	0
04984                                           ! 939  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04985 1100                        78            .byte	$78
04986 1101                        CC            .byte	$CC
04987 1102                        0C            .byte	$C
04988 1103                        38            .byte	$38
04989 1104                        0C            .byte	$C
04990 1105                        CC            .byte	$CC
04991 1106                        78            .byte	$78
04992 1107                        00            .byte	0
04993                                           ! 940  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04994 1108                        1C            .byte	$1C
04995 1109                        3C            .byte	$3C
04996 110A                        6C            .byte	$6C
04997 110B                        CC            .byte	$CC
04998 110C                        FE            .byte	$FE
04999 110D                        0C            .byte	$C
05000 110E                        1E            .byte	$1E
05001 110F                        00            .byte	0
05002                                           ! 941  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
05003 1110                        FC            .byte	$FC
05004 1111                        C0            .byte	$C0
05005 1112                        F8            .byte	$F8
05006 1113                        0C            .byte	$C
05007 1114                        0C            .byte	$C
05008 1115                        CC            .byte	$CC
05009 1116                        78            .byte	$78
05010 1117                        00            .byte	0
05011                                           ! 942  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
05012 1118                        38            .byte	$38
05013 1119                        60            .byte	$60
05014 111A                        C0            .byte	$C0
05015 111B                        F8            .byte	$F8
05016 111C                        CC            .byte	$CC
05017 111D                        CC            .byte	$CC
05018 111E                        78            .byte	$78
05019 111F                        00            .byte	0
05020                                           ! 943  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30
05021 1120                        FC            .byte	$FC
05022 1121                        CC            .byte	$CC
05023 1122                        0C            .byte	$C
05024 1123                        18            .byte	$18
05025 1124                        30            .byte	$30
05026 1125                        30            .byte	$30
05027                                           ! 943 , 0x00,
05028 1126                        30            .byte	$30
05029 1127                        00            .byte	0
05030                                           ! 944  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05031 1128                        78            .byte	$78
05032 1129                        CC            .byte	$CC
05033 112A                        CC            .byte	$CC
05034 112B                        78            .byte	$78
05035 112C                        CC            .byte	$CC
05036 112D                        CC            .byte	$CC
05037 112E                        78            .byte	$78
05038 112F                        00            .byte	0
05039                                           ! 945  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
05040 1130                        78            .byte	$78
05041 1131                        CC            .byte	$CC
05042 1132                        CC            .byte	$CC
05043 1133                        7C            .byte	$7C
05044 1134                        0C            .byte	$C
05045 1135                        18            .byte	$18
05046 1136                        70            .byte	$70
05047 1137                        00            .byte	0
05048                                           ! 946  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05049 1138                        00            .byte	0
05050 1139                        30            .byte	$30
05051 113A                        30            .byte	$30
05052 113B                        00            .byte	0
05053 113C                        00            .byte	0
05054 113D                        30            .byte	$30
05055 113E                        30            .byte	$30
05056 113F                        00            .byte	0
05057                                           ! 947  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05058 1140                        00            .byte	0
05059 1141                        30            .byte	$30
05060 1142                        30            .byte	$30
05061 1143                        00            .byte	0
05062 1144                        00            .byte	0
05063 1145                        30            .byte	$30
05064 1146                        30            .byte	$30
05065 1147                        60            .byte	$60
05066                                           ! 948  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05067 1148                        18            .byte	$18
05068 1149                        30            .byte	$30
05069 114A                        60            .byte	$60
05070 114B                        C0            .byte	$C0
05071 114C                        60            .byte	$60
05072 114D                        30            .byte	$30
05073 114E                        18            .byte	$18
05074 114F                        00            .byte	0
05075                                           ! 949  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05076 1150                        00            .byte	0
05077 1151                        00            .byte	0
05078 1152                        FC            .byte	$FC
05079 1153                        00            .byte	0
05080 1154                        00            .byte	0
05081 1155                        FC            .byte	$FC
05082 1156                        00            .byte	0
05083 1157                        00            .byte	0
05084                                           ! 950  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05085 1158                        60            .byte	$60
05086 1159                        30            .byte	$30
05087 115A                        18            .byte	$18
05088 115B                        0C            .byte	$C
05089 115C                        18            .byte	$18
05090 115D                        30            .byte	$30
05091 115E                        60            .byte	$60
05092 115F                        00            .byte	0
05093                                           ! 951  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05094 1160                        78            .byte	$78
05095 1161                        CC            .byte	$CC
05096 1162                        0C            .byte	$C
05097 1163                        18            .byte	$18
05098 1164                        30            .byte	$30
05099 1165                        00            .byte	0
05100 1166                        30            .byte	$30
05101 1167                        00            .byte	0
05102                                           ! 952  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05103 1168                        7C            .byte	$7C
05104 1169                        C6            .byte	$C6
05105 116A                        DE            .byte	$DE
05106 116B                        DE            .byte	$DE
05107 116C                        DE            .byte	$DE
05108 116D                        C0            .byte	$C0
05109 116E                        78            .byte	$78
05110 116F                        00            .byte	0
05111                                           ! 953  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05112 1170                        30            .byte	$30
05113 1171                        78            .byte	$78
05114 1172                        CC            .byte	$CC
05115 1173                        CC            .byte	$CC
05116 1174                        FC            .byte	$FC
05117 1175                        CC            .byte	$CC
05118 1176                        CC            .byte	$CC
05119 1177                        00            .byte	0
05120                                           ! 954  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05121 1178                        FC            .byte	$FC
05122 1179                        66            .byte	$66
05123 117A                        66            .byte	$66
05124 117B                        7C            .byte	$7C
05125 117C                        66            .byte	$66
05126 117D                        66            .byte	$66
05127 117E                        FC            .byte	$FC
05128 117F                        00            .byte	0
05129                                           ! 955  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05130 1180                        3C            .byte	$3C
05131 1181                        66            .byte	$66
05132 1182                        C0            .byte	$C0
05133 1183                        C0            .byte	$C0
05134 1184                        C0            .byte	$C0
05135 1185                        66            .byte	$66
05136 1186                        3C            .byte	$3C
05137 1187                        00            .byte	0
05138                                           ! 956  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05139 1188                        F8            .byte	$F8
05140 1189                        6C            .byte	$6C
05141 118A                        66            .byte	$66
05142 118B                        66            .byte	$66
05143 118C                        66            .byte	$66
05144 118D                        6C            .byte	$6C
05145 118E                        F8            .byte	$F8
05146 118F                        00            .byte	0
05147                                           ! 957  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05148 1190                        FE            .byte	$FE
05149 1191                        62            .byte	$62
05150 1192                        68            .byte	$68
05151 1193                        78            .byte	$78
05152 1194                        68            .byte	$68
05153 1195                        62            .byte	$62
05154 1196                        FE            .byte	$FE
05155 1197                        00            .byte	0
05156                                           ! 958  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05157 1198                        FE            .byte	$FE
05158 1199                        62            .byte	$62
05159 119A                        68            .byte	$68
05160 119B                        78            .byte	$78
05161 119C                        68            .byte	$68
05162 119D                        60            .byte	$60
05163 119E                        F0            .byte	$F0
05164 119F                        00            .byte	0
05165                                           ! 959  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05166 11A0                        3C            .byte	$3C
05167 11A1                        66            .byte	$66
05168 11A2                        C0            .byte	$C0
05169 11A3                        C0            .byte	$C0
05170 11A4                        CE            .byte	$CE
05171 11A5                        66            .byte	$66
05172 11A6                        3E            .byte	$3E
05173 11A7                        00            .byte	0
05174                                           ! 960  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05175 11A8                        CC            .byte	$CC
05176 11A9                        CC            .byte	$CC
05177 11AA                        CC            .byte	$CC
05178 11AB                        FC            .byte	$FC
05179 11AC                        CC            .byte	$CC
05180 11AD                        CC            .byte	$CC
05181 11AE                        CC            .byte	$CC
05182 11AF                        00            .byte	0
05183                                           ! 961  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05184 11B0                        78            .byte	$78
05185 11B1                        30            .byte	$30
05186 11B2                        30            .byte	$30
05187 11B3                        30            .byte	$30
05188 11B4                        30            .byte	$30
05189 11B5                        30            .byte	$30
05190 11B6                        78            .byte	$78
05191 11B7                        00            .byte	0
05192                                           ! 962  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05193 11B8                        1E            .byte	$1E
05194 11B9                        0C            .byte	$C
05195 11BA                        0C            .byte	$C
05196 11BB                        0C            .byte	$C
05197 11BC                        CC            .byte	$CC
05198 11BD                        CC            .byte	$CC
05199 11BE                        78            .byte	$78
05200 11BF                        00            .byte	0
05201                                           ! 963  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05202 11C0                        E6            .byte	$E6
05203 11C1                        66            .byte	$66
05204 11C2                        6C            .byte	$6C
05205 11C3                        78            .byte	$78
05206 11C4                        6C            .byte	$6C
05207 11C5                        66            .byte	$66
05208 11C6                        E6            .byte	$E6
05209 11C7                        00            .byte	0
05210                                           ! 964  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05211 11C8                        F0            .byte	$F0
05212 11C9                        60            .byte	$60
05213 11CA                        60            .byte	$60
05214 11CB                        60            .byte	$60
05215 11CC                        62            .byte	$62
05216 11CD                        66            .byte	$66
05217 11CE                        FE            .byte	$FE
05218 11CF                        00            .byte	0
05219                                           ! 965  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05220 11D0                        C6            .byte	$C6
05221 11D1                        EE            .byte	$EE
05222 11D2                        FE            .byte	$FE
05223 11D3                        FE            .byte	$FE
05224 11D4                        D6            .byte	$D6
05225 11D5                        C6            .byte	$C6
05226 11D6                        C6            .byte	$C6
05227 11D7                        00            .byte	0
05228                                           ! 966  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05229 11D8                        C6            .byte	$C6
05230 11D9                        E6            .byte	$E6
05231 11DA                        F6            .byte	$F6
05232 11DB                        DE            .byte	$DE
05233 11DC                        CE            .byte	$CE
05234 11DD                        C6            .byte	$C6
05235 11DE                        C6            .byte	$C6
05236 11DF                        00            .byte	0
05237                                           ! 967  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05238 11E0                        38            .byte	$38
05239 11E1                        6C            .byte	$6C
05240 11E2                        C6            .byte	$C6
05241 11E3                        C6            .byte	$C6
05242 11E4                        C6            .byte	$C6
05243 11E5                        6C            .byte	$6C
05244 11E6                        38            .byte	$38
05245 11E7                        00            .byte	0
05246                                           ! 968  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05247 11E8                        FC            .byte	$FC
05248 11E9                        66            .byte	$66
05249 11EA                        66            .byte	$66
05250 11EB                        7C            .byte	$7C
05251 11EC                        60            .byte	$60
05252 11ED                        60            .byte	$60
05253 11EE                        F0            .byte	$F0
05254 11EF                        00            .byte	0
05255                                           ! 969  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05256 11F0                        78            .byte	$78
05257 11F1                        CC            .byte	$CC
05258 11F2                        CC            .byte	$CC
05259 11F3                        CC            .byte	$CC
05260 11F4                        DC            .byte	$DC
05261 11F5                        78            .byte	$78
05262 11F6                        1C            .byte	$1C
05263 11F7                        00            .byte	0
05264                                           ! 970  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05265 11F8                        FC            .byte	$FC
05266 11F9                        66            .byte	$66
05267 11FA                        66            .byte	$66
05268 11FB                        7C            .byte	$7C
05269 11FC                        6C            .byte	$6C
05270 11FD                        66            .byte	$66
05271 11FE                        E6            .byte	$E6
05272 11FF                        00            .byte	0
05273                                           ! 971  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05274 1200                        78            .byte	$78
05275 1201                        CC            .byte	$CC
05276 1202                        E0            .byte	$E0
05277 1203                        70            .byte	$70
05278 1204                        1C            .byte	$1C
05279 1205                        CC            .byte	$CC
05280 1206                        78            .byte	$78
05281 1207                        00            .byte	0
05282                                           ! 972  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05283 1208                        FC            .byte	$FC
05284 1209                        B4            .byte	$B4
05285 120A                        30            .byte	$30
05286 120B                        30            .byte	$30
05287 120C                        30            .byte	$30
05288 120D                        30            .byte	$30
05289 120E                        78            .byte	$78
05290 120F                        00            .byte	0
05291                                           ! 973  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05292 1210                        CC            .byte	$CC
05293 1211                        CC            .byte	$CC
05294 1212                        CC            .byte	$CC
05295 1213                        CC            .byte	$CC
05296 1214                        CC            .byte	$CC
05297 1215                        CC            .byte	$CC
05298 1216                        FC            .byte	$FC
05299 1217                        00            .byte	0
05300                                           ! 974  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05301 1218                        CC            .byte	$CC
05302 1219                        CC            .byte	$CC
05303 121A                        CC            .byte	$CC
05304 121B                        CC            .byte	$CC
05305 121C                        CC            .byte	$CC
05306 121D                        78            .byte	$78
05307 121E                        30            .byte	$30
05308 121F                        00            .byte	0
05309                                           ! 975  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05310 1220                        C6            .byte	$C6
05311 1221                        C6            .byte	$C6
05312 1222                        C6            .byte	$C6
05313 1223                        D6            .byte	$D6
05314 1224                        FE            .byte	$FE
05315 1225                        EE            .byte	$EE
05316 1226                        C6            .byte	$C6
05317 1227                        00            .byte	0
05318                                           ! 976  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05319 1228                        C6            .byte	$C6
05320 1229                        C6            .byte	$C6
05321 122A                        6C            .byte	$6C
05322 122B                        38            .byte	$38
05323 122C                        38            .byte	$38
05324 122D                        6C            .byte	$6C
05325 122E                        C6            .byte	$C6
05326 122F                        00            .byte	0
05327                                           ! 977  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05328 1230                        CC            .byte	$CC
05329 1231                        CC            .byte	$CC
05330 1232                        CC            .byte	$CC
05331 1233                        78            .byte	$78
05332 1234                        30            .byte	$30
05333 1235                        30            .byte	$30
05334 1236                        78            .byte	$78
05335 1237                        00            .byte	0
05336                                           ! 978  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05337 1238                        FE            .byte	$FE
05338 1239                        C6            .byte	$C6
05339 123A                        8C            .byte	$8C
05340 123B                        18            .byte	$18
05341 123C                        32            .byte	$32
05342 123D                        66            .byte	$66
05343 123E                        FE            .byte	$FE
05344 123F                        00            .byte	0
05345                                           ! 979  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05346 1240                        78            .byte	$78
05347 1241                        60            .byte	$60
05348 1242                        60            .byte	$60
05349 1243                        60            .byte	$60
05350 1244                        60            .byte	$60
05351 1245                        60            .byte	$60
05352 1246                        78            .byte	$78
05353 1247                        00            .byte	0
05354                                           ! 980  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05355 1248                        C0            .byte	$C0
05356 1249                        60            .byte	$60
05357 124A                        30            .byte	$30
05358 124B                        18            .byte	$18
05359 124C                        0C            .byte	$C
05360 124D                        06            .byte	6
05361 124E                        02            .byte	2
05362 124F                        00            .byte	0
05363                                           ! 981  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05364 1250                        78            .byte	$78
05365 1251                        18            .byte	$18
05366 1252                        18            .byte	$18
05367 1253                        18            .byte	$18
05368 1254                        18            .byte	$18
05369 1255                        18            .byte	$18
05370 1256                        78            .byte	$78
05371 1257                        00            .byte	0
05372                                           ! 982  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05373 1258                        10            .byte	$10
05374 1259                        38            .byte	$38
05375 125A                        6C            .byte	$6C
05376 125B                        C6            .byte	$C6
05377 125C                        00            .byte	0
05378 125D                        00            .byte	0
05379 125E                        00            .byte	0
05380 125F                        00            .byte	0
05381                                           ! 983  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05382 1260                        00            .byte	0
05383 1261                        00            .byte	0
05384 1262                        00            .byte	0
05385 1263                        00            .byte	0
05386 1264                        00            .byte	0
05387 1265                        00            .byte	0
05388 1266                        00            .byte	0
05389 1267                        FF            .byte	$FF
05390                                           ! 984  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05391 1268                        30            .byte	$30
05392 1269                        30            .byte	$30
05393 126A                        18            .byte	$18
05394 126B                        00            .byte	0
05395 126C                        00            .byte	0
05396 126D                        00            .byte	0
05397 126E                        00            .byte	0
05398 126F                        00            .byte	0
05399                                           ! 985  0x00, 0x00, 0x78, 0x0c, 0x7c, 
05400 1270                        00            .byte	0
05401 1271                        00            .byte	0
05402 1272                        78            .byte	$78
05403 1273                        0C            .byte	$C
05404 1274                        7C            .byte	$7C
05405                                           ! 985 0xcc, 0x76, 0x00,
05406 1275                        CC            .byte	$CC
05407 1276                        76            .byte	$76
05408 1277                        00            .byte	0
05409                                           ! 986  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05410 1278                        E0            .byte	$E0
05411 1279                        60            .byte	$60
05412 127A                        60            .byte	$60
05413 127B                        7C            .byte	$7C
05414 127C                        66            .byte	$66
05415 127D                        66            .byte	$66
05416 127E                        DC            .byte	$DC
05417 127F                        00            .byte	0
05418                                           ! 987  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05419 1280                        00            .byte	0
05420 1281                        00            .byte	0
05421 1282                        78            .byte	$78
05422 1283                        CC            .byte	$CC
05423 1284                        C0            .byte	$C0
05424 1285                        CC            .byte	$CC
05425 1286                        78            .byte	$78
05426 1287                        00            .byte	0
05427                                           ! 988  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05428 1288                        1C            .byte	$1C
05429 1289                        0C            .byte	$C
05430 128A                        0C            .byte	$C
05431 128B                        7C            .byte	$7C
05432 128C                        CC            .byte	$CC
05433 128D                        CC            .byte	$CC
05434 128E                        76            .byte	$76
05435 128F                        00            .byte	0
05436                                           ! 989  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05437 1290                        00            .byte	0
05438 1291                        00            .byte	0
05439 1292                        78            .byte	$78
05440 1293                        CC            .byte	$CC
05441 1294                        FC            .byte	$FC
05442 1295                        C0            .byte	$C0
05443 1296                        78            .byte	$78
05444 1297                        00            .byte	0
05445                                           ! 990  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05446 1298                        38            .byte	$38
05447 1299                        6C            .byte	$6C
05448 129A                        60            .byte	$60
05449 129B                        F0            .byte	$F0
05450 129C                        60            .byte	$60
05451 129D                        60            .byte	$60
05452 129E                        F0            .byte	$F0
05453 129F                        00            .byte	0
05454                                           ! 991  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05455 12A0                        00            .byte	0
05456 12A1                        00            .byte	0
05457 12A2                        76            .byte	$76
05458 12A3                        CC            .byte	$CC
05459 12A4                        CC            .byte	$CC
05460 12A5                        7C            .byte	$7C
05461 12A6                        0C            .byte	$C
05462 12A7                        F8            .byte	$F8
05463                                           ! 992  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05464 12A8                        E0            .byte	$E0
05465 12A9                        60            .byte	$60
05466 12AA                        6C            .byte	$6C
05467 12AB                        76            .byte	$76
05468 12AC                        66            .byte	$66
05469 12AD                        66            .byte	$66
05470 12AE                        E6            .byte	$E6
05471 12AF                        00            .byte	0
05472                                           ! 993  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05473 12B0                        30            .byte	$30
05474 12B1                        00            .byte	0
05475 12B2                        70            .byte	$70
05476 12B3                        30            .byte	$30
05477 12B4                        30            .byte	$30
05478 12B5                        30            .byte	$30
05479 12B6                        78            .byte	$78
05480 12B7                        00            .byte	0
05481                                           ! 994  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05482 12B8                        0C            .byte	$C
05483 12B9                        00            .byte	0
05484 12BA                        0C            .byte	$C
05485 12BB                        0C            .byte	$C
05486 12BC                        0C            .byte	$C
05487 12BD                        CC            .byte	$CC
05488 12BE                        CC            .byte	$CC
05489 12BF                        78            .byte	$78
05490                                           ! 995  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05491 12C0                        E0            .byte	$E0
05492 12C1                        60            .byte	$60
05493 12C2                        66            .byte	$66
05494 12C3                        6C            .byte	$6C
05495 12C4                        78            .byte	$78
05496 12C5                        6C            .byte	$6C
05497 12C6                        E6            .byte	$E6
05498 12C7                        00            .byte	0
05499                                           ! 996  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05500 12C8                        70            .byte	$70
05501 12C9                        30            .byte	$30
05502 12CA                        30            .byte	$30
05503 12CB                        30            .byte	$30
05504 12CC                        30            .byte	$30
05505 12CD                        30            .byte	$30
05506 12CE                        78            .byte	$78
05507 12CF                        00            .byte	0
05508                                           ! 997  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05509 12D0                        00            .byte	0
05510 12D1                        00            .byte	0
05511 12D2                        CC            .byte	$CC
05512 12D3                        FE            .byte	$FE
05513 12D4                        FE            .byte	$FE
05514 12D5                        D6            .byte	$D6
05515 12D6                        C6            .byte	$C6
05516 12D7                        00            .byte	0
05517                                           ! 998  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05518 12D8                        00            .byte	0
05519 12D9                        00            .byte	0
05520 12DA                        F8            .byte	$F8
05521 12DB                        CC            .byte	$CC
05522 12DC                        CC            .byte	$CC
05523 12DD                        CC            .byte	$CC
05524 12DE                        CC            .byte	$CC
05525 12DF                        00            .byte	0
05526                                           ! 999  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05527 12E0                        00            .byte	0
05528 12E1                        00            .byte	0
05529 12E2                        78            .byte	$78
05530 12E3                        CC            .byte	$CC
05531 12E4                        CC            .byte	$CC
05532 12E5                        CC            .byte	$CC
05533 12E6                        78            .byte	$78
05534 12E7                        00            .byte	0
05535                                           ! 1000  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05536 12E8                        00            .byte	0
05537 12E9                        00            .byte	0
05538 12EA                        DC            .byte	$DC
05539 12EB                        66            .byte	$66
05540 12EC                        66            .byte	$66
05541 12ED                        7C            .byte	$7C
05542 12EE                        60            .byte	$60
05543 12EF                        F0            .byte	$F0
05544                                           ! 1001  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05545 12F0                        00            .byte	0
05546 12F1                        00            .byte	0
05547 12F2                        76            .byte	$76
05548 12F3                        CC            .byte	$CC
05549 12F4                        CC            .byte	$CC
05550 12F5                        7C            .byte	$7C
05551 12F6                        0C            .byte	$C
05552 12F7                        1E            .byte	$1E
05553                                           ! 1002  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05554 12F8                        00            .byte	0
05555 12F9                        00            .byte	0
05556 12FA                        DC            .byte	$DC
05557 12FB                        76            .byte	$76
05558 12FC                        66            .byte	$66
05559 12FD                        60            .byte	$60
05560 12FE                        F0            .byte	$F0
05561 12FF                        00            .byte	0
05562                                           ! 1003  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05563 1300                        00            .byte	0
05564 1301                        00            .byte	0
05565 1302                        7C            .byte	$7C
05566 1303                        C0            .byte	$C0
05567 1304                        78            .byte	$78
05568 1305                        0C            .byte	$C
05569 1306                        F8            .byte	$F8
05570 1307                        00            .byte	0
05571                                           ! 1004  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05572 1308                        10            .byte	$10
05573 1309                        30            .byte	$30
05574 130A                        7C            .byte	$7C
05575 130B                        30            .byte	$30
05576 130C                        30            .byte	$30
05577 130D                        34            .byte	$34
05578 130E                        18            .byte	$18
05579 130F                        00            .byte	0
05580                                           ! 1005  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05581 1310                        00            .byte	0
05582 1311                        00            .byte	0
05583 1312                        CC            .byte	$CC
05584 1313                        CC            .byte	$CC
05585 1314                        CC            .byte	$CC
05586 1315                        CC            .byte	$CC
05587 1316                        76            .byte	$76
05588 1317                        00            .byte	0
05589                                           ! 1006  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05590 1318                        00            .byte	0
05591 1319                        00            .byte	0
05592 131A                        CC            .byte	$CC
05593 131B                        CC            .byte	$CC
05594 131C                        CC            .byte	$CC
05595 131D                        78            .byte	$78
05596 131E                        30            .byte	$30
05597 131F                        00            .byte	0
05598                                           ! 1007  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05599 1320                        00            .byte	0
05600 1321                        00            .byte	0
05601 1322                        C6            .byte	$C6
05602 1323                        D6            .byte	$D6
05603 1324                        FE            .byte	$FE
05604 1325                        FE            .byte	$FE
05605 1326                        6C            .byte	$6C
05606 1327                        00            .byte	0
05607                                           ! 1008  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05608 1328                        00            .byte	0
05609 1329                        00            .byte	0
05610 132A                        C6            .byte	$C6
05611 132B                        6C            .byte	$6C
05612 132C                        38            .byte	$38
05613 132D                        6C            .byte	$6C
05614 132E                        C6            .byte	$C6
05615 132F                        00            .byte	0
05616                                           ! 1009  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05617 1330                        00            .byte	0
05618 1331                        00            .byte	0
05619 1332                        CC            .byte	$CC
05620 1333                        CC            .byte	$CC
05621 1334                        CC            .byte	$CC
05622 1335                        7C            .byte	$7C
05623 1336                        0C            .byte	$C
05624 1337                        F8            .byte	$F8
05625                                           ! 1010  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05626 1338                        00            .byte	0
05627 1339                        00            .byte	0
05628 133A                        FC            .byte	$FC
05629 133B                        98            .byte	$98
05630 133C                        30            .byte	$30
05631 133D                        64            .byte	$64
05632 133E                        FC            .byte	$FC
05633 133F                        00            .byte	0
05634                                           ! 1011  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05635 1340                        1C            .byte	$1C
05636 1341                        30            .byte	$30
05637 1342                        30            .byte	$30
05638 1343                        E0            .byte	$E0
05639 1344                        30            .byte	$30
05640 1345                        30            .byte	$30
05641 1346                        1C            .byte	$1C
05642 1347                        00            .byte	0
05643                                           ! 1012  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05644 1348                        18            .byte	$18
05645 1349                        18            .byte	$18
05646 134A                        18            .byte	$18
05647 134B                        00            .byte	0
05648 134C                        18            .byte	$18
05649 134D                        18            .byte	$18
05650 134E                        18            .byte	$18
05651 134F                        00            .byte	0
05652                                           ! 1013  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05653 1350                        E0            .byte	$E0
05654 1351                        30            .byte	$30
05655 1352                        30            .byte	$30
05656 1353                        1C            .byte	$1C
05657 1354                        30            .byte	$30
05658 1355                        30            .byte	$30
05659 1356                        E0            .byte	$E0
05660 1357                        00            .byte	0
05661                                           ! 1014  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05662 1358                        76            .byte	$76
05663 1359                        DC            .byte	$DC
05664 135A                        00            .byte	0
05665 135B                        00            .byte	0
05666 135C                        00            .byte	0
05667 135D                        00            .byte	0
05668 135E                        00            .byte	0
05669 135F                        00            .byte	0
05670                                           ! 1015  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05671 1360                        00            .byte	0
05672 1361                        10            .byte	$10
05673 1362                        38            .byte	$38
05674 1363                        6C            .byte	$6C
05675 1364                        C6            .byte	$C6
05676 1365                        C6            .byte	$C6
05677 1366                        FE            .byte	$FE
05678 1367                        00            .byte	0
05679                                           ! 1016  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05680 1368                        78            .byte	$78
05681 1369                        CC            .byte	$CC
05682 136A                        C0            .byte	$C0
05683 136B                        CC            .byte	$CC
05684 136C                        78            .byte	$78
05685 136D                        18            .byte	$18
05686 136E                        0C            .byte	$C
05687 136F                        78            .byte	$78
05688                                           ! 1017  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05689 1370                        00            .byte	0
05690 1371                        CC            .byte	$CC
05691 1372                        00            .byte	0
05692 1373                        CC            .byte	$CC
05693 1374                        CC            .byte	$CC
05694 1375                        CC            .byte	$CC
05695 1376                        7E            .byte	$7E
05696 1377                        00            .byte	0
05697                                           ! 1018  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05698 1378                        1C            .byte	$1C
05699 1379                        00            .byte	0
05700 137A                        78            .byte	$78
05701 137B                        CC            .byte	$CC
05702 137C                        FC            .byte	$FC
05703 137D                        C0            .byte	$C0
05704 137E                        78            .byte	$78
05705 137F                        00            .byte	0
05706                                           ! 1019  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05707 1380                        7E            .byte	$7E
05708 1381                        C3            .byte	$C3
05709 1382                        3C            .byte	$3C
05710 1383                        06            .byte	6
05711 1384                        3E            .byte	$3E
05712 1385                        66            .byte	$66
05713 1386                        3F            .byte	$3F
05714 1387                        00            .byte	0
05715                                           ! 1020  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05716 1388                        CC            .byte	$CC
05717 1389                        00            .byte	0
05718 138A                        78            .byte	$78
05719 138B                        0C            .byte	$C
05720 138C                        7C            .byte	$7C
05721 138D                        CC            .byte	$CC
05722 138E                        7E            .byte	$7E
05723 138F                        00            .byte	0
05724                                           ! 1021  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05725 1390                        E0            .byte	$E0
05726 1391                        00            .byte	0
05727 1392                        78            .byte	$78
05728 1393                        0C            .byte	$C
05729 1394                        7C            .byte	$7C
05730 1395                        CC            .byte	$CC
05731 1396                        7E            .byte	$7E
05732 1397                        00            .byte	0
05733                                           ! 1022  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05734 1398                        30            .byte	$30
05735 1399                        30            .byte	$30
05736 139A                        78            .byte	$78
05737 139B                        0C            .byte	$C
05738 139C                        7C            .byte	$7C
05739 139D                        CC            .byte	$CC
05740 139E                        7E            .byte	$7E
05741 139F                        00            .byte	0
05742                                           ! 1023  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05743 13A0                        00            .byte	0
05744 13A1                        00            .byte	0
05745 13A2                        78            .byte	$78
05746 13A3                        C0            .byte	$C0
05747 13A4                        C0            .byte	$C0
05748 13A5                        78            .byte	$78
05749 13A6                        0C            .byte	$C
05750 13A7                        38            .byte	$38
05751                                           ! 1024  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05752 13A8                        7E            .byte	$7E
05753 13A9                        C3            .byte	$C3
05754 13AA                        3C            .byte	$3C
05755 13AB                        66            .byte	$66
05756 13AC                        7E            .byte	$7E
05757 13AD                        60            .byte	$60
05758 13AE                        3C            .byte	$3C
05759 13AF                        00            .byte	0
05760                                           ! 1025  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05761 13B0                        CC            .byte	$CC
05762 13B1                        00            .byte	0
05763 13B2                        78            .byte	$78
05764 13B3                        CC            .byte	$CC
05765 13B4                        FC            .byte	$FC
05766 13B5                        C0            .byte	$C0
05767 13B6                        78            .byte	$78
05768 13B7                        00            .byte	0
05769                                           ! 1026  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05770 13B8                        E0            .byte	$E0
05771 13B9                        00            .byte	0
05772 13BA                        78            .byte	$78
05773 13BB                        CC            .byte	$CC
05774 13BC                        FC            .byte	$FC
05775 13BD                        C0            .byte	$C0
05776 13BE                        78            .byte	$78
05777 13BF                        00            .byte	0
05778                                           ! 1027  0xcc, 0x00, 0x70, 0x
05779 13C0                        CC            .byte	$CC
05780 13C1                        00            .byte	0
05781 13C2                        70            .byte	$70
05782                                           ! 1027 30, 0x30, 0x30, 0x78, 0x00,
05783 13C3                        30            .byte	$30
05784 13C4                        30            .byte	$30
05785 13C5                        30            .byte	$30
05786 13C6                        78            .byte	$78
05787 13C7                        00            .byte	0
05788                                           ! 1028  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05789 13C8                        7C            .byte	$7C
05790 13C9                        C6            .byte	$C6
05791 13CA                        38            .byte	$38
05792 13CB                        18            .byte	$18
05793 13CC                        18            .byte	$18
05794 13CD                        18            .byte	$18
05795 13CE                        3C            .byte	$3C
05796 13CF                        00            .byte	0
05797                                           ! 1029  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05798 13D0                        E0            .byte	$E0
05799 13D1                        00            .byte	0
05800 13D2                        70            .byte	$70
05801 13D3                        30            .byte	$30
05802 13D4                        30            .byte	$30
05803 13D5                        30            .byte	$30
05804 13D6                        78            .byte	$78
05805 13D7                        00            .byte	0
05806                                           ! 1030  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05807 13D8                        C6            .byte	$C6
05808 13D9                        38            .byte	$38
05809 13DA                        6C            .byte	$6C
05810 13DB                        C6            .byte	$C6
05811 13DC                        FE            .byte	$FE
05812 13DD                        C6            .byte	$C6
05813 13DE                        C6            .byte	$C6
05814 13DF                        00            .byte	0
05815                                           ! 1031  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05816 13E0                        30            .byte	$30
05817 13E1                        30            .byte	$30
05818 13E2                        00            .byte	0
05819 13E3                        78            .byte	$78
05820 13E4                        CC            .byte	$CC
05821 13E5                        FC            .byte	$FC
05822 13E6                        CC            .byte	$CC
05823 13E7                        00            .byte	0
05824                                           ! 1032  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05825 13E8                        1C            .byte	$1C
05826 13E9                        00            .byte	0
05827 13EA                        FC            .byte	$FC
05828 13EB                        60            .byte	$60
05829 13EC                        78            .byte	$78
05830 13ED                        60            .byte	$60
05831 13EE                        FC            .byte	$FC
05832 13EF                        00            .byte	0
05833                                           ! 1033  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05834 13F0                        00            .byte	0
05835 13F1                        00            .byte	0
05836 13F2                        7F            .byte	$7F
05837 13F3                        0C            .byte	$C
05838 13F4                        7F            .byte	$7F
05839 13F5                        CC            .byte	$CC
05840 13F6                        7F            .byte	$7F
05841 13F7                        00            .byte	0
05842                                           ! 1034  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05843 13F8                        3E            .byte	$3E
05844 13F9                        6C            .byte	$6C
05845 13FA                        CC            .byte	$CC
05846 13FB                        FE            .byte	$FE
05847 13FC                        CC            .byte	$CC
05848 13FD                        CC            .byte	$CC
05849 13FE                        CE            .byte	$CE
05850 13FF                        00            .byte	0
05851                                           ! 1035  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05852 1400                        78            .byte	$78
05853 1401                        CC            .byte	$CC
05854 1402                        00            .byte	0
05855 1403                        78            .byte	$78
05856 1404                        CC            .byte	$CC
05857 1405                        CC            .byte	$CC
05858 1406                        78            .byte	$78
05859 1407                        00            .byte	0
05860                                           ! 1036  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05861 1408                        00            .byte	0
05862 1409                        CC            .byte	$CC
05863 140A                        00            .byte	0
05864 140B                        78            .byte	$78
05865 140C                        CC            .byte	$CC
05866 140D                        CC            .byte	$CC
05867 140E                        78            .byte	$78
05868 140F                        00            .byte	0
05869                                           ! 1037  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05870 1410                        00            .byte	0
05871 1411                        E0            .byte	$E0
05872 1412                        00            .byte	0
05873 1413                        78            .byte	$78
05874 1414                        CC            .byte	$CC
05875 1415                        CC            .byte	$CC
05876 1416                        78            .byte	$78
05877 1417                        00            .byte	0
05878                                           ! 1038  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05879 1418                        78            .byte	$78
05880 1419                        CC            .byte	$CC
05881 141A                        00            .byte	0
05882 141B                        CC            .byte	$CC
05883 141C                        CC            .byte	$CC
05884 141D                        CC            .byte	$CC
05885 141E                        7E            .byte	$7E
05886 141F                        00            .byte	0
05887                                           ! 1039  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05888 1420                        00            .byte	0
05889 1421                        E0            .byte	$E0
05890 1422                        00            .byte	0
05891 1423                        CC            .byte	$CC
05892 1424                        CC            .byte	$CC
05893 1425                        CC            .byte	$CC
05894 1426                        7E            .byte	$7E
05895 1427                        00            .byte	0
05896                                           ! 1040  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05897 1428                        00            .byte	0
05898 1429                        CC            .byte	$CC
05899 142A                        00            .byte	0
05900 142B                        CC            .byte	$CC
05901 142C                        CC            .byte	$CC
05902 142D                        7C            .byte	$7C
05903 142E                        0C            .byte	$C
05904 142F                        F8            .byte	$F8
05905                                           ! 1041  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05906 1430                        C3            .byte	$C3
05907 1431                        18            .byte	$18
05908 1432                        3C            .byte	$3C
05909 1433                        66            .byte	$66
05910 1434                        66            .byte	$66
05911 1435                        3C            .byte	$3C
05912 1436                        18            .byte	$18
05913 1437                        00            .byte	0
05914                                           ! 1042  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05915 1438                        CC            .byte	$CC
05916 1439                        00            .byte	0
05917 143A                        CC            .byte	$CC
05918 143B                        CC            .byte	$CC
05919 143C                        CC            .byte	$CC
05920 143D                        CC            .byte	$CC
05921 143E                        78            .byte	$78
05922 143F                        00            .byte	0
05923                                           ! 1043  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05924 1440                        18            .byte	$18
05925 1441                        18            .byte	$18
05926 1442                        7E            .byte	$7E
05927 1443                        C0            .byte	$C0
05928 1444                        C0            .byte	$C0
05929 1445                        7E            .byte	$7E
05930 1446                        18            .byte	$18
05931 1447                        18            .byte	$18
05932                                           ! 1044  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05933 1448                        38            .byte	$38
05934 1449                        6C            .byte	$6C
05935 144A                        64            .byte	$64
05936 144B                        F0            .byte	$F0
05937 144C                        60            .byte	$60
05938 144D                        E6            .byte	$E6
05939 144E                        FC            .byte	$FC
05940 144F                        00            .byte	0
05941                                           ! 1045  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05942 1450                        CC            .byte	$CC
05943 1451                        CC            .byte	$CC
05944 1452                        78            .byte	$78
05945 1453                        FC            .byte	$FC
05946 1454                        30            .byte	$30
05947 1455                        FC            .byte	$FC
05948 1456                        30            .byte	$30
05949 1457                        30            .byte	$30
05950                                           ! 1046  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05951 1458                        F8            .byte	$F8
05952 1459                        CC            .byte	$CC
05953 145A                        CC            .byte	$CC
05954 145B                        FA            .byte	$FA
05955 145C                        C6            .byte	$C6
05956 145D                        CF            .byte	$CF
05957 145E                        C6            .byte	$C6
05958 145F                        C7            .byte	$C7
05959                                           ! 1047  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05960 1460                        0E            .byte	$E
05961 1461                        1B            .byte	$1B
05962 1462                        18            .byte	$18
05963 1463                        3C            .byte	$3C
05964 1464                        18            .byte	$18
05965 1465                        18            .byte	$18
05966 1466                        D8            .byte	$D8
05967 1467                        70            .byte	$70
05968                                           ! 1048  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05969 1468                        1C            .byte	$1C
05970 1469                        00            .byte	0
05971 146A                        78            .byte	$78
05972 146B                        0C            .byte	$C
05973 146C                        7C            .byte	$7C
05974 146D                        CC            .byte	$CC
05975 146E                        7E            .byte	$7E
05976 146F                        00            .byte	0
05977                                           ! 1049  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05978 1470                        38            .byte	$38
05979 1471                        00            .byte	0
05980 1472                        70            .byte	$70
05981 1473                        30            .byte	$30
05982 1474                        30            .byte	$30
05983 1475                        30            .byte	$30
05984 1476                        78            .byte	$78
05985 1477                        00            .byte	0
05986                                           ! 1050  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05987 1478                        00            .byte	0
05988 1479                        1C            .byte	$1C
05989 147A                        00            .byte	0
05990 147B                        78            .byte	$78
05991 147C                        CC            .byte	$CC
05992 147D                        CC            .byte	$CC
05993 147E                        78            .byte	$78
05994 147F                        00            .byte	0
05995                                           ! 1051  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05996 1480                        00            .byte	0
05997 1481                        1C            .byte	$1C
05998 1482                        00            .byte	0
05999 1483                        CC            .byte	$CC
06000 1484                        CC            .byte	$CC
06001 1485                        CC            .byte	$CC
06002 1486                        7E            .byte	$7E
06003 1487                        00            .byte	0
06004                                           ! 1052  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
06005 1488                        00            .byte	0
06006 1489                        F8            .byte	$F8
06007 148A                        00            .byte	0
06008 148B                        F8            .byte	$F8
06009 148C                        CC            .byte	$CC
06010 148D                        CC            .byte	$CC
06011 148E                        CC            .byte	$CC
06012 148F                        00            .byte	0
06013                                           ! 1053  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
06014 1490                        FC            .byte	$FC
06015 1491                        00            .byte	0
06016 1492                        CC            .byte	$CC
06017 1493                        EC            .byte	$EC
06018 1494                        FC            .byte	$FC
06019 1495                        DC            .byte	$DC
06020 1496                        CC            .byte	$CC
06021 1497                        00            .byte	0
06022                                           ! 1054  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06023 1498                        3C            .byte	$3C
06024 1499                        6C            .byte	$6C
06025 149A                        6C            .byte	$6C
06026 149B                        3E            .byte	$3E
06027 149C                        00            .byte	0
06028 149D                        7E            .byte	$7E
06029 149E                        00            .byte	0
06030 149F                        00            .byte	0
06031                                           ! 1055  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06032 14A0                        38            .byte	$38
06033 14A1                        6C            .byte	$6C
06034 14A2                        6C            .byte	$6C
06035 14A3                        38            .byte	$38
06036 14A4                        00            .byte	0
06037 14A5                        7C            .byte	$7C
06038 14A6                        00            .byte	0
06039 14A7                        00            .byte	0
06040                                           ! 1056  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06041 14A8                        30            .byte	$30
06042 14A9                        00            .byte	0
06043 14AA                        30            .byte	$30
06044 14AB                        60            .byte	$60
06045 14AC                        C0            .byte	$C0
06046 14AD                        CC            .byte	$CC
06047 14AE                        78            .byte	$78
06048 14AF                        00            .byte	0
06049                                           ! 1057  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06050 14B0                        00            .byte	0
06051 14B1                        00            .byte	0
06052 14B2                        00            .byte	0
06053 14B3                        FC            .byte	$FC
06054 14B4                        C0            .byte	$C0
06055 14B5                        C0            .byte	$C0
06056 14B6                        00            .byte	0
06057 14B7                        00            .byte	0
06058                                           ! 1058  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06059 14B8                        00            .byte	0
06060 14B9                        00            .byte	0
06061 14BA                        00            .byte	0
06062 14BB                        FC            .byte	$FC
06063 14BC                        0C            .byte	$C
06064 14BD                        0C            .byte	$C
06065 14BE                        00            .byte	0
06066 14BF                        00            .byte	0
06067                                           ! 1059  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06068 14C0                        C3            .byte	$C3
06069 14C1                        C6            .byte	$C6
06070 14C2                        CC            .byte	$CC
06071 14C3                        DE            .byte	$DE
06072 14C4                        33            .byte	$33
06073 14C5                        66            .byte	$66
06074 14C6                        CC            .byte	$CC
06075 14C7                        0F            .byte	$F
06076                                           ! 1060  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06077 14C8                        C3            .byte	$C3
06078 14C9                        C6            .byte	$C6
06079 14CA                        CC            .byte	$CC
06080 14CB                        DB            .byte	$DB
06081 14CC                        37            .byte	$37
06082 14CD                        6F            .byte	$6F
06083 14CE                        CF            .byte	$CF
06084 14CF                        03            .byte	3
06085                                           ! 1061  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06086 14D0                        18            .byte	$18
06087 14D1                        18            .byte	$18
06088 14D2                        00            .byte	0
06089 14D3                        18            .byte	$18
06090 14D4                        18            .byte	$18
06091 14D5                        18            .byte	$18
06092 14D6                        18            .byte	$18
06093 14D7                        00            .byte	0
06094                                           ! 1062  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06095 14D8                        00            .byte	0
06096 14D9                        33            .byte	$33
06097 14DA                        66            .byte	$66
06098 14DB                        CC            .byte	$CC
06099 14DC                        66            .byte	$66
06100 14DD                        33            .byte	$33
06101 14DE                        00            .byte	0
06102 14DF                        00            .byte	0
06103                                           ! 1063  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06104 14E0                        00            .byte	0
06105 14E1                        CC            .byte	$CC
06106 14E2                        66            .byte	$66
06107 14E3                        33            .byte	$33
06108 14E4                        66            .byte	$66
06109 14E5                        CC            .byte	$CC
06110 14E6                        00            .byte	0
06111 14E7                        00            .byte	0
06112                                           ! 1064  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06113 14E8                        22            .byte	$22
06114 14E9                        88            .byte	$88
06115 14EA                        22            .byte	$22
06116 14EB                        88            .byte	$88
06117 14EC                        22            .byte	$22
06118 14ED                        88            .byte	$88
06119 14EE                        22            .byte	$22
06120 14EF                        88            .byte	$88
06121                                           ! 1065  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06122 14F0                        55            .byte	$55
06123 14F1                        AA            .byte	$AA
06124 14F2                        55            .byte	$55
06125 14F3                        AA            .byte	$AA
06126 14F4                        55            .byte	$55
06127 14F5                        AA            .byte	$AA
06128 14F6                        55            .byte	$55
06129 14F7                        AA            .byte	$AA
06130                                           ! 1066  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06131 14F8                        DB            .byte	$DB
06132 14F9                        77            .byte	$77
06133 14FA                        DB            .byte	$DB
06134 14FB                        EE            .byte	$EE
06135 14FC                        DB            .byte	$DB
06136 14FD                        77            .byte	$77
06137 14FE                        DB            .byte	$DB
06138 14FF                        EE            .byte	$EE
06139                                           ! 1067  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06140 1500                        18            .byte	$18
06141 1501                        18            .byte	$18
06142 1502                        18            .byte	$18
06143 1503                        18            .byte	$18
06144 1504                        18            .byte	$18
06145 1505                        18            .byte	$18
06146 1506                        18            .byte	$18
06147 1507                        18            .byte	$18
06148                                           ! 1068  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06149 1508                        18            .byte	$18
06150 1509                        18            .byte	$18
06151 150A                        18            .byte	$18
06152 150B                        18            .byte	$18
06153 150C                        F8            .byte	$F8
06154 150D                        18            .byte	$18
06155 150E                        18            .byte	$18
06156 150F                        18            .byte	$18
06157                                           ! 1069  0x18, 0x18
06158 1510                        18            .byte	$18
06159                                           ! 1069 , 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06160 1511                        18            .byte	$18
06161 1512                        F8            .byte	$F8
06162 1513                        18            .byte	$18
06163 1514                        F8            .byte	$F8
06164 1515                        18            .byte	$18
06165 1516                        18            .byte	$18
06166 1517                        18            .byte	$18
06167                                           ! 1070  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06168 1518                        36            .byte	$36
06169 1519                        36            .byte	$36
06170 151A                        36            .byte	$36
06171 151B                        36            .byte	$36
06172 151C                        F6            .byte	$F6
06173 151D                        36            .byte	$36
06174 151E                        36            .byte	$36
06175 151F                        36            .byte	$36
06176                                           ! 1071  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
06177 1520                        00            .byte	0
06178 1521                        00            .byte	0
06179 1522                        00            .byte	0
06180 1523                        00            .byte	0
06181 1524                        FE            .byte	$FE
06182 1525                        36            .byte	$36
06183 1526                        36            .byte	$36
06184 1527                        36            .byte	$36
06185                                           ! 1072  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06186 1528                        00            .byte	0
06187 1529                        00            .byte	0
06188 152A                        F8            .byte	$F8
06189 152B                        18            .byte	$18
06190 152C                        F8            .byte	$F8
06191 152D                        18            .byte	$18
06192 152E                        18            .byte	$18
06193 152F                        18            .byte	$18
06194                                           ! 1073  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06195 1530                        36            .byte	$36
06196 1531                        36            .byte	$36
06197 1532                        F6            .byte	$F6
06198 1533                        06            .byte	6
06199 1534                        F6            .byte	$F6
06200 1535                        36            .byte	$36
06201 1536                        36            .byte	$36
06202 1537                        36            .byte	$36
06203                                           ! 1074  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06204 1538                        36            .byte	$36
06205 1539                        36            .byte	$36
06206 153A                        36            .byte	$36
06207 153B                        36            .byte	$36
06208 153C                        36            .byte	$36
06209 153D                        36            .byte	$36
06210 153E                        36            .byte	$36
06211 153F                        36            .byte	$36
06212                                           ! 1075  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06213 1540                        00            .byte	0
06214 1541                        00            .byte	0
06215 1542                        FE            .byte	$FE
06216 1543                        06            .byte	6
06217 1544                        F6            .byte	$F6
06218 1545                        36            .byte	$36
06219 1546                        36            .byte	$36
06220 1547                        36            .byte	$36
06221                                           ! 1076  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06222 1548                        36            .byte	$36
06223 1549                        36            .byte	$36
06224 154A                        F6            .byte	$F6
06225 154B                        06            .byte	6
06226 154C                        FE            .byte	$FE
06227 154D                        00            .byte	0
06228 154E                        00            .byte	0
06229 154F                        00            .byte	0
06230                                           ! 1077  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06231 1550                        36            .byte	$36
06232 1551                        36            .byte	$36
06233 1552                        36            .byte	$36
06234 1553                        36            .byte	$36
06235 1554                        FE            .byte	$FE
06236 1555                        00            .byte	0
06237 1556                        00            .byte	0
06238 1557                        00            .byte	0
06239                                           ! 1078  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06240 1558                        18            .byte	$18
06241 1559                        18            .byte	$18
06242 155A                        F8            .byte	$F8
06243 155B                        18            .byte	$18
06244 155C                        F8            .byte	$F8
06245 155D                        00            .byte	0
06246 155E                        00            .byte	0
06247 155F                        00            .byte	0
06248                                           ! 1079  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06249 1560                        00            .byte	0
06250 1561                        00            .byte	0
06251 1562                        00            .byte	0
06252 1563                        00            .byte	0
06253 1564                        F8            .byte	$F8
06254 1565                        18            .byte	$18
06255 1566                        18            .byte	$18
06256 1567                        18            .byte	$18
06257                                           ! 1080  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06258 1568                        18            .byte	$18
06259 1569                        18            .byte	$18
06260 156A                        18            .byte	$18
06261 156B                        18            .byte	$18
06262 156C                        1F            .byte	$1F
06263 156D                        00            .byte	0
06264 156E                        00            .byte	0
06265 156F                        00            .byte	0
06266                                           ! 1081  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06267 1570                        18            .byte	$18
06268 1571                        18            .byte	$18
06269 1572                        18            .byte	$18
06270 1573                        18            .byte	$18
06271 1574                        FF            .byte	$FF
06272 1575                        00            .byte	0
06273 1576                        00            .byte	0
06274 1577                        00            .byte	0
06275                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06276 1578                        00            .byte	0
06277 1579                        00            .byte	0
06278 157A                        00            .byte	0
06279 157B                        00            .byte	0
06280 157C                        FF            .byte	$FF
06281 157D                        18            .byte	$18
06282 157E                        18            .byte	$18
06283 157F                        18            .byte	$18
06284                                           ! 1083  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06285 1580                        18            .byte	$18
06286 1581                        18            .byte	$18
06287 1582                        18            .byte	$18
06288 1583                        18            .byte	$18
06289 1584                        1F            .byte	$1F
06290 1585                        18            .byte	$18
06291 1586                        18            .byte	$18
06292 1587                        18            .byte	$18
06293                                           ! 1084  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06294 1588                        00            .byte	0
06295 1589                        00            .byte	0
06296 158A                        00            .byte	0
06297 158B                        00            .byte	0
06298 158C                        FF            .byte	$FF
06299 158D                        00            .byte	0
06300 158E                        00            .byte	0
06301 158F                        00            .byte	0
06302                                           ! 1085  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06303 1590                        18            .byte	$18
06304 1591                        18            .byte	$18
06305 1592                        18            .byte	$18
06306 1593                        18            .byte	$18
06307 1594                        FF            .byte	$FF
06308 1595                        18            .byte	$18
06309 1596                        18            .byte	$18
06310 1597                        18            .byte	$18
06311                                           ! 1086  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06312 1598                        18            .byte	$18
06313 1599                        18            .byte	$18
06314 159A                        1F            .byte	$1F
06315 159B                        18            .byte	$18
06316 159C                        1F            .byte	$1F
06317 159D                        18            .byte	$18
06318 159E                        18            .byte	$18
06319 159F                        18            .byte	$18
06320                                           ! 1087  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06321 15A0                        36            .byte	$36
06322 15A1                        36            .byte	$36
06323 15A2                        36            .byte	$36
06324 15A3                        36            .byte	$36
06325 15A4                        37            .byte	$37
06326 15A5                        36            .byte	$36
06327 15A6                        36            .byte	$36
06328 15A7                        36            .byte	$36
06329                                           ! 1088  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06330 15A8                        36            .byte	$36
06331 15A9                        36            .byte	$36
06332 15AA                        37            .byte	$37
06333 15AB                        30            .byte	$30
06334 15AC                        3F            .byte	$3F
06335 15AD                        00            .byte	0
06336 15AE                        00            .byte	0
06337 15AF                        00            .byte	0
06338                                           ! 1089  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06339 15B0                        00            .byte	0
06340 15B1                        00            .byte	0
06341 15B2                        3F            .byte	$3F
06342 15B3                        30            .byte	$30
06343 15B4                        37            .byte	$37
06344 15B5                        36            .byte	$36
06345 15B6                        36            .byte	$36
06346 15B7                        36            .byte	$36
06347                                           ! 1090  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06348 15B8                        36            .byte	$36
06349 15B9                        36            .byte	$36
06350 15BA                        F7            .byte	$F7
06351 15BB                        00            .byte	0
06352 15BC                        FF            .byte	$FF
06353 15BD                        00            .byte	0
06354 15BE                        00            .byte	0
06355 15BF                        00            .byte	0
06356                                           ! 1091  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06357 15C0                        00            .byte	0
06358 15C1                        00            .byte	0
06359 15C2                        FF            .byte	$FF
06360 15C3                        00            .byte	0
06361 15C4                        F7            .byte	$F7
06362 15C5                        36            .byte	$36
06363 15C6                        36            .byte	$36
06364 15C7                        36            .byte	$36
06365                                           ! 1092  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06366 15C8                        36            .byte	$36
06367 15C9                        36            .byte	$36
06368 15CA                        37            .byte	$37
06369 15CB                        30            .byte	$30
06370 15CC                        37            .byte	$37
06371 15CD                        36            .byte	$36
06372 15CE                        36            .byte	$36
06373 15CF                        36            .byte	$36
06374                                           ! 1093  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06375 15D0                        00            .byte	0
06376 15D1                        00            .byte	0
06377 15D2                        FF            .byte	$FF
06378 15D3                        00            .byte	0
06379 15D4                        FF            .byte	$FF
06380 15D5                        00            .byte	0
06381 15D6                        00            .byte	0
06382 15D7                        00            .byte	0
06383                                           ! 1094  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06384 15D8                        36            .byte	$36
06385 15D9                        36            .byte	$36
06386 15DA                        F7            .byte	$F7
06387 15DB                        00            .byte	0
06388 15DC                        F7            .byte	$F7
06389 15DD                        36            .byte	$36
06390 15DE                        36            .byte	$36
06391 15DF                        36            .byte	$36
06392                                           ! 1095  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06393 15E0                        18            .byte	$18
06394 15E1                        18            .byte	$18
06395 15E2                        FF            .byte	$FF
06396 15E3                        00            .byte	0
06397 15E4                        FF            .byte	$FF
06398 15E5                        00            .byte	0
06399 15E6                        00            .byte	0
06400 15E7                        00            .byte	0
06401                                           ! 1096  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06402 15E8                        36            .byte	$36
06403 15E9                        36            .byte	$36
06404 15EA                        36            .byte	$36
06405 15EB                        36            .byte	$36
06406 15EC                        FF            .byte	$FF
06407 15ED                        00            .byte	0
06408 15EE                        00            .byte	0
06409 15EF                        00            .byte	0
06410                                           ! 1097  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06411 15F0                        00            .byte	0
06412 15F1                        00            .byte	0
06413 15F2                        FF            .byte	$FF
06414 15F3                        00            .byte	0
06415 15F4                        FF            .byte	$FF
06416 15F5                        18            .byte	$18
06417 15F6                        18            .byte	$18
06418 15F7                        18            .byte	$18
06419                                           ! 1098  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06420 15F8                        00            .byte	0
06421 15F9                        00            .byte	0
06422 15FA                        00            .byte	0
06423 15FB                        00            .byte	0
06424 15FC                        FF            .byte	$FF
06425 15FD                        36            .byte	$36
06426 15FE                        36            .byte	$36
06427 15FF                        36            .byte	$36
06428                                           ! 1099  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06429 1600                        36            .byte	$36
06430 1601                        36            .byte	$36
06431 1602                        36            .byte	$36
06432 1603                        36            .byte	$36
06433 1604                        3F            .byte	$3F
06434 1605                        00            .byte	0
06435 1606                        00            .byte	0
06436 1607                        00            .byte	0
06437                                           ! 1100  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06438 1608                        18            .byte	$18
06439 1609                        18            .byte	$18
06440 160A                        1F            .byte	$1F
06441 160B                        18            .byte	$18
06442 160C                        1F            .byte	$1F
06443 160D                        00            .byte	0
06444 160E                        00            .byte	0
06445 160F                        00            .byte	0
06446                                           ! 1101  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06447 1610                        00            .byte	0
06448 1611                        00            .byte	0
06449 1612                        1F            .byte	$1F
06450 1613                        18            .byte	$18
06451 1614                        1F            .byte	$1F
06452 1615                        18            .byte	$18
06453 1616                        18            .byte	$18
06454 1617                        18            .byte	$18
06455                                           ! 1102  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06456 1618                        00            .byte	0
06457 1619                        00            .byte	0
06458 161A                        00            .byte	0
06459 161B                        00            .byte	0
06460 161C                        3F            .byte	$3F
06461 161D                        36            .byte	$36
06462 161E                        36            .byte	$36
06463 161F                        36            .byte	$36
06464                                           ! 1103  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06465 1620                        36            .byte	$36
06466 1621                        36            .byte	$36
06467 1622                        36            .byte	$36
06468 1623                        36            .byte	$36
06469 1624                        FF            .byte	$FF
06470 1625                        36            .byte	$36
06471 1626                        36            .byte	$36
06472 1627                        36            .byte	$36
06473                                           ! 1104  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06474 1628                        18            .byte	$18
06475 1629                        18            .byte	$18
06476 162A                        FF            .byte	$FF
06477 162B                        18            .byte	$18
06478 162C                        FF            .byte	$FF
06479 162D                        18            .byte	$18
06480 162E                        18            .byte	$18
06481 162F                        18            .byte	$18
06482                                           ! 1105  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06483 1630                        18            .byte	$18
06484 1631                        18            .byte	$18
06485 1632                        18            .byte	$18
06486 1633                        18            .byte	$18
06487 1634                        F8            .byte	$F8
06488 1635                        00            .byte	0
06489 1636                        00            .byte	0
06490 1637                        00            .byte	0
06491                                           ! 1106  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06492 1638                        00            .byte	0
06493 1639                        00            .byte	0
06494 163A                        00            .byte	0
06495 163B                        00            .byte	0
06496 163C                        1F            .byte	$1F
06497 163D                        18            .byte	$18
06498 163E                        18            .byte	$18
06499 163F                        18            .byte	$18
06500                                           ! 1107  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06501 1640                        FF            .byte	$FF
06502 1641                        FF            .byte	$FF
06503 1642                        FF            .byte	$FF
06504 1643                        FF            .byte	$FF
06505 1644                        FF            .byte	$FF
06506 1645                        FF            .byte	$FF
06507 1646                        FF            .byte	$FF
06508 1647                        FF            .byte	$FF
06509                                           ! 1108  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06510 1648                        00            .byte	0
06511 1649                        00            .byte	0
06512 164A                        00            .byte	0
06513 164B                        00            .byte	0
06514 164C                        FF            .byte	$FF
06515 164D                        FF            .byte	$FF
06516 164E                        FF            .byte	$FF
06517 164F                        FF            .byte	$FF
06518                                           ! 1109  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06519 1650                        F0            .byte	$F0
06520 1651                        F0            .byte	$F0
06521 1652                        F0            .byte	$F0
06522 1653                        F0            .byte	$F0
06523 1654                        F0            .byte	$F0
06524 1655                        F0            .byte	$F0
06525 1656                        F0            .byte	$F0
06526 1657                        F0            .byte	$F0
06527                                           ! 1110  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06528 1658                        0F            .byte	$F
06529 1659                        0F            .byte	$F
06530 165A                        0F            .byte	$F
06531 165B                        0F            .byte	$F
06532 165C                        0F            .byte	$F
06533 165D                        0F            .byte	$F
06534 165E                        0F            .byte	$F
06535 165F                        0F            .byte	$F
06536                                           ! 1111  
06537                                           ! 1111 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06538 1660                        FF            .byte	$FF
06539 1661                        FF            .byte	$FF
06540 1662                        FF            .byte	$FF
06541 1663                        FF            .byte	$FF
06542 1664                        00            .byte	0
06543 1665                        00            .byte	0
06544 1666                        00            .byte	0
06545 1667                        00            .byte	0
06546                                           ! 1112  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06547 1668                        00            .byte	0
06548 1669                        00            .byte	0
06549 166A                        76            .byte	$76
06550 166B                        DC            .byte	$DC
06551 166C                        C8            .byte	$C8
06552 166D                        DC            .byte	$DC
06553 166E                        76            .byte	$76
06554 166F                        00            .byte	0
06555                                           ! 1113  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06556 1670                        00            .byte	0
06557 1671                        78            .byte	$78
06558 1672                        CC            .byte	$CC
06559 1673                        F8            .byte	$F8
06560 1674                        CC            .byte	$CC
06561 1675                        F8            .byte	$F8
06562 1676                        C0            .byte	$C0
06563 1677                        C0            .byte	$C0
06564                                           ! 1114  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06565 1678                        00            .byte	0
06566 1679                        FC            .byte	$FC
06567 167A                        CC            .byte	$CC
06568 167B                        C0            .byte	$C0
06569 167C                        C0            .byte	$C0
06570 167D                        C0            .byte	$C0
06571 167E                        C0            .byte	$C0
06572 167F                        00            .byte	0
06573                                           ! 1115  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06574 1680                        00            .byte	0
06575 1681                        FE            .byte	$FE
06576 1682                        6C            .byte	$6C
06577 1683                        6C            .byte	$6C
06578 1684                        6C            .byte	$6C
06579 1685                        6C            .byte	$6C
06580 1686                        6C            .byte	$6C
06581 1687                        00            .byte	0
06582                                           ! 1116  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06583 1688                        FC            .byte	$FC
06584 1689                        CC            .byte	$CC
06585 168A                        60            .byte	$60
06586 168B                        30            .byte	$30
06587 168C                        60            .byte	$60
06588 168D                        CC            .byte	$CC
06589 168E                        FC            .byte	$FC
06590 168F                        00            .byte	0
06591                                           ! 1117  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06592 1690                        00            .byte	0
06593 1691                        00            .byte	0
06594 1692                        7E            .byte	$7E
06595 1693                        D8            .byte	$D8
06596 1694                        D8            .byte	$D8
06597 1695                        D8            .byte	$D8
06598 1696                        70            .byte	$70
06599 1697                        00            .byte	0
06600                                           ! 1118  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06601 1698                        00            .byte	0
06602 1699                        66            .byte	$66
06603 169A                        66            .byte	$66
06604 169B                        66            .byte	$66
06605 169C                        66            .byte	$66
06606 169D                        7C            .byte	$7C
06607 169E                        60            .byte	$60
06608 169F                        C0            .byte	$C0
06609                                           ! 1119  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06610 16A0                        00            .byte	0
06611 16A1                        76            .byte	$76
06612 16A2                        DC            .byte	$DC
06613 16A3                        18            .byte	$18
06614 16A4                        18            .byte	$18
06615 16A5                        18            .byte	$18
06616 16A6                        18            .byte	$18
06617 16A7                        00            .byte	0
06618                                           ! 1120  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06619 16A8                        FC            .byte	$FC
06620 16A9                        30            .byte	$30
06621 16AA                        78            .byte	$78
06622 16AB                        CC            .byte	$CC
06623 16AC                        CC            .byte	$CC
06624 16AD                        78            .byte	$78
06625 16AE                        30            .byte	$30
06626 16AF                        FC            .byte	$FC
06627                                           ! 1121  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06628 16B0                        38            .byte	$38
06629 16B1                        6C            .byte	$6C
06630 16B2                        C6            .byte	$C6
06631 16B3                        FE            .byte	$FE
06632 16B4                        C6            .byte	$C6
06633 16B5                        6C            .byte	$6C
06634 16B6                        38            .byte	$38
06635 16B7                        00            .byte	0
06636                                           ! 1122  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06637 16B8                        38            .byte	$38
06638 16B9                        6C            .byte	$6C
06639 16BA                        C6            .byte	$C6
06640 16BB                        C6            .byte	$C6
06641 16BC                        6C            .byte	$6C
06642 16BD                        6C            .byte	$6C
06643 16BE                        EE            .byte	$EE
06644 16BF                        00            .byte	0
06645                                           ! 1123  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06646 16C0                        1C            .byte	$1C
06647 16C1                        30            .byte	$30
06648 16C2                        18            .byte	$18
06649 16C3                        7C            .byte	$7C
06650 16C4                        CC            .byte	$CC
06651 16C5                        CC            .byte	$CC
06652 16C6                        78            .byte	$78
06653 16C7                        00            .byte	0
06654                                           ! 1124  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06655 16C8                        00            .byte	0
06656 16C9                        00            .byte	0
06657 16CA                        7E            .byte	$7E
06658 16CB                        DB            .byte	$DB
06659 16CC                        DB            .byte	$DB
06660 16CD                        7E            .byte	$7E
06661 16CE                        00            .byte	0
06662 16CF                        00            .byte	0
06663                                           ! 1125  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06664 16D0                        06            .byte	6
06665 16D1                        0C            .byte	$C
06666 16D2                        7E            .byte	$7E
06667 16D3                        DB            .byte	$DB
06668 16D4                        DB            .byte	$DB
06669 16D5                        7E            .byte	$7E
06670 16D6                        60            .byte	$60
06671 16D7                        C0            .byte	$C0
06672                                           ! 1126  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06673 16D8                        38            .byte	$38
06674 16D9                        60            .byte	$60
06675 16DA                        C0            .byte	$C0
06676 16DB                        F8            .byte	$F8
06677 16DC                        C0            .byte	$C0
06678 16DD                        60            .byte	$60
06679 16DE                        38            .byte	$38
06680 16DF                        00            .byte	0
06681                                           ! 1127  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06682 16E0                        78            .byte	$78
06683 16E1                        CC            .byte	$CC
06684 16E2                        CC            .byte	$CC
06685 16E3                        CC            .byte	$CC
06686 16E4                        CC            .byte	$CC
06687 16E5                        CC            .byte	$CC
06688 16E6                        CC            .byte	$CC
06689 16E7                        00            .byte	0
06690                                           ! 1128  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06691 16E8                        00            .byte	0
06692 16E9                        FC            .byte	$FC
06693 16EA                        00            .byte	0
06694 16EB                        FC            .byte	$FC
06695 16EC                        00            .byte	0
06696 16ED                        FC            .byte	$FC
06697 16EE                        00            .byte	0
06698 16EF                        00            .byte	0
06699                                           ! 1129  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06700 16F0                        30            .byte	$30
06701 16F1                        30            .byte	$30
06702 16F2                        FC            .byte	$FC
06703 16F3                        30            .byte	$30
06704 16F4                        30            .byte	$30
06705 16F5                        00            .byte	0
06706 16F6                        FC            .byte	$FC
06707 16F7                        00            .byte	0
06708                                           ! 1130  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06709 16F8                        60            .byte	$60
06710 16F9                        30            .byte	$30
06711 16FA                        18            .byte	$18
06712 16FB                        30            .byte	$30
06713 16FC                        60            .byte	$60
06714 16FD                        00            .byte	0
06715 16FE                        FC            .byte	$FC
06716 16FF                        00            .byte	0
06717                                           ! 1131  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06718 1700                        18            .byte	$18
06719 1701                        30            .byte	$30
06720 1702                        60            .byte	$60
06721 1703                        30            .byte	$30
06722 1704                        18            .byte	$18
06723 1705                        00            .byte	0
06724 1706                        FC            .byte	$FC
06725 1707                        00            .byte	0
06726                                           ! 1132  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06727 1708                        0E            .byte	$E
06728 1709                        1B            .byte	$1B
06729 170A                        1B            .byte	$1B
06730 170B                        18            .byte	$18
06731 170C                        18            .byte	$18
06732 170D                        18            .byte	$18
06733 170E                        18            .byte	$18
06734 170F                        18            .byte	$18
06735                                           ! 1133  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06736 1710                        18            .byte	$18
06737 1711                        18            .byte	$18
06738 1712                        18            .byte	$18
06739 1713                        18            .byte	$18
06740 1714                        18            .byte	$18
06741 1715                        D8            .byte	$D8
06742 1716                        D8            .byte	$D8
06743 1717                        70            .byte	$70
06744                                           ! 1134  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06745 1718                        30            .byte	$30
06746 1719                        30            .byte	$30
06747 171A                        00            .byte	0
06748 171B                        FC            .byte	$FC
06749 171C                        00            .byte	0
06750 171D                        30            .byte	$30
06751 171E                        30            .byte	$30
06752 171F                        00            .byte	0
06753                                           ! 1135  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06754 1720                        00            .byte	0
06755 1721                        76            .byte	$76
06756 1722                        DC            .byte	$DC
06757 1723                        00            .byte	0
06758 1724                        76            .byte	$76
06759 1725                        DC            .byte	$DC
06760 1726                        00            .byte	0
06761 1727                        00            .byte	0
06762                                           ! 1136  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06763 1728                        38            .byte	$38
06764 1729                        6C            .byte	$6C
06765 172A                        6C            .byte	$6C
06766 172B                        38            .byte	$38
06767 172C                        00            .byte	0
06768 172D                        00            .byte	0
06769 172E                        00            .byte	0
06770 172F                        00            .byte	0
06771                                           ! 1137  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06772 1730                        00            .byte	0
06773 1731                        00            .byte	0
06774 1732                        00            .byte	0
06775 1733                        18            .byte	$18
06776 1734                        18            .byte	$18
06777 1735                        00            .byte	0
06778 1736                        00            .byte	0
06779 1737                        00            .byte	0
06780                                           ! 1138  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06781 1738                        00            .byte	0
06782 1739                        00            .byte	0
06783 173A                        00            .byte	0
06784 173B                        00            .byte	0
06785 173C                        18            .byte	$18
06786 173D                        00            .byte	0
06787 173E                        00            .byte	0
06788 173F                        00            .byte	0
06789                                           ! 1139  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06790 1740                        0F            .byte	$F
06791 1741                        0C            .byte	$C
06792 1742                        0C            .byte	$C
06793 1743                        0C            .byte	$C
06794 1744                        EC            .byte	$EC
06795 1745                        6C            .byte	$6C
06796 1746                        3C            .byte	$3C
06797 1747                        1C            .byte	$1C
06798                                           ! 1140  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06799 1748                        78            .byte	$78
06800 1749                        6C            .byte	$6C
06801 174A                        6C            .byte	$6C
06802 174B                        6C            .byte	$6C
06803 174C                        6C            .byte	$6C
06804 174D                        00            .byte	0
06805 174E                        00            .byte	0
06806 174F                        00            .byte	0
06807                                           ! 1141  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06808 1750                        70            .byte	$70
06809 1751                        18            .byte	$18
06810 1752                        30            .byte	$30
06811 1753                        60            .byte	$60
06812 1754                        78            .byte	$78
06813 1755                        00            .byte	0
06814 1756                        00            .byte	0
06815 1757                        00            .byte	0
06816                                           ! 1142  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06817 1758                        00            .byte	0
06818 1759                        00            .byte	0
06819 175A                        3C            .byte	$3C
06820 175B                        3C            .byte	$3C
06821 175C                        3C            .byte	$3C
06822 175D                        3C            .byte	$3C
06823 175E                        00            .byte	0
06824 175F                        00            .byte	0
06825                                           ! 1143  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06826 1760                        00            .byte	0
06827 1761                        00            .byte	0
06828 1762                        00            .byte	0
06829 1763                        00            .byte	0
06830 1764                        00            .byte	0
06831 1765                        00            .byte	0
06832 1766                        00            .byte	0
06833                                           ! 1144 };
06834 1767                        00            .byte	0
06835                                           !BCC_EOS
06836                                           ! 1145 static Bit8u vgafont14[256*14]=
06837                                           ! 1146 {
06838                       00001768            _vgafont14:
06839                                           ! 1147  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06840 1768                        00            .byte	0
06841 1769                        00            .byte	0
06842 176A                        00            .byte	0
06843 176B                        00            .byte	0
06844 176C                        00            .byte	0
06845 176D                        00            .byte	0
06846 176E                        00            .byte	0
06847 176F                        00            .byte	0
06848 1770                        00            .byte	0
06849 1771                        00            .byte	0
06850 1772                        00            .byte	0
06851 1773                        00            .byte	0
06852 1774                        00            .byte	0
06853 1775                        00            .byte	0
06854                                           ! 1148  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06855 1776                        00            .byte	0
06856 1777                        00            .byte	0
06857 1778                        7E            .byte	$7E
06858 1779                        81            .byte	$81
06859 177A                        A5            .byte	$A5
06860 177B                        81            .byte	$81
06861 177C                        81            .byte	$81
06862 177D                        BD            .byte	$BD
06863 177E                        99            .byte	$99
06864 177F                        81            .byte	$81
06865 1780                        7E            .byte	$7E
06866 1781                        00            .byte	0
06867 1782                        00            .byte	0
06868 1783                        00            .byte	0
06869                                           ! 1149  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06870 1784                        00            .byte	0
06871 1785                        00            .byte	0
06872 1786                        7E            .byte	$7E
06873 1787                        FF            .byte	$FF
06874 1788                        DB            .byte	$DB
06875 1789                        FF            .byte	$FF
06876 178A                        FF            .byte	$FF
06877 178B                        C3            .byte	$C3
06878 178C                        E7            .byte	$E7
06879 178D                        FF            .byte	$FF
06880 178E                        7E            .byte	$7E
06881 178F                        00            .byte	0
06882 1790                        00            .byte	0
06883 1791                        00            .byte	0
06884                                           ! 1150  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06885 1792                        00            .byte	0
06886 1793                        00            .byte	0
06887 1794                        00            .byte	0
06888 1795                        6C            .byte	$6C
06889 1796                        FE            .byte	$FE
06890 1797                        FE            .byte	$FE
06891 1798                        FE            .byte	$FE
06892 1799                        FE            .byte	$FE
06893 179A                        7C            .byte	$7C
06894 179B                        38            .byte	$38
06895 179C                        10            .byte	$10
06896 179D                        00            .byte	0
06897 179E                        00            .byte	0
06898 179F                        00            .byte	0
06899                                           ! 1151  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0
06900 17A0                        00            .byte	0
06901 17A1                        00            .byte	0
06902 17A2                        00            .byte	0
06903 17A3                        10            .byte	$10
06904 17A4                        38            .byte	$38
06905 17A5                        7C            .byte	$7C
06906 17A6                        FE            .byte	$FE
06907 17A7                        7C            .byte	$7C
06908 17A8                        38            .byte	$38
06909                                           ! 1151 x10, 0x00, 0x00, 0x00, 0x00,
06910 17A9                        10            .byte	$10
06911 17AA                        00            .byte	0
06912 17AB                        00            .byte	0
06913 17AC                        00            .byte	0
06914 17AD                        00            .byte	0
06915                                           ! 1152  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06916 17AE                        00            .byte	0
06917 17AF                        00            .byte	0
06918 17B0                        18            .byte	$18
06919 17B1                        3C            .byte	$3C
06920 17B2                        3C            .byte	$3C
06921 17B3                        E7            .byte	$E7
06922 17B4                        E7            .byte	$E7
06923 17B5                        E7            .byte	$E7
06924 17B6                        18            .byte	$18
06925 17B7                        18            .byte	$18
06926 17B8                        3C            .byte	$3C
06927 17B9                        00            .byte	0
06928 17BA                        00            .byte	0
06929 17BB                        00            .byte	0
06930                                           ! 1153  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06931 17BC                        00            .byte	0
06932 17BD                        00            .byte	0
06933 17BE                        18            .byte	$18
06934 17BF                        3C            .byte	$3C
06935 17C0                        7E            .byte	$7E
06936 17C1                        FF            .byte	$FF
06937 17C2                        FF            .byte	$FF
06938 17C3                        7E            .byte	$7E
06939 17C4                        18            .byte	$18
06940 17C5                        18            .byte	$18
06941 17C6                        3C            .byte	$3C
06942 17C7                        00            .byte	0
06943 17C8                        00            .byte	0
06944 17C9                        00            .byte	0
06945                                           ! 1154  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06946 17CA                        00            .byte	0
06947 17CB                        00            .byte	0
06948 17CC                        00            .byte	0
06949 17CD                        00            .byte	0
06950 17CE                        00            .byte	0
06951 17CF                        18            .byte	$18
06952 17D0                        3C            .byte	$3C
06953 17D1                        3C            .byte	$3C
06954 17D2                        18            .byte	$18
06955 17D3                        00            .byte	0
06956 17D4                        00            .byte	0
06957 17D5                        00            .byte	0
06958 17D6                        00            .byte	0
06959 17D7                        00            .byte	0
06960                                           ! 1155  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06961 17D8                        FF            .byte	$FF
06962 17D9                        FF            .byte	$FF
06963 17DA                        FF            .byte	$FF
06964 17DB                        FF            .byte	$FF
06965 17DC                        FF            .byte	$FF
06966 17DD                        E7            .byte	$E7
06967 17DE                        C3            .byte	$C3
06968 17DF                        C3            .byte	$C3
06969 17E0                        E7            .byte	$E7
06970 17E1                        FF            .byte	$FF
06971 17E2                        FF            .byte	$FF
06972 17E3                        FF            .byte	$FF
06973 17E4                        FF            .byte	$FF
06974 17E5                        FF            .byte	$FF
06975                                           ! 1156  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06976 17E6                        00            .byte	0
06977 17E7                        00            .byte	0
06978 17E8                        00            .byte	0
06979 17E9                        00            .byte	0
06980 17EA                        3C            .byte	$3C
06981 17EB                        66            .byte	$66
06982 17EC                        42            .byte	$42
06983 17ED                        42            .byte	$42
06984 17EE                        66            .byte	$66
06985 17EF                        3C            .byte	$3C
06986 17F0                        00            .byte	0
06987 17F1                        00            .byte	0
06988 17F2                        00            .byte	0
06989 17F3                        00            .byte	0
06990                                           ! 1157  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06991 17F4                        FF            .byte	$FF
06992 17F5                        FF            .byte	$FF
06993 17F6                        FF            .byte	$FF
06994 17F7                        FF            .byte	$FF
06995 17F8                        C3            .byte	$C3
06996 17F9                        99            .byte	$99
06997 17FA                        BD            .byte	$BD
06998 17FB                        BD            .byte	$BD
06999 17FC                        99            .byte	$99
07000 17FD                        C3            .byte	$C3
07001 17FE                        FF            .byte	$FF
07002 17FF                        FF            .byte	$FF
07003 1800                        FF            .byte	$FF
07004 1801                        FF            .byte	$FF
07005                                           ! 1158  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07006 1802                        00            .byte	0
07007 1803                        00            .byte	0
07008 1804                        1E            .byte	$1E
07009 1805                        0E            .byte	$E
07010 1806                        1A            .byte	$1A
07011 1807                        32            .byte	$32
07012 1808                        78            .byte	$78
07013 1809                        CC            .byte	$CC
07014 180A                        CC            .byte	$CC
07015 180B                        CC            .byte	$CC
07016 180C                        78            .byte	$78
07017 180D                        00            .byte	0
07018 180E                        00            .byte	0
07019 180F                        00            .byte	0
07020                                           ! 1159  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07021 1810                        00            .byte	0
07022 1811                        00            .byte	0
07023 1812                        3C            .byte	$3C
07024 1813                        66            .byte	$66
07025 1814                        66            .byte	$66
07026 1815                        66            .byte	$66
07027 1816                        3C            .byte	$3C
07028 1817                        18            .byte	$18
07029 1818                        7E            .byte	$7E
07030 1819                        18            .byte	$18
07031 181A                        18            .byte	$18
07032 181B                        00            .byte	0
07033 181C                        00            .byte	0
07034 181D                        00            .byte	0
07035                                           ! 1160  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07036 181E                        00            .byte	0
07037 181F                        00            .byte	0
07038 1820                        3F            .byte	$3F
07039 1821                        33            .byte	$33
07040 1822                        3F            .byte	$3F
07041 1823                        30            .byte	$30
07042 1824                        30            .byte	$30
07043 1825                        30            .byte	$30
07044 1826                        70            .byte	$70
07045 1827                        F0            .byte	$F0
07046 1828                        E0            .byte	$E0
07047 1829                        00            .byte	0
07048 182A                        00            .byte	0
07049 182B                        00            .byte	0
07050                                           ! 1161  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07051 182C                        00            .byte	0
07052 182D                        00            .byte	0
07053 182E                        7F            .byte	$7F
07054 182F                        63            .byte	$63
07055 1830                        7F            .byte	$7F
07056 1831                        63            .byte	$63
07057 1832                        63            .byte	$63
07058 1833                        63            .byte	$63
07059 1834                        67            .byte	$67
07060 1835                        E7            .byte	$E7
07061 1836                        E6            .byte	$E6
07062 1837                        C0            .byte	$C0
07063 1838                        00            .byte	0
07064 1839                        00            .byte	0
07065                                           ! 1162  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07066 183A                        00            .byte	0
07067 183B                        00            .byte	0
07068 183C                        18            .byte	$18
07069 183D                        18            .byte	$18
07070 183E                        DB            .byte	$DB
07071 183F                        3C            .byte	$3C
07072 1840                        E7            .byte	$E7
07073 1841                        3C            .byte	$3C
07074 1842                        DB            .byte	$DB
07075 1843                        18            .byte	$18
07076 1844                        18            .byte	$18
07077 1845                        00            .byte	0
07078 1846                        00            .byte	0
07079 1847                        00            .byte	0
07080                                           ! 1163  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07081 1848                        00            .byte	0
07082 1849                        00            .byte	0
07083 184A                        80            .byte	$80
07084 184B                        C0            .byte	$C0
07085 184C                        E0            .byte	$E0
07086 184D                        F8            .byte	$F8
07087 184E                        FE            .byte	$FE
07088 184F                        F8            .byte	$F8
07089 1850                        E0            .byte	$E0
07090 1851                        C0            .byte	$C0
07091 1852                        80            .byte	$80
07092 1853                        00            .byte	0
07093 1854                        00            .byte	0
07094 1855                        00            .byte	0
07095                                           ! 1164  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07096 1856                        00            .byte	0
07097 1857                        00            .byte	0
07098 1858                        02            .byte	2
07099 1859                        06            .byte	6
07100 185A                        0E            .byte	$E
07101 185B                        3E            .byte	$3E
07102 185C                        FE            .byte	$FE
07103 185D                        3E            .byte	$3E
07104 185E                        0E            .byte	$E
07105 185F                        06            .byte	6
07106 1860                        02            .byte	2
07107 1861                        00            .byte	0
07108 1862                        00            .byte	0
07109 1863                        00            .byte	0
07110                                           ! 1165  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07111 1864                        00            .byte	0
07112 1865                        00            .byte	0
07113 1866                        18            .byte	$18
07114 1867                        3C            .byte	$3C
07115 1868                        7E            .byte	$7E
07116 1869                        18            .byte	$18
07117 186A                        18            .byte	$18
07118 186B                        18            .byte	$18
07119 186C                        7E            .byte	$7E
07120 186D                        3C            .byte	$3C
07121 186E                        18            .byte	$18
07122 186F                        00            .byte	0
07123 1870                        00            .byte	0
07124 1871                        00            .byte	0
07125                                           ! 1166  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07126 1872                        00            .byte	0
07127 1873                        00            .byte	0
07128 1874                        66            .byte	$66
07129 1875                        66            .byte	$66
07130 1876                        66            .byte	$66
07131 1877                        66            .byte	$66
07132 1878                        66            .byte	$66
07133 1879                        66            .byte	$66
07134 187A                        00            .byte	0
07135 187B                        66            .byte	$66
07136 187C                        66            .byte	$66
07137 187D                        00            .byte	0
07138 187E                        00            .byte	0
07139 187F                        00            .byte	0
07140                                           ! 1167  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07141 1880                        00            .byte	0
07142 1881                        00            .byte	0
07143 1882                        7F            .byte	$7F
07144 1883                        DB            .byte	$DB
07145 1884                        DB            .byte	$DB
07146 1885                        DB            .byte	$DB
07147 1886                        7B            .byte	$7B
07148 1887                        1B            .byte	$1B
07149 1888                        1B            .byte	$1B
07150 1889                        1B            .byte	$1B
07151 188A                        1B            .byte	$1B
07152 188B                        00            .byte	0
07153 188C                        00            .byte	0
07154 188D                        00            .byte	0
07155                                           ! 1168  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07156 188E                        00            .byte	0
07157 188F                        7C            .byte	$7C
07158 1890                        C6            .byte	$C6
07159 1891                        60            .byte	$60
07160 1892                        38            .byte	$38
07161 1893                        6C            .byte	$6C
07162 1894                        C6            .byte	$C6
07163 1895                        C6            .byte	$C6
07164 1896                        6C            .byte	$6C
07165 1897                        38            .byte	$38
07166 1898                        0C            .byte	$C
07167 1899                        C6            .byte	$C6
07168 189A                        7C            .byte	$7C
07169 189B                        00            .byte	0
07170                                           ! 1169  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07171 189C                        00            .byte	0
07172 189D                        00            .byte	0
07173 189E                        00            .byte	0
07174 189F                        00            .byte	0
07175 18A0                        00            .byte	0
07176 18A1                        00            .byte	0
07177 18A2                        00            .byte	0
07178 18A3                        00            .byte	0
07179 18A4                        FE            .byte	$FE
07180 18A5                        FE            .byte	$FE
07181 18A6                        FE            .byte	$FE
07182 18A7                        00            .byte	0
07183 18A8                        00            .byte	0
07184 18A9                        00            .byte	0
07185                                           ! 1170  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07186 18AA                        00            .byte	0
07187 18AB                        00            .byte	0
07188 18AC                        18            .byte	$18
07189 18AD                        3C            .byte	$3C
07190 18AE                        7E            .byte	$7E
07191 18AF                        18            .byte	$18
07192 18B0                        18            .byte	$18
07193 18B1                        18            .byte	$18
07194 18B2                        7E            .byte	$7E
07195 18B3                        3C            .byte	$3C
07196 18B4                        18            .byte	$18
07197 18B5                        7E            .byte	$7E
07198 18B6                        00            .byte	0
07199 18B7                        00            .byte	0
07200                                           ! 1171  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07201 18B8                        00            .byte	0
07202 18B9                        00            .byte	0
07203 18BA                        18            .byte	$18
07204 18BB                        3C            .byte	$3C
07205 18BC                        7E            .byte	$7E
07206 18BD                        18            .byte	$18
07207 18BE                        18            .byte	$18
07208 18BF                        18            .byte	$18
07209 18C0                        18            .byte	$18
07210 18C1                        18            .byte	$18
07211 18C2                        18            .byte	$18
07212 18C3                        00            .byte	0
07213 18C4                        00            .byte	0
07214 18C5                        00            .byte	0
07215                                           ! 1172  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07216 18C6                        00            .byte	0
07217 18C7                        00            .byte	0
07218 18C8                        18            .byte	$18
07219 18C9                        18            .byte	$18
07220 18CA                        18            .byte	$18
07221 18CB                        18            .byte	$18
07222 18CC                        18            .byte	$18
07223 18CD                        18            .byte	$18
07224 18CE                        7E            .byte	$7E
07225 18CF                        3C            .byte	$3C
07226 18D0                        18            .byte	$18
07227 18D1                        00            .byte	0
07228 18D2                        00            .byte	0
07229 18D3                        00            .byte	0
07230                                           ! 1173  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07231 18D4                        00            .byte	0
07232 18D5                        00            .byte	0
07233 18D6                        00            .byte	0
07234 18D7                        00            .byte	0
07235 18D8                        18            .byte	$18
07236 18D9                        0C            .byte	$C
07237 18DA                        FE            .byte	$FE
07238 18DB                        0C            .byte	$C
07239 18DC                        18            .byte	$18
07240 18DD                        00            .byte	0
07241 18DE                        00            .byte	0
07242 18DF                        00            .byte	0
07243 18E0                        00            .byte	0
07244 18E1                        00            .byte	0
07245                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07246 18E2                        00            .byte	0
07247 18E3                        00            .byte	0
07248 18E4                        00            .byte	0
07249 18E5                        00            .byte	0
07250 18E6                        30            .byte	$30
07251 18E7                        60            .byte	$60
07252 18E8                        FE            .byte	$FE
07253 18E9                        60            .byte	$60
07254 18EA                        30            .byte	$30
07255 18EB                        00            .byte	0
07256 18EC                        00            .byte	0
07257 18ED                        00            .byte	0
07258 18EE                        00            .byte	0
07259 18EF                        00            .byte	0
07260                                           ! 1175  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x0
07261 18F0                        00            .byte	0
07262 18F1                        00            .byte	0
07263 18F2                        00            .byte	0
07264 18F3                        00            .byte	0
07265 18F4                        00            .byte	0
07266 18F5                        C0            .byte	$C0
07267 18F6                        C0            .byte	$C0
07268 18F7                        C0            .byte	$C0
07269 18F8                        FE            .byte	$FE
07270 18F9                        00            .byte	0
07271                                           ! 1175 0, 0x00, 0x00, 0x00,
07272 18FA                        00            .byte	0
07273 18FB                        00            .byte	0
07274 18FC                        00            .byte	0
07275 18FD                        00            .byte	0
07276                                           ! 1176  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07277 18FE                        00            .byte	0
07278 18FF                        00            .byte	0
07279 1900                        00            .byte	0
07280 1901                        00            .byte	0
07281 1902                        28            .byte	$28
07282 1903                        6C            .byte	$6C
07283 1904                        FE            .byte	$FE
07284 1905                        6C            .byte	$6C
07285 1906                        28            .byte	$28
07286 1907                        00            .byte	0
07287 1908                        00            .byte	0
07288 1909                        00            .byte	0
07289 190A                        00            .byte	0
07290 190B                        00            .byte	0
07291                                           ! 1177  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07292 190C                        00            .byte	0
07293 190D                        00            .byte	0
07294 190E                        00            .byte	0
07295 190F                        10            .byte	$10
07296 1910                        38            .byte	$38
07297 1911                        38            .byte	$38
07298 1912                        7C            .byte	$7C
07299 1913                        7C            .byte	$7C
07300 1914                        FE            .byte	$FE
07301 1915                        FE            .byte	$FE
07302 1916                        00            .byte	0
07303 1917                        00            .byte	0
07304 1918                        00            .byte	0
07305 1919                        00            .byte	0
07306                                           ! 1178  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07307 191A                        00            .byte	0
07308 191B                        00            .byte	0
07309 191C                        00            .byte	0
07310 191D                        FE            .byte	$FE
07311 191E                        FE            .byte	$FE
07312 191F                        7C            .byte	$7C
07313 1920                        7C            .byte	$7C
07314 1921                        38            .byte	$38
07315 1922                        38            .byte	$38
07316 1923                        10            .byte	$10
07317 1924                        00            .byte	0
07318 1925                        00            .byte	0
07319 1926                        00            .byte	0
07320 1927                        00            .byte	0
07321                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07322 1928                        00            .byte	0
07323 1929                        00            .byte	0
07324 192A                        00            .byte	0
07325 192B                        00            .byte	0
07326 192C                        00            .byte	0
07327 192D                        00            .byte	0
07328 192E                        00            .byte	0
07329 192F                        00            .byte	0
07330 1930                        00            .byte	0
07331 1931                        00            .byte	0
07332 1932                        00            .byte	0
07333 1933                        00            .byte	0
07334 1934                        00            .byte	0
07335 1935                        00            .byte	0
07336                                           ! 1180  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07337 1936                        00            .byte	0
07338 1937                        00            .byte	0
07339 1938                        18            .byte	$18
07340 1939                        3C            .byte	$3C
07341 193A                        3C            .byte	$3C
07342 193B                        3C            .byte	$3C
07343 193C                        18            .byte	$18
07344 193D                        18            .byte	$18
07345 193E                        00            .byte	0
07346 193F                        18            .byte	$18
07347 1940                        18            .byte	$18
07348 1941                        00            .byte	0
07349 1942                        00            .byte	0
07350 1943                        00            .byte	0
07351                                           ! 1181  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07352 1944                        00            .byte	0
07353 1945                        66            .byte	$66
07354 1946                        66            .byte	$66
07355 1947                        66            .byte	$66
07356 1948                        24            .byte	$24
07357 1949                        00            .byte	0
07358 194A                        00            .byte	0
07359 194B                        00            .byte	0
07360 194C                        00            .byte	0
07361 194D                        00            .byte	0
07362 194E                        00            .byte	0
07363 194F                        00            .byte	0
07364 1950                        00            .byte	0
07365 1951                        00            .byte	0
07366                                           ! 1182  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07367 1952                        00            .byte	0
07368 1953                        00            .byte	0
07369 1954                        6C            .byte	$6C
07370 1955                        6C            .byte	$6C
07371 1956                        FE            .byte	$FE
07372 1957                        6C            .byte	$6C
07373 1958                        6C            .byte	$6C
07374 1959                        6C            .byte	$6C
07375 195A                        FE            .byte	$FE
07376 195B                        6C            .byte	$6C
07377 195C                        6C            .byte	$6C
07378 195D                        00            .byte	0
07379 195E                        00            .byte	0
07380 195F                        00            .byte	0
07381                                           ! 1183  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07382 1960                        18            .byte	$18
07383 1961                        18            .byte	$18
07384 1962                        7C            .byte	$7C
07385 1963                        C6            .byte	$C6
07386 1964                        C2            .byte	$C2
07387 1965                        C0            .byte	$C0
07388 1966                        7C            .byte	$7C
07389 1967                        06            .byte	6
07390 1968                        86            .byte	$86
07391 1969                        C6            .byte	$C6
07392 196A                        7C            .byte	$7C
07393 196B                        18            .byte	$18
07394 196C                        18            .byte	$18
07395 196D                        00            .byte	0
07396                                           ! 1184  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07397 196E                        00            .byte	0
07398 196F                        00            .byte	0
07399 1970                        00            .byte	0
07400 1971                        00            .byte	0
07401 1972                        C2            .byte	$C2
07402 1973                        C6            .byte	$C6
07403 1974                        0C            .byte	$C
07404 1975                        18            .byte	$18
07405 1976                        30            .byte	$30
07406 1977                        66            .byte	$66
07407 1978                        C6            .byte	$C6
07408 1979                        00            .byte	0
07409 197A                        00            .byte	0
07410 197B                        00            .byte	0
07411                                           ! 1185  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07412 197C                        00            .byte	0
07413 197D                        00            .byte	0
07414 197E                        38            .byte	$38
07415 197F                        6C            .byte	$6C
07416 1980                        6C            .byte	$6C
07417 1981                        38            .byte	$38
07418 1982                        76            .byte	$76
07419 1983                        DC            .byte	$DC
07420 1984                        CC            .byte	$CC
07421 1985                        CC            .byte	$CC
07422 1986                        76            .byte	$76
07423 1987                        00            .byte	0
07424 1988                        00            .byte	0
07425 1989                        00            .byte	0
07426                                           ! 1186  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07427 198A                        00            .byte	0
07428 198B                        30            .byte	$30
07429 198C                        30            .byte	$30
07430 198D                        30            .byte	$30
07431 198E                        60            .byte	$60
07432 198F                        00            .byte	0
07433 1990                        00            .byte	0
07434 1991                        00            .byte	0
07435 1992                        00            .byte	0
07436 1993                        00            .byte	0
07437 1994                        00            .byte	0
07438 1995                        00            .byte	0
07439 1996                        00            .byte	0
07440 1997                        00            .byte	0
07441                                           ! 1187  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07442 1998                        00            .byte	0
07443 1999                        00            .byte	0
07444 199A                        0C            .byte	$C
07445 199B                        18            .byte	$18
07446 199C                        30            .byte	$30
07447 199D                        30            .byte	$30
07448 199E                        30            .byte	$30
07449 199F                        30            .byte	$30
07450 19A0                        30            .byte	$30
07451 19A1                        18            .byte	$18
07452 19A2                        0C            .byte	$C
07453 19A3                        00            .byte	0
07454 19A4                        00            .byte	0
07455 19A5                        00            .byte	0
07456                                           ! 1188  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07457 19A6                        00            .byte	0
07458 19A7                        00            .byte	0
07459 19A8                        30            .byte	$30
07460 19A9                        18            .byte	$18
07461 19AA                        0C            .byte	$C
07462 19AB                        0C            .byte	$C
07463 19AC                        0C            .byte	$C
07464 19AD                        0C            .byte	$C
07465 19AE                        0C            .byte	$C
07466 19AF                        18            .byte	$18
07467 19B0                        30            .byte	$30
07468 19B1                        00            .byte	0
07469 19B2                        00            .byte	0
07470 19B3                        00            .byte	0
07471                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07472 19B4                        00            .byte	0
07473 19B5                        00            .byte	0
07474 19B6                        00            .byte	0
07475 19B7                        00            .byte	0
07476 19B8                        66            .byte	$66
07477 19B9                        3C            .byte	$3C
07478 19BA                        FF            .byte	$FF
07479 19BB                        3C            .byte	$3C
07480 19BC                        66            .byte	$66
07481 19BD                        00            .byte	0
07482 19BE                        00            .byte	0
07483 19BF                        00            .byte	0
07484 19C0                        00            .byte	0
07485 19C1                        00            .byte	0
07486                                           ! 1190  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07487 19C2                        00            .byte	0
07488 19C3                        00            .byte	0
07489 19C4                        00            .byte	0
07490 19C5                        00            .byte	0
07491 19C6                        18            .byte	$18
07492 19C7                        18            .byte	$18
07493 19C8                        7E            .byte	$7E
07494 19C9                        18            .byte	$18
07495 19CA                        18            .byte	$18
07496 19CB                        00            .byte	0
07497 19CC                        00            .byte	0
07498 19CD                        00            .byte	0
07499 19CE                        00            .byte	0
07500 19CF                        00            .byte	0
07501                                           ! 1191  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07502 19D0                        00            .byte	0
07503 19D1                        00            .byte	0
07504 19D2                        00            .byte	0
07505 19D3                        00            .byte	0
07506 19D4                        00            .byte	0
07507 19D5                        00            .byte	0
07508 19D6                        00            .byte	0
07509 19D7                        00            .byte	0
07510 19D8                        18            .byte	$18
07511 19D9                        18            .byte	$18
07512 19DA                        18            .byte	$18
07513 19DB                        30            .byte	$30
07514 19DC                        00            .byte	0
07515 19DD                        00            .byte	0
07516                                           ! 1192  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07517 19DE                        00            .byte	0
07518 19DF                        00            .byte	0
07519 19E0                        00            .byte	0
07520 19E1                        00            .byte	0
07521 19E2                        00            .byte	0
07522 19E3                        00            .byte	0
07523 19E4                        FE            .byte	$FE
07524 19E5                        00            .byte	0
07525 19E6                        00            .byte	0
07526 19E7                        00            .byte	0
07527 19E8                        00            .byte	0
07528 19E9                        00            .byte	0
07529 19EA                        00            .byte	0
07530 19EB                        00            .byte	0
07531                                           ! 1193  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07532 19EC                        00            .byte	0
07533 19ED                        00            .byte	0
07534 19EE                        00            .byte	0
07535 19EF                        00            .byte	0
07536 19F0                        00            .byte	0
07537 19F1                        00            .byte	0
07538 19F2                        00            .byte	0
07539 19F3                        00            .byte	0
07540 19F4                        00            .byte	0
07541 19F5                        18            .byte	$18
07542 19F6                        18            .byte	$18
07543 19F7                        00            .byte	0
07544 19F8                        00            .byte	0
07545 19F9                        00            .byte	0
07546                                           ! 1194  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07547 19FA                        00            .byte	0
07548 19FB                        00            .byte	0
07549 19FC                        02            .byte	2
07550 19FD                        06            .byte	6
07551 19FE                        0C            .byte	$C
07552 19FF                        18            .byte	$18
07553 1A00                        30            .byte	$30
07554 1A01                        60            .byte	$60
07555 1A02                        C0            .byte	$C0
07556 1A03                        80            .byte	$80
07557 1A04                        00            .byte	0
07558 1A05                        00            .byte	0
07559 1A06                        00            .byte	0
07560 1A07                        00            .byte	0
07561                                           ! 1195  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07562 1A08                        00            .byte	0
07563 1A09                        00            .byte	0
07564 1A0A                        7C            .byte	$7C
07565 1A0B                        C6            .byte	$C6
07566 1A0C                        CE            .byte	$CE
07567 1A0D                        DE            .byte	$DE
07568 1A0E                        F6            .byte	$F6
07569 1A0F                        E6            .byte	$E6
07570 1A10                        C6            .byte	$C6
07571 1A11                        C6            .byte	$C6
07572 1A12                        7C            .byte	$7C
07573 1A13                        00            .byte	0
07574 1A14                        00            .byte	0
07575 1A15                        00            .byte	0
07576                                           ! 1196  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07577 1A16                        00            .byte	0
07578 1A17                        00            .byte	0
07579 1A18                        18            .byte	$18
07580 1A19                        38            .byte	$38
07581 1A1A                        78            .byte	$78
07582 1A1B                        18            .byte	$18
07583 1A1C                        18            .byte	$18
07584 1A1D                        18            .byte	$18
07585 1A1E                        18            .byte	$18
07586 1A1F                        18            .byte	$18
07587 1A20                        7E            .byte	$7E
07588 1A21                        00            .byte	0
07589 1A22                        00            .byte	0
07590 1A23                        00            .byte	0
07591                                           ! 1197  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07592 1A24                        00            .byte	0
07593 1A25                        00            .byte	0
07594 1A26                        7C            .byte	$7C
07595 1A27                        C6            .byte	$C6
07596 1A28                        06            .byte	6
07597 1A29                        0C            .byte	$C
07598 1A2A                        18            .byte	$18
07599 1A2B                        30            .byte	$30
07600 1A2C                        60            .byte	$60
07601 1A2D                        C6            .byte	$C6
07602 1A2E                        FE            .byte	$FE
07603 1A2F                        00            .byte	0
07604 1A30                        00            .byte	0
07605 1A31                        00            .byte	0
07606                                           ! 1198  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07607 1A32                        00            .byte	0
07608 1A33                        00            .byte	0
07609 1A34                        7C            .byte	$7C
07610 1A35                        C6            .byte	$C6
07611 1A36                        06            .byte	6
07612 1A37                        06            .byte	6
07613 1A38                        3C            .byte	$3C
07614 1A39                        06            .byte	6
07615 1A3A                        06            .byte	6
07616 1A3B                        C6            .byte	$C6
07617 1A3C                        7C            .byte	$7C
07618 1A3D                        00            .byte	0
07619 1A3E                        00            .byte	0
07620 1A3F                        00            .byte	0
07621                                           ! 1199  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
07622 1A40                        00            .byte	0
07623 1A41                        00            .byte	0
07624 1A42                        0C            .byte	$C
07625 1A43                        1C            .byte	$1C
07626 1A44                        3C            .byte	$3C
07627 1A45                        6C            .byte	$6C
07628 1A46                        CC            .byte	$CC
07629 1A47                        FE            .byte	$FE
07630 1A48                        0C            .byte	$C
07631 1A49                        0C            .byte	$C
07632 1A4A                        1E            .byte	$1E
07633                                           ! 1199  0x00, 0x00,
07634 1A4B                        00            .byte	0
07635 1A4C                        00            .byte	0
07636 1A4D                        00            .byte	0
07637                                           ! 1200  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07638 1A4E                        00            .byte	0
07639 1A4F                        00            .byte	0
07640 1A50                        FE            .byte	$FE
07641 1A51                        C0            .byte	$C0
07642 1A52                        C0            .byte	$C0
07643 1A53                        C0            .byte	$C0
07644 1A54                        FC            .byte	$FC
07645 1A55                        06            .byte	6
07646 1A56                        06            .byte	6
07647 1A57                        C6            .byte	$C6
07648 1A58                        7C            .byte	$7C
07649 1A59                        00            .byte	0
07650 1A5A                        00            .byte	0
07651 1A5B                        00            .byte	0
07652                                           ! 1201  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07653 1A5C                        00            .byte	0
07654 1A5D                        00            .byte	0
07655 1A5E                        38            .byte	$38
07656 1A5F                        60            .byte	$60
07657 1A60                        C0            .byte	$C0
07658 1A61                        C0            .byte	$C0
07659 1A62                        FC            .byte	$FC
07660 1A63                        C6            .byte	$C6
07661 1A64                        C6            .byte	$C6
07662 1A65                        C6            .byte	$C6
07663 1A66                        7C            .byte	$7C
07664 1A67                        00            .byte	0
07665 1A68                        00            .byte	0
07666 1A69                        00            .byte	0
07667                                           ! 1202  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07668 1A6A                        00            .byte	0
07669 1A6B                        00            .byte	0
07670 1A6C                        FE            .byte	$FE
07671 1A6D                        C6            .byte	$C6
07672 1A6E                        06            .byte	6
07673 1A6F                        0C            .byte	$C
07674 1A70                        18            .byte	$18
07675 1A71                        30            .byte	$30
07676 1A72                        30            .byte	$30
07677 1A73                        30            .byte	$30
07678 1A74                        30            .byte	$30
07679 1A75                        00            .byte	0
07680 1A76                        00            .byte	0
07681 1A77                        00            .byte	0
07682                                           ! 1203  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07683 1A78                        00            .byte	0
07684 1A79                        00            .byte	0
07685 1A7A                        7C            .byte	$7C
07686 1A7B                        C6            .byte	$C6
07687 1A7C                        C6            .byte	$C6
07688 1A7D                        C6            .byte	$C6
07689 1A7E                        7C            .byte	$7C
07690 1A7F                        C6            .byte	$C6
07691 1A80                        C6            .byte	$C6
07692 1A81                        C6            .byte	$C6
07693 1A82                        7C            .byte	$7C
07694 1A83                        00            .byte	0
07695 1A84                        00            .byte	0
07696 1A85                        00            .byte	0
07697                                           ! 1204  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07698 1A86                        00            .byte	0
07699 1A87                        00            .byte	0
07700 1A88                        7C            .byte	$7C
07701 1A89                        C6            .byte	$C6
07702 1A8A                        C6            .byte	$C6
07703 1A8B                        C6            .byte	$C6
07704 1A8C                        7E            .byte	$7E
07705 1A8D                        06            .byte	6
07706 1A8E                        06            .byte	6
07707 1A8F                        0C            .byte	$C
07708 1A90                        78            .byte	$78
07709 1A91                        00            .byte	0
07710 1A92                        00            .byte	0
07711 1A93                        00            .byte	0
07712                                           ! 1205  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07713 1A94                        00            .byte	0
07714 1A95                        00            .byte	0
07715 1A96                        00            .byte	0
07716 1A97                        18            .byte	$18
07717 1A98                        18            .byte	$18
07718 1A99                        00            .byte	0
07719 1A9A                        00            .byte	0
07720 1A9B                        00            .byte	0
07721 1A9C                        18            .byte	$18
07722 1A9D                        18            .byte	$18
07723 1A9E                        00            .byte	0
07724 1A9F                        00            .byte	0
07725 1AA0                        00            .byte	0
07726 1AA1                        00            .byte	0
07727                                           ! 1206  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07728 1AA2                        00            .byte	0
07729 1AA3                        00            .byte	0
07730 1AA4                        00            .byte	0
07731 1AA5                        18            .byte	$18
07732 1AA6                        18            .byte	$18
07733 1AA7                        00            .byte	0
07734 1AA8                        00            .byte	0
07735 1AA9                        00            .byte	0
07736 1AAA                        18            .byte	$18
07737 1AAB                        18            .byte	$18
07738 1AAC                        30            .byte	$30
07739 1AAD                        00            .byte	0
07740 1AAE                        00            .byte	0
07741 1AAF                        00            .byte	0
07742                                           ! 1207  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07743 1AB0                        00            .byte	0
07744 1AB1                        00            .byte	0
07745 1AB2                        06            .byte	6
07746 1AB3                        0C            .byte	$C
07747 1AB4                        18            .byte	$18
07748 1AB5                        30            .byte	$30
07749 1AB6                        60            .byte	$60
07750 1AB7                        30            .byte	$30
07751 1AB8                        18            .byte	$18
07752 1AB9                        0C            .byte	$C
07753 1ABA                        06            .byte	6
07754 1ABB                        00            .byte	0
07755 1ABC                        00            .byte	0
07756 1ABD                        00            .byte	0
07757                                           ! 1208  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07758 1ABE                        00            .byte	0
07759 1ABF                        00            .byte	0
07760 1AC0                        00            .byte	0
07761 1AC1                        00            .byte	0
07762 1AC2                        00            .byte	0
07763 1AC3                        7E            .byte	$7E
07764 1AC4                        00            .byte	0
07765 1AC5                        00            .byte	0
07766 1AC6                        7E            .byte	$7E
07767 1AC7                        00            .byte	0
07768 1AC8                        00            .byte	0
07769 1AC9                        00            .byte	0
07770 1ACA                        00            .byte	0
07771 1ACB                        00            .byte	0
07772                                           ! 1209  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07773 1ACC                        00            .byte	0
07774 1ACD                        00            .byte	0
07775 1ACE                        60            .byte	$60
07776 1ACF                        30            .byte	$30
07777 1AD0                        18            .byte	$18
07778 1AD1                        0C            .byte	$C
07779 1AD2                        06            .byte	6
07780 1AD3                        0C            .byte	$C
07781 1AD4                        18            .byte	$18
07782 1AD5                        30            .byte	$30
07783 1AD6                        60            .byte	$60
07784 1AD7                        00            .byte	0
07785 1AD8                        00            .byte	0
07786 1AD9                        00            .byte	0
07787                                           ! 1210  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07788 1ADA                        00            .byte	0
07789 1ADB                        00            .byte	0
07790 1ADC                        7C            .byte	$7C
07791 1ADD                        C6            .byte	$C6
07792 1ADE                        C6            .byte	$C6
07793 1ADF                        0C            .byte	$C
07794 1AE0                        18            .byte	$18
07795 1AE1                        18            .byte	$18
07796 1AE2                        00            .byte	0
07797 1AE3                        18            .byte	$18
07798 1AE4                        18            .byte	$18
07799 1AE5                        00            .byte	0
07800 1AE6                        00            .byte	0
07801 1AE7                        00            .byte	0
07802                                           ! 1211  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07803 1AE8                        00            .byte	0
07804 1AE9                        00            .byte	0
07805 1AEA                        7C            .byte	$7C
07806 1AEB                        C6            .byte	$C6
07807 1AEC                        C6            .byte	$C6
07808 1AED                        DE            .byte	$DE
07809 1AEE                        DE            .byte	$DE
07810 1AEF                        DE            .byte	$DE
07811 1AF0                        DC            .byte	$DC
07812 1AF1                        C0            .byte	$C0
07813 1AF2                        7C            .byte	$7C
07814 1AF3                        00            .byte	0
07815 1AF4                        00            .byte	0
07816 1AF5                        00            .byte	0
07817                                           ! 1212  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07818 1AF6                        00            .byte	0
07819 1AF7                        00            .byte	0
07820 1AF8                        10            .byte	$10
07821 1AF9                        38            .byte	$38
07822 1AFA                        6C            .byte	$6C
07823 1AFB                        C6            .byte	$C6
07824 1AFC                        C6            .byte	$C6
07825 1AFD                        FE            .byte	$FE
07826 1AFE                        C6            .byte	$C6
07827 1AFF                        C6            .byte	$C6
07828 1B00                        C6            .byte	$C6
07829 1B01                        00            .byte	0
07830 1B02                        00            .byte	0
07831 1B03                        00            .byte	0
07832                                           ! 1213  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07833 1B04                        00            .byte	0
07834 1B05                        00            .byte	0
07835 1B06                        FC            .byte	$FC
07836 1B07                        66            .byte	$66
07837 1B08                        66            .byte	$66
07838 1B09                        66            .byte	$66
07839 1B0A                        7C            .byte	$7C
07840 1B0B                        66            .byte	$66
07841 1B0C                        66            .byte	$66
07842 1B0D                        66            .byte	$66
07843 1B0E                        FC            .byte	$FC
07844 1B0F                        00            .byte	0
07845 1B10                        00            .byte	0
07846 1B11                        00            .byte	0
07847                                           ! 1214  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07848 1B12                        00            .byte	0
07849 1B13                        00            .byte	0
07850 1B14                        3C            .byte	$3C
07851 1B15                        66            .byte	$66
07852 1B16                        C2            .byte	$C2
07853 1B17                        C0            .byte	$C0
07854 1B18                        C0            .byte	$C0
07855 1B19                        C0            .byte	$C0
07856 1B1A                        C2            .byte	$C2
07857 1B1B                        66            .byte	$66
07858 1B1C                        3C            .byte	$3C
07859 1B1D                        00            .byte	0
07860 1B1E                        00            .byte	0
07861 1B1F                        00            .byte	0
07862                                           ! 1215  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07863 1B20                        00            .byte	0
07864 1B21                        00            .byte	0
07865 1B22                        F8            .byte	$F8
07866 1B23                        6C            .byte	$6C
07867 1B24                        66            .byte	$66
07868 1B25                        66            .byte	$66
07869 1B26                        66            .byte	$66
07870 1B27                        66            .byte	$66
07871 1B28                        66            .byte	$66
07872 1B29                        6C            .byte	$6C
07873 1B2A                        F8            .byte	$F8
07874 1B2B                        00            .byte	0
07875 1B2C                        00            .byte	0
07876 1B2D                        00            .byte	0
07877                                           ! 1216  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07878 1B2E                        00            .byte	0
07879 1B2F                        00            .byte	0
07880 1B30                        FE            .byte	$FE
07881 1B31                        66            .byte	$66
07882 1B32                        62            .byte	$62
07883 1B33                        68            .byte	$68
07884 1B34                        78            .byte	$78
07885 1B35                        68            .byte	$68
07886 1B36                        62            .byte	$62
07887 1B37                        66            .byte	$66
07888 1B38                        FE            .byte	$FE
07889 1B39                        00            .byte	0
07890 1B3A                        00            .byte	0
07891 1B3B                        00            .byte	0
07892                                           ! 1217  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07893 1B3C                        00            .byte	0
07894 1B3D                        00            .byte	0
07895 1B3E                        FE            .byte	$FE
07896 1B3F                        66            .byte	$66
07897 1B40                        62            .byte	$62
07898 1B41                        68            .byte	$68
07899 1B42                        78            .byte	$78
07900 1B43                        68            .byte	$68
07901 1B44                        60            .byte	$60
07902 1B45                        60            .byte	$60
07903 1B46                        F0            .byte	$F0
07904 1B47                        00            .byte	0
07905 1B48                        00            .byte	0
07906 1B49                        00            .byte	0
07907                                           ! 1218  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07908 1B4A                        00            .byte	0
07909 1B4B                        00            .byte	0
07910 1B4C                        3C            .byte	$3C
07911 1B4D                        66            .byte	$66
07912 1B4E                        C2            .byte	$C2
07913 1B4F                        C0            .byte	$C0
07914 1B50                        C0            .byte	$C0
07915 1B51                        DE            .byte	$DE
07916 1B52                        C6            .byte	$C6
07917 1B53                        66            .byte	$66
07918 1B54                        3A            .byte	$3A
07919 1B55                        00            .byte	0
07920 1B56                        00            .byte	0
07921 1B57                        00            .byte	0
07922                                           ! 1219  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07923 1B58                        00            .byte	0
07924 1B59                        00            .byte	0
07925 1B5A                        C6            .byte	$C6
07926 1B5B                        C6            .byte	$C6
07927 1B5C                        C6            .byte	$C6
07928 1B5D                        C6            .byte	$C6
07929 1B5E                        FE            .byte	$FE
07930 1B5F                        C6            .byte	$C6
07931 1B60                        C6            .byte	$C6
07932 1B61                        C6            .byte	$C6
07933 1B62                        C6            .byte	$C6
07934 1B63                        00            .byte	0
07935 1B64                        00            .byte	0
07936 1B65                        00            .byte	0
07937                                           ! 1220  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07938 1B66                        00            .byte	0
07939 1B67                        00            .byte	0
07940 1B68                        3C            .byte	$3C
07941 1B69                        18            .byte	$18
07942 1B6A                        18            .byte	$18
07943 1B6B                        18            .byte	$18
07944 1B6C                        18            .byte	$18
07945 1B6D                        18            .byte	$18
07946 1B6E                        18            .byte	$18
07947 1B6F                        18            .byte	$18
07948 1B70                        3C            .byte	$3C
07949 1B71                        00            .byte	0
07950 1B72                        00            .byte	0
07951 1B73                        00            .byte	0
07952                                           ! 1221  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07953 1B74                        00            .byte	0
07954 1B75                        00            .byte	0
07955 1B76                        1E            .byte	$1E
07956 1B77                        0C            .byte	$C
07957 1B78                        0C            .byte	$C
07958 1B79                        0C            .byte	$C
07959 1B7A                        0C            .byte	$C
07960 1B7B                        0C            .byte	$C
07961 1B7C                        CC            .byte	$CC
07962 1B7D                        CC            .byte	$CC
07963 1B7E                        78            .byte	$78
07964 1B7F                        00            .byte	0
07965 1B80                        00            .byte	0
07966 1B81                        00            .byte	0
07967                                           ! 1222  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07968 1B82                        00            .byte	0
07969 1B83                        00            .byte	0
07970 1B84                        E6            .byte	$E6
07971 1B85                        66            .byte	$66
07972 1B86                        6C            .byte	$6C
07973 1B87                        6C            .byte	$6C
07974 1B88                        78            .byte	$78
07975 1B89                        6C            .byte	$6C
07976 1B8A                        6C            .byte	$6C
07977 1B8B                        66            .byte	$66
07978 1B8C                        E6            .byte	$E6
07979 1B8D                        00            .byte	0
07980 1B8E                        00            .byte	0
07981 1B8F                        00            .byte	0
07982                                           ! 1223  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0
07983 1B90                        00            .byte	0
07984 1B91                        00            .byte	0
07985 1B92                        F0            .byte	$F0
07986 1B93                        60            .byte	$60
07987 1B94                        60            .byte	$60
07988 1B95                        60            .byte	$60
07989 1B96                        60            .byte	$60
07990 1B97                        60            .byte	$60
07991 1B98                        62            .byte	$62
07992 1B99                        66            .byte	$66
07993 1B9A                        FE            .byte	$FE
07994 1B9B                        00            .byte	0
07995 1B9C                        00            .byte	0
07996                                           ! 1223 x00,
07997 1B9D                        00            .byte	0
07998                                           ! 1224  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07999 1B9E                        00            .byte	0
08000 1B9F                        00            .byte	0
08001 1BA0                        C6            .byte	$C6
08002 1BA1                        EE            .byte	$EE
08003 1BA2                        FE            .byte	$FE
08004 1BA3                        FE            .byte	$FE
08005 1BA4                        D6            .byte	$D6
08006 1BA5                        C6            .byte	$C6
08007 1BA6                        C6            .byte	$C6
08008 1BA7                        C6            .byte	$C6
08009 1BA8                        C6            .byte	$C6
08010 1BA9                        00            .byte	0
08011 1BAA                        00            .byte	0
08012 1BAB                        00            .byte	0
08013                                           ! 1225  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08014 1BAC                        00            .byte	0
08015 1BAD                        00            .byte	0
08016 1BAE                        C6            .byte	$C6
08017 1BAF                        E6            .byte	$E6
08018 1BB0                        F6            .byte	$F6
08019 1BB1                        FE            .byte	$FE
08020 1BB2                        DE            .byte	$DE
08021 1BB3                        CE            .byte	$CE
08022 1BB4                        C6            .byte	$C6
08023 1BB5                        C6            .byte	$C6
08024 1BB6                        C6            .byte	$C6
08025 1BB7                        00            .byte	0
08026 1BB8                        00            .byte	0
08027 1BB9                        00            .byte	0
08028                                           ! 1226  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08029 1BBA                        00            .byte	0
08030 1BBB                        00            .byte	0
08031 1BBC                        38            .byte	$38
08032 1BBD                        6C            .byte	$6C
08033 1BBE                        C6            .byte	$C6
08034 1BBF                        C6            .byte	$C6
08035 1BC0                        C6            .byte	$C6
08036 1BC1                        C6            .byte	$C6
08037 1BC2                        C6            .byte	$C6
08038 1BC3                        6C            .byte	$6C
08039 1BC4                        38            .byte	$38
08040 1BC5                        00            .byte	0
08041 1BC6                        00            .byte	0
08042 1BC7                        00            .byte	0
08043                                           ! 1227  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08044 1BC8                        00            .byte	0
08045 1BC9                        00            .byte	0
08046 1BCA                        FC            .byte	$FC
08047 1BCB                        66            .byte	$66
08048 1BCC                        66            .byte	$66
08049 1BCD                        66            .byte	$66
08050 1BCE                        7C            .byte	$7C
08051 1BCF                        60            .byte	$60
08052 1BD0                        60            .byte	$60
08053 1BD1                        60            .byte	$60
08054 1BD2                        F0            .byte	$F0
08055 1BD3                        00            .byte	0
08056 1BD4                        00            .byte	0
08057 1BD5                        00            .byte	0
08058                                           ! 1228  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08059 1BD6                        00            .byte	0
08060 1BD7                        00            .byte	0
08061 1BD8                        7C            .byte	$7C
08062 1BD9                        C6            .byte	$C6
08063 1BDA                        C6            .byte	$C6
08064 1BDB                        C6            .byte	$C6
08065 1BDC                        C6            .byte	$C6
08066 1BDD                        D6            .byte	$D6
08067 1BDE                        DE            .byte	$DE
08068 1BDF                        7C            .byte	$7C
08069 1BE0                        0C            .byte	$C
08070 1BE1                        0E            .byte	$E
08071 1BE2                        00            .byte	0
08072 1BE3                        00            .byte	0
08073                                           ! 1229  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08074 1BE4                        00            .byte	0
08075 1BE5                        00            .byte	0
08076 1BE6                        FC            .byte	$FC
08077 1BE7                        66            .byte	$66
08078 1BE8                        66            .byte	$66
08079 1BE9                        66            .byte	$66
08080 1BEA                        7C            .byte	$7C
08081 1BEB                        6C            .byte	$6C
08082 1BEC                        66            .byte	$66
08083 1BED                        66            .byte	$66
08084 1BEE                        E6            .byte	$E6
08085 1BEF                        00            .byte	0
08086 1BF0                        00            .byte	0
08087 1BF1                        00            .byte	0
08088                                           ! 1230  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08089 1BF2                        00            .byte	0
08090 1BF3                        00            .byte	0
08091 1BF4                        7C            .byte	$7C
08092 1BF5                        C6            .byte	$C6
08093 1BF6                        C6            .byte	$C6
08094 1BF7                        60            .byte	$60
08095 1BF8                        38            .byte	$38
08096 1BF9                        0C            .byte	$C
08097 1BFA                        C6            .byte	$C6
08098 1BFB                        C6            .byte	$C6
08099 1BFC                        7C            .byte	$7C
08100 1BFD                        00            .byte	0
08101 1BFE                        00            .byte	0
08102 1BFF                        00            .byte	0
08103                                           ! 1231  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08104 1C00                        00            .byte	0
08105 1C01                        00            .byte	0
08106 1C02                        7E            .byte	$7E
08107 1C03                        7E            .byte	$7E
08108 1C04                        5A            .byte	$5A
08109 1C05                        18            .byte	$18
08110 1C06                        18            .byte	$18
08111 1C07                        18            .byte	$18
08112 1C08                        18            .byte	$18
08113 1C09                        18            .byte	$18
08114 1C0A                        3C            .byte	$3C
08115 1C0B                        00            .byte	0
08116 1C0C                        00            .byte	0
08117 1C0D                        00            .byte	0
08118                                           ! 1232  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08119 1C0E                        00            .byte	0
08120 1C0F                        00            .byte	0
08121 1C10                        C6            .byte	$C6
08122 1C11                        C6            .byte	$C6
08123 1C12                        C6            .byte	$C6
08124 1C13                        C6            .byte	$C6
08125 1C14                        C6            .byte	$C6
08126 1C15                        C6            .byte	$C6
08127 1C16                        C6            .byte	$C6
08128 1C17                        C6            .byte	$C6
08129 1C18                        7C            .byte	$7C
08130 1C19                        00            .byte	0
08131 1C1A                        00            .byte	0
08132 1C1B                        00            .byte	0
08133                                           ! 1233  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08134 1C1C                        00            .byte	0
08135 1C1D                        00            .byte	0
08136 1C1E                        C6            .byte	$C6
08137 1C1F                        C6            .byte	$C6
08138 1C20                        C6            .byte	$C6
08139 1C21                        C6            .byte	$C6
08140 1C22                        C6            .byte	$C6
08141 1C23                        C6            .byte	$C6
08142 1C24                        6C            .byte	$6C
08143 1C25                        38            .byte	$38
08144 1C26                        10            .byte	$10
08145 1C27                        00            .byte	0
08146 1C28                        00            .byte	0
08147 1C29                        00            .byte	0
08148                                           ! 1234  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08149 1C2A                        00            .byte	0
08150 1C2B                        00            .byte	0
08151 1C2C                        C6            .byte	$C6
08152 1C2D                        C6            .byte	$C6
08153 1C2E                        C6            .byte	$C6
08154 1C2F                        C6            .byte	$C6
08155 1C30                        D6            .byte	$D6
08156 1C31                        D6            .byte	$D6
08157 1C32                        FE            .byte	$FE
08158 1C33                        7C            .byte	$7C
08159 1C34                        6C            .byte	$6C
08160 1C35                        00            .byte	0
08161 1C36                        00            .byte	0
08162 1C37                        00            .byte	0
08163                                           ! 1235  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08164 1C38                        00            .byte	0
08165 1C39                        00            .byte	0
08166 1C3A                        C6            .byte	$C6
08167 1C3B                        C6            .byte	$C6
08168 1C3C                        6C            .byte	$6C
08169 1C3D                        38            .byte	$38
08170 1C3E                        38            .byte	$38
08171 1C3F                        38            .byte	$38
08172 1C40                        6C            .byte	$6C
08173 1C41                        C6            .byte	$C6
08174 1C42                        C6            .byte	$C6
08175 1C43                        00            .byte	0
08176 1C44                        00            .byte	0
08177 1C45                        00            .byte	0
08178                                           ! 1236  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08179 1C46                        00            .byte	0
08180 1C47                        00            .byte	0
08181 1C48                        66            .byte	$66
08182 1C49                        66            .byte	$66
08183 1C4A                        66            .byte	$66
08184 1C4B                        66            .byte	$66
08185 1C4C                        3C            .byte	$3C
08186 1C4D                        18            .byte	$18
08187 1C4E                        18            .byte	$18
08188 1C4F                        18            .byte	$18
08189 1C50                        3C            .byte	$3C
08190 1C51                        00            .byte	0
08191 1C52                        00            .byte	0
08192 1C53                        00            .byte	0
08193                                           ! 1237  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08194 1C54                        00            .byte	0
08195 1C55                        00            .byte	0
08196 1C56                        FE            .byte	$FE
08197 1C57                        C6            .byte	$C6
08198 1C58                        8C            .byte	$8C
08199 1C59                        18            .byte	$18
08200 1C5A                        30            .byte	$30
08201 1C5B                        60            .byte	$60
08202 1C5C                        C2            .byte	$C2
08203 1C5D                        C6            .byte	$C6
08204 1C5E                        FE            .byte	$FE
08205 1C5F                        00            .byte	0
08206 1C60                        00            .byte	0
08207 1C61                        00            .byte	0
08208                                           ! 1238  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08209 1C62                        00            .byte	0
08210 1C63                        00            .byte	0
08211 1C64                        3C            .byte	$3C
08212 1C65                        30            .byte	$30
08213 1C66                        30            .byte	$30
08214 1C67                        30            .byte	$30
08215 1C68                        30            .byte	$30
08216 1C69                        30            .byte	$30
08217 1C6A                        30            .byte	$30
08218 1C6B                        30            .byte	$30
08219 1C6C                        3C            .byte	$3C
08220 1C6D                        00            .byte	0
08221 1C6E                        00            .byte	0
08222 1C6F                        00            .byte	0
08223                                           ! 1239  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08224 1C70                        00            .byte	0
08225 1C71                        00            .byte	0
08226 1C72                        80            .byte	$80
08227 1C73                        C0            .byte	$C0
08228 1C74                        E0            .byte	$E0
08229 1C75                        70            .byte	$70
08230 1C76                        38            .byte	$38
08231 1C77                        1C            .byte	$1C
08232 1C78                        0E            .byte	$E
08233 1C79                        06            .byte	6
08234 1C7A                        02            .byte	2
08235 1C7B                        00            .byte	0
08236 1C7C                        00            .byte	0
08237 1C7D                        00            .byte	0
08238                                           ! 1240  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08239 1C7E                        00            .byte	0
08240 1C7F                        00            .byte	0
08241 1C80                        3C            .byte	$3C
08242 1C81                        0C            .byte	$C
08243 1C82                        0C            .byte	$C
08244 1C83                        0C            .byte	$C
08245 1C84                        0C            .byte	$C
08246 1C85                        0C            .byte	$C
08247 1C86                        0C            .byte	$C
08248 1C87                        0C            .byte	$C
08249 1C88                        3C            .byte	$3C
08250 1C89                        00            .byte	0
08251 1C8A                        00            .byte	0
08252 1C8B                        00            .byte	0
08253                                           ! 1241  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08254 1C8C                        10            .byte	$10
08255 1C8D                        38            .byte	$38
08256 1C8E                        6C            .byte	$6C
08257 1C8F                        C6            .byte	$C6
08258 1C90                        00            .byte	0
08259 1C91                        00            .byte	0
08260 1C92                        00            .byte	0
08261 1C93                        00            .byte	0
08262 1C94                        00            .byte	0
08263 1C95                        00            .byte	0
08264 1C96                        00            .byte	0
08265 1C97                        00            .byte	0
08266 1C98                        00            .byte	0
08267 1C99                        00            .byte	0
08268                                           ! 1242  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08269 1C9A                        00            .byte	0
08270 1C9B                        00            .byte	0
08271 1C9C                        00            .byte	0
08272 1C9D                        00            .byte	0
08273 1C9E                        00            .byte	0
08274 1C9F                        00            .byte	0
08275 1CA0                        00            .byte	0
08276 1CA1                        00            .byte	0
08277 1CA2                        00            .byte	0
08278 1CA3                        00            .byte	0
08279 1CA4                        00            .byte	0
08280 1CA5                        00            .byte	0
08281 1CA6                        FF            .byte	$FF
08282 1CA7                        00            .byte	0
08283                                           ! 1243  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08284 1CA8                        30            .byte	$30
08285 1CA9                        30            .byte	$30
08286 1CAA                        18            .byte	$18
08287 1CAB                        00            .byte	0
08288 1CAC                        00            .byte	0
08289 1CAD                        00            .byte	0
08290 1CAE                        00            .byte	0
08291 1CAF                        00            .byte	0
08292 1CB0                        00            .byte	0
08293 1CB1                        00            .byte	0
08294 1CB2                        00            .byte	0
08295 1CB3                        00            .byte	0
08296 1CB4                        00            .byte	0
08297 1CB5                        00            .byte	0
08298                                           ! 1244  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08299 1CB6                        00            .byte	0
08300 1CB7                        00            .byte	0
08301 1CB8                        00            .byte	0
08302 1CB9                        00            .byte	0
08303 1CBA                        00            .byte	0
08304 1CBB                        78            .byte	$78
08305 1CBC                        0C            .byte	$C
08306 1CBD                        7C            .byte	$7C
08307 1CBE                        CC            .byte	$CC
08308 1CBF                        CC            .byte	$CC
08309 1CC0                        76            .byte	$76
08310 1CC1                        00            .byte	0
08311 1CC2                        00            .byte	0
08312 1CC3                        00            .byte	0
08313                                           ! 1245  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08314 1CC4                        00            .byte	0
08315 1CC5                        00            .byte	0
08316 1CC6                        E0            .byte	$E0
08317 1CC7                        60            .byte	$60
08318 1CC8                        60            .byte	$60
08319 1CC9                        78            .byte	$78
08320 1CCA                        6C            .byte	$6C
08321 1CCB                        66            .byte	$66
08322 1CCC                        66            .byte	$66
08323 1CCD                        66            .byte	$66
08324 1CCE                        7C            .byte	$7C
08325 1CCF                        00            .byte	0
08326 1CD0                        00            .byte	0
08327 1CD1                        00            .byte	0
08328                                           ! 1246  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08329 1CD2                        00            .byte	0
08330 1CD3                        00            .byte	0
08331 1CD4                        00            .byte	0
08332 1CD5                        00            .byte	0
08333 1CD6                        00            .byte	0
08334 1CD7                        7C            .byte	$7C
08335 1CD8                        C6            .byte	$C6
08336 1CD9                        C0            .byte	$C0
08337 1CDA                        C0            .byte	$C0
08338 1CDB                        C6            .byte	$C6
08339 1CDC                        7C            .byte	$7C
08340 1CDD                        00            .byte	0
08341 1CDE                        00            .byte	0
08342 1CDF                        00            .byte	0
08343                                           ! 1247  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08344 1CE0                        00            .byte	0
08345 1CE1                        00            .byte	0
08346 1CE2                        1C            .byte	$1C
08347 1CE3                        0C            .byte	$C
08348 1CE4                        0C            .byte	$C
08349 1CE5                        3C            .byte	$3C
08350 1CE6                        6C            .byte	$6C
08351 1CE7                        CC            .byte	$CC
08352 1CE8                        CC            .byte	$CC
08353 1CE9                        CC            .byte	$CC
08354 1CEA                        76            .byte	$76
08355 1CEB                        00            .byte	0
08356 1CEC                        00            .byte	0
08357 1CED                        00            .byte	0
08358                                           ! 1248  0x
08359                                           ! 1248 00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08360 1CEE                        00            .byte	0
08361 1CEF                        00            .byte	0
08362 1CF0                        00            .byte	0
08363 1CF1                        00            .byte	0
08364 1CF2                        00            .byte	0
08365 1CF3                        7C            .byte	$7C
08366 1CF4                        C6            .byte	$C6
08367 1CF5                        FE            .byte	$FE
08368 1CF6                        C0            .byte	$C0
08369 1CF7                        C6            .byte	$C6
08370 1CF8                        7C            .byte	$7C
08371 1CF9                        00            .byte	0
08372 1CFA                        00            .byte	0
08373 1CFB                        00            .byte	0
08374                                           ! 1249  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08375 1CFC                        00            .byte	0
08376 1CFD                        00            .byte	0
08377 1CFE                        38            .byte	$38
08378 1CFF                        6C            .byte	$6C
08379 1D00                        64            .byte	$64
08380 1D01                        60            .byte	$60
08381 1D02                        F0            .byte	$F0
08382 1D03                        60            .byte	$60
08383 1D04                        60            .byte	$60
08384 1D05                        60            .byte	$60
08385 1D06                        F0            .byte	$F0
08386 1D07                        00            .byte	0
08387 1D08                        00            .byte	0
08388 1D09                        00            .byte	0
08389                                           ! 1250  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08390 1D0A                        00            .byte	0
08391 1D0B                        00            .byte	0
08392 1D0C                        00            .byte	0
08393 1D0D                        00            .byte	0
08394 1D0E                        00            .byte	0
08395 1D0F                        76            .byte	$76
08396 1D10                        CC            .byte	$CC
08397 1D11                        CC            .byte	$CC
08398 1D12                        CC            .byte	$CC
08399 1D13                        7C            .byte	$7C
08400 1D14                        0C            .byte	$C
08401 1D15                        CC            .byte	$CC
08402 1D16                        78            .byte	$78
08403 1D17                        00            .byte	0
08404                                           ! 1251  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08405 1D18                        00            .byte	0
08406 1D19                        00            .byte	0
08407 1D1A                        E0            .byte	$E0
08408 1D1B                        60            .byte	$60
08409 1D1C                        60            .byte	$60
08410 1D1D                        6C            .byte	$6C
08411 1D1E                        76            .byte	$76
08412 1D1F                        66            .byte	$66
08413 1D20                        66            .byte	$66
08414 1D21                        66            .byte	$66
08415 1D22                        E6            .byte	$E6
08416 1D23                        00            .byte	0
08417 1D24                        00            .byte	0
08418 1D25                        00            .byte	0
08419                                           ! 1252  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08420 1D26                        00            .byte	0
08421 1D27                        00            .byte	0
08422 1D28                        18            .byte	$18
08423 1D29                        18            .byte	$18
08424 1D2A                        00            .byte	0
08425 1D2B                        38            .byte	$38
08426 1D2C                        18            .byte	$18
08427 1D2D                        18            .byte	$18
08428 1D2E                        18            .byte	$18
08429 1D2F                        18            .byte	$18
08430 1D30                        3C            .byte	$3C
08431 1D31                        00            .byte	0
08432 1D32                        00            .byte	0
08433 1D33                        00            .byte	0
08434                                           ! 1253  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08435 1D34                        00            .byte	0
08436 1D35                        00            .byte	0
08437 1D36                        06            .byte	6
08438 1D37                        06            .byte	6
08439 1D38                        00            .byte	0
08440 1D39                        0E            .byte	$E
08441 1D3A                        06            .byte	6
08442 1D3B                        06            .byte	6
08443 1D3C                        06            .byte	6
08444 1D3D                        06            .byte	6
08445 1D3E                        66            .byte	$66
08446 1D3F                        66            .byte	$66
08447 1D40                        3C            .byte	$3C
08448 1D41                        00            .byte	0
08449                                           ! 1254  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08450 1D42                        00            .byte	0
08451 1D43                        00            .byte	0
08452 1D44                        E0            .byte	$E0
08453 1D45                        60            .byte	$60
08454 1D46                        60            .byte	$60
08455 1D47                        66            .byte	$66
08456 1D48                        6C            .byte	$6C
08457 1D49                        78            .byte	$78
08458 1D4A                        6C            .byte	$6C
08459 1D4B                        66            .byte	$66
08460 1D4C                        E6            .byte	$E6
08461 1D4D                        00            .byte	0
08462 1D4E                        00            .byte	0
08463 1D4F                        00            .byte	0
08464                                           ! 1255  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08465 1D50                        00            .byte	0
08466 1D51                        00            .byte	0
08467 1D52                        38            .byte	$38
08468 1D53                        18            .byte	$18
08469 1D54                        18            .byte	$18
08470 1D55                        18            .byte	$18
08471 1D56                        18            .byte	$18
08472 1D57                        18            .byte	$18
08473 1D58                        18            .byte	$18
08474 1D59                        18            .byte	$18
08475 1D5A                        3C            .byte	$3C
08476 1D5B                        00            .byte	0
08477 1D5C                        00            .byte	0
08478 1D5D                        00            .byte	0
08479                                           ! 1256  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08480 1D5E                        00            .byte	0
08481 1D5F                        00            .byte	0
08482 1D60                        00            .byte	0
08483 1D61                        00            .byte	0
08484 1D62                        00            .byte	0
08485 1D63                        EC            .byte	$EC
08486 1D64                        FE            .byte	$FE
08487 1D65                        D6            .byte	$D6
08488 1D66                        D6            .byte	$D6
08489 1D67                        D6            .byte	$D6
08490 1D68                        C6            .byte	$C6
08491 1D69                        00            .byte	0
08492 1D6A                        00            .byte	0
08493 1D6B                        00            .byte	0
08494                                           ! 1257  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08495 1D6C                        00            .byte	0
08496 1D6D                        00            .byte	0
08497 1D6E                        00            .byte	0
08498 1D6F                        00            .byte	0
08499 1D70                        00            .byte	0
08500 1D71                        DC            .byte	$DC
08501 1D72                        66            .byte	$66
08502 1D73                        66            .byte	$66
08503 1D74                        66            .byte	$66
08504 1D75                        66            .byte	$66
08505 1D76                        66            .byte	$66
08506 1D77                        00            .byte	0
08507 1D78                        00            .byte	0
08508 1D79                        00            .byte	0
08509                                           ! 1258  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08510 1D7A                        00            .byte	0
08511 1D7B                        00            .byte	0
08512 1D7C                        00            .byte	0
08513 1D7D                        00            .byte	0
08514 1D7E                        00            .byte	0
08515 1D7F                        7C            .byte	$7C
08516 1D80                        C6            .byte	$C6
08517 1D81                        C6            .byte	$C6
08518 1D82                        C6            .byte	$C6
08519 1D83                        C6            .byte	$C6
08520 1D84                        7C            .byte	$7C
08521 1D85                        00            .byte	0
08522 1D86                        00            .byte	0
08523 1D87                        00            .byte	0
08524                                           ! 1259  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08525 1D88                        00            .byte	0
08526 1D89                        00            .byte	0
08527 1D8A                        00            .byte	0
08528 1D8B                        00            .byte	0
08529 1D8C                        00            .byte	0
08530 1D8D                        DC            .byte	$DC
08531 1D8E                        66            .byte	$66
08532 1D8F                        66            .byte	$66
08533 1D90                        66            .byte	$66
08534 1D91                        7C            .byte	$7C
08535 1D92                        60            .byte	$60
08536 1D93                        60            .byte	$60
08537 1D94                        F0            .byte	$F0
08538 1D95                        00            .byte	0
08539                                           ! 1260  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08540 1D96                        00            .byte	0
08541 1D97                        00            .byte	0
08542 1D98                        00            .byte	0
08543 1D99                        00            .byte	0
08544 1D9A                        00            .byte	0
08545 1D9B                        76            .byte	$76
08546 1D9C                        CC            .byte	$CC
08547 1D9D                        CC            .byte	$CC
08548 1D9E                        CC            .byte	$CC
08549 1D9F                        7C            .byte	$7C
08550 1DA0                        0C            .byte	$C
08551 1DA1                        0C            .byte	$C
08552 1DA2                        1E            .byte	$1E
08553 1DA3                        00            .byte	0
08554                                           ! 1261  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08555 1DA4                        00            .byte	0
08556 1DA5                        00            .byte	0
08557 1DA6                        00            .byte	0
08558 1DA7                        00            .byte	0
08559 1DA8                        00            .byte	0
08560 1DA9                        DC            .byte	$DC
08561 1DAA                        76            .byte	$76
08562 1DAB                        66            .byte	$66
08563 1DAC                        60            .byte	$60
08564 1DAD                        60            .byte	$60
08565 1DAE                        F0            .byte	$F0
08566 1DAF                        00            .byte	0
08567 1DB0                        00            .byte	0
08568 1DB1                        00            .byte	0
08569                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08570 1DB2                        00            .byte	0
08571 1DB3                        00            .byte	0
08572 1DB4                        00            .byte	0
08573 1DB5                        00            .byte	0
08574 1DB6                        00            .byte	0
08575 1DB7                        7C            .byte	$7C
08576 1DB8                        C6            .byte	$C6
08577 1DB9                        70            .byte	$70
08578 1DBA                        1C            .byte	$1C
08579 1DBB                        C6            .byte	$C6
08580 1DBC                        7C            .byte	$7C
08581 1DBD                        00            .byte	0
08582 1DBE                        00            .byte	0
08583 1DBF                        00            .byte	0
08584                                           ! 1263  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08585 1DC0                        00            .byte	0
08586 1DC1                        00            .byte	0
08587 1DC2                        10            .byte	$10
08588 1DC3                        30            .byte	$30
08589 1DC4                        30            .byte	$30
08590 1DC5                        FC            .byte	$FC
08591 1DC6                        30            .byte	$30
08592 1DC7                        30            .byte	$30
08593 1DC8                        30            .byte	$30
08594 1DC9                        36            .byte	$36
08595 1DCA                        1C            .byte	$1C
08596 1DCB                        00            .byte	0
08597 1DCC                        00            .byte	0
08598 1DCD                        00            .byte	0
08599                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08600 1DCE                        00            .byte	0
08601 1DCF                        00            .byte	0
08602 1DD0                        00            .byte	0
08603 1DD1                        00            .byte	0
08604 1DD2                        00            .byte	0
08605 1DD3                        CC            .byte	$CC
08606 1DD4                        CC            .byte	$CC
08607 1DD5                        CC            .byte	$CC
08608 1DD6                        CC            .byte	$CC
08609 1DD7                        CC            .byte	$CC
08610 1DD8                        76            .byte	$76
08611 1DD9                        00            .byte	0
08612 1DDA                        00            .byte	0
08613 1DDB                        00            .byte	0
08614                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08615 1DDC                        00            .byte	0
08616 1DDD                        00            .byte	0
08617 1DDE                        00            .byte	0
08618 1DDF                        00            .byte	0
08619 1DE0                        00            .byte	0
08620 1DE1                        66            .byte	$66
08621 1DE2                        66            .byte	$66
08622 1DE3                        66            .byte	$66
08623 1DE4                        66            .byte	$66
08624 1DE5                        3C            .byte	$3C
08625 1DE6                        18            .byte	$18
08626 1DE7                        00            .byte	0
08627 1DE8                        00            .byte	0
08628 1DE9                        00            .byte	0
08629                                           ! 1266  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08630 1DEA                        00            .byte	0
08631 1DEB                        00            .byte	0
08632 1DEC                        00            .byte	0
08633 1DED                        00            .byte	0
08634 1DEE                        00            .byte	0
08635 1DEF                        C6            .byte	$C6
08636 1DF0                        C6            .byte	$C6
08637 1DF1                        D6            .byte	$D6
08638 1DF2                        D6            .byte	$D6
08639 1DF3                        FE            .byte	$FE
08640 1DF4                        6C            .byte	$6C
08641 1DF5                        00            .byte	0
08642 1DF6                        00            .byte	0
08643 1DF7                        00            .byte	0
08644                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08645 1DF8                        00            .byte	0
08646 1DF9                        00            .byte	0
08647 1DFA                        00            .byte	0
08648 1DFB                        00            .byte	0
08649 1DFC                        00            .byte	0
08650 1DFD                        C6            .byte	$C6
08651 1DFE                        6C            .byte	$6C
08652 1DFF                        38            .byte	$38
08653 1E00                        38            .byte	$38
08654 1E01                        6C            .byte	$6C
08655 1E02                        C6            .byte	$C6
08656 1E03                        00            .byte	0
08657 1E04                        00            .byte	0
08658 1E05                        00            .byte	0
08659                                           ! 1268  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08660 1E06                        00            .byte	0
08661 1E07                        00            .byte	0
08662 1E08                        00            .byte	0
08663 1E09                        00            .byte	0
08664 1E0A                        00            .byte	0
08665 1E0B                        C6            .byte	$C6
08666 1E0C                        C6            .byte	$C6
08667 1E0D                        C6            .byte	$C6
08668 1E0E                        C6            .byte	$C6
08669 1E0F                        7E            .byte	$7E
08670 1E10                        06            .byte	6
08671 1E11                        0C            .byte	$C
08672 1E12                        F8            .byte	$F8
08673 1E13                        00            .byte	0
08674                                           ! 1269  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08675 1E14                        00            .byte	0
08676 1E15                        00            .byte	0
08677 1E16                        00            .byte	0
08678 1E17                        00            .byte	0
08679 1E18                        00            .byte	0
08680 1E19                        FE            .byte	$FE
08681 1E1A                        CC            .byte	$CC
08682 1E1B                        18            .byte	$18
08683 1E1C                        30            .byte	$30
08684 1E1D                        66            .byte	$66
08685 1E1E                        FE            .byte	$FE
08686 1E1F                        00            .byte	0
08687 1E20                        00            .byte	0
08688 1E21                        00            .byte	0
08689                                           ! 1270  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08690 1E22                        00            .byte	0
08691 1E23                        00            .byte	0
08692 1E24                        0E            .byte	$E
08693 1E25                        18            .byte	$18
08694 1E26                        18            .byte	$18
08695 1E27                        18            .byte	$18
08696 1E28                        70            .byte	$70
08697 1E29                        18            .byte	$18
08698 1E2A                        18            .byte	$18
08699 1E2B                        18            .byte	$18
08700 1E2C                        0E            .byte	$E
08701 1E2D                        00            .byte	0
08702 1E2E                        00            .byte	0
08703 1E2F                        00            .byte	0
08704                                           ! 1271  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08705 1E30                        00            .byte	0
08706 1E31                        00            .byte	0
08707 1E32                        18            .byte	$18
08708 1E33                        18            .byte	$18
08709 1E34                        18            .byte	$18
08710 1E35                        18            .byte	$18
08711 1E36                        00            .byte	0
08712 1E37                        18            .byte	$18
08713 1E38                        18            .byte	$18
08714 1E39                        18            .byte	$18
08715 1E3A                        18            .byte	$18
08716 1E3B                        00            .byte	0
08717 1E3C                        00            .byte	0
08718 1E3D                        00            .byte	0
08719                                           ! 1272  0x00, 0x00
08720 1E3E                        00            .byte	0
08721                                           ! 1272 , 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08722 1E3F                        00            .byte	0
08723 1E40                        70            .byte	$70
08724 1E41                        18            .byte	$18
08725 1E42                        18            .byte	$18
08726 1E43                        18            .byte	$18
08727 1E44                        0E            .byte	$E
08728 1E45                        18            .byte	$18
08729 1E46                        18            .byte	$18
08730 1E47                        18            .byte	$18
08731 1E48                        70            .byte	$70
08732 1E49                        00            .byte	0
08733 1E4A                        00            .byte	0
08734 1E4B                        00            .byte	0
08735                                           ! 1273  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08736 1E4C                        00            .byte	0
08737 1E4D                        00            .byte	0
08738 1E4E                        76            .byte	$76
08739 1E4F                        DC            .byte	$DC
08740 1E50                        00            .byte	0
08741 1E51                        00            .byte	0
08742 1E52                        00            .byte	0
08743 1E53                        00            .byte	0
08744 1E54                        00            .byte	0
08745 1E55                        00            .byte	0
08746 1E56                        00            .byte	0
08747 1E57                        00            .byte	0
08748 1E58                        00            .byte	0
08749 1E59                        00            .byte	0
08750                                           ! 1274  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08751 1E5A                        00            .byte	0
08752 1E5B                        00            .byte	0
08753 1E5C                        00            .byte	0
08754 1E5D                        00            .byte	0
08755 1E5E                        10            .byte	$10
08756 1E5F                        38            .byte	$38
08757 1E60                        6C            .byte	$6C
08758 1E61                        C6            .byte	$C6
08759 1E62                        C6            .byte	$C6
08760 1E63                        FE            .byte	$FE
08761 1E64                        00            .byte	0
08762 1E65                        00            .byte	0
08763 1E66                        00            .byte	0
08764 1E67                        00            .byte	0
08765                                           ! 1275  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08766 1E68                        00            .byte	0
08767 1E69                        00            .byte	0
08768 1E6A                        3C            .byte	$3C
08769 1E6B                        66            .byte	$66
08770 1E6C                        C2            .byte	$C2
08771 1E6D                        C0            .byte	$C0
08772 1E6E                        C0            .byte	$C0
08773 1E6F                        C2            .byte	$C2
08774 1E70                        66            .byte	$66
08775 1E71                        3C            .byte	$3C
08776 1E72                        0C            .byte	$C
08777 1E73                        06            .byte	6
08778 1E74                        7C            .byte	$7C
08779 1E75                        00            .byte	0
08780                                           ! 1276  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08781 1E76                        00            .byte	0
08782 1E77                        00            .byte	0
08783 1E78                        CC            .byte	$CC
08784 1E79                        CC            .byte	$CC
08785 1E7A                        00            .byte	0
08786 1E7B                        CC            .byte	$CC
08787 1E7C                        CC            .byte	$CC
08788 1E7D                        CC            .byte	$CC
08789 1E7E                        CC            .byte	$CC
08790 1E7F                        CC            .byte	$CC
08791 1E80                        76            .byte	$76
08792 1E81                        00            .byte	0
08793 1E82                        00            .byte	0
08794 1E83                        00            .byte	0
08795                                           ! 1277  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08796 1E84                        00            .byte	0
08797 1E85                        0C            .byte	$C
08798 1E86                        18            .byte	$18
08799 1E87                        30            .byte	$30
08800 1E88                        00            .byte	0
08801 1E89                        7C            .byte	$7C
08802 1E8A                        C6            .byte	$C6
08803 1E8B                        FE            .byte	$FE
08804 1E8C                        C0            .byte	$C0
08805 1E8D                        C6            .byte	$C6
08806 1E8E                        7C            .byte	$7C
08807 1E8F                        00            .byte	0
08808 1E90                        00            .byte	0
08809 1E91                        00            .byte	0
08810                                           ! 1278  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08811 1E92                        00            .byte	0
08812 1E93                        10            .byte	$10
08813 1E94                        38            .byte	$38
08814 1E95                        6C            .byte	$6C
08815 1E96                        00            .byte	0
08816 1E97                        78            .byte	$78
08817 1E98                        0C            .byte	$C
08818 1E99                        7C            .byte	$7C
08819 1E9A                        CC            .byte	$CC
08820 1E9B                        CC            .byte	$CC
08821 1E9C                        76            .byte	$76
08822 1E9D                        00            .byte	0
08823 1E9E                        00            .byte	0
08824 1E9F                        00            .byte	0
08825                                           ! 1279  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08826 1EA0                        00            .byte	0
08827 1EA1                        00            .byte	0
08828 1EA2                        CC            .byte	$CC
08829 1EA3                        CC            .byte	$CC
08830 1EA4                        00            .byte	0
08831 1EA5                        78            .byte	$78
08832 1EA6                        0C            .byte	$C
08833 1EA7                        7C            .byte	$7C
08834 1EA8                        CC            .byte	$CC
08835 1EA9                        CC            .byte	$CC
08836 1EAA                        76            .byte	$76
08837 1EAB                        00            .byte	0
08838 1EAC                        00            .byte	0
08839 1EAD                        00            .byte	0
08840                                           ! 1280  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08841 1EAE                        00            .byte	0
08842 1EAF                        60            .byte	$60
08843 1EB0                        30            .byte	$30
08844 1EB1                        18            .byte	$18
08845 1EB2                        00            .byte	0
08846 1EB3                        78            .byte	$78
08847 1EB4                        0C            .byte	$C
08848 1EB5                        7C            .byte	$7C
08849 1EB6                        CC            .byte	$CC
08850 1EB7                        CC            .byte	$CC
08851 1EB8                        76            .byte	$76
08852 1EB9                        00            .byte	0
08853 1EBA                        00            .byte	0
08854 1EBB                        00            .byte	0
08855                                           ! 1281  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08856 1EBC                        00            .byte	0
08857 1EBD                        38            .byte	$38
08858 1EBE                        6C            .byte	$6C
08859 1EBF                        38            .byte	$38
08860 1EC0                        00            .byte	0
08861 1EC1                        78            .byte	$78
08862 1EC2                        0C            .byte	$C
08863 1EC3                        7C            .byte	$7C
08864 1EC4                        CC            .byte	$CC
08865 1EC5                        CC            .byte	$CC
08866 1EC6                        76            .byte	$76
08867 1EC7                        00            .byte	0
08868 1EC8                        00            .byte	0
08869 1EC9                        00            .byte	0
08870                                           ! 1282  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08871 1ECA                        00            .byte	0
08872 1ECB                        00            .byte	0
08873 1ECC                        00            .byte	0
08874 1ECD                        00            .byte	0
08875 1ECE                        3C            .byte	$3C
08876 1ECF                        66            .byte	$66
08877 1ED0                        60            .byte	$60
08878 1ED1                        66            .byte	$66
08879 1ED2                        3C            .byte	$3C
08880 1ED3                        0C            .byte	$C
08881 1ED4                        06            .byte	6
08882 1ED5                        3C            .byte	$3C
08883 1ED6                        00            .byte	0
08884 1ED7                        00            .byte	0
08885                                           ! 1283  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08886 1ED8                        00            .byte	0
08887 1ED9                        10            .byte	$10
08888 1EDA                        38            .byte	$38
08889 1EDB                        6C            .byte	$6C
08890 1EDC                        00            .byte	0
08891 1EDD                        7C            .byte	$7C
08892 1EDE                        C6            .byte	$C6
08893 1EDF                        FE            .byte	$FE
08894 1EE0                        C0            .byte	$C0
08895 1EE1                        C6            .byte	$C6
08896 1EE2                        7C            .byte	$7C
08897 1EE3                        00            .byte	0
08898 1EE4                        00            .byte	0
08899 1EE5                        00            .byte	0
08900                                           ! 1284  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08901 1EE6                        00            .byte	0
08902 1EE7                        00            .byte	0
08903 1EE8                        CC            .byte	$CC
08904 1EE9                        CC            .byte	$CC
08905 1EEA                        00            .byte	0
08906 1EEB                        7C            .byte	$7C
08907 1EEC                        C6            .byte	$C6
08908 1EED                        FE            .byte	$FE
08909 1EEE                        C0            .byte	$C0
08910 1EEF                        C6            .byte	$C6
08911 1EF0                        7C            .byte	$7C
08912 1EF1                        00            .byte	0
08913 1EF2                        00            .byte	0
08914 1EF3                        00            .byte	0
08915                                           ! 1285  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08916 1EF4                        00            .byte	0
08917 1EF5                        60            .byte	$60
08918 1EF6                        30            .byte	$30
08919 1EF7                        18            .byte	$18
08920 1EF8                        00            .byte	0
08921 1EF9                        7C            .byte	$7C
08922 1EFA                        C6            .byte	$C6
08923 1EFB                        FE            .byte	$FE
08924 1EFC                        C0            .byte	$C0
08925 1EFD                        C6            .byte	$C6
08926 1EFE                        7C            .byte	$7C
08927 1EFF                        00            .byte	0
08928 1F00                        00            .byte	0
08929 1F01                        00            .byte	0
08930                                           ! 1286  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08931 1F02                        00            .byte	0
08932 1F03                        00            .byte	0
08933 1F04                        66            .byte	$66
08934 1F05                        66            .byte	$66
08935 1F06                        00            .byte	0
08936 1F07                        38            .byte	$38
08937 1F08                        18            .byte	$18
08938 1F09                        18            .byte	$18
08939 1F0A                        18            .byte	$18
08940 1F0B                        18            .byte	$18
08941 1F0C                        3C            .byte	$3C
08942 1F0D                        00            .byte	0
08943 1F0E                        00            .byte	0
08944 1F0F                        00            .byte	0
08945                                           ! 1287  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08946 1F10                        00            .byte	0
08947 1F11                        18            .byte	$18
08948 1F12                        3C            .byte	$3C
08949 1F13                        66            .byte	$66
08950 1F14                        00            .byte	0
08951 1F15                        38            .byte	$38
08952 1F16                        18            .byte	$18
08953 1F17                        18            .byte	$18
08954 1F18                        18            .byte	$18
08955 1F19                        18            .byte	$18
08956 1F1A                        3C            .byte	$3C
08957 1F1B                        00            .byte	0
08958 1F1C                        00            .byte	0
08959 1F1D                        00            .byte	0
08960                                           ! 1288  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08961 1F1E                        00            .byte	0
08962 1F1F                        60            .byte	$60
08963 1F20                        30            .byte	$30
08964 1F21                        18            .byte	$18
08965 1F22                        00            .byte	0
08966 1F23                        38            .byte	$38
08967 1F24                        18            .byte	$18
08968 1F25                        18            .byte	$18
08969 1F26                        18            .byte	$18
08970 1F27                        18            .byte	$18
08971 1F28                        3C            .byte	$3C
08972 1F29                        00            .byte	0
08973 1F2A                        00            .byte	0
08974 1F2B                        00            .byte	0
08975                                           ! 1289  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08976 1F2C                        00            .byte	0
08977 1F2D                        C6            .byte	$C6
08978 1F2E                        C6            .byte	$C6
08979 1F2F                        10            .byte	$10
08980 1F30                        38            .byte	$38
08981 1F31                        6C            .byte	$6C
08982 1F32                        C6            .byte	$C6
08983 1F33                        C6            .byte	$C6
08984 1F34                        FE            .byte	$FE
08985 1F35                        C6            .byte	$C6
08986 1F36                        C6            .byte	$C6
08987 1F37                        00            .byte	0
08988 1F38                        00            .byte	0
08989 1F39                        00            .byte	0
08990                                           ! 1290  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08991 1F3A                        38            .byte	$38
08992 1F3B                        6C            .byte	$6C
08993 1F3C                        38            .byte	$38
08994 1F3D                        00            .byte	0
08995 1F3E                        38            .byte	$38
08996 1F3F                        6C            .byte	$6C
08997 1F40                        C6            .byte	$C6
08998 1F41                        C6            .byte	$C6
08999 1F42                        FE            .byte	$FE
09000 1F43                        C6            .byte	$C6
09001 1F44                        C6            .byte	$C6
09002 1F45                        00            .byte	0
09003 1F46                        00            .byte	0
09004 1F47                        00            .byte	0
09005                                           ! 1291  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
09006 1F48                        18            .byte	$18
09007 1F49                        30            .byte	$30
09008 1F4A                        60            .byte	$60
09009 1F4B                        00            .byte	0
09010 1F4C                        FE            .byte	$FE
09011 1F4D                        66            .byte	$66
09012 1F4E                        60            .byte	$60
09013 1F4F                        7C            .byte	$7C
09014 1F50                        60            .byte	$60
09015 1F51                        66            .byte	$66
09016 1F52                        FE            .byte	$FE
09017 1F53                        00            .byte	0
09018 1F54                        00            .byte	0
09019 1F55                        00            .byte	0
09020                                           ! 1292  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09021 1F56                        00            .byte	0
09022 1F57                        00            .byte	0
09023 1F58                        00            .byte	0
09024 1F59                        00            .byte	0
09025 1F5A                        CC            .byte	$CC
09026 1F5B                        76            .byte	$76
09027 1F5C                        36            .byte	$36
09028 1F5D                        7E            .byte	$7E
09029 1F5E                        D8            .byte	$D8
09030 1F5F                        D8            .byte	$D8
09031 1F60                        6E            .byte	$6E
09032 1F61                        00            .byte	0
09033 1F62                        00            .byte	0
09034 1F63                        00            .byte	0
09035                                           ! 1293  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09036 1F64                        00            .byte	0
09037 1F65                        00            .byte	0
09038 1F66                        3E            .byte	$3E
09039 1F67                        6C            .byte	$6C
09040 1F68                        CC            .byte	$CC
09041 1F69                        CC            .byte	$CC
09042 1F6A                        FE            .byte	$FE
09043 1F6B                        CC            .byte	$CC
09044 1F6C                        CC            .byte	$CC
09045 1F6D                        CC            .byte	$CC
09046 1F6E                        CE            .byte	$CE
09047 1F6F                        00            .byte	0
09048 1F70                        00            .byte	0
09049 1F71                        00            .byte	0
09050                                           ! 1294  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09051 1F72                        00            .byte	0
09052 1F73                        10            .byte	$10
09053 1F74                        38            .byte	$38
09054 1F75                        6C            .byte	$6C
09055 1F76                        00            .byte	0
09056 1F77                        7C            .byte	$7C
09057 1F78                        C6            .byte	$C6
09058 1F79                        C6            .byte	$C6
09059 1F7A                        C6            .byte	$C6
09060 1F7B                        C6            .byte	$C6
09061 1F7C                        7C            .byte	$7C
09062 1F7D                        00            .byte	0
09063 1F7E                        00            .byte	0
09064 1F7F                        00            .byte	0
09065                                           ! 1295  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09066 1F80                        00            .byte	0
09067 1F81                        00            .byte	0
09068 1F82                        C6            .byte	$C6
09069 1F83                        C6            .byte	$C6
09070 1F84                        00            .byte	0
09071 1F85                        7C            .byte	$7C
09072 1F86                        C6            .byte	$C6
09073 1F87                        C6            .byte	$C6
09074 1F88                        C6            .byte	$C6
09075 1F89                        C6            .byte	$C6
09076 1F8A                        7C            .byte	$7C
09077 1F8B                        00            .byte	0
09078 1F8C                        00            .byte	0
09079 1F8D                        00            .byte	0
09080                                           ! 1296  0x00, 0x60, 0x30, 
09081 1F8E                        00            .byte	0
09082 1F8F                        60            .byte	$60
09083 1F90                        30            .byte	$30
09084                                           ! 1296 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09085 1F91                        18            .byte	$18
09086 1F92                        00            .byte	0
09087 1F93                        7C            .byte	$7C
09088 1F94                        C6            .byte	$C6
09089 1F95                        C6            .byte	$C6
09090 1F96                        C6            .byte	$C6
09091 1F97                        C6            .byte	$C6
09092 1F98                        7C            .byte	$7C
09093 1F99                        00            .byte	0
09094 1F9A                        00            .byte	0
09095 1F9B                        00            .byte	0
09096                                           ! 1297  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09097 1F9C                        00            .byte	0
09098 1F9D                        30            .byte	$30
09099 1F9E                        78            .byte	$78
09100 1F9F                        CC            .byte	$CC
09101 1FA0                        00            .byte	0
09102 1FA1                        CC            .byte	$CC
09103 1FA2                        CC            .byte	$CC
09104 1FA3                        CC            .byte	$CC
09105 1FA4                        CC            .byte	$CC
09106 1FA5                        CC            .byte	$CC
09107 1FA6                        76            .byte	$76
09108 1FA7                        00            .byte	0
09109 1FA8                        00            .byte	0
09110 1FA9                        00            .byte	0
09111                                           ! 1298  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09112 1FAA                        00            .byte	0
09113 1FAB                        60            .byte	$60
09114 1FAC                        30            .byte	$30
09115 1FAD                        18            .byte	$18
09116 1FAE                        00            .byte	0
09117 1FAF                        CC            .byte	$CC
09118 1FB0                        CC            .byte	$CC
09119 1FB1                        CC            .byte	$CC
09120 1FB2                        CC            .byte	$CC
09121 1FB3                        CC            .byte	$CC
09122 1FB4                        76            .byte	$76
09123 1FB5                        00            .byte	0
09124 1FB6                        00            .byte	0
09125 1FB7                        00            .byte	0
09126                                           ! 1299  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09127 1FB8                        00            .byte	0
09128 1FB9                        00            .byte	0
09129 1FBA                        C6            .byte	$C6
09130 1FBB                        C6            .byte	$C6
09131 1FBC                        00            .byte	0
09132 1FBD                        C6            .byte	$C6
09133 1FBE                        C6            .byte	$C6
09134 1FBF                        C6            .byte	$C6
09135 1FC0                        C6            .byte	$C6
09136 1FC1                        7E            .byte	$7E
09137 1FC2                        06            .byte	6
09138 1FC3                        0C            .byte	$C
09139 1FC4                        78            .byte	$78
09140 1FC5                        00            .byte	0
09141                                           ! 1300  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09142 1FC6                        00            .byte	0
09143 1FC7                        C6            .byte	$C6
09144 1FC8                        C6            .byte	$C6
09145 1FC9                        38            .byte	$38
09146 1FCA                        6C            .byte	$6C
09147 1FCB                        C6            .byte	$C6
09148 1FCC                        C6            .byte	$C6
09149 1FCD                        C6            .byte	$C6
09150 1FCE                        C6            .byte	$C6
09151 1FCF                        6C            .byte	$6C
09152 1FD0                        38            .byte	$38
09153 1FD1                        00            .byte	0
09154 1FD2                        00            .byte	0
09155 1FD3                        00            .byte	0
09156                                           ! 1301  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09157 1FD4                        00            .byte	0
09158 1FD5                        C6            .byte	$C6
09159 1FD6                        C6            .byte	$C6
09160 1FD7                        00            .byte	0
09161 1FD8                        C6            .byte	$C6
09162 1FD9                        C6            .byte	$C6
09163 1FDA                        C6            .byte	$C6
09164 1FDB                        C6            .byte	$C6
09165 1FDC                        C6            .byte	$C6
09166 1FDD                        C6            .byte	$C6
09167 1FDE                        7C            .byte	$7C
09168 1FDF                        00            .byte	0
09169 1FE0                        00            .byte	0
09170 1FE1                        00            .byte	0
09171                                           ! 1302  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09172 1FE2                        00            .byte	0
09173 1FE3                        18            .byte	$18
09174 1FE4                        18            .byte	$18
09175 1FE5                        3C            .byte	$3C
09176 1FE6                        66            .byte	$66
09177 1FE7                        60            .byte	$60
09178 1FE8                        60            .byte	$60
09179 1FE9                        66            .byte	$66
09180 1FEA                        3C            .byte	$3C
09181 1FEB                        18            .byte	$18
09182 1FEC                        18            .byte	$18
09183 1FED                        00            .byte	0
09184 1FEE                        00            .byte	0
09185 1FEF                        00            .byte	0
09186                                           ! 1303  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09187 1FF0                        00            .byte	0
09188 1FF1                        38            .byte	$38
09189 1FF2                        6C            .byte	$6C
09190 1FF3                        64            .byte	$64
09191 1FF4                        60            .byte	$60
09192 1FF5                        F0            .byte	$F0
09193 1FF6                        60            .byte	$60
09194 1FF7                        60            .byte	$60
09195 1FF8                        60            .byte	$60
09196 1FF9                        E6            .byte	$E6
09197 1FFA                        FC            .byte	$FC
09198 1FFB                        00            .byte	0
09199 1FFC                        00            .byte	0
09200 1FFD                        00            .byte	0
09201                                           ! 1304  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09202 1FFE                        00            .byte	0
09203 1FFF                        00            .byte	0
09204 2000                        66            .byte	$66
09205 2001                        66            .byte	$66
09206 2002                        3C            .byte	$3C
09207 2003                        18            .byte	$18
09208 2004                        7E            .byte	$7E
09209 2005                        18            .byte	$18
09210 2006                        7E            .byte	$7E
09211 2007                        18            .byte	$18
09212 2008                        18            .byte	$18
09213 2009                        00            .byte	0
09214 200A                        00            .byte	0
09215 200B                        00            .byte	0
09216                                           ! 1305  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09217 200C                        00            .byte	0
09218 200D                        F8            .byte	$F8
09219 200E                        CC            .byte	$CC
09220 200F                        CC            .byte	$CC
09221 2010                        F8            .byte	$F8
09222 2011                        C4            .byte	$C4
09223 2012                        CC            .byte	$CC
09224 2013                        DE            .byte	$DE
09225 2014                        CC            .byte	$CC
09226 2015                        CC            .byte	$CC
09227 2016                        C6            .byte	$C6
09228 2017                        00            .byte	0
09229 2018                        00            .byte	0
09230 2019                        00            .byte	0
09231                                           ! 1306  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09232 201A                        00            .byte	0
09233 201B                        0E            .byte	$E
09234 201C                        1B            .byte	$1B
09235 201D                        18            .byte	$18
09236 201E                        18            .byte	$18
09237 201F                        18            .byte	$18
09238 2020                        7E            .byte	$7E
09239 2021                        18            .byte	$18
09240 2022                        18            .byte	$18
09241 2023                        18            .byte	$18
09242 2024                        18            .byte	$18
09243 2025                        D8            .byte	$D8
09244 2026                        70            .byte	$70
09245 2027                        00            .byte	0
09246                                           ! 1307  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09247 2028                        00            .byte	0
09248 2029                        18            .byte	$18
09249 202A                        30            .byte	$30
09250 202B                        60            .byte	$60
09251 202C                        00            .byte	0
09252 202D                        78            .byte	$78
09253 202E                        0C            .byte	$C
09254 202F                        7C            .byte	$7C
09255 2030                        CC            .byte	$CC
09256 2031                        CC            .byte	$CC
09257 2032                        76            .byte	$76
09258 2033                        00            .byte	0
09259 2034                        00            .byte	0
09260 2035                        00            .byte	0
09261                                           ! 1308  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09262 2036                        00            .byte	0
09263 2037                        0C            .byte	$C
09264 2038                        18            .byte	$18
09265 2039                        30            .byte	$30
09266 203A                        00            .byte	0
09267 203B                        38            .byte	$38
09268 203C                        18            .byte	$18
09269 203D                        18            .byte	$18
09270 203E                        18            .byte	$18
09271 203F                        18            .byte	$18
09272 2040                        3C            .byte	$3C
09273 2041                        00            .byte	0
09274 2042                        00            .byte	0
09275 2043                        00            .byte	0
09276                                           ! 1309  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09277 2044                        00            .byte	0
09278 2045                        18            .byte	$18
09279 2046                        30            .byte	$30
09280 2047                        60            .byte	$60
09281 2048                        00            .byte	0
09282 2049                        7C            .byte	$7C
09283 204A                        C6            .byte	$C6
09284 204B                        C6            .byte	$C6
09285 204C                        C6            .byte	$C6
09286 204D                        C6            .byte	$C6
09287 204E                        7C            .byte	$7C
09288 204F                        00            .byte	0
09289 2050                        00            .byte	0
09290 2051                        00            .byte	0
09291                                           ! 1310  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09292 2052                        00            .byte	0
09293 2053                        18            .byte	$18
09294 2054                        30            .byte	$30
09295 2055                        60            .byte	$60
09296 2056                        00            .byte	0
09297 2057                        CC            .byte	$CC
09298 2058                        CC            .byte	$CC
09299 2059                        CC            .byte	$CC
09300 205A                        CC            .byte	$CC
09301 205B                        CC            .byte	$CC
09302 205C                        76            .byte	$76
09303 205D                        00            .byte	0
09304 205E                        00            .byte	0
09305 205F                        00            .byte	0
09306                                           ! 1311  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09307 2060                        00            .byte	0
09308 2061                        00            .byte	0
09309 2062                        76            .byte	$76
09310 2063                        DC            .byte	$DC
09311 2064                        00            .byte	0
09312 2065                        DC            .byte	$DC
09313 2066                        66            .byte	$66
09314 2067                        66            .byte	$66
09315 2068                        66            .byte	$66
09316 2069                        66            .byte	$66
09317 206A                        66            .byte	$66
09318 206B                        00            .byte	0
09319 206C                        00            .byte	0
09320 206D                        00            .byte	0
09321                                           ! 1312  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09322 206E                        76            .byte	$76
09323 206F                        DC            .byte	$DC
09324 2070                        00            .byte	0
09325 2071                        C6            .byte	$C6
09326 2072                        E6            .byte	$E6
09327 2073                        F6            .byte	$F6
09328 2074                        FE            .byte	$FE
09329 2075                        DE            .byte	$DE
09330 2076                        CE            .byte	$CE
09331 2077                        C6            .byte	$C6
09332 2078                        C6            .byte	$C6
09333 2079                        00            .byte	0
09334 207A                        00            .byte	0
09335 207B                        00            .byte	0
09336                                           ! 1313  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09337 207C                        00            .byte	0
09338 207D                        3C            .byte	$3C
09339 207E                        6C            .byte	$6C
09340 207F                        6C            .byte	$6C
09341 2080                        3E            .byte	$3E
09342 2081                        00            .byte	0
09343 2082                        7E            .byte	$7E
09344 2083                        00            .byte	0
09345 2084                        00            .byte	0
09346 2085                        00            .byte	0
09347 2086                        00            .byte	0
09348 2087                        00            .byte	0
09349 2088                        00            .byte	0
09350 2089                        00            .byte	0
09351                                           ! 1314  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09352 208A                        00            .byte	0
09353 208B                        38            .byte	$38
09354 208C                        6C            .byte	$6C
09355 208D                        6C            .byte	$6C
09356 208E                        38            .byte	$38
09357 208F                        00            .byte	0
09358 2090                        7C            .byte	$7C
09359 2091                        00            .byte	0
09360 2092                        00            .byte	0
09361 2093                        00            .byte	0
09362 2094                        00            .byte	0
09363 2095                        00            .byte	0
09364 2096                        00            .byte	0
09365 2097                        00            .byte	0
09366                                           ! 1315  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09367 2098                        00            .byte	0
09368 2099                        00            .byte	0
09369 209A                        30            .byte	$30
09370 209B                        30            .byte	$30
09371 209C                        00            .byte	0
09372 209D                        30            .byte	$30
09373 209E                        30            .byte	$30
09374 209F                        60            .byte	$60
09375 20A0                        C6            .byte	$C6
09376 20A1                        C6            .byte	$C6
09377 20A2                        7C            .byte	$7C
09378 20A3                        00            .byte	0
09379 20A4                        00            .byte	0
09380 20A5                        00            .byte	0
09381                                           ! 1316  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09382 20A6                        00            .byte	0
09383 20A7                        00            .byte	0
09384 20A8                        00            .byte	0
09385 20A9                        00            .byte	0
09386 20AA                        00            .byte	0
09387 20AB                        00            .byte	0
09388 20AC                        FE            .byte	$FE
09389 20AD                        C0            .byte	$C0
09390 20AE                        C0            .byte	$C0
09391 20AF                        C0            .byte	$C0
09392 20B0                        00            .byte	0
09393 20B1                        00            .byte	0
09394 20B2                        00            .byte	0
09395 20B3                        00            .byte	0
09396                                           ! 1317  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09397 20B4                        00            .byte	0
09398 20B5                        00            .byte	0
09399 20B6                        00            .byte	0
09400 20B7                        00            .byte	0
09401 20B8                        00            .byte	0
09402 20B9                        00            .byte	0
09403 20BA                        FE            .byte	$FE
09404 20BB                        06            .byte	6
09405 20BC                        06            .byte	6
09406 20BD                        06            .byte	6
09407 20BE                        00            .byte	0
09408 20BF                        00            .byte	0
09409 20C0                        00            .byte	0
09410 20C1                        00            .byte	0
09411                                           ! 1318  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09412 20C2                        00            .byte	0
09413 20C3                        C0            .byte	$C0
09414 20C4                        C0            .byte	$C0
09415 20C5                        C6            .byte	$C6
09416 20C6                        CC            .byte	$CC
09417 20C7                        D8            .byte	$D8
09418 20C8                        30            .byte	$30
09419 20C9                        60            .byte	$60
09420 20CA                        DC            .byte	$DC
09421 20CB                        86            .byte	$86
09422 20CC                        0C            .byte	$C
09423 20CD                        18            .byte	$18
09424 20CE                        3E            .byte	$3E
09425 20CF                        00            .byte	0
09426                                           ! 1319  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09427 20D0                        00            .byte	0
09428 20D1                        C0            .byte	$C0
09429 20D2                        C0            .byte	$C0
09430 20D3                        C6            .byte	$C6
09431 20D4                        CC            .byte	$CC
09432 20D5                        D8            .byte	$D8
09433 20D6                        30            .byte	$30
09434 20D7                        66            .byte	$66
09435 20D8                        CE            .byte	$CE
09436 20D9                        9E            .byte	$9E
09437 20DA                        3E            .byte	$3E
09438 20DB                        06            .byte	6
09439 20DC                        06            .byte	6
09440 20DD                        00            .byte	0
09441                                           ! 1320  0x00, 0x00, 0x18, 0x18, 0x
09442 20DE                        00            .byte	0
09443 20DF                        00            .byte	0
09444 20E0                        18            .byte	$18
09445 20E1                        18            .byte	$18
09446                                           ! 1320 00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09447 20E2                        00            .byte	0
09448 20E3                        18            .byte	$18
09449 20E4                        18            .byte	$18
09450 20E5                        3C            .byte	$3C
09451 20E6                        3C            .byte	$3C
09452 20E7                        3C            .byte	$3C
09453 20E8                        18            .byte	$18
09454 20E9                        00            .byte	0
09455 20EA                        00            .byte	0
09456 20EB                        00            .byte	0
09457                                           ! 1321  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09458 20EC                        00            .byte	0
09459 20ED                        00            .byte	0
09460 20EE                        00            .byte	0
09461 20EF                        00            .byte	0
09462 20F0                        36            .byte	$36
09463 20F1                        6C            .byte	$6C
09464 20F2                        D8            .byte	$D8
09465 20F3                        6C            .byte	$6C
09466 20F4                        36            .byte	$36
09467 20F5                        00            .byte	0
09468 20F6                        00            .byte	0
09469 20F7                        00            .byte	0
09470 20F8                        00            .byte	0
09471 20F9                        00            .byte	0
09472                                           ! 1322  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09473 20FA                        00            .byte	0
09474 20FB                        00            .byte	0
09475 20FC                        00            .byte	0
09476 20FD                        00            .byte	0
09477 20FE                        D8            .byte	$D8
09478 20FF                        6C            .byte	$6C
09479 2100                        36            .byte	$36
09480 2101                        6C            .byte	$6C
09481 2102                        D8            .byte	$D8
09482 2103                        00            .byte	0
09483 2104                        00            .byte	0
09484 2105                        00            .byte	0
09485 2106                        00            .byte	0
09486 2107                        00            .byte	0
09487                                           ! 1323  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09488 2108                        11            .byte	$11
09489 2109                        44            .byte	$44
09490 210A                        11            .byte	$11
09491 210B                        44            .byte	$44
09492 210C                        11            .byte	$11
09493 210D                        44            .byte	$44
09494 210E                        11            .byte	$11
09495 210F                        44            .byte	$44
09496 2110                        11            .byte	$11
09497 2111                        44            .byte	$44
09498 2112                        11            .byte	$11
09499 2113                        44            .byte	$44
09500 2114                        11            .byte	$11
09501 2115                        44            .byte	$44
09502                                           ! 1324  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09503 2116                        55            .byte	$55
09504 2117                        AA            .byte	$AA
09505 2118                        55            .byte	$55
09506 2119                        AA            .byte	$AA
09507 211A                        55            .byte	$55
09508 211B                        AA            .byte	$AA
09509 211C                        55            .byte	$55
09510 211D                        AA            .byte	$AA
09511 211E                        55            .byte	$55
09512 211F                        AA            .byte	$AA
09513 2120                        55            .byte	$55
09514 2121                        AA            .byte	$AA
09515 2122                        55            .byte	$55
09516 2123                        AA            .byte	$AA
09517                                           ! 1325  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09518 2124                        DD            .byte	$DD
09519 2125                        77            .byte	$77
09520 2126                        DD            .byte	$DD
09521 2127                        77            .byte	$77
09522 2128                        DD            .byte	$DD
09523 2129                        77            .byte	$77
09524 212A                        DD            .byte	$DD
09525 212B                        77            .byte	$77
09526 212C                        DD            .byte	$DD
09527 212D                        77            .byte	$77
09528 212E                        DD            .byte	$DD
09529 212F                        77            .byte	$77
09530 2130                        DD            .byte	$DD
09531 2131                        77            .byte	$77
09532                                           ! 1326  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09533 2132                        18            .byte	$18
09534 2133                        18            .byte	$18
09535 2134                        18            .byte	$18
09536 2135                        18            .byte	$18
09537 2136                        18            .byte	$18
09538 2137                        18            .byte	$18
09539 2138                        18            .byte	$18
09540 2139                        18            .byte	$18
09541 213A                        18            .byte	$18
09542 213B                        18            .byte	$18
09543 213C                        18            .byte	$18
09544 213D                        18            .byte	$18
09545 213E                        18            .byte	$18
09546 213F                        18            .byte	$18
09547                                           ! 1327  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09548 2140                        18            .byte	$18
09549 2141                        18            .byte	$18
09550 2142                        18            .byte	$18
09551 2143                        18            .byte	$18
09552 2144                        18            .byte	$18
09553 2145                        18            .byte	$18
09554 2146                        18            .byte	$18
09555 2147                        F8            .byte	$F8
09556 2148                        18            .byte	$18
09557 2149                        18            .byte	$18
09558 214A                        18            .byte	$18
09559 214B                        18            .byte	$18
09560 214C                        18            .byte	$18
09561 214D                        18            .byte	$18
09562                                           ! 1328  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09563 214E                        18            .byte	$18
09564 214F                        18            .byte	$18
09565 2150                        18            .byte	$18
09566 2151                        18            .byte	$18
09567 2152                        18            .byte	$18
09568 2153                        F8            .byte	$F8
09569 2154                        18            .byte	$18
09570 2155                        F8            .byte	$F8
09571 2156                        18            .byte	$18
09572 2157                        18            .byte	$18
09573 2158                        18            .byte	$18
09574 2159                        18            .byte	$18
09575 215A                        18            .byte	$18
09576 215B                        18            .byte	$18
09577                                           ! 1329  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09578 215C                        36            .byte	$36
09579 215D                        36            .byte	$36
09580 215E                        36            .byte	$36
09581 215F                        36            .byte	$36
09582 2160                        36            .byte	$36
09583 2161                        36            .byte	$36
09584 2162                        36            .byte	$36
09585 2163                        F6            .byte	$F6
09586 2164                        36            .byte	$36
09587 2165                        36            .byte	$36
09588 2166                        36            .byte	$36
09589 2167                        36            .byte	$36
09590 2168                        36            .byte	$36
09591 2169                        36            .byte	$36
09592                                           ! 1330  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09593 216A                        00            .byte	0
09594 216B                        00            .byte	0
09595 216C                        00            .byte	0
09596 216D                        00            .byte	0
09597 216E                        00            .byte	0
09598 216F                        00            .byte	0
09599 2170                        00            .byte	0
09600 2171                        FE            .byte	$FE
09601 2172                        36            .byte	$36
09602 2173                        36            .byte	$36
09603 2174                        36            .byte	$36
09604 2175                        36            .byte	$36
09605 2176                        36            .byte	$36
09606 2177                        36            .byte	$36
09607                                           ! 1331  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09608 2178                        00            .byte	0
09609 2179                        00            .byte	0
09610 217A                        00            .byte	0
09611 217B                        00            .byte	0
09612 217C                        00            .byte	0
09613 217D                        F8            .byte	$F8
09614 217E                        18            .byte	$18
09615 217F                        F8            .byte	$F8
09616 2180                        18            .byte	$18
09617 2181                        18            .byte	$18
09618 2182                        18            .byte	$18
09619 2183                        18            .byte	$18
09620 2184                        18            .byte	$18
09621 2185                        18            .byte	$18
09622                                           ! 1332  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09623 2186                        36            .byte	$36
09624 2187                        36            .byte	$36
09625 2188                        36            .byte	$36
09626 2189                        36            .byte	$36
09627 218A                        36            .byte	$36
09628 218B                        F6            .byte	$F6
09629 218C                        06            .byte	6
09630 218D                        F6            .byte	$F6
09631 218E                        36            .byte	$36
09632 218F                        36            .byte	$36
09633 2190                        36            .byte	$36
09634 2191                        36            .byte	$36
09635 2192                        36            .byte	$36
09636 2193                        36            .byte	$36
09637                                           ! 1333  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09638 2194                        36            .byte	$36
09639 2195                        36            .byte	$36
09640 2196                        36            .byte	$36
09641 2197                        36            .byte	$36
09642 2198                        36            .byte	$36
09643 2199                        36            .byte	$36
09644 219A                        36            .byte	$36
09645 219B                        36            .byte	$36
09646 219C                        36            .byte	$36
09647 219D                        36            .byte	$36
09648 219E                        36            .byte	$36
09649 219F                        36            .byte	$36
09650 21A0                        36            .byte	$36
09651 21A1                        36            .byte	$36
09652                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09653 21A2                        00            .byte	0
09654 21A3                        00            .byte	0
09655 21A4                        00            .byte	0
09656 21A5                        00            .byte	0
09657 21A6                        00            .byte	0
09658 21A7                        FE            .byte	$FE
09659 21A8                        06            .byte	6
09660 21A9                        F6            .byte	$F6
09661 21AA                        36            .byte	$36
09662 21AB                        36            .byte	$36
09663 21AC                        36            .byte	$36
09664 21AD                        36            .byte	$36
09665 21AE                        36            .byte	$36
09666 21AF                        36            .byte	$36
09667                                           ! 1335  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09668 21B0                        36            .byte	$36
09669 21B1                        36            .byte	$36
09670 21B2                        36            .byte	$36
09671 21B3                        36            .byte	$36
09672 21B4                        36            .byte	$36
09673 21B5                        F6            .byte	$F6
09674 21B6                        06            .byte	6
09675 21B7                        FE            .byte	$FE
09676 21B8                        00            .byte	0
09677 21B9                        00            .byte	0
09678 21BA                        00            .byte	0
09679 21BB                        00            .byte	0
09680 21BC                        00            .byte	0
09681 21BD                        00            .byte	0
09682                                           ! 1336  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09683 21BE                        36            .byte	$36
09684 21BF                        36            .byte	$36
09685 21C0                        36            .byte	$36
09686 21C1                        36            .byte	$36
09687 21C2                        36            .byte	$36
09688 21C3                        36            .byte	$36
09689 21C4                        36            .byte	$36
09690 21C5                        FE            .byte	$FE
09691 21C6                        00            .byte	0
09692 21C7                        00            .byte	0
09693 21C8                        00            .byte	0
09694 21C9                        00            .byte	0
09695 21CA                        00            .byte	0
09696 21CB                        00            .byte	0
09697                                           ! 1337  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09698 21CC                        18            .byte	$18
09699 21CD                        18            .byte	$18
09700 21CE                        18            .byte	$18
09701 21CF                        18            .byte	$18
09702 21D0                        18            .byte	$18
09703 21D1                        F8            .byte	$F8
09704 21D2                        18            .byte	$18
09705 21D3                        F8            .byte	$F8
09706 21D4                        00            .byte	0
09707 21D5                        00            .byte	0
09708 21D6                        00            .byte	0
09709 21D7                        00            .byte	0
09710 21D8                        00            .byte	0
09711 21D9                        00            .byte	0
09712                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09713 21DA                        00            .byte	0
09714 21DB                        00            .byte	0
09715 21DC                        00            .byte	0
09716 21DD                        00            .byte	0
09717 21DE                        00            .byte	0
09718 21DF                        00            .byte	0
09719 21E0                        00            .byte	0
09720 21E1                        F8            .byte	$F8
09721 21E2                        18            .byte	$18
09722 21E3                        18            .byte	$18
09723 21E4                        18            .byte	$18
09724 21E5                        18            .byte	$18
09725 21E6                        18            .byte	$18
09726 21E7                        18            .byte	$18
09727                                           ! 1339  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09728 21E8                        18            .byte	$18
09729 21E9                        18            .byte	$18
09730 21EA                        18            .byte	$18
09731 21EB                        18            .byte	$18
09732 21EC                        18            .byte	$18
09733 21ED                        18            .byte	$18
09734 21EE                        18            .byte	$18
09735 21EF                        1F            .byte	$1F
09736 21F0                        00            .byte	0
09737 21F1                        00            .byte	0
09738 21F2                        00            .byte	0
09739 21F3                        00            .byte	0
09740 21F4                        00            .byte	0
09741 21F5                        00            .byte	0
09742                                           ! 1340  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09743 21F6                        18            .byte	$18
09744 21F7                        18            .byte	$18
09745 21F8                        18            .byte	$18
09746 21F9                        18            .byte	$18
09747 21FA                        18            .byte	$18
09748 21FB                        18            .byte	$18
09749 21FC                        18            .byte	$18
09750 21FD                        FF            .byte	$FF
09751 21FE                        00            .byte	0
09752 21FF                        00            .byte	0
09753 2200                        00            .byte	0
09754 2201                        00            .byte	0
09755 2202                        00            .byte	0
09756 2203                        00            .byte	0
09757                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09758 2204                        00            .byte	0
09759 2205                        00            .byte	0
09760 2206                        00            .byte	0
09761 2207                        00            .byte	0
09762 2208                        00            .byte	0
09763 2209                        00            .byte	0
09764 220A                        00            .byte	0
09765 220B                        FF            .byte	$FF
09766 220C                        18            .byte	$18
09767 220D                        18            .byte	$18
09768 220E                        18            .byte	$18
09769 220F                        18            .byte	$18
09770 2210                        18            .byte	$18
09771 2211                        18            .byte	$18
09772                                           ! 1342  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09773 2212                        18            .byte	$18
09774 2213                        18            .byte	$18
09775 2214                        18            .byte	$18
09776 2215                        18            .byte	$18
09777 2216                        18            .byte	$18
09778 2217                        18            .byte	$18
09779 2218                        18            .byte	$18
09780 2219                        1F            .byte	$1F
09781 221A                        18            .byte	$18
09782 221B                        18            .byte	$18
09783 221C                        18            .byte	$18
09784 221D                        18            .byte	$18
09785 221E                        18            .byte	$18
09786 221F                        18            .byte	$18
09787                                           ! 1343  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09788 2220                        00            .byte	0
09789 2221                        00            .byte	0
09790 2222                        00            .byte	0
09791 2223                        00            .byte	0
09792 2224                        00            .byte	0
09793 2225                        00            .byte	0
09794 2226                        00            .byte	0
09795 2227                        FF            .byte	$FF
09796 2228                        00            .byte	0
09797 2229                        00            .byte	0
09798 222A                        00            .byte	0
09799 222B                        00            .byte	0
09800 222C                        00            .byte	0
09801 222D                        00            .byte	0
09802                                           ! 1344  0x18, 0x18, 0x18, 0x18, 0x18, 0x18
09803 222E                        18            .byte	$18
09804 222F                        18            .byte	$18
09805 2230                        18            .byte	$18
09806 2231                        18            .byte	$18
09807 2232                        18            .byte	$18
09808                                           ! 1344 , 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09809 2233                        18            .byte	$18
09810 2234                        18            .byte	$18
09811 2235                        FF            .byte	$FF
09812 2236                        18            .byte	$18
09813 2237                        18            .byte	$18
09814 2238                        18            .byte	$18
09815 2239                        18            .byte	$18
09816 223A                        18            .byte	$18
09817 223B                        18            .byte	$18
09818                                           ! 1345  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09819 223C                        18            .byte	$18
09820 223D                        18            .byte	$18
09821 223E                        18            .byte	$18
09822 223F                        18            .byte	$18
09823 2240                        18            .byte	$18
09824 2241                        1F            .byte	$1F
09825 2242                        18            .byte	$18
09826 2243                        1F            .byte	$1F
09827 2244                        18            .byte	$18
09828 2245                        18            .byte	$18
09829 2246                        18            .byte	$18
09830 2247                        18            .byte	$18
09831 2248                        18            .byte	$18
09832 2249                        18            .byte	$18
09833                                           ! 1346  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09834 224A                        36            .byte	$36
09835 224B                        36            .byte	$36
09836 224C                        36            .byte	$36
09837 224D                        36            .byte	$36
09838 224E                        36            .byte	$36
09839 224F                        36            .byte	$36
09840 2250                        36            .byte	$36
09841 2251                        37            .byte	$37
09842 2252                        36            .byte	$36
09843 2253                        36            .byte	$36
09844 2254                        36            .byte	$36
09845 2255                        36            .byte	$36
09846 2256                        36            .byte	$36
09847 2257                        36            .byte	$36
09848                                           ! 1347  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09849 2258                        36            .byte	$36
09850 2259                        36            .byte	$36
09851 225A                        36            .byte	$36
09852 225B                        36            .byte	$36
09853 225C                        36            .byte	$36
09854 225D                        37            .byte	$37
09855 225E                        30            .byte	$30
09856 225F                        3F            .byte	$3F
09857 2260                        00            .byte	0
09858 2261                        00            .byte	0
09859 2262                        00            .byte	0
09860 2263                        00            .byte	0
09861 2264                        00            .byte	0
09862 2265                        00            .byte	0
09863                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09864 2266                        00            .byte	0
09865 2267                        00            .byte	0
09866 2268                        00            .byte	0
09867 2269                        00            .byte	0
09868 226A                        00            .byte	0
09869 226B                        3F            .byte	$3F
09870 226C                        30            .byte	$30
09871 226D                        37            .byte	$37
09872 226E                        36            .byte	$36
09873 226F                        36            .byte	$36
09874 2270                        36            .byte	$36
09875 2271                        36            .byte	$36
09876 2272                        36            .byte	$36
09877 2273                        36            .byte	$36
09878                                           ! 1349  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09879 2274                        36            .byte	$36
09880 2275                        36            .byte	$36
09881 2276                        36            .byte	$36
09882 2277                        36            .byte	$36
09883 2278                        36            .byte	$36
09884 2279                        F7            .byte	$F7
09885 227A                        00            .byte	0
09886 227B                        FF            .byte	$FF
09887 227C                        00            .byte	0
09888 227D                        00            .byte	0
09889 227E                        00            .byte	0
09890 227F                        00            .byte	0
09891 2280                        00            .byte	0
09892 2281                        00            .byte	0
09893                                           ! 1350  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09894 2282                        00            .byte	0
09895 2283                        00            .byte	0
09896 2284                        00            .byte	0
09897 2285                        00            .byte	0
09898 2286                        00            .byte	0
09899 2287                        FF            .byte	$FF
09900 2288                        00            .byte	0
09901 2289                        F7            .byte	$F7
09902 228A                        36            .byte	$36
09903 228B                        36            .byte	$36
09904 228C                        36            .byte	$36
09905 228D                        36            .byte	$36
09906 228E                        36            .byte	$36
09907 228F                        36            .byte	$36
09908                                           ! 1351  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09909 2290                        36            .byte	$36
09910 2291                        36            .byte	$36
09911 2292                        36            .byte	$36
09912 2293                        36            .byte	$36
09913 2294                        36            .byte	$36
09914 2295                        37            .byte	$37
09915 2296                        30            .byte	$30
09916 2297                        37            .byte	$37
09917 2298                        36            .byte	$36
09918 2299                        36            .byte	$36
09919 229A                        36            .byte	$36
09920 229B                        36            .byte	$36
09921 229C                        36            .byte	$36
09922 229D                        36            .byte	$36
09923                                           ! 1352  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09924 229E                        00            .byte	0
09925 229F                        00            .byte	0
09926 22A0                        00            .byte	0
09927 22A1                        00            .byte	0
09928 22A2                        00            .byte	0
09929 22A3                        FF            .byte	$FF
09930 22A4                        00            .byte	0
09931 22A5                        FF            .byte	$FF
09932 22A6                        00            .byte	0
09933 22A7                        00            .byte	0
09934 22A8                        00            .byte	0
09935 22A9                        00            .byte	0
09936 22AA                        00            .byte	0
09937 22AB                        00            .byte	0
09938                                           ! 1353  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09939 22AC                        36            .byte	$36
09940 22AD                        36            .byte	$36
09941 22AE                        36            .byte	$36
09942 22AF                        36            .byte	$36
09943 22B0                        36            .byte	$36
09944 22B1                        F7            .byte	$F7
09945 22B2                        00            .byte	0
09946 22B3                        F7            .byte	$F7
09947 22B4                        36            .byte	$36
09948 22B5                        36            .byte	$36
09949 22B6                        36            .byte	$36
09950 22B7                        36            .byte	$36
09951 22B8                        36            .byte	$36
09952 22B9                        36            .byte	$36
09953                                           ! 1354  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09954 22BA                        18            .byte	$18
09955 22BB                        18            .byte	$18
09956 22BC                        18            .byte	$18
09957 22BD                        18            .byte	$18
09958 22BE                        18            .byte	$18
09959 22BF                        FF            .byte	$FF
09960 22C0                        00            .byte	0
09961 22C1                        FF            .byte	$FF
09962 22C2                        00            .byte	0
09963 22C3                        00            .byte	0
09964 22C4                        00            .byte	0
09965 22C5                        00            .byte	0
09966 22C6                        00            .byte	0
09967 22C7                        00            .byte	0
09968                                           ! 1355  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09969 22C8                        36            .byte	$36
09970 22C9                        36            .byte	$36
09971 22CA                        36            .byte	$36
09972 22CB                        36            .byte	$36
09973 22CC                        36            .byte	$36
09974 22CD                        36            .byte	$36
09975 22CE                        36            .byte	$36
09976 22CF                        FF            .byte	$FF
09977 22D0                        00            .byte	0
09978 22D1                        00            .byte	0
09979 22D2                        00            .byte	0
09980 22D3                        00            .byte	0
09981 22D4                        00            .byte	0
09982 22D5                        00            .byte	0
09983                                           ! 1356  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09984 22D6                        00            .byte	0
09985 22D7                        00            .byte	0
09986 22D8                        00            .byte	0
09987 22D9                        00            .byte	0
09988 22DA                        00            .byte	0
09989 22DB                        FF            .byte	$FF
09990 22DC                        00            .byte	0
09991 22DD                        FF            .byte	$FF
09992 22DE                        18            .byte	$18
09993 22DF                        18            .byte	$18
09994 22E0                        18            .byte	$18
09995 22E1                        18            .byte	$18
09996 22E2                        18            .byte	$18
09997 22E3                        18            .byte	$18
09998                                           ! 1357  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09999 22E4                        00            .byte	0
10000 22E5                        00            .byte	0
10001 22E6                        00            .byte	0
10002 22E7                        00            .byte	0
10003 22E8                        00            .byte	0
10004 22E9                        00            .byte	0
10005 22EA                        00            .byte	0
10006 22EB                        FF            .byte	$FF
10007 22EC                        36            .byte	$36
10008 22ED                        36            .byte	$36
10009 22EE                        36            .byte	$36
10010 22EF                        36            .byte	$36
10011 22F0                        36            .byte	$36
10012 22F1                        36            .byte	$36
10013                                           ! 1358  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10014 22F2                        36            .byte	$36
10015 22F3                        36            .byte	$36
10016 22F4                        36            .byte	$36
10017 22F5                        36            .byte	$36
10018 22F6                        36            .byte	$36
10019 22F7                        36            .byte	$36
10020 22F8                        36            .byte	$36
10021 22F9                        3F            .byte	$3F
10022 22FA                        00            .byte	0
10023 22FB                        00            .byte	0
10024 22FC                        00            .byte	0
10025 22FD                        00            .byte	0
10026 22FE                        00            .byte	0
10027 22FF                        00            .byte	0
10028                                           ! 1359  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10029 2300                        18            .byte	$18
10030 2301                        18            .byte	$18
10031 2302                        18            .byte	$18
10032 2303                        18            .byte	$18
10033 2304                        18            .byte	$18
10034 2305                        1F            .byte	$1F
10035 2306                        18            .byte	$18
10036 2307                        1F            .byte	$1F
10037 2308                        00            .byte	0
10038 2309                        00            .byte	0
10039 230A                        00            .byte	0
10040 230B                        00            .byte	0
10041 230C                        00            .byte	0
10042 230D                        00            .byte	0
10043                                           ! 1360  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10044 230E                        00            .byte	0
10045 230F                        00            .byte	0
10046 2310                        00            .byte	0
10047 2311                        00            .byte	0
10048 2312                        00            .byte	0
10049 2313                        1F            .byte	$1F
10050 2314                        18            .byte	$18
10051 2315                        1F            .byte	$1F
10052 2316                        18            .byte	$18
10053 2317                        18            .byte	$18
10054 2318                        18            .byte	$18
10055 2319                        18            .byte	$18
10056 231A                        18            .byte	$18
10057 231B                        18            .byte	$18
10058                                           ! 1361  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10059 231C                        00            .byte	0
10060 231D                        00            .byte	0
10061 231E                        00            .byte	0
10062 231F                        00            .byte	0
10063 2320                        00            .byte	0
10064 2321                        00            .byte	0
10065 2322                        00            .byte	0
10066 2323                        3F            .byte	$3F
10067 2324                        36            .byte	$36
10068 2325                        36            .byte	$36
10069 2326                        36            .byte	$36
10070 2327                        36            .byte	$36
10071 2328                        36            .byte	$36
10072 2329                        36            .byte	$36
10073                                           ! 1362  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10074 232A                        36            .byte	$36
10075 232B                        36            .byte	$36
10076 232C                        36            .byte	$36
10077 232D                        36            .byte	$36
10078 232E                        36            .byte	$36
10079 232F                        36            .byte	$36
10080 2330                        36            .byte	$36
10081 2331                        FF            .byte	$FF
10082 2332                        36            .byte	$36
10083 2333                        36            .byte	$36
10084 2334                        36            .byte	$36
10085 2335                        36            .byte	$36
10086 2336                        36            .byte	$36
10087 2337                        36            .byte	$36
10088                                           ! 1363  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10089 2338                        18            .byte	$18
10090 2339                        18            .byte	$18
10091 233A                        18            .byte	$18
10092 233B                        18            .byte	$18
10093 233C                        18            .byte	$18
10094 233D                        FF            .byte	$FF
10095 233E                        18            .byte	$18
10096 233F                        FF            .byte	$FF
10097 2340                        18            .byte	$18
10098 2341                        18            .byte	$18
10099 2342                        18            .byte	$18
10100 2343                        18            .byte	$18
10101 2344                        18            .byte	$18
10102 2345                        18            .byte	$18
10103                                           ! 1364  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10104 2346                        18            .byte	$18
10105 2347                        18            .byte	$18
10106 2348                        18            .byte	$18
10107 2349                        18            .byte	$18
10108 234A                        18            .byte	$18
10109 234B                        18            .byte	$18
10110 234C                        18            .byte	$18
10111 234D                        F8            .byte	$F8
10112 234E                        00            .byte	0
10113 234F                        00            .byte	0
10114 2350                        00            .byte	0
10115 2351                        00            .byte	0
10116 2352                        00            .byte	0
10117 2353                        00            .byte	0
10118                                           ! 1365  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10119 2354                        00            .byte	0
10120 2355                        00            .byte	0
10121 2356                        00            .byte	0
10122 2357                        00            .byte	0
10123 2358                        00            .byte	0
10124 2359                        00            .byte	0
10125 235A                        00            .byte	0
10126 235B                        1F            .byte	$1F
10127 235C                        18            .byte	$18
10128 235D                        18            .byte	$18
10129 235E                        18            .byte	$18
10130 235F                        18            .byte	$18
10131 2360                        18            .byte	$18
10132 2361                        18            .byte	$18
10133                                           ! 1366  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10134 2362                        FF            .byte	$FF
10135 2363                        FF            .byte	$FF
10136 2364                        FF            .byte	$FF
10137 2365                        FF            .byte	$FF
10138 2366                        FF            .byte	$FF
10139 2367                        FF            .byte	$FF
10140 2368                        FF            .byte	$FF
10141 2369                        FF            .byte	$FF
10142 236A                        FF            .byte	$FF
10143 236B                        FF            .byte	$FF
10144 236C                        FF            .byte	$FF
10145 236D                        FF            .byte	$FF
10146 236E                        FF            .byte	$FF
10147 236F                        FF            .byte	$FF
10148                                           ! 1367  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10149 2370                        00            .byte	0
10150 2371                        00            .byte	0
10151 2372                        00            .byte	0
10152 2373                        00            .byte	0
10153 2374                        00            .byte	0
10154 2375                        00            .byte	0
10155 2376                        00            .byte	0
10156 2377                        FF            .byte	$FF
10157 2378                        FF            .byte	$FF
10158 2379                        FF            .byte	$FF
10159 237A                        FF            .byte	$FF
10160 237B                        FF            .byte	$FF
10161 237C                        FF            .byte	$FF
10162 237D                        FF            .byte	$FF
10163                                           ! 1368  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
10164 237E                        F0            .byte	$F0
10165 237F                        F0            .byte	$F0
10166 2380                        F0            .byte	$F0
10167 2381                        F0            .byte	$F0
10168 2382                        F0            .byte	$F0
10169 2383                        F0            .byte	$F0
10170 2384                        F0            .byte	$F0
10171                                           ! 1368 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10172 2385                        F0            .byte	$F0
10173 2386                        F0            .byte	$F0
10174 2387                        F0            .byte	$F0
10175 2388                        F0            .byte	$F0
10176 2389                        F0            .byte	$F0
10177 238A                        F0            .byte	$F0
10178 238B                        F0            .byte	$F0
10179                                           ! 1369  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10180 238C                        0F            .byte	$F
10181 238D                        0F            .byte	$F
10182 238E                        0F            .byte	$F
10183 238F                        0F            .byte	$F
10184 2390                        0F            .byte	$F
10185 2391                        0F            .byte	$F
10186 2392                        0F            .byte	$F
10187 2393                        0F            .byte	$F
10188 2394                        0F            .byte	$F
10189 2395                        0F            .byte	$F
10190 2396                        0F            .byte	$F
10191 2397                        0F            .byte	$F
10192 2398                        0F            .byte	$F
10193 2399                        0F            .byte	$F
10194                                           ! 1370  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10195 239A                        FF            .byte	$FF
10196 239B                        FF            .byte	$FF
10197 239C                        FF            .byte	$FF
10198 239D                        FF            .byte	$FF
10199 239E                        FF            .byte	$FF
10200 239F                        FF            .byte	$FF
10201 23A0                        FF            .byte	$FF
10202 23A1                        00            .byte	0
10203 23A2                        00            .byte	0
10204 23A3                        00            .byte	0
10205 23A4                        00            .byte	0
10206 23A5                        00            .byte	0
10207 23A6                        00            .byte	0
10208 23A7                        00            .byte	0
10209                                           ! 1371  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10210 23A8                        00            .byte	0
10211 23A9                        00            .byte	0
10212 23AA                        00            .byte	0
10213 23AB                        00            .byte	0
10214 23AC                        00            .byte	0
10215 23AD                        76            .byte	$76
10216 23AE                        DC            .byte	$DC
10217 23AF                        D8            .byte	$D8
10218 23B0                        D8            .byte	$D8
10219 23B1                        DC            .byte	$DC
10220 23B2                        76            .byte	$76
10221 23B3                        00            .byte	0
10222 23B4                        00            .byte	0
10223 23B5                        00            .byte	0
10224                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10225 23B6                        00            .byte	0
10226 23B7                        00            .byte	0
10227 23B8                        00            .byte	0
10228 23B9                        00            .byte	0
10229 23BA                        7C            .byte	$7C
10230 23BB                        C6            .byte	$C6
10231 23BC                        FC            .byte	$FC
10232 23BD                        C6            .byte	$C6
10233 23BE                        C6            .byte	$C6
10234 23BF                        FC            .byte	$FC
10235 23C0                        C0            .byte	$C0
10236 23C1                        C0            .byte	$C0
10237 23C2                        40            .byte	$40
10238 23C3                        00            .byte	0
10239                                           ! 1373  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10240 23C4                        00            .byte	0
10241 23C5                        00            .byte	0
10242 23C6                        FE            .byte	$FE
10243 23C7                        C6            .byte	$C6
10244 23C8                        C6            .byte	$C6
10245 23C9                        C0            .byte	$C0
10246 23CA                        C0            .byte	$C0
10247 23CB                        C0            .byte	$C0
10248 23CC                        C0            .byte	$C0
10249 23CD                        C0            .byte	$C0
10250 23CE                        C0            .byte	$C0
10251 23CF                        00            .byte	0
10252 23D0                        00            .byte	0
10253 23D1                        00            .byte	0
10254                                           ! 1374  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10255 23D2                        00            .byte	0
10256 23D3                        00            .byte	0
10257 23D4                        00            .byte	0
10258 23D5                        00            .byte	0
10259 23D6                        FE            .byte	$FE
10260 23D7                        6C            .byte	$6C
10261 23D8                        6C            .byte	$6C
10262 23D9                        6C            .byte	$6C
10263 23DA                        6C            .byte	$6C
10264 23DB                        6C            .byte	$6C
10265 23DC                        6C            .byte	$6C
10266 23DD                        00            .byte	0
10267 23DE                        00            .byte	0
10268 23DF                        00            .byte	0
10269                                           ! 1375  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10270 23E0                        00            .byte	0
10271 23E1                        00            .byte	0
10272 23E2                        FE            .byte	$FE
10273 23E3                        C6            .byte	$C6
10274 23E4                        60            .byte	$60
10275 23E5                        30            .byte	$30
10276 23E6                        18            .byte	$18
10277 23E7                        30            .byte	$30
10278 23E8                        60            .byte	$60
10279 23E9                        C6            .byte	$C6
10280 23EA                        FE            .byte	$FE
10281 23EB                        00            .byte	0
10282 23EC                        00            .byte	0
10283 23ED                        00            .byte	0
10284                                           ! 1376  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10285 23EE                        00            .byte	0
10286 23EF                        00            .byte	0
10287 23F0                        00            .byte	0
10288 23F1                        00            .byte	0
10289 23F2                        00            .byte	0
10290 23F3                        7E            .byte	$7E
10291 23F4                        D8            .byte	$D8
10292 23F5                        D8            .byte	$D8
10293 23F6                        D8            .byte	$D8
10294 23F7                        D8            .byte	$D8
10295 23F8                        70            .byte	$70
10296 23F9                        00            .byte	0
10297 23FA                        00            .byte	0
10298 23FB                        00            .byte	0
10299                                           ! 1377  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10300 23FC                        00            .byte	0
10301 23FD                        00            .byte	0
10302 23FE                        00            .byte	0
10303 23FF                        00            .byte	0
10304 2400                        66            .byte	$66
10305 2401                        66            .byte	$66
10306 2402                        66            .byte	$66
10307 2403                        66            .byte	$66
10308 2404                        7C            .byte	$7C
10309 2405                        60            .byte	$60
10310 2406                        60            .byte	$60
10311 2407                        C0            .byte	$C0
10312 2408                        00            .byte	0
10313 2409                        00            .byte	0
10314                                           ! 1378  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10315 240A                        00            .byte	0
10316 240B                        00            .byte	0
10317 240C                        00            .byte	0
10318 240D                        00            .byte	0
10319 240E                        76            .byte	$76
10320 240F                        DC            .byte	$DC
10321 2410                        18            .byte	$18
10322 2411                        18            .byte	$18
10323 2412                        18            .byte	$18
10324 2413                        18            .byte	$18
10325 2414                        18            .byte	$18
10326 2415                        00            .byte	0
10327 2416                        00            .byte	0
10328 2417                        00            .byte	0
10329                                           ! 1379  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10330 2418                        00            .byte	0
10331 2419                        00            .byte	0
10332 241A                        7E            .byte	$7E
10333 241B                        18            .byte	$18
10334 241C                        3C            .byte	$3C
10335 241D                        66            .byte	$66
10336 241E                        66            .byte	$66
10337 241F                        66            .byte	$66
10338 2420                        3C            .byte	$3C
10339 2421                        18            .byte	$18
10340 2422                        7E            .byte	$7E
10341 2423                        00            .byte	0
10342 2424                        00            .byte	0
10343 2425                        00            .byte	0
10344                                           ! 1380  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10345 2426                        00            .byte	0
10346 2427                        00            .byte	0
10347 2428                        38            .byte	$38
10348 2429                        6C            .byte	$6C
10349 242A                        C6            .byte	$C6
10350 242B                        C6            .byte	$C6
10351 242C                        FE            .byte	$FE
10352 242D                        C6            .byte	$C6
10353 242E                        C6            .byte	$C6
10354 242F                        6C            .byte	$6C
10355 2430                        38            .byte	$38
10356 2431                        00            .byte	0
10357 2432                        00            .byte	0
10358 2433                        00            .byte	0
10359                                           ! 1381  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10360 2434                        00            .byte	0
10361 2435                        00            .byte	0
10362 2436                        38            .byte	$38
10363 2437                        6C            .byte	$6C
10364 2438                        C6            .byte	$C6
10365 2439                        C6            .byte	$C6
10366 243A                        C6            .byte	$C6
10367 243B                        6C            .byte	$6C
10368 243C                        6C            .byte	$6C
10369 243D                        6C            .byte	$6C
10370 243E                        EE            .byte	$EE
10371 243F                        00            .byte	0
10372 2440                        00            .byte	0
10373 2441                        00            .byte	0
10374                                           ! 1382  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10375 2442                        00            .byte	0
10376 2443                        00            .byte	0
10377 2444                        1E            .byte	$1E
10378 2445                        30            .byte	$30
10379 2446                        18            .byte	$18
10380 2447                        0C            .byte	$C
10381 2448                        3E            .byte	$3E
10382 2449                        66            .byte	$66
10383 244A                        66            .byte	$66
10384 244B                        66            .byte	$66
10385 244C                        3C            .byte	$3C
10386 244D                        00            .byte	0
10387 244E                        00            .byte	0
10388 244F                        00            .byte	0
10389                                           ! 1383  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10390 2450                        00            .byte	0
10391 2451                        00            .byte	0
10392 2452                        00            .byte	0
10393 2453                        00            .byte	0
10394 2454                        00            .byte	0
10395 2455                        7E            .byte	$7E
10396 2456                        DB            .byte	$DB
10397 2457                        DB            .byte	$DB
10398 2458                        7E            .byte	$7E
10399 2459                        00            .byte	0
10400 245A                        00            .byte	0
10401 245B                        00            .byte	0
10402 245C                        00            .byte	0
10403 245D                        00            .byte	0
10404                                           ! 1384  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10405 245E                        00            .byte	0
10406 245F                        00            .byte	0
10407 2460                        03            .byte	3
10408 2461                        06            .byte	6
10409 2462                        7E            .byte	$7E
10410 2463                        DB            .byte	$DB
10411 2464                        DB            .byte	$DB
10412 2465                        F3            .byte	$F3
10413 2466                        7E            .byte	$7E
10414 2467                        60            .byte	$60
10415 2468                        C0            .byte	$C0
10416 2469                        00            .byte	0
10417 246A                        00            .byte	0
10418 246B                        00            .byte	0
10419                                           ! 1385  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10420 246C                        00            .byte	0
10421 246D                        00            .byte	0
10422 246E                        1C            .byte	$1C
10423 246F                        30            .byte	$30
10424 2470                        60            .byte	$60
10425 2471                        60            .byte	$60
10426 2472                        7C            .byte	$7C
10427 2473                        60            .byte	$60
10428 2474                        60            .byte	$60
10429 2475                        30            .byte	$30
10430 2476                        1C            .byte	$1C
10431 2477                        00            .byte	0
10432 2478                        00            .byte	0
10433 2479                        00            .byte	0
10434                                           ! 1386  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10435 247A                        00            .byte	0
10436 247B                        00            .byte	0
10437 247C                        00            .byte	0
10438 247D                        7C            .byte	$7C
10439 247E                        C6            .byte	$C6
10440 247F                        C6            .byte	$C6
10441 2480                        C6            .byte	$C6
10442 2481                        C6            .byte	$C6
10443 2482                        C6            .byte	$C6
10444 2483                        C6            .byte	$C6
10445 2484                        C6            .byte	$C6
10446 2485                        00            .byte	0
10447 2486                        00            .byte	0
10448 2487                        00            .byte	0
10449                                           ! 1387  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10450 2488                        00            .byte	0
10451 2489                        00            .byte	0
10452 248A                        00            .byte	0
10453 248B                        FE            .byte	$FE
10454 248C                        00            .byte	0
10455 248D                        00            .byte	0
10456 248E                        FE            .byte	$FE
10457 248F                        00            .byte	0
10458 2490                        00            .byte	0
10459 2491                        FE            .byte	$FE
10460 2492                        00            .byte	0
10461 2493                        00            .byte	0
10462 2494                        00            .byte	0
10463 2495                        00            .byte	0
10464                                           ! 1388  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10465 2496                        00            .byte	0
10466 2497                        00            .byte	0
10467 2498                        00            .byte	0
10468 2499                        18            .byte	$18
10469 249A                        18            .byte	$18
10470 249B                        7E            .byte	$7E
10471 249C                        18            .byte	$18
10472 249D                        18            .byte	$18
10473 249E                        00            .byte	0
10474 249F                        00            .byte	0
10475 24A0                        FF            .byte	$FF
10476 24A1                        00            .byte	0
10477 24A2                        00            .byte	0
10478 24A3                        00            .byte	0
10479                                           ! 1389  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10480 24A4                        00            .byte	0
10481 24A5                        00            .byte	0
10482 24A6                        30            .byte	$30
10483 24A7                        18            .byte	$18
10484 24A8                        0C            .byte	$C
10485 24A9                        06            .byte	6
10486 24AA                        0C            .byte	$C
10487 24AB                        18            .byte	$18
10488 24AC                        30            .byte	$30
10489 24AD                        00            .byte	0
10490 24AE                        7E            .byte	$7E
10491 24AF                        00            .byte	0
10492 24B0                        00            .byte	0
10493 24B1                        00            .byte	0
10494                                           ! 1390  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10495 24B2                        00            .byte	0
10496 24B3                        00            .byte	0
10497 24B4                        0C            .byte	$C
10498 24B5                        18            .byte	$18
10499 24B6                        30            .byte	$30
10500 24B7                        60            .byte	$60
10501 24B8                        30            .byte	$30
10502 24B9                        18            .byte	$18
10503 24BA                        0C            .byte	$C
10504 24BB                        00            .byte	0
10505 24BC                        7E            .byte	$7E
10506 24BD                        00            .byte	0
10507 24BE                        00            .byte	0
10508 24BF                        00            .byte	0
10509                                           ! 1391  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10510 24C0                        00            .byte	0
10511 24C1                        00            .byte	0
10512 24C2                        0E            .byte	$E
10513 24C3                        1B            .byte	$1B
10514 24C4                        1B            .byte	$1B
10515 24C5                        18            .byte	$18
10516 24C6                        18            .byte	$18
10517 24C7                        18            .byte	$18
10518 24C8                        18            .byte	$18
10519 24C9                        18            .byte	$18
10520 24CA                        18            .byte	$18
10521 24CB                        18            .byte	$18
10522 24CC                        18            .byte	$18
10523 24CD                        18            .byte	$18
10524                                           ! 1392  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x
10525 24CE                        18            .byte	$18
10526 24CF                        18            .byte	$18
10527 24D0                        18            .byte	$18
10528 24D1                        18            .byte	$18
10529 24D2                        18            .byte	$18
10530 24D3                        18            .byte	$18
10531 24D4                        18            .byte	$18
10532 24D5                        18            .byte	$18
10533                                           ! 1392 d8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10534 24D6                        D8            .byte	$D8
10535 24D7                        D8            .byte	$D8
10536 24D8                        70            .byte	$70
10537 24D9                        00            .byte	0
10538 24DA                        00            .byte	0
10539 24DB                        00            .byte	0
10540                                           ! 1393  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10541 24DC                        00            .byte	0
10542 24DD                        00            .byte	0
10543 24DE                        00            .byte	0
10544 24DF                        18            .byte	$18
10545 24E0                        18            .byte	$18
10546 24E1                        00            .byte	0
10547 24E2                        7E            .byte	$7E
10548 24E3                        00            .byte	0
10549 24E4                        18            .byte	$18
10550 24E5                        18            .byte	$18
10551 24E6                        00            .byte	0
10552 24E7                        00            .byte	0
10553 24E8                        00            .byte	0
10554 24E9                        00            .byte	0
10555                                           ! 1394  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10556 24EA                        00            .byte	0
10557 24EB                        00            .byte	0
10558 24EC                        00            .byte	0
10559 24ED                        00            .byte	0
10560 24EE                        76            .byte	$76
10561 24EF                        DC            .byte	$DC
10562 24F0                        00            .byte	0
10563 24F1                        76            .byte	$76
10564 24F2                        DC            .byte	$DC
10565 24F3                        00            .byte	0
10566 24F4                        00            .byte	0
10567 24F5                        00            .byte	0
10568 24F6                        00            .byte	0
10569 24F7                        00            .byte	0
10570                                           ! 1395  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10571 24F8                        00            .byte	0
10572 24F9                        38            .byte	$38
10573 24FA                        6C            .byte	$6C
10574 24FB                        6C            .byte	$6C
10575 24FC                        38            .byte	$38
10576 24FD                        00            .byte	0
10577 24FE                        00            .byte	0
10578 24FF                        00            .byte	0
10579 2500                        00            .byte	0
10580 2501                        00            .byte	0
10581 2502                        00            .byte	0
10582 2503                        00            .byte	0
10583 2504                        00            .byte	0
10584 2505                        00            .byte	0
10585                                           ! 1396  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10586 2506                        00            .byte	0
10587 2507                        00            .byte	0
10588 2508                        00            .byte	0
10589 2509                        00            .byte	0
10590 250A                        00            .byte	0
10591 250B                        00            .byte	0
10592 250C                        18            .byte	$18
10593 250D                        18            .byte	$18
10594 250E                        00            .byte	0
10595 250F                        00            .byte	0
10596 2510                        00            .byte	0
10597 2511                        00            .byte	0
10598 2512                        00            .byte	0
10599 2513                        00            .byte	0
10600                                           ! 1397  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10601 2514                        00            .byte	0
10602 2515                        00            .byte	0
10603 2516                        00            .byte	0
10604 2517                        00            .byte	0
10605 2518                        00            .byte	0
10606 2519                        00            .byte	0
10607 251A                        00            .byte	0
10608 251B                        18            .byte	$18
10609 251C                        00            .byte	0
10610 251D                        00            .byte	0
10611 251E                        00            .byte	0
10612 251F                        00            .byte	0
10613 2520                        00            .byte	0
10614 2521                        00            .byte	0
10615                                           ! 1398  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10616 2522                        00            .byte	0
10617 2523                        0F            .byte	$F
10618 2524                        0C            .byte	$C
10619 2525                        0C            .byte	$C
10620 2526                        0C            .byte	$C
10621 2527                        0C            .byte	$C
10622 2528                        0C            .byte	$C
10623 2529                        EC            .byte	$EC
10624 252A                        6C            .byte	$6C
10625 252B                        3C            .byte	$3C
10626 252C                        1C            .byte	$1C
10627 252D                        00            .byte	0
10628 252E                        00            .byte	0
10629 252F                        00            .byte	0
10630                                           ! 1399  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10631 2530                        00            .byte	0
10632 2531                        D8            .byte	$D8
10633 2532                        6C            .byte	$6C
10634 2533                        6C            .byte	$6C
10635 2534                        6C            .byte	$6C
10636 2535                        6C            .byte	$6C
10637 2536                        6C            .byte	$6C
10638 2537                        00            .byte	0
10639 2538                        00            .byte	0
10640 2539                        00            .byte	0
10641 253A                        00            .byte	0
10642 253B                        00            .byte	0
10643 253C                        00            .byte	0
10644 253D                        00            .byte	0
10645                                           ! 1400  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10646 253E                        00            .byte	0
10647 253F                        70            .byte	$70
10648 2540                        D8            .byte	$D8
10649 2541                        30            .byte	$30
10650 2542                        60            .byte	$60
10651 2543                        C8            .byte	$C8
10652 2544                        F8            .byte	$F8
10653 2545                        00            .byte	0
10654 2546                        00            .byte	0
10655 2547                        00            .byte	0
10656 2548                        00            .byte	0
10657 2549                        00            .byte	0
10658 254A                        00            .byte	0
10659 254B                        00            .byte	0
10660                                           ! 1401  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10661 254C                        00            .byte	0
10662 254D                        00            .byte	0
10663 254E                        00            .byte	0
10664 254F                        00            .byte	0
10665 2550                        7C            .byte	$7C
10666 2551                        7C            .byte	$7C
10667 2552                        7C            .byte	$7C
10668 2553                        7C            .byte	$7C
10669 2554                        7C            .byte	$7C
10670 2555                        7C            .byte	$7C
10671 2556                        00            .byte	0
10672 2557                        00            .byte	0
10673 2558                        00            .byte	0
10674 2559                        00            .byte	0
10675                                           ! 1402  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10676 255A                        00            .byte	0
10677 255B                        00            .byte	0
10678 255C                        00            .byte	0
10679 255D                        00            .byte	0
10680 255E                        00            .byte	0
10681 255F                        00            .byte	0
10682 2560                        00            .byte	0
10683 2561                        00            .byte	0
10684 2562                        00            .byte	0
10685 2563                        00            .byte	0
10686 2564                        00            .byte	0
10687 2565                        00            .byte	0
10688 2566                        00            .byte	0
10689                                           ! 1403 };
10690 2567                        00            .byte	0
10691                                           !BCC_EOS
10692                                           ! 1404 static Bit8u vgafont16[256*16]=
10693                                           ! 1405 {
10694                       00002568            _vgafont16:
10695                                           ! 1406  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10696 2568                        00            .byte	0
10697 2569                        00            .byte	0
10698 256A                        00            .byte	0
10699 256B                        00            .byte	0
10700 256C                        00            .byte	0
10701 256D                        00            .byte	0
10702 256E                        00            .byte	0
10703 256F                        00            .byte	0
10704 2570                        00            .byte	0
10705 2571                        00            .byte	0
10706 2572                        00            .byte	0
10707 2573                        00            .byte	0
10708 2574                        00            .byte	0
10709 2575                        00            .byte	0
10710 2576                        00            .byte	0
10711 2577                        00            .byte	0
10712                                           ! 1407  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10713 2578                        00            .byte	0
10714 2579                        00            .byte	0
10715 257A                        7E            .byte	$7E
10716 257B                        81            .byte	$81
10717 257C                        A5            .byte	$A5
10718 257D                        81            .byte	$81
10719 257E                        81            .byte	$81
10720 257F                        BD            .byte	$BD
10721 2580                        99            .byte	$99
10722 2581                        81            .byte	$81
10723 2582                        81            .byte	$81
10724 2583                        7E            .byte	$7E
10725 2584                        00            .byte	0
10726 2585                        00            .byte	0
10727 2586                        00            .byte	0
10728 2587                        00            .byte	0
10729                                           ! 1408  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10730 2588                        00            .byte	0
10731 2589                        00            .byte	0
10732 258A                        7E            .byte	$7E
10733 258B                        FF            .byte	$FF
10734 258C                        DB            .byte	$DB
10735 258D                        FF            .byte	$FF
10736 258E                        FF            .byte	$FF
10737 258F                        C3            .byte	$C3
10738 2590                        E7            .byte	$E7
10739 2591                        FF            .byte	$FF
10740 2592                        FF            .byte	$FF
10741 2593                        7E            .byte	$7E
10742 2594                        00            .byte	0
10743 2595                        00            .byte	0
10744 2596                        00            .byte	0
10745 2597                        00            .byte	0
10746                                           ! 1409  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10747 2598                        00            .byte	0
10748 2599                        00            .byte	0
10749 259A                        00            .byte	0
10750 259B                        00            .byte	0
10751 259C                        6C            .byte	$6C
10752 259D                        FE            .byte	$FE
10753 259E                        FE            .byte	$FE
10754 259F                        FE            .byte	$FE
10755 25A0                        FE            .byte	$FE
10756 25A1                        7C            .byte	$7C
10757 25A2                        38            .byte	$38
10758 25A3                        10            .byte	$10
10759 25A4                        00            .byte	0
10760 25A5                        00            .byte	0
10761 25A6                        00            .byte	0
10762 25A7                        00            .byte	0
10763                                           ! 1410  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10764 25A8                        00            .byte	0
10765 25A9                        00            .byte	0
10766 25AA                        00            .byte	0
10767 25AB                        00            .byte	0
10768 25AC                        10            .byte	$10
10769 25AD                        38            .byte	$38
10770 25AE                        7C            .byte	$7C
10771 25AF                        FE            .byte	$FE
10772 25B0                        7C            .byte	$7C
10773 25B1                        38            .byte	$38
10774 25B2                        10            .byte	$10
10775 25B3                        00            .byte	0
10776 25B4                        00            .byte	0
10777 25B5                        00            .byte	0
10778 25B6                        00            .byte	0
10779 25B7                        00            .byte	0
10780                                           ! 1411  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10781 25B8                        00            .byte	0
10782 25B9                        00            .byte	0
10783 25BA                        00            .byte	0
10784 25BB                        18            .byte	$18
10785 25BC                        3C            .byte	$3C
10786 25BD                        3C            .byte	$3C
10787 25BE                        E7            .byte	$E7
10788 25BF                        E7            .byte	$E7
10789 25C0                        E7            .byte	$E7
10790 25C1                        18            .byte	$18
10791 25C2                        18            .byte	$18
10792 25C3                        3C            .byte	$3C
10793 25C4                        00            .byte	0
10794 25C5                        00            .byte	0
10795 25C6                        00            .byte	0
10796 25C7                        00            .byte	0
10797                                           ! 1412  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10798 25C8                        00            .byte	0
10799 25C9                        00            .byte	0
10800 25CA                        00            .byte	0
10801 25CB                        18            .byte	$18
10802 25CC                        3C            .byte	$3C
10803 25CD                        7E            .byte	$7E
10804 25CE                        FF            .byte	$FF
10805 25CF                        FF            .byte	$FF
10806 25D0                        7E            .byte	$7E
10807 25D1                        18            .byte	$18
10808 25D2                        18            .byte	$18
10809 25D3                        3C            .byte	$3C
10810 25D4                        00            .byte	0
10811 25D5                        00            .byte	0
10812 25D6                        00            .byte	0
10813 25D7                        00            .byte	0
10814                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10815 25D8                        00            .byte	0
10816 25D9                        00            .byte	0
10817 25DA                        00            .byte	0
10818 25DB                        00            .byte	0
10819 25DC                        00            .byte	0
10820 25DD                        00            .byte	0
10821 25DE                        18            .byte	$18
10822 25DF                        3C            .byte	$3C
10823 25E0                        3C            .byte	$3C
10824 25E1                        18            .byte	$18
10825 25E2                        00            .byte	0
10826 25E3                        00            .byte	0
10827 25E4                        00            .byte	0
10828 25E5                        00            .byte	0
10829 25E6                        00            .byte	0
10830 25E7                        00            .byte	0
10831                                           ! 1414  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10832 25E8                        FF            .byte	$FF
10833 25E9                        FF            .byte	$FF
10834 25EA                        FF            .byte	$FF
10835 25EB                        FF            .byte	$FF
10836 25EC                        FF            .byte	$FF
10837 25ED                        FF            .byte	$FF
10838 25EE                        E7            .byte	$E7
10839 25EF                        C3            .byte	$C3
10840 25F0                        C3            .byte	$C3
10841 25F1                        E7            .byte	$E7
10842 25F2                        FF            .byte	$FF
10843 25F3                        FF            .byte	$FF
10844 25F4                        FF            .byte	$FF
10845 25F5                        FF            .byte	$FF
10846 25F6                        FF            .byte	$FF
10847 25F7                        FF            .byte	$FF
10848                                           ! 1415  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10849 25F8                        00            .byte	0
10850 25F9                        00            .byte	0
10851 25FA                        00            .byte	0
10852 25FB                        00            .byte	0
10853 25FC                        00            .byte	0
10854 25FD                        3C            .byte	$3C
10855 25FE                        66            .byte	$66
10856 25FF                        42            .byte	$42
10857 2600                        42            .byte	$42
10858 2601                        66            .byte	$66
10859 2602                        3C            .byte	$3C
10860 2603                        00            .byte	0
10861 2604                        00            .byte	0
10862 2605                        00            .byte	0
10863 2606                        00            .byte	0
10864 2607                        00            .byte	0
10865                                           ! 1416  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10866 2608                        FF            .byte	$FF
10867 2609                        FF            .byte	$FF
10868 260A                        FF            .byte	$FF
10869 260B                        FF            .byte	$FF
10870 260C                        FF            .byte	$FF
10871 260D                        C3            .byte	$C3
10872 260E                        99            .byte	$99
10873 260F                        BD            .byte	$BD
10874 2610                        BD            .byte	$BD
10875 2611                        99            .byte	$99
10876 2612                        C3            .byte	$C3
10877 2613                        FF            .byte	$FF
10878 2614                        FF            .byte	$FF
10879 2615                        FF            .byte	$FF
10880 2616                        FF            .byte	$FF
10881 2617                        FF            .byte	$FF
10882                                           ! 1417  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 
10883 2618                        00            .byte	0
10884 2619                        00            .byte	0
10885 261A                        1E            .byte	$1E
10886 261B                        0E            .byte	$E
10887 261C                        1A            .byte	$1A
10888 261D                        32            .byte	$32
10889 261E                        78            .byte	$78
10890 261F                        CC            .byte	$CC
10891 2620                        CC            .byte	$CC
10892 2621                        CC            .byte	$CC
10893                                           ! 1417 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10894 2622                        CC            .byte	$CC
10895 2623                        78            .byte	$78
10896 2624                        00            .byte	0
10897 2625                        00            .byte	0
10898 2626                        00            .byte	0
10899 2627                        00            .byte	0
10900                                           ! 1418  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10901 2628                        00            .byte	0
10902 2629                        00            .byte	0
10903 262A                        3C            .byte	$3C
10904 262B                        66            .byte	$66
10905 262C                        66            .byte	$66
10906 262D                        66            .byte	$66
10907 262E                        66            .byte	$66
10908 262F                        3C            .byte	$3C
10909 2630                        18            .byte	$18
10910 2631                        7E            .byte	$7E
10911 2632                        18            .byte	$18
10912 2633                        18            .byte	$18
10913 2634                        00            .byte	0
10914 2635                        00            .byte	0
10915 2636                        00            .byte	0
10916 2637                        00            .byte	0
10917                                           ! 1419  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10918 2638                        00            .byte	0
10919 2639                        00            .byte	0
10920 263A                        3F            .byte	$3F
10921 263B                        33            .byte	$33
10922 263C                        3F            .byte	$3F
10923 263D                        30            .byte	$30
10924 263E                        30            .byte	$30
10925 263F                        30            .byte	$30
10926 2640                        30            .byte	$30
10927 2641                        70            .byte	$70
10928 2642                        F0            .byte	$F0
10929 2643                        E0            .byte	$E0
10930 2644                        00            .byte	0
10931 2645                        00            .byte	0
10932 2646                        00            .byte	0
10933 2647                        00            .byte	0
10934                                           ! 1420  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10935 2648                        00            .byte	0
10936 2649                        00            .byte	0
10937 264A                        7F            .byte	$7F
10938 264B                        63            .byte	$63
10939 264C                        7F            .byte	$7F
10940 264D                        63            .byte	$63
10941 264E                        63            .byte	$63
10942 264F                        63            .byte	$63
10943 2650                        63            .byte	$63
10944 2651                        67            .byte	$67
10945 2652                        E7            .byte	$E7
10946 2653                        E6            .byte	$E6
10947 2654                        C0            .byte	$C0
10948 2655                        00            .byte	0
10949 2656                        00            .byte	0
10950 2657                        00            .byte	0
10951                                           ! 1421  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10952 2658                        00            .byte	0
10953 2659                        00            .byte	0
10954 265A                        00            .byte	0
10955 265B                        18            .byte	$18
10956 265C                        18            .byte	$18
10957 265D                        DB            .byte	$DB
10958 265E                        3C            .byte	$3C
10959 265F                        E7            .byte	$E7
10960 2660                        3C            .byte	$3C
10961 2661                        DB            .byte	$DB
10962 2662                        18            .byte	$18
10963 2663                        18            .byte	$18
10964 2664                        00            .byte	0
10965 2665                        00            .byte	0
10966 2666                        00            .byte	0
10967 2667                        00            .byte	0
10968                                           ! 1422  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10969 2668                        00            .byte	0
10970 2669                        80            .byte	$80
10971 266A                        C0            .byte	$C0
10972 266B                        E0            .byte	$E0
10973 266C                        F0            .byte	$F0
10974 266D                        F8            .byte	$F8
10975 266E                        FE            .byte	$FE
10976 266F                        F8            .byte	$F8
10977 2670                        F0            .byte	$F0
10978 2671                        E0            .byte	$E0
10979 2672                        C0            .byte	$C0
10980 2673                        80            .byte	$80
10981 2674                        00            .byte	0
10982 2675                        00            .byte	0
10983 2676                        00            .byte	0
10984 2677                        00            .byte	0
10985                                           ! 1423  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10986 2678                        00            .byte	0
10987 2679                        02            .byte	2
10988 267A                        06            .byte	6
10989 267B                        0E            .byte	$E
10990 267C                        1E            .byte	$1E
10991 267D                        3E            .byte	$3E
10992 267E                        FE            .byte	$FE
10993 267F                        3E            .byte	$3E
10994 2680                        1E            .byte	$1E
10995 2681                        0E            .byte	$E
10996 2682                        06            .byte	6
10997 2683                        02            .byte	2
10998 2684                        00            .byte	0
10999 2685                        00            .byte	0
11000 2686                        00            .byte	0
11001 2687                        00            .byte	0
11002                                           ! 1424  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11003 2688                        00            .byte	0
11004 2689                        00            .byte	0
11005 268A                        18            .byte	$18
11006 268B                        3C            .byte	$3C
11007 268C                        7E            .byte	$7E
11008 268D                        18            .byte	$18
11009 268E                        18            .byte	$18
11010 268F                        18            .byte	$18
11011 2690                        7E            .byte	$7E
11012 2691                        3C            .byte	$3C
11013 2692                        18            .byte	$18
11014 2693                        00            .byte	0
11015 2694                        00            .byte	0
11016 2695                        00            .byte	0
11017 2696                        00            .byte	0
11018 2697                        00            .byte	0
11019                                           ! 1425  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11020 2698                        00            .byte	0
11021 2699                        00            .byte	0
11022 269A                        66            .byte	$66
11023 269B                        66            .byte	$66
11024 269C                        66            .byte	$66
11025 269D                        66            .byte	$66
11026 269E                        66            .byte	$66
11027 269F                        66            .byte	$66
11028 26A0                        66            .byte	$66
11029 26A1                        00            .byte	0
11030 26A2                        66            .byte	$66
11031 26A3                        66            .byte	$66
11032 26A4                        00            .byte	0
11033 26A5                        00            .byte	0
11034 26A6                        00            .byte	0
11035 26A7                        00            .byte	0
11036                                           ! 1426  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11037 26A8                        00            .byte	0
11038 26A9                        00            .byte	0
11039 26AA                        7F            .byte	$7F
11040 26AB                        DB            .byte	$DB
11041 26AC                        DB            .byte	$DB
11042 26AD                        DB            .byte	$DB
11043 26AE                        7B            .byte	$7B
11044 26AF                        1B            .byte	$1B
11045 26B0                        1B            .byte	$1B
11046 26B1                        1B            .byte	$1B
11047 26B2                        1B            .byte	$1B
11048 26B3                        1B            .byte	$1B
11049 26B4                        00            .byte	0
11050 26B5                        00            .byte	0
11051 26B6                        00            .byte	0
11052 26B7                        00            .byte	0
11053                                           ! 1427  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11054 26B8                        00            .byte	0
11055 26B9                        7C            .byte	$7C
11056 26BA                        C6            .byte	$C6
11057 26BB                        60            .byte	$60
11058 26BC                        38            .byte	$38
11059 26BD                        6C            .byte	$6C
11060 26BE                        C6            .byte	$C6
11061 26BF                        C6            .byte	$C6
11062 26C0                        6C            .byte	$6C
11063 26C1                        38            .byte	$38
11064 26C2                        0C            .byte	$C
11065 26C3                        C6            .byte	$C6
11066 26C4                        7C            .byte	$7C
11067 26C5                        00            .byte	0
11068 26C6                        00            .byte	0
11069 26C7                        00            .byte	0
11070                                           ! 1428  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11071 26C8                        00            .byte	0
11072 26C9                        00            .byte	0
11073 26CA                        00            .byte	0
11074 26CB                        00            .byte	0
11075 26CC                        00            .byte	0
11076 26CD                        00            .byte	0
11077 26CE                        00            .byte	0
11078 26CF                        00            .byte	0
11079 26D0                        FE            .byte	$FE
11080 26D1                        FE            .byte	$FE
11081 26D2                        FE            .byte	$FE
11082 26D3                        FE            .byte	$FE
11083 26D4                        00            .byte	0
11084 26D5                        00            .byte	0
11085 26D6                        00            .byte	0
11086 26D7                        00            .byte	0
11087                                           ! 1429  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11088 26D8                        00            .byte	0
11089 26D9                        00            .byte	0
11090 26DA                        18            .byte	$18
11091 26DB                        3C            .byte	$3C
11092 26DC                        7E            .byte	$7E
11093 26DD                        18            .byte	$18
11094 26DE                        18            .byte	$18
11095 26DF                        18            .byte	$18
11096 26E0                        7E            .byte	$7E
11097 26E1                        3C            .byte	$3C
11098 26E2                        18            .byte	$18
11099 26E3                        7E            .byte	$7E
11100 26E4                        00            .byte	0
11101 26E5                        00            .byte	0
11102 26E6                        00            .byte	0
11103 26E7                        00            .byte	0
11104                                           ! 1430  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11105 26E8                        00            .byte	0
11106 26E9                        00            .byte	0
11107 26EA                        18            .byte	$18
11108 26EB                        3C            .byte	$3C
11109 26EC                        7E            .byte	$7E
11110 26ED                        18            .byte	$18
11111 26EE                        18            .byte	$18
11112 26EF                        18            .byte	$18
11113 26F0                        18            .byte	$18
11114 26F1                        18            .byte	$18
11115 26F2                        18            .byte	$18
11116 26F3                        18            .byte	$18
11117 26F4                        00            .byte	0
11118 26F5                        00            .byte	0
11119 26F6                        00            .byte	0
11120 26F7                        00            .byte	0
11121                                           ! 1431  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11122 26F8                        00            .byte	0
11123 26F9                        00            .byte	0
11124 26FA                        18            .byte	$18
11125 26FB                        18            .byte	$18
11126 26FC                        18            .byte	$18
11127 26FD                        18            .byte	$18
11128 26FE                        18            .byte	$18
11129 26FF                        18            .byte	$18
11130 2700                        18            .byte	$18
11131 2701                        7E            .byte	$7E
11132 2702                        3C            .byte	$3C
11133 2703                        18            .byte	$18
11134 2704                        00            .byte	0
11135 2705                        00            .byte	0
11136 2706                        00            .byte	0
11137 2707                        00            .byte	0
11138                                           ! 1432  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11139 2708                        00            .byte	0
11140 2709                        00            .byte	0
11141 270A                        00            .byte	0
11142 270B                        00            .byte	0
11143 270C                        00            .byte	0
11144 270D                        18            .byte	$18
11145 270E                        0C            .byte	$C
11146 270F                        FE            .byte	$FE
11147 2710                        0C            .byte	$C
11148 2711                        18            .byte	$18
11149 2712                        00            .byte	0
11150 2713                        00            .byte	0
11151 2714                        00            .byte	0
11152 2715                        00            .byte	0
11153 2716                        00            .byte	0
11154 2717                        00            .byte	0
11155                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11156 2718                        00            .byte	0
11157 2719                        00            .byte	0
11158 271A                        00            .byte	0
11159 271B                        00            .byte	0
11160 271C                        00            .byte	0
11161 271D                        30            .byte	$30
11162 271E                        60            .byte	$60
11163 271F                        FE            .byte	$FE
11164 2720                        60            .byte	$60
11165 2721                        30            .byte	$30
11166 2722                        00            .byte	0
11167 2723                        00            .byte	0
11168 2724                        00            .byte	0
11169 2725                        00            .byte	0
11170 2726                        00            .byte	0
11171 2727                        00            .byte	0
11172                                           ! 1434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11173 2728                        00            .byte	0
11174 2729                        00            .byte	0
11175 272A                        00            .byte	0
11176 272B                        00            .byte	0
11177 272C                        00            .byte	0
11178 272D                        00            .byte	0
11179 272E                        C0            .byte	$C0
11180 272F                        C0            .byte	$C0
11181 2730                        C0            .byte	$C0
11182 2731                        FE            .byte	$FE
11183 2732                        00            .byte	0
11184 2733                        00            .byte	0
11185 2734                        00            .byte	0
11186 2735                        00            .byte	0
11187 2736                        00            .byte	0
11188 2737                        00            .byte	0
11189                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11190 2738                        00            .byte	0
11191 2739                        00            .byte	0
11192 273A                        00            .byte	0
11193 273B                        00            .byte	0
11194 273C                        00            .byte	0
11195 273D                        24            .byte	$24
11196 273E                        66            .byte	$66
11197 273F                        FF            .byte	$FF
11198 2740                        66            .byte	$66
11199 2741                        24            .byte	$24
11200 2742                        00            .byte	0
11201 2743                        00            .byte	0
11202 2744                        00            .byte	0
11203 2745                        00            .byte	0
11204 2746                        00            .byte	0
11205 2747                        00            .byte	0
11206                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11207 2748                        00            .byte	0
11208 2749                        00            .byte	0
11209 274A                        00            .byte	0
11210 274B                        00            .byte	0
11211 274C                        10            .byte	$10
11212 274D                        38            .byte	$38
11213 274E                        38            .byte	$38
11214 274F                        7C            .byte	$7C
11215 2750                        7C            .byte	$7C
11216 2751                        FE            .byte	$FE
11217 2752                        FE            .byte	$FE
11218 2753                        00            .byte	0
11219 2754                        00            .byte	0
11220 2755                        00            .byte	0
11221 2756                        00            .byte	0
11222 2757                        00            .byte	0
11223                                           ! 1437  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11224 2758                        00            .byte	0
11225 2759                        00            .byte	0
11226 275A                        00            .byte	0
11227 275B                        00            .byte	0
11228 275C                        FE            .byte	$FE
11229 275D                        FE            .byte	$FE
11230 275E                        7C            .byte	$7C
11231 275F                        7C            .byte	$7C
11232 2760                        38            .byte	$38
11233 2761                        38            .byte	$38
11234 2762                        10            .byte	$10
11235 2763                        00            .byte	0
11236 2764                        00            .byte	0
11237 2765                        00            .byte	0
11238 2766                        00            .byte	0
11239 2767                        00            .byte	0
11240                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11241 2768                        00            .byte	0
11242 2769                        00            .byte	0
11243 276A                        00            .byte	0
11244 276B                        00            .byte	0
11245 276C                        00            .byte	0
11246 276D                        00            .byte	0
11247 276E                        00            .byte	0
11248 276F                        00            .byte	0
11249 2770                        00            .byte	0
11250 2771                        00            .byte	0
11251 2772                        00            .byte	0
11252                                           ! 1438  0x00, 0x00, 0x00, 0x00,
11253 2773                        00            .byte	0
11254 2774                        00            .byte	0
11255 2775                        00            .byte	0
11256 2776                        00            .byte	0
11257 2777                        00            .byte	0
11258                                           ! 1439  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11259 2778                        00            .byte	0
11260 2779                        00            .byte	0
11261 277A                        18            .byte	$18
11262 277B                        3C            .byte	$3C
11263 277C                        3C            .byte	$3C
11264 277D                        3C            .byte	$3C
11265 277E                        18            .byte	$18
11266 277F                        18            .byte	$18
11267 2780                        18            .byte	$18
11268 2781                        00            .byte	0
11269 2782                        18            .byte	$18
11270 2783                        18            .byte	$18
11271 2784                        00            .byte	0
11272 2785                        00            .byte	0
11273 2786                        00            .byte	0
11274 2787                        00            .byte	0
11275                                           ! 1440  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11276 2788                        00            .byte	0
11277 2789                        66            .byte	$66
11278 278A                        66            .byte	$66
11279 278B                        66            .byte	$66
11280 278C                        24            .byte	$24
11281 278D                        00            .byte	0
11282 278E                        00            .byte	0
11283 278F                        00            .byte	0
11284 2790                        00            .byte	0
11285 2791                        00            .byte	0
11286 2792                        00            .byte	0
11287 2793                        00            .byte	0
11288 2794                        00            .byte	0
11289 2795                        00            .byte	0
11290 2796                        00            .byte	0
11291 2797                        00            .byte	0
11292                                           ! 1441  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11293 2798                        00            .byte	0
11294 2799                        00            .byte	0
11295 279A                        00            .byte	0
11296 279B                        6C            .byte	$6C
11297 279C                        6C            .byte	$6C
11298 279D                        FE            .byte	$FE
11299 279E                        6C            .byte	$6C
11300 279F                        6C            .byte	$6C
11301 27A0                        6C            .byte	$6C
11302 27A1                        FE            .byte	$FE
11303 27A2                        6C            .byte	$6C
11304 27A3                        6C            .byte	$6C
11305 27A4                        00            .byte	0
11306 27A5                        00            .byte	0
11307 27A6                        00            .byte	0
11308 27A7                        00            .byte	0
11309                                           ! 1442  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11310 27A8                        18            .byte	$18
11311 27A9                        18            .byte	$18
11312 27AA                        7C            .byte	$7C
11313 27AB                        C6            .byte	$C6
11314 27AC                        C2            .byte	$C2
11315 27AD                        C0            .byte	$C0
11316 27AE                        7C            .byte	$7C
11317 27AF                        06            .byte	6
11318 27B0                        06            .byte	6
11319 27B1                        86            .byte	$86
11320 27B2                        C6            .byte	$C6
11321 27B3                        7C            .byte	$7C
11322 27B4                        18            .byte	$18
11323 27B5                        18            .byte	$18
11324 27B6                        00            .byte	0
11325 27B7                        00            .byte	0
11326                                           ! 1443  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11327 27B8                        00            .byte	0
11328 27B9                        00            .byte	0
11329 27BA                        00            .byte	0
11330 27BB                        00            .byte	0
11331 27BC                        C2            .byte	$C2
11332 27BD                        C6            .byte	$C6
11333 27BE                        0C            .byte	$C
11334 27BF                        18            .byte	$18
11335 27C0                        30            .byte	$30
11336 27C1                        60            .byte	$60
11337 27C2                        C6            .byte	$C6
11338 27C3                        86            .byte	$86
11339 27C4                        00            .byte	0
11340 27C5                        00            .byte	0
11341 27C6                        00            .byte	0
11342 27C7                        00            .byte	0
11343                                           ! 1444  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11344 27C8                        00            .byte	0
11345 27C9                        00            .byte	0
11346 27CA                        38            .byte	$38
11347 27CB                        6C            .byte	$6C
11348 27CC                        6C            .byte	$6C
11349 27CD                        38            .byte	$38
11350 27CE                        76            .byte	$76
11351 27CF                        DC            .byte	$DC
11352 27D0                        CC            .byte	$CC
11353 27D1                        CC            .byte	$CC
11354 27D2                        CC            .byte	$CC
11355 27D3                        76            .byte	$76
11356 27D4                        00            .byte	0
11357 27D5                        00            .byte	0
11358 27D6                        00            .byte	0
11359 27D7                        00            .byte	0
11360                                           ! 1445  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11361 27D8                        00            .byte	0
11362 27D9                        30            .byte	$30
11363 27DA                        30            .byte	$30
11364 27DB                        30            .byte	$30
11365 27DC                        60            .byte	$60
11366 27DD                        00            .byte	0
11367 27DE                        00            .byte	0
11368 27DF                        00            .byte	0
11369 27E0                        00            .byte	0
11370 27E1                        00            .byte	0
11371 27E2                        00            .byte	0
11372 27E3                        00            .byte	0
11373 27E4                        00            .byte	0
11374 27E5                        00            .byte	0
11375 27E6                        00            .byte	0
11376 27E7                        00            .byte	0
11377                                           ! 1446  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11378 27E8                        00            .byte	0
11379 27E9                        00            .byte	0
11380 27EA                        0C            .byte	$C
11381 27EB                        18            .byte	$18
11382 27EC                        30            .byte	$30
11383 27ED                        30            .byte	$30
11384 27EE                        30            .byte	$30
11385 27EF                        30            .byte	$30
11386 27F0                        30            .byte	$30
11387 27F1                        30            .byte	$30
11388 27F2                        18            .byte	$18
11389 27F3                        0C            .byte	$C
11390 27F4                        00            .byte	0
11391 27F5                        00            .byte	0
11392 27F6                        00            .byte	0
11393 27F7                        00            .byte	0
11394                                           ! 1447  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11395 27F8                        00            .byte	0
11396 27F9                        00            .byte	0
11397 27FA                        30            .byte	$30
11398 27FB                        18            .byte	$18
11399 27FC                        0C            .byte	$C
11400 27FD                        0C            .byte	$C
11401 27FE                        0C            .byte	$C
11402 27FF                        0C            .byte	$C
11403 2800                        0C            .byte	$C
11404 2801                        0C            .byte	$C
11405 2802                        18            .byte	$18
11406 2803                        30            .byte	$30
11407 2804                        00            .byte	0
11408 2805                        00            .byte	0
11409 2806                        00            .byte	0
11410 2807                        00            .byte	0
11411                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11412 2808                        00            .byte	0
11413 2809                        00            .byte	0
11414 280A                        00            .byte	0
11415 280B                        00            .byte	0
11416 280C                        00            .byte	0
11417 280D                        66            .byte	$66
11418 280E                        3C            .byte	$3C
11419 280F                        FF            .byte	$FF
11420 2810                        3C            .byte	$3C
11421 2811                        66            .byte	$66
11422 2812                        00            .byte	0
11423 2813                        00            .byte	0
11424 2814                        00            .byte	0
11425 2815                        00            .byte	0
11426 2816                        00            .byte	0
11427 2817                        00            .byte	0
11428                                           ! 1449  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11429 2818                        00            .byte	0
11430 2819                        00            .byte	0
11431 281A                        00            .byte	0
11432 281B                        00            .byte	0
11433 281C                        00            .byte	0
11434 281D                        18            .byte	$18
11435 281E                        18            .byte	$18
11436 281F                        7E            .byte	$7E
11437 2820                        18            .byte	$18
11438 2821                        18            .byte	$18
11439 2822                        00            .byte	0
11440 2823                        00            .byte	0
11441 2824                        00            .byte	0
11442 2825                        00            .byte	0
11443 2826                        00            .byte	0
11444 2827                        00            .byte	0
11445                                           ! 1450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11446 2828                        00            .byte	0
11447 2829                        00            .byte	0
11448 282A                        00            .byte	0
11449 282B                        00            .byte	0
11450 282C                        00            .byte	0
11451 282D                        00            .byte	0
11452 282E                        00            .byte	0
11453 282F                        00            .byte	0
11454 2830                        00            .byte	0
11455 2831                        18            .byte	$18
11456 2832                        18            .byte	$18
11457 2833                        18            .byte	$18
11458 2834                        30            .byte	$30
11459 2835                        00            .byte	0
11460 2836                        00            .byte	0
11461 2837                        00            .byte	0
11462                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11463 2838                        00            .byte	0
11464 2839                        00            .byte	0
11465 283A                        00            .byte	0
11466 283B                        00            .byte	0
11467 283C                        00            .byte	0
11468 283D                        00            .byte	0
11469 283E                        00            .byte	0
11470 283F                        FE            .byte	$FE
11471 2840                        00            .byte	0
11472 2841                        00            .byte	0
11473 2842                        00            .byte	0
11474 2843                        00            .byte	0
11475 2844                        00            .byte	0
11476 2845                        00            .byte	0
11477 2846                        00            .byte	0
11478 2847                        00            .byte	0
11479                                           ! 1452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11480 2848                        00            .byte	0
11481 2849                        00            .byte	0
11482 284A                        00            .byte	0
11483 284B                        00            .byte	0
11484 284C                        00            .byte	0
11485 284D                        00            .byte	0
11486 284E                        00            .byte	0
11487 284F                        00            .byte	0
11488 2850                        00            .byte	0
11489 2851                        00            .byte	0
11490 2852                        18            .byte	$18
11491 2853                        18            .byte	$18
11492 2854                        00            .byte	0
11493 2855                        00            .byte	0
11494 2856                        00            .byte	0
11495 2857                        00            .byte	0
11496                                           ! 1453  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11497 2858                        00            .byte	0
11498 2859                        00            .byte	0
11499 285A                        00            .byte	0
11500 285B                        00            .byte	0
11501 285C                        02            .byte	2
11502 285D                        06            .byte	6
11503 285E                        0C            .byte	$C
11504 285F                        18            .byte	$18
11505 2860                        30            .byte	$30
11506 2861                        60            .byte	$60
11507 2862                        C0            .byte	$C0
11508 2863                        80            .byte	$80
11509 2864                        00            .byte	0
11510 2865                        00            .byte	0
11511 2866                        00            .byte	0
11512 2867                        00            .byte	0
11513                                           ! 1454  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11514 2868                        00            .byte	0
11515 2869                        00            .byte	0
11516 286A                        3C            .byte	$3C
11517 286B                        66            .byte	$66
11518 286C                        C3            .byte	$C3
11519 286D                        C3            .byte	$C3
11520 286E                        DB            .byte	$DB
11521 286F                        DB            .byte	$DB
11522 2870                        C3            .byte	$C3
11523 2871                        C3            .byte	$C3
11524 2872                        66            .byte	$66
11525 2873                        3C            .byte	$3C
11526 2874                        00            .byte	0
11527 2875                        00            .byte	0
11528 2876                        00            .byte	0
11529 2877                        00            .byte	0
11530                                           ! 1455  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11531 2878                        00            .byte	0
11532 2879                        00            .byte	0
11533 287A                        18            .byte	$18
11534 287B                        38            .byte	$38
11535 287C                        78            .byte	$78
11536 287D                        18            .byte	$18
11537 287E                        18            .byte	$18
11538 287F                        18            .byte	$18
11539 2880                        18            .byte	$18
11540 2881                        18            .byte	$18
11541 2882                        18            .byte	$18
11542 2883                        7E            .byte	$7E
11543 2884                        00            .byte	0
11544 2885                        00            .byte	0
11545 2886                        00            .byte	0
11546 2887                        00            .byte	0
11547                                           ! 1456  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11548 2888                        00            .byte	0
11549 2889                        00            .byte	0
11550 288A                        7C            .byte	$7C
11551 288B                        C6            .byte	$C6
11552 288C                        06            .byte	6
11553 288D                        0C            .byte	$C
11554 288E                        18            .byte	$18
11555 288F                        30            .byte	$30
11556 2890                        60            .byte	$60
11557 2891                        C0            .byte	$C0
11558 2892                        C6            .byte	$C6
11559 2893                        FE            .byte	$FE
11560 2894                        00            .byte	0
11561 2895                        00            .byte	0
11562 2896                        00            .byte	0
11563 2897                        00            .byte	0
11564                                           ! 1457  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11565 2898                        00            .byte	0
11566 2899                        00            .byte	0
11567 289A                        7C            .byte	$7C
11568 289B                        C6            .byte	$C6
11569 289C                        06            .byte	6
11570 289D                        06            .byte	6
11571 289E                        3C            .byte	$3C
11572 289F                        06            .byte	6
11573 28A0                        06            .byte	6
11574 28A1                        06            .byte	6
11575 28A2                        C6            .byte	$C6
11576 28A3                        7C            .byte	$7C
11577 28A4                        00            .byte	0
11578 28A5                        00            .byte	0
11579 28A6                        00            .byte	0
11580 28A7                        00            .byte	0
11581                                           ! 1458  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11582 28A8                        00            .byte	0
11583 28A9                        00            .byte	0
11584 28AA                        0C            .byte	$C
11585 28AB                        1C            .byte	$1C
11586 28AC                        3C            .byte	$3C
11587 28AD                        6C            .byte	$6C
11588 28AE                        CC            .byte	$CC
11589 28AF                        FE            .byte	$FE
11590 28B0                        0C            .byte	$C
11591 28B1                        0C            .byte	$C
11592 28B2                        0C            .byte	$C
11593 28B3                        1E            .byte	$1E
11594 28B4                        00            .byte	0
11595 28B5                        00            .byte	0
11596 28B6                        00            .byte	0
11597 28B7                        00            .byte	0
11598                                           ! 1459  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00
11599 28B8                        00            .byte	0
11600 28B9                        00            .byte	0
11601 28BA                        FE            .byte	$FE
11602 28BB                        C0            .byte	$C0
11603 28BC                        C0            .byte	$C0
11604 28BD                        C0            .byte	$C0
11605 28BE                        FC            .byte	$FC
11606 28BF                        06            .byte	6
11607 28C0                        06            .byte	6
11608 28C1                        06            .byte	6
11609 28C2                        C6            .byte	$C6
11610 28C3                        7C            .byte	$7C
11611 28C4                        00            .byte	0
11612                                           ! 1459 , 0x00, 0x00,
11613 28C5                        00            .byte	0
11614 28C6                        00            .byte	0
11615 28C7                        00            .byte	0
11616                                           ! 1460  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11617 28C8                        00            .byte	0
11618 28C9                        00            .byte	0
11619 28CA                        38            .byte	$38
11620 28CB                        60            .byte	$60
11621 28CC                        C0            .byte	$C0
11622 28CD                        C0            .byte	$C0
11623 28CE                        FC            .byte	$FC
11624 28CF                        C6            .byte	$C6
11625 28D0                        C6            .byte	$C6
11626 28D1                        C6            .byte	$C6
11627 28D2                        C6            .byte	$C6
11628 28D3                        7C            .byte	$7C
11629 28D4                        00            .byte	0
11630 28D5                        00            .byte	0
11631 28D6                        00            .byte	0
11632 28D7                        00            .byte	0
11633                                           ! 1461  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11634 28D8                        00            .byte	0
11635 28D9                        00            .byte	0
11636 28DA                        FE            .byte	$FE
11637 28DB                        C6            .byte	$C6
11638 28DC                        06            .byte	6
11639 28DD                        06            .byte	6
11640 28DE                        0C            .byte	$C
11641 28DF                        18            .byte	$18
11642 28E0                        30            .byte	$30
11643 28E1                        30            .byte	$30
11644 28E2                        30            .byte	$30
11645 28E3                        30            .byte	$30
11646 28E4                        00            .byte	0
11647 28E5                        00            .byte	0
11648 28E6                        00            .byte	0
11649 28E7                        00            .byte	0
11650                                           ! 1462  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11651 28E8                        00            .byte	0
11652 28E9                        00            .byte	0
11653 28EA                        7C            .byte	$7C
11654 28EB                        C6            .byte	$C6
11655 28EC                        C6            .byte	$C6
11656 28ED                        C6            .byte	$C6
11657 28EE                        7C            .byte	$7C
11658 28EF                        C6            .byte	$C6
11659 28F0                        C6            .byte	$C6
11660 28F1                        C6            .byte	$C6
11661 28F2                        C6            .byte	$C6
11662 28F3                        7C            .byte	$7C
11663 28F4                        00            .byte	0
11664 28F5                        00            .byte	0
11665 28F6                        00            .byte	0
11666 28F7                        00            .byte	0
11667                                           ! 1463  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11668 28F8                        00            .byte	0
11669 28F9                        00            .byte	0
11670 28FA                        7C            .byte	$7C
11671 28FB                        C6            .byte	$C6
11672 28FC                        C6            .byte	$C6
11673 28FD                        C6            .byte	$C6
11674 28FE                        7E            .byte	$7E
11675 28FF                        06            .byte	6
11676 2900                        06            .byte	6
11677 2901                        06            .byte	6
11678 2902                        0C            .byte	$C
11679 2903                        78            .byte	$78
11680 2904                        00            .byte	0
11681 2905                        00            .byte	0
11682 2906                        00            .byte	0
11683 2907                        00            .byte	0
11684                                           ! 1464  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11685 2908                        00            .byte	0
11686 2909                        00            .byte	0
11687 290A                        00            .byte	0
11688 290B                        00            .byte	0
11689 290C                        18            .byte	$18
11690 290D                        18            .byte	$18
11691 290E                        00            .byte	0
11692 290F                        00            .byte	0
11693 2910                        00            .byte	0
11694 2911                        18            .byte	$18
11695 2912                        18            .byte	$18
11696 2913                        00            .byte	0
11697 2914                        00            .byte	0
11698 2915                        00            .byte	0
11699 2916                        00            .byte	0
11700 2917                        00            .byte	0
11701                                           ! 1465  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11702 2918                        00            .byte	0
11703 2919                        00            .byte	0
11704 291A                        00            .byte	0
11705 291B                        00            .byte	0
11706 291C                        18            .byte	$18
11707 291D                        18            .byte	$18
11708 291E                        00            .byte	0
11709 291F                        00            .byte	0
11710 2920                        00            .byte	0
11711 2921                        18            .byte	$18
11712 2922                        18            .byte	$18
11713 2923                        30            .byte	$30
11714 2924                        00            .byte	0
11715 2925                        00            .byte	0
11716 2926                        00            .byte	0
11717 2927                        00            .byte	0
11718                                           ! 1466  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11719 2928                        00            .byte	0
11720 2929                        00            .byte	0
11721 292A                        00            .byte	0
11722 292B                        06            .byte	6
11723 292C                        0C            .byte	$C
11724 292D                        18            .byte	$18
11725 292E                        30            .byte	$30
11726 292F                        60            .byte	$60
11727 2930                        30            .byte	$30
11728 2931                        18            .byte	$18
11729 2932                        0C            .byte	$C
11730 2933                        06            .byte	6
11731 2934                        00            .byte	0
11732 2935                        00            .byte	0
11733 2936                        00            .byte	0
11734 2937                        00            .byte	0
11735                                           ! 1467  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11736 2938                        00            .byte	0
11737 2939                        00            .byte	0
11738 293A                        00            .byte	0
11739 293B                        00            .byte	0
11740 293C                        00            .byte	0
11741 293D                        7E            .byte	$7E
11742 293E                        00            .byte	0
11743 293F                        00            .byte	0
11744 2940                        7E            .byte	$7E
11745 2941                        00            .byte	0
11746 2942                        00            .byte	0
11747 2943                        00            .byte	0
11748 2944                        00            .byte	0
11749 2945                        00            .byte	0
11750 2946                        00            .byte	0
11751 2947                        00            .byte	0
11752                                           ! 1468  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11753 2948                        00            .byte	0
11754 2949                        00            .byte	0
11755 294A                        00            .byte	0
11756 294B                        60            .byte	$60
11757 294C                        30            .byte	$30
11758 294D                        18            .byte	$18
11759 294E                        0C            .byte	$C
11760 294F                        06            .byte	6
11761 2950                        0C            .byte	$C
11762 2951                        18            .byte	$18
11763 2952                        30            .byte	$30
11764 2953                        60            .byte	$60
11765 2954                        00            .byte	0
11766 2955                        00            .byte	0
11767 2956                        00            .byte	0
11768 2957                        00            .byte	0
11769                                           ! 1469  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11770 2958                        00            .byte	0
11771 2959                        00            .byte	0
11772 295A                        7C            .byte	$7C
11773 295B                        C6            .byte	$C6
11774 295C                        C6            .byte	$C6
11775 295D                        0C            .byte	$C
11776 295E                        18            .byte	$18
11777 295F                        18            .byte	$18
11778 2960                        18            .byte	$18
11779 2961                        00            .byte	0
11780 2962                        18            .byte	$18
11781 2963                        18            .byte	$18
11782 2964                        00            .byte	0
11783 2965                        00            .byte	0
11784 2966                        00            .byte	0
11785 2967                        00            .byte	0
11786                                           ! 1470  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11787 2968                        00            .byte	0
11788 2969                        00            .byte	0
11789 296A                        00            .byte	0
11790 296B                        7C            .byte	$7C
11791 296C                        C6            .byte	$C6
11792 296D                        C6            .byte	$C6
11793 296E                        DE            .byte	$DE
11794 296F                        DE            .byte	$DE
11795 2970                        DE            .byte	$DE
11796 2971                        DC            .byte	$DC
11797 2972                        C0            .byte	$C0
11798 2973                        7C            .byte	$7C
11799 2974                        00            .byte	0
11800 2975                        00            .byte	0
11801 2976                        00            .byte	0
11802 2977                        00            .byte	0
11803                                           ! 1471  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11804 2978                        00            .byte	0
11805 2979                        00            .byte	0
11806 297A                        10            .byte	$10
11807 297B                        38            .byte	$38
11808 297C                        6C            .byte	$6C
11809 297D                        C6            .byte	$C6
11810 297E                        C6            .byte	$C6
11811 297F                        FE            .byte	$FE
11812 2980                        C6            .byte	$C6
11813 2981                        C6            .byte	$C6
11814 2982                        C6            .byte	$C6
11815 2983                        C6            .byte	$C6
11816 2984                        00            .byte	0
11817 2985                        00            .byte	0
11818 2986                        00            .byte	0
11819 2987                        00            .byte	0
11820                                           ! 1472  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11821 2988                        00            .byte	0
11822 2989                        00            .byte	0
11823 298A                        FC            .byte	$FC
11824 298B                        66            .byte	$66
11825 298C                        66            .byte	$66
11826 298D                        66            .byte	$66
11827 298E                        7C            .byte	$7C
11828 298F                        66            .byte	$66
11829 2990                        66            .byte	$66
11830 2991                        66            .byte	$66
11831 2992                        66            .byte	$66
11832 2993                        FC            .byte	$FC
11833 2994                        00            .byte	0
11834 2995                        00            .byte	0
11835 2996                        00            .byte	0
11836 2997                        00            .byte	0
11837                                           ! 1473  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11838 2998                        00            .byte	0
11839 2999                        00            .byte	0
11840 299A                        3C            .byte	$3C
11841 299B                        66            .byte	$66
11842 299C                        C2            .byte	$C2
11843 299D                        C0            .byte	$C0
11844 299E                        C0            .byte	$C0
11845 299F                        C0            .byte	$C0
11846 29A0                        C0            .byte	$C0
11847 29A1                        C2            .byte	$C2
11848 29A2                        66            .byte	$66
11849 29A3                        3C            .byte	$3C
11850 29A4                        00            .byte	0
11851 29A5                        00            .byte	0
11852 29A6                        00            .byte	0
11853 29A7                        00            .byte	0
11854                                           ! 1474  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11855 29A8                        00            .byte	0
11856 29A9                        00            .byte	0
11857 29AA                        F8            .byte	$F8
11858 29AB                        6C            .byte	$6C
11859 29AC                        66            .byte	$66
11860 29AD                        66            .byte	$66
11861 29AE                        66            .byte	$66
11862 29AF                        66            .byte	$66
11863 29B0                        66            .byte	$66
11864 29B1                        66            .byte	$66
11865 29B2                        6C            .byte	$6C
11866 29B3                        F8            .byte	$F8
11867 29B4                        00            .byte	0
11868 29B5                        00            .byte	0
11869 29B6                        00            .byte	0
11870 29B7                        00            .byte	0
11871                                           ! 1475  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11872 29B8                        00            .byte	0
11873 29B9                        00            .byte	0
11874 29BA                        FE            .byte	$FE
11875 29BB                        66            .byte	$66
11876 29BC                        62            .byte	$62
11877 29BD                        68            .byte	$68
11878 29BE                        78            .byte	$78
11879 29BF                        68            .byte	$68
11880 29C0                        60            .byte	$60
11881 29C1                        62            .byte	$62
11882 29C2                        66            .byte	$66
11883 29C3                        FE            .byte	$FE
11884 29C4                        00            .byte	0
11885 29C5                        00            .byte	0
11886 29C6                        00            .byte	0
11887 29C7                        00            .byte	0
11888                                           ! 1476  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11889 29C8                        00            .byte	0
11890 29C9                        00            .byte	0
11891 29CA                        FE            .byte	$FE
11892 29CB                        66            .byte	$66
11893 29CC                        62            .byte	$62
11894 29CD                        68            .byte	$68
11895 29CE                        78            .byte	$78
11896 29CF                        68            .byte	$68
11897 29D0                        60            .byte	$60
11898 29D1                        60            .byte	$60
11899 29D2                        60            .byte	$60
11900 29D3                        F0            .byte	$F0
11901 29D4                        00            .byte	0
11902 29D5                        00            .byte	0
11903 29D6                        00            .byte	0
11904 29D7                        00            .byte	0
11905                                           ! 1477  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11906 29D8                        00            .byte	0
11907 29D9                        00            .byte	0
11908 29DA                        3C            .byte	$3C
11909 29DB                        66            .byte	$66
11910 29DC                        C2            .byte	$C2
11911 29DD                        C0            .byte	$C0
11912 29DE                        C0            .byte	$C0
11913 29DF                        DE            .byte	$DE
11914 29E0                        C6            .byte	$C6
11915 29E1                        C6            .byte	$C6
11916 29E2                        66            .byte	$66
11917 29E3                        3A            .byte	$3A
11918 29E4                        00            .byte	0
11919 29E5                        00            .byte	0
11920 29E6                        00            .byte	0
11921 29E7                        00            .byte	0
11922                                           ! 1478  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11923 29E8                        00            .byte	0
11924 29E9                        00            .byte	0
11925 29EA                        C6            .byte	$C6
11926 29EB                        C6            .byte	$C6
11927 29EC                        C6            .byte	$C6
11928 29ED                        C6            .byte	$C6
11929 29EE                        FE            .byte	$FE
11930 29EF                        C6            .byte	$C6
11931 29F0                        C6            .byte	$C6
11932 29F1                        C6            .byte	$C6
11933 29F2                        C6            .byte	$C6
11934 29F3                        C6            .byte	$C6
11935 29F4                        00            .byte	0
11936 29F5                        00            .byte	0
11937 29F6                        00            .byte	0
11938 29F7                        00            .byte	0
11939                                           ! 1479  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11940 29F8                        00            .byte	0
11941 29F9                        00            .byte	0
11942 29FA                        3C            .byte	$3C
11943 29FB                        18            .byte	$18
11944 29FC                        18            .byte	$18
11945 29FD                        18            .byte	$18
11946 29FE                        18            .byte	$18
11947 29FF                        18            .byte	$18
11948 2A00                        18            .byte	$18
11949 2A01                        18            .byte	$18
11950 2A02                        18            .byte	$18
11951 2A03                        3C            .byte	$3C
11952 2A04                        00            .byte	0
11953 2A05                        00            .byte	0
11954 2A06                        00            .byte	0
11955 2A07                        00            .byte	0
11956                                           ! 1480  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x0
11957 2A08                        00            .byte	0
11958 2A09                        00            .byte	0
11959 2A0A                        1E            .byte	$1E
11960 2A0B                        0C            .byte	$C
11961 2A0C                        0C            .byte	$C
11962 2A0D                        0C            .byte	$C
11963 2A0E                        0C            .byte	$C
11964 2A0F                        0C            .byte	$C
11965 2A10                        CC            .byte	$CC
11966 2A11                        CC            .byte	$CC
11967 2A12                        CC            .byte	$CC
11968 2A13                        78            .byte	$78
11969 2A14                        00            .byte	0
11970 2A15                        00            .byte	0
11971 2A16                        00            .byte	0
11972                                           ! 1480 0,
11973 2A17                        00            .byte	0
11974                                           ! 1481  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11975 2A18                        00            .byte	0
11976 2A19                        00            .byte	0
11977 2A1A                        E6            .byte	$E6
11978 2A1B                        66            .byte	$66
11979 2A1C                        66            .byte	$66
11980 2A1D                        6C            .byte	$6C
11981 2A1E                        78            .byte	$78
11982 2A1F                        78            .byte	$78
11983 2A20                        6C            .byte	$6C
11984 2A21                        66            .byte	$66
11985 2A22                        66            .byte	$66
11986 2A23                        E6            .byte	$E6
11987 2A24                        00            .byte	0
11988 2A25                        00            .byte	0
11989 2A26                        00            .byte	0
11990 2A27                        00            .byte	0
11991                                           ! 1482  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11992 2A28                        00            .byte	0
11993 2A29                        00            .byte	0
11994 2A2A                        F0            .byte	$F0
11995 2A2B                        60            .byte	$60
11996 2A2C                        60            .byte	$60
11997 2A2D                        60            .byte	$60
11998 2A2E                        60            .byte	$60
11999 2A2F                        60            .byte	$60
12000 2A30                        60            .byte	$60
12001 2A31                        62            .byte	$62
12002 2A32                        66            .byte	$66
12003 2A33                        FE            .byte	$FE
12004 2A34                        00            .byte	0
12005 2A35                        00            .byte	0
12006 2A36                        00            .byte	0
12007 2A37                        00            .byte	0
12008                                           ! 1483  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12009 2A38                        00            .byte	0
12010 2A39                        00            .byte	0
12011 2A3A                        C3            .byte	$C3
12012 2A3B                        E7            .byte	$E7
12013 2A3C                        FF            .byte	$FF
12014 2A3D                        FF            .byte	$FF
12015 2A3E                        DB            .byte	$DB
12016 2A3F                        C3            .byte	$C3
12017 2A40                        C3            .byte	$C3
12018 2A41                        C3            .byte	$C3
12019 2A42                        C3            .byte	$C3
12020 2A43                        C3            .byte	$C3
12021 2A44                        00            .byte	0
12022 2A45                        00            .byte	0
12023 2A46                        00            .byte	0
12024 2A47                        00            .byte	0
12025                                           ! 1484  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12026 2A48                        00            .byte	0
12027 2A49                        00            .byte	0
12028 2A4A                        C6            .byte	$C6
12029 2A4B                        E6            .byte	$E6
12030 2A4C                        F6            .byte	$F6
12031 2A4D                        FE            .byte	$FE
12032 2A4E                        DE            .byte	$DE
12033 2A4F                        CE            .byte	$CE
12034 2A50                        C6            .byte	$C6
12035 2A51                        C6            .byte	$C6
12036 2A52                        C6            .byte	$C6
12037 2A53                        C6            .byte	$C6
12038 2A54                        00            .byte	0
12039 2A55                        00            .byte	0
12040 2A56                        00            .byte	0
12041 2A57                        00            .byte	0
12042                                           ! 1485  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12043 2A58                        00            .byte	0
12044 2A59                        00            .byte	0
12045 2A5A                        7C            .byte	$7C
12046 2A5B                        C6            .byte	$C6
12047 2A5C                        C6            .byte	$C6
12048 2A5D                        C6            .byte	$C6
12049 2A5E                        C6            .byte	$C6
12050 2A5F                        C6            .byte	$C6
12051 2A60                        C6            .byte	$C6
12052 2A61                        C6            .byte	$C6
12053 2A62                        C6            .byte	$C6
12054 2A63                        7C            .byte	$7C
12055 2A64                        00            .byte	0
12056 2A65                        00            .byte	0
12057 2A66                        00            .byte	0
12058 2A67                        00            .byte	0
12059                                           ! 1486  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12060 2A68                        00            .byte	0
12061 2A69                        00            .byte	0
12062 2A6A                        FC            .byte	$FC
12063 2A6B                        66            .byte	$66
12064 2A6C                        66            .byte	$66
12065 2A6D                        66            .byte	$66
12066 2A6E                        7C            .byte	$7C
12067 2A6F                        60            .byte	$60
12068 2A70                        60            .byte	$60
12069 2A71                        60            .byte	$60
12070 2A72                        60            .byte	$60
12071 2A73                        F0            .byte	$F0
12072 2A74                        00            .byte	0
12073 2A75                        00            .byte	0
12074 2A76                        00            .byte	0
12075 2A77                        00            .byte	0
12076                                           ! 1487  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12077 2A78                        00            .byte	0
12078 2A79                        00            .byte	0
12079 2A7A                        7C            .byte	$7C
12080 2A7B                        C6            .byte	$C6
12081 2A7C                        C6            .byte	$C6
12082 2A7D                        C6            .byte	$C6
12083 2A7E                        C6            .byte	$C6
12084 2A7F                        C6            .byte	$C6
12085 2A80                        C6            .byte	$C6
12086 2A81                        D6            .byte	$D6
12087 2A82                        DE            .byte	$DE
12088 2A83                        7C            .byte	$7C
12089 2A84                        0C            .byte	$C
12090 2A85                        0E            .byte	$E
12091 2A86                        00            .byte	0
12092 2A87                        00            .byte	0
12093                                           ! 1488  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12094 2A88                        00            .byte	0
12095 2A89                        00            .byte	0
12096 2A8A                        FC            .byte	$FC
12097 2A8B                        66            .byte	$66
12098 2A8C                        66            .byte	$66
12099 2A8D                        66            .byte	$66
12100 2A8E                        7C            .byte	$7C
12101 2A8F                        6C            .byte	$6C
12102 2A90                        66            .byte	$66
12103 2A91                        66            .byte	$66
12104 2A92                        66            .byte	$66
12105 2A93                        E6            .byte	$E6
12106 2A94                        00            .byte	0
12107 2A95                        00            .byte	0
12108 2A96                        00            .byte	0
12109 2A97                        00            .byte	0
12110                                           ! 1489  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12111 2A98                        00            .byte	0
12112 2A99                        00            .byte	0
12113 2A9A                        7C            .byte	$7C
12114 2A9B                        C6            .byte	$C6
12115 2A9C                        C6            .byte	$C6
12116 2A9D                        60            .byte	$60
12117 2A9E                        38            .byte	$38
12118 2A9F                        0C            .byte	$C
12119 2AA0                        06            .byte	6
12120 2AA1                        C6            .byte	$C6
12121 2AA2                        C6            .byte	$C6
12122 2AA3                        7C            .byte	$7C
12123 2AA4                        00            .byte	0
12124 2AA5                        00            .byte	0
12125 2AA6                        00            .byte	0
12126 2AA7                        00            .byte	0
12127                                           ! 1490  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12128 2AA8                        00            .byte	0
12129 2AA9                        00            .byte	0
12130 2AAA                        FF            .byte	$FF
12131 2AAB                        DB            .byte	$DB
12132 2AAC                        99            .byte	$99
12133 2AAD                        18            .byte	$18
12134 2AAE                        18            .byte	$18
12135 2AAF                        18            .byte	$18
12136 2AB0                        18            .byte	$18
12137 2AB1                        18            .byte	$18
12138 2AB2                        18            .byte	$18
12139 2AB3                        3C            .byte	$3C
12140 2AB4                        00            .byte	0
12141 2AB5                        00            .byte	0
12142 2AB6                        00            .byte	0
12143 2AB7                        00            .byte	0
12144                                           ! 1491  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12145 2AB8                        00            .byte	0
12146 2AB9                        00            .byte	0
12147 2ABA                        C6            .byte	$C6
12148 2ABB                        C6            .byte	$C6
12149 2ABC                        C6            .byte	$C6
12150 2ABD                        C6            .byte	$C6
12151 2ABE                        C6            .byte	$C6
12152 2ABF                        C6            .byte	$C6
12153 2AC0                        C6            .byte	$C6
12154 2AC1                        C6            .byte	$C6
12155 2AC2                        C6            .byte	$C6
12156 2AC3                        7C            .byte	$7C
12157 2AC4                        00            .byte	0
12158 2AC5                        00            .byte	0
12159 2AC6                        00            .byte	0
12160 2AC7                        00            .byte	0
12161                                           ! 1492  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12162 2AC8                        00            .byte	0
12163 2AC9                        00            .byte	0
12164 2ACA                        C3            .byte	$C3
12165 2ACB                        C3            .byte	$C3
12166 2ACC                        C3            .byte	$C3
12167 2ACD                        C3            .byte	$C3
12168 2ACE                        C3            .byte	$C3
12169 2ACF                        C3            .byte	$C3
12170 2AD0                        C3            .byte	$C3
12171 2AD1                        66            .byte	$66
12172 2AD2                        3C            .byte	$3C
12173 2AD3                        18            .byte	$18
12174 2AD4                        00            .byte	0
12175 2AD5                        00            .byte	0
12176 2AD6                        00            .byte	0
12177 2AD7                        00            .byte	0
12178                                           ! 1493  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12179 2AD8                        00            .byte	0
12180 2AD9                        00            .byte	0
12181 2ADA                        C3            .byte	$C3
12182 2ADB                        C3            .byte	$C3
12183 2ADC                        C3            .byte	$C3
12184 2ADD                        C3            .byte	$C3
12185 2ADE                        C3            .byte	$C3
12186 2ADF                        DB            .byte	$DB
12187 2AE0                        DB            .byte	$DB
12188 2AE1                        FF            .byte	$FF
12189 2AE2                        66            .byte	$66
12190 2AE3                        66            .byte	$66
12191 2AE4                        00            .byte	0
12192 2AE5                        00            .byte	0
12193 2AE6                        00            .byte	0
12194 2AE7                        00            .byte	0
12195                                           ! 1494  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12196 2AE8                        00            .byte	0
12197 2AE9                        00            .byte	0
12198 2AEA                        C3            .byte	$C3
12199 2AEB                        C3            .byte	$C3
12200 2AEC                        66            .byte	$66
12201 2AED                        3C            .byte	$3C
12202 2AEE                        18            .byte	$18
12203 2AEF                        18            .byte	$18
12204 2AF0                        3C            .byte	$3C
12205 2AF1                        66            .byte	$66
12206 2AF2                        C3            .byte	$C3
12207 2AF3                        C3            .byte	$C3
12208 2AF4                        00            .byte	0
12209 2AF5                        00            .byte	0
12210 2AF6                        00            .byte	0
12211 2AF7                        00            .byte	0
12212                                           ! 1495  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12213 2AF8                        00            .byte	0
12214 2AF9                        00            .byte	0
12215 2AFA                        C3            .byte	$C3
12216 2AFB                        C3            .byte	$C3
12217 2AFC                        C3            .byte	$C3
12218 2AFD                        66            .byte	$66
12219 2AFE                        3C            .byte	$3C
12220 2AFF                        18            .byte	$18
12221 2B00                        18            .byte	$18
12222 2B01                        18            .byte	$18
12223 2B02                        18            .byte	$18
12224 2B03                        3C            .byte	$3C
12225 2B04                        00            .byte	0
12226 2B05                        00            .byte	0
12227 2B06                        00            .byte	0
12228 2B07                        00            .byte	0
12229                                           ! 1496  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12230 2B08                        00            .byte	0
12231 2B09                        00            .byte	0
12232 2B0A                        FF            .byte	$FF
12233 2B0B                        C3            .byte	$C3
12234 2B0C                        86            .byte	$86
12235 2B0D                        0C            .byte	$C
12236 2B0E                        18            .byte	$18
12237 2B0F                        30            .byte	$30
12238 2B10                        60            .byte	$60
12239 2B11                        C1            .byte	$C1
12240 2B12                        C3            .byte	$C3
12241 2B13                        FF            .byte	$FF
12242 2B14                        00            .byte	0
12243 2B15                        00            .byte	0
12244 2B16                        00            .byte	0
12245 2B17                        00            .byte	0
12246                                           ! 1497  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12247 2B18                        00            .byte	0
12248 2B19                        00            .byte	0
12249 2B1A                        3C            .byte	$3C
12250 2B1B                        30            .byte	$30
12251 2B1C                        30            .byte	$30
12252 2B1D                        30            .byte	$30
12253 2B1E                        30            .byte	$30
12254 2B1F                        30            .byte	$30
12255 2B20                        30            .byte	$30
12256 2B21                        30            .byte	$30
12257 2B22                        30            .byte	$30
12258 2B23                        3C            .byte	$3C
12259 2B24                        00            .byte	0
12260 2B25                        00            .byte	0
12261 2B26                        00            .byte	0
12262 2B27                        00            .byte	0
12263                                           ! 1498  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12264 2B28                        00            .byte	0
12265 2B29                        00            .byte	0
12266 2B2A                        00            .byte	0
12267 2B2B                        80            .byte	$80
12268 2B2C                        C0            .byte	$C0
12269 2B2D                        E0            .byte	$E0
12270 2B2E                        70            .byte	$70
12271 2B2F                        38            .byte	$38
12272 2B30                        1C            .byte	$1C
12273 2B31                        0E            .byte	$E
12274 2B32                        06            .byte	6
12275 2B33                        02            .byte	2
12276 2B34                        00            .byte	0
12277 2B35                        00            .byte	0
12278 2B36                        00            .byte	0
12279 2B37                        00            .byte	0
12280                                           ! 1499  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12281 2B38                        00            .byte	0
12282 2B39                        00            .byte	0
12283 2B3A                        3C            .byte	$3C
12284 2B3B                        0C            .byte	$C
12285 2B3C                        0C            .byte	$C
12286 2B3D                        0C            .byte	$C
12287 2B3E                        0C            .byte	$C
12288 2B3F                        0C            .byte	$C
12289 2B40                        0C            .byte	$C
12290 2B41                        0C            .byte	$C
12291 2B42                        0C            .byte	$C
12292 2B43                        3C            .byte	$3C
12293 2B44                        00            .byte	0
12294 2B45                        00            .byte	0
12295 2B46                        00            .byte	0
12296 2B47                        00            .byte	0
12297                                           ! 1500  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12298 2B48                        10            .byte	$10
12299 2B49                        38            .byte	$38
12300 2B4A                        6C            .byte	$6C
12301 2B4B                        C6            .byte	$C6
12302 2B4C                        00            .byte	0
12303 2B4D                        00            .byte	0
12304 2B4E                        00            .byte	0
12305 2B4F                        00            .byte	0
12306 2B50                        00            .byte	0
12307 2B51                        00            .byte	0
12308 2B52                        00            .byte	0
12309 2B53                        00            .byte	0
12310 2B54                        00            .byte	0
12311 2B55                        00            .byte	0
12312 2B56                        00            .byte	0
12313 2B57                        00            .byte	0
12314                                           ! 1501  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12315 2B58                        00            .byte	0
12316 2B59                        00            .byte	0
12317 2B5A                        00            .byte	0
12318 2B5B                        00            .byte	0
12319 2B5C                        00            .byte	0
12320 2B5D                        00            .byte	0
12321 2B5E                        00            .byte	0
12322 2B5F                        00            .byte	0
12323 2B60                        00            .byte	0
12324 2B61                        00            .byte	0
12325 2B62                        00            .byte	0
12326 2B63                        00            .byte	0
12327 2B64                        00            .byte	0
12328 2B65                        FF            .byte	$FF
12329 2B66                        00            .byte	0
12330 2B67                        00            .byte	0
12331                                           ! 1502  0x30, 0
12332 2B68                        30            .byte	$30
12333                                           ! 1502 x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12334 2B69                        30            .byte	$30
12335 2B6A                        18            .byte	$18
12336 2B6B                        00            .byte	0
12337 2B6C                        00            .byte	0
12338 2B6D                        00            .byte	0
12339 2B6E                        00            .byte	0
12340 2B6F                        00            .byte	0
12341 2B70                        00            .byte	0
12342 2B71                        00            .byte	0
12343 2B72                        00            .byte	0
12344 2B73                        00            .byte	0
12345 2B74                        00            .byte	0
12346 2B75                        00            .byte	0
12347 2B76                        00            .byte	0
12348 2B77                        00            .byte	0
12349                                           ! 1503  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12350 2B78                        00            .byte	0
12351 2B79                        00            .byte	0
12352 2B7A                        00            .byte	0
12353 2B7B                        00            .byte	0
12354 2B7C                        00            .byte	0
12355 2B7D                        78            .byte	$78
12356 2B7E                        0C            .byte	$C
12357 2B7F                        7C            .byte	$7C
12358 2B80                        CC            .byte	$CC
12359 2B81                        CC            .byte	$CC
12360 2B82                        CC            .byte	$CC
12361 2B83                        76            .byte	$76
12362 2B84                        00            .byte	0
12363 2B85                        00            .byte	0
12364 2B86                        00            .byte	0
12365 2B87                        00            .byte	0
12366                                           ! 1504  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12367 2B88                        00            .byte	0
12368 2B89                        00            .byte	0
12369 2B8A                        E0            .byte	$E0
12370 2B8B                        60            .byte	$60
12371 2B8C                        60            .byte	$60
12372 2B8D                        78            .byte	$78
12373 2B8E                        6C            .byte	$6C
12374 2B8F                        66            .byte	$66
12375 2B90                        66            .byte	$66
12376 2B91                        66            .byte	$66
12377 2B92                        66            .byte	$66
12378 2B93                        7C            .byte	$7C
12379 2B94                        00            .byte	0
12380 2B95                        00            .byte	0
12381 2B96                        00            .byte	0
12382 2B97                        00            .byte	0
12383                                           ! 1505  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12384 2B98                        00            .byte	0
12385 2B99                        00            .byte	0
12386 2B9A                        00            .byte	0
12387 2B9B                        00            .byte	0
12388 2B9C                        00            .byte	0
12389 2B9D                        7C            .byte	$7C
12390 2B9E                        C6            .byte	$C6
12391 2B9F                        C0            .byte	$C0
12392 2BA0                        C0            .byte	$C0
12393 2BA1                        C0            .byte	$C0
12394 2BA2                        C6            .byte	$C6
12395 2BA3                        7C            .byte	$7C
12396 2BA4                        00            .byte	0
12397 2BA5                        00            .byte	0
12398 2BA6                        00            .byte	0
12399 2BA7                        00            .byte	0
12400                                           ! 1506  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12401 2BA8                        00            .byte	0
12402 2BA9                        00            .byte	0
12403 2BAA                        1C            .byte	$1C
12404 2BAB                        0C            .byte	$C
12405 2BAC                        0C            .byte	$C
12406 2BAD                        3C            .byte	$3C
12407 2BAE                        6C            .byte	$6C
12408 2BAF                        CC            .byte	$CC
12409 2BB0                        CC            .byte	$CC
12410 2BB1                        CC            .byte	$CC
12411 2BB2                        CC            .byte	$CC
12412 2BB3                        76            .byte	$76
12413 2BB4                        00            .byte	0
12414 2BB5                        00            .byte	0
12415 2BB6                        00            .byte	0
12416 2BB7                        00            .byte	0
12417                                           ! 1507  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12418 2BB8                        00            .byte	0
12419 2BB9                        00            .byte	0
12420 2BBA                        00            .byte	0
12421 2BBB                        00            .byte	0
12422 2BBC                        00            .byte	0
12423 2BBD                        7C            .byte	$7C
12424 2BBE                        C6            .byte	$C6
12425 2BBF                        FE            .byte	$FE
12426 2BC0                        C0            .byte	$C0
12427 2BC1                        C0            .byte	$C0
12428 2BC2                        C6            .byte	$C6
12429 2BC3                        7C            .byte	$7C
12430 2BC4                        00            .byte	0
12431 2BC5                        00            .byte	0
12432 2BC6                        00            .byte	0
12433 2BC7                        00            .byte	0
12434                                           ! 1508  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12435 2BC8                        00            .byte	0
12436 2BC9                        00            .byte	0
12437 2BCA                        38            .byte	$38
12438 2BCB                        6C            .byte	$6C
12439 2BCC                        64            .byte	$64
12440 2BCD                        60            .byte	$60
12441 2BCE                        F0            .byte	$F0
12442 2BCF                        60            .byte	$60
12443 2BD0                        60            .byte	$60
12444 2BD1                        60            .byte	$60
12445 2BD2                        60            .byte	$60
12446 2BD3                        F0            .byte	$F0
12447 2BD4                        00            .byte	0
12448 2BD5                        00            .byte	0
12449 2BD6                        00            .byte	0
12450 2BD7                        00            .byte	0
12451                                           ! 1509  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12452 2BD8                        00            .byte	0
12453 2BD9                        00            .byte	0
12454 2BDA                        00            .byte	0
12455 2BDB                        00            .byte	0
12456 2BDC                        00            .byte	0
12457 2BDD                        76            .byte	$76
12458 2BDE                        CC            .byte	$CC
12459 2BDF                        CC            .byte	$CC
12460 2BE0                        CC            .byte	$CC
12461 2BE1                        CC            .byte	$CC
12462 2BE2                        CC            .byte	$CC
12463 2BE3                        7C            .byte	$7C
12464 2BE4                        0C            .byte	$C
12465 2BE5                        CC            .byte	$CC
12466 2BE6                        78            .byte	$78
12467 2BE7                        00            .byte	0
12468                                           ! 1510  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12469 2BE8                        00            .byte	0
12470 2BE9                        00            .byte	0
12471 2BEA                        E0            .byte	$E0
12472 2BEB                        60            .byte	$60
12473 2BEC                        60            .byte	$60
12474 2BED                        6C            .byte	$6C
12475 2BEE                        76            .byte	$76
12476 2BEF                        66            .byte	$66
12477 2BF0                        66            .byte	$66
12478 2BF1                        66            .byte	$66
12479 2BF2                        66            .byte	$66
12480 2BF3                        E6            .byte	$E6
12481 2BF4                        00            .byte	0
12482 2BF5                        00            .byte	0
12483 2BF6                        00            .byte	0
12484 2BF7                        00            .byte	0
12485                                           ! 1511  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12486 2BF8                        00            .byte	0
12487 2BF9                        00            .byte	0
12488 2BFA                        18            .byte	$18
12489 2BFB                        18            .byte	$18
12490 2BFC                        00            .byte	0
12491 2BFD                        38            .byte	$38
12492 2BFE                        18            .byte	$18
12493 2BFF                        18            .byte	$18
12494 2C00                        18            .byte	$18
12495 2C01                        18            .byte	$18
12496 2C02                        18            .byte	$18
12497 2C03                        3C            .byte	$3C
12498 2C04                        00            .byte	0
12499 2C05                        00            .byte	0
12500 2C06                        00            .byte	0
12501 2C07                        00            .byte	0
12502                                           ! 1512  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12503 2C08                        00            .byte	0
12504 2C09                        00            .byte	0
12505 2C0A                        06            .byte	6
12506 2C0B                        06            .byte	6
12507 2C0C                        00            .byte	0
12508 2C0D                        0E            .byte	$E
12509 2C0E                        06            .byte	6
12510 2C0F                        06            .byte	6
12511 2C10                        06            .byte	6
12512 2C11                        06            .byte	6
12513 2C12                        06            .byte	6
12514 2C13                        06            .byte	6
12515 2C14                        66            .byte	$66
12516 2C15                        66            .byte	$66
12517 2C16                        3C            .byte	$3C
12518 2C17                        00            .byte	0
12519                                           ! 1513  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12520 2C18                        00            .byte	0
12521 2C19                        00            .byte	0
12522 2C1A                        E0            .byte	$E0
12523 2C1B                        60            .byte	$60
12524 2C1C                        60            .byte	$60
12525 2C1D                        66            .byte	$66
12526 2C1E                        6C            .byte	$6C
12527 2C1F                        78            .byte	$78
12528 2C20                        78            .byte	$78
12529 2C21                        6C            .byte	$6C
12530 2C22                        66            .byte	$66
12531 2C23                        E6            .byte	$E6
12532 2C24                        00            .byte	0
12533 2C25                        00            .byte	0
12534 2C26                        00            .byte	0
12535 2C27                        00            .byte	0
12536                                           ! 1514  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12537 2C28                        00            .byte	0
12538 2C29                        00            .byte	0
12539 2C2A                        38            .byte	$38
12540 2C2B                        18            .byte	$18
12541 2C2C                        18            .byte	$18
12542 2C2D                        18            .byte	$18
12543 2C2E                        18            .byte	$18
12544 2C2F                        18            .byte	$18
12545 2C30                        18            .byte	$18
12546 2C31                        18            .byte	$18
12547 2C32                        18            .byte	$18
12548 2C33                        3C            .byte	$3C
12549 2C34                        00            .byte	0
12550 2C35                        00            .byte	0
12551 2C36                        00            .byte	0
12552 2C37                        00            .byte	0
12553                                           ! 1515  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12554 2C38                        00            .byte	0
12555 2C39                        00            .byte	0
12556 2C3A                        00            .byte	0
12557 2C3B                        00            .byte	0
12558 2C3C                        00            .byte	0
12559 2C3D                        E6            .byte	$E6
12560 2C3E                        FF            .byte	$FF
12561 2C3F                        DB            .byte	$DB
12562 2C40                        DB            .byte	$DB
12563 2C41                        DB            .byte	$DB
12564 2C42                        DB            .byte	$DB
12565 2C43                        DB            .byte	$DB
12566 2C44                        00            .byte	0
12567 2C45                        00            .byte	0
12568 2C46                        00            .byte	0
12569 2C47                        00            .byte	0
12570                                           ! 1516  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12571 2C48                        00            .byte	0
12572 2C49                        00            .byte	0
12573 2C4A                        00            .byte	0
12574 2C4B                        00            .byte	0
12575 2C4C                        00            .byte	0
12576 2C4D                        DC            .byte	$DC
12577 2C4E                        66            .byte	$66
12578 2C4F                        66            .byte	$66
12579 2C50                        66            .byte	$66
12580 2C51                        66            .byte	$66
12581 2C52                        66            .byte	$66
12582 2C53                        66            .byte	$66
12583 2C54                        00            .byte	0
12584 2C55                        00            .byte	0
12585 2C56                        00            .byte	0
12586 2C57                        00            .byte	0
12587                                           ! 1517  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12588 2C58                        00            .byte	0
12589 2C59                        00            .byte	0
12590 2C5A                        00            .byte	0
12591 2C5B                        00            .byte	0
12592 2C5C                        00            .byte	0
12593 2C5D                        7C            .byte	$7C
12594 2C5E                        C6            .byte	$C6
12595 2C5F                        C6            .byte	$C6
12596 2C60                        C6            .byte	$C6
12597 2C61                        C6            .byte	$C6
12598 2C62                        C6            .byte	$C6
12599 2C63                        7C            .byte	$7C
12600 2C64                        00            .byte	0
12601 2C65                        00            .byte	0
12602 2C66                        00            .byte	0
12603 2C67                        00            .byte	0
12604                                           ! 1518  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12605 2C68                        00            .byte	0
12606 2C69                        00            .byte	0
12607 2C6A                        00            .byte	0
12608 2C6B                        00            .byte	0
12609 2C6C                        00            .byte	0
12610 2C6D                        DC            .byte	$DC
12611 2C6E                        66            .byte	$66
12612 2C6F                        66            .byte	$66
12613 2C70                        66            .byte	$66
12614 2C71                        66            .byte	$66
12615 2C72                        66            .byte	$66
12616 2C73                        7C            .byte	$7C
12617 2C74                        60            .byte	$60
12618 2C75                        60            .byte	$60
12619 2C76                        F0            .byte	$F0
12620 2C77                        00            .byte	0
12621                                           ! 1519  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12622 2C78                        00            .byte	0
12623 2C79                        00            .byte	0
12624 2C7A                        00            .byte	0
12625 2C7B                        00            .byte	0
12626 2C7C                        00            .byte	0
12627 2C7D                        76            .byte	$76
12628 2C7E                        CC            .byte	$CC
12629 2C7F                        CC            .byte	$CC
12630 2C80                        CC            .byte	$CC
12631 2C81                        CC            .byte	$CC
12632 2C82                        CC            .byte	$CC
12633 2C83                        7C            .byte	$7C
12634 2C84                        0C            .byte	$C
12635 2C85                        0C            .byte	$C
12636 2C86                        1E            .byte	$1E
12637 2C87                        00            .byte	0
12638                                           ! 1520  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12639 2C88                        00            .byte	0
12640 2C89                        00            .byte	0
12641 2C8A                        00            .byte	0
12642 2C8B                        00            .byte	0
12643 2C8C                        00            .byte	0
12644 2C8D                        DC            .byte	$DC
12645 2C8E                        76            .byte	$76
12646 2C8F                        66            .byte	$66
12647 2C90                        60            .byte	$60
12648 2C91                        60            .byte	$60
12649 2C92                        60            .byte	$60
12650 2C93                        F0            .byte	$F0
12651 2C94                        00            .byte	0
12652 2C95                        00            .byte	0
12653 2C96                        00            .byte	0
12654 2C97                        00            .byte	0
12655                                           ! 1521  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12656 2C98                        00            .byte	0
12657 2C99                        00            .byte	0
12658 2C9A                        00            .byte	0
12659 2C9B                        00            .byte	0
12660 2C9C                        00            .byte	0
12661 2C9D                        7C            .byte	$7C
12662 2C9E                        C6            .byte	$C6
12663 2C9F                        60            .byte	$60
12664 2CA0                        38            .byte	$38
12665 2CA1                        0C            .byte	$C
12666 2CA2                        C6            .byte	$C6
12667 2CA3                        7C            .byte	$7C
12668 2CA4                        00            .byte	0
12669 2CA5                        00            .byte	0
12670 2CA6                        00            .byte	0
12671 2CA7                        00            .byte	0
12672                                           ! 1522  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12673 2CA8                        00            .byte	0
12674 2CA9                        00            .byte	0
12675 2CAA                        10            .byte	$10
12676 2CAB                        30            .byte	$30
12677 2CAC                        30            .byte	$30
12678 2CAD                        FC            .byte	$FC
12679 2CAE                        30            .byte	$30
12680 2CAF                        30            .byte	$30
12681 2CB0                        30            .byte	$30
12682 2CB1                        30            .byte	$30
12683 2CB2                        36            .byte	$36
12684 2CB3                        1C            .byte	$1C
12685 2CB4                        00            .byte	0
12686 2CB5                        00            .byte	0
12687 2CB6                        00            .byte	0
12688 2CB7                        00            .byte	0
12689                                           ! 1523  0x00, 0x00, 0x00, 
12690 2CB8                        00            .byte	0
12691 2CB9                        00            .byte	0
12692 2CBA                        00            .byte	0
12693                                           ! 1523 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12694 2CBB                        00            .byte	0
12695 2CBC                        00            .byte	0
12696 2CBD                        CC            .byte	$CC
12697 2CBE                        CC            .byte	$CC
12698 2CBF                        CC            .byte	$CC
12699 2CC0                        CC            .byte	$CC
12700 2CC1                        CC            .byte	$CC
12701 2CC2                        CC            .byte	$CC
12702 2CC3                        76            .byte	$76
12703 2CC4                        00            .byte	0
12704 2CC5                        00            .byte	0
12705 2CC6                        00            .byte	0
12706 2CC7                        00            .byte	0
12707                                           ! 1524  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12708 2CC8                        00            .byte	0
12709 2CC9                        00            .byte	0
12710 2CCA                        00            .byte	0
12711 2CCB                        00            .byte	0
12712 2CCC                        00            .byte	0
12713 2CCD                        C3            .byte	$C3
12714 2CCE                        C3            .byte	$C3
12715 2CCF                        C3            .byte	$C3
12716 2CD0                        C3            .byte	$C3
12717 2CD1                        66            .byte	$66
12718 2CD2                        3C            .byte	$3C
12719 2CD3                        18            .byte	$18
12720 2CD4                        00            .byte	0
12721 2CD5                        00            .byte	0
12722 2CD6                        00            .byte	0
12723 2CD7                        00            .byte	0
12724                                           ! 1525  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12725 2CD8                        00            .byte	0
12726 2CD9                        00            .byte	0
12727 2CDA                        00            .byte	0
12728 2CDB                        00            .byte	0
12729 2CDC                        00            .byte	0
12730 2CDD                        C3            .byte	$C3
12731 2CDE                        C3            .byte	$C3
12732 2CDF                        C3            .byte	$C3
12733 2CE0                        DB            .byte	$DB
12734 2CE1                        DB            .byte	$DB
12735 2CE2                        FF            .byte	$FF
12736 2CE3                        66            .byte	$66
12737 2CE4                        00            .byte	0
12738 2CE5                        00            .byte	0
12739 2CE6                        00            .byte	0
12740 2CE7                        00            .byte	0
12741                                           ! 1526  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12742 2CE8                        00            .byte	0
12743 2CE9                        00            .byte	0
12744 2CEA                        00            .byte	0
12745 2CEB                        00            .byte	0
12746 2CEC                        00            .byte	0
12747 2CED                        C3            .byte	$C3
12748 2CEE                        66            .byte	$66
12749 2CEF                        3C            .byte	$3C
12750 2CF0                        18            .byte	$18
12751 2CF1                        3C            .byte	$3C
12752 2CF2                        66            .byte	$66
12753 2CF3                        C3            .byte	$C3
12754 2CF4                        00            .byte	0
12755 2CF5                        00            .byte	0
12756 2CF6                        00            .byte	0
12757 2CF7                        00            .byte	0
12758                                           ! 1527  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12759 2CF8                        00            .byte	0
12760 2CF9                        00            .byte	0
12761 2CFA                        00            .byte	0
12762 2CFB                        00            .byte	0
12763 2CFC                        00            .byte	0
12764 2CFD                        C6            .byte	$C6
12765 2CFE                        C6            .byte	$C6
12766 2CFF                        C6            .byte	$C6
12767 2D00                        C6            .byte	$C6
12768 2D01                        C6            .byte	$C6
12769 2D02                        C6            .byte	$C6
12770 2D03                        7E            .byte	$7E
12771 2D04                        06            .byte	6
12772 2D05                        0C            .byte	$C
12773 2D06                        F8            .byte	$F8
12774 2D07                        00            .byte	0
12775                                           ! 1528  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12776 2D08                        00            .byte	0
12777 2D09                        00            .byte	0
12778 2D0A                        00            .byte	0
12779 2D0B                        00            .byte	0
12780 2D0C                        00            .byte	0
12781 2D0D                        FE            .byte	$FE
12782 2D0E                        CC            .byte	$CC
12783 2D0F                        18            .byte	$18
12784 2D10                        30            .byte	$30
12785 2D11                        60            .byte	$60
12786 2D12                        C6            .byte	$C6
12787 2D13                        FE            .byte	$FE
12788 2D14                        00            .byte	0
12789 2D15                        00            .byte	0
12790 2D16                        00            .byte	0
12791 2D17                        00            .byte	0
12792                                           ! 1529  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12793 2D18                        00            .byte	0
12794 2D19                        00            .byte	0
12795 2D1A                        0E            .byte	$E
12796 2D1B                        18            .byte	$18
12797 2D1C                        18            .byte	$18
12798 2D1D                        18            .byte	$18
12799 2D1E                        70            .byte	$70
12800 2D1F                        18            .byte	$18
12801 2D20                        18            .byte	$18
12802 2D21                        18            .byte	$18
12803 2D22                        18            .byte	$18
12804 2D23                        0E            .byte	$E
12805 2D24                        00            .byte	0
12806 2D25                        00            .byte	0
12807 2D26                        00            .byte	0
12808 2D27                        00            .byte	0
12809                                           ! 1530  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12810 2D28                        00            .byte	0
12811 2D29                        00            .byte	0
12812 2D2A                        18            .byte	$18
12813 2D2B                        18            .byte	$18
12814 2D2C                        18            .byte	$18
12815 2D2D                        18            .byte	$18
12816 2D2E                        00            .byte	0
12817 2D2F                        18            .byte	$18
12818 2D30                        18            .byte	$18
12819 2D31                        18            .byte	$18
12820 2D32                        18            .byte	$18
12821 2D33                        18            .byte	$18
12822 2D34                        00            .byte	0
12823 2D35                        00            .byte	0
12824 2D36                        00            .byte	0
12825 2D37                        00            .byte	0
12826                                           ! 1531  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12827 2D38                        00            .byte	0
12828 2D39                        00            .byte	0
12829 2D3A                        70            .byte	$70
12830 2D3B                        18            .byte	$18
12831 2D3C                        18            .byte	$18
12832 2D3D                        18            .byte	$18
12833 2D3E                        0E            .byte	$E
12834 2D3F                        18            .byte	$18
12835 2D40                        18            .byte	$18
12836 2D41                        18            .byte	$18
12837 2D42                        18            .byte	$18
12838 2D43                        70            .byte	$70
12839 2D44                        00            .byte	0
12840 2D45                        00            .byte	0
12841 2D46                        00            .byte	0
12842 2D47                        00            .byte	0
12843                                           ! 1532  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12844 2D48                        00            .byte	0
12845 2D49                        00            .byte	0
12846 2D4A                        76            .byte	$76
12847 2D4B                        DC            .byte	$DC
12848 2D4C                        00            .byte	0
12849 2D4D                        00            .byte	0
12850 2D4E                        00            .byte	0
12851 2D4F                        00            .byte	0
12852 2D50                        00            .byte	0
12853 2D51                        00            .byte	0
12854 2D52                        00            .byte	0
12855 2D53                        00            .byte	0
12856 2D54                        00            .byte	0
12857 2D55                        00            .byte	0
12858 2D56                        00            .byte	0
12859 2D57                        00            .byte	0
12860                                           ! 1533  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12861 2D58                        00            .byte	0
12862 2D59                        00            .byte	0
12863 2D5A                        00            .byte	0
12864 2D5B                        00            .byte	0
12865 2D5C                        10            .byte	$10
12866 2D5D                        38            .byte	$38
12867 2D5E                        6C            .byte	$6C
12868 2D5F                        C6            .byte	$C6
12869 2D60                        C6            .byte	$C6
12870 2D61                        C6            .byte	$C6
12871 2D62                        FE            .byte	$FE
12872 2D63                        00            .byte	0
12873 2D64                        00            .byte	0
12874 2D65                        00            .byte	0
12875 2D66                        00            .byte	0
12876 2D67                        00            .byte	0
12877                                           ! 1534  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12878 2D68                        00            .byte	0
12879 2D69                        00            .byte	0
12880 2D6A                        3C            .byte	$3C
12881 2D6B                        66            .byte	$66
12882 2D6C                        C2            .byte	$C2
12883 2D6D                        C0            .byte	$C0
12884 2D6E                        C0            .byte	$C0
12885 2D6F                        C0            .byte	$C0
12886 2D70                        C2            .byte	$C2
12887 2D71                        66            .byte	$66
12888 2D72                        3C            .byte	$3C
12889 2D73                        0C            .byte	$C
12890 2D74                        06            .byte	6
12891 2D75                        7C            .byte	$7C
12892 2D76                        00            .byte	0
12893 2D77                        00            .byte	0
12894                                           ! 1535  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12895 2D78                        00            .byte	0
12896 2D79                        00            .byte	0
12897 2D7A                        CC            .byte	$CC
12898 2D7B                        00            .byte	0
12899 2D7C                        00            .byte	0
12900 2D7D                        CC            .byte	$CC
12901 2D7E                        CC            .byte	$CC
12902 2D7F                        CC            .byte	$CC
12903 2D80                        CC            .byte	$CC
12904 2D81                        CC            .byte	$CC
12905 2D82                        CC            .byte	$CC
12906 2D83                        76            .byte	$76
12907 2D84                        00            .byte	0
12908 2D85                        00            .byte	0
12909 2D86                        00            .byte	0
12910 2D87                        00            .byte	0
12911                                           ! 1536  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12912 2D88                        00            .byte	0
12913 2D89                        0C            .byte	$C
12914 2D8A                        18            .byte	$18
12915 2D8B                        30            .byte	$30
12916 2D8C                        00            .byte	0
12917 2D8D                        7C            .byte	$7C
12918 2D8E                        C6            .byte	$C6
12919 2D8F                        FE            .byte	$FE
12920 2D90                        C0            .byte	$C0
12921 2D91                        C0            .byte	$C0
12922 2D92                        C6            .byte	$C6
12923 2D93                        7C            .byte	$7C
12924 2D94                        00            .byte	0
12925 2D95                        00            .byte	0
12926 2D96                        00            .byte	0
12927 2D97                        00            .byte	0
12928                                           ! 1537  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12929 2D98                        00            .byte	0
12930 2D99                        10            .byte	$10
12931 2D9A                        38            .byte	$38
12932 2D9B                        6C            .byte	$6C
12933 2D9C                        00            .byte	0
12934 2D9D                        78            .byte	$78
12935 2D9E                        0C            .byte	$C
12936 2D9F                        7C            .byte	$7C
12937 2DA0                        CC            .byte	$CC
12938 2DA1                        CC            .byte	$CC
12939 2DA2                        CC            .byte	$CC
12940 2DA3                        76            .byte	$76
12941 2DA4                        00            .byte	0
12942 2DA5                        00            .byte	0
12943 2DA6                        00            .byte	0
12944 2DA7                        00            .byte	0
12945                                           ! 1538  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12946 2DA8                        00            .byte	0
12947 2DA9                        00            .byte	0
12948 2DAA                        CC            .byte	$CC
12949 2DAB                        00            .byte	0
12950 2DAC                        00            .byte	0
12951 2DAD                        78            .byte	$78
12952 2DAE                        0C            .byte	$C
12953 2DAF                        7C            .byte	$7C
12954 2DB0                        CC            .byte	$CC
12955 2DB1                        CC            .byte	$CC
12956 2DB2                        CC            .byte	$CC
12957 2DB3                        76            .byte	$76
12958 2DB4                        00            .byte	0
12959 2DB5                        00            .byte	0
12960 2DB6                        00            .byte	0
12961 2DB7                        00            .byte	0
12962                                           ! 1539  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12963 2DB8                        00            .byte	0
12964 2DB9                        60            .byte	$60
12965 2DBA                        30            .byte	$30
12966 2DBB                        18            .byte	$18
12967 2DBC                        00            .byte	0
12968 2DBD                        78            .byte	$78
12969 2DBE                        0C            .byte	$C
12970 2DBF                        7C            .byte	$7C
12971 2DC0                        CC            .byte	$CC
12972 2DC1                        CC            .byte	$CC
12973 2DC2                        CC            .byte	$CC
12974 2DC3                        76            .byte	$76
12975 2DC4                        00            .byte	0
12976 2DC5                        00            .byte	0
12977 2DC6                        00            .byte	0
12978 2DC7                        00            .byte	0
12979                                           ! 1540  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12980 2DC8                        00            .byte	0
12981 2DC9                        38            .byte	$38
12982 2DCA                        6C            .byte	$6C
12983 2DCB                        38            .byte	$38
12984 2DCC                        00            .byte	0
12985 2DCD                        78            .byte	$78
12986 2DCE                        0C            .byte	$C
12987 2DCF                        7C            .byte	$7C
12988 2DD0                        CC            .byte	$CC
12989 2DD1                        CC            .byte	$CC
12990 2DD2                        CC            .byte	$CC
12991 2DD3                        76            .byte	$76
12992 2DD4                        00            .byte	0
12993 2DD5                        00            .byte	0
12994 2DD6                        00            .byte	0
12995 2DD7                        00            .byte	0
12996                                           ! 1541  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12997 2DD8                        00            .byte	0
12998 2DD9                        00            .byte	0
12999 2DDA                        00            .byte	0
13000 2DDB                        00            .byte	0
13001 2DDC                        3C            .byte	$3C
13002 2DDD                        66            .byte	$66
13003 2DDE                        60            .byte	$60
13004 2DDF                        60            .byte	$60
13005 2DE0                        66            .byte	$66
13006 2DE1                        3C            .byte	$3C
13007 2DE2                        0C            .byte	$C
13008 2DE3                        06            .byte	6
13009 2DE4                        3C            .byte	$3C
13010 2DE5                        00            .byte	0
13011 2DE6                        00            .byte	0
13012 2DE7                        00            .byte	0
13013                                           ! 1542  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13014 2DE8                        00            .byte	0
13015 2DE9                        10            .byte	$10
13016 2DEA                        38            .byte	$38
13017 2DEB                        6C            .byte	$6C
13018 2DEC                        00            .byte	0
13019 2DED                        7C            .byte	$7C
13020 2DEE                        C6            .byte	$C6
13021 2DEF                        FE            .byte	$FE
13022 2DF0                        C0            .byte	$C0
13023 2DF1                        C0            .byte	$C0
13024 2DF2                        C6            .byte	$C6
13025 2DF3                        7C            .byte	$7C
13026 2DF4                        00            .byte	0
13027 2DF5                        00            .byte	0
13028 2DF6                        00            .byte	0
13029 2DF7                        00            .byte	0
13030                                           ! 1543  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13031 2DF8                        00            .byte	0
13032 2DF9                        00            .byte	0
13033 2DFA                        C6            .byte	$C6
13034 2DFB                        00            .byte	0
13035 2DFC                        00            .byte	0
13036 2DFD                        7C            .byte	$7C
13037 2DFE                        C6            .byte	$C6
13038 2DFF                        FE            .byte	$FE
13039 2E00                        C0            .byte	$C0
13040 2E01                        C0            .byte	$C0
13041 2E02                        C6            .byte	$C6
13042 2E03                        7C            .byte	$7C
13043 2E04                        00            .byte	0
13044 2E05                        00            .byte	0
13045 2E06                        00            .byte	0
13046 2E07                        00            .byte	0
13047                                           ! 1544  0x00, 0x60, 0x30, 0x18, 0x00,
13048 2E08                        00            .byte	0
13049 2E09                        60            .byte	$60
13050 2E0A                        30            .byte	$30
13051 2E0B                        18            .byte	$18
13052                                           ! 1544  0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13053 2E0C                        00            .byte	0
13054 2E0D                        7C            .byte	$7C
13055 2E0E                        C6            .byte	$C6
13056 2E0F                        FE            .byte	$FE
13057 2E10                        C0            .byte	$C0
13058 2E11                        C0            .byte	$C0
13059 2E12                        C6            .byte	$C6
13060 2E13                        7C            .byte	$7C
13061 2E14                        00            .byte	0
13062 2E15                        00            .byte	0
13063 2E16                        00            .byte	0
13064 2E17                        00            .byte	0
13065                                           ! 1545  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13066 2E18                        00            .byte	0
13067 2E19                        00            .byte	0
13068 2E1A                        66            .byte	$66
13069 2E1B                        00            .byte	0
13070 2E1C                        00            .byte	0
13071 2E1D                        38            .byte	$38
13072 2E1E                        18            .byte	$18
13073 2E1F                        18            .byte	$18
13074 2E20                        18            .byte	$18
13075 2E21                        18            .byte	$18
13076 2E22                        18            .byte	$18
13077 2E23                        3C            .byte	$3C
13078 2E24                        00            .byte	0
13079 2E25                        00            .byte	0
13080 2E26                        00            .byte	0
13081 2E27                        00            .byte	0
13082                                           ! 1546  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13083 2E28                        00            .byte	0
13084 2E29                        18            .byte	$18
13085 2E2A                        3C            .byte	$3C
13086 2E2B                        66            .byte	$66
13087 2E2C                        00            .byte	0
13088 2E2D                        38            .byte	$38
13089 2E2E                        18            .byte	$18
13090 2E2F                        18            .byte	$18
13091 2E30                        18            .byte	$18
13092 2E31                        18            .byte	$18
13093 2E32                        18            .byte	$18
13094 2E33                        3C            .byte	$3C
13095 2E34                        00            .byte	0
13096 2E35                        00            .byte	0
13097 2E36                        00            .byte	0
13098 2E37                        00            .byte	0
13099                                           ! 1547  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13100 2E38                        00            .byte	0
13101 2E39                        60            .byte	$60
13102 2E3A                        30            .byte	$30
13103 2E3B                        18            .byte	$18
13104 2E3C                        00            .byte	0
13105 2E3D                        38            .byte	$38
13106 2E3E                        18            .byte	$18
13107 2E3F                        18            .byte	$18
13108 2E40                        18            .byte	$18
13109 2E41                        18            .byte	$18
13110 2E42                        18            .byte	$18
13111 2E43                        3C            .byte	$3C
13112 2E44                        00            .byte	0
13113 2E45                        00            .byte	0
13114 2E46                        00            .byte	0
13115 2E47                        00            .byte	0
13116                                           ! 1548  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13117 2E48                        00            .byte	0
13118 2E49                        C6            .byte	$C6
13119 2E4A                        00            .byte	0
13120 2E4B                        10            .byte	$10
13121 2E4C                        38            .byte	$38
13122 2E4D                        6C            .byte	$6C
13123 2E4E                        C6            .byte	$C6
13124 2E4F                        C6            .byte	$C6
13125 2E50                        FE            .byte	$FE
13126 2E51                        C6            .byte	$C6
13127 2E52                        C6            .byte	$C6
13128 2E53                        C6            .byte	$C6
13129 2E54                        00            .byte	0
13130 2E55                        00            .byte	0
13131 2E56                        00            .byte	0
13132 2E57                        00            .byte	0
13133                                           ! 1549  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13134 2E58                        38            .byte	$38
13135 2E59                        6C            .byte	$6C
13136 2E5A                        38            .byte	$38
13137 2E5B                        00            .byte	0
13138 2E5C                        38            .byte	$38
13139 2E5D                        6C            .byte	$6C
13140 2E5E                        C6            .byte	$C6
13141 2E5F                        C6            .byte	$C6
13142 2E60                        FE            .byte	$FE
13143 2E61                        C6            .byte	$C6
13144 2E62                        C6            .byte	$C6
13145 2E63                        C6            .byte	$C6
13146 2E64                        00            .byte	0
13147 2E65                        00            .byte	0
13148 2E66                        00            .byte	0
13149 2E67                        00            .byte	0
13150                                           ! 1550  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13151 2E68                        18            .byte	$18
13152 2E69                        30            .byte	$30
13153 2E6A                        60            .byte	$60
13154 2E6B                        00            .byte	0
13155 2E6C                        FE            .byte	$FE
13156 2E6D                        66            .byte	$66
13157 2E6E                        60            .byte	$60
13158 2E6F                        7C            .byte	$7C
13159 2E70                        60            .byte	$60
13160 2E71                        60            .byte	$60
13161 2E72                        66            .byte	$66
13162 2E73                        FE            .byte	$FE
13163 2E74                        00            .byte	0
13164 2E75                        00            .byte	0
13165 2E76                        00            .byte	0
13166 2E77                        00            .byte	0
13167                                           ! 1551  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13168 2E78                        00            .byte	0
13169 2E79                        00            .byte	0
13170 2E7A                        00            .byte	0
13171 2E7B                        00            .byte	0
13172 2E7C                        00            .byte	0
13173 2E7D                        6E            .byte	$6E
13174 2E7E                        3B            .byte	$3B
13175 2E7F                        1B            .byte	$1B
13176 2E80                        7E            .byte	$7E
13177 2E81                        D8            .byte	$D8
13178 2E82                        DC            .byte	$DC
13179 2E83                        77            .byte	$77
13180 2E84                        00            .byte	0
13181 2E85                        00            .byte	0
13182 2E86                        00            .byte	0
13183 2E87                        00            .byte	0
13184                                           ! 1552  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13185 2E88                        00            .byte	0
13186 2E89                        00            .byte	0
13187 2E8A                        3E            .byte	$3E
13188 2E8B                        6C            .byte	$6C
13189 2E8C                        CC            .byte	$CC
13190 2E8D                        CC            .byte	$CC
13191 2E8E                        FE            .byte	$FE
13192 2E8F                        CC            .byte	$CC
13193 2E90                        CC            .byte	$CC
13194 2E91                        CC            .byte	$CC
13195 2E92                        CC            .byte	$CC
13196 2E93                        CE            .byte	$CE
13197 2E94                        00            .byte	0
13198 2E95                        00            .byte	0
13199 2E96                        00            .byte	0
13200 2E97                        00            .byte	0
13201                                           ! 1553  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13202 2E98                        00            .byte	0
13203 2E99                        10            .byte	$10
13204 2E9A                        38            .byte	$38
13205 2E9B                        6C            .byte	$6C
13206 2E9C                        00            .byte	0
13207 2E9D                        7C            .byte	$7C
13208 2E9E                        C6            .byte	$C6
13209 2E9F                        C6            .byte	$C6
13210 2EA0                        C6            .byte	$C6
13211 2EA1                        C6            .byte	$C6
13212 2EA2                        C6            .byte	$C6
13213 2EA3                        7C            .byte	$7C
13214 2EA4                        00            .byte	0
13215 2EA5                        00            .byte	0
13216 2EA6                        00            .byte	0
13217 2EA7                        00            .byte	0
13218                                           ! 1554  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13219 2EA8                        00            .byte	0
13220 2EA9                        00            .byte	0
13221 2EAA                        C6            .byte	$C6
13222 2EAB                        00            .byte	0
13223 2EAC                        00            .byte	0
13224 2EAD                        7C            .byte	$7C
13225 2EAE                        C6            .byte	$C6
13226 2EAF                        C6            .byte	$C6
13227 2EB0                        C6            .byte	$C6
13228 2EB1                        C6            .byte	$C6
13229 2EB2                        C6            .byte	$C6
13230 2EB3                        7C            .byte	$7C
13231 2EB4                        00            .byte	0
13232 2EB5                        00            .byte	0
13233 2EB6                        00            .byte	0
13234 2EB7                        00            .byte	0
13235                                           ! 1555  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13236 2EB8                        00            .byte	0
13237 2EB9                        60            .byte	$60
13238 2EBA                        30            .byte	$30
13239 2EBB                        18            .byte	$18
13240 2EBC                        00            .byte	0
13241 2EBD                        7C            .byte	$7C
13242 2EBE                        C6            .byte	$C6
13243 2EBF                        C6            .byte	$C6
13244 2EC0                        C6            .byte	$C6
13245 2EC1                        C6            .byte	$C6
13246 2EC2                        C6            .byte	$C6
13247 2EC3                        7C            .byte	$7C
13248 2EC4                        00            .byte	0
13249 2EC5                        00            .byte	0
13250 2EC6                        00            .byte	0
13251 2EC7                        00            .byte	0
13252                                           ! 1556  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13253 2EC8                        00            .byte	0
13254 2EC9                        30            .byte	$30
13255 2ECA                        78            .byte	$78
13256 2ECB                        CC            .byte	$CC
13257 2ECC                        00            .byte	0
13258 2ECD                        CC            .byte	$CC
13259 2ECE                        CC            .byte	$CC
13260 2ECF                        CC            .byte	$CC
13261 2ED0                        CC            .byte	$CC
13262 2ED1                        CC            .byte	$CC
13263 2ED2                        CC            .byte	$CC
13264 2ED3                        76            .byte	$76
13265 2ED4                        00            .byte	0
13266 2ED5                        00            .byte	0
13267 2ED6                        00            .byte	0
13268 2ED7                        00            .byte	0
13269                                           ! 1557  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13270 2ED8                        00            .byte	0
13271 2ED9                        60            .byte	$60
13272 2EDA                        30            .byte	$30
13273 2EDB                        18            .byte	$18
13274 2EDC                        00            .byte	0
13275 2EDD                        CC            .byte	$CC
13276 2EDE                        CC            .byte	$CC
13277 2EDF                        CC            .byte	$CC
13278 2EE0                        CC            .byte	$CC
13279 2EE1                        CC            .byte	$CC
13280 2EE2                        CC            .byte	$CC
13281 2EE3                        76            .byte	$76
13282 2EE4                        00            .byte	0
13283 2EE5                        00            .byte	0
13284 2EE6                        00            .byte	0
13285 2EE7                        00            .byte	0
13286                                           ! 1558  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13287 2EE8                        00            .byte	0
13288 2EE9                        00            .byte	0
13289 2EEA                        C6            .byte	$C6
13290 2EEB                        00            .byte	0
13291 2EEC                        00            .byte	0
13292 2EED                        C6            .byte	$C6
13293 2EEE                        C6            .byte	$C6
13294 2EEF                        C6            .byte	$C6
13295 2EF0                        C6            .byte	$C6
13296 2EF1                        C6            .byte	$C6
13297 2EF2                        C6            .byte	$C6
13298 2EF3                        7E            .byte	$7E
13299 2EF4                        06            .byte	6
13300 2EF5                        0C            .byte	$C
13301 2EF6                        78            .byte	$78
13302 2EF7                        00            .byte	0
13303                                           ! 1559  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13304 2EF8                        00            .byte	0
13305 2EF9                        C6            .byte	$C6
13306 2EFA                        00            .byte	0
13307 2EFB                        7C            .byte	$7C
13308 2EFC                        C6            .byte	$C6
13309 2EFD                        C6            .byte	$C6
13310 2EFE                        C6            .byte	$C6
13311 2EFF                        C6            .byte	$C6
13312 2F00                        C6            .byte	$C6
13313 2F01                        C6            .byte	$C6
13314 2F02                        C6            .byte	$C6
13315 2F03                        7C            .byte	$7C
13316 2F04                        00            .byte	0
13317 2F05                        00            .byte	0
13318 2F06                        00            .byte	0
13319 2F07                        00            .byte	0
13320                                           ! 1560  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13321 2F08                        00            .byte	0
13322 2F09                        C6            .byte	$C6
13323 2F0A                        00            .byte	0
13324 2F0B                        C6            .byte	$C6
13325 2F0C                        C6            .byte	$C6
13326 2F0D                        C6            .byte	$C6
13327 2F0E                        C6            .byte	$C6
13328 2F0F                        C6            .byte	$C6
13329 2F10                        C6            .byte	$C6
13330 2F11                        C6            .byte	$C6
13331 2F12                        C6            .byte	$C6
13332 2F13                        7C            .byte	$7C
13333 2F14                        00            .byte	0
13334 2F15                        00            .byte	0
13335 2F16                        00            .byte	0
13336 2F17                        00            .byte	0
13337                                           ! 1561  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13338 2F18                        00            .byte	0
13339 2F19                        18            .byte	$18
13340 2F1A                        18            .byte	$18
13341 2F1B                        7E            .byte	$7E
13342 2F1C                        C3            .byte	$C3
13343 2F1D                        C0            .byte	$C0
13344 2F1E                        C0            .byte	$C0
13345 2F1F                        C0            .byte	$C0
13346 2F20                        C3            .byte	$C3
13347 2F21                        7E            .byte	$7E
13348 2F22                        18            .byte	$18
13349 2F23                        18            .byte	$18
13350 2F24                        00            .byte	0
13351 2F25                        00            .byte	0
13352 2F26                        00            .byte	0
13353 2F27                        00            .byte	0
13354                                           ! 1562  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13355 2F28                        00            .byte	0
13356 2F29                        38            .byte	$38
13357 2F2A                        6C            .byte	$6C
13358 2F2B                        64            .byte	$64
13359 2F2C                        60            .byte	$60
13360 2F2D                        F0            .byte	$F0
13361 2F2E                        60            .byte	$60
13362 2F2F                        60            .byte	$60
13363 2F30                        60            .byte	$60
13364 2F31                        60            .byte	$60
13365 2F32                        E6            .byte	$E6
13366 2F33                        FC            .byte	$FC
13367 2F34                        00            .byte	0
13368 2F35                        00            .byte	0
13369 2F36                        00            .byte	0
13370 2F37                        00            .byte	0
13371                                           ! 1563  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13372 2F38                        00            .byte	0
13373 2F39                        00            .byte	0
13374 2F3A                        C3            .byte	$C3
13375 2F3B                        66            .byte	$66
13376 2F3C                        3C            .byte	$3C
13377 2F3D                        18            .byte	$18
13378 2F3E                        FF            .byte	$FF
13379 2F3F                        18            .byte	$18
13380 2F40                        FF            .byte	$FF
13381 2F41                        18            .byte	$18
13382 2F42                        18            .byte	$18
13383 2F43                        18            .byte	$18
13384 2F44                        00            .byte	0
13385 2F45                        00            .byte	0
13386 2F46                        00            .byte	0
13387 2F47                        00            .byte	0
13388                                           ! 1564  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13389 2F48                        00            .byte	0
13390 2F49                        FC            .byte	$FC
13391 2F4A                        66            .byte	$66
13392 2F4B                        66            .byte	$66
13393 2F4C                        7C            .byte	$7C
13394 2F4D                        62            .byte	$62
13395 2F4E                        66            .byte	$66
13396 2F4F                        6F            .byte	$6F
13397 2F50                        66            .byte	$66
13398 2F51                        66            .byte	$66
13399 2F52                        66            .byte	$66
13400 2F53                        F3            .byte	$F3
13401 2F54                        00            .byte	0
13402 2F55                        00            .byte	0
13403 2F56                        00            .byte	0
13404 2F57                        00            .byte	0
13405                                           ! 1565  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e
13406 2F58                        00            .byte	0
13407 2F59                        0E            .byte	$E
13408 2F5A                        1B            .byte	$1B
13409 2F5B                        18            .byte	$18
13410 2F5C                        18            .byte	$18
13411 2F5D                        18            .byte	$18
13412                                           ! 1565 , 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13413 2F5E                        7E            .byte	$7E
13414 2F5F                        18            .byte	$18
13415 2F60                        18            .byte	$18
13416 2F61                        18            .byte	$18
13417 2F62                        18            .byte	$18
13418 2F63                        18            .byte	$18
13419 2F64                        D8            .byte	$D8
13420 2F65                        70            .byte	$70
13421 2F66                        00            .byte	0
13422 2F67                        00            .byte	0
13423                                           ! 1566  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13424 2F68                        00            .byte	0
13425 2F69                        18            .byte	$18
13426 2F6A                        30            .byte	$30
13427 2F6B                        60            .byte	$60
13428 2F6C                        00            .byte	0
13429 2F6D                        78            .byte	$78
13430 2F6E                        0C            .byte	$C
13431 2F6F                        7C            .byte	$7C
13432 2F70                        CC            .byte	$CC
13433 2F71                        CC            .byte	$CC
13434 2F72                        CC            .byte	$CC
13435 2F73                        76            .byte	$76
13436 2F74                        00            .byte	0
13437 2F75                        00            .byte	0
13438 2F76                        00            .byte	0
13439 2F77                        00            .byte	0
13440                                           ! 1567  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13441 2F78                        00            .byte	0
13442 2F79                        0C            .byte	$C
13443 2F7A                        18            .byte	$18
13444 2F7B                        30            .byte	$30
13445 2F7C                        00            .byte	0
13446 2F7D                        38            .byte	$38
13447 2F7E                        18            .byte	$18
13448 2F7F                        18            .byte	$18
13449 2F80                        18            .byte	$18
13450 2F81                        18            .byte	$18
13451 2F82                        18            .byte	$18
13452 2F83                        3C            .byte	$3C
13453 2F84                        00            .byte	0
13454 2F85                        00            .byte	0
13455 2F86                        00            .byte	0
13456 2F87                        00            .byte	0
13457                                           ! 1568  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13458 2F88                        00            .byte	0
13459 2F89                        18            .byte	$18
13460 2F8A                        30            .byte	$30
13461 2F8B                        60            .byte	$60
13462 2F8C                        00            .byte	0
13463 2F8D                        7C            .byte	$7C
13464 2F8E                        C6            .byte	$C6
13465 2F8F                        C6            .byte	$C6
13466 2F90                        C6            .byte	$C6
13467 2F91                        C6            .byte	$C6
13468 2F92                        C6            .byte	$C6
13469 2F93                        7C            .byte	$7C
13470 2F94                        00            .byte	0
13471 2F95                        00            .byte	0
13472 2F96                        00            .byte	0
13473 2F97                        00            .byte	0
13474                                           ! 1569  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13475 2F98                        00            .byte	0
13476 2F99                        18            .byte	$18
13477 2F9A                        30            .byte	$30
13478 2F9B                        60            .byte	$60
13479 2F9C                        00            .byte	0
13480 2F9D                        CC            .byte	$CC
13481 2F9E                        CC            .byte	$CC
13482 2F9F                        CC            .byte	$CC
13483 2FA0                        CC            .byte	$CC
13484 2FA1                        CC            .byte	$CC
13485 2FA2                        CC            .byte	$CC
13486 2FA3                        76            .byte	$76
13487 2FA4                        00            .byte	0
13488 2FA5                        00            .byte	0
13489 2FA6                        00            .byte	0
13490 2FA7                        00            .byte	0
13491                                           ! 1570  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13492 2FA8                        00            .byte	0
13493 2FA9                        00            .byte	0
13494 2FAA                        76            .byte	$76
13495 2FAB                        DC            .byte	$DC
13496 2FAC                        00            .byte	0
13497 2FAD                        DC            .byte	$DC
13498 2FAE                        66            .byte	$66
13499 2FAF                        66            .byte	$66
13500 2FB0                        66            .byte	$66
13501 2FB1                        66            .byte	$66
13502 2FB2                        66            .byte	$66
13503 2FB3                        66            .byte	$66
13504 2FB4                        00            .byte	0
13505 2FB5                        00            .byte	0
13506 2FB6                        00            .byte	0
13507 2FB7                        00            .byte	0
13508                                           ! 1571  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13509 2FB8                        76            .byte	$76
13510 2FB9                        DC            .byte	$DC
13511 2FBA                        00            .byte	0
13512 2FBB                        C6            .byte	$C6
13513 2FBC                        E6            .byte	$E6
13514 2FBD                        F6            .byte	$F6
13515 2FBE                        FE            .byte	$FE
13516 2FBF                        DE            .byte	$DE
13517 2FC0                        CE            .byte	$CE
13518 2FC1                        C6            .byte	$C6
13519 2FC2                        C6            .byte	$C6
13520 2FC3                        C6            .byte	$C6
13521 2FC4                        00            .byte	0
13522 2FC5                        00            .byte	0
13523 2FC6                        00            .byte	0
13524 2FC7                        00            .byte	0
13525                                           ! 1572  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13526 2FC8                        00            .byte	0
13527 2FC9                        3C            .byte	$3C
13528 2FCA                        6C            .byte	$6C
13529 2FCB                        6C            .byte	$6C
13530 2FCC                        3E            .byte	$3E
13531 2FCD                        00            .byte	0
13532 2FCE                        7E            .byte	$7E
13533 2FCF                        00            .byte	0
13534 2FD0                        00            .byte	0
13535 2FD1                        00            .byte	0
13536 2FD2                        00            .byte	0
13537 2FD3                        00            .byte	0
13538 2FD4                        00            .byte	0
13539 2FD5                        00            .byte	0
13540 2FD6                        00            .byte	0
13541 2FD7                        00            .byte	0
13542                                           ! 1573  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13543 2FD8                        00            .byte	0
13544 2FD9                        38            .byte	$38
13545 2FDA                        6C            .byte	$6C
13546 2FDB                        6C            .byte	$6C
13547 2FDC                        38            .byte	$38
13548 2FDD                        00            .byte	0
13549 2FDE                        7C            .byte	$7C
13550 2FDF                        00            .byte	0
13551 2FE0                        00            .byte	0
13552 2FE1                        00            .byte	0
13553 2FE2                        00            .byte	0
13554 2FE3                        00            .byte	0
13555 2FE4                        00            .byte	0
13556 2FE5                        00            .byte	0
13557 2FE6                        00            .byte	0
13558 2FE7                        00            .byte	0
13559                                           ! 1574  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13560 2FE8                        00            .byte	0
13561 2FE9                        00            .byte	0
13562 2FEA                        30            .byte	$30
13563 2FEB                        30            .byte	$30
13564 2FEC                        00            .byte	0
13565 2FED                        30            .byte	$30
13566 2FEE                        30            .byte	$30
13567 2FEF                        60            .byte	$60
13568 2FF0                        C0            .byte	$C0
13569 2FF1                        C6            .byte	$C6
13570 2FF2                        C6            .byte	$C6
13571 2FF3                        7C            .byte	$7C
13572 2FF4                        00            .byte	0
13573 2FF5                        00            .byte	0
13574 2FF6                        00            .byte	0
13575 2FF7                        00            .byte	0
13576                                           ! 1575  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13577 2FF8                        00            .byte	0
13578 2FF9                        00            .byte	0
13579 2FFA                        00            .byte	0
13580 2FFB                        00            .byte	0
13581 2FFC                        00            .byte	0
13582 2FFD                        00            .byte	0
13583 2FFE                        FE            .byte	$FE
13584 2FFF                        C0            .byte	$C0
13585 3000                        C0            .byte	$C0
13586 3001                        C0            .byte	$C0
13587 3002                        C0            .byte	$C0
13588 3003                        00            .byte	0
13589 3004                        00            .byte	0
13590 3005                        00            .byte	0
13591 3006                        00            .byte	0
13592 3007                        00            .byte	0
13593                                           ! 1576  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13594 3008                        00            .byte	0
13595 3009                        00            .byte	0
13596 300A                        00            .byte	0
13597 300B                        00            .byte	0
13598 300C                        00            .byte	0
13599 300D                        00            .byte	0
13600 300E                        FE            .byte	$FE
13601 300F                        06            .byte	6
13602 3010                        06            .byte	6
13603 3011                        06            .byte	6
13604 3012                        06            .byte	6
13605 3013                        00            .byte	0
13606 3014                        00            .byte	0
13607 3015                        00            .byte	0
13608 3016                        00            .byte	0
13609 3017                        00            .byte	0
13610                                           ! 1577  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13611 3018                        00            .byte	0
13612 3019                        C0            .byte	$C0
13613 301A                        C0            .byte	$C0
13614 301B                        C2            .byte	$C2
13615 301C                        C6            .byte	$C6
13616 301D                        CC            .byte	$CC
13617 301E                        18            .byte	$18
13618 301F                        30            .byte	$30
13619 3020                        60            .byte	$60
13620 3021                        CE            .byte	$CE
13621 3022                        9B            .byte	$9B
13622 3023                        06            .byte	6
13623 3024                        0C            .byte	$C
13624 3025                        1F            .byte	$1F
13625 3026                        00            .byte	0
13626 3027                        00            .byte	0
13627                                           ! 1578  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13628 3028                        00            .byte	0
13629 3029                        C0            .byte	$C0
13630 302A                        C0            .byte	$C0
13631 302B                        C2            .byte	$C2
13632 302C                        C6            .byte	$C6
13633 302D                        CC            .byte	$CC
13634 302E                        18            .byte	$18
13635 302F                        30            .byte	$30
13636 3030                        66            .byte	$66
13637 3031                        CE            .byte	$CE
13638 3032                        96            .byte	$96
13639 3033                        3E            .byte	$3E
13640 3034                        06            .byte	6
13641 3035                        06            .byte	6
13642 3036                        00            .byte	0
13643 3037                        00            .byte	0
13644                                           ! 1579  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13645 3038                        00            .byte	0
13646 3039                        00            .byte	0
13647 303A                        18            .byte	$18
13648 303B                        18            .byte	$18
13649 303C                        00            .byte	0
13650 303D                        18            .byte	$18
13651 303E                        18            .byte	$18
13652 303F                        18            .byte	$18
13653 3040                        3C            .byte	$3C
13654 3041                        3C            .byte	$3C
13655 3042                        3C            .byte	$3C
13656 3043                        18            .byte	$18
13657 3044                        00            .byte	0
13658 3045                        00            .byte	0
13659 3046                        00            .byte	0
13660 3047                        00            .byte	0
13661                                           ! 1580  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13662 3048                        00            .byte	0
13663 3049                        00            .byte	0
13664 304A                        00            .byte	0
13665 304B                        00            .byte	0
13666 304C                        00            .byte	0
13667 304D                        36            .byte	$36
13668 304E                        6C            .byte	$6C
13669 304F                        D8            .byte	$D8
13670 3050                        6C            .byte	$6C
13671 3051                        36            .byte	$36
13672 3052                        00            .byte	0
13673 3053                        00            .byte	0
13674 3054                        00            .byte	0
13675 3055                        00            .byte	0
13676 3056                        00            .byte	0
13677 3057                        00            .byte	0
13678                                           ! 1581  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13679 3058                        00            .byte	0
13680 3059                        00            .byte	0
13681 305A                        00            .byte	0
13682 305B                        00            .byte	0
13683 305C                        00            .byte	0
13684 305D                        D8            .byte	$D8
13685 305E                        6C            .byte	$6C
13686 305F                        36            .byte	$36
13687 3060                        6C            .byte	$6C
13688 3061                        D8            .byte	$D8
13689 3062                        00            .byte	0
13690 3063                        00            .byte	0
13691 3064                        00            .byte	0
13692 3065                        00            .byte	0
13693 3066                        00            .byte	0
13694 3067                        00            .byte	0
13695                                           ! 1582  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13696 3068                        11            .byte	$11
13697 3069                        44            .byte	$44
13698 306A                        11            .byte	$11
13699 306B                        44            .byte	$44
13700 306C                        11            .byte	$11
13701 306D                        44            .byte	$44
13702 306E                        11            .byte	$11
13703 306F                        44            .byte	$44
13704 3070                        11            .byte	$11
13705 3071                        44            .byte	$44
13706 3072                        11            .byte	$11
13707 3073                        44            .byte	$44
13708 3074                        11            .byte	$11
13709 3075                        44            .byte	$44
13710 3076                        11            .byte	$11
13711 3077                        44            .byte	$44
13712                                           ! 1583  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13713 3078                        55            .byte	$55
13714 3079                        AA            .byte	$AA
13715 307A                        55            .byte	$55
13716 307B                        AA            .byte	$AA
13717 307C                        55            .byte	$55
13718 307D                        AA            .byte	$AA
13719 307E                        55            .byte	$55
13720 307F                        AA            .byte	$AA
13721 3080                        55            .byte	$55
13722 3081                        AA            .byte	$AA
13723 3082                        55            .byte	$55
13724 3083                        AA            .byte	$AA
13725 3084                        55            .byte	$55
13726 3085                        AA            .byte	$AA
13727 3086                        55            .byte	$55
13728 3087                        AA            .byte	$AA
13729                                           ! 1584  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13730 3088                        DD            .byte	$DD
13731 3089                        77            .byte	$77
13732 308A                        DD            .byte	$DD
13733 308B                        77            .byte	$77
13734 308C                        DD            .byte	$DD
13735 308D                        77            .byte	$77
13736 308E                        DD            .byte	$DD
13737 308F                        77            .byte	$77
13738 3090                        DD            .byte	$DD
13739 3091                        77            .byte	$77
13740 3092                        DD            .byte	$DD
13741 3093                        77            .byte	$77
13742 3094                        DD            .byte	$DD
13743 3095                        77            .byte	$77
13744 3096                        DD            .byte	$DD
13745 3097                        77            .byte	$77
13746                                           ! 1585  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13747 3098                        18            .byte	$18
13748 3099                        18            .byte	$18
13749 309A                        18            .byte	$18
13750 309B                        18            .byte	$18
13751 309C                        18            .byte	$18
13752 309D                        18            .byte	$18
13753 309E                        18            .byte	$18
13754 309F                        18            .byte	$18
13755 30A0                        18            .byte	$18
13756 30A1                        18            .byte	$18
13757 30A2                        18            .byte	$18
13758 30A3                        18            .byte	$18
13759 30A4                        18            .byte	$18
13760 30A5                        18            .byte	$18
13761 30A6                        18            .byte	$18
13762 30A7                        18            .byte	$18
13763                                           ! 1586  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x1
13764 30A8                        18            .byte	$18
13765 30A9                        18            .byte	$18
13766 30AA                        18            .byte	$18
13767 30AB                        18            .byte	$18
13768 30AC                        18            .byte	$18
13769 30AD                        18            .byte	$18
13770 30AE                        18            .byte	$18
13771 30AF                        F8            .byte	$F8
13772                                           ! 1586 8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13773 30B0                        18            .byte	$18
13774 30B1                        18            .byte	$18
13775 30B2                        18            .byte	$18
13776 30B3                        18            .byte	$18
13777 30B4                        18            .byte	$18
13778 30B5                        18            .byte	$18
13779 30B6                        18            .byte	$18
13780 30B7                        18            .byte	$18
13781                                           ! 1587  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13782 30B8                        18            .byte	$18
13783 30B9                        18            .byte	$18
13784 30BA                        18            .byte	$18
13785 30BB                        18            .byte	$18
13786 30BC                        18            .byte	$18
13787 30BD                        F8            .byte	$F8
13788 30BE                        18            .byte	$18
13789 30BF                        F8            .byte	$F8
13790 30C0                        18            .byte	$18
13791 30C1                        18            .byte	$18
13792 30C2                        18            .byte	$18
13793 30C3                        18            .byte	$18
13794 30C4                        18            .byte	$18
13795 30C5                        18            .byte	$18
13796 30C6                        18            .byte	$18
13797 30C7                        18            .byte	$18
13798                                           ! 1588  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13799 30C8                        36            .byte	$36
13800 30C9                        36            .byte	$36
13801 30CA                        36            .byte	$36
13802 30CB                        36            .byte	$36
13803 30CC                        36            .byte	$36
13804 30CD                        36            .byte	$36
13805 30CE                        36            .byte	$36
13806 30CF                        F6            .byte	$F6
13807 30D0                        36            .byte	$36
13808 30D1                        36            .byte	$36
13809 30D2                        36            .byte	$36
13810 30D3                        36            .byte	$36
13811 30D4                        36            .byte	$36
13812 30D5                        36            .byte	$36
13813 30D6                        36            .byte	$36
13814 30D7                        36            .byte	$36
13815                                           ! 1589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13816 30D8                        00            .byte	0
13817 30D9                        00            .byte	0
13818 30DA                        00            .byte	0
13819 30DB                        00            .byte	0
13820 30DC                        00            .byte	0
13821 30DD                        00            .byte	0
13822 30DE                        00            .byte	0
13823 30DF                        FE            .byte	$FE
13824 30E0                        36            .byte	$36
13825 30E1                        36            .byte	$36
13826 30E2                        36            .byte	$36
13827 30E3                        36            .byte	$36
13828 30E4                        36            .byte	$36
13829 30E5                        36            .byte	$36
13830 30E6                        36            .byte	$36
13831 30E7                        36            .byte	$36
13832                                           ! 1590  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13833 30E8                        00            .byte	0
13834 30E9                        00            .byte	0
13835 30EA                        00            .byte	0
13836 30EB                        00            .byte	0
13837 30EC                        00            .byte	0
13838 30ED                        F8            .byte	$F8
13839 30EE                        18            .byte	$18
13840 30EF                        F8            .byte	$F8
13841 30F0                        18            .byte	$18
13842 30F1                        18            .byte	$18
13843 30F2                        18            .byte	$18
13844 30F3                        18            .byte	$18
13845 30F4                        18            .byte	$18
13846 30F5                        18            .byte	$18
13847 30F6                        18            .byte	$18
13848 30F7                        18            .byte	$18
13849                                           ! 1591  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13850 30F8                        36            .byte	$36
13851 30F9                        36            .byte	$36
13852 30FA                        36            .byte	$36
13853 30FB                        36            .byte	$36
13854 30FC                        36            .byte	$36
13855 30FD                        F6            .byte	$F6
13856 30FE                        06            .byte	6
13857 30FF                        F6            .byte	$F6
13858 3100                        36            .byte	$36
13859 3101                        36            .byte	$36
13860 3102                        36            .byte	$36
13861 3103                        36            .byte	$36
13862 3104                        36            .byte	$36
13863 3105                        36            .byte	$36
13864 3106                        36            .byte	$36
13865 3107                        36            .byte	$36
13866                                           ! 1592  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13867 3108                        36            .byte	$36
13868 3109                        36            .byte	$36
13869 310A                        36            .byte	$36
13870 310B                        36            .byte	$36
13871 310C                        36            .byte	$36
13872 310D                        36            .byte	$36
13873 310E                        36            .byte	$36
13874 310F                        36            .byte	$36
13875 3110                        36            .byte	$36
13876 3111                        36            .byte	$36
13877 3112                        36            .byte	$36
13878 3113                        36            .byte	$36
13879 3114                        36            .byte	$36
13880 3115                        36            .byte	$36
13881 3116                        36            .byte	$36
13882 3117                        36            .byte	$36
13883                                           ! 1593  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13884 3118                        00            .byte	0
13885 3119                        00            .byte	0
13886 311A                        00            .byte	0
13887 311B                        00            .byte	0
13888 311C                        00            .byte	0
13889 311D                        FE            .byte	$FE
13890 311E                        06            .byte	6
13891 311F                        F6            .byte	$F6
13892 3120                        36            .byte	$36
13893 3121                        36            .byte	$36
13894 3122                        36            .byte	$36
13895 3123                        36            .byte	$36
13896 3124                        36            .byte	$36
13897 3125                        36            .byte	$36
13898 3126                        36            .byte	$36
13899 3127                        36            .byte	$36
13900                                           ! 1594  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13901 3128                        36            .byte	$36
13902 3129                        36            .byte	$36
13903 312A                        36            .byte	$36
13904 312B                        36            .byte	$36
13905 312C                        36            .byte	$36
13906 312D                        F6            .byte	$F6
13907 312E                        06            .byte	6
13908 312F                        FE            .byte	$FE
13909 3130                        00            .byte	0
13910 3131                        00            .byte	0
13911 3132                        00            .byte	0
13912 3133                        00            .byte	0
13913 3134                        00            .byte	0
13914 3135                        00            .byte	0
13915 3136                        00            .byte	0
13916 3137                        00            .byte	0
13917                                           ! 1595  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13918 3138                        36            .byte	$36
13919 3139                        36            .byte	$36
13920 313A                        36            .byte	$36
13921 313B                        36            .byte	$36
13922 313C                        36            .byte	$36
13923 313D                        36            .byte	$36
13924 313E                        36            .byte	$36
13925 313F                        FE            .byte	$FE
13926 3140                        00            .byte	0
13927 3141                        00            .byte	0
13928 3142                        00            .byte	0
13929 3143                        00            .byte	0
13930 3144                        00            .byte	0
13931 3145                        00            .byte	0
13932 3146                        00            .byte	0
13933 3147                        00            .byte	0
13934                                           ! 1596  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13935 3148                        18            .byte	$18
13936 3149                        18            .byte	$18
13937 314A                        18            .byte	$18
13938 314B                        18            .byte	$18
13939 314C                        18            .byte	$18
13940 314D                        F8            .byte	$F8
13941 314E                        18            .byte	$18
13942 314F                        F8            .byte	$F8
13943 3150                        00            .byte	0
13944 3151                        00            .byte	0
13945 3152                        00            .byte	0
13946 3153                        00            .byte	0
13947 3154                        00            .byte	0
13948 3155                        00            .byte	0
13949 3156                        00            .byte	0
13950 3157                        00            .byte	0
13951                                           ! 1597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13952 3158                        00            .byte	0
13953 3159                        00            .byte	0
13954 315A                        00            .byte	0
13955 315B                        00            .byte	0
13956 315C                        00            .byte	0
13957 315D                        00            .byte	0
13958 315E                        00            .byte	0
13959 315F                        F8            .byte	$F8
13960 3160                        18            .byte	$18
13961 3161                        18            .byte	$18
13962 3162                        18            .byte	$18
13963 3163                        18            .byte	$18
13964 3164                        18            .byte	$18
13965 3165                        18            .byte	$18
13966 3166                        18            .byte	$18
13967 3167                        18            .byte	$18
13968                                           ! 1598  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13969 3168                        18            .byte	$18
13970 3169                        18            .byte	$18
13971 316A                        18            .byte	$18
13972 316B                        18            .byte	$18
13973 316C                        18            .byte	$18
13974 316D                        18            .byte	$18
13975 316E                        18            .byte	$18
13976 316F                        1F            .byte	$1F
13977 3170                        00            .byte	0
13978 3171                        00            .byte	0
13979 3172                        00            .byte	0
13980 3173                        00            .byte	0
13981 3174                        00            .byte	0
13982 3175                        00            .byte	0
13983 3176                        00            .byte	0
13984 3177                        00            .byte	0
13985                                           ! 1599  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13986 3178                        18            .byte	$18
13987 3179                        18            .byte	$18
13988 317A                        18            .byte	$18
13989 317B                        18            .byte	$18
13990 317C                        18            .byte	$18
13991 317D                        18            .byte	$18
13992 317E                        18            .byte	$18
13993 317F                        FF            .byte	$FF
13994 3180                        00            .byte	0
13995 3181                        00            .byte	0
13996 3182                        00            .byte	0
13997 3183                        00            .byte	0
13998 3184                        00            .byte	0
13999 3185                        00            .byte	0
14000 3186                        00            .byte	0
14001 3187                        00            .byte	0
14002                                           ! 1600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14003 3188                        00            .byte	0
14004 3189                        00            .byte	0
14005 318A                        00            .byte	0
14006 318B                        00            .byte	0
14007 318C                        00            .byte	0
14008 318D                        00            .byte	0
14009 318E                        00            .byte	0
14010 318F                        FF            .byte	$FF
14011 3190                        18            .byte	$18
14012 3191                        18            .byte	$18
14013 3192                        18            .byte	$18
14014 3193                        18            .byte	$18
14015 3194                        18            .byte	$18
14016 3195                        18            .byte	$18
14017 3196                        18            .byte	$18
14018 3197                        18            .byte	$18
14019                                           ! 1601  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14020 3198                        18            .byte	$18
14021 3199                        18            .byte	$18
14022 319A                        18            .byte	$18
14023 319B                        18            .byte	$18
14024 319C                        18            .byte	$18
14025 319D                        18            .byte	$18
14026 319E                        18            .byte	$18
14027 319F                        1F            .byte	$1F
14028 31A0                        18            .byte	$18
14029 31A1                        18            .byte	$18
14030 31A2                        18            .byte	$18
14031 31A3                        18            .byte	$18
14032 31A4                        18            .byte	$18
14033 31A5                        18            .byte	$18
14034 31A6                        18            .byte	$18
14035 31A7                        18            .byte	$18
14036                                           ! 1602  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14037 31A8                        00            .byte	0
14038 31A9                        00            .byte	0
14039 31AA                        00            .byte	0
14040 31AB                        00            .byte	0
14041 31AC                        00            .byte	0
14042 31AD                        00            .byte	0
14043 31AE                        00            .byte	0
14044 31AF                        FF            .byte	$FF
14045 31B0                        00            .byte	0
14046 31B1                        00            .byte	0
14047 31B2                        00            .byte	0
14048 31B3                        00            .byte	0
14049 31B4                        00            .byte	0
14050 31B5                        00            .byte	0
14051 31B6                        00            .byte	0
14052 31B7                        00            .byte	0
14053                                           ! 1603  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14054 31B8                        18            .byte	$18
14055 31B9                        18            .byte	$18
14056 31BA                        18            .byte	$18
14057 31BB                        18            .byte	$18
14058 31BC                        18            .byte	$18
14059 31BD                        18            .byte	$18
14060 31BE                        18            .byte	$18
14061 31BF                        FF            .byte	$FF
14062 31C0                        18            .byte	$18
14063 31C1                        18            .byte	$18
14064 31C2                        18            .byte	$18
14065 31C3                        18            .byte	$18
14066 31C4                        18            .byte	$18
14067 31C5                        18            .byte	$18
14068 31C6                        18            .byte	$18
14069 31C7                        18            .byte	$18
14070                                           ! 1604  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14071 31C8                        18            .byte	$18
14072 31C9                        18            .byte	$18
14073 31CA                        18            .byte	$18
14074 31CB                        18            .byte	$18
14075 31CC                        18            .byte	$18
14076 31CD                        1F            .byte	$1F
14077 31CE                        18            .byte	$18
14078 31CF                        1F            .byte	$1F
14079 31D0                        18            .byte	$18
14080 31D1                        18            .byte	$18
14081 31D2                        18            .byte	$18
14082 31D3                        18            .byte	$18
14083 31D4                        18            .byte	$18
14084 31D5                        18            .byte	$18
14085 31D6                        18            .byte	$18
14086 31D7                        18            .byte	$18
14087                                           ! 1605  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14088 31D8                        36            .byte	$36
14089 31D9                        36            .byte	$36
14090 31DA                        36            .byte	$36
14091 31DB                        36            .byte	$36
14092 31DC                        36            .byte	$36
14093 31DD                        36            .byte	$36
14094 31DE                        36            .byte	$36
14095 31DF                        37            .byte	$37
14096 31E0                        36            .byte	$36
14097 31E1                        36            .byte	$36
14098 31E2                        36            .byte	$36
14099 31E3                        36            .byte	$36
14100 31E4                        36            .byte	$36
14101 31E5                        36            .byte	$36
14102 31E6                        36            .byte	$36
14103 31E7                        36            .byte	$36
14104                                           ! 1606  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14105 31E8                        36            .byte	$36
14106 31E9                        36            .byte	$36
14107 31EA                        36            .byte	$36
14108 31EB                        36            .byte	$36
14109 31EC                        36            .byte	$36
14110 31ED                        37            .byte	$37
14111 31EE                        30            .byte	$30
14112 31EF                        3F            .byte	$3F
14113 31F0                        00            .byte	0
14114 31F1                        00            .byte	0
14115 31F2                        00            .byte	0
14116 31F3                        00            .byte	0
14117 31F4                        00            .byte	0
14118 31F5                        00            .byte	0
14119 31F6                        00            .byte	0
14120 31F7                        00            .byte	0
14121                                           ! 1607  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x
14122 31F8                        00            .byte	0
14123 31F9                        00            .byte	0
14124 31FA                        00            .byte	0
14125 31FB                        00            .byte	0
14126 31FC                        00            .byte	0
14127 31FD                        3F            .byte	$3F
14128 31FE                        30            .byte	$30
14129 31FF                        37            .byte	$37
14130 3200                        36            .byte	$36
14131 3201                        36            .byte	$36
14132                                           ! 1607 36, 0x36, 0x36, 0x36, 0x36, 0x36,
14133 3202                        36            .byte	$36
14134 3203                        36            .byte	$36
14135 3204                        36            .byte	$36
14136 3205                        36            .byte	$36
14137 3206                        36            .byte	$36
14138 3207                        36            .byte	$36
14139                                           ! 1608  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14140 3208                        36            .byte	$36
14141 3209                        36            .byte	$36
14142 320A                        36            .byte	$36
14143 320B                        36            .byte	$36
14144 320C                        36            .byte	$36
14145 320D                        F7            .byte	$F7
14146 320E                        00            .byte	0
14147 320F                        FF            .byte	$FF
14148 3210                        00            .byte	0
14149 3211                        00            .byte	0
14150 3212                        00            .byte	0
14151 3213                        00            .byte	0
14152 3214                        00            .byte	0
14153 3215                        00            .byte	0
14154 3216                        00            .byte	0
14155 3217                        00            .byte	0
14156                                           ! 1609  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14157 3218                        00            .byte	0
14158 3219                        00            .byte	0
14159 321A                        00            .byte	0
14160 321B                        00            .byte	0
14161 321C                        00            .byte	0
14162 321D                        FF            .byte	$FF
14163 321E                        00            .byte	0
14164 321F                        F7            .byte	$F7
14165 3220                        36            .byte	$36
14166 3221                        36            .byte	$36
14167 3222                        36            .byte	$36
14168 3223                        36            .byte	$36
14169 3224                        36            .byte	$36
14170 3225                        36            .byte	$36
14171 3226                        36            .byte	$36
14172 3227                        36            .byte	$36
14173                                           ! 1610  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14174 3228                        36            .byte	$36
14175 3229                        36            .byte	$36
14176 322A                        36            .byte	$36
14177 322B                        36            .byte	$36
14178 322C                        36            .byte	$36
14179 322D                        37            .byte	$37
14180 322E                        30            .byte	$30
14181 322F                        37            .byte	$37
14182 3230                        36            .byte	$36
14183 3231                        36            .byte	$36
14184 3232                        36            .byte	$36
14185 3233                        36            .byte	$36
14186 3234                        36            .byte	$36
14187 3235                        36            .byte	$36
14188 3236                        36            .byte	$36
14189 3237                        36            .byte	$36
14190                                           ! 1611  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14191 3238                        00            .byte	0
14192 3239                        00            .byte	0
14193 323A                        00            .byte	0
14194 323B                        00            .byte	0
14195 323C                        00            .byte	0
14196 323D                        FF            .byte	$FF
14197 323E                        00            .byte	0
14198 323F                        FF            .byte	$FF
14199 3240                        00            .byte	0
14200 3241                        00            .byte	0
14201 3242                        00            .byte	0
14202 3243                        00            .byte	0
14203 3244                        00            .byte	0
14204 3245                        00            .byte	0
14205 3246                        00            .byte	0
14206 3247                        00            .byte	0
14207                                           ! 1612  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14208 3248                        36            .byte	$36
14209 3249                        36            .byte	$36
14210 324A                        36            .byte	$36
14211 324B                        36            .byte	$36
14212 324C                        36            .byte	$36
14213 324D                        F7            .byte	$F7
14214 324E                        00            .byte	0
14215 324F                        F7            .byte	$F7
14216 3250                        36            .byte	$36
14217 3251                        36            .byte	$36
14218 3252                        36            .byte	$36
14219 3253                        36            .byte	$36
14220 3254                        36            .byte	$36
14221 3255                        36            .byte	$36
14222 3256                        36            .byte	$36
14223 3257                        36            .byte	$36
14224                                           ! 1613  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14225 3258                        18            .byte	$18
14226 3259                        18            .byte	$18
14227 325A                        18            .byte	$18
14228 325B                        18            .byte	$18
14229 325C                        18            .byte	$18
14230 325D                        FF            .byte	$FF
14231 325E                        00            .byte	0
14232 325F                        FF            .byte	$FF
14233 3260                        00            .byte	0
14234 3261                        00            .byte	0
14235 3262                        00            .byte	0
14236 3263                        00            .byte	0
14237 3264                        00            .byte	0
14238 3265                        00            .byte	0
14239 3266                        00            .byte	0
14240 3267                        00            .byte	0
14241                                           ! 1614  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14242 3268                        36            .byte	$36
14243 3269                        36            .byte	$36
14244 326A                        36            .byte	$36
14245 326B                        36            .byte	$36
14246 326C                        36            .byte	$36
14247 326D                        36            .byte	$36
14248 326E                        36            .byte	$36
14249 326F                        FF            .byte	$FF
14250 3270                        00            .byte	0
14251 3271                        00            .byte	0
14252 3272                        00            .byte	0
14253 3273                        00            .byte	0
14254 3274                        00            .byte	0
14255 3275                        00            .byte	0
14256 3276                        00            .byte	0
14257 3277                        00            .byte	0
14258                                           ! 1615  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14259 3278                        00            .byte	0
14260 3279                        00            .byte	0
14261 327A                        00            .byte	0
14262 327B                        00            .byte	0
14263 327C                        00            .byte	0
14264 327D                        FF            .byte	$FF
14265 327E                        00            .byte	0
14266 327F                        FF            .byte	$FF
14267 3280                        18            .byte	$18
14268 3281                        18            .byte	$18
14269 3282                        18            .byte	$18
14270 3283                        18            .byte	$18
14271 3284                        18            .byte	$18
14272 3285                        18            .byte	$18
14273 3286                        18            .byte	$18
14274 3287                        18            .byte	$18
14275                                           ! 1616  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14276 3288                        00            .byte	0
14277 3289                        00            .byte	0
14278 328A                        00            .byte	0
14279 328B                        00            .byte	0
14280 328C                        00            .byte	0
14281 328D                        00            .byte	0
14282 328E                        00            .byte	0
14283 328F                        FF            .byte	$FF
14284 3290                        36            .byte	$36
14285 3291                        36            .byte	$36
14286 3292                        36            .byte	$36
14287 3293                        36            .byte	$36
14288 3294                        36            .byte	$36
14289 3295                        36            .byte	$36
14290 3296                        36            .byte	$36
14291 3297                        36            .byte	$36
14292                                           ! 1617  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14293 3298                        36            .byte	$36
14294 3299                        36            .byte	$36
14295 329A                        36            .byte	$36
14296 329B                        36            .byte	$36
14297 329C                        36            .byte	$36
14298 329D                        36            .byte	$36
14299 329E                        36            .byte	$36
14300 329F                        3F            .byte	$3F
14301 32A0                        00            .byte	0
14302 32A1                        00            .byte	0
14303 32A2                        00            .byte	0
14304 32A3                        00            .byte	0
14305 32A4                        00            .byte	0
14306 32A5                        00            .byte	0
14307 32A6                        00            .byte	0
14308 32A7                        00            .byte	0
14309                                           ! 1618  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14310 32A8                        18            .byte	$18
14311 32A9                        18            .byte	$18
14312 32AA                        18            .byte	$18
14313 32AB                        18            .byte	$18
14314 32AC                        18            .byte	$18
14315 32AD                        1F            .byte	$1F
14316 32AE                        18            .byte	$18
14317 32AF                        1F            .byte	$1F
14318 32B0                        00            .byte	0
14319 32B1                        00            .byte	0
14320 32B2                        00            .byte	0
14321 32B3                        00            .byte	0
14322 32B4                        00            .byte	0
14323 32B5                        00            .byte	0
14324 32B6                        00            .byte	0
14325 32B7                        00            .byte	0
14326                                           ! 1619  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14327 32B8                        00            .byte	0
14328 32B9                        00            .byte	0
14329 32BA                        00            .byte	0
14330 32BB                        00            .byte	0
14331 32BC                        00            .byte	0
14332 32BD                        1F            .byte	$1F
14333 32BE                        18            .byte	$18
14334 32BF                        1F            .byte	$1F
14335 32C0                        18            .byte	$18
14336 32C1                        18            .byte	$18
14337 32C2                        18            .byte	$18
14338 32C3                        18            .byte	$18
14339 32C4                        18            .byte	$18
14340 32C5                        18            .byte	$18
14341 32C6                        18            .byte	$18
14342 32C7                        18            .byte	$18
14343                                           ! 1620  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14344 32C8                        00            .byte	0
14345 32C9                        00            .byte	0
14346 32CA                        00            .byte	0
14347 32CB                        00            .byte	0
14348 32CC                        00            .byte	0
14349 32CD                        00            .byte	0
14350 32CE                        00            .byte	0
14351 32CF                        3F            .byte	$3F
14352 32D0                        36            .byte	$36
14353 32D1                        36            .byte	$36
14354 32D2                        36            .byte	$36
14355 32D3                        36            .byte	$36
14356 32D4                        36            .byte	$36
14357 32D5                        36            .byte	$36
14358 32D6                        36            .byte	$36
14359 32D7                        36            .byte	$36
14360                                           ! 1621  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14361 32D8                        36            .byte	$36
14362 32D9                        36            .byte	$36
14363 32DA                        36            .byte	$36
14364 32DB                        36            .byte	$36
14365 32DC                        36            .byte	$36
14366 32DD                        36            .byte	$36
14367 32DE                        36            .byte	$36
14368 32DF                        FF            .byte	$FF
14369 32E0                        36            .byte	$36
14370 32E1                        36            .byte	$36
14371 32E2                        36            .byte	$36
14372 32E3                        36            .byte	$36
14373 32E4                        36            .byte	$36
14374 32E5                        36            .byte	$36
14375 32E6                        36            .byte	$36
14376 32E7                        36            .byte	$36
14377                                           ! 1622  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14378 32E8                        18            .byte	$18
14379 32E9                        18            .byte	$18
14380 32EA                        18            .byte	$18
14381 32EB                        18            .byte	$18
14382 32EC                        18            .byte	$18
14383 32ED                        FF            .byte	$FF
14384 32EE                        18            .byte	$18
14385 32EF                        FF            .byte	$FF
14386 32F0                        18            .byte	$18
14387 32F1                        18            .byte	$18
14388 32F2                        18            .byte	$18
14389 32F3                        18            .byte	$18
14390 32F4                        18            .byte	$18
14391 32F5                        18            .byte	$18
14392 32F6                        18            .byte	$18
14393 32F7                        18            .byte	$18
14394                                           ! 1623  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14395 32F8                        18            .byte	$18
14396 32F9                        18            .byte	$18
14397 32FA                        18            .byte	$18
14398 32FB                        18            .byte	$18
14399 32FC                        18            .byte	$18
14400 32FD                        18            .byte	$18
14401 32FE                        18            .byte	$18
14402 32FF                        F8            .byte	$F8
14403 3300                        00            .byte	0
14404 3301                        00            .byte	0
14405 3302                        00            .byte	0
14406 3303                        00            .byte	0
14407 3304                        00            .byte	0
14408 3305                        00            .byte	0
14409 3306                        00            .byte	0
14410 3307                        00            .byte	0
14411                                           ! 1624  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14412 3308                        00            .byte	0
14413 3309                        00            .byte	0
14414 330A                        00            .byte	0
14415 330B                        00            .byte	0
14416 330C                        00            .byte	0
14417 330D                        00            .byte	0
14418 330E                        00            .byte	0
14419 330F                        1F            .byte	$1F
14420 3310                        18            .byte	$18
14421 3311                        18            .byte	$18
14422 3312                        18            .byte	$18
14423 3313                        18            .byte	$18
14424 3314                        18            .byte	$18
14425 3315                        18            .byte	$18
14426 3316                        18            .byte	$18
14427 3317                        18            .byte	$18
14428                                           ! 1625  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14429 3318                        FF            .byte	$FF
14430 3319                        FF            .byte	$FF
14431 331A                        FF            .byte	$FF
14432 331B                        FF            .byte	$FF
14433 331C                        FF            .byte	$FF
14434 331D                        FF            .byte	$FF
14435 331E                        FF            .byte	$FF
14436 331F                        FF            .byte	$FF
14437 3320                        FF            .byte	$FF
14438 3321                        FF            .byte	$FF
14439 3322                        FF            .byte	$FF
14440 3323                        FF            .byte	$FF
14441 3324                        FF            .byte	$FF
14442 3325                        FF            .byte	$FF
14443 3326                        FF            .byte	$FF
14444 3327                        FF            .byte	$FF
14445                                           ! 1626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14446 3328                        00            .byte	0
14447 3329                        00            .byte	0
14448 332A                        00            .byte	0
14449 332B                        00            .byte	0
14450 332C                        00            .byte	0
14451 332D                        00            .byte	0
14452 332E                        00            .byte	0
14453 332F                        FF            .byte	$FF
14454 3330                        FF            .byte	$FF
14455 3331                        FF            .byte	$FF
14456 3332                        FF            .byte	$FF
14457 3333                        FF            .byte	$FF
14458 3334                        FF            .byte	$FF
14459 3335                        FF            .byte	$FF
14460 3336                        FF            .byte	$FF
14461 3337                        FF            .byte	$FF
14462                                           ! 1627  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14463 3338                        F0            .byte	$F0
14464 3339                        F0            .byte	$F0
14465 333A                        F0            .byte	$F0
14466 333B                        F0            .byte	$F0
14467 333C                        F0            .byte	$F0
14468 333D                        F0            .byte	$F0
14469 333E                        F0            .byte	$F0
14470 333F                        F0            .byte	$F0
14471 3340                        F0            .byte	$F0
14472 3341                        F0            .byte	$F0
14473 3342                        F0            .byte	$F0
14474 3343                        F0            .byte	$F0
14475 3344                        F0            .byte	$F0
14476 3345                        F0            .byte	$F0
14477 3346                        F0            .byte	$F0
14478 3347                        F0            .byte	$F0
14479                                           ! 1628  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0
14480 3348                        0F            .byte	$F
14481 3349                        0F            .byte	$F
14482 334A                        0F            .byte	$F
14483 334B                        0F            .byte	$F
14484 334C                        0F            .byte	$F
14485 334D                        0F            .byte	$F
14486 334E                        0F            .byte	$F
14487 334F                        0F            .byte	$F
14488 3350                        0F            .byte	$F
14489 3351                        0F            .byte	$F
14490 3352                        0F            .byte	$F
14491 3353                        0F            .byte	$F
14492                                           ! 1628 x0f, 0x0f, 0x0f, 0x0f,
14493 3354                        0F            .byte	$F
14494 3355                        0F            .byte	$F
14495 3356                        0F            .byte	$F
14496 3357                        0F            .byte	$F
14497                                           ! 1629  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14498 3358                        FF            .byte	$FF
14499 3359                        FF            .byte	$FF
14500 335A                        FF            .byte	$FF
14501 335B                        FF            .byte	$FF
14502 335C                        FF            .byte	$FF
14503 335D                        FF            .byte	$FF
14504 335E                        FF            .byte	$FF
14505 335F                        00            .byte	0
14506 3360                        00            .byte	0
14507 3361                        00            .byte	0
14508 3362                        00            .byte	0
14509 3363                        00            .byte	0
14510 3364                        00            .byte	0
14511 3365                        00            .byte	0
14512 3366                        00            .byte	0
14513 3367                        00            .byte	0
14514                                           ! 1630  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14515 3368                        00            .byte	0
14516 3369                        00            .byte	0
14517 336A                        00            .byte	0
14518 336B                        00            .byte	0
14519 336C                        00            .byte	0
14520 336D                        76            .byte	$76
14521 336E                        DC            .byte	$DC
14522 336F                        D8            .byte	$D8
14523 3370                        D8            .byte	$D8
14524 3371                        D8            .byte	$D8
14525 3372                        DC            .byte	$DC
14526 3373                        76            .byte	$76
14527 3374                        00            .byte	0
14528 3375                        00            .byte	0
14529 3376                        00            .byte	0
14530 3377                        00            .byte	0
14531                                           ! 1631  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14532 3378                        00            .byte	0
14533 3379                        00            .byte	0
14534 337A                        78            .byte	$78
14535 337B                        CC            .byte	$CC
14536 337C                        CC            .byte	$CC
14537 337D                        CC            .byte	$CC
14538 337E                        D8            .byte	$D8
14539 337F                        CC            .byte	$CC
14540 3380                        C6            .byte	$C6
14541 3381                        C6            .byte	$C6
14542 3382                        C6            .byte	$C6
14543 3383                        CC            .byte	$CC
14544 3384                        00            .byte	0
14545 3385                        00            .byte	0
14546 3386                        00            .byte	0
14547 3387                        00            .byte	0
14548                                           ! 1632  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14549 3388                        00            .byte	0
14550 3389                        00            .byte	0
14551 338A                        FE            .byte	$FE
14552 338B                        C6            .byte	$C6
14553 338C                        C6            .byte	$C6
14554 338D                        C0            .byte	$C0
14555 338E                        C0            .byte	$C0
14556 338F                        C0            .byte	$C0
14557 3390                        C0            .byte	$C0
14558 3391                        C0            .byte	$C0
14559 3392                        C0            .byte	$C0
14560 3393                        C0            .byte	$C0
14561 3394                        00            .byte	0
14562 3395                        00            .byte	0
14563 3396                        00            .byte	0
14564 3397                        00            .byte	0
14565                                           ! 1633  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14566 3398                        00            .byte	0
14567 3399                        00            .byte	0
14568 339A                        00            .byte	0
14569 339B                        00            .byte	0
14570 339C                        FE            .byte	$FE
14571 339D                        6C            .byte	$6C
14572 339E                        6C            .byte	$6C
14573 339F                        6C            .byte	$6C
14574 33A0                        6C            .byte	$6C
14575 33A1                        6C            .byte	$6C
14576 33A2                        6C            .byte	$6C
14577 33A3                        6C            .byte	$6C
14578 33A4                        00            .byte	0
14579 33A5                        00            .byte	0
14580 33A6                        00            .byte	0
14581 33A7                        00            .byte	0
14582                                           ! 1634  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14583 33A8                        00            .byte	0
14584 33A9                        00            .byte	0
14585 33AA                        00            .byte	0
14586 33AB                        FE            .byte	$FE
14587 33AC                        C6            .byte	$C6
14588 33AD                        60            .byte	$60
14589 33AE                        30            .byte	$30
14590 33AF                        18            .byte	$18
14591 33B0                        30            .byte	$30
14592 33B1                        60            .byte	$60
14593 33B2                        C6            .byte	$C6
14594 33B3                        FE            .byte	$FE
14595 33B4                        00            .byte	0
14596 33B5                        00            .byte	0
14597 33B6                        00            .byte	0
14598 33B7                        00            .byte	0
14599                                           ! 1635  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14600 33B8                        00            .byte	0
14601 33B9                        00            .byte	0
14602 33BA                        00            .byte	0
14603 33BB                        00            .byte	0
14604 33BC                        00            .byte	0
14605 33BD                        7E            .byte	$7E
14606 33BE                        D8            .byte	$D8
14607 33BF                        D8            .byte	$D8
14608 33C0                        D8            .byte	$D8
14609 33C1                        D8            .byte	$D8
14610 33C2                        D8            .byte	$D8
14611 33C3                        70            .byte	$70
14612 33C4                        00            .byte	0
14613 33C5                        00            .byte	0
14614 33C6                        00            .byte	0
14615 33C7                        00            .byte	0
14616                                           ! 1636  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14617 33C8                        00            .byte	0
14618 33C9                        00            .byte	0
14619 33CA                        00            .byte	0
14620 33CB                        00            .byte	0
14621 33CC                        66            .byte	$66
14622 33CD                        66            .byte	$66
14623 33CE                        66            .byte	$66
14624 33CF                        66            .byte	$66
14625 33D0                        66            .byte	$66
14626 33D1                        7C            .byte	$7C
14627 33D2                        60            .byte	$60
14628 33D3                        60            .byte	$60
14629 33D4                        C0            .byte	$C0
14630 33D5                        00            .byte	0
14631 33D6                        00            .byte	0
14632 33D7                        00            .byte	0
14633                                           ! 1637  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14634 33D8                        00            .byte	0
14635 33D9                        00            .byte	0
14636 33DA                        00            .byte	0
14637 33DB                        00            .byte	0
14638 33DC                        76            .byte	$76
14639 33DD                        DC            .byte	$DC
14640 33DE                        18            .byte	$18
14641 33DF                        18            .byte	$18
14642 33E0                        18            .byte	$18
14643 33E1                        18            .byte	$18
14644 33E2                        18            .byte	$18
14645 33E3                        18            .byte	$18
14646 33E4                        00            .byte	0
14647 33E5                        00            .byte	0
14648 33E6                        00            .byte	0
14649 33E7                        00            .byte	0
14650                                           ! 1638  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14651 33E8                        00            .byte	0
14652 33E9                        00            .byte	0
14653 33EA                        00            .byte	0
14654 33EB                        7E            .byte	$7E
14655 33EC                        18            .byte	$18
14656 33ED                        3C            .byte	$3C
14657 33EE                        66            .byte	$66
14658 33EF                        66            .byte	$66
14659 33F0                        66            .byte	$66
14660 33F1                        3C            .byte	$3C
14661 33F2                        18            .byte	$18
14662 33F3                        7E            .byte	$7E
14663 33F4                        00            .byte	0
14664 33F5                        00            .byte	0
14665 33F6                        00            .byte	0
14666 33F7                        00            .byte	0
14667                                           ! 1639  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14668 33F8                        00            .byte	0
14669 33F9                        00            .byte	0
14670 33FA                        00            .byte	0
14671 33FB                        38            .byte	$38
14672 33FC                        6C            .byte	$6C
14673 33FD                        C6            .byte	$C6
14674 33FE                        C6            .byte	$C6
14675 33FF                        FE            .byte	$FE
14676 3400                        C6            .byte	$C6
14677 3401                        C6            .byte	$C6
14678 3402                        6C            .byte	$6C
14679 3403                        38            .byte	$38
14680 3404                        00            .byte	0
14681 3405                        00            .byte	0
14682 3406                        00            .byte	0
14683 3407                        00            .byte	0
14684                                           ! 1640  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14685 3408                        00            .byte	0
14686 3409                        00            .byte	0
14687 340A                        38            .byte	$38
14688 340B                        6C            .byte	$6C
14689 340C                        C6            .byte	$C6
14690 340D                        C6            .byte	$C6
14691 340E                        C6            .byte	$C6
14692 340F                        6C            .byte	$6C
14693 3410                        6C            .byte	$6C
14694 3411                        6C            .byte	$6C
14695 3412                        6C            .byte	$6C
14696 3413                        EE            .byte	$EE
14697 3414                        00            .byte	0
14698 3415                        00            .byte	0
14699 3416                        00            .byte	0
14700 3417                        00            .byte	0
14701                                           ! 1641  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14702 3418                        00            .byte	0
14703 3419                        00            .byte	0
14704 341A                        1E            .byte	$1E
14705 341B                        30            .byte	$30
14706 341C                        18            .byte	$18
14707 341D                        0C            .byte	$C
14708 341E                        3E            .byte	$3E
14709 341F                        66            .byte	$66
14710 3420                        66            .byte	$66
14711 3421                        66            .byte	$66
14712 3422                        66            .byte	$66
14713 3423                        3C            .byte	$3C
14714 3424                        00            .byte	0
14715 3425                        00            .byte	0
14716 3426                        00            .byte	0
14717 3427                        00            .byte	0
14718                                           ! 1642  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14719 3428                        00            .byte	0
14720 3429                        00            .byte	0
14721 342A                        00            .byte	0
14722 342B                        00            .byte	0
14723 342C                        00            .byte	0
14724 342D                        7E            .byte	$7E
14725 342E                        DB            .byte	$DB
14726 342F                        DB            .byte	$DB
14727 3430                        DB            .byte	$DB
14728 3431                        7E            .byte	$7E
14729 3432                        00            .byte	0
14730 3433                        00            .byte	0
14731 3434                        00            .byte	0
14732 3435                        00            .byte	0
14733 3436                        00            .byte	0
14734 3437                        00            .byte	0
14735                                           ! 1643  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14736 3438                        00            .byte	0
14737 3439                        00            .byte	0
14738 343A                        00            .byte	0
14739 343B                        03            .byte	3
14740 343C                        06            .byte	6
14741 343D                        7E            .byte	$7E
14742 343E                        DB            .byte	$DB
14743 343F                        DB            .byte	$DB
14744 3440                        F3            .byte	$F3
14745 3441                        7E            .byte	$7E
14746 3442                        60            .byte	$60
14747 3443                        C0            .byte	$C0
14748 3444                        00            .byte	0
14749 3445                        00            .byte	0
14750 3446                        00            .byte	0
14751 3447                        00            .byte	0
14752                                           ! 1644  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14753 3448                        00            .byte	0
14754 3449                        00            .byte	0
14755 344A                        1C            .byte	$1C
14756 344B                        30            .byte	$30
14757 344C                        60            .byte	$60
14758 344D                        60            .byte	$60
14759 344E                        7C            .byte	$7C
14760 344F                        60            .byte	$60
14761 3450                        60            .byte	$60
14762 3451                        60            .byte	$60
14763 3452                        30            .byte	$30
14764 3453                        1C            .byte	$1C
14765 3454                        00            .byte	0
14766 3455                        00            .byte	0
14767 3456                        00            .byte	0
14768 3457                        00            .byte	0
14769                                           ! 1645  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14770 3458                        00            .byte	0
14771 3459                        00            .byte	0
14772 345A                        00            .byte	0
14773 345B                        7C            .byte	$7C
14774 345C                        C6            .byte	$C6
14775 345D                        C6            .byte	$C6
14776 345E                        C6            .byte	$C6
14777 345F                        C6            .byte	$C6
14778 3460                        C6            .byte	$C6
14779 3461                        C6            .byte	$C6
14780 3462                        C6            .byte	$C6
14781 3463                        C6            .byte	$C6
14782 3464                        00            .byte	0
14783 3465                        00            .byte	0
14784 3466                        00            .byte	0
14785 3467                        00            .byte	0
14786                                           ! 1646  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14787 3468                        00            .byte	0
14788 3469                        00            .byte	0
14789 346A                        00            .byte	0
14790 346B                        00            .byte	0
14791 346C                        FE            .byte	$FE
14792 346D                        00            .byte	0
14793 346E                        00            .byte	0
14794 346F                        FE            .byte	$FE
14795 3470                        00            .byte	0
14796 3471                        00            .byte	0
14797 3472                        FE            .byte	$FE
14798 3473                        00            .byte	0
14799 3474                        00            .byte	0
14800 3475                        00            .byte	0
14801 3476                        00            .byte	0
14802 3477                        00            .byte	0
14803                                           ! 1647  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14804 3478                        00            .byte	0
14805 3479                        00            .byte	0
14806 347A                        00            .byte	0
14807 347B                        00            .byte	0
14808 347C                        18            .byte	$18
14809 347D                        18            .byte	$18
14810 347E                        7E            .byte	$7E
14811 347F                        18            .byte	$18
14812 3480                        18            .byte	$18
14813 3481                        00            .byte	0
14814 3482                        00            .byte	0
14815 3483                        FF            .byte	$FF
14816 3484                        00            .byte	0
14817 3485                        00            .byte	0
14818 3486                        00            .byte	0
14819 3487                        00            .byte	0
14820                                           ! 1648  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14821 3488                        00            .byte	0
14822 3489                        00            .byte	0
14823 348A                        00            .byte	0
14824 348B                        30            .byte	$30
14825 348C                        18            .byte	$18
14826 348D                        0C            .byte	$C
14827 348E                        06            .byte	6
14828 348F                        0C            .byte	$C
14829 3490                        18            .byte	$18
14830 3491                        30            .byte	$30
14831 3492                        00            .byte	0
14832 3493                        7E            .byte	$7E
14833 3494                        00            .byte	0
14834 3495                        00            .byte	0
14835 3496                        00            .byte	0
14836 3497                        00            .byte	0
14837                                           ! 1649  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 
14838 3498                        00            .byte	0
14839 3499                        00            .byte	0
14840 349A                        00            .byte	0
14841 349B                        0C            .byte	$C
14842 349C                        18            .byte	$18
14843 349D                        30            .byte	$30
14844 349E                        60            .byte	$60
14845 349F                        30            .byte	$30
14846 34A0                        18            .byte	$18
14847 34A1                        0C            .byte	$C
14848 34A2                        00            .byte	0
14849 34A3                        7E            .byte	$7E
14850 34A4                        00            .byte	0
14851 34A5                        00            .byte	0
14852                                           ! 1649 0x00, 0x00,
14853 34A6                        00            .byte	0
14854 34A7                        00            .byte	0
14855                                           ! 1650  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14856 34A8                        00            .byte	0
14857 34A9                        00            .byte	0
14858 34AA                        0E            .byte	$E
14859 34AB                        1B            .byte	$1B
14860 34AC                        1B            .byte	$1B
14861 34AD                        18            .byte	$18
14862 34AE                        18            .byte	$18
14863 34AF                        18            .byte	$18
14864 34B0                        18            .byte	$18
14865 34B1                        18            .byte	$18
14866 34B2                        18            .byte	$18
14867 34B3                        18            .byte	$18
14868 34B4                        18            .byte	$18
14869 34B5                        18            .byte	$18
14870 34B6                        18            .byte	$18
14871 34B7                        18            .byte	$18
14872                                           ! 1651  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14873 34B8                        18            .byte	$18
14874 34B9                        18            .byte	$18
14875 34BA                        18            .byte	$18
14876 34BB                        18            .byte	$18
14877 34BC                        18            .byte	$18
14878 34BD                        18            .byte	$18
14879 34BE                        18            .byte	$18
14880 34BF                        18            .byte	$18
14881 34C0                        D8            .byte	$D8
14882 34C1                        D8            .byte	$D8
14883 34C2                        D8            .byte	$D8
14884 34C3                        70            .byte	$70
14885 34C4                        00            .byte	0
14886 34C5                        00            .byte	0
14887 34C6                        00            .byte	0
14888 34C7                        00            .byte	0
14889                                           ! 1652  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14890 34C8                        00            .byte	0
14891 34C9                        00            .byte	0
14892 34CA                        00            .byte	0
14893 34CB                        00            .byte	0
14894 34CC                        18            .byte	$18
14895 34CD                        18            .byte	$18
14896 34CE                        00            .byte	0
14897 34CF                        7E            .byte	$7E
14898 34D0                        00            .byte	0
14899 34D1                        18            .byte	$18
14900 34D2                        18            .byte	$18
14901 34D3                        00            .byte	0
14902 34D4                        00            .byte	0
14903 34D5                        00            .byte	0
14904 34D6                        00            .byte	0
14905 34D7                        00            .byte	0
14906                                           ! 1653  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14907 34D8                        00            .byte	0
14908 34D9                        00            .byte	0
14909 34DA                        00            .byte	0
14910 34DB                        00            .byte	0
14911 34DC                        00            .byte	0
14912 34DD                        76            .byte	$76
14913 34DE                        DC            .byte	$DC
14914 34DF                        00            .byte	0
14915 34E0                        76            .byte	$76
14916 34E1                        DC            .byte	$DC
14917 34E2                        00            .byte	0
14918 34E3                        00            .byte	0
14919 34E4                        00            .byte	0
14920 34E5                        00            .byte	0
14921 34E6                        00            .byte	0
14922 34E7                        00            .byte	0
14923                                           ! 1654  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14924 34E8                        00            .byte	0
14925 34E9                        38            .byte	$38
14926 34EA                        6C            .byte	$6C
14927 34EB                        6C            .byte	$6C
14928 34EC                        38            .byte	$38
14929 34ED                        00            .byte	0
14930 34EE                        00            .byte	0
14931 34EF                        00            .byte	0
14932 34F0                        00            .byte	0
14933 34F1                        00            .byte	0
14934 34F2                        00            .byte	0
14935 34F3                        00            .byte	0
14936 34F4                        00            .byte	0
14937 34F5                        00            .byte	0
14938 34F6                        00            .byte	0
14939 34F7                        00            .byte	0
14940                                           ! 1655  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14941 34F8                        00            .byte	0
14942 34F9                        00            .byte	0
14943 34FA                        00            .byte	0
14944 34FB                        00            .byte	0
14945 34FC                        00            .byte	0
14946 34FD                        00            .byte	0
14947 34FE                        00            .byte	0
14948 34FF                        18            .byte	$18
14949 3500                        18            .byte	$18
14950 3501                        00            .byte	0
14951 3502                        00            .byte	0
14952 3503                        00            .byte	0
14953 3504                        00            .byte	0
14954 3505                        00            .byte	0
14955 3506                        00            .byte	0
14956 3507                        00            .byte	0
14957                                           ! 1656  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14958 3508                        00            .byte	0
14959 3509                        00            .byte	0
14960 350A                        00            .byte	0
14961 350B                        00            .byte	0
14962 350C                        00            .byte	0
14963 350D                        00            .byte	0
14964 350E                        00            .byte	0
14965 350F                        00            .byte	0
14966 3510                        18            .byte	$18
14967 3511                        00            .byte	0
14968 3512                        00            .byte	0
14969 3513                        00            .byte	0
14970 3514                        00            .byte	0
14971 3515                        00            .byte	0
14972 3516                        00            .byte	0
14973 3517                        00            .byte	0
14974                                           ! 1657  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14975 3518                        00            .byte	0
14976 3519                        0F            .byte	$F
14977 351A                        0C            .byte	$C
14978 351B                        0C            .byte	$C
14979 351C                        0C            .byte	$C
14980 351D                        0C            .byte	$C
14981 351E                        0C            .byte	$C
14982 351F                        EC            .byte	$EC
14983 3520                        6C            .byte	$6C
14984 3521                        6C            .byte	$6C
14985 3522                        3C            .byte	$3C
14986 3523                        1C            .byte	$1C
14987 3524                        00            .byte	0
14988 3525                        00            .byte	0
14989 3526                        00            .byte	0
14990 3527                        00            .byte	0
14991                                           ! 1658  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14992 3528                        00            .byte	0
14993 3529                        D8            .byte	$D8
14994 352A                        6C            .byte	$6C
14995 352B                        6C            .byte	$6C
14996 352C                        6C            .byte	$6C
14997 352D                        6C            .byte	$6C
14998 352E                        6C            .byte	$6C
14999 352F                        00            .byte	0
15000 3530                        00            .byte	0
15001 3531                        00            .byte	0
15002 3532                        00            .byte	0
15003 3533                        00            .byte	0
15004 3534                        00            .byte	0
15005 3535                        00            .byte	0
15006 3536                        00            .byte	0
15007 3537                        00            .byte	0
15008                                           ! 1659  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15009 3538                        00            .byte	0
15010 3539                        70            .byte	$70
15011 353A                        D8            .byte	$D8
15012 353B                        30            .byte	$30
15013 353C                        60            .byte	$60
15014 353D                        C8            .byte	$C8
15015 353E                        F8            .byte	$F8
15016 353F                        00            .byte	0
15017 3540                        00            .byte	0
15018 3541                        00            .byte	0
15019 3542                        00            .byte	0
15020 3543                        00            .byte	0
15021 3544                        00            .byte	0
15022 3545                        00            .byte	0
15023 3546                        00            .byte	0
15024 3547                        00            .byte	0
15025                                           ! 1660  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15026 3548                        00            .byte	0
15027 3549                        00            .byte	0
15028 354A                        00            .byte	0
15029 354B                        00            .byte	0
15030 354C                        7C            .byte	$7C
15031 354D                        7C            .byte	$7C
15032 354E                        7C            .byte	$7C
15033 354F                        7C            .byte	$7C
15034 3550                        7C            .byte	$7C
15035 3551                        7C            .byte	$7C
15036 3552                        7C            .byte	$7C
15037 3553                        00            .byte	0
15038 3554                        00            .byte	0
15039 3555                        00            .byte	0
15040 3556                        00            .byte	0
15041 3557                        00            .byte	0
15042                                           ! 1661  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15043 3558                        00            .byte	0
15044 3559                        00            .byte	0
15045 355A                        00            .byte	0
15046 355B                        00            .byte	0
15047 355C                        00            .byte	0
15048 355D                        00            .byte	0
15049 355E                        00            .byte	0
15050 355F                        00            .byte	0
15051 3560                        00            .byte	0
15052 3561                        00            .byte	0
15053 3562                        00            .byte	0
15054 3563                        00            .byte	0
15055 3564                        00            .byte	0
15056 3565                        00            .byte	0
15057 3566                        00            .byte	0
15058                                           ! 1662 };
15059 3567                        00            .byte	0
15060                                           !BCC_EOS
15061                                           ! 1663 static Bit8u vgafont14alt[1]={0x00};
15062                       00003568            _vgafont14alt:
15063 3568                        00            .byte	0
15064                                           !BCC_EOS
15065                                           ! 1664 static Bit8u vgafont16alt[1]={0x00};
15066                       00003569            _vgafont16alt:
15067 3569                        00            .byte	0
15068                                           !BCC_EOS
15069                                           ! 1665 #asm
15070                                           !BCC_ASM
15071                       0000356A            init_vga_card:
15072                                           ;; switch to color mode and enable CPU access 480 lines
15073 356A           BA                   03C2    mov dx, #0x3C2
15074 356D           B0                     C3    mov al, #0xC3
15075 356F           EE                           outb dx,al
15076                                           ;; more than 64k 3C4/04
15077 3570           BA                   03C4    mov dx, #0x3C4
15078 3573           B0                     04    mov al, #0x04
15079 3575           EE                           outb dx,al
15080 3576           BA                   03C5    mov dx, #0x3C5
15081 3579           B0                     02    mov al, #0x02
15082 357B           EE                           outb dx,al
15083 357C           BB                   3586    mov bx, #msg_vga_init
15084 357F           53                           push bx
15085 3580           E8         4894              call _printf
15086 3583           44                           inc sp
15087 3584           44                           inc sp
15088 3585           C3                           ret
15089                       00003586            msg_vga_init:
15090 3586                        56            .ascii "VGABios $Id: vgabios.c,v 1.69 2009/04/07 18:18:20 vruppert Exp $"
15091 35C6                        0D            .byte 0x0d,0x0a,0x00
15092                                           ! 1687 endasm
15093                                           !BCC_ENDASM
15094                                           ! 1688 #asm
15095                                           !BCC_ASM
15096                       000035C9            init_bios_area:
15097 35C9           1E                           push ds
15098 35CA           B8                   0040    mov ax, # 0x40
15099 35CD           8ED8                         mov ds, ax
15100                                           ;; init detected hardware BIOS Area
15101 35CF           BB                   0010    mov bx, # 0x10
15102 35D2           8B07                         mov ax, [bx]
15103 35D4           25                   FFCF    and ax, #0xffcf
15104                                           ;; set 80x25 color (not clear from RBIL but usual)
15105 35D7           0D                   0020    or ax, #0x0020
15106 35DA           8907                         mov [bx], ax
15107                                           ;; Just for the first int10 find its children
15108                                           ;; the default char height
15109 35DC           BB                   0085    mov bx, # 0x85
15110 35DF           B0                     10    mov al, #0x10
15111 35E1           8807                         mov [bx], al
15112                                           ;; Clear the screen
15113 35E3           BB                   0087    mov bx, # 0x87
15114 35E6           B0                     60    mov al, #0x60
15115 35E8           8807                         mov [bx], al
15116                                           ;; Set the basic screen we have
15117 35EA           BB                   0088    mov bx, # 0x88
15118 35ED           B0                     F9    mov al, #0xf9
15119 35EF           8807                         mov [bx], al
15120                                           ;; Set the basic modeset options
15121 35F1           BB                   0089    mov bx, # 0x89
15122 35F4           B0                     51    mov al, #0x51
15123 35F6           8807                         mov [bx], al
15124                                           ;; Set the default MSR
15125 35F8           BB                   0065    mov bx, # 0x65
15126 35FB           B0                     09    mov al, #0x09
15127 35FD           8807                         mov [bx], al
15128 35FF           1F                           pop ds
15129 3600           C3                           ret
15130                       00003601            _video_save_pointer_table:
15131 3601                      0298              .word _video_param_table
15132 3603                      C000              .word 0xc000
15133 3605                      0000              .word 0
15134 3607                      0000              .word 0
15135 3609                      0000              .word 0
15136 360B                      0000              .word 0
15137 360D                      0000              .word 0
15138 360F                      0000              .word 0
15139 3611                      0000              .word 0
15140 3613                      0000              .word 0
15141 3615                      0000              .word 0
15142 3617                      0000              .word 0
15143 3619                      0000              .word 0
15144 361B                      0000              .word 0
15145                                           ! 1738 endasm
15146                                           !BCC_ENDASM
15147                                           ! 1739 static void display_splash_screen()
15148                                           ! 1740 {
15149                                           
15150                       0000361D            _display_splash_screen:
15151                                           ! 1741 }
15152 361D           C3                         ret
15153                                           ! 1742 static void display_info()
15154                                           ! 1743 {
15155                       0000361E            _display_info:
15156                                           ! 1744 #asm
15157                                           !BCC_ASM
15158 361E           B8                   C000   mov ax,#0xc000
15159 3621           8ED8                        mov ds,ax
15160 3623           BE                   0022   mov si,#vgabios_name
15161 3626           E8         0013             call _display_string
15162 3629           BE                   0038   mov si,#vgabios_version
15163 362C           E8         000D             call _display_string
15164                                            ;;mov si,#vgabios_copyright
15165                                            ;;call _display_string
15166                                            ;;mov si,#crlf
15167                                            ;;call _display_string
15168 362F           BE                   0077   mov si,#vgabios_license
15169 3632           E8         0007             call _display_string
15170 3635           BE                   00AC   mov si,#vgabios_website
15171 3638           E8         0001             call _display_string
15172                                           ! 1759 endasm
15173                                           !BCC_ENDASM
15174                                           ! 1760 }
15175 363B           C3                         ret
15176                                           ! 1761 static void display_string()
15177                                           ! 1762 {
15178                       0000363C            _display_string:
15179                                           ! 1763 #asm
15180                                           !BCC_ASM
15181 363C           8CD8                        mov ax,ds
15182 363E           8EC0                        mov es,ax
15183 3640           89F7                        mov di,si
15184 3642           31C9                        xor cx,cx
15185 3644           F7D1                        not cx
15186 3646           30C0                        xor al,al
15187 3648           FC                          cld
15188 3649           F2                          repne
15189 364A           AE                           scasb
15190 364B           F7D1                        not cx
15191 364D           49                          dec cx
15192 364E           51                          push cx
15193 364F           B8                   0300   mov ax,#0x0300
15194 3652           BB                   0000   mov bx,#0x0000
15195 3655           CD                     10   int #0x10
15196 3657           59                          pop cx
15197 3658           B8                   1301   mov ax,#0x1301
15198 365B           BB                   000B   mov bx,#0x000b
15199 365E           89F5                        mov bp,si
15200 3660           CD                     10   int #0x10
15201                                           ! 1784 endasm
15202                                           !BCC_ENDASM
15203                                           ! 1785 }
15204 3662           C3                         ret
15205                                           ! 1786 static void int10_debugmsg(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15206                                           ! 1787   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15207                       00003663            _int10_debugmsg:
15208                                           !BCC_EOS
15209                                           ! 1788 {
15210                                           ! 1789  if(( AX >> 8 )!=0x0E)
15211 3663           55                         push	bp
15212 3664           89E5                       mov	bp,sp
15213                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15214 3666           8B46         12            mov	ax,$12[bp]
15215 3669           88E0                       mov	al,ah
15216 366B           30E4                       xor	ah,ah
15217                                           ! Debug: ne int = const $E to unsigned int = ax+0 (used reg = )
15218 366D           3D                   000E  cmp	ax,*$E
15219 3670           74           20            je  	.1
15220                       00003672            .2:
15221                                           ! 1790   printf("vgabios call ah%02x al%02x bx%04x cx%04x dx%04x\n",( AX >> 8 ),( AX & 0x00ff ),BX,CX,DX);
15222                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15223 3672           FF76         0E            push	$E[bp]
15224                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15225 3675           FF76         10            push	$10[bp]
15226                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15227 3678           FF76         0C            push	$C[bp]
15228                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15229 367B           8A46         12            mov	al,$12[bp]
15230                                           ! Debug: list unsigned char = al+0 (used reg = )
15231 367E           30E4                       xor	ah,ah
15232 3680           50                         push	ax
15233                                           ! Debug: sr int = const 8 to unsigned short AX = [S+$A+$10] (used reg = )
15234 3681           8B46         12            mov	ax,$12[bp]
15235 3684           88E0                       mov	al,ah
15236 3686           30E4                       xor	ah,ah
15237                                           ! Debug: list unsigned int = ax+0 (used reg = )
15238 3688           50                         push	ax
15239                                           ! Debug: list * char = .3+0 (used reg = )
15240 3689           BB                   A1BA  mov	bx,#.3
15241 368C           53                         push	bx
15242                                           ! Debug: func () void = printf+0 (used reg = )
15243 368D           E8         4787            call	_printf
15244 3690           89EC                       mov	sp,bp
15245                                           !BCC_EOS
15246                                           ! 1791 }
15247                       00003692            .1:
15248 3692           5D                         pop	bp
15249 3693           C3                         ret
15250                                           ! 1792 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15251                                           ! Register BX used in function int10_debugmsg
15252                                           ! 1793   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15253                       00003694            _int10_func:
15254                                           !BCC_EOS
15255                                           ! 1794 {
15256                                           ! 1795  switch(( AX >> 8 ))
15257 3694           55                         push	bp
15258 3695           89E5                       mov	bp,sp
15259                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15260 3697           8B46         12            mov	ax,$12[bp]
15261 369A           88E0                       mov	al,ah
15262 369C           30E4                       xor	ah,ah
15263                                           ! 1796   {
15264 369E           E9         04F5            br 	.6
15265                                           ! 1797    case 0x00:
15266                                           ! 1798      biosfn_set_video_mode(( AX & 0x00ff ));
15267                       000036A1            .7:
15268                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15269 36A1           8A46         12            mov	al,$12[bp]
15270                                           ! Debug: list unsigned char = al+0 (used reg = )
15271 36A4           30E4                       xor	ah,ah
15272 36A6           50                         push	ax
15273                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15274 36A7           E8         0544            call	_biosfn_set_video_mode
15275 36AA           44                         inc	sp
15276 36AB           44                         inc	sp
15277                                           !BCC_EOS
15278                                           ! 1799      switch(( AX & 0x00ff )&0x7F)
15279                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15280 36AC           8A46         12            mov	al,$12[bp]
15281                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15282 36AF           24                     7F  and	al,*$7F
15283                                           ! 1800       {case 6:
15284 36B1           EB           24            jmp .A
15285                                           ! 1801         AX = ((AX & 0xff00) | (0x3F));
15286                       000036B3            .B:
15287                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15288 36B3           8B46         12            mov	ax,$12[bp]
15289 36B6           30C0                       xor	al,al
15290                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15291 36B8           0C                     3F  or	al,*$3F
15292                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15293 36BA           8946         12            mov	$12[bp],ax
15294                                           !BCC_EOS
15295                                           ! 1802         break;
15296 36BD           EB           3D            jmp .8
15297                                           !BCC_EOS
15298                                           ! 1803        case 0:
15299                                           ! 1804        case 1:
15300                       000036BF            .C:
15301                                           ! 1805        case 2:
15302                       000036BF            .D:
15303                                           ! 1806        case 3:
15304                       000036BF            .E:
15305                                           ! 1807        case 4:
15306                       000036BF            .F:
15307                                           ! 1808        case 5:
15308                       000036BF            .10:
15309                                           ! 1809        case 7:
15310                       000036BF            .11:
15311                                           ! 1810         AX = ((AX & 0xff00) | (0x30));
15312                       000036BF            .12:
15313                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15314 36BF           8B46         12            mov	ax,$12[bp]
15315 36C2           30C0                       xor	al,al
15316                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15317 36C4           0C                     30  or	al,*$30
15318                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15319 36C6           8946         12            mov	$12[bp],ax
15320                                           !BCC_EOS
15321                                           ! 1811         break;
15322 36C9           EB           31            jmp .8
15323                                           !BCC_EOS
15324                                           ! 1812       default:
15325                                           ! 1813         AX = ((AX & 0xff00) | (0x20));
15326                       000036CB            .13:
15327                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15328 36CB           8B46         12            mov	ax,$12[bp]
15329 36CE           30C0                       xor	al,al
15330                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15331 36D0           0C                     20  or	al,*$20
15332                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15333 36D2           8946         12            mov	$12[bp],ax
15334                                           !BCC_EOS
15335                                           ! 1814       }
15336                                           ! 1815      break;
15337 36D5           EB           25            jmp .8
15338                       000036D7            .A:
15339 36D7           2C                     00  sub	al,*0
15340 36D9           72           F0            jb 	.13
15341 36DB           3C                     07  cmp	al,*7
15342 36DD           77           1B            ja  	.14
15343 36DF           30E4                       xor	ah,ah
15344 36E1           D1E0                       shl	ax,*1
15345 36E3           89C3                       mov	bx,ax
15346 36E5           2E                         seg	cs
15347 36E6           FFA7       36EA            br	.15[bx]
15348                       000036EA            .15:
15349 36EA                      36BF            .word	.C
15350 36EC                      36BF            .word	.D
15351 36EE                      36BF            .word	.E
15352 36F0                      36BF            .word	.F
15353 36F2                      36BF            .word	.10
15354 36F4                      36BF            .word	.11
15355 36F6                      36B3            .word	.B
15356 36F8                      36BF            .word	.12
15357                       000036FA            .14:
15358 36FA           EB           CF            jmp	.13
15359                       000036FC            .8:
15360 36FC           E9         04ED            br 	.4
15361                                           !BCC_EOS
15362                                           ! 1816    case 0x01:
15363                                           ! 1817      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15364                       000036FF            .16:
15365                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15366 36FF           8A46         10            mov	al,$10[bp]
15367                                           ! Debug: list unsigned char = al+0 (used reg = )
15368 3702           30E4                       xor	ah,ah
15369 3704           50                         push	ax
15370                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15371 3705           8B46         10            mov	ax,$10[bp]
15372 3708           88E0                       mov	al,ah
15373 370A           30E4                       xor	ah,ah
15374                                           ! Debug: list unsigned int = ax+0 (used reg = )
15375 370C           50                         push	ax
15376                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15377 370D           E8         0B8B            call	_biosfn_set_cursor_shape
15378 3710           83C4                   04  add	sp,*4
15379                                           !BCC_EOS
15380                                           ! 1818      break;
15381 3713           E9         04D6            br 	.4
15382                                           !BCC_EOS
15383                                           ! 1819    case 0x02:
15384                                           ! 1820  
15385                                           ! 1820     biosfn_set_cursor_pos(( BX >> 8 ),DX);
15386                       00003716            .17:
15387                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15388 3716           FF76         0E            push	$E[bp]
15389                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15390 3719           8B46         0C            mov	ax,$C[bp]
15391 371C           88E0                       mov	al,ah
15392 371E           30E4                       xor	ah,ah
15393                                           ! Debug: list unsigned int = ax+0 (used reg = )
15394 3720           50                         push	ax
15395                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15396 3721           E8         0C92            call	_biosfn_set_cursor_pos
15397 3724           83C4                   04  add	sp,*4
15398                                           !BCC_EOS
15399                                           ! 1821      break;
15400 3727           E9         04C2            br 	.4
15401                                           !BCC_EOS
15402                                           ! 1822    case 0x03:
15403                                           ! 1823      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15404                       0000372A            .18:
15405                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15406 372A           8D5E         0E            lea	bx,$E[bp]
15407 372D           53                         push	bx
15408                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15409 372E           8D5E         10            lea	bx,$10[bp]
15410 3731           53                         push	bx
15411                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15412 3732           8B46         0C            mov	ax,$C[bp]
15413 3735           88E0                       mov	al,ah
15414 3737           30E4                       xor	ah,ah
15415                                           ! Debug: list unsigned int = ax+0 (used reg = )
15416 3739           50                         push	ax
15417                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15418 373A           E8         0D79            call	_biosfn_get_cursor_pos
15419 373D           83C4                   06  add	sp,*6
15420                                           !BCC_EOS
15421                                           ! 1824      break;
15422 3740           E9         04A9            br 	.4
15423                                           !BCC_EOS
15424                                           ! 1825    case 0x04:
15425                                           ! 1826      unimplemented();
15426                       00003743            .19:
15427                                           ! Debug: func () void = unimplemented+0 (used reg = )
15428 3743           E8         46B5            call	_unimplemented
15429                                           !BCC_EOS
15430                                           ! 1827      AX=0x00;
15431                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15432 3746           31C0                       xor	ax,ax
15433 3748           8946         12            mov	$12[bp],ax
15434                                           !BCC_EOS
15435                                           ! 1828      BX=0x00;
15436                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15437 374B           31C0                       xor	ax,ax
15438 374D           8946         0C            mov	$C[bp],ax
15439                                           !BCC_EOS
15440                                           ! 1829      CX=0x00;
15441                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15442 3750           31C0                       xor	ax,ax
15443 3752           8946         10            mov	$10[bp],ax
15444                                           !BCC_EOS
15445                                           ! 1830      DX=0x00;
15446                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15447 3755           31C0                       xor	ax,ax
15448 3757           8946         0E            mov	$E[bp],ax
15449                                           !BCC_EOS
15450                                           ! 1831      break;
15451 375A           E9         048F            br 	.4
15452                                           !BCC_EOS
15453                                           ! 1832    case 0x05:
15454                                           ! 1833      biosfn_set_active_page(( AX & 0x00ff ));
15455                       0000375D            .1A:
15456                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15457 375D           8A46         12            mov	al,$12[bp]
15458                                           ! Debug: list unsigned char = al+0 (used reg = )
15459 3760           30E4                       xor	ah,ah
15460 3762           50                         push	ax
15461                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15462 3763           E8         0DC5            call	_biosfn_set_active_page
15463 3766           44                         inc	sp
15464 3767           44                         inc	sp
15465                                           !BCC_EOS
15466                                           ! 1834      break;
15467 3768           E9         0481            br 	.4
15468                                           !BCC_EOS
15469                                           ! 1835    case 0x06:
15470                                           ! 1836      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15471                       0000376B            .1B:
15472                                           ! Debug: list int = const 1 (used reg = )
15473 376B           B8                   0001  mov	ax,*1
15474 376E           50                         push	ax
15475                                           ! Debug: list int = const $FF (used reg = )
15476 376F           B8                   00FF  mov	ax,#$FF
15477 3772           50                         push	ax
15478                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15479 3773           8A46         0E            mov	al,$E[bp]
15480                                           ! Debug: list unsigned char = al+0 (used reg = )
15481 3776           30E4                       xor	ah,ah
15482 3778           50                         push	ax
15483                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15484 3779           8B46         0E            mov	ax,$E[bp]
15485 377C           88E0                       mov	al,ah
15486 377E           30E4                       xor	ah,ah
15487                                           ! Debug: list unsigned int = ax+0 (used reg = )
15488 3780           50                         push	ax
15489                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15490 3781           8A46         10            mov	al,$10[bp]
15491                                           ! Debug: list unsigned char = al+0 (used reg = )
15492 3784           30E4                       xor	ah,ah
15493 3786           50                         push	ax
15494                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15495 3787           8B46         10            mov	ax,$10[bp]
15496 378A           88E0                       mov	al,ah
15497 378C           30E4                       xor	ah,ah
15498                                           ! Debug: list unsigned int = ax+0 (used reg = )
15499 378E           50                         push	ax
15500                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15501 378F           8B46         0C            mov	ax,$C[bp]
15502 3792           88E0                       mov	al,ah
15503 3794           30E4                       xor	ah,ah
15504                                           ! Debug: list unsigned int = ax+0 (used reg = )
15505 3796           50                         push	ax
15506                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15507 3797           8A46         12            mov	al,$12[bp]
15508                                           ! Debug: list unsigned char = al+0 (used reg = )
15509 379A           30E4                       xor	ah,ah
15510 379C           50                         push	ax
15511                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15512 379D           E8         1221            call	_biosfn_scroll
15513 37A0           83C4                   10  add	sp,*$10
15514                                           !BCC_EOS
15515                                           ! 1837      break;
15516 37A3           E9         0446            br 	.4
15517                                           !BCC_EOS
15518                                           ! 1838    case 0x07:
15519                                           ! 1839      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15520                       000037A6            .1C:
15521                                           ! Debug: list int = const 0 (used reg = )
15522 37A6           31C0                       xor	ax,ax
15523 37A8           50                         push	ax
15524                                           ! Debug: list int = const $FF (used reg = )
15525 37A9           B8                   00FF  mov	ax,#$FF
15526 37AC           50                         push	ax
15527                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15528 37AD           8A46         0E            mov	al,$E[bp]
15529                                           ! Debug: list unsigned char = al+0 (used reg = )
15530 37B0           30E4                       xor	ah,ah
15531 37B2           50                         push	ax
15532                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15533 37B3           8B46         0E            mov	ax,$E[bp]
15534 37B6           88E0                       mov	al,ah
15535 37B8           30E4                       xor	ah,ah
15536                                           ! Debug: list unsigned int = ax+0 (used reg = )
15537 37BA           50                         push	ax
15538                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15539 37BB           8A46         10            mov	al,$10[bp]
15540                                           ! Debug: list unsigned char = al+0 (used reg = )
15541 37BE           30E4                       xor	ah,ah
15542 37C0           50                         push	ax
15543                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15544 37C1           8B46         10            mov	ax,$10[bp]
15545 37C4           88E0                       mov	al,ah
15546 37C6           30E4                       xor	ah,ah
15547                                           ! Debug: list unsigned int = ax+0 (used reg = )
15548 37C8           50                         push	ax
15549                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15550 37C9           8B46         0C            mov	ax,$C[bp]
15551 37CC           88E0                       mov	al,ah
15552 37CE           30E4                       xor	ah,ah
15553                                           ! Debug: list unsigned int = ax+0 (used reg = )
15554 37D0           50                         push	ax
15555                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15556 37D1           8A46         12            mov	al,$12[bp]
15557                                           ! Debug: list unsigned char = al+0 (used reg = )
15558 37D4           30E4                       xor	ah,ah
15559 37D6           50                         push	ax
15560                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15561 37D7           E8         11E7            call	_biosfn_scroll
15562 37DA           83C4                   10  add	sp,*$10
15563                                           !BCC_EOS
15564                                           ! 1840      break;
15565 37DD           E9         040C            br 	.4
15566                                           !BCC_EOS
15567                                           ! 1841    case 0x08:
15568                                           ! 1842      biosfn_read_char_attr(( BX >> 8 ),&AX);
15569                       000037E0            .1D:
15570                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15571 37E0           8D5E         12            lea	bx,$12[bp]
15572 37E3           53                         push	bx
15573                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15574 37E4           8B46         0C            mov	ax,$C[bp]
15575 37E7           88E0                       mov	al,ah
15576 37E9           30E4                       xor	ah,ah
15577                                           ! Debug: list unsigned int = ax+0 (used reg = )
15578 37EB           50                         push	ax
15579                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15580 37EC           E8         1900            call	_biosfn_read_char_attr
15581 37EF           83C4                   04  add	sp,*4
15582                                           !BCC_EOS
15583                                           ! 1843      break;
15584 37F2           E9         03F7            br 	.4
15585                                           !BCC_EOS
15586                                           ! 1844    case 0x09:
15587                                           ! 1845      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15588                       000037F5            .1E:
15589                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15590 37F5           FF76         10            push	$10[bp]
15591                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15592 37F8           8A46         0C            mov	al,$C[bp]
15593                                           ! Debug: list unsigned char = al+0 (used reg = )
15594 37FB           30E4                       xor	ah,ah
15595 37FD           50                         push	ax
15596                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15597 37FE           8B46         0C            mov	ax,$C[bp]
15598 3801           88E0                       mov	al,ah
15599 3803           30E4                       xor	ah,ah
15600                                           ! Debug: list unsigned int = ax+0 (used reg = )
15601 3805           50                         push	ax
15602                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15603 3806           8A46         12            mov	al,$12[bp]
15604                                           ! Debug: list unsigned char = al+0 (used reg = )
15605 3809           30E4                       xor	ah,ah
15606 380B           50                         push	ax
15607                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15608 380C           E8         1E28            call	_biosfn_write_char_attr
15609 380F           83C4                   08  add	sp,*8
15610                                           !BCC_EOS
15611                                           ! 1846      break;
15612 3812           E9         03D7            br 	.4
15613                                           !BCC_EOS
15614                                           ! 1847    case 0x0A:
15615                                           ! 1848      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15616                       00003815            .1F:
15617                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15618 3815           FF76         10            push	$10[bp]
15619                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15620 3818           8A46         0C            mov	al,$C[bp]
15621                                           ! Debug: list unsigned char = al+0 (used reg = )
15622 381B           30E4                       xor	ah,ah
15623 381D           50                         push	ax
15624                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15625 381E           8B46         0C            mov	ax,$C[bp]
15626 3821           88E0                       mov	al,ah
15627 3823           30E4                       xor	ah,ah
15628                                           ! Debug: list unsigned int = ax+0 (used reg = )
15629 3825           50                         push	ax
15630                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15631 3826           8A46         12            mov	al,$12[bp]
15632                                           ! Debug: list unsigned char = al+0 (used reg = )
15633 3829           30E4                       xor	ah,ah
15634 382B           50                         push	ax
15635                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15636 382C           E8         1FFF            call	_biosfn_write_char_only
15637 382F           83C4                   08  add	sp,*8
15638                                           !BCC_EOS
15639                                           ! 1849      break;
15640 3832           E9         03B7            br 	.4
15641                                           !BCC_EOS
15642                                           ! 1850    case 0x0C:
15643                                           ! 1851      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15644                       00003835            .20:
15645                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15646 3835           FF76         0E            push	$E[bp]
15647                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15648 3838           FF76         10            push	$10[bp]
15649                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15650 383B           8A46         12            mov	al,$12[bp]
15651                                           ! Debug: list unsigned char = al+0 (used reg = )
15652 383E           30E4                       xor	ah,ah
15653 3840           50                         push	ax
15654                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15655 3841           8B46         0C            mov	ax,$C[bp]
15656 3844           88E0                       mov	al,ah
15657 3846           30E4                       xor	ah,ah
15658                                           ! Debug: list unsigned int = ax+0 (used reg = )
15659 3848           50                         push	ax
15660                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15661 3849           E8         2258            call	_biosfn_write_pixel
15662 384C           83C4                   08  add	sp,*8
15663                                           !BCC_EOS
15664                                           ! 1852      break;
15665 384F           E9         039A            br 	.4
15666                                           !BCC_EOS
15667                                           ! 1853    case 0x0D:
15668                                           ! 1854      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15669                       00003852            .21:
15670                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15671 3852           8D5E         12            lea	bx,$12[bp]
15672 3855           53                         push	bx
15673                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15674 3856           FF76         0E            push	$E[bp]
15675                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15676 3859           FF76         10            push	$10[bp]
15677                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15678 385C           8B46         0C            mov	ax,$C[bp]
15679 385F           88E0                       mov	al,ah
15680 3861           30E4                       xor	ah,ah
15681                                           ! Debug: list unsigned int = ax+0 (used reg = )
15682 3863           50                         push	ax
15683                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15684 3864           E8         24DE            call	_biosfn_read_pixel
15685 3867           83C4                   08  add	sp,*8
15686                                           !BCC_EOS
15687                                           ! 1855      break;
15688 386A           E9         037F            br 	.4
15689                                           !BCC_EOS
15690                                           ! 1856    case 0x0E:
15691                                           ! 1857      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15692                       0000386D            .22:
15693                                           ! Debug: list int = const 2 (used reg = )
15694 386D           B8                   0002  mov	ax,*2
15695 3870           50                         push	ax
15696                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15697 3871           8A46         0C            mov	al,$C[bp]
15698                                           ! Debug: list unsigned char = al+0 (used reg = )
15699 3874           30E4                       xor	ah,ah
15700 3876           50                         push	ax
15701                                           ! Debug: list int = const $FF (used reg = )
15702 3877           B8                   00FF  mov	ax,#$FF
15703 387A           50                         push	ax
15704                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15705 387B           8A46         12            mov	al,$12[bp]
15706                                           ! Debug: list unsigned char = al+0 (used reg = )
15707 387E           30E4                       xor	ah,ah
15708 3880           50                         push	ax
15709                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15710 3881           E8         26CA            call	_biosfn_write_teletype
15711 3884           83C4                   08  add	sp,*8
15712                                           !BCC_EOS
15713                                           ! 1858      break;
15714 3887           E9         0362            br 	.4
15715                                           !BCC_EOS
15716                                           ! 1859    case 0x10:
15717                                           ! 1860      biosfn_perform_gray_scale_summing(BX,CX);
15718                       0000388A            .23:
15719                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15720 388A           FF76         10            push	$10[bp]
15721                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15722 388D           FF76         0C            push	$C[bp]
15723                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15724 3890           E8         2D13            call	_biosfn_perform_gray_scale_summing
15725 3893           83C4                   04  add	sp,*4
15726                                           !BCC_EOS
15727                                           ! 1861      break;
15728 3896           E9         0353            br 	.4
15729                                           !BCC_EOS
15730                                           ! 1862    case 0x11:
15731                                           ! 1863      switch(( AX & 0x00ff ))
15732                       00003899            .24:
15733                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15734 3899           8A46         12            mov	al,$12[bp]
15735                                           ! 1864       {
15736 389C           E9         00E4            br 	.27
15737                                           ! 1865        case 0x00:
15738                                           ! 1866        case 0x10:
15739                       0000389F            .28:
15740                                           ! 1867         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15741                       0000389F            .29:
15742                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15743 389F           8B46         0C            mov	ax,$C[bp]
15744 38A2           88E0                       mov	al,ah
15745 38A4           30E4                       xor	ah,ah
15746                                           ! Debug: list unsigned int = ax+0 (used reg = )
15747 38A6           50                         push	ax
15748                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15749 38A7           8A46         0C            mov	al,$C[bp]
15750                                           ! Debug: list unsigned char = al+0 (used reg = )
15751 38AA           30E4                       xor	ah,ah
15752 38AC           50                         push	ax
15753                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15754 38AD           FF76         0E            push	$E[bp]
15755                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15756 38B0           FF76         10            push	$10[bp]
15757                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15758 38B3           FF76         08            push	8[bp]
15759                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15760 38B6           FF76         16            push	$16[bp]
15761                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15762 38B9           8A46         12            mov	al,$12[bp]
15763                                           ! Debug: list unsigned char = al+0 (used reg = )
15764 38BC           30E4                       xor	ah,ah
15765 38BE           50                         push	ax
15766                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15767 38BF           E8         2F8B            call	_biosfn_load_text_user_pat
15768 38C2           83C4                   0E  add	sp,*$E
15769                                           !BCC_EOS
15770                                           ! 1868         break;
15771 38C5           E9         0111            br 	.25
15772                                           !BCC_EOS
15773                                           ! 1869        case 0x01:
15774                                           ! 1870        case 0x11:
15775                       000038C8            .2A:
15776                                           ! 1871         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15777                       000038C8            .2B:
15778                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15779 38C8           8A46         0C            mov	al,$C[bp]
15780                                           ! Debug: list unsigned char = al+0 (used reg = )
15781 38CB           30E4                       xor	ah,ah
15782 38CD           50                         push	ax
15783                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15784 38CE           8A46         12            mov	al,$12[bp]
15785                                           ! Debug: list unsigned char = al+0 (used reg = )
15786 38D1           30E4                       xor	ah,ah
15787 38D3           50                         push	ax
15788                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15789 38D4           E8         3012            call	_biosfn_load_text_8_14_pat
15790 38D7           83C4                   04  add	sp,*4
15791                                           !BCC_EOS
15792                                           ! 1872         break;
15793 38DA           E9         00FC            br 	.25
15794                                           !BCC_EOS
15795                                           ! 1873        case 0x02:
15796                                           ! 1874        case 0x12:
15797                       000038DD            .2C:
15798                                           ! 1875         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15799                       000038DD            .2D:
15800                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15801 38DD           8A46         0C            mov	al,$C[bp]
15802                                           ! Debug: list unsigned char = al+0 (used reg = )
15803 38E0           30E4                       xor	ah,ah
15804 38E2           50                         push	ax
15805                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15806 38E3           8A46         12            mov	al,$12[bp]
15807                                           ! Debug: list unsigned char = al+0 (used reg = )
15808 38E6           30E4                       xor	ah,ah
15809 38E8           50                         push	ax
15810                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15811 38E9           E8         3094            call	_biosfn_load_text_8_8_pat
15812 38EC           83C4                   04  add	sp,*4
15813                                           !BCC_EOS
15814                                           ! 1876         break;
15815 38EF           E9         00E7            br 	.25
15816                                           !BCC_EOS
15817                                           ! 1877        case 0x04:
15818                                           ! 1878        case 0x14:
15819                       000038F2            .2E:
15820                                           ! 1879         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15821                       000038F2            .2F:
15822                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15823 38F2           8A46         0C            mov	al,$C[bp]
15824                                           ! Debug: list unsigned char = al+0 (used reg = )
15825 38F5           30E4                       xor	ah,ah
15826 38F7           50                         push	ax
15827                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15828 38F8           8A46         12            mov	al,$12[bp]
15829                                           ! Debug: list unsigned char = al+0 (used reg = )
15830 38FB           30E4                       xor	ah,ah
15831 38FD           50                         push	ax
15832                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15833 38FE           E8         311D            call	_biosfn_load_text_8_16_pat
15834 3901           83C4                   04  add	sp,*4
15835                                           !BCC_EOS
15836                                           ! 1880         break;
15837 3904           E9         00D2            br 	.25
15838                                           !BCC_EOS
15839                                           ! 1881        case 0x20:
15840                                           ! 1882         biosfn_load_gfx_8_8_chars(ES,BP);
15841                       00003907            .30:
15842                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15843 3907           FF76         08            push	8[bp]
15844                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15845 390A           FF76         16            push	$16[bp]
15846                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15847 390D           E8         319F            call	_biosfn_load_gfx_8_8_chars
15848 3910           83C4                   04  add	sp,*4
15849                                           !BCC_EOS
15850                                           ! 1883         break;
15851 3913           E9         00C3            br 	.25
15852                                           !BCC_EOS
15853                                           ! 1884        case 0x21:
15854                                           ! 1885         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15855                       00003916            .31:
15856                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15857 3916           8A46         0E            mov	al,$E[bp]
15858                                           ! Debug: list unsigned char = al+0 (used reg = )
15859 3919           30E4                       xor	ah,ah
15860 391B           50                         push	ax
15861                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15862 391C           8A46         0C            mov	al,$C[bp]
15863                                           ! Debug: list unsigned char = al+0 (used reg = )
15864 391F           30E4                       xor	ah,ah
15865 3921           50                         push	ax
15866                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15867 3922           FF76         10            push	$10[bp]
15868                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15869 3925           FF76         08            push	8[bp]
15870                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15871 3928           FF76         16            push	$16[bp]
15872                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15873 392B           E8         3189            call	_biosfn_load_gfx_user_chars
15874 392E           83C4                   0A  add	sp,*$A
15875                                           !BCC_EOS
15876                                           ! 1886         break;
15877 3931           E9         00A5            br 	.25
15878                                           !BCC_EOS
15879                                           ! 1887        case 0x22:
15880                                           ! 1888         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15881                       00003934            .32:
15882                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15883 3934           8A46         0C            mov	al,$C[bp]
15884                                           ! Debug: list unsigned char = al+0 (used reg = )
15885 3937           30E4                       xor	ah,ah
15886 3939           50                         push	ax
15887                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15888 393A           E8         3182            call	_biosfn_load_gfx_8_14_chars
15889 393D           44                         inc	sp
15890 393E           44                         inc	sp
15891                                           !BCC_EOS
15892                                           ! 1889         break;
15893 393F           E9         0097            br 	.25
15894                                           !BCC_EOS
15895                                           ! 1890        case 0x23:
15896                                           ! 1891         biosfn_load_gfx
15897                                           ! 1891 _8_8_dd_chars(( BX & 0x00ff ));
15898                       00003942            .33:
15899                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15900 3942           8A46         0C            mov	al,$C[bp]
15901                                           ! Debug: list unsigned char = al+0 (used reg = )
15902 3945           30E4                       xor	ah,ah
15903 3947           50                         push	ax
15904                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15905 3948           E8         317C            call	_biosfn_load_gfx_8_8_dd_chars
15906 394B           44                         inc	sp
15907 394C           44                         inc	sp
15908                                           !BCC_EOS
15909                                           ! 1892         break;
15910 394D           E9         0089            br 	.25
15911                                           !BCC_EOS
15912                                           ! 1893        case 0x24:
15913                                           ! 1894         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15914                       00003950            .34:
15915                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15916 3950           8A46         0C            mov	al,$C[bp]
15917                                           ! Debug: list unsigned char = al+0 (used reg = )
15918 3953           30E4                       xor	ah,ah
15919 3955           50                         push	ax
15920                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15921 3956           E8         3176            call	_biosfn_load_gfx_8_16_chars
15922 3959           44                         inc	sp
15923 395A           44                         inc	sp
15924                                           !BCC_EOS
15925                                           ! 1895         break;
15926 395B           E9         007B            br 	.25
15927                                           !BCC_EOS
15928                                           ! 1896        case 0x30:
15929                                           ! 1897         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15930                       0000395E            .35:
15931                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15932 395E           8D5E         0E            lea	bx,$E[bp]
15933 3961           53                         push	bx
15934                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15935 3962           8D5E         10            lea	bx,$10[bp]
15936 3965           53                         push	bx
15937                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15938 3966           8D5E         08            lea	bx,8[bp]
15939 3969           53                         push	bx
15940                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15941 396A           8D5E         16            lea	bx,$16[bp]
15942 396D           53                         push	bx
15943                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15944 396E           8B46         0C            mov	ax,$C[bp]
15945 3971           88E0                       mov	al,ah
15946 3973           30E4                       xor	ah,ah
15947                                           ! Debug: list unsigned int = ax+0 (used reg = )
15948 3975           50                         push	ax
15949                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15950 3976           E8         315E            call	_biosfn_get_font_info
15951 3979           83C4                   0A  add	sp,*$A
15952                                           !BCC_EOS
15953                                           ! 1898         break;
15954 397C           EB           5B            jmp .25
15955                                           !BCC_EOS
15956                                           ! 1899        default:
15957                                           ! 1900         unknown();
15958                       0000397E            .36:
15959                                           ! Debug: func () void = unknown+0 (used reg = )
15960 397E           E8         4488            call	_unknown
15961                                           !BCC_EOS
15962                                           ! 1901       }
15963                                           ! 1902      break;
15964 3981           EB           56            jmp .25
15965                       00003983            .27:
15966 3983           2C                     00  sub	al,*0
15967 3985         0F84         FF16            beq 	.28
15968 3989           2C                     01  sub	al,*1
15969 398B         0F84         FF39            beq 	.2A
15970 398F           2C                     01  sub	al,*1
15971 3991         0F84         FF48            beq 	.2C
15972 3995           2C                     02  sub	al,*2
15973 3997         0F84         FF57            beq 	.2E
15974 399B           2C                     0C  sub	al,*$C
15975 399D         0F84         FEFE            beq 	.29
15976 39A1           2C                     01  sub	al,*1
15977 39A3         0F84         FF21            beq 	.2B
15978 39A7           2C                     01  sub	al,*1
15979 39A9         0F84         FF30            beq 	.2D
15980 39AD           2C                     02  sub	al,*2
15981 39AF         0F84         FF3F            beq 	.2F
15982 39B3           2C                     0C  sub	al,*$C
15983 39B5         0F84         FF4E            beq 	.30
15984 39B9           2C                     01  sub	al,*1
15985 39BB         0F84         FF57            beq 	.31
15986 39BF           2C                     01  sub	al,*1
15987 39C1         0F84         FF6F            beq 	.32
15988 39C5           2C                     01  sub	al,*1
15989 39C7         0F84         FF77            beq 	.33
15990 39CB           2C                     01  sub	al,*1
15991 39CD         0F84         FF7F            beq 	.34
15992 39D1           2C                     0C  sub	al,*$C
15993 39D3         0F84         FF87            beq 	.35
15994 39D7           EB           A5            jmp	.36
15995                       000039D9            .25:
15996 39D9           E9         0210            br 	.4
15997                                           !BCC_EOS
15998                                           ! 1903    case 0x12:
15999                                           ! 1904      switch(( BX & 0x00ff ))
16000                       000039DC            .37:
16001                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
16002 39DC           8A46         0C            mov	al,$C[bp]
16003                                           ! 1905       {
16004 39DF           EB           3F            jmp .3A
16005                                           ! 1906        case 0x20:
16006                                           ! 1907         biosfn_alternate_prtsc();
16007                       000039E1            .3B:
16008                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
16009 39E1           E8         32DE            call	_biosfn_alternate_prtsc
16010                                           !BCC_EOS
16011                                           ! 1908         break;
16012 39E4           EB           48            jmp .38
16013                                           !BCC_EOS
16014                                           ! 1909        case 0x35:
16015                                           ! 1910         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
16016                       000039E6            .3C:
16017                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
16018 39E6           FF76         0E            push	$E[bp]
16019                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16020 39E9           FF76         16            push	$16[bp]
16021                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
16022 39EC           8A46         12            mov	al,$12[bp]
16023                                           ! Debug: list unsigned char = al+0 (used reg = )
16024 39EF           30E4                       xor	ah,ah
16025 39F1           50                         push	ax
16026                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
16027 39F2           E8         33E4            call	_biosfn_switch_video_interface
16028 39F5           83C4                   06  add	sp,*6
16029                                           !BCC_EOS
16030                                           ! 1911         AX = ((AX & 0xff00) | (0x12));
16031                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16032 39F8           8B46         12            mov	ax,$12[bp]
16033 39FB           30C0                       xor	al,al
16034                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16035 39FD           0C                     12  or	al,*$12
16036                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16037 39FF           8946         12            mov	$12[bp],ax
16038                                           !BCC_EOS
16039                                           ! 1912         break;
16040 3A02           EB           2A            jmp .38
16041                                           !BCC_EOS
16042                                           ! 1913        case 0x36:
16043                                           ! 1914         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
16044                       00003A04            .3D:
16045                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16046 3A04           8A46         12            mov	al,$12[bp]
16047                                           ! Debug: list unsigned char = al+0 (used reg = )
16048 3A07           30E4                       xor	ah,ah
16049 3A09           50                         push	ax
16050                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
16051 3A0A           E8         33D4            call	_biosfn_enable_video_refresh_control
16052 3A0D           44                         inc	sp
16053 3A0E           44                         inc	sp
16054                                           !BCC_EOS
16055                                           ! 1915         AX = ((AX & 0xff00) | (0x12));
16056                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16057 3A0F           8B46         12            mov	ax,$12[bp]
16058 3A12           30C0                       xor	al,al
16059                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16060 3A14           0C                     12  or	al,*$12
16061                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16062 3A16           8946         12            mov	$12[bp],ax
16063                                           !BCC_EOS
16064                                           ! 1916         break;
16065 3A19           EB           13            jmp .38
16066                                           !BCC_EOS
16067                                           ! 1917        default:
16068                                           ! 1918         unknown();
16069                       00003A1B            .3E:
16070                                           ! Debug: func () void = unknown+0 (used reg = )
16071 3A1B           E8         43EB            call	_unknown
16072                                           !BCC_EOS
16073                                           ! 1919       }
16074                                           ! 1920      break;
16075 3A1E           EB           0E            jmp .38
16076                       00003A20            .3A:
16077 3A20           2C                     20  sub	al,*$20
16078 3A22           74           BD            je 	.3B
16079 3A24           2C                     15  sub	al,*$15
16080 3A26           74           BE            je 	.3C
16081 3A28           2C                     01  sub	al,*1
16082 3A2A           74           D8            je 	.3D
16083 3A2C           EB           ED            jmp	.3E
16084                       00003A2E            .38:
16085 3A2E           E9         01BB            br 	.4
16086                                           !BCC_EOS
16087                                           ! 1921    case 0x13:
16088                                           ! 1922      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16089                       00003A31            .3F:
16090                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16091 3A31           FF76         08            push	8[bp]
16092                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16093 3A34           FF76         16            push	$16[bp]
16094                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16095 3A37           8A46         0E            mov	al,$E[bp]
16096                                           ! Debug: list unsigned char = al+0 (used reg = )
16097 3A3A           30E4                       xor	ah,ah
16098 3A3C           50                         push	ax
16099                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16100 3A3D           8B46         0E            mov	ax,$E[bp]
16101 3A40           88E0                       mov	al,ah
16102 3A42           30E4                       xor	ah,ah
16103                                           ! Debug: list unsigned int = ax+0 (used reg = )
16104 3A44           50                         push	ax
16105                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16106 3A45           FF76         10            push	$10[bp]
16107                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16108 3A48           8A46         0C            mov	al,$C[bp]
16109                                           ! Debug: list unsigned char = al+0 (used reg = )
16110 3A4B           30E4                       xor	ah,ah
16111 3A4D           50                         push	ax
16112                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16113 3A4E           8B46         0C            mov	ax,$C[bp]
16114 3A51           88E0                       mov	al,ah
16115 3A53           30E4                       xor	ah,ah
16116                                           ! Debug: list unsigned int = ax+0 (used reg = )
16117 3A55           50                         push	ax
16118                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16119 3A56           8A46         12            mov	al,$12[bp]
16120                                           ! Debug: list unsigned char = al+0 (used reg = )
16121 3A59           30E4                       xor	ah,ah
16122 3A5B           50                         push	ax
16123                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16124 3A5C           E8         338A            call	_biosfn_write_string
16125 3A5F           83C4                   10  add	sp,*$10
16126                                           !BCC_EOS
16127                                           ! 1923      break;
16128 3A62           E9         0187            br 	.4
16129                                           !BCC_EOS
16130                                           ! 1924    case 0x1B:
16131                                           ! 1925      biosfn_read_state_info(BX,ES,DI);
16132                       00003A65            .40:
16133                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16134 3A65           FF76         04            push	4[bp]
16135                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16136 3A68           FF76         16            push	$16[bp]
16137                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16138 3A6B           FF76         0C            push	$C[bp]
16139                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16140 3A6E           E8         34C4            call	_biosfn_read_state_info
16141 3A71           83C4                   06  add	sp,*6
16142                                           !BCC_EOS
16143                                           ! 1926      AX = ((AX & 0xff00) | (0x1B));
16144                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16145 3A74           8B46         12            mov	ax,$12[bp]
16146 3A77           30C0                       xor	al,al
16147                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16148 3A79           0C                     1B  or	al,*$1B
16149                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16150 3A7B           8946         12            mov	$12[bp],ax
16151                                           !BCC_EOS
16152                                           ! 1927      break;
16153 3A7E           E9         016B            br 	.4
16154                                           !BCC_EOS
16155                                           ! 1928    case 0x1C:
16156                                           ! 1929      switch(( AX & 0x00ff ))
16157                       00003A81            .41:
16158                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16159 3A81           8A46         12            mov	al,$12[bp]
16160                                           ! 1930       {
16161 3A84           EB           36            jmp .44
16162                                           ! 1931        case 0x00:
16163                                           ! 1932         biosfn_read_video_state_size(CX,&BX);
16164                       00003A86            .45:
16165                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16166 3A86           8D5E         0C            lea	bx,$C[bp]
16167 3A89           53                         push	bx
16168                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16169 3A8A           FF76         10            push	$10[bp]
16170                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16171 3A8D           E8         3624            call	_biosfn_read_video_state_size
16172 3A90           83C4                   04  add	sp,*4
16173                                           !BCC_EOS
16174                                           ! 1933         break;
16175 3A93           EB           35            jmp .42
16176                                           !BCC_EOS
16177                                           ! 1934        case 0x01:
16178                                           ! 1935         biosfn_save_video_state(CX,ES,BX);
16179                       00003A95            .46:
16180                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16181 3A95           FF76         0C            push	$C[bp]
16182                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16183 3A98           FF76         16            push	$16[bp]
16184                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16185 3A9B           FF76         10            push	$10[bp]
16186                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16187 3A9E           E8         3637            call	_biosfn_save_video_state
16188 3AA1           83C4                   06  add	sp,*6
16189                                           !BCC_EOS
16190                                           ! 1936         break;
16191 3AA4           EB           24            jmp .42
16192                                           !BCC_EOS
16193                                           ! 1937        case 0x02:
16194                                           ! 1938         biosfn_restore_video_state(CX,ES,BX);
16195                       00003AA6            .47:
16196                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16197 3AA6           FF76         0C            push	$C[bp]
16198                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16199 3AA9           FF76         16            push	$16[bp]
16200                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16201 3AAC           FF76         10            push	$10[bp]
16202                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16203 3AAF           E8         3BF0            call	_biosfn_restore_video_state
16204 3AB2           83C4                   06  add	sp,*6
16205                                           !BCC_EOS
16206                                           ! 1939         break;
16207 3AB5           EB           13            jmp .42
16208                                           !BCC_EOS
16209                                           ! 1940        default:
16210                                           ! 1941         unknown();
16211                       00003AB7            .48:
16212                                           ! Debug: func () void = unknown+0 (used reg = )
16213 3AB7           E8         434F            call	_unknown
16214                                           !BCC_EOS
16215                                           ! 1942       }
16216                                           ! 1943      AX = ((AX & 0xff00) | (0x1C));
16217 3ABA           EB           0E            jmp .42
16218                       00003ABC            .44:
16219 3ABC           2C                     00  sub	al,*0
16220 3ABE           74           C6            je 	.45
16221 3AC0           2C                     01  sub	al,*1
16222 3AC2           74           D1            je 	.46
16223 3AC4           2C                     01  sub	al,*1
16224 3AC6           74           DE            je 	.47
16225 3AC8           EB           ED            jmp	.48
16226                       00003ACA            .42:
16227                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16228 3ACA           8B46         12            mov	ax,$12[bp]
16229 3ACD           30C0                       xor	al,al
16230                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16231 3ACF           0C                     1C  or	al,*$1C
16232                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16233 3AD1           8946         12            mov	$12[bp],ax
16234                                           !BCC_EOS
16235                                           ! 1944      break;
16236 3AD4           E9         0115            br 	.4
16237                                           !BCC_EOS
16238                                           ! 1945    case 0x4f:
16239                                           ! 1946      if (vbe_has_vbe_display()) {
16240                       00003AD7            .49:
16241                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16242 3AD7           E8         5A84            call	_vbe_has_vbe_display
16243 3ADA           85C0                       test	ax,ax
16244 3ADC         0F84         00A9            beq 	.4A
16245                       00003AE0            .4B:
16246                                           ! 1947        switch(( AX & 0x00ff ))
16247                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16248 3AE0           8A46         12            mov	al,$12[bp]
16249                                           ! 1948        {
16250 3AE3           EB           77            jmp .4E
16251                                           ! 1949          case 0x00:
16252                                           ! 1950           vbe_biosfn_return_controller_information(&AX,ES,DI);
16253                       00003AE5            .4F:
16254                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16255 3AE5           FF76         04            push	4[bp]
16256                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16257 3AE8           FF76         16            push	$16[bp]
16258                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16259 3AEB           8D5E         12            lea	bx,$12[bp]
16260 3AEE           53                         push	bx
16261                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16262 3AEF           E8         5AE3            call	_vbe_biosfn_return_controller_information
16263 3AF2           83C4                   06  add	sp,*6
16264                                           !BCC_EOS
16265                                           ! 1951           break;
16266 3AF5           E9         008F            br 	.4C
16267                                           !BCC_EOS
16268                                           ! 1952          case 0x01:
16269                                           ! 1953           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16270                       00003AF8            .50:
16271                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16272 3AF8           FF76         04            push	4[bp]
16273                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16274 3AFB           FF76         16            push	$16[bp]
16275                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16276 3AFE           FF76         10            push	$10[bp]
16277                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16278 3B01           8D5E         12            lea	bx,$12[bp]
16279 3B04           53                         push	bx
16280                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16281 3B05           E8         5D77            call	_vbe_biosfn_return_mode_information
16282 3B08           83C4                   08  add	sp,*8
16283                                           !BCC_EOS
16284                                           ! 1954           break;
16285 3B0B           EB           7A            jmp .4C
16286                                           !BCC_EOS
16287                                           ! 1955          case 0x02:
16288                                           ! 1956           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16289                       00003B0D            .51:
16290                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16291 3B0D           FF76         04            push	4[bp]
16292                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16293 3B10           FF76         16            push	$16[bp]
16294                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16295 3B13           FF76         0C            push	$C[bp]
16296                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16297 3B16           8D5E         12            lea	bx,$12[bp]
16298 3B19           53                         push	bx
16299                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16300 3B1A           E8         5EAB            call	_vbe_biosfn_set_mode
16301 3B1D           83C4                   08  add	sp,*8
16302                                           !BCC_EOS
16303                                           ! 1957           break;
16304 3B20           EB           65            jmp .4C
16305                                           !BCC_EOS
16306                                           ! 1958          case 0x04:
16307                                           ! 1959           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16308                       00003B22            .52:
16309                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16310 3B22           8D5E         0C            lea	bx,$C[bp]
16311 3B25           53                         push	bx
16312                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16313 3B26           FF76         16            push	$16[bp]
16314                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16315 3B29           FF76         0E            push	$E[bp]
16316                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16317 3B2C           FF76         10            push	$10[bp]
16318                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16319 3B2F           8D5E         12            lea	bx,$12[bp]
16320 3B32           53                         push	bx
16321                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16322 3B33           E8         61FF            call	_vbe_biosfn_save_restore_state
16323 3B36           83C4                   0A  add	sp,*$A
16324                                           !BCC_EOS
16325                                           ! 1960           break;
16326 3B39           EB           4C            jmp .4C
16327                                           !BCC_EOS
16328                                           ! 1961          case 0x09:
16329                                           ! 1962           unimplemented();
16330                       00003B3B            .53:
16331                                           ! Debug: func () void = unimplemented+0 (used reg = )
16332 3B3B           E8         42BD            call	_unimplemented
16333                                           !BCC_EOS
16334                                           ! 1963           AX=0x100;
16335                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16336 3B3E           B8                   0100  mov	ax,#$100
16337 3B41           8946         12            mov	$12[bp],ax
16338                                           !BCC_EOS
16339                                           ! 1964           break;
16340 3B44           EB           41            jmp .4C
16341                                           !BCC_EOS
16342                                           ! 1965          case 0x0A:
16343                                           ! 1966           unimplemented();
16344                       00003B46            .54:
16345                                           ! Debug: func () void = unimplemented+0 (used reg = )
16346 3B46           E8         42B2            call	_unimplemented
16347                                           !BCC_EOS
16348                                           ! 1967           AX=0x100;
16349                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16350 3B49           B8                   0100  mov	ax,#$100
16351 3B4C           8946         12            mov	$12[bp],ax
16352                                           !BCC_EOS
16353                                           ! 1968           break;
16354 3B4F           EB           36            jmp .4C
16355                                           !BCC_EOS
16356                                           ! 1969          default:
16357                                           ! 1970           unknown();
16358                       00003B51            .55:
16359                                           ! Debug: func () void = unknown+0 (used reg = )
16360 3B51           E8         42B5            call	_unknown
16361                                           !BCC_EOS
16362                                           ! 1971           AX=0x100;
16363                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16364 3B54           B8                   0100  mov	ax,#$100
16365 3B57           8946         12            mov	$12[bp],ax
16366                                           !BCC_EOS
16367                                           ! 1972           }
16368                                           ! 1973         }
16369 3B5A           EB           2B            jmp .4C
16370                       00003B5C            .4E:
16371 3B5C           2C                     00  sub	al,*0
16372 3B5E           72           F1            jb 	.55
16373 3B60           3C                     0A  cmp	al,*$A
16374 3B62           77           21            ja  	.56
16375 3B64           30E4                       xor	ah,ah
16376 3B66           D1E0                       shl	ax,*1
16377 3B68           89C3                       mov	bx,ax
16378 3B6A           2E                         seg	cs
16379 3B6B           FFA7       3B6F            br	.57[bx]
16380                       00003B6F            .57:
16381 3B6F                      3AE5            .word	.4F
16382 3B71                      3AF8            .word	.50
16383 3B73                      3B0D            .word	.51
16384 3B75                      3B51            .word	.55
16385 3B77                      3B22            .word	.52
16386 3B79                      3B51            .word	.55
16387 3B7B                      3B51            .word	.55
16388 3B7D                      3B51            .word	.55
16389 3B7F                      3B51            .word	.55
16390 3B81                      3B3B            .word	.53
16391 3B83                      3B46            .word	.54
16392                       00003B85            .56:
16393 3B85           EB           CA            jmp	.55
16394                       00003B87            .4C:
16395                                           ! 1974 
16396                                           ! 1974         else {
16397 3B87           EB           06            jmp .58
16398                       00003B89            .4A:
16399                                           ! 1975           AX=0x0100;
16400                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16401 3B89           B8                   0100  mov	ax,#$100
16402 3B8C           8946         12            mov	$12[bp],ax
16403                                           !BCC_EOS
16404                                           ! 1976           }
16405                                           ! 1977         break;
16406                       00003B8F            .58:
16407 3B8F           EB           5B            jmp .4
16408                                           !BCC_EOS
16409                                           ! 1978    default:
16410                                           ! 1979      unknown();
16411                       00003B91            .59:
16412                                           ! Debug: func () void = unknown+0 (used reg = )
16413 3B91           E8         4275            call	_unknown
16414                                           !BCC_EOS
16415                                           ! 1980   }
16416                                           ! 1981 }
16417 3B94           EB           56            jmp .4
16418                       00003B96            .6:
16419 3B96           2D                   0000  sub	ax,*0
16420 3B99           7C           F6            jl 	.59
16421 3B9B           3D                   001C  cmp	ax,*$1C
16422 3B9E           77           43            ja  	.5A
16423 3BA0           D1E0                       shl	ax,*1
16424 3BA2           89C3                       mov	bx,ax
16425 3BA4           2E                         seg	cs
16426 3BA5           FFA7       3BA9            br	.5B[bx]
16427                       00003BA9            .5B:
16428 3BA9                      36A1            .word	.7
16429 3BAB                      36FF            .word	.16
16430 3BAD                      3716            .word	.17
16431 3BAF                      372A            .word	.18
16432 3BB1                      3743            .word	.19
16433 3BB3                      375D            .word	.1A
16434 3BB5                      376B            .word	.1B
16435 3BB7                      37A6            .word	.1C
16436 3BB9                      37E0            .word	.1D
16437 3BBB                      37F5            .word	.1E
16438 3BBD                      3815            .word	.1F
16439 3BBF                      3B91            .word	.59
16440 3BC1                      3835            .word	.20
16441 3BC3                      3852            .word	.21
16442 3BC5                      386D            .word	.22
16443 3BC7                      3B91            .word	.59
16444 3BC9                      388A            .word	.23
16445 3BCB                      3899            .word	.24
16446 3BCD                      39DC            .word	.37
16447 3BCF                      3A31            .word	.3F
16448 3BD1                      3B91            .word	.59
16449 3BD3                      3B91            .word	.59
16450 3BD5                      3B91            .word	.59
16451 3BD7                      3B91            .word	.59
16452 3BD9                      3B91            .word	.59
16453 3BDB                      3B91            .word	.59
16454 3BDD                      3B91            .word	.59
16455 3BDF                      3A65            .word	.40
16456 3BE1                      3A81            .word	.41
16457                       00003BE3            .5A:
16458 3BE3           2D                   004F  sub	ax,*$4F
16459 3BE6         0F84         FEED            beq 	.49
16460 3BEA           EB           A5            jmp	.59
16461                       00003BEC            .4:
16462                       FFFFFFFE            ..FFFF	=	-2
16463 3BEC           5D                         pop	bp
16464 3BED           C3                         ret
16465                                           ! 1982 static void biosfn_set_video_mode(mode) Bit8u mode;
16466                                           ! Register BX used in function int10_func
16467                       00003BEE            _biosfn_set_video_mode:
16468                                           !BCC_EOS
16469                                           ! 1983 {
16470                                           ! 1984  Bit8u noclearmem=mode&0x80;
16471 3BEE           55                         push	bp
16472 3BEF           89E5                       mov	bp,sp
16473 3BF1           4C                         dec	sp
16474                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16475 3BF2           8A46         04            mov	al,4[bp]
16476 3BF5           24                     80  and	al,#$80
16477                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16478 3BF7           8846         FF            mov	-1[bp],al
16479                                           !BCC_EOS
16480                                           ! 1985  Bit8u line,mmask,*palette,vpti;
16481                                           !BCC_EOS
16482                                           ! 1986  Bit16u i,twidth,theightm1,cheight;
16483                                           !BCC_EOS
16484                                           ! 1987  Bit8u modeset_ctl,video_ctl,vga_switches;
16485                                           !BCC_EOS
16486                                           ! 1988  Bit16u crtc_addr;
16487                                           !BCC_EOS
16488                                           ! 1989  if (vbe_has_vbe_display()) {
16489 3BFA           83C4                   EB  add	sp,*-$15
16490                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16491 3BFD           E8         595E            call	_vbe_has_vbe_display
16492 3C00           85C0                       test	ax,ax
16493 3C02           74           08            je  	.5C
16494                       00003C04            .5D:
16495                                           ! 1990    dispi_set_enable(0x00);
16496                                           ! Debug: list int = const 0 (used reg = )
16497 3C04           31C0                       xor	ax,ax
16498 3C06           50                         push	ax
16499                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16500 3C07           E8         5721            call	_dispi_set_enable
16501 3C0A           44                         inc	sp
16502 3C0B           44                         inc	sp
16503                                           !BCC_EOS
16504                                           ! 1991   }
16505                                           ! 1992  mode=mode&0x7f;
16506                       00003C0C            .5C:
16507                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16508 3C0C           8A46         04            mov	al,4[bp]
16509 3C0F           24                     7F  and	al,*$7F
16510                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16511 3C11           8846         04            mov	4[bp],al
16512                                           !BCC_EOS
16513                                           ! 1993  line=find_vga_entry(mode);
16514                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16515 3C14           8A46         04            mov	al,4[bp]
16516 3C17           30E4                       xor	ah,ah
16517 3C19           50                         push	ax
16518                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16519 3C1A           E8         4063            call	_find_vga_entry
16520 3C1D           44                         inc	sp
16521 3C1E           44                         inc	sp
16522                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16523 3C1F           8846         FE            mov	-2[bp],al
16524                                           !BCC_EOS
16525                                           ! 1994  printf("mode search %02x found line %02x\n",mode,line);
16526                                           ! Debug: list unsigned char line = [S+$18-4] (used reg = )
16527 3C22           8A46         FE            mov	al,-2[bp]
16528 3C25           30E4                       xor	ah,ah
16529 3C27           50                         push	ax
16530                                           ! Debug: list unsigned char mode = [S+$1A+2] (used reg = )
16531 3C28           8A46         04            mov	al,4[bp]
16532 3C2B           30E4                       xor	ah,ah
16533 3C2D           50                         push	ax
16534                                           ! Debug: list * char = .5E+0 (used reg = )
16535 3C2E           BB                   A198  mov	bx,#.5E
16536 3C31           53                         push	bx
16537                                           ! Debug: func () void = printf+0 (used reg = )
16538 3C32           E8         41E2            call	_printf
16539 3C35           83C4                   06  add	sp,*6
16540                                           !BCC_EOS
16541                                           ! 1995  if(line==0xFF)
16542                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16543 3C38           8A46         FE            mov	al,-2[bp]
16544 3C3B           3C                     FF  cmp	al,#$FF
16545 3C3D           75           04            jne 	.5F
16546                       00003C3F            .60:
16547                                           ! 1996   return;
16548 3C3F           89EC                       mov	sp,bp
16549 3C41           5D                         pop	bp
16550 3C42           C3                         ret
16551                                           !BCC_EOS
16552                                           ! 1997  vpti=line_to_vpti[line];
16553                       00003C43            .5F:
16554                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16555 3C43           8A46         FE            mov	al,-2[bp]
16556 3C46           30E4                       xor	ah,ah
16557 3C48           89C3                       mov	bx,ax
16558                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16559 3C4A           8A87       0284            mov	al,_line_to_vpti[bx]
16560 3C4E           8846         F9            mov	-7[bp],al
16561                                           !BCC_EOS
16562                                           ! 1998  twidth=video_param_table[vpti].twidth;
16563                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16564 3C51           8A46         F9            mov	al,-7[bp]
16565 3C54           30E4                       xor	ah,ah
16566 3C56           B1                     06  mov	cl,*6
16567 3C58           D3E0                       shl	ax,cl
16568 3C5A           89C3                       mov	bx,ax
16569                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16570 3C5C           8A87       0298            mov	al,_video_param_table[bx]
16571 3C60           30E4                       xor	ah,ah
16572 3C62           8946         F4            mov	-$C[bp],ax
16573                                           !BCC_EOS
16574                                           ! 1999  theightm1=video_param_table[vpti].theightm1;
16575                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16576 3C65           8A46         F9            mov	al,-7[bp]
16577 3C68           30E4                       xor	ah,ah
16578 3C6A           B1                     06  mov	cl,*6
16579 3C6C           D3E0                       shl	ax,cl
16580 3C6E           89C3                       mov	bx,ax
16581 3C70           81C3                 0298  add	bx,#_video_param_table
16582                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16583 3C74           8A47         01            mov	al,1[bx]
16584 3C77           30E4                       xor	ah,ah
16585 3C79           8946         F2            mov	-$E[bp],ax
16586                                           !BCC_EOS
16587                                           ! 2000  cheight=video_param_table[vpti].cheight;
16588                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16589 3C7C           8A46         F9            mov	al,-7[bp]
16590 3C7F           30E4                       xor	ah,ah
16591 3C81           B1                     06  mov	cl,*6
16592 3C83           D3E0                       shl	ax,cl
16593 3C85           89C3                       mov	bx,ax
16594 3C87           81C3                 0298  add	bx,#_video_param_table
16595                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16596 3C8B           8A47         02            mov	al,2[bx]
16597 3C8E           30E4                       xor	ah,ah
16598 3C90           8946         F0            mov	-$10[bp],ax
16599                                           !BCC_EOS
16600                                           ! 2001  video_ctl=read_byte(0x40,0x87);
16601                                           ! Debug: list int = const $87 (used reg = )
16602 3C93           B8                   0087  mov	ax,#$87
16603 3C96           50                         push	ax
16604                                           ! Debug: list int = const $40 (used reg = )
16605 3C97           B8                   0040  mov	ax,*$40
16606 3C9A           50                         push	ax
16607                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16608 3C9B           E8         40CE            call	_read_byte
16609 3C9E           83C4                   04  add	sp,*4
16610                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16611 3CA1           8846         EE            mov	-$12[bp],al
16612                                           !BCC_EOS
16613                                           ! 2002  vga_switches=read_byte(0x40,0x88);
16614                                           ! Debug: list int = const $88 (used reg = )
16615 3CA4           B8                   0088  mov	ax,#$88
16616 3CA7           50                         push	ax
16617                                           ! Debug: list int = const $40 (used reg = )
16618 3CA8           B8                   0040  mov	ax,*$40
16619 3CAB           50                         push	ax
16620                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16621 3CAC           E8         40BD            call	_read_byte
16622 3CAF           83C4                   04  add	sp,*4
16623                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16624 3CB2           8846         ED            mov	-$13[bp],al
16625                                           !BCC_EOS
16626                                           ! 2003  modeset_ctl=read_byte(0x40,0x89);
16627                                           ! Debug: list int = const $89 (used reg = )
16628 3CB5           B8                   0089  mov	ax,#$89
16629 3CB8           50                         push	ax
16630                                           ! Debug: list int = const $40 (used reg = )
16631 3CB9           B8                   0040  mov	ax,*$40
16632 3CBC           50                         push	ax
16633                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16634 3CBD           E8         40AC            call	_read_byte
16635 3CC0           83C4                   04  add	sp,*4
16636                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16637 3CC3           8846         EF            mov	-$11[bp],al
16638                                           !BCC_EOS
16639                                           ! 2004  if((modeset_ctl&0x08)==0)
16640                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16641 3CC6           8A46         EF            mov	al,-$11[bp]
16642 3CC9           24                     08  and	al,*8
16643                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16644 3CCB           84C0                       test	al,al
16645 3CCD         0F85         0145            bne 	.61
16646                       00003CD1            .62:
16647                                           ! 2005   {
16648                                           ! 2006    outb(0x3c6,vga_modes[line].pelmask);
16649                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16650 3CD1           8A46         FE            mov	al,-2[bp]
16651 3CD4           30E4                       xor	ah,ah
16652 3CD6           B1                     03  mov	cl,*3
16653 3CD8           D3E0                       shl	ax,cl
16654 3CDA           89C3                       mov	bx,ax
16655 3CDC           81C3                 0204  add	bx,#_vga_modes
16656                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16657 3CE0           8A47         06            mov	al,6[bx]
16658 3CE3           30E4                       xor	ah,ah
16659 3CE5           50                         push	ax
16660                                           ! Debug: list int = const $3C6 (used reg = )
16661 3CE6           B8                   03C6  mov	ax,#$3C6
16662 3CE9           50                         push	ax
16663                                           ! Debug: func () void = outb+0 (used reg = )
16664 3CEA           E8         40EB            call	_outb
16665 3CED           83C4                   04  add	sp,*4
16666                                           !BCC_EOS
16667                                           ! 2007    outb(0x3c8,0x00);
16668                                           ! Debug: list int = const 0 (used reg = )
16669 3CF0           31C0                       xor	ax,ax
16670 3CF2           50                         push	ax
16671                                           ! Debug: list int = const $3C8 (used reg = )
16672 3CF3           B8                   03C8  mov	ax,#$3C8
16673 3CF6           50                         push	ax
16674                                           ! Debug: func () void = outb+0 (used reg = )
16675 3CF7           E8         40DE            call	_outb
16676 3CFA           83C4                   04  add	sp,*4
16677                                           !BCC_EOS
16678                                           ! 2008    switch(vga_modes[line].dacmodel)
16679                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16680 3CFD           8A46         FE            mov	al,-2[bp]
16681 3D00           30E4                       xor	ah,ah
16682 3D02           B1                     03  mov	cl,*3
16683 3D04           D3E0                       shl	ax,cl
16684 3D06           89C3                       mov	bx,ax
16685 3D08           81C3                 0204  add	bx,#_vga_modes
16686 3D0C           8A47         07            mov	al,7[bx]
16687                                           ! 2009     {case 0:
16688 3D0F           EB           22            jmp .65
16689                                           ! 2010       palette=&palette0;
16690                       00003D11            .66:
16691                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16692 3D11           BB                   0A18  mov	bx,#_palette0
16693 3D14           895E         FA            mov	-6[bp],bx
16694                                           !BCC_EOS
16695                                           ! 2011       break;
16696 3D17           EB           2A            jmp .63
16697                                           !BCC_EOS
16698                                           ! 2012      case 1:
16699                                           ! 2013       palette=&palette1;
16700                       00003D19            .67:
16701                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16702 3D19           BB                   0AD8  mov	bx,#_palette1
16703 3D1C           895E         FA            mov	-6[bp],bx
16704                                           !BCC_EOS
16705                                           ! 2014       break;
16706 3D1F           EB           22            jmp .63
16707                                           !BCC_EOS
16708                                           ! 2015      case 2:
16709                                           ! 2016       palette=&palette2;
16710                       00003D21            .68:
16711                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16712 3D21           BB                   0B98  mov	bx,#_palette2
16713 3D24           895E         FA            mov	-6[bp],bx
16714                                           !BCC_EOS
16715                                           ! 2017       break;
16716 3D27           EB           1A            jmp .63
16717                                           !BCC_EOS
16718                                           ! 2018      case 3:
16719                                           ! 2019       palette=&palette3;
16720                       00003D29            .69:
16721                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16722 3D29           BB                   0C58  mov	bx,#_palette3
16723 3D2C           895E         FA            mov	-6[bp],bx
16724                                           !BCC_EOS
16725                                           ! 2020       break;
16726 3D2F           EB           12            jmp .63
16727                                           !BCC_EOS
16728                                           ! 2021     }
16729                                           ! 2022    for(i=0;i<0x0100;i++)
16730 3D31           EB           10            jmp .63
16731                       00003D33            .65:
16732 3D33           2C                     00  sub	al,*0
16733 3D35           74           DA            je 	.66
16734 3D37           2C                     01  sub	al,*1
16735 3D39           74           DE            je 	.67
16736 3D3B           2C                     01  sub	al,*1
16737 3D3D           74           E2            je 	.68
16738 3D3F           2C                     01  sub	al,*1
16739 3D41           74           E6            je 	.69
16740                       00003D43            .63:
16741                       FFFFFFE8            ..FFFE	=	-$18
16742                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16743 3D43           31C0                       xor	ax,ax
16744 3D45           8946         F6            mov	-$A[bp],ax
16745                                           !BCC_EOS
16746                                           !BCC_EOS
16747                                           ! 2023     {if(i<=dac_regs[vga_modes[line].dacmodel])
16748 3D48           E9         00AB            br 	.6C
16749                       00003D4B            .6D:
16750                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16751 3D4B           8A46         FE            mov	al,-2[bp]
16752 3D4E           30E4                       xor	ah,ah
16753 3D50           B1                     03  mov	cl,*3
16754 3D52           D3E0                       shl	ax,cl
16755 3D54           89C3                       mov	bx,ax
16756 3D56           81C3                 0204  add	bx,#_vga_modes
16757                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16758 3D5A           8A47         07            mov	al,7[bx]
16759 3D5D           30E4                       xor	ah,ah
16760 3D5F           89C3                       mov	bx,ax
16761                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16762 3D61           8A87       0294            mov	al,_dac_regs[bx]
16763 3D65           30E4                       xor	ah,ah
16764 3D67           3B46         F6            cmp	ax,-$A[bp]
16765 3D6A           72           5C            jb  	.6E
16766                       00003D6C            .6F:
16767                                           ! 2024       {outb(0x3c9,palette[(i*3)+0]);
16768                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16769 3D6C           8B46         F6            mov	ax,-$A[bp]
16770 3D6F           89C2                       mov	dx,ax
16771 3D71           D1E0                       shl	ax,*1
16772 3D73           01D0                       add	ax,dx
16773                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16774                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16775 3D75           0346         FA            add	ax,-6[bp]
16776 3D78           89C3                       mov	bx,ax
16777                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16778 3D7A           8A07                       mov	al,[bx]
16779 3D7C           30E4                       xor	ah,ah
16780 3D7E           50                         push	ax
16781                                           ! Debug: list int = const $3C9 (used reg = )
16782 3D7F           B8                   03C9  mov	ax,#$3C9
16783 3D82           50                         push	ax
16784                                           ! Debug: func () void = outb+0 (used reg = )
16785 3D83           E8         4052            call	_outb
16786 3D86           83C4                   04  add	sp,*4
16787                                           !BCC_EOS
16788                                           ! 2025        outb(0x3c9,palette[(i*3)+1]);
16789                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16790 3D89           8B46         F6            mov	ax,-$A[bp]
16791 3D8C           89C2                       mov	dx,ax
16792 3D8E           D1E0                       shl	ax,*1
16793 3D90           01D0                       add	ax,dx
16794                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16795                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16796 3D92           40                         inc	ax
16797 3D93           0346         FA            add	ax,-6[bp]
16798 3D96           89C3                       mov	bx,ax
16799                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16800 3D98           8A07                       mov	al,[bx]
16801 3D9A           30E4                       xor	ah,ah
16802 3D9C           50                         push	ax
16803                                           ! Debug: list int = const $3C9 (used reg = )
16804 3D9D           B8                   03C9  mov	ax,#$3C9
16805 3DA0           50                         push	ax
16806                                           ! Debug: func () void = outb+0 (used reg = )
16807 3DA1           E8         4034            call	_outb
16808 3DA4           83C4                   04  add	sp,*4
16809                                           !BCC_EOS
16810                                           ! 2026        outb(0x3c9,palette[(i*3)+2]);
16811                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16812 3DA7           8B46         F6            mov	ax,-$A[bp]
16813 3DAA           89C2                       mov	dx,ax
16814 3DAC           D1E0                       shl	ax,*1
16815 3DAE           01D0                       add	ax,dx
16816                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16817                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16818 3DB0           40                         inc	ax
16819 3DB1           40                         inc	ax
16820 3DB2           0346         FA            add	ax,-6[bp]
16821 3DB5           89C3                       mov	bx,ax
16822                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16823 3DB7           8A07                       mov	al,[bx]
16824 3DB9           30E4                       xor	ah,ah
16825 3DBB           50                         push	ax
16826                                           ! Debug: list int = const $3C9 (used reg = )
16827 3DBC           B8                   03C9  mov	ax,#$3C9
16828 3DBF           50                         push	ax
16829                                           ! Debug: func () void = outb+0 (used reg = )
16830 3DC0           E8         4015            call	_outb
16831 3DC3           83C4                   04  add	sp,*4
16832                                           !BCC_EOS
16833                                           ! 2027       }
16834                                           ! 2028      else
16835                                           ! 2029       {outb(0x3c9,0);
16836 3DC6           EB           27            jmp .70
16837                       00003DC8            .6E:
16838                                           ! Debug: list int = const 0 (used reg = )
16839 3DC8           31C0                       xor	ax,ax
16840 3DCA           50                         push	ax
16841                                           ! Debug: list int = const $3C9 (used reg = )
16842 3DCB           B8                   03C9  mov	ax,#$3C9
16843 3DCE           50                         push	ax
16844                                           ! Debug: func () void = outb+0 (used reg = )
16845 3DCF           E8         4006            call	_outb
16846 3DD2           83C4                   04  add	sp,*4
16847                                           !BCC_EOS
16848                                           ! 2030        outb(0x3c9,0);
16849                                           ! Debug: list int = const 0 (used reg = )
16850 3DD5           31C0                       xor	ax,ax
16851 3DD7           50                         push	ax
16852                                           ! Debug: list int = const $3C9 (used reg = )
16853 3DD8           B8                   03C9  mov	ax,#$3C9
16854 3DDB           50                         push	ax
16855                                           ! Debug: func () void = outb+0 (used reg = )
16856 3DDC           E8         3FF9            call	_outb
16857 3DDF           83C4                   04  add	sp,*4
16858                                           !BCC_EOS
16859                                           ! 2031        outb(0x3c9,0);
16860                                           ! Debug: list int = const 0 (used reg = )
16861 3DE2           31C0                       xor	ax,ax
16862 3DE4           50                         push	ax
16863                                           ! Debug: list int = const $3C9 (used reg = )
16864 3DE5           B8                   03C9  mov	ax,#$3C9
16865 3DE8           50                         push	ax
16866                                           ! Debug: func () void = outb+0 (used reg = )
16867 3DE9           E8         3FEC            call	_outb
16868 3DEC           83C4                   04  add	sp,*4
16869                                           !BCC_EOS
16870                                           ! 2032       }
16871                                           ! 2033     }
16872                       00003DEF            .70:
16873                                           ! 2034    if((modeset_ctl&0x02)==0x02)
16874                       00003DEF            .6B:
16875                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16876 3DEF           8B46         F6            mov	ax,-$A[bp]
16877 3DF2           40                         inc	ax
16878 3DF3           8946         F6            mov	-$A[bp],ax
16879                       00003DF6            .6C:
16880                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16881 3DF6           8B46         F6            mov	ax,-$A[bp]
16882 3DF9           3D                   0100  cmp	ax,#$100
16883 3DFC         0F82         FF4B            blo 	.6D
16884                       00003E00            .71:
16885                       00003E00            .6A:
16886                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16887 3E00           8A46         EF            mov	al,-$11[bp]
16888 3E03           24                     02  and	al,*2
16889                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16890 3E05           3C                     02  cmp	al,*2
16891 3E07           75           0D            jne 	.72
16892                       00003E09            .73:
16893                                           ! 2035     {
16894                                           ! 2036      biosfn_perform_gray_scale_summing(0x00, 0x100);
16895                                           ! Debug: list int = const $100 (used reg = )
16896 3E09           B8                   0100  mov	ax,#$100
16897 3E0C           50                         push	ax
16898                                           ! Debug: list int = const 0 (used reg = )
16899 3E0D           31C0                       xor	ax,ax
16900 3E0F           50                         push	ax
16901                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16902 3E10           E8         2793            call	_biosfn_perform_gray_scale_summing
16903 3E13           83C4                   04  add	sp,*4
16904                                           !BCC_EOS
16905                                           ! 2037     }
16906                                           ! 2038   }
16907                       00003E16            .72:
16908                                           ! 2039  inb(0x3da);
16909                       00003E16            .61:
16910                                           ! Debug: list int = const $3DA (used reg = )
16911 3E16           B8                   03DA  mov	ax,#$3DA
16912 3E19           50                         push	ax
16913                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16914 3E1A           E8         3FA5            call	_inb
16915 3E1D           44                         inc	sp
16916 3E1E           44                         inc	sp
16917                                           !BCC_EOS
16918                                           ! 2040  for(i=0;i<=0x13;i++)
16919                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16920 3E1F           31C0                       xor	ax,ax
16921 3E21           8946         F6            mov	-$A[bp],ax
16922                                           !BCC_EOS
16923                                           !BCC_EOS
16924                                           ! 2041   {outb(0x3c0,i);
16925 3E24           EB           38            jmp .76
16926                       00003E26            .77:
16927                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16928 3E26           FF76         F6            push	-$A[bp]
16929                                           ! Debug: list int = const $3C0 (used reg = )
16930 3E29           B8                   03C0  mov	ax,#$3C0
16931 3E2C           50                         push	ax
16932                                           ! Debug: func () void = outb+0 (used reg = )
16933 3E2D           E8         3FA8            call	_outb
16934 3E30           83C4                   04  add	sp,*4
16935                                           !BCC_EOS
16936                                           ! 2042    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16937                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16938 3E33           8A46         F9            mov	al,-7[bp]
16939 3E36           30E4                       xor	ah,ah
16940 3E38           B1                     06  mov	cl,*6
16941 3E3A           D3E0                       shl	ax,cl
16942 3E3C           89C3                       mov	bx,ax
16943 3E3E           81C3                 0298  add	bx,#_video_param_table
16944                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16945 3E42           8B46         F6            mov	ax,-$A[bp]
16946 3E45           01C3                       add	bx,ax
16947                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16948 3E47           8A47         23            mov	al,$23[bx]
16949 3E4A           30E4                       xor	ah,ah
16950 3E4C           50                         push	ax
16951                                           ! Debug: list int = const $3C0 (used reg = )
16952 3E4D           B8                   03C0  mov	ax,#$3C0
16953 3E50           50                         push	ax
16954                                           ! Debug: func () void = outb+0 (used reg = )
16955 3E51           E8         3F84            call	_outb
16956 3E54           83C4                   04  add	sp,*4
16957                                           !BCC_EOS
16958                                           ! 2043   }
16959                                           ! 2044  outb(0x3c0,0x14);
16960                       00003E57            .75:
16961                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16962 3E57           8B46         F6            mov	ax,-$A[bp]
16963 3E5A           40                         inc	ax
16964 3E5B           8946         F6            mov	-$A[bp],ax
16965                       00003E5E            .76:
16966                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16967 3E5E           8B46         F6            mov	ax,-$A[bp]
16968 3E61           3D                   0013  cmp	ax,*$13
16969 3E64           76           C0            jbe	.77
16970                       00003E66            .78:
16971                       00003E66            .74:
16972                                           ! Debug: list int = const $14 (used reg = )
16973 3E66           B8                   0014  mov	ax,*$14
16974 3E69           50                         push	ax
16975                                           ! Debug: list int = const $3C0 (used reg = )
16976 3E6A           B8                   03C0  mov	ax,#$3C0
16977 3E6D           50                         push	ax
16978                                           ! Debug: func () void = outb+0 (used reg = )
16979 3E6E           E8         3F67            call	_outb
16980 3E71           83C4                   04  add	sp,*4
16981                                           !BCC_EOS
16982                                           ! 2045  outb(0x3c0,0x00);
16983                                           ! Debug: list int = const 0 (used reg = )
16984 3E74           31C0                       xor	ax,ax
16985 3E76           50                         push	ax
16986                                           ! Debug: list int = const $3C0 (used reg = )
16987 3E77           B8                   03C0  mov	ax,#$3C0
16988 3E7A           50                         push	ax
16989                                           ! Debug: func () void = outb+0 (used reg = )
16990 3E7B           E8         3F5A            call	_outb
16991 3E7E           83C4                   04  add	sp,*4
16992                                           !BCC_EOS
16993                                           ! 2046  outb(0x3c4,0);
16994                                           ! Debug: list int = const 0 (used reg = )
16995 3E81           31C0                       xor	ax,ax
16996 3E83           50                         push	ax
16997                                           ! Debug: list int = const $3C4 (used reg = )
16998 3E84           B8                   03C4  mov	ax,#$3C4
16999 3E87           50                         push	ax
17000                                           ! Debug: func () void = outb+0 (used reg = )
17001 3E88           E8         3F4D            call	_outb
17002 3E8B           83C4                   04  add	sp,*4
17003                                           !BCC_EOS
17004                                           ! 2047  outb(0x3c5,0x03);
17005                                           ! Debug: list int = const 3 (used reg = )
17006 3E8E           B8                   0003  mov	ax,*3
17007 3E91           50                         push	ax
17008                                           ! Debug: list int = const $3C5 (used reg = )
17009 3E92           B8                   03C5  mov	ax,#$3C5
17010 3E95           50                         push	ax
17011                                           ! Debug: func () void = outb+0 (used reg = )
17012 3E96           E8         3F3F            call	_outb
17013 3E99           83C4                   04  add	sp,*4
17014                                           !BCC_EOS
17015                                           ! 2048  for(i=1;i<=4;i++)
17016                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
17017 3E9C           B8                   0001  mov	ax,*1
17018 3E9F           8946         F6            mov	-$A[bp],ax
17019                                           !BCC_EOS
17020                                           !BCC_EOS
17021                                           ! 2049   {outb(0x3c4,i);
17022 3EA2           EB           3F            jmp .7B
17023                       00003EA4            .7C:
17024                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17025 3EA4           FF76         F6            push	-$A[bp]
17026                                           ! Debug: list int = const $3C4 (used reg = )
17027 3EA7           B8                   03C4  mov	ax,#$3C4
17028 3EAA           50                         push	ax
17029                                           ! Debug: func () void = outb+0 (used reg = )
17030 3EAB           E8         3F2A            call	_outb
17031 3EAE           83C4                   04  add	sp,*4
17032                                           !BCC_EOS
17033                                           ! 2050    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
17034                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
17035 3EB1           8B46         F6            mov	ax,-$A[bp]
17036 3EB4           48                         dec	ax
17037 3EB5           50                         push	ax
17038                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
17039 3EB6           8A46         F9            mov	al,-7[bp]
17040 3EB9           30E4                       xor	ah,ah
17041 3EBB           B1                     06  mov	cl,*6
17042 3EBD           D3E0                       shl	ax,cl
17043 3EBF           89C3                       mov	bx,ax
17044 3EC1           81C3                 0298  add	bx,#_video_param_table
17045                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
17046 3EC5           8B46         E8            mov	ax,-$18[bp]
17047 3EC8           01C3                       add	bx,ax
17048 3ECA           44                         inc	sp
17049 3ECB           44                         inc	sp
17050                                           ! Debug: list unsigned char = [bx+5] (used reg = )
17051 3ECC           8A47         05            mov	al,5[bx]
17052 3ECF           30E4                       xor	ah,ah
17053 3ED1           50                         push	ax
17054                                           ! Debug: list int = const $3C5 (used reg = )
17055 3ED2           B8                   03C5  mov	ax,#$3C5
17056 3ED5           50                         push	ax
17057                                           ! Debug: func () void = outb+0 (used reg = )
17058 3ED6           E8         3EFF            call	_outb
17059 3ED9           83C4                   04  add	sp,*4
17060                                           !BCC_EOS
17061                                           ! 2051   }
17062                                           ! 2052  for(i=0;i<=8;i++)
17063                       00003EDC            .7A:
17064                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17065 3EDC           8B46         F6            mov	ax,-$A[bp]
17066 3EDF           40                         inc	ax
17067 3EE0           8946         F6            mov	-$A[bp],ax
17068                       00003EE3            .7B:
17069                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
17070 3EE3           8B46         F6            mov	ax,-$A[bp]
17071 3EE6           3D                   0004  cmp	ax,*4
17072 3EE9           76           B9            jbe	.7C
17073                       00003EEB            .7D:
17074                       00003EEB            .79:
17075                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17076 3EEB           31C0                       xor	ax,ax
17077 3EED           8946         F6            mov	-$A[bp],ax
17078                                           !BCC_EOS
17079                                           !BCC_EOS
17080                                           ! 2053   {outb(0x3ce,i);
17081 3EF0           EB           38            jmp .80
17082                       00003EF2            .81:
17083                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17084 3EF2           FF76         F6            push	-$A[bp]
17085                                           ! Debug: list int = const $3CE (used reg = )
17086 3EF5           B8                   03CE  mov	ax,#$3CE
17087 3EF8           50                         push	ax
17088                                           ! Debug: func () void = outb+0 (used reg = )
17089 3EF9           E8         3EDC            call	_outb
17090 3EFC           83C4                   04  add	sp,*4
17091                                           !BCC_EOS
17092                                           ! 2054    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
17093                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17094 3EFF           8A46         F9            mov	al,-7[bp]
17095 3F02           30E4                       xor	ah,ah
17096 3F04           B1                     06  mov	cl,*6
17097 3F06           D3E0                       shl	ax,cl
17098 3F08           89C3                       mov	bx,ax
17099 3F0A           81C3                 0298  add	bx,#_video_param_table
17100                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
17101 3F0E           8B46         F6            mov	ax,-$A[bp]
17102 3F11           01C3                       add	bx,ax
17103                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
17104 3F13           8A47         37            mov	al,$37[bx]
17105 3F16           30E4                       xor	ah,ah
17106 3F18           50                         push	ax
17107                                           ! Debug: list int = const $3CF (used reg = )
17108 3F19           B8                   03CF  mov	ax,#$3CF
17109 3F1C           50                         push	ax
17110                                           ! Debug: func () void = outb+0 (used reg = )
17111 3F1D           E8         3EB8            call	_outb
17112 3F20           83C4                   04  add	sp,*4
17113                                           !BCC_EOS
17114                                           ! 2055   }
17115                                           ! 2056  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17116                       00003F23            .7F:
17117                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17118 3F23           8B46         F6            mov	ax,-$A[bp]
17119 3F26           40                         inc	ax
17120 3F27           8946         F6            mov	-$A[bp],ax
17121                       00003F2A            .80:
17122                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17123 3F2A           8B46         F6            mov	ax,-$A[bp]
17124 3F2D           3D                   0008  cmp	ax,*8
17125 3F30           76           C0            jbe	.81
17126                       00003F32            .82:
17127                       00003F32            .7E:
17128                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17129 3F32           8A46         FE            mov	al,-2[bp]
17130 3F35           30E4                       xor	ah,ah
17131 3F37           B1                     03  mov	cl,*3
17132 3F39           D3E0                       shl	ax,cl
17133 3F3B           89C3                       mov	bx,ax
17134 3F3D           81C3                 0204  add	bx,#_vga_modes
17135                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17136 3F41           8A47         02            mov	al,2[bx]
17137 3F44           3C                     01  cmp	al,*1
17138 3F46           75           05            jne 	.83
17139                       00003F48            .84:
17140 3F48           B8                   03B4  mov	ax,#$3B4
17141 3F4B           EB           03            jmp .85
17142                       00003F4D            .83:
17143 3F4D           B8                   03D4  mov	ax,#$3D4
17144                       00003F50            .85:
17145                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17146 3F50           8946         EA            mov	-$16[bp],ax
17147                                           !BCC_EOS
17148                                           ! 2057  outw(crtc_addr,0x0011);
17149                                           ! Debug: list int = const $11 (used reg = )
17150 3F53           B8                   0011  mov	ax,*$11
17151 3F56           50                         push	ax
17152                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17153 3F57           FF76         EA            push	-$16[bp]
17154                                           ! Debug: func () void = outw+0 (used reg = )
17155 3F5A           E8         3E8B            call	_outw
17156 3F5D           83C4                   04  add	sp,*4
17157                                           !BCC_EOS
17158                                           ! 2058  for(i=0;i<=0x18;i++)
17159                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17160 3F60           31C0                       xor	ax,ax
17161 3F62           8946         F6            mov	-$A[bp],ax
17162                                           !BCC_EOS
17163                                           !BCC_EOS
17164                                           ! 2059   {outb(crtc_addr,i);
17165 3F65           EB           38            jmp .88
17166                       00003F67            .89:
17167                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17168 3F67           FF76         F6            push	-$A[bp]
17169                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17170 3F6A           FF76         EA            push	-$16[bp]
17171                                           ! Debug: func () void = outb+0 (used reg = )
17172 3F6D           E8         3E68            call	_outb
17173 3F70           83C4                   04  add	sp,*4
17174                                           !BCC_EOS
17175                                           ! 2060    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17176                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17177 3F73           8A46         F9            mov	al,-7[bp]
17178 3F76           30E4                       xor	ah,ah
17179 3F78           B1                     06  mov	cl,*6
17180 3F7A           D3E0                       shl	ax,cl
17181 3F7C           89C3                       mov	bx,ax
17182 3F7E           81C3                 0298  add	bx,#_video_param_table
17183                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17184 3F82           8B46         F6            mov	ax,-$A[bp]
17185 3F85           01C3                       add	bx,ax
17186                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17187 3F87           8A47         0A            mov	al,$A[bx]
17188 3F8A           30E4                       xor	ah,ah
17189 3F8C           50                         push	ax
17190                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17191 3F8D           8B46         EA            mov	ax,-$16[bp]
17192                                           ! Debug: list unsigned int = ax+1 (used reg = )
17193 3F90           40                         inc	ax
17194 3F91           50                         push	ax
17195                                           ! Debug: func () void = outb+0 (used reg = )
17196 3F92           E8         3E43            call	_outb
17197 3F95           83C4                   04  add	sp,*4
17198                                           !BCC_EOS
17199                                           ! 2061   }
17200                                           ! 2062  outb(0x
17201                       00003F98            .87:
17202                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17203 3F98           8B46         F6            mov	ax,-$A[bp]
17204 3F9B           40                         inc	ax
17205 3F9C           8946         F6            mov	-$A[bp],ax
17206                       00003F9F            .88:
17207                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17208 3F9F           8B46         F6            mov	ax,-$A[bp]
17209 3FA2           3D                   0018  cmp	ax,*$18
17210 3FA5           76           C0            jbe	.89
17211                       00003FA7            .8A:
17212                       00003FA7            .86:
17213                                           ! 2062 3c2,video_param_table[vpti].miscreg);
17214                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17215 3FA7           8A46         F9            mov	al,-7[bp]
17216 3FAA           30E4                       xor	ah,ah
17217 3FAC           B1                     06  mov	cl,*6
17218 3FAE           D3E0                       shl	ax,cl
17219 3FB0           89C3                       mov	bx,ax
17220 3FB2           81C3                 0298  add	bx,#_video_param_table
17221                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17222 3FB6           8A47         09            mov	al,9[bx]
17223 3FB9           30E4                       xor	ah,ah
17224 3FBB           50                         push	ax
17225                                           ! Debug: list int = const $3C2 (used reg = )
17226 3FBC           B8                   03C2  mov	ax,#$3C2
17227 3FBF           50                         push	ax
17228                                           ! Debug: func () void = outb+0 (used reg = )
17229 3FC0           E8         3E15            call	_outb
17230 3FC3           83C4                   04  add	sp,*4
17231                                           !BCC_EOS
17232                                           ! 2063  outb(0x3c0,0x20);
17233                                           ! Debug: list int = const $20 (used reg = )
17234 3FC6           B8                   0020  mov	ax,*$20
17235 3FC9           50                         push	ax
17236                                           ! Debug: list int = const $3C0 (used reg = )
17237 3FCA           B8                   03C0  mov	ax,#$3C0
17238 3FCD           50                         push	ax
17239                                           ! Debug: func () void = outb+0 (used reg = )
17240 3FCE           E8         3E07            call	_outb
17241 3FD1           83C4                   04  add	sp,*4
17242                                           !BCC_EOS
17243                                           ! 2064  inb(0x3da);
17244                                           ! Debug: list int = const $3DA (used reg = )
17245 3FD4           B8                   03DA  mov	ax,#$3DA
17246 3FD7           50                         push	ax
17247                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17248 3FD8           E8         3DE7            call	_inb
17249 3FDB           44                         inc	sp
17250 3FDC           44                         inc	sp
17251                                           !BCC_EOS
17252                                           ! 2065  if(noclearmem==0x00)
17253                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17254 3FDD           8A46         FF            mov	al,-1[bp]
17255 3FE0           84C0                       test	al,al
17256 3FE2         0F85         00C1            bne 	.8B
17257                       00003FE6            .8C:
17258                                           ! 2066   {
17259                                           ! 2067    if(vga_modes[line].class==0x00)
17260                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17261 3FE6           8A46         FE            mov	al,-2[bp]
17262 3FE9           30E4                       xor	ah,ah
17263 3FEB           B1                     03  mov	cl,*3
17264 3FED           D3E0                       shl	ax,cl
17265 3FEF           89C3                       mov	bx,ax
17266 3FF1           81C3                 0204  add	bx,#_vga_modes
17267                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17268 3FF5           8A47         01            mov	al,1[bx]
17269 3FF8           84C0                       test	al,al
17270 3FFA           75           26            jne 	.8D
17271                       00003FFC            .8E:
17272                                           ! 2068     {
17273                                           ! 2069      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17274                                           ! Debug: list int = const $4000 (used reg = )
17275 3FFC           B8                   4000  mov	ax,#$4000
17276 3FFF           50                         push	ax
17277                                           ! Debug: list int = const $720 (used reg = )
17278 4000           B8                   0720  mov	ax,#$720
17279 4003           50                         push	ax
17280                                           ! Debug: list int = const 0 (used reg = )
17281 4004           31C0                       xor	ax,ax
17282 4006           50                         push	ax
17283                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17284 4007           8A46         FE            mov	al,-2[bp]
17285 400A           30E4                       xor	ah,ah
17286 400C           B1                     03  mov	cl,*3
17287 400E           D3E0                       shl	ax,cl
17288 4010           89C3                       mov	bx,ax
17289 4012           81C3                 0204  add	bx,#_vga_modes
17290                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17291 4016           FF77         04            push	4[bx]
17292                                           ! Debug: func () void = memsetw+0 (used reg = )
17293 4019           E8         3CCB            call	_memsetw
17294 401C           83C4                   08  add	sp,*8
17295                                           !BCC_EOS
17296                                           ! 2070     }
17297                                           ! 2071    else
17298                                           ! 2072     {
17299 401F           E9         0085            br 	.8F
17300                       00004022            .8D:
17301                                           ! 2073      if(mode<0x0d)
17302                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17303 4022           8A46         04            mov	al,4[bp]
17304 4025           3C                     0D  cmp	al,*$D
17305 4027           73           24            jae 	.90
17306                       00004029            .91:
17307                                           ! 2074       {
17308                                           ! 2075        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17309                                           ! Debug: list int = const $4000 (used reg = )
17310 4029           B8                   4000  mov	ax,#$4000
17311 402C           50                         push	ax
17312                                           ! Debug: list int = const 0 (used reg = )
17313 402D           31C0                       xor	ax,ax
17314 402F           50                         push	ax
17315                                           ! Debug: list int = const 0 (used reg = )
17316 4030           31C0                       xor	ax,ax
17317 4032           50                         push	ax
17318                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17319 4033           8A46         FE            mov	al,-2[bp]
17320 4036           30E4                       xor	ah,ah
17321 4038           B1                     03  mov	cl,*3
17322 403A           D3E0                       shl	ax,cl
17323 403C           89C3                       mov	bx,ax
17324 403E           81C3                 0204  add	bx,#_vga_modes
17325                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17326 4042           FF77         04            push	4[bx]
17327                                           ! Debug: func () void = memsetw+0 (used reg = )
17328 4045           E8         3C9F            call	_memsetw
17329 4048           83C4                   08  add	sp,*8
17330                                           !BCC_EOS
17331                                           ! 2076       }
17332                                           ! 2077      else
17333                                           ! 2078       {
17334 404B           EB           5A            jmp .92
17335                       0000404D            .90:
17336                                           ! 2079        outb( 0x3c4, 0x02 );
17337                                           ! Debug: list int = const 2 (used reg = )
17338 404D           B8                   0002  mov	ax,*2
17339 4050           50                         push	ax
17340                                           ! Debug: list int = const $3C4 (used reg = )
17341 4051           B8                   03C4  mov	ax,#$3C4
17342 4054           50                         push	ax
17343                                           ! Debug: func () void = outb+0 (used reg = )
17344 4055           E8         3D80            call	_outb
17345 4058           83C4                   04  add	sp,*4
17346                                           !BCC_EOS
17347                                           ! 2080        mmask = inb( 0x3c5 );
17348                                           ! Debug: list int = const $3C5 (used reg = )
17349 405B           B8                   03C5  mov	ax,#$3C5
17350 405E           50                         push	ax
17351                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17352 405F           E8         3D60            call	_inb
17353 4062           44                         inc	sp
17354 4063           44                         inc	sp
17355                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17356 4064           8846         FD            mov	-3[bp],al
17357                                           !BCC_EOS
17358                                           ! 2081        outb( 0x3c5, 0x0f );
17359                                           ! Debug: list int = const $F (used reg = )
17360 4067           B8                   000F  mov	ax,*$F
17361 406A           50                         push	ax
17362                                           ! Debug: list int = const $3C5 (used reg = )
17363 406B           B8                   03C5  mov	ax,#$3C5
17364 406E           50                         push	ax
17365                                           ! Debug: func () void = outb+0 (used reg = )
17366 406F           E8         3D66            call	_outb
17367 4072           83C4                   04  add	sp,*4
17368                                           !BCC_EOS
17369                                           ! 2082        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17370                                           ! Debug: list unsigned int = const $8000 (used reg = )
17371 4075           B8                   8000  mov	ax,#$8000
17372 4078           50                         push	ax
17373                                           ! Debug: list int = const 0 (used reg = )
17374 4079           31C0                       xor	ax,ax
17375 407B           50                         push	ax
17376                                           ! Debug: list int = const 0 (used reg = )
17377 407C           31C0                       xor	ax,ax
17378 407E           50                         push	ax
17379                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17380 407F           8A46         FE            mov	al,-2[bp]
17381 4082           30E4                       xor	ah,ah
17382 4084           B1                     03  mov	cl,*3
17383 4086           D3E0                       shl	ax,cl
17384 4088           89C3                       mov	bx,ax
17385 408A           81C3                 0204  add	bx,#_vga_modes
17386                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17387 408E           FF77         04            push	4[bx]
17388                                           ! Debug: func () void = memsetw+0 (used reg = )
17389 4091           E8         3C53            call	_memsetw
17390 4094           83C4                   08  add	sp,*8
17391                                           !BCC_EOS
17392                                           ! 2083        outb( 0x3c5, mmask );
17393                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17394 4097           8A46         FD            mov	al,-3[bp]
17395 409A           30E4                       xor	ah,ah
17396 409C           50                         push	ax
17397                                           ! Debug: list int = const $3C5 (used reg = )
17398 409D           B8                   03C5  mov	ax,#$3C5
17399 40A0           50                         push	ax
17400                                           ! Debug: func () void = outb+0 (used reg = )
17401 40A1           E8         3D34            call	_outb
17402 40A4           83C4                   04  add	sp,*4
17403                                           !BCC_EOS
17404                                           ! 2084       }
17405                                           ! 2085     }
17406                       000040A7            .92:
17407                                           ! 2086   }
17408                       000040A7            .8F:
17409                                           ! 2087  write_byte(0x40,0x49,mode);
17410                       000040A7            .8B:
17411                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17412 40A7           8A46         04            mov	al,4[bp]
17413 40AA           30E4                       xor	ah,ah
17414 40AC           50                         push	ax
17415                                           ! Debug: list int = const $49 (used reg = )
17416 40AD           B8                   0049  mov	ax,*$49
17417 40B0           50                         push	ax
17418                                           ! Debug: list int = const $40 (used reg = )
17419 40B1           B8                   0040  mov	ax,*$40
17420 40B4           50                         push	ax
17421                                           ! Debug: func () void = write_byte+0 (used reg = )
17422 40B5           E8         3CDA            call	_write_byte
17423 40B8           83C4                   06  add	sp,*6
17424                                           !BCC_EOS
17425                                           ! 2088  write_word(0x40,0x4A,twidth);
17426                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17427 40BB           FF76         F4            push	-$C[bp]
17428                                           ! Debug: list int = const $4A (used reg = )
17429 40BE           B8                   004A  mov	ax,*$4A
17430 40C1           50                         push	ax
17431                                           ! Debug: list int = const $40 (used reg = )
17432 40C2           B8                   0040  mov	ax,*$40
17433 40C5           50                         push	ax
17434                                           ! Debug: func () void = write_word+0 (used reg = )
17435 40C6           E8         3CE1            call	_write_word
17436 40C9           83C4                   06  add	sp,*6
17437                                           !BCC_EOS
17438                                           ! 2089  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17439                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17440 40CC           8A46         F9            mov	al,-7[bp]
17441 40CF           30E4                       xor	ah,ah
17442 40D1           B1                     06  mov	cl,*6
17443 40D3           D3E0                       shl	ax,cl
17444 40D5           89C3                       mov	bx,ax
17445 40D7           81C3                 0298  add	bx,#_video_param_table
17446                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17447                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17448                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17449 40DB           FF77         03            push	3[bx]
17450                                           ! Debug: list int = const $4C (used reg = )
17451 40DE           B8                   004C  mov	ax,*$4C
17452 40E1           50                         push	ax
17453                                           ! Debug: list int = const $40 (used reg = )
17454 40E2           B8                   0040  mov	ax,*$40
17455 40E5           50                         push	ax
17456                                           ! Debug: func () void = write_word+0 (used reg = )
17457 40E6           E8         3CC1            call	_write_word
17458 40E9           83C4                   06  add	sp,*6
17459                                           !BCC_EOS
17460                                           ! 2090  write_word(0x40,0x63,crtc_addr);
17461                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17462 40EC           FF76         EA            push	-$16[bp]
17463                                           ! Debug: list int = const $63 (used reg = )
17464 40EF           B8                   0063  mov	ax,*$63
17465 40F2           50                         push	ax
17466                                           ! Debug: list int = const $40 (used reg = )
17467 40F3           B8                   0040  mov	ax,*$40
17468 40F6           50                         push	ax
17469                                           ! Debug: func () void = write_word+0 (used reg = )
17470 40F7           E8         3CB0            call	_write_word
17471 40FA           83C4                   06  add	sp,*6
17472                                           !BCC_EOS
17473                                           ! 2091  write_byte(0x40,0x84,theightm1);
17474                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17475 40FD           FF76         F2            push	-$E[bp]
17476                                           ! Debug: list int = const $84 (used reg = )
17477 4100           B8                   0084  mov	ax,#$84
17478 4103           50                         push	ax
17479                                           ! Debug: list int = const $40 (used reg = )
17480 4104           B8                   0040  mov	ax,*$40
17481 4107           50                         push	ax
17482                                           ! Debug: func () void = write_byte+0 (used reg = )
17483 4108           E8         3C87            call	_write_byte
17484 410B           83C4                   06  add	sp,*6
17485                                           !BCC_EOS
17486                                           ! 2092  write_word(0x40,0x85,cheight);
17487                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17488 410E           FF76         F0            push	-$10[bp]
17489                                           ! Debug: list int = const $85 (used reg = )
17490 4111           B8                   0085  mov	ax,#$85
17491 4114           50                         push	ax
17492                                           ! Debug: list int = const $40 (used reg = )
17493 4115           B8                   0040  mov	ax,*$40
17494 4118           50                         push	ax
17495                                           ! Debug: func () void = write_word+0 (used reg = )
17496 4119           E8         3C8E            call	_write_word
17497 411C           83C4                   06  add	sp,*6
17498                                           !BCC_EOS
17499                                           ! 2093  write_byte(0x40,0x87,(0x60|noclearmem));
17500                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17501                                           ! Debug: expression subtree swapping
17502 411F           8A46         FF            mov	al,-1[bp]
17503 4122           0C                     60  or	al,*$60
17504                                           ! Debug: list unsigned char = al+0 (used reg = )
17505 4124           30E4                       xor	ah,ah
17506 4126           50                         push	ax
17507                                           ! Debug: list int = const $87 (used reg = )
17508 4127           B8                   0087  mov	ax,#$87
17509 412A           50                         push	ax
17510                                           ! Debug: list int = const $40 (used reg = )
17511 412B           B8                   0040  mov	ax,*$40
17512 412E           50                         push	ax
17513                                           ! Debug: func () void = write_byte+0 (used reg = )
17514 412F           E8         3C60            call	_write_byte
17515 4132           83C4                   06  add	sp,*6
17516                                           !BCC_EOS
17517                                           ! 2094  write_byte(0x40,0x88,0xF9);
17518                                           ! Debug: list int = const $F9 (used reg = )
17519 4135           B8                   00F9  mov	ax,#$F9
17520 4138           50                         push	ax
17521                                           ! Debug: list int = const $88 (used reg = )
17522 4139           B8                   0088  mov	ax,#$88
17523 413C           50                         push	ax
17524                                           ! Debug: list int = const $40 (used reg = )
17525 413D           B8                   0040  mov	ax,*$40
17526 4140           50                         push	ax
17527                                           ! Debug: func () void = write_byte+0 (used reg = )
17528 4141           E8         3C4E            call	_write_byte
17529 4144           83C4                   06  add	sp,*6
17530                                           !BCC_EOS
17531                                           ! 2095  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17532                                           ! Debug: list int = const $89 (used reg = )
17533 4147           B8                   0089  mov	ax,#$89
17534 414A           50                         push	ax
17535                                           ! Debug: list int = const $40 (used reg = )
17536 414B           B8                   0040  mov	ax,*$40
17537 414E           50                         push	ax
17538                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17539 414F           E8         3C1A            call	_read_byte
17540 4152           83C4                   04  add	sp,*4
17541                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17542 4155           24                     7F  and	al,*$7F
17543                                           ! Debug: list unsigned char = al+0 (used reg = )
17544 4157           30E4                       xor	ah,ah
17545 4159           50                         push	ax
17546                                           ! Debug: list int = const $89 (used reg = )
17547 415A           B8                   0089  mov	ax,#$89
17548 415D           50                         push	ax
17549                                           ! Debug: list int = const $40 (used reg = )
17550 415E           B8                   0040  mov	ax,*$40
17551 4161           50                         push	ax
17552                                           ! Debug: func () void = write_byte+0 (used reg = )
17553 4162           E8         3C2D            call	_write_byte
17554 4165           83C4                   06  add	sp,*6
17555                                           !BCC_EOS
17556                                           ! 2096  write_byte(0x40,0x8A,0x08);
17557                                           ! Debug: list int = const 8 (used reg = )
17558 4168           B8                   0008  mov	ax,*8
17559 416B           50                         push	ax
17560                                           ! Debug: list int = const $8A (used reg = )
17561 416C           B8                   008A  mov	ax,#$8A
17562 416F           50                         push	ax
17563                                           ! Debug: list int = const $40 (used reg = )
17564 4170           B8                   0040  mov	ax,*$40
17565 4173           50                         push	ax
17566                                           ! Debug: func () void = write_byte+0 (used reg = )
17567 4174           E8         3C1B            call	_write_byte
17568 4177           83C4                   06  add	sp,*6
17569                                           !BCC_EOS
17570                                           ! 2097  write_word(0x40,0xA8, video_save_pointer_table);
17571                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17572 417A           BB                   3601  mov	bx,#_video_save_pointer_table
17573 417D           53                         push	bx
17574                                           ! Debug: list int = const $A8 (used reg = )
17575 417E           B8                   00A8  mov	ax,#$A8
17576 4181           50                         push	ax
17577                                           ! Debug: list int = const $40 (used reg = )
17578 4182           B8                   0040  mov	ax,*$40
17579 4185           50                         push	ax
17580                                           ! Debug: func () void = write_word+0 (used reg = )
17581 4186           E8         3C21            call	_write_word
17582 4189           83C4                   06  add	sp,*6
17583                                           !BCC_EOS
17584                                           ! 2098  write_word(0x40,0xA8 +2, 0xc000);
17585                                           ! Debug: list unsigned int = const $C000 (used reg = )
17586 418C           B8                   C000  mov	ax,#$C000
17587 418F           50                         push	ax
17588                                           ! Debug: list int = const $AA (used reg = )
17589 4190           B8                   00AA  mov	ax,#$AA
17590 4193           50                         push	ax
17591                                           ! Debug: list int = const $40 (used reg = )
17592 4194           B8                   0040  mov	ax,*$40
17593 4197           50                         push	ax
17594                                           ! Debug: func () void = write_word+0 (used reg = )
17595 4198           E8         3C0F            call	_write_word
17596 419B           83C4                   06  add	sp,*6
17597                                           !BCC_EOS
17598                                           ! 2099  write_byte(0x40,0x65,0x00);
17599                                           ! Debug: list int = const 0 (used reg = )
17600 419E           31C0                       xor	ax,ax
17601 41A0           50                         push	ax
17602                                           ! Debug: list int = const $65 (used reg = )
17603 41A1           B8                   0065  mov	ax,*$65
17604 41A4           50                         push	ax
17605                                           ! Debug: list int = const $40 (used reg = )
17606 41A5           B8                   0040  mov	ax,*$40
17607 41A8           50                         push	ax
17608                                           ! Debug: func () void = write_byte+0 (used reg = )
17609 41A9           E8         3BE6            call	_write_byte
17610 41AC           83C4                   06  add	sp,*6
17611                                           !BCC_EOS
17612                                           ! 2100  write_byte(0x40,0x66,0x00);
17613                                           ! Debug: list int = const 0 (used reg = )
17614 41AF           31C0                       xor	ax,ax
17615 41B1           50                         push	ax
17616                                           ! Debug: list int = const $66 (used reg = )
17617 41B2           B8                   0066  mov	ax,*$66
17618 41B5           50                         push	ax
17619                                           ! Debug: list int = const $40 (used reg = )
17620 41B6           B8                   0040  mov	ax,*$40
17621 41B9           50                         push	ax
17622                                           ! Debug: func () void = write_byte+0 (used reg = )
17623 41BA           E8         3BD5            call	_write_byte
17624 41BD           83C4                   06  add	sp,*6
17625                                           !BCC_EOS
17626                                           ! 2101  if(vga_modes[line].class==0x00)
17627                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17628 41C0           8A46         FE            mov	al,-2[bp]
17629 41C3           30E4                       xor	ah,ah
17630 41C5           B1                     03  mov	cl,*3
17631 41C7           D3E0                       shl	ax,cl
17632 41C9           89C3                       mov	bx,ax
17633 41CB           81C3                 0204  add	bx,#_vga_modes
17634                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17635 41CF           8A47         01            mov	al,1[bx]
17636 41D2           84C0                       test	al,al
17637 41D4           75           0E            jne 	.93
17638                       000041D6            .94:
17639                                           ! 2102   {
17640                                           ! 2103    biosfn_set_cursor_shape(0x06,0x07);
17641                                           ! Debug: list int = const 7 (used reg = )
17642 41D6           B8                   0007  mov	ax,*7
17643 41D9           50                         push	ax
17644                                           ! Debug: list int = const 6 (used reg = )
17645 41DA           B8                   0006  mov	ax,*6
17646 41DD           50                         push	ax
17647                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17648 41DE           E8         00BA            call	_biosfn_set_cursor_shape
17649 41E1           83C4                   04  add	sp,*4
17650                                           !BCC_EOS
17651                                           ! 2104   }
17652                                           ! 2105  for(i=0;i<8;i++)
17653                       000041E4            .93:
17654                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17655 41E4           31C0                       xor	ax,ax
17656 41E6           8946         F6            mov	-$A[bp],ax
17657                                           !BCC_EOS
17658                                           !BCC_EOS
17659                                           ! 2106   biosfn_set_cursor_pos(i,0x0000);
17660 41E9           EB           13            jmp .97
17661                       000041EB            .98:
17662                                           ! Debug: list int = const 0 (used reg = )
17663 41EB           31C0                       xor	ax,ax
17664 41ED           50                         push	ax
17665                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17666 41EE           FF76         F6            push	-$A[bp]
17667                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17668 41F1           E8         01C2            call	_biosfn_set_cursor_pos
17669 41F4           83C4                   04  add	sp,*4
17670                                           !BCC_EOS
17671                                           ! 2107  biosfn_set_active_page(0x00);
17672                       000041F7            .96:
17673                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17674 41F7           8B46         F6            mov	ax,-$A[bp]
17675 41FA           40                         inc	ax
17676 41FB           8946         F6            mov	-$A[bp],ax
17677                       000041FE            .97:
17678                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17679 41FE           8B46         F6            mov	ax,-$A[bp]
17680 4201           3D                   0008  cmp	ax,*8
17681 4204           72           E5            jb 	.98
17682                       00004206            .99:
17683                       00004206            .95:
17684                                           ! Debug: list int = const 0 (used reg = )
17685 4206           31C0                       xor	ax,ax
17686 4208           50                         push	ax
17687                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17688 4209           E8         031F            call	_biosfn_set_active_page
17689 420C           44                         inc	sp
17690 420D           44                         inc	sp
17691                                           !BCC_EOS
17692                                           ! 2108  if(vga_modes[line].class==0x00)
17693                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17694 420E           8A46         FE            mov	al,-2[bp]
17695 4211           30E4                       xor	ah,ah
17696 4213           B1                     03  mov	cl,*3
17697 4215           D3E0                       shl	ax,cl
17698 4217           89C3                       mov	bx,ax
17699 4219           81C3                 0204  add	bx,#_vga_modes
17700                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17701 421D           8A47         01            mov	al,1[bx]
17702 4220           84C0                       test	al,al
17703 4222           75           0E            jne 	.9A
17704                       00004224            .9B:
17705                                           ! 2109   {
17706                                           ! 2110 #asm
17707                                           !BCC_EOS
17708                                           !BCC_ASM
17709                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17710                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17711                       00000008            _biosfn_set_video_mode.theightm1	set	8
17712                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17713                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17714                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17715                       00000014            _biosfn_set_video_mode.line	set	$14
17716                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17717                       00000006            _biosfn_set_video_mode.cheight	set	6
17718                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17719                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17720                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17721                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17722                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17723                       0000000C            _biosfn_set_video_mode.i	set	$C
17724                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17725                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17726                       00000004            .biosfn_set_video_mode.mode	set	4
17727                       00000010            _biosfn_set_video_mode.palette	set	$10
17728                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17729                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17730                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17731                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17732                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17733                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17734                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17735                       00000013            _biosfn_set_video_mode.mmask	set	$13
17736                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17737                                             ;; copy and activate 8x16 font
17738 4224           B8                   1104    mov ax, #0x1104
17739 4227           B3                     00    mov bl, #0x00
17740 4229           CD                     10    int #0x10
17741 422B           B8                   1103    mov ax, #0x1103
17742 422E           B3                     00    mov bl, #0x00
17743 4230           CD                     10    int #0x10
17744                                           ! 2118 endasm
17745                                           !BCC_ENDASM
17746                                           !BCC_EOS
17747                                           ! 2119   }
17748                                           ! 2120 #asm
17749                       00004232            .9A:
17750                                           !BCC_EOS
17751                                           !BCC_ASM
17752                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17753                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17754                       00000008            _biosfn_set_video_mode.theightm1	set	8
17755                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17756                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17757                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17758                       00000014            _biosfn_set_video_mode.line	set	$14
17759                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17760                       00000006            _biosfn_set_video_mode.cheight	set	6
17761                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17762                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17763                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17764                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17765                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17766                       0000000C            _biosfn_set_video_mode.i	set	$C
17767                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17768                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17769                       00000004            .biosfn_set_video_mode.mode	set	4
17770                       00000010            _biosfn_set_video_mode.palette	set	$10
17771                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17772                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17773                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17774                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17775                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17776                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17777                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17778                       00000013            _biosfn_set_video_mode.mmask	set	$13
17779                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17780                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   4232           1E                           push ds
 +a   4233           31C0                         xor ax, ax
 +a   4235           8ED8                         mov ds, ax
 +a   4237           B8                   1368    mov ax,  #_vgafont8+128*8
 +a   423A           A3         007C              mov 0x1f*4, ax
 +a   423D           B8                   C000    mov ax,  #0xC000
 +a   4240           A3         007E              mov 0x1f*4+2, ax
 +a   4243           1F                           pop ds
17781                                           ! 2122 endasm
17782                                           !BCC_ENDASM
17783                                           !BCC_EOS
17784                                           ! 2123   switch(cheight)
17785 4244           8B46         F0            mov	ax,-$10[bp]
17786                                           ! 2124    {case 8:
17787 4247           E9         003E            br 	.9E
17788                                           ! 2125 #asm
17789                       0000424A            .9F:
17790                                           !BCC_EOS
17791                                           !BCC_ASM
17792                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17793                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17794                       00000008            _biosfn_set_video_mode.theightm1	set	8
17795                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17796                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17797                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17798                       00000014            _biosfn_set_video_mode.line	set	$14
17799                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17800                       00000006            _biosfn_set_video_mode.cheight	set	6
17801                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17802                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17803                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17804                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17805                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17806                       0000000C            _biosfn_set_video_mode.i	set	$C
17807                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17808                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17809                       00000004            .biosfn_set_video_mode.mode	set	4
17810                       00000010            _biosfn_set_video_mode.palette	set	$10
17811                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17812                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17813                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17814                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17815                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17816                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17817                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17818                       00000013            _biosfn_set_video_mode.mmask	set	$13
17819                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17820                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   424A           1E                           push ds
 +a   424B           31C0                         xor ax, ax
 +a   424D           8ED8                         mov ds, ax
 +a   424F           B8                   0F68    mov ax,  #_vgafont8
 +a   4252           A3         010C              mov 0x43*4, ax
 +a   4255           B8                   C000    mov ax,  #0xC000
 +a   4258           A3         010E              mov 0x43*4+2, ax
 +a   425B           1F                           pop ds
17821                                           ! 2127 endasm
17822                                           !BCC_ENDASM
17823                                           !BCC_EOS
17824                                           ! 2128      break;
17825 425C           EB           39            jmp .9C
17826                                           !BCC_EOS
17827                                           ! 2129     case 14:
17828                                           ! 2130 #asm
17829                       0000425E            .A0:
17830                                           !BCC_EOS
17831                                           !BCC_ASM
17832                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17833                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17834                       00000008            _biosfn_set_video_mode.theightm1	set	8
17835                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17836                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17837                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17838                       00000014            _biosfn_set_video_mode.line	set	$14
17839                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17840                       00000006            _biosfn_set_video_mode.cheight	set	6
17841                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17842                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17843                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17844                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17845                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17846                       0000000C            _biosfn_set_video_mode.i	set	$C
17847                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17848                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17849                       00000004            .biosfn_set_video_mode.mode	set	4
17850                       00000010            _biosfn_set_video_mode.palette	set	$10
17851                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17852                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17853                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17854                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17855                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17856                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17857                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17858                       00000013            _biosfn_set_video_mode.mmask	set	$13
17859                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17860                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   425E           1E                           push ds
 +a   425F           31C0                         xor ax, ax
 +a   4261           8ED8                         mov ds, ax
 +a   4263           B8                   1768    mov ax,  #_vgafont14
 +a   4266           A3         010C              mov 0x43*4, ax
 +a   4269           B8                   C000    mov ax,  #0xC000
 +a   426C           A3         010E              mov 0x43*4+2, ax
 +a   426F           1F                           pop ds
17861                                           ! 2132 endasm
17862                                           !BCC_ENDASM
17863                                           !BCC_EOS
17864                                           ! 2133      break;
17865 4270           EB           25            jmp .9C
17866                                           !BCC_EOS
17867                                           ! 2134     case 16:
17868                                           ! 2135 #asm
17869                       00004272            .A1:
17870                                           !BCC_EOS
17871                                           !BCC_ASM
17872                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17873                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17874                       00000008            _biosfn_set_video_mode.theightm1	set	8
17875                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17876                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17877                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17878                       00000014            _biosfn_set_video_mode.line	set	$14
17879                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17880                       00000006            _biosfn_set_video_mode.cheight	set	6
17881                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17882                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17883                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17884                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17885                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17886                       0000000C            _biosfn_set_video_mode.i	set	$C
17887                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17888                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17889                       00000004            .biosfn_set_video_mode.mode	set	4
17890                       00000010            _biosfn_set_video_mode.palette	set	$10
17891                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17892                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17893                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17894                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17895                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17896                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17897                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17898                       00000013            _biosfn_set_video_mode.mmask	set	$13
17899                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17900                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4272           1E                           push ds
 +a   4273           31C0                         xor ax, ax
 +a   4275           8ED8                         mov ds, ax
 +a   4277           B8                   2568    mov ax,  #_vgafont16
 +a   427A           A3         010C              mov 0x43*4, ax
 +a   427D           B8                   C000    mov ax,  #0xC000
 +a   4280           A3         010E              mov 0x43*4+2, ax
 +a   4283           1F                           pop ds
17901                                           ! 2137 endasm
17902                                           !BCC_ENDASM
17903                                           !BCC_EOS
17904                                           ! 2138      break;
17905 4284           EB           11            jmp .9C
17906                                           !BCC_EOS
17907                                           ! 2139    }
17908                                           ! 2140 }
17909 4286           EB           0F            jmp .9C
17910                       00004288            .9E:
17911 4288           2D                   0008  sub	ax,*8
17912 428B           74           BD            je 	.9F
17913 428D           2D                   0006  sub	ax,*6
17914 4290           74           CC            je 	.A0
17915 4292           2D                   0002  sub	ax,*2
17916 4295           74           DB            je 	.A1
17917                       00004297            .9C:
17918                       FFFFFFE8            ..FFFD	=	-$18
17919 4297           89EC                       mov	sp,bp
17920 4299           5D                         pop	bp
17921 429A           C3                         ret
17922                                           ! 2141 static void biosfn_set_cursor_shape (CH,CL)
17923                                           ! Register BX used in function biosfn_set_video_mode
17924                                           ! 2142 Bit8u CH;Bit8u CL;
17925                       0000429B            _biosfn_set_cursor_shape:
17926                                           !BCC_EOS
17927                                           !BCC_EOS
17928                                           ! 2143 {Bit16u cheight,curs,crtc_addr;
17929                                           !BCC_EOS
17930                                           ! 2144  Bit8u modeset_ctl;
17931                                           !BCC_EOS
17932                                           ! 2145  CH&=0x3f;
17933 429B           55                         push	bp
17934 429C           89E5                       mov	bp,sp
17935 429E           83C4                   F8  add	sp,*-8
17936                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17937 42A1           8A46         04            mov	al,4[bp]
17938 42A4           24                     3F  and	al,*$3F
17939 42A6           8846         04            mov	4[bp],al
17940                                           !BCC_EOS
17941                                           ! 2146  CL&=0x1f;
17942                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17943 42A9           8A46         06            mov	al,6[bp]
17944 42AC           24                     1F  and	al,*$1F
17945 42AE           8846         06            mov	6[bp],al
17946                                           !BCC_EOS
17947                                           ! 2147  curs=(CH<<8)+CL;
17948                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17949 42B1           8A46         04            mov	al,4[bp]
17950 42B4           30E4                       xor	ah,ah
17951 42B6           88C4                       mov	ah,al
17952 42B8           30C0                       xor	al,al
17953                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17954 42BA           0246         06            add	al,6[bp]
17955 42BD           80D4                   00  adc	ah,*0
17956                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17957 42C0           8946         FC            mov	-4[bp],ax
17958                                           !BCC_EOS
17959                                           ! 2148  write_word(0x40,0x60,curs);
17960                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17961 42C3           FF76         FC            push	-4[bp]
17962                                           ! Debug: list int = const $60 (used reg = )
17963 42C6           B8                   0060  mov	ax,*$60
17964 42C9           50                         push	ax
17965                                           ! Debug: list int = const $40 (used reg = )
17966 42CA           B8                   0040  mov	ax,*$40
17967 42CD           50                         push	ax
17968                                           ! Debug: func () void = write_word+0 (used reg = )
17969 42CE           E8         3AD9            call	_write_word
17970 42D1           83C4                   06  add	sp,*6
17971                                           !BCC_EOS
17972                                           ! 2149  modeset_ctl=read_byte(0x40,0x89);
17973                                           ! Debug: list int = const $89 (used reg = )
17974 42D4           B8                   0089  mov	ax,#$89
17975 42D7           50                         push	ax
17976                                           ! Debug: list int = const $40 (used reg = )
17977 42D8           B8                   0040  mov	ax,*$40
17978 42DB           50                         push	ax
17979                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17980 42DC           E8         3A8D            call	_read_byte
17981 42DF           83C4                   04  add	sp,*4
17982                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17983 42E2           8846         F9            mov	-7[bp],al
17984                                           !BCC_EOS
17985                                           ! 2150  cheight = read_word(0x40,0x85);
17986                                           ! Debug: list int = const $85 (used reg = )
17987 42E5           B8                   0085  mov	ax,#$85
17988 42E8           50                         push	ax
17989                                           ! Debug: list int = const $40 (used reg = )
17990 42E9           B8                   0040  mov	ax,*$40
17991 42EC           50                         push	ax
17992                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17993 42ED           E8         3A8F            call	_read_word
17994 42F0           83C4                   04  add	sp,*4
17995                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17996 42F3           8946         FE            mov	-2[bp],ax
17997                                           !BCC_EOS
17998                                           ! 2151  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17999                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
18000 42F6           8A46         F9            mov	al,-7[bp]
18001 42F9           24                     01  and	al,*1
18002 42FB           84C0                       test	al,al
18003 42FD           74           66            je  	.A2
18004                       000042FF            .A6:
18005                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
18006 42FF           8B46         FE            mov	ax,-2[bp]
18007 4302           3D                   0008  cmp	ax,*8
18008 4305           76           5E            jbe 	.A2
18009                       00004307            .A5:
18010                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
18011 4307           8A46         06            mov	al,6[bp]
18012 430A           3C                     08  cmp	al,*8
18013 430C           73           57            jae 	.A2
18014                       0000430E            .A4:
18015                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
18016 430E           8A46         04            mov	al,4[bp]
18017 4311           3C                     20  cmp	al,*$20
18018 4313           73           50            jae 	.A2
18019                       00004315            .A3:
18020                                           ! 2152   {
18021                                           ! 2153    if(CL!=(CH
18022                                           ! 2153 +1))
18023                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18024 4315           8A46         04            mov	al,4[bp]
18025 4318           30E4                       xor	ah,ah
18026                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
18027                                           ! Debug: expression subtree swapping
18028 431A           40                         inc	ax
18029 431B           50                         push	ax
18030 431C           8A46         06            mov	al,6[bp]
18031 431F           30E4                       xor	ah,ah
18032 4321           3B46         F6            cmp	ax,-$A[bp]
18033 4324           8D66         F8            lea	sp,-8[bp]
18034 4327           74           15            je  	.A7
18035                       00004329            .A8:
18036                                           ! 2154     {
18037                                           ! 2155      CH = ((CH+1) * cheight / 8) -1;
18038                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18039 4329           8A46         04            mov	al,4[bp]
18040 432C           30E4                       xor	ah,ah
18041                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18042 432E           40                         inc	ax
18043 432F           8B4E         FE            mov	cx,-2[bp]
18044 4332           F7E9                       imul	cx
18045                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18046 4334           B1                     03  mov	cl,*3
18047 4336           D3E8                       shr	ax,cl
18048                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18049                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
18050 4338           48                         dec	ax
18051 4339           8846         04            mov	4[bp],al
18052                                           !BCC_EOS
18053                                           ! 2156     }
18054                                           ! 2157    else
18055                                           ! 2158     {
18056 433C           EB           14            jmp .A9
18057                       0000433E            .A7:
18058                                           ! 2159      CH = ((CL+1) * cheight / 8) - 2;
18059                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18060 433E           8A46         06            mov	al,6[bp]
18061 4341           30E4                       xor	ah,ah
18062                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18063 4343           40                         inc	ax
18064 4344           8B4E         FE            mov	cx,-2[bp]
18065 4347           F7E9                       imul	cx
18066                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18067 4349           B1                     03  mov	cl,*3
18068 434B           D3E8                       shr	ax,cl
18069                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
18070                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
18071 434D           48                         dec	ax
18072 434E           48                         dec	ax
18073 434F           8846         04            mov	4[bp],al
18074                                           !BCC_EOS
18075                                           ! 2160     }
18076                                           ! 2161    CL = ((CL+1) * cheight / 8) - 1;
18077                       00004352            .A9:
18078                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18079 4352           8A46         06            mov	al,6[bp]
18080 4355           30E4                       xor	ah,ah
18081                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18082 4357           40                         inc	ax
18083 4358           8B4E         FE            mov	cx,-2[bp]
18084 435B           F7E9                       imul	cx
18085                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18086 435D           B1                     03  mov	cl,*3
18087 435F           D3E8                       shr	ax,cl
18088                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18089                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
18090 4361           48                         dec	ax
18091 4362           8846         06            mov	6[bp],al
18092                                           !BCC_EOS
18093                                           ! 2162   }
18094                                           ! 2163  crtc_addr=read_word(0x40,0x63);
18095                       00004365            .A2:
18096                                           ! Debug: list int = const $63 (used reg = )
18097 4365           B8                   0063  mov	ax,*$63
18098 4368           50                         push	ax
18099                                           ! Debug: list int = const $40 (used reg = )
18100 4369           B8                   0040  mov	ax,*$40
18101 436C           50                         push	ax
18102                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18103 436D           E8         3A0F            call	_read_word
18104 4370           83C4                   04  add	sp,*4
18105                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
18106 4373           8946         FA            mov	-6[bp],ax
18107                                           !BCC_EOS
18108                                           ! 2164  outb(crtc_addr,0x0a);
18109                                           ! Debug: list int = const $A (used reg = )
18110 4376           B8                   000A  mov	ax,*$A
18111 4379           50                         push	ax
18112                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18113 437A           FF76         FA            push	-6[bp]
18114                                           ! Debug: func () void = outb+0 (used reg = )
18115 437D           E8         3A58            call	_outb
18116 4380           83C4                   04  add	sp,*4
18117                                           !BCC_EOS
18118                                           ! 2165  outb(crtc_addr+1,CH);
18119                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18120 4383           8A46         04            mov	al,4[bp]
18121 4386           30E4                       xor	ah,ah
18122 4388           50                         push	ax
18123                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18124 4389           8B46         FA            mov	ax,-6[bp]
18125                                           ! Debug: list unsigned int = ax+1 (used reg = )
18126 438C           40                         inc	ax
18127 438D           50                         push	ax
18128                                           ! Debug: func () void = outb+0 (used reg = )
18129 438E           E8         3A47            call	_outb
18130 4391           83C4                   04  add	sp,*4
18131                                           !BCC_EOS
18132                                           ! 2166  outb(crtc_addr,0x0b);
18133                                           ! Debug: list int = const $B (used reg = )
18134 4394           B8                   000B  mov	ax,*$B
18135 4397           50                         push	ax
18136                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18137 4398           FF76         FA            push	-6[bp]
18138                                           ! Debug: func () void = outb+0 (used reg = )
18139 439B           E8         3A3A            call	_outb
18140 439E           83C4                   04  add	sp,*4
18141                                           !BCC_EOS
18142                                           ! 2167  outb(crtc_addr+1,CL);
18143                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18144 43A1           8A46         06            mov	al,6[bp]
18145 43A4           30E4                       xor	ah,ah
18146 43A6           50                         push	ax
18147                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18148 43A7           8B46         FA            mov	ax,-6[bp]
18149                                           ! Debug: list unsigned int = ax+1 (used reg = )
18150 43AA           40                         inc	ax
18151 43AB           50                         push	ax
18152                                           ! Debug: func () void = outb+0 (used reg = )
18153 43AC           E8         3A29            call	_outb
18154 43AF           83C4                   04  add	sp,*4
18155                                           !BCC_EOS
18156                                           ! 2168 }
18157 43B2           89EC                       mov	sp,bp
18158 43B4           5D                         pop	bp
18159 43B5           C3                         ret
18160                                           ! 2169 static void biosfn_set_cursor_pos (page, cursor)
18161                                           ! 2170 Bit8u page;Bit16u cursor;
18162                       000043B6            _biosfn_set_cursor_pos:
18163                                           !BCC_EOS
18164                                           !BCC_EOS
18165                                           ! 2171 {
18166                                           ! 2172  Bit8u xcurs,ycurs,current;
18167                                           !BCC_EOS
18168                                           ! 2173  Bit16u nbcols,nbrows,address,crtc_addr;
18169                                           !BCC_EOS
18170                                           ! 2174  if(page>7)return;
18171 43B6           55                         push	bp
18172 43B7           89E5                       mov	bp,sp
18173 43B9           83C4                   F4  add	sp,*-$C
18174                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18175 43BC           8A46         04            mov	al,4[bp]
18176 43BF           3C                     07  cmp	al,*7
18177 43C1           76           04            jbe 	.AA
18178                       000043C3            .AB:
18179 43C3           89EC                       mov	sp,bp
18180 43C5           5D                         pop	bp
18181 43C6           C3                         ret
18182                                           !BCC_EOS
18183                                           ! 2175  write_word(0x40, 0x50 +2*page, cursor);
18184                       000043C7            .AA:
18185                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18186 43C7           FF76         06            push	6[bp]
18187                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18188                                           ! Debug: expression subtree swapping
18189 43CA           8A46         04            mov	al,4[bp]
18190 43CD           30E4                       xor	ah,ah
18191 43CF           D1E0                       shl	ax,*1
18192                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18193                                           ! Debug: expression subtree swapping
18194                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18195 43D1           05                   0050  add	ax,*$50
18196 43D4           50                         push	ax
18197                                           ! Debug: list int = const $40 (used reg = )
18198 43D5           B8                   0040  mov	ax,*$40
18199 43D8           50                         push	ax
18200                                           ! Debug: func () void = write_word+0 (used reg = )
18201 43D9           E8         39CE            call	_write_word
18202 43DC           83C4                   06  add	sp,*6
18203                                           !BCC_EOS
18204                                           ! 2176  current=read_byte(0x40,0x62);
18205                                           ! Debug: list int = const $62 (used reg = )
18206 43DF           B8                   0062  mov	ax,*$62
18207 43E2           50                         push	ax
18208                                           ! Debug: list int = const $40 (used reg = )
18209 43E3           B8                   0040  mov	ax,*$40
18210 43E6           50                         push	ax
18211                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18212 43E7           E8         3982            call	_read_byte
18213 43EA           83C4                   04  add	sp,*4
18214                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18215 43ED           8846         FD            mov	-3[bp],al
18216                                           !BCC_EOS
18217                                           ! 2177  if(page==current)
18218                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18219 43F0           8A46         04            mov	al,4[bp]
18220 43F3           3A46         FD            cmp	al,-3[bp]
18221 43F6         0F85         00B8            bne 	.AC
18222                       000043FA            .AD:
18223                                           ! 2178   {
18224                                           ! 2179    nbcols=read_word(0x40,0x4A);
18225                                           ! Debug: list int = const $4A (used reg = )
18226 43FA           B8                   004A  mov	ax,*$4A
18227 43FD           50                         push	ax
18228                                           ! Debug: list int = const $40 (used reg = )
18229 43FE           B8                   0040  mov	ax,*$40
18230 4401           50                         push	ax
18231                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18232 4402           E8         397A            call	_read_word
18233 4405           83C4                   04  add	sp,*4
18234                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18235 4408           8946         FA            mov	-6[bp],ax
18236                                           !BCC_EOS
18237                                           ! 2180    nbrows=read_byte(0x40,0x84)+1;
18238                                           ! Debug: list int = const $84 (used reg = )
18239 440B           B8                   0084  mov	ax,#$84
18240 440E           50                         push	ax
18241                                           ! Debug: list int = const $40 (used reg = )
18242 440F           B8                   0040  mov	ax,*$40
18243 4412           50                         push	ax
18244                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18245 4413           E8         3956            call	_read_byte
18246 4416           83C4                   04  add	sp,*4
18247                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18248 4419           30E4                       xor	ah,ah
18249                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18250 441B           40                         inc	ax
18251 441C           8946         F8            mov	-8[bp],ax
18252                                           !BCC_EOS
18253                                           ! 2181    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18254                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18255 441F           8A46         06            mov	al,6[bp]
18256                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18257 4422           8846         FF            mov	-1[bp],al
18258                                           !BCC_EOS
18259                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18260 4425           8B46         06            mov	ax,6[bp]
18261 4428           30C0                       xor	al,al
18262                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18263 442A           88E0                       mov	al,ah
18264 442C           30E4                       xor	ah,ah
18265                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18266 442E           8846         FE            mov	-2[bp],al
18267                                           !BCC_EOS
18268                                           ! 2182    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18269                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18270 4431           8A46         FE            mov	al,-2[bp]
18271 4434           30E4                       xor	ah,ah
18272 4436           8B4E         FA            mov	cx,-6[bp]
18273 4439           F7E9                       imul	cx
18274 443B           50                         push	ax
18275                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18276 443C           8B46         FA            mov	ax,-6[bp]
18277 443F           8B4E         F8            mov	cx,-8[bp]
18278 4442           F7E9                       imul	cx
18279                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18280 4444           0C                     FF  or	al,#$FF
18281                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18282                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18283 4446           89C3                       mov	bx,ax
18284 4448           8A46         04            mov	al,4[bp]
18285 444B           30E4                       xor	ah,ah
18286 444D           93                         xchg	ax,bx
18287 444E           40                         inc	ax
18288 444F           89D9                       mov	cx,bx
18289 4451           F7E9                       imul	cx
18290                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18291 4453           0246         FF            add	al,-1[bp]
18292 4456           80D4                   00  adc	ah,*0
18293                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18294 4459           0346         F2            add	ax,-$E[bp]
18295 445C           44                         inc	sp
18296 445D           44                         inc	sp
18297                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18298 445E           8946         F6            mov	-$A[bp],ax
18299                                           !BCC_EOS
18300                                           ! 2183    crtc_addr=read_word(0x40,0x63);
18301                                           ! Debug: list int = const $63 (used reg = )
18302 4461           B8                   0063  mov	ax,*$63
18303 4464           50                         push	ax
18304                                           ! Debug: list int = const $40 (used reg = )
18305 4465           B8                   0040  mov	ax,*$40
18306 4468           50                         push	ax
18307                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18308 4469           E8         3913            call	_read_word
18309 446C           83C4                   04  add	sp,*4
18310                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18311 446F           8946         F4            mov	-$C[bp],ax
18312                                           !BCC_EOS
18313                                           ! 2184    outb(crtc_addr,0x0e);
18314                                           ! Debug: list int = const $E (used reg = )
18315 4472           B8                   000E  mov	ax,*$E
18316 4475           50                         push	ax
18317                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18318 4476           FF76         F4            push	-$C[bp]
18319                                           ! Debug: func () void = outb+0 (used reg = )
18320 4479           E8         395C            call	_outb
18321 447C           83C4                   04  add	sp,*4
18322                                           !BCC_EOS
18323                                           ! 2185    outb(crtc_addr+1,(address&0xff00)>>8);
18324                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18325 447F           8B46         F6            mov	ax,-$A[bp]
18326 4482           30C0                       xor	al,al
18327                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18328 4484           88E0                       mov	al,ah
18329 4486           30E4                       xor	ah,ah
18330                                           ! Debug: list unsigned int = ax+0 (used reg = )
18331 4488           50                         push	ax
18332                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18333 4489           8B46         F4            mov	ax,-$C[bp]
18334                                           ! Debug: list unsigned int = ax+1 (used reg = )
18335 448C           40                         inc	ax
18336 448D           50                         push	ax
18337                                           ! Debug: func () void = outb+0 (used reg = )
18338 448E           E8         3947            call	_outb
18339 4491           83C4                   04  add	sp,*4
18340                                           !BCC_EOS
18341                                           ! 2186    outb(crtc_addr,0x0f);
18342                                           ! Debug: list int = const $F (used reg = )
18343 4494           B8                   000F  mov	ax,*$F
18344 4497           50                         push	ax
18345                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18346 4498           FF76         F4            push	-$C[bp]
18347                                           ! Debug: func () void = outb+0 (used reg = )
18348 449B           E8         393A            call	_outb
18349 449E           83C4                   04  add	sp,*4
18350                                           !BCC_EOS
18351                                           ! 2187    outb(crtc_addr+1,address&0x00ff);
18352                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18353 44A1           8A46         F6            mov	al,-$A[bp]
18354                                           ! Debug: list unsigned char = al+0 (used reg = )
18355 44A4           30E4                       xor	ah,ah
18356 44A6           50                         push	ax
18357                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18358 44A7           8B46         F4            mov	ax,-$C[bp]
18359                                           ! Debug: list unsigned int = ax+1 (used reg = )
18360 44AA           40                         inc	ax
18361 44AB           50                         push	ax
18362                                           ! Debug: func () void = outb+0 (used reg = )
18363 44AC           E8         3929            call	_outb
18364 44AF           83C4                   04  add	sp,*4
18365                                           !BCC_EOS
18366                                           ! 2188   }
18367                                           ! 2189 }
18368                       000044B2            .AC:
18369 44B2           89EC                       mov	sp,bp
18370 44B4           5D                         pop	bp
18371 44B5           C3                         ret
18372                                           ! 2190 static void biosfn_get_cursor_pos (page,shape, pos)
18373                                           ! Register BX used in function biosfn_set_cursor_pos
18374                                           ! 2191 Bit8u page;Bit16u *shape;Bit16u *pos;
18375                       000044B6            _biosfn_get_cursor_pos:
18376                                           !BCC_EOS
18377                                           !BCC_EOS
18378                                           !BCC_EOS
18379                                           ! 2192 {
18380                                           ! 2193  Bit16u ss=get_SS();
18381 44B6           55                         push	bp
18382 44B7           89E5                       mov	bp,sp
18383 44B9           4C                         dec	sp
18384 44BA           4C                         dec	sp
18385                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18386 44BB           E8         393A            call	_get_SS
18387                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18388 44BE           8946         FE            mov	-2[bp],ax
18389                                           !BCC_EOS
18390                                           ! 2194  write_word(ss, shape, 0);
18391                                           ! Debug: list int = const 0 (used reg = )
18392 44C1           31C0                       xor	ax,ax
18393 44C3           50                         push	ax
18394                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18395 44C4           FF76         06            push	6[bp]
18396                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18397 44C7           FF76         FE            push	-2[bp]
18398                                           ! Debug: func () void = write_word+0 (used reg = )
18399 44CA           E8         38DD            call	_write_word
18400 44CD           83C4                   06  add	sp,*6
18401                                           !BCC_EOS
18402                                           ! 2195  write_word(ss, pos, 0);
18403                                           ! Debug: list int = const 0 (used reg = )
18404 44D0           31C0                       xor	ax,ax
18405 44D2           50                         push	ax
18406                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18407 44D3           FF76         08            push	8[bp]
18408                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18409 44D6           FF76         FE            push	-2[bp]
18410                                           ! Debug: func () void = write_word+0 (used reg = )
18411 44D9           E8         38CE            call	_write_word
18412 44DC           83C4                   06  add	sp,*6
18413                                           !BCC_EOS
18414                                           ! 2196  if(page>7)return;
18415                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18416 44DF           8A46         04            mov	al,4[bp]
18417 44E2           3C                     07  cmp	al,*7
18418 44E4           76           04            jbe 	.AE
18419                       000044E6            .AF:
18420 44E6           89EC                       mov	sp,bp
18421 44E8           5D                         pop	bp
18422 44E9           C3                         ret
18423                                           !BCC_EOS
18424                                           ! 2197  write_word(ss,shape,read_word(0x40,0x60));
18425                       000044EA            .AE:
18426                                           ! Debug: list int = const $60 (used reg = )
18427 44EA           B8                   0060  mov	ax,*$60
18428 44ED           50                         push	ax
18429                                           ! Debug: list int = const $40 (used reg = )
18430 44EE           B8                   0040  mov	ax,*$40
18431 44F1           50                         push	ax
18432                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18433 44F2           E8         388A            call	_read_word
18434 44F5           83C4                   04  add	sp,*4
18435                                           ! Debug: list unsigned short = ax+0 (used reg = )
18436 44F8           50                         push	ax
18437                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18438 44F9           FF76         06            push	6[bp]
18439                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18440 44FC           FF76         FE            push	-2[bp]
18441                                           ! Debug: func () void = write_word+0 (used reg = )
18442 44FF           E8         38A8            call	_write_word
18443 4502           83C4                   06  add	sp,*6
18444                                           !BCC_EOS
18445                                           ! 2198  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18446                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18447 4505           8A46         04            mov	al,4[bp]
18448 4508           30E4                       xor	ah,ah
18449 450A           D1E0                       shl	ax,*1
18450                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18451                                           ! Debug: expression subtree swapping
18452                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18453 450C           05                   0050  add	ax,*$50
18454 450F           50                         push	ax
18455                                           ! Debug: list int = const $40 (used reg = )
18456 4510           B8                   0040  mov	ax,*$40
18457 4513           50                         push	ax
18458                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18459 4514           E8         3868            call	_read_word
18460 4517           83C4                   04  add	sp,*4
18461                                           ! Debug: list unsigned short = ax+0 (used reg = )
18462 451A           50                         push	ax
18463                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18464 451B           FF76         08            push	8[bp]
18465                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18466 451E           FF76         FE            push	-2[bp]
18467                                           ! Debug: func () void = write_word+0 (used reg = )
18468 4521           E8         3886            call	_write_word
18469 4524           83C4                   06  add	sp,*6
18470                                           !BCC_EOS
18471                                           ! 2199 }
18472 4527           89EC                       mov	sp,bp
18473 4529           5D                         pop	bp
18474 452A           C3                         ret
18475                                           ! 2200 static void biosfn_set_active_page (page)
18476                                           ! 2201 Bit8u page;
18477                       0000452B            _biosfn_set_active_page:
18478                                           !BCC_EOS
18479                                           ! 2202 {
18480                                           ! 2203  Bit16u cursor,dummy,crtc_addr;
18481                                           !BCC_EOS
18482                                           ! 2204  Bit16u nbcols,nbrows,address;
18483                                           !BCC_EOS
18484                                           ! 2205  Bit8u mode,line;
18485                                           !BCC_EOS
18486                                           ! 2206  if(page>7)return;
18487 452B           55                         push	bp
18488 452C           89E5                       mov	bp,sp
18489 452E           83C4                   F2  add	sp,*-$E
18490                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18491 4531           8A46         04            mov	al,4[bp]
18492 4534           3C                     07  cmp	al,*7
18493 4536           76           04            jbe 	.B0
18494                       00004538            .B1:
18495 4538           89EC                       mov	sp,bp
18496 453A           5D                         pop	bp
18497 453B           C3                         ret
18498                                           !BCC_EOS
18499                                           ! 2207  mode=read_byte(0x40,0x49);
18500                       0000453C            .B0:
18501                                           ! Debug: list int = const $49 (used reg = )
18502 453C           B8                   0049  mov	ax,*$49
18503 453F           50                         push	ax
18504                                           ! Debug: list int = const $40 (used reg = )
18505 4540           B8                   0040  mov	ax,*$40
18506 4543           50                         push	ax
18507                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18508 4544           E8         3825            call	_read_byte
18509 4547           83C4                   04  add	sp,*4
18510                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18511 454A           8846         F3            mov	-$D[bp],al
18512                                           !BCC_EOS
18513                                           ! 2208  line=find_vga_entry(mode);
18514                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18515 454D           8A46         F3            mov	al,-$D[bp]
18516 4550           30E4                       xor	ah,ah
18517 4552           50                         push	ax
18518                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18519 4553           E8         372A            call	_find_vga_entry
18520 4556           44                         inc	sp
18521 4557           44                         inc	sp
18522                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18523 4558           8846         F2            mov	-$E[bp],al
18524                                           !BCC_EOS
18525                                           ! 2209  if(line==0xFF)return;
18526                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18527 455B           8A46         F2            mov	al,-$E[bp]
18528 455E           3C                     FF  cmp	al,#$FF
18529 4560           75           04            jne 	.B2
18530                       00004562            .B3:
18531 4562           89EC                       mov	sp,bp
18532 4564           5D                         pop	bp
18533 4565           C3                         ret
18534                                           !BCC_EOS
18535                                           ! 2210  biosfn_get_cursor_pos(page,&dummy,&cursor);
18536                       00004566            .B2:
18537                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18538 4566           8D5E         FE            lea	bx,-2[bp]
18539 4569           53                         push	bx
18540                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18541 456A           8D5E         FC            lea	bx,-4[bp]
18542 456D           53                         push	bx
18543                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18544 456E           8A46         04            mov	al,4[bp]
18545 4571           30E4                       xor	ah,ah
18546 4573           50                         push	ax
18547                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18548 4574           E8         FF3F            call	_biosfn_get_cursor_pos
18549 4577           83C4                   06  add	sp,*6
18550                                           !BCC_EOS
18551                                           ! 2211  if(vga_modes[line].class==0x00)
18552                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18553 457A           8A46         F2            mov	al,-$E[bp]
18554 457D           30E4                       xor	ah,ah
18555 457F           B1                     03  mov	cl,*3
18556 4581           D3E0                       shl	ax,cl
18557 4583           89C3                       mov	bx,ax
18558 4585           81C3                 0204  add	bx,#_vga_modes
18559                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18560 4589           8A47         01            mov	al,1[bx]
18561 458C           84C0                       test	al,al
18562 458E           75           6E            jne 	.B4
18563                       00004590            .B5:
18564                                           ! 2212   {
18565                                           ! 2213    nbcols=read_word(0x40,0x4A);
18566                                           ! Debug: list int = const $4A (used reg = )
18567 4590           B8                   004A  mov	ax,*$4A
18568 4593           50                         push	ax
18569                                           ! Debug: list int = const $40 (used reg = )
18570 4594           B8                   0040  mov	ax,*$40
18571 4597           50                         push	ax
18572                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18573 4598           E8         37E4            call	_read_word
18574 459B           83C4                   04  add	sp,*4
18575                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18576 459E           8946         F8            mov	-8[bp],ax
18577                                           !BCC_EOS
18578                                           ! 2214    nbrows=read_byte(0x40,0x84)+1;
18579                                           ! Debug: list int = const $84 (used reg = )
18580 45A1           B8                   0084  mov	ax,#$84
18581 45A4           50                         push	ax
18582                                           ! Debug: list int = const $40 (used reg = )
18583 45A5           B8                   0040  mov	ax,*$40
18584 45A8           50                         push	ax
18585                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18586 45A9           E8         37C0            call	_read_byte
18587 45AC           83C4                   04  add	sp,*4
18588                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18589 45AF           30E4                       xor	ah,ah
18590                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18591 45B1           40                         inc	ax
18592 45B2           8946         F6            mov	-$A[bp],ax
18593                                           !BCC_EOS
18594                                           ! 2215    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18595                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18596 45B5           8B46         F8            mov	ax,-8[bp]
18597 45B8           8B4E         F6            mov	cx,-$A[bp]
18598 45BB           F7E9                       imul	cx
18599                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18600 45BD           D1E0                       shl	ax,*1
18601                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18602 45BF           0C                     FF  or	al,#$FF
18603                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18604                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18605 45C1           89C3                       mov	bx,ax
18606 45C3           8A46         04            mov	al,4[bp]
18607 45C6           30E4                       xor	ah,ah
18608 45C8           93                         xchg	ax,bx
18609 45C9           40                         inc	ax
18610 45CA           89D9                       mov	cx,bx
18611 45CC           F7E9                       imul	cx
18612                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18613 45CE           8946         F4            mov	-$C[bp],ax
18614                                           !BCC_EOS
18615                                           ! 2216    write_word(0x40,0x4E,address);
18616                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18617 45D1           FF76         F4            push	-$C[bp]
18618                                           ! Debug: list int = const $4E (used reg = )
18619 45D4           B8                   004E  mov	ax,*$4E
18620 45D7           50                         push	ax
18621                                           ! Debug: list int = const $40 (used reg = )
18622 45D8           B8                   0040  mov	ax,*$40
18623 45DB           50                         push	ax
18624                                           ! Debug: func () void = write_word+0 (used reg = )
18625 45DC           E8         37CB            call	_write_word
18626 45DF           83C4                   06  add	sp,*6
18627                                           !BCC_EOS
18628                                           ! 2217    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18629                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18630 45E2           8B46         F8            mov	ax,-8[bp]
18631 45E5           8B4E         F6            mov	cx,-$A[bp]
18632 45E8           F7E9                       imul	cx
18633                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18634 45EA           0C                     FF  or	al,#$FF
18635                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18636                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18637 45EC           89C3                       mov	bx,ax
18638 45EE           8A46         04            mov	al,4[bp]
18639 45F1           30E4                       xor	ah,ah
18640 45F3           93                         xchg	ax,bx
18641 45F4           40                         inc	ax
18642 45F5           89D9                       mov	cx,bx
18643 45F7           F7E9                       imul	cx
18644                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18645 45F9           8946         F4            mov	-$C[bp],ax
18646                                           !BCC_EOS
18647                                           ! 2218   }
18648                                           ! 2219  else
18649                                           ! 2220   {
18650 45FC           EB           24            jmp .B6
18651                       000045FE            .B4:
18652                                           ! 2221    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18653                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18654 45FE           8A46         F2            mov	al,-$E[bp]
18655 4601           30E4                       xor	ah,ah
18656 4603           89C3                       mov	bx,ax
18657                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18658 4605           8A87       0284            mov	al,_line_to_vpti[bx]
18659 4609           30E4                       xor	ah,ah
18660 460B           B1                     06  mov	cl,*6
18661 460D           D3E0                       shl	ax,cl
18662 460F           89C3                       mov	bx,ax
18663 4611           81C3                 0298  add	bx,#_video_param_table
18664                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18665                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18666                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18667 4615           8A46         04            mov	al,4[bp]
18668 4618           30E4                       xor	ah,ah
18669 461A           8B4F         03            mov	cx,3[bx]
18670 461D           F7E9                       imul	cx
18671                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18672 461F           8946         F4            mov	-$C[bp],ax
18673                                           !BCC_EOS
18674                                           ! 2222   }
18675                                           ! 2223  crtc_addr=read_word(0x40,0x63);
18676                       00004622            .B6:
18677                                           ! Debug: list int = const $63 (used reg = )
18678 4622           B8                   0063  mov	ax,*$63
18679 4625           50                         push	ax
18680                                           ! Debug: list int = const $40 (used reg = )
18681 4626           B8                   0040  mov	ax,*$40
18682 4629           50                         push	ax
18683                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18684 462A           E8         3752            call	_read_word
18685 462D           83C4                   04  add	sp,*4
18686                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18687 4630           8946         FA            mov	-6[bp],ax
18688                                           !BCC_EOS
18689                                           ! 2224  outb(crtc_addr,0x0c);
18690                                           ! Debug: list int = const $C (used reg = )
18691 4633           B8                   000C  mov	ax,*$C
18692 4636           50                         push	ax
18693                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18694 4637           FF76         FA            push	-6[bp]
18695                                           ! Debug: func () void = outb+0 (used reg = )
18696 463A           E8         379B            call	_outb
18697 463D           83C4                   04  add	sp,*4
18698                                           !BCC_EOS
18699                                           ! 2225  outb(crtc_addr+1,(address&0xff00)>>8);
18700                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18701 4640           8B46         F4            mov	ax,-$C[bp]
18702 4643           30C0                       xor	al,al
18703                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18704 4645           88E0                       mov	al,ah
18705 4647           30E4                       xor	ah,ah
18706                                           ! Debug: list unsigned int = ax+0 (used reg = )
18707 4649           50                         push	ax
18708                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18709 464A           8B46         FA            mov	ax,-6[bp]
18710                                           ! Debug: list unsigned int = ax+1 (used reg = )
18711 464D           40                         inc	ax
18712 464E           50                         push	ax
18713                                           ! Debug: func () void = outb+0 (used reg = )
18714 464F           E8         3786            call	_outb
18715 4652           83C4                   04  add	sp,*4
18716                                           !BCC_EOS
18717                                           ! 2226  outb(crtc_addr,0x0d);
18718                                           ! Debug: list int = const $D (used reg = )
18719 4655           B8                   000D  mov	ax,*$D
18720 4658           50                         push	ax
18721                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18722 4659           FF76         FA            push	-6[bp]
18723                                           ! Debug: func () void = outb+0 (used reg = )
18724 465C           E8         3779            call	_outb
18725 465F           83C4                   04  add	sp,*4
18726                                           !BCC_EOS
18727                                           ! 2227  outb(crtc_addr+1,address&0x00ff);
18728                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18729 4662           8A46         F4            mov	al,-$C[bp]
18730                                           ! Debug: list unsigned char = al+0 (used reg = )
18731 4665           30E4                       xor	ah,ah
18732 4667           50                         push	ax
18733                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18734 4668           8B46         FA            mov	ax,-6[bp]
18735                                           ! Debug: list unsigned int = ax+1 (used reg = )
18736 466B           40                         inc	ax
18737 466C           50                         push	ax
18738                                           ! Debug: func () void = outb+0 (used reg = )
18739 466D           E8         3768            call	_outb
18740 4670           83C4                   04  add	sp,*4
18741                                           !BCC_EOS
18742                                           ! 2228  write_byte(0x40,0x62,page);
18743                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18744 4673           8A46         04            mov	al,4[bp]
18745 4676           30E4                       xor	ah,ah
18746 4678           50                         push	ax
18747                                           ! Debug: list int = const $62 (used reg = )
18748 4679           B8                   0062  mov	ax,*$62
18749 467C           50                         push	ax
18750                                           ! Debug: list int = const $40 (used reg = )
18751 467D           B8                   0040  mov	ax,*$40
18752 4680           50                         push	ax
18753                                           ! Debug: func () void = write_byte+0 (used reg = )
18754 4681           E8         370E            call	_write_byte
18755 4684           83C4                   06  add	sp,*6
18756                                           !BCC_EOS
18757                                           ! 2229  printf("Set active page %02x address %04x\n",page,address);
18758                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18759 4687           FF76         F4            push	-$C[bp]
18760                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18761 468A           8A46         04            mov	al,4[bp]
18762 468D           30E4                       xor	ah,ah
18763 468F           50                         push	ax
18764                                           ! Debug: list * char = .B7+0 (used reg = )
18765 4690           BB                   A175  mov	bx,#.B7
18766 4693           53                         push	bx
18767                                           ! Debug: func () void = printf+0 (used reg = )
18768 4694           E8         3780            call	_printf
18769 4697           83C4                   06  add	sp,*6
18770                                           !BCC_EOS
18771                                           ! 2230  biosfn_set_curso
18772                                           ! 2230 r_pos(page,cursor);
18773                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18774 469A           FF76         FE            push	-2[bp]
18775                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18776 469D           8A46         04            mov	al,4[bp]
18777 46A0           30E4                       xor	ah,ah
18778 46A2           50                         push	ax
18779                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18780 46A3           E8         FD10            call	_biosfn_set_cursor_pos
18781 46A6           83C4                   04  add	sp,*4
18782                                           !BCC_EOS
18783                                           ! 2231 }
18784 46A9           89EC                       mov	sp,bp
18785 46AB           5D                         pop	bp
18786 46AC           C3                         ret
18787                                           ! 2232 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18788                                           ! Register BX used in function biosfn_set_active_page
18789                                           ! 2233 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18790                       000046AD            _vgamem_copy_pl4:
18791                                           !BCC_EOS
18792                                           !BCC_EOS
18793                                           !BCC_EOS
18794                                           !BCC_EOS
18795                                           !BCC_EOS
18796                                           !BCC_EOS
18797                                           ! 2234 {
18798                                           ! 2235  Bit16u src,dest;
18799                                           !BCC_EOS
18800                                           ! 2236  Bit8u i;
18801                                           !BCC_EOS
18802                                           ! 2237  src=ysrc*cheight*nbcols+xstart;
18803 46AD           55                         push	bp
18804 46AE           89E5                       mov	bp,sp
18805 46B0           83C4                   FA  add	sp,*-6
18806                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18807 46B3           8A46         0E            mov	al,$E[bp]
18808 46B6           30E4                       xor	ah,ah
18809 46B8           89C3                       mov	bx,ax
18810 46BA           8A46         06            mov	al,6[bp]
18811 46BD           30E4                       xor	ah,ah
18812 46BF           89D9                       mov	cx,bx
18813 46C1           F7E9                       imul	cx
18814                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18815 46C3           89C3                       mov	bx,ax
18816 46C5           8A46         0C            mov	al,$C[bp]
18817 46C8           30E4                       xor	ah,ah
18818 46CA           93                         xchg	ax,bx
18819 46CB           89D9                       mov	cx,bx
18820 46CD           F7E9                       imul	cx
18821                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18822 46CF           0246         04            add	al,4[bp]
18823 46D2           80D4                   00  adc	ah,*0
18824                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18825 46D5           8946         FE            mov	-2[bp],ax
18826                                           !BCC_EOS
18827                                           ! 2238  dest=ydest*cheight*nbcols+xstart;
18828                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18829 46D8           8A46         0E            mov	al,$E[bp]
18830 46DB           30E4                       xor	ah,ah
18831 46DD           89C3                       mov	bx,ax
18832 46DF           8A46         08            mov	al,8[bp]
18833 46E2           30E4                       xor	ah,ah
18834 46E4           89D9                       mov	cx,bx
18835 46E6           F7E9                       imul	cx
18836                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18837 46E8           89C3                       mov	bx,ax
18838 46EA           8A46         0C            mov	al,$C[bp]
18839 46ED           30E4                       xor	ah,ah
18840 46EF           93                         xchg	ax,bx
18841 46F0           89D9                       mov	cx,bx
18842 46F2           F7E9                       imul	cx
18843                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18844 46F4           0246         04            add	al,4[bp]
18845 46F7           80D4                   00  adc	ah,*0
18846                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18847 46FA           8946         FC            mov	-4[bp],ax
18848                                           !BCC_EOS
18849                                           ! 2239  outw(0x3ce, 0x0105);
18850                                           ! Debug: list int = const $105 (used reg = )
18851 46FD           B8                   0105  mov	ax,#$105
18852 4700           50                         push	ax
18853                                           ! Debug: list int = const $3CE (used reg = )
18854 4701           B8                   03CE  mov	ax,#$3CE
18855 4704           50                         push	ax
18856                                           ! Debug: func () void = outw+0 (used reg = )
18857 4705           E8         36E0            call	_outw
18858 4708           83C4                   04  add	sp,*4
18859                                           !BCC_EOS
18860                                           ! 2240  for(i=0;i<cheight;i++)
18861                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18862 470B           30C0                       xor	al,al
18863 470D           8846         FB            mov	-5[bp],al
18864                                           !BCC_EOS
18865                                           !BCC_EOS
18866                                           ! 2241   {
18867 4710           EB           43            jmp .BA
18868                       00004712            .BB:
18869                                           ! 2242    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18870                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18871 4712           8A46         0A            mov	al,$A[bp]
18872 4715           30E4                       xor	ah,ah
18873 4717           50                         push	ax
18874                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18875 4718           8A46         0C            mov	al,$C[bp]
18876 471B           30E4                       xor	ah,ah
18877 471D           89C3                       mov	bx,ax
18878 471F           8A46         FB            mov	al,-5[bp]
18879 4722           30E4                       xor	ah,ah
18880 4724           89D9                       mov	cx,bx
18881 4726           F7E9                       imul	cx
18882                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18883                                           ! Debug: expression subtree swapping
18884 4728           0346         FE            add	ax,-2[bp]
18885                                           ! Debug: list unsigned int = ax+0 (used reg = )
18886 472B           50                         push	ax
18887                                           ! Debug: list unsigned int = const $A000 (used reg = )
18888 472C           B8                   A000  mov	ax,#$A000
18889 472F           50                         push	ax
18890                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18891 4730           8A46         0C            mov	al,$C[bp]
18892 4733           30E4                       xor	ah,ah
18893 4735           89C3                       mov	bx,ax
18894 4737           8A46         FB            mov	al,-5[bp]
18895 473A           30E4                       xor	ah,ah
18896 473C           89D9                       mov	cx,bx
18897 473E           F7E9                       imul	cx
18898                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18899                                           ! Debug: expression subtree swapping
18900 4740           0346         FC            add	ax,-4[bp]
18901                                           ! Debug: list unsigned int = ax+0 (used reg = )
18902 4743           50                         push	ax
18903                                           ! Debug: list unsigned int = const $A000 (used reg = )
18904 4744           B8                   A000  mov	ax,#$A000
18905 4747           50                         push	ax
18906                                           ! Debug: func () void = memcpyb+0 (used reg = )
18907 4748           E8         35C1            call	_memcpyb
18908 474B           83C4                   0A  add	sp,*$A
18909                                           !BCC_EOS
18910                                           ! 2243   }
18911                                           ! 2244  outw(0x3ce, 0x0005);
18912                       0000474E            .B9:
18913                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18914 474E           8A46         FB            mov	al,-5[bp]
18915 4751           40                         inc	ax
18916 4752           8846         FB            mov	-5[bp],al
18917                       00004755            .BA:
18918                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18919 4755           8A46         FB            mov	al,-5[bp]
18920 4758           3A46         0E            cmp	al,$E[bp]
18921 475B           72           B5            jb 	.BB
18922                       0000475D            .BC:
18923                       0000475D            .B8:
18924                                           ! Debug: list int = const 5 (used reg = )
18925 475D           B8                   0005  mov	ax,*5
18926 4760           50                         push	ax
18927                                           ! Debug: list int = const $3CE (used reg = )
18928 4761           B8                   03CE  mov	ax,#$3CE
18929 4764           50                         push	ax
18930                                           ! Debug: func () void = outw+0 (used reg = )
18931 4765           E8         3680            call	_outw
18932 4768           83C4                   04  add	sp,*4
18933                                           !BCC_EOS
18934                                           ! 2245 }
18935 476B           89EC                       mov	sp,bp
18936 476D           5D                         pop	bp
18937 476E           C3                         ret
18938                                           ! 2246 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18939                                           ! Register BX used in function vgamem_copy_pl4
18940                                           ! 2247 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18941                       0000476F            _vgamem_fill_pl4:
18942                                           !BCC_EOS
18943                                           !BCC_EOS
18944                                           !BCC_EOS
18945                                           !BCC_EOS
18946                                           !BCC_EOS
18947                                           !BCC_EOS
18948                                           ! 2248 {
18949                                           ! 2249  Bit16u dest;
18950                                           !BCC_EOS
18951                                           ! 2250  Bit8u i;
18952                                           !BCC_EOS
18953                                           ! 2251  dest=ystart*cheight*nbcols+xstart;
18954 476F           55                         push	bp
18955 4770           89E5                       mov	bp,sp
18956 4772           83C4                   FC  add	sp,*-4
18957                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18958 4775           8A46         0C            mov	al,$C[bp]
18959 4778           30E4                       xor	ah,ah
18960 477A           89C3                       mov	bx,ax
18961 477C           8A46         06            mov	al,6[bp]
18962 477F           30E4                       xor	ah,ah
18963 4781           89D9                       mov	cx,bx
18964 4783           F7E9                       imul	cx
18965                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18966 4785           89C3                       mov	bx,ax
18967 4787           8A46         0A            mov	al,$A[bp]
18968 478A           30E4                       xor	ah,ah
18969 478C           93                         xchg	ax,bx
18970 478D           89D9                       mov	cx,bx
18971 478F           F7E9                       imul	cx
18972                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18973 4791           0246         04            add	al,4[bp]
18974 4794           80D4                   00  adc	ah,*0
18975                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18976 4797           8946         FE            mov	-2[bp],ax
18977                                           !BCC_EOS
18978                                           ! 2252  outw(0x3ce, 0x0205);
18979                                           ! Debug: list int = const $205 (used reg = )
18980 479A           B8                   0205  mov	ax,#$205
18981 479D           50                         push	ax
18982                                           ! Debug: list int = const $3CE (used reg = )
18983 479E           B8                   03CE  mov	ax,#$3CE
18984 47A1           50                         push	ax
18985                                           ! Debug: func () void = outw+0 (used reg = )
18986 47A2           E8         3643            call	_outw
18987 47A5           83C4                   04  add	sp,*4
18988                                           !BCC_EOS
18989                                           ! 2253  for(i=0;i<cheight;i++)
18990                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18991 47A8           30C0                       xor	al,al
18992 47AA           8846         FD            mov	-3[bp],al
18993                                           !BCC_EOS
18994                                           !BCC_EOS
18995                                           ! 2254   {
18996 47AD           EB           31            jmp .BF
18997                       000047AF            .C0:
18998                                           ! 2255    memsetb(0xa000,dest+i*nbcols,attr,cols);
18999                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19000 47AF           8A46         08            mov	al,8[bp]
19001 47B2           30E4                       xor	ah,ah
19002 47B4           50                         push	ax
19003                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19004 47B5           8A46         0E            mov	al,$E[bp]
19005 47B8           30E4                       xor	ah,ah
19006 47BA           50                         push	ax
19007                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
19008 47BB           8A46         0A            mov	al,$A[bp]
19009 47BE           30E4                       xor	ah,ah
19010 47C0           89C3                       mov	bx,ax
19011 47C2           8A46         FD            mov	al,-3[bp]
19012 47C5           30E4                       xor	ah,ah
19013 47C7           89D9                       mov	cx,bx
19014 47C9           F7E9                       imul	cx
19015                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19016                                           ! Debug: expression subtree swapping
19017 47CB           0346         FE            add	ax,-2[bp]
19018                                           ! Debug: list unsigned int = ax+0 (used reg = )
19019 47CE           50                         push	ax
19020                                           ! Debug: list unsigned int = const $A000 (used reg = )
19021 47CF           B8                   A000  mov	ax,#$A000
19022 47D2           50                         push	ax
19023                                           ! Debug: func () void = memsetb+0 (used reg = )
19024 47D3           E8         34EC            call	_memsetb
19025 47D6           83C4                   08  add	sp,*8
19026                                           !BCC_EOS
19027                                           ! 2256   }
19028                                           ! 2257  outw(0x3ce, 0x0005);
19029                       000047D9            .BE:
19030                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19031 47D9           8A46         FD            mov	al,-3[bp]
19032 47DC           40                         inc	ax
19033 47DD           8846         FD            mov	-3[bp],al
19034                       000047E0            .BF:
19035                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19036 47E0           8A46         FD            mov	al,-3[bp]
19037 47E3           3A46         0C            cmp	al,$C[bp]
19038 47E6           72           C7            jb 	.C0
19039                       000047E8            .C1:
19040                       000047E8            .BD:
19041                                           ! Debug: list int = const 5 (used reg = )
19042 47E8           B8                   0005  mov	ax,*5
19043 47EB           50                         push	ax
19044                                           ! Debug: list int = const $3CE (used reg = )
19045 47EC           B8                   03CE  mov	ax,#$3CE
19046 47EF           50                         push	ax
19047                                           ! Debug: func () void = outw+0 (used reg = )
19048 47F0           E8         35F5            call	_outw
19049 47F3           83C4                   04  add	sp,*4
19050                                           !BCC_EOS
19051                                           ! 2258 }
19052 47F6           89EC                       mov	sp,bp
19053 47F8           5D                         pop	bp
19054 47F9           C3                         ret
19055                                           ! 2259 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
19056                                           ! Register BX used in function vgamem_fill_pl4
19057                                           ! 2260 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
19058                       000047FA            _vgamem_copy_cga:
19059                                           !BCC_EOS
19060                                           !BCC_EOS
19061                                           !BCC_EOS
19062                                           !BCC_EOS
19063                                           !BCC_EOS
19064                                           !BCC_EOS
19065                                           ! 2261 {
19066                                           ! 2262  Bit16u src,dest;
19067                                           !BCC_EOS
19068                                           ! 2263  Bit8u i;
19069                                           !BCC_EOS
19070                                           ! 2264  src=((ysrc*cheight*nbcols)>>1)+xstart;
19071 47FA           55                         push	bp
19072 47FB           89E5                       mov	bp,sp
19073 47FD           83C4                   FA  add	sp,*-6
19074                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
19075 4800           8A46         0E            mov	al,$E[bp]
19076 4803           30E4                       xor	ah,ah
19077 4805           89C3                       mov	bx,ax
19078 4807           8A46         06            mov	al,6[bp]
19079 480A           30E4                       xor	ah,ah
19080 480C           89D9                       mov	cx,bx
19081 480E           F7E9                       imul	cx
19082                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19083 4810           89C3                       mov	bx,ax
19084 4812           8A46         0C            mov	al,$C[bp]
19085 4815           30E4                       xor	ah,ah
19086 4817           93                         xchg	ax,bx
19087 4818           89D9                       mov	cx,bx
19088 481A           F7E9                       imul	cx
19089                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19090 481C           D1E8                       shr	ax,*1
19091                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19092 481E           0246         04            add	al,4[bp]
19093 4821           80D4                   00  adc	ah,*0
19094                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
19095 4824           8946         FE            mov	-2[bp],ax
19096                                           !BCC_EOS
19097                                           ! 2265  dest=((ydest*cheight*nbcols)>>1)+xstart;
19098                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
19099 4827           8A46         0E            mov	al,$E[bp]
19100 482A           30E4                       xor	ah,ah
19101 482C           89C3                       mov	bx,ax
19102 482E           8A46         08            mov	al,8[bp]
19103 4831           30E4                       xor	ah,ah
19104 4833           89D9                       mov	cx,bx
19105 4835           F7E9                       imul	cx
19106                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19107 4837           89C3                       mov	bx,ax
19108 4839           8A46         0C            mov	al,$C[bp]
19109 483C           30E4                       xor	ah,ah
19110 483E           93                         xchg	ax,bx
19111 483F           89D9                       mov	cx,bx
19112 4841           F7E9                       imul	cx
19113                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19114 4843           D1E8                       shr	ax,*1
19115                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19116 4845           0246         04            add	al,4[bp]
19117 4848           80D4                   00  adc	ah,*0
19118                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
19119 484B           8946         FC            mov	-4[bp],ax
19120                                           !BCC_EOS
19121                                           ! 2266  for(i=0;i<cheight;i++)
19122                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19123 484E           30C0                       xor	al,al
19124 4850           8846         FB            mov	-5[bp],al
19125                                           !BCC_EOS
19126                                           !BCC_EOS
19127                                           ! 2267   {
19128 4853           E9         00A8            br 	.C4
19129                       00004856            .C5:
19130                                           ! 2268    if (i & 1)
19131                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19132 4856           8A46         FB            mov	al,-5[bp]
19133 4859           24                     01  and	al,*1
19134 485B           84C0                       test	al,al
19135 485D           74           56            je  	.C6
19136                       0000485F            .C7:
19137                                           ! 2269      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19138                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19139 485F           8A46         0A            mov	al,$A[bp]
19140 4862           30E4                       xor	ah,ah
19141 4864           50                         push	ax
19142                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19143 4865           8A46         FB            mov	al,-5[bp]
19144 4868           30E4                       xor	ah,ah
19145 486A           D1E8                       shr	ax,*1
19146                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19147 486C           89C3                       mov	bx,ax
19148 486E           8A46         0C            mov	al,$C[bp]
19149 4871           30E4                       xor	ah,ah
19150 4873           93                         xchg	ax,bx
19151 4874           89D9                       mov	cx,bx
19152 4876           F7E9                       imul	cx
19153 4878           50                         push	ax
19154                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19155                                           ! Debug: expression subtree swapping
19156 4879           8B46         FE            mov	ax,-2[bp]
19157                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19158 487C           05                   2000  add	ax,#$2000
19159 487F           0346         F6            add	ax,-$A[bp]
19160 4882           44                         inc	sp
19161 4883           44                         inc	sp
19162                                           ! Debug: list unsigned int = ax+0 (used reg = )
19163 4884           50                         push	ax
19164                                           ! Debug: list unsigned int = const $B800 (used reg = )
19165 4885           B8                   B800  mov	ax,#$B800
19166 4888           50                         push	ax
19167                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19168 4889           8A46         FB            mov	al,-5[bp]
19169 488C           30E4                       xor	ah,ah
19170 488E           D1E8                       shr	ax,*1
19171                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19172 4890           89C3                       mov	bx,ax
19173 4892           8A46         0C            mov	al,$C[bp]
19174 4895           30E4                       xor	ah,ah
19175 4897           93                         xchg	ax,bx
19176 4898           89D9                       mov	cx,bx
19177 489A           F7E9                       imul	cx
19178 489C           50                         push	ax
19179                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19180                                           ! Debug: expression subtree swapping
19181 489D           8B46         FC            mov	ax,-4[bp]
19182                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19183 48A0           05                   2000  add	ax,#$2000
19184 48A3           0346         F2            add	ax,-$E[bp]
19185 48A6           44                         inc	sp
19186 48A7           44                         inc	sp
19187                                           ! Debug: list unsigned int = ax+0 (used reg = )
19188 48A8           50                         push	ax
19189                                           ! Debug: list unsigned int = const $B800 (used reg = )
19190 48A9           B8                   B800  mov	ax,#$B800
19191 48AC           50                         push	ax
19192                                           ! Debug: func () void = memcpyb+0 (used reg = )
19193 48AD           E8         345C            call	_memcpyb
19194 48B0           83C4                   0A  add	sp,*$A
19195                                           !BCC_EOS
19196                                           ! 2270    else
19197                                           ! 2271      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19198 48B3           EB           42            jmp .C8
19199                       000048B5            .C6:
19200                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19201 48B5           8A46         0A            mov	al,$A[bp]
19202 48B8           30E4                       xor	ah,ah
19203 48BA           50                         push	ax
19204                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19205 48BB           8A46         FB            mov	al,-5[bp]
19206 48BE           30E4                       xor	ah,ah
19207 48C0           D1E8                       shr	ax,*1
19208                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19209 48C2           89C3                       mov	bx,ax
19210 48C4           8A46         0C            mov	al,$C[bp]
19211 48C7           30E4                       xor	ah,ah
19212 48C9           93                         xchg	ax,bx
19213 48CA           89D9                       mov	cx,bx
19214 48CC           F7E9                       imul	cx
19215                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19216                                           ! Debug: expression subtree swapping
19217 48CE           0346         FE            add	ax,-2[bp]
19218                                           ! Debug: list unsigned int = ax+0 (used reg = )
19219 48D1           50                         push	ax
19220                                           ! Debug: list unsigned int = const $B800 (used reg = )
19221 48D2           B8                   B800  mov	ax,#$B800
19222 48D5           50                         push	ax
19223                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19224 48D6           8A46         FB            mov	al,-5[bp]
19225 48D9           30E4                       xor	ah,ah
19226 48DB           D1E8                       shr	ax,*1
19227                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19228 48DD           89C3                       mov	bx,ax
19229 48DF           8A46         0C            mov	al,$C[bp]
19230 48E2           30E4                       xor	ah,ah
19231 48E4           93                         xchg	ax,bx
19232 48E5           89D9                       mov	cx,bx
19233 48E7           F7E9                       imul	cx
19234                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19235                                           ! Debug: expression subtree swapping
19236 48E9           0346         FC            add	ax,-4[bp]
19237                                           ! Debug: list unsigned int = ax+0 (used reg = )
19238 48EC           50                         push	ax
19239                                           ! Debug: list unsigned int = const $B800 (used reg = )
19240 48ED           B8                   B800  mov	ax,#$B800
19241 48F0           50                         push	ax
19242                                           ! Debug: func () void = memcpyb+0 (used reg = )
19243 48F1           E8         3418            call	_memcpyb
19244 48F4           83C4                   0A  add	sp,*$A
19245                                           !BCC_EOS
19246                                           ! 2272   }
19247                       000048F7            .C8:
19248                                           ! 2273 }
19249                       000048F7            .C3:
19250                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19251 48F7           8A46         FB            mov	al,-5[bp]
19252 48FA           40                         inc	ax
19253 48FB           8846         FB            mov	-5[bp],al
19254                       000048FE            .C4:
19255                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19256 48FE           8A46         FB            mov	al,-5[bp]
19257 4901           3A46         0E            cmp	al,$E[bp]
19258 4904         0F82         FF4E            blo 	.C5
19259                       00004908            .C9:
19260                       00004908            .C2:
19261 4908           89EC                       mov	sp,bp
19262 490A           5D                         pop	bp
19263 490B           C3                         ret
19264                                           ! 2274 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19265                                           ! Register BX used in function vgamem_copy_cga
19266                                           ! 2275 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19267                       0000490C            _vgamem_fill_cga:
19268                                           !BCC_EOS
19269                                           !BCC_EOS
19270                                           !BCC_EOS
19271                                           !BCC_EOS
19272                                           !BCC_EOS
19273                                           !BCC_EOS
19274                                           ! 2276 {
19275                                           ! 2277  Bit16u dest;
19276                                           !BCC_EOS
19277                                           ! 2278  Bit8u i;
19278                                           !BCC_EOS
19279                                           ! 2279  dest=((ystart*cheight*nbcols)>>1)+xstart;
19280 490C           55                         push	bp
19281 490D           89E5                       mov	bp,sp
19282 490F           83C4                   FC  add	sp,*-4
19283                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19284 4912           8A46         0C            mov	al,$C[bp]
19285 4915           30E4                       xor	ah,ah
19286 4917           89C3                       mov	bx,ax
19287 4919           8A46         06            mov	al,6[bp]
19288 491C           30E4                       xor	ah,ah
19289 491E           89D9                       mov	cx,bx
19290 4920           F7E9                       imul	cx
19291                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19292 4922           89C3                       mov	bx,ax
19293 4924           8A46         0A            mov	al,$A[bp]
19294 4927           30E4                       xor	ah,ah
19295 4929           93                         xchg	ax,bx
19296 492A           89D9                       mov	cx,bx
19297 492C           F7E9                       imul	cx
19298                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19299 492E           D1E8                       shr	ax,*1
19300                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19301 4930           0246         04            add	al,4[bp]
19302 4933           80D4                   00  adc	ah,*0
19303                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19304 4936           8946         FE            mov	-2[bp],ax
19305                                           !BCC_EOS
19306                                           ! 2280  for(i=0;i<cheight;i++)
19307                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19308 4939           30C0                       xor	al,al
19309 493B           8846         FD            mov	-3[bp],al
19310                                           !BCC_EOS
19311                                           !BCC_EOS
19312                                           ! 2281   {
19313 493E           EB           75            jmp .CC
19314                       00004940            .CD:
19315                                           ! 2282    if (i & 1)
19316                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19317 4940           8A46         FD            mov	al,-3[bp]
19318 4943           24                     01  and	al,*1
19319 4945           84C0                       test	al,al
19320 4947           74           38            je  	.CE
19321                       00004949            .CF:
19322                                           ! 2283      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19323                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19324 4949           8A46         08            mov	al,8[bp]
19325 494C           30E4                       xor	ah,ah
19326 494E           50                         push	ax
19327                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19328 494F           8A46         0E            mov	al,$E[bp]
19329 4952           30E4                       xor	ah,ah
19330 4954           50                         push	ax
19331                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19332 4955           8A46         FD            mov	al,-3[bp]
19333 4958           30E4                       xor	ah,ah
19334 495A           D1E8                       shr	ax,*1
19335                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19336 495C           89C3                       mov	bx,ax
19337 495E           8A46         0A            mov	al,$A[bp]
19338 4961           30E4                       xor	ah,ah
19339 4963           93                         xchg	ax,bx
19340 4964           89D9                       mov	cx,bx
19341 4966           F7E9                       imul	cx
19342 4968           50                         push	ax
19343                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19344                                           ! Debug: expression subtree swapping
19345 4969           8B46         FE            mov	ax,-2[bp]
19346                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19347 496C           05                   2000  add	ax,#$2000
19348 496F           0346         F6            add	ax,-$A[bp]
19349 4972           44                         inc	sp
19350 4973           44                         inc	sp
19351                                           ! Debug: list unsigned int = ax+0 (used reg = )
19352 4974           50                         push	ax
19353                                           ! Debug: list unsigned int = const $B800 (used reg = )
19354 4975           B8                   B800  mov	ax,#$B800
19355 4978           50                         push	ax
19356                                           ! Debug: func () void = memsetb+0 (used reg = )
19357 4979           E8         3346            call	_memsetb
19358 497C           83C4                   08  add	sp,*8
19359                                           !BCC_EOS
19360                                           ! 2284    else
19361                                           ! 2285      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19362 497F           EB           2D            jmp .D0
19363                       00004981            .CE:
19364                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19365 4981           8A46         08            mov	al,8[bp]
19366 4984           30E4                       xor	ah,ah
19367 4986           50                         push	ax
19368                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19369 4987           8A46         0E            mov	al,$E[bp]
19370 498A           30E4                       xor	ah,ah
19371 498C           50                         push	ax
19372                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19373 498D           8A46         FD            mov	al,-3[bp]
19374 4990           30E4                       xor	ah,ah
19375 4992           D1E8                       shr	ax,*1
19376                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19377 4994           89C3                       mov	bx,ax
19378 4996           8A46         0A            mov	al,$A[bp]
19379 4999           30E4                       xor	ah,ah
19380 499B           93                         xchg	ax,bx
19381 499C           89D9                       mov	cx,bx
19382 499E           F7E9                       imul	cx
19383                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19384                                           ! Debug: expression subtree swapping
19385 49A0           0346         FE            add	ax,-2[bp]
19386                                           ! Debug: list unsigned int = ax+0 (used reg = )
19387 49A3           50                         push	ax
19388                                           ! Debug: list unsigned int = const $B800 (used reg = )
19389 49A4           B8                   B800  mov	ax,#$B800
19390 49A7           50                         push	ax
19391                                           ! Debug: func () void = memsetb+0 (used reg = )
19392 49A8           E8         3317            call	_memsetb
19393 49AB           83C4                   08  add	sp,*8
19394                                           !BCC_EOS
19395                                           ! 2286   }
19396                       000049AE            .D0:
19397                                           ! 2287 }
19398                       000049AE            .CB:
19399                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19400 49AE           8A46         FD            mov	al,-3[bp]
19401 49B1           40                         inc	ax
19402 49B2           8846         FD            mov	-3[bp],al
19403                       000049B5            .CC:
19404                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19405 49B5           8A46         FD            mov	al,-3[bp]
19406 49B8           3A46         0C            cmp	al,$C[bp]
19407 49BB           72           83            jb 	.CD
19408                       000049BD            .D1:
19409                       000049BD            .CA:
19410 49BD           89EC                       mov	sp,bp
19411 49BF           5D                         pop	bp
19412 49C0           C3                         ret
19413                                           ! 2288 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19414                                           ! Register BX used in function vgamem_fill_cga
19415                                           ! 2289 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19416                       000049C1            _biosfn_scroll:
19417                                           !BCC_EOS
19418                                           !BCC_EOS
19419                                           !BCC_EOS
19420                                           !BCC_EOS
19421                                           !BCC_EOS
19422                                           !BCC_EOS
19423                                           !BCC_EOS
19424                                           !BCC_EOS
19425                                           ! 2290 {
19426                                           ! 2291  Bit8u mode,line,cheight,bpp,cols;
19427                                           !BCC_EOS
19428                                           ! 2292  Bit16u nbcols,nbrows,i;
19429                                           !BCC_EOS
19430                                           ! 2293  Bit16u address;
19431                                           !BCC_EOS
19432                                           ! 2294  if(rul>rlr)return;
19433 49C1           55                         push	bp
19434 49C2           89E5                       mov	bp,sp
19435 49C4           83C4                   F2  add	sp,*-$E
19436                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19437 49C7           8A46         08            mov	al,8[bp]
19438 49CA           3A46         0C            cmp	al,$C[bp]
19439 49CD           76           04            jbe 	.D2
19440                       000049CF            .D3:
19441 49CF           89EC                       mov	sp,bp
19442 49D1           5D                         pop	bp
19443 49D2           C3                         ret
19444                                           !BCC_EOS
19445                                           ! 2295  if(cul>clr)return;
19446                       000049D3            .D2:
19447                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19448 49D3           8A46         0A            mov	al,$A[bp]
19449 49D6           3A46         0E            cmp	al,$E[bp]
19450 49D9           76           04            jbe 	.D4
19451                       000049DB            .D5:
19452 49DB           89EC                       mov	sp,bp
19453 49DD           5D                         pop	bp
19454 49DE           C3                         ret
19455                                           !BCC_EOS
19456                                           ! 2296  mode=read_byte(0x40,0x49);
19457                       000049DF            .D4:
19458                                           ! Debug: list int = const $49 (used reg = )
19459 49DF           B8                   0049  mov	ax,*$49
19460 49E2           50                         push	ax
19461                                           ! Debug: list int = const $40 (used reg = )
19462 49E3           B8                   0040  mov	ax,*$40
19463 49E6           50                         push	ax
19464                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19465 49E7           E8         3382            call	_read_byte
19466 49EA           83C4                   04  add	sp,*4
19467                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19468 49ED           8846         FF            mov	-1[bp],al
19469                                           !BCC_EOS
19470                                           ! 2297  line=find_vga_entry(mode);
19471                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19472 49F0           8A46         FF            mov	al,-1[bp]
19473 49F3           30E4                       xor	ah,ah
19474 49F5           50                         push	ax
19475                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19476 49F6           E8         3287            call	_find_vga_entry
19477 49F9           44                         inc	sp
19478 49FA           44                         inc	sp
19479                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19480 49FB           8846         FE            mov	-2[bp],al
19481                                           !BCC_EOS
19482                                           ! 2298  if(line==0xFF)return;
19483                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19484 49FE           8A46         FE            mov	al,-2[bp]
19485 4A01           3C                     FF  cmp	al,#$FF
19486 4A03           75           04            jne 	.D6
19487                       00004A05            .D7:
19488 4A05           89EC                       mov	sp,bp
19489 4A07           5D                         pop	bp
19490 4A08           C3                         ret
19491                                           !BCC_EOS
19492                                           ! 2299  nbrows=read_byte(0x40,0x84)+1;
19493                       00004A09            .D6:
19494                                           ! Debug: list int = const $84 (used reg = )
19495 4A09           B8                   0084  mov	ax,#$84
19496 4A0C           50                         push	ax
19497                                           ! Debug: list int = const $40 (used reg = )
19498 4A0D           B8                   0040  mov	ax,*$40
19499 4A10           50                         push	ax
19500                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19501 4A11           E8         3358            call	_read_byte
19502 4A14           83C4                   04  add	sp,*4
19503                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19504 4A17           30E4                       xor	ah,ah
19505                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19506 4A19           40                         inc	ax
19507 4A1A           8946         F6            mov	-$A[bp],ax
19508                                           !BCC_EOS
19509                                           ! 2300  nbcols=read_word(0x40,0x4A);
19510                                           ! Debug: list int = const $4A (used reg = )
19511 4A1D           B8                   004A  mov	ax,*$4A
19512 4A20           50                         push	ax
19513                                           ! Debug: list int = const $40 (used reg = )
19514 4A21           B8                   0040  mov	ax,*$40
19515 4A24           50                         push	ax
19516                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19517 4A25           E8         3357            call	_read_word
19518 4A28           83C4                   04  add	sp,*4
19519                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19520 4A2B           8946         F8            mov	-8[bp],ax
19521                                           !BCC_EOS
19522                                           ! 2301  if(page==0xFF)
19523                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19524 4A2E           8A46         10            mov	al,$10[bp]
19525 4A31           3C                     FF  cmp	al,#$FF
19526 4A33           75           11            jne 	.D8
19527                       00004A35            .D9:
19528                                           ! 2302   page=read_byte(0x40,0x62);
19529                                           ! Debug: list int = const $62 (used reg = )
19530 4A35           B8                   0062  mov	ax,*$62
19531 4A38           50                         push	ax
19532                                           ! Debug: list int = const $40 (used reg = )
19533 4A39           B8                   0040  mov	ax,*$40
19534 4A3C           50                         push	ax
19535                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19536 4A3D           E8         332C            call	_read_byte
19537 4A40           83C4                   04  add	sp,*4
19538                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19539 4A43           8846         10            mov	$10[bp],al
19540                                           !BCC_EOS
19541                                           ! 2303  if(rlr>=nbrows)rlr
19542                       00004A46            .D8:
19543                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19544 4A46           8A46         0C            mov	al,$C[bp]
19545 4A49           30E4                       xor	ah,ah
19546 4A4B           3B46         F6            cmp	ax,-$A[bp]
19547 4A4E           72           07            jb  	.DA
19548                       00004A50            .DB:
19549                                           ! 2303 =nbrows-1;
19550                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19551 4A50           8B46         F6            mov	ax,-$A[bp]
19552                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19553 4A53           48                         dec	ax
19554 4A54           8846         0C            mov	$C[bp],al
19555                                           !BCC_EOS
19556                                           ! 2304  if(clr>=nbcols)clr=nbcols-1;
19557                       00004A57            .DA:
19558                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19559 4A57           8A46         0E            mov	al,$E[bp]
19560 4A5A           30E4                       xor	ah,ah
19561 4A5C           3B46         F8            cmp	ax,-8[bp]
19562 4A5F           72           07            jb  	.DC
19563                       00004A61            .DD:
19564                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19565 4A61           8B46         F8            mov	ax,-8[bp]
19566                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19567 4A64           48                         dec	ax
19568 4A65           8846         0E            mov	$E[bp],al
19569                                           !BCC_EOS
19570                                           ! 2305  if(nblines>nbrows)nblines=0;
19571                       00004A68            .DC:
19572                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19573 4A68           8A46         04            mov	al,4[bp]
19574 4A6B           30E4                       xor	ah,ah
19575 4A6D           3B46         F6            cmp	ax,-$A[bp]
19576 4A70           76           05            jbe 	.DE
19577                       00004A72            .DF:
19578                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19579 4A72           30C0                       xor	al,al
19580 4A74           8846         04            mov	4[bp],al
19581                                           !BCC_EOS
19582                                           ! 2306  cols=clr-cul+1;
19583                       00004A77            .DE:
19584                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19585 4A77           8A46         0E            mov	al,$E[bp]
19586 4A7A           30E4                       xor	ah,ah
19587 4A7C           2A46         0A            sub	al,$A[bp]
19588 4A7F           80DC                   00  sbb	ah,*0
19589                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19590                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19591 4A82           40                         inc	ax
19592 4A83           8846         FB            mov	-5[bp],al
19593                                           !BCC_EOS
19594                                           ! 2307  if(vga_modes[line].class==0x00)
19595                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19596 4A86           8A46         FE            mov	al,-2[bp]
19597 4A89           30E4                       xor	ah,ah
19598 4A8B           B1                     03  mov	cl,*3
19599 4A8D           D3E0                       shl	ax,cl
19600 4A8F           89C3                       mov	bx,ax
19601 4A91           81C3                 0204  add	bx,#_vga_modes
19602                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19603 4A95           8A47         01            mov	al,1[bx]
19604 4A98           84C0                       test	al,al
19605 4A9A         0F85         0269            bne 	.E0
19606                       00004A9E            .E1:
19607                                           ! 2308   {
19608                                           ! 2309    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19609                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19610 4A9E           8B46         F8            mov	ax,-8[bp]
19611 4AA1           8B4E         F6            mov	cx,-$A[bp]
19612 4AA4           F7E9                       imul	cx
19613                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19614 4AA6           D1E0                       shl	ax,*1
19615                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19616 4AA8           0C                     FF  or	al,#$FF
19617                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19618                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19619 4AAA           89C3                       mov	bx,ax
19620 4AAC           8A46         10            mov	al,$10[bp]
19621 4AAF           30E4                       xor	ah,ah
19622 4AB1           93                         xchg	ax,bx
19623 4AB2           40                         inc	ax
19624 4AB3           89D9                       mov	cx,bx
19625 4AB5           F7E9                       imul	cx
19626                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19627 4AB7           8946         F2            mov	-$E[bp],ax
19628                                           !BCC_EOS
19629                                           ! 2310    printf("Scroll, address %04x (%04x %04x %02x)\n",address,nbrows,nbcols,page);
19630                                           ! Debug: list unsigned char page = [S+$10+$E] (used reg = )
19631 4ABA           8A46         10            mov	al,$10[bp]
19632 4ABD           30E4                       xor	ah,ah
19633 4ABF           50                         push	ax
19634                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19635 4AC0           FF76         F8            push	-8[bp]
19636                                           ! Debug: list unsigned short nbrows = [S+$14-$C] (used reg = )
19637 4AC3           FF76         F6            push	-$A[bp]
19638                                           ! Debug: list unsigned short address = [S+$16-$10] (used reg = )
19639 4AC6           FF76         F2            push	-$E[bp]
19640                                           ! Debug: list * char = .E2+0 (used reg = )
19641 4AC9           BB                   A14E  mov	bx,#.E2
19642 4ACC           53                         push	bx
19643                                           ! Debug: func () void = printf+0 (used reg = )
19644 4ACD           E8         3347            call	_printf
19645 4AD0           83C4                   0A  add	sp,*$A
19646                                           !BCC_EOS
19647                                           ! 2311    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19648                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19649 4AD3           8A46         04            mov	al,4[bp]
19650 4AD6           84C0                       test	al,al
19651 4AD8           75           67            jne 	.E3
19652                       00004ADA            .E8:
19653                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19654 4ADA           8A46         08            mov	al,8[bp]
19655 4ADD           84C0                       test	al,al
19656 4ADF           75           60            jne 	.E3
19657                       00004AE1            .E7:
19658                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19659 4AE1           8A46         0A            mov	al,$A[bp]
19660 4AE4           84C0                       test	al,al
19661 4AE6           75           59            jne 	.E3
19662                       00004AE8            .E6:
19663                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19664 4AE8           8B46         F6            mov	ax,-$A[bp]
19665                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19666                                           ! Debug: expression subtree swapping
19667 4AEB           48                         dec	ax
19668 4AEC           50                         push	ax
19669 4AED           8A46         0C            mov	al,$C[bp]
19670 4AF0           30E4                       xor	ah,ah
19671 4AF2           3B46         F0            cmp	ax,-$10[bp]
19672 4AF5           8D66         F2            lea	sp,-$E[bp]
19673 4AF8           75           47            jne 	.E3
19674                       00004AFA            .E5:
19675                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19676 4AFA           8B46         F8            mov	ax,-8[bp]
19677                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19678                                           ! Debug: expression subtree swapping
19679 4AFD           48                         dec	ax
19680 4AFE           50                         push	ax
19681 4AFF           8A46         0E            mov	al,$E[bp]
19682 4B02           30E4                       xor	ah,ah
19683 4B04           3B46         F0            cmp	ax,-$10[bp]
19684 4B07           8D66         F2            lea	sp,-$E[bp]
19685 4B0A           75           35            jne 	.E3
19686                       00004B0C            .E4:
19687                                           ! 2312     {
19688                                           ! 2313      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19689                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19690 4B0C           8B46         F6            mov	ax,-$A[bp]
19691 4B0F           8B4E         F8            mov	cx,-8[bp]
19692 4B12           F7E9                       imul	cx
19693                                           ! Debug: list unsigned int = ax+0 (used reg = )
19694 4B14           50                         push	ax
19695                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19696 4B15           8A46         06            mov	al,6[bp]
19697 4B18           30E4                       xor	ah,ah
19698                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19699 4B1A           B9                   0100  mov	cx,#$100
19700 4B1D           F7E9                       imul	cx
19701                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19702                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19703 4B1F           05                   0020  add	ax,*$20
19704 4B22           50                         push	ax
19705                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19706 4B23           FF76         F2            push	-$E[bp]
19707                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19708 4B26           8A46         FE            mov	al,-2[bp]
19709 4B29           30E4                       xor	ah,ah
19710 4B2B           B1                     03  mov	cl,*3
19711 4B2D           D3E0                       shl	ax,cl
19712 4B2F           89C3                       mov	bx,ax
19713 4B31           81C3                 0204  add	bx,#_vga_modes
19714                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19715 4B35           FF77         04            push	4[bx]
19716                                           ! Debug: func () void = memsetw+0 (used reg = )
19717 4B38           E8         31AC            call	_memsetw
19718 4B3B           83C4                   08  add	sp,*8
19719                                           !BCC_EOS
19720                                           ! 2314     }
19721                                           ! 2315    else
19722                                           ! 2316     {
19723 4B3E           E9         01C3            br 	.E9
19724                       00004B41            .E3:
19725                                           ! 2317      if(dir==1)
19726                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19727 4B41           8A46         12            mov	al,$12[bp]
19728 4B44           3C                     01  cmp	al,*1
19729 4B46         0F85         00DC            bne 	.EA
19730                       00004B4A            .EB:
19731                                           ! 2318       {for(i=rul;i<=rlr;i++)
19732                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19733 4B4A           8A46         08            mov	al,8[bp]
19734 4B4D           30E4                       xor	ah,ah
19735 4B4F           8946         F4            mov	-$C[bp],ax
19736                                           !BCC_EOS
19737                                           !BCC_EOS
19738                                           ! 2319         {
19739 4B52           E9         00C2            br 	.EE
19740                       00004B55            .EF:
19741                                           ! 2320          if((i+nblines>rlr)||(nblines==0))
19742                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19743 4B55           8B46         F4            mov	ax,-$C[bp]
19744 4B58           0246         04            add	al,4[bp]
19745 4B5B           80D4                   00  adc	ah,*0
19746                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19747 4B5E           50                         push	ax
19748 4B5F           8A46         0C            mov	al,$C[bp]
19749 4B62           30E4                       xor	ah,ah
19750 4B64           3B46         F0            cmp	ax,-$10[bp]
19751 4B67           8D66         F2            lea	sp,-$E[bp]
19752 4B6A           72           07            jb  	.F1
19753                       00004B6C            .F2:
19754                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19755 4B6C           8A46         04            mov	al,4[bp]
19756 4B6F           84C0                       test	al,al
19757 4B71           75           42            jne 	.F0
19758                       00004B73            .F1:
19759                                           ! 2321           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19760                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19761 4B73           8A46         FB            mov	al,-5[bp]
19762 4B76           30E4                       xor	ah,ah
19763 4B78           50                         push	ax
19764                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19765 4B79           8A46         06            mov	al,6[bp]
19766 4B7C           30E4                       xor	ah,ah
19767                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19768 4B7E           B9                   0100  mov	cx,#$100
19769 4B81           F7E9                       imul	cx
19770                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19771                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19772 4B83           05                   0020  add	ax,*$20
19773 4B86           50                         push	ax
19774                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19775 4B87           8B46         F4            mov	ax,-$C[bp]
19776 4B8A           8B4E         F8            mov	cx,-8[bp]
19777 4B8D           F7E9                       imul	cx
19778                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19779 4B8F           0246         0A            add	al,$A[bp]
19780 4B92           80D4                   00  adc	ah,*0
19781                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19782 4B95           D1E0                       shl	ax,*1
19783                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19784                                           ! Debug: expression subtree swapping
19785 4B97           0346         F2            add	ax,-$E[bp]
19786                                           ! Debug: list unsigned int = ax+0 (used reg = )
19787 4B9A           50                         push	ax
19788                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19789 4B9B           8A46         FE            mov	al,-2[bp]
19790 4B9E           30E4                       xor	ah,ah
19791 4BA0           B1                     03  mov	cl,*3
19792 4BA2           D3E0                       shl	ax,cl
19793 4BA4           89C3                       mov	bx,ax
19794 4BA6           81C3                 0204  add	bx,#_vga_modes
19795                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19796 4BAA           FF77         04            push	4[bx]
19797                                           ! Debug: func () void = memsetw+0 (used reg = )
19798 4BAD           E8         3137            call	_memsetw
19799 4BB0           83C4                   08  add	sp,*8
19800                                           !BCC_EOS
19801                                           ! 2322          else
19802                                           ! 2323           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19803 4BB3           EB           5B            jmp .F3
19804                       00004BB5            .F0:
19805                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19806 4BB5           8A46         FB            mov	al,-5[bp]
19807 4BB8           30E4                       xor	ah,ah
19808 4BBA           50                         push	ax
19809                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19810 4BBB           8B46         F4            mov	ax,-$C[bp]
19811 4BBE           0246         04            add	al,4[bp]
19812 4BC1           80D4                   00  adc	ah,*0
19813                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19814 4BC4           8B4E         F8            mov	cx,-8[bp]
19815 4BC7           F7E9                       imul	cx
19816                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19817 4BC9           0246         0A            add	al,$A[bp]
19818 4BCC           80D4                   00  adc	ah,*0
19819                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19820 4BCF           D1E0                       shl	ax,*1
19821                                           ! Debug: list unsigned int = ax+0 (used reg = )
19822 4BD1           50                         push	ax
19823                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19824 4BD2           8A46         FE            mov	al,-2[bp]
19825 4BD5           30E4                       xor	ah,ah
19826 4BD7           B1                     03  mov	cl,*3
19827 4BD9           D3E0                       shl	ax,cl
19828 4BDB           89C3                       mov	bx,ax
19829 4BDD           81C3                 0204  add	bx,#_vga_modes
19830                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19831 4BE1           FF77         04            push	4[bx]
19832                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19833 4BE4           8B46         F4            mov	ax,-$C[bp]
19834 4BE7           8B4E         F8            mov	cx,-8[bp]
19835 4BEA           F7E9                       imul	cx
19836                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19837 4BEC           0246         0A            add	al,$A[bp]
19838 4BEF           80D4                   00  adc	ah,*0
19839                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19840 4BF2           D1E0                       shl	ax,*1
19841                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19842                                           ! Debug: expression subtree swapping
19843 4BF4           0346         F2            add	ax,-$E[bp]
19844                                           ! Debug: list unsigned int = ax+0 (used reg = )
19845 4BF7           50                         push	ax
19846                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19847 4BF8           8A46         FE            mov	al,-2[bp]
19848 4BFB           30E4                       xor	ah,ah
19849 4BFD           B1                     03  mov	cl,*3
19850 4BFF           D3E0                       shl	ax,cl
19851 4C01           89C3                       mov	bx,ax
19852 4C03           81C3                 0204  add	bx,#_vga_modes
19853                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19854 4C07           FF77         04            push	4[bx]
19855                                           ! Debug: func () void = memcpyw+0 (used reg = )
19856 4C0A           E8         312F            call	_memcpyw
19857 4C0D           83C4                   0A  add	sp,*$A
19858                                           !BCC_EOS
19859                                           ! 2324         }
19860                       00004C10            .F3:
19861                                           ! 2325       }
19862                       00004C10            .ED:
19863                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19864 4C10           8B46         F4            mov	ax,-$C[bp]
19865 4C13           40                         inc	ax
19866 4C14           8946         F4            mov	-$C[bp],ax
19867                       00004C17            .EE:
19868                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19869 4C17           8A46         0C            mov	al,$C[bp]
19870 4C1A           30E4                       xor	ah,ah
19871 4C1C           3B46         F4            cmp	ax,-$C[bp]
19872 4C1F         0F83         FF32            bhis	.EF
19873                       00004C23            .F4:
19874                       00004C23            .EC:
19875                                           ! 2326      else
19876                                           ! 2327       {for(i=rlr;i>=rul;i--)
19877 4C23           E9         00DE            br 	.F5
19878                       00004C26            .EA:
19879                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19880 4C26           8A46         0C            mov	al,$C[bp]
19881 4C29           30E4                       xor	ah,ah
19882 4C2B           8946         F4            mov	-$C[bp],ax
19883                                           !BCC_EOS
19884                                           !BCC_EOS
19885                                           ! 2328         {
19886 4C2E           E9         00C7            br 	.F8
19887                       00004C31            .F9:
19888                                           ! 2329          if((i<rul+nblines)||(nblines==0))
19889                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19890 4C31           8A46         08            mov	al,8[bp]
19891 4C34           30E4                       xor	ah,ah
19892 4C36           0246         04            add	al,4[bp]
19893 4C39           80D4                   00  adc	ah,*0
19894                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19895 4C3C           3B46         F4            cmp	ax,-$C[bp]
19896 4C3F           77           07            ja  	.FB
19897                       00004C41            .FC:
19898                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19899 4C41           8A46         04            mov	al,4[bp]
19900 4C44           84C0                       test	al,al
19901 4C46           75           42            jne 	.FA
19902                       00004C48            .FB:
19903                                           ! 2330           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19904                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19905 4C48           8A46         FB            mov	al,-5[bp]
19906 4C4B           30E4                       xor	ah,ah
19907 4C4D           50                         push	ax
19908                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19909 4C4E           8A46         06            mov	al,6[bp]
19910 4C51           30E4                       xor	ah,ah
19911                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19912 4C53           B9                   0100  mov	cx,#$100
19913 4C56           F7E9                       imul	cx
19914                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19915                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19916 4C58           05                   0020  add	ax,*$20
19917 4C5B           50                         push	ax
19918                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19919 4C5C           8B46         F4            mov	ax,-$C[bp]
19920 4C5F           8B4E         F8            mov	cx,-8[bp]
19921 4C62           F7E9                       imul	cx
19922                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19923 4C64           0246         0A            add	al,$A[bp]
19924 4C67           80D4                   00  adc	ah,*0
19925                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19926 4C6A           D1E0                       shl	ax,*1
19927                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19928                                           ! Debug: expression subtree swapping
19929 4C6C           0346         F2            add	ax,-$E[bp]
19930                                           ! Debug: list unsigned int = ax+0 (used reg = )
19931 4C6F           50                         push	ax
19932                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19933 4C70           8A46         FE            mov	al,-2[bp]
19934 4C73           30E4                       xor	ah,ah
19935 4C75           B1                     03  mov	cl,*3
19936 4C77           D3E0                       shl	ax,cl
19937 4C79           89C3                       mov	bx,ax
19938 4C7B           81C3                 0204  add	bx,#_vga_modes
19939                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19940 4C7F           FF77         04            push	4[bx]
19941                                           ! Debug: func () void = memsetw+0 (used reg = )
19942 4C82           E8         3062            call	_memsetw
19943 4C85           83C4                   08  add	sp,*8
19944                                           !BCC_EOS
19945                                           ! 2331          else
19946                                           ! 2332           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19947 4C88           EB           5B            jmp .FD
19948                       00004C8A            .FA:
19949                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19950 4C8A           8A46         FB            mov	al,-5[bp]
19951 4C8D           30E4                       xor	ah,ah
19952 4C8F           50                         push	ax
19953                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19954 4C90           8B46         F4            mov	ax,-$C[bp]
19955 4C93           2A46         04            sub	al,4[bp]
19956 4C96           80DC                   00  sbb	ah,*0
19957                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19958 4C99           8B4E         F8            mov	cx,-8[bp]
19959 4C9C           F7E9                       imul	cx
19960                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19961 4C9E           0246         0A            add	al,$A[bp]
19962 4CA1           80D4                   00  adc	ah,*0
19963                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19964 4CA4           D1E0                       shl	ax,*1
19965                                           ! Debug: list unsigned int = ax+0 (used reg = )
19966 4CA6           50                         push	ax
19967                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19968 4CA7           8A46         FE            mov	al,-2[bp]
19969 4CAA           30E4                       xor	ah,ah
19970 4CAC           B1                     03  mov	cl,*3
19971 4CAE           D3E0                       shl	ax,cl
19972 4CB0           89C3                       mov	bx,ax
19973 4CB2           81C3                 0204  add	bx,#_vga_modes
19974                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19975 4CB6           FF77         04            push	4[bx]
19976                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19977 4CB9           8B46         F4            mov	ax,-$C[bp]
19978 4CBC           8B4E         F8            mov	cx,-8[bp]
19979 4CBF           F7E9                       imul	cx
19980                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19981 4CC1           0246         0A            add	al,$A[bp]
19982 4CC4           80D4                   00  adc	ah,*0
19983                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19984 4CC7           D1E0                       shl	ax,*1
19985                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19986                                           ! Debug: expression subtree swapping
19987 4CC9           0346         F2            add	ax,-$E[bp]
19988                                           ! Debug: list unsigned int = ax+0 (used reg = )
19989 4CCC           50                         push	ax
19990                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19991 4CCD           8A46         FE            mov	al,-2[bp]
19992 4CD0           30E4                       xor	ah,ah
19993 4CD2           B1                     03  mov	cl,*3
19994 4CD4           D3E0                       shl	ax,cl
19995 4CD6           89C3                       mov	bx,ax
19996 4CD8           81C3                 0204  add	bx,#_vga_modes
19997                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19998 4CDC           FF77         04            push	4[bx]
19999                                           ! Debug: func () void = memcpyw+0 (used reg = )
20000 4CDF           E8         305A            call	_memcpyw
20001 4CE2           83C4                   0A  add	sp,*$A
20002                                           !BCC_EOS
20003                                           ! 2333          if (i>rlr) break;
20004                       00004CE5            .FD:
20005                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20006 4CE5           8A46         0C            mov	al,$C[bp]
20007 4CE8           30E4                       xor	ah,ah
20008 4CEA           3B46         F4            cmp	ax,-$C[bp]
20009 4CED           73           02            jae 	.FE
20010                       00004CEF            .FF:
20011 4CEF           EB           13            jmp .F6
20012                                           !BCC_EOS
20013                                           ! 2334         }
20014                       00004CF1            .FE:
20015                                           ! 2335       }
20016                       00004CF1            .F7:
20017                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20018 4CF1           8B46         F4            mov	ax,-$C[bp]
20019 4CF4           48                         dec	ax
20020 4CF5           8946         F4            mov	-$C[bp],ax
20021                       00004CF8            .F8:
20022                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20023 4CF8           8A46         08            mov	al,8[bp]
20024 4CFB           30E4                       xor	ah,ah
20025 4CFD           3B46         F4            cmp	ax,-$C[bp]
20026 4D00         0F86         FF2D            blos	.F9
20027                       00004D04            .100:
20028                       00004D04            .F6:
20029                                           ! 2336     }
20030                       00004D04            .F5:
20031                                           ! 2337   }
20032                       00004D04            .E9:
20033                                           ! 2338  else
20034                                           ! 2339   {
20035 4D04           E9         03E4            br 	.101
20036                       00004D07            .E0:
20037                                           ! 2340    cheight=video_param_table[line_to_vpti[line]].cheight;
20038                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
20039 4D07           8A46         FE            mov	al,-2[bp]
20040 4D0A           30E4                       xor	ah,ah
20041 4D0C           89C3                       mov	bx,ax
20042                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
20043 4D0E           8A87       0284            mov	al,_line_to_vpti[bx]
20044 4D12           30E4                       xor	ah,ah
20045 4D14           B1                     06  mov	cl,*6
20046 4D16           D3E0                       shl	ax,cl
20047 4D18           89C3                       mov	bx,ax
20048 4D1A           81C3                 0298  add	bx,#_video_param_table
20049                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
20050 4D1E           8A47         02            mov	al,2[bx]
20051 4D21           8846         FD            mov	-3[bp],al
20052                                           !BCC_EOS
20053                                           ! 2341    switch(vga_modes[line].memmodel)
20054                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20055 4D24           8A46         FE            mov	al,-2[bp]
20056 4D27           30E4                       xor	ah,ah
20057 4D29           B1                     03  mov	cl,*3
20058 4D2B           D3E0                       shl	ax,cl
20059 4D2D           89C3                       mov	bx,ax
20060 4D2F           81C3                 0204  add	bx,#_vga_modes
20061 4D33           8A47         02            mov	al,2[bx]
20062                                           ! 2342     {
20063 4D36           E9         039E            br 	.104
20064                                           ! 2343      case 0x04:
20065                                           ! 2344      case 0x03:
20066                       00004D39            .105:
20067                                           ! 2345        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20068                       00004D39            .106:
20069                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20070 4D39           8A46         04            mov	al,4[bp]
20071 4D3C           84C0                       test	al,al
20072 4D3E         0F85         0089            bne 	.107
20073                       00004D42            .10C:
20074                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20075 4D42           8A46         08            mov	al,8[bp]
20076 4D45           84C0                       test	al,al
20077 4D47         0F85         0080            bne 	.107
20078                       00004D4B            .10B:
20079                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20080 4D4B           8A46         0A            mov	al,$A[bp]
20081 4D4E           84C0                       test	al,al
20082 4D50           75           79            jne 	.107
20083                       00004D52            .10A:
20084                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20085 4D52           8B46         F6            mov	ax,-$A[bp]
20086                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20087                                           ! Debug: expression subtree swapping
20088 4D55           48                         dec	ax
20089 4D56           50                         push	ax
20090 4D57           8A46         0C            mov	al,$C[bp]
20091 4D5A           30E4                       xor	ah,ah
20092 4D5C           3B46         F0            cmp	ax,0+..FFFC[bp]
20093 4D5F           8D66         F2            lea	sp,2+..FFFC[bp]
20094 4D62           75           67            jne 	.107
20095                       00004D64            .109:
20096                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20097 4D64           8B46         F8            mov	ax,-8[bp]
20098                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20099                                           ! Debug: expression subtree swapping
20100 4D67           48                         dec	ax
20101 4D68           50                         push	ax
20102 4D69           8A46         0E            mov	al,$E[bp]
20103 4D6C           30E4                       xor	ah,ah
20104 4D6E           3B46         F0            cmp	ax,0+..FFFC[bp]
20105 4D71           8D66         F2            lea	sp,2+..FFFC[bp]
20106 4D74           75           55            jne 	.107
20107                       00004D76            .108:
20108                                           ! 2346         {
20109                                           ! 2347          outw(0x3ce, 0x0205);
20110                                           ! Debug: list int = const $205 (used reg = )
20111 4D76           B8                   0205  mov	ax,#$205
20112 4D79           50                         push	ax
20113                                           ! Debug: list int = const $3CE (used reg = )
20114 4D7A           B8                   03CE  mov	ax,#$3CE
20115 4D7D           50                         push	ax
20116                                           ! Debug: func () void = outw+0 (used reg = )
20117 4D7E           E8         3067            call	_outw
20118 4D81           83C4                   04  add	sp,*4
20119                                           !BCC_EOS
20120                                           ! 2348          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
20121                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20122 4D84           8B46         F6            mov	ax,-$A[bp]
20123 4D87           8B4E         F8            mov	cx,-8[bp]
20124 4D8A           F7E9                       imul	cx
20125                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20126 4D8C           89C3                       mov	bx,ax
20127 4D8E           8A46         FD            mov	al,-3[bp]
20128 4D91           30E4                       xor	ah,ah
20129 4D93           93                         xchg	ax,bx
20130 4D94           89D9                       mov	cx,bx
20131 4D96           F7E9                       imul	cx
20132                                           ! Debug: list unsigned int = ax+0 (used reg = )
20133 4D98           50                         push	ax
20134                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20135 4D99           8A46         06            mov	al,6[bp]
20136 4D9C           30E4                       xor	ah,ah
20137 4D9E           50                         push	ax
20138                                           ! Debug: list int = const 0 (used reg = )
20139 4D9F           31C0                       xor	ax,ax
20140 4DA1           50                         push	ax
20141                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20142 4DA2           8A46         FE            mov	al,-2[bp]
20143 4DA5           30E4                       xor	ah,ah
20144 4DA7           B1                     03  mov	cl,*3
20145 4DA9           D3E0                       shl	ax,cl
20146 4DAB           89C3                       mov	bx,ax
20147 4DAD           81C3                 0204  add	bx,#_vga_modes
20148                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20149 4DB1           FF77         04            push	4[bx]
20150                                           ! Debug: func () void = memsetb+0 (used reg = )
20151 4DB4           E8         2F0B            call	_memsetb
20152 4DB7           83C4                   08  add	sp,*8
20153                                           !BCC_EOS
20154                                           ! 2349          outw(0x3ce, 0x0005);
20155                                           ! Debug: list int = const 5 (used reg = )
20156 4DBA           B8                   0005  mov	ax,*5
20157 4DBD           50                         push	ax
20158                                           ! Debug: list int = const $3CE (used reg = )
20159 4DBE           B8                   03CE  mov	ax,#$3CE
20160 4DC1           50                         push	ax
20161                                           ! Debug: func () void = outw+0 (used reg = )
20162 4DC2           E8         3023            call	_outw
20163 4DC5           83C4                   04  add	sp,*4
20164                                           !BCC_EOS
20165                                           ! 2350         }
20166                                           ! 2351        else
20167                                           ! 2352         {
20168 4DC8           E9         0122            br 	.10D
20169                       00004DCB            .107:
20170                                           ! 2353          if(dir==1)
20171                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20172 4DCB           8A46         12            mov	al,$12[bp]
20173 4DCE           3C                     01  cmp	al,*1
20174 4DD0         0F85         008A            bne 	.10E
20175                       00004DD4            .10F:
20176                                           ! 2354           {for(i=rul;i<=rlr;i++)
20177                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20178 4DD4           8A46         08            mov	al,8[bp]
20179 4DD7           30E4                       xor	ah,ah
20180 4DD9           8946         F4            mov	-$C[bp],ax
20181                                           !BCC_EOS
20182                                           !BCC_EOS
20183                                           ! 2355             {
20184 4DDC           EB           73            jmp .112
20185                       00004DDE            .113:
20186                                           ! 2356              if((i+nblines>rlr)||(nblines==0))
20187                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20188 4DDE           8B46         F4            mov	ax,-$C[bp]
20189 4DE1           0246         04            add	al,4[bp]
20190 4DE4           80D4                   00  adc	ah,*0
20191                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20192 4DE7           50                         push	ax
20193 4DE8           8A46         0C            mov	al,$C[bp]
20194 4DEB           30E4                       xor	ah,ah
20195 4DED           3B46         F0            cmp	ax,0+..FFFC[bp]
20196 4DF0           8D66         F2            lea	sp,2+..FFFC[bp]
20197 4DF3           72           07            jb  	.115
20198                       00004DF5            .116:
20199                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20200 4DF5           8A46         04            mov	al,4[bp]
20201 4DF8           84C0                       test	al,al
20202 4DFA           75           26            jne 	.114
20203                       00004DFC            .115:
20204                                           ! 2357               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20205                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20206 4DFC           8A46         06            mov	al,6[bp]
20207 4DFF           30E4                       xor	ah,ah
20208 4E01           50                         push	ax
20209                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20210 4E02           8A46         FD            mov	al,-3[bp]
20211 4E05           30E4                       xor	ah,ah
20212 4E07           50                         push	ax
20213                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20214 4E08           FF76         F8            push	-8[bp]
20215                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20216 4E0B           8A46         FB            mov	al,-5[bp]
20217 4E0E           30E4                       xor	ah,ah
20218 4E10           50                         push	ax
20219                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20220 4E11           FF76         F4            push	-$C[bp]
20221                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20222 4E14           8A46         0A            mov	al,$A[bp]
20223 4E17           30E4                       xor	ah,ah
20224 4E19           50                         push	ax
20225                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20226 4E1A           E8         F952            call	_vgamem_fill_pl4
20227 4E1D           83C4                   0C  add	sp,*$C
20228                                           !BCC_EOS
20229                                           ! 2358              else
20230                                           ! 2359               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20231 4E20           EB           28            jmp .117
20232                       00004E22            .114:
20233                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20234 4E22           8A46         FD            mov	al,-3[bp]
20235 4E25           30E4                       xor	ah,ah
20236 4E27           50                         push	ax
20237                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20238 4E28           FF76         F8            push	-8[bp]
20239                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20240 4E2B           8A46         FB            mov	al,-5[bp]
20241 4E2E           30E4                       xor	ah,ah
20242 4E30           50                         push	ax
20243                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20244 4E31           FF76         F4            push	-$C[bp]
20245                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20246 4E34           8B46         F4            mov	ax,-$C[bp]
20247 4E37           0246         04            add	al,4[bp]
20248 4E3A           80D4                   00  adc	ah,*0
20249                                           ! Debug: list unsigned int = ax+0 (used reg = )
20250 4E3D           50                         push	ax
20251                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20252 4E3E           8A46         0A            mov	al,$A[bp]
20253 4E41           30E4                       xor	ah,ah
20254 4E43           50                         push	ax
20255                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20256 4E44           E8         F866            call	_vgamem_copy_pl4
20257 4E47           83C4                   0C  add	sp,*$C
20258                                           !BCC_EOS
20259                                           ! 2360             }
20260                       00004E4A            .117:
20261                                           ! 2361           }
20262                       00004E4A            .111:
20263                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20264 4E4A           8B46         F4            mov	ax,-$C[bp]
20265 4E4D           40                         inc	ax
20266 4E4E           8946         F4            mov	-$C[bp],ax
20267                       00004E51            .112:
20268                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20269 4E51           8A46         0C            mov	al,$C[bp]
20270 4E54           30E4                       xor	ah,ah
20271 4E56           3B46         F4            cmp	ax,-$C[bp]
20272 4E59           73           83            jae	.113
20273                       00004E5B            .118:
20274                       00004E5B            .110:
20275                                           ! 2362          else
20276                                           ! 2363           {for(i=rlr;i>=rul;i--)
20277 4E5B           E9         008F            br 	.119
20278                       00004E5E            .10E:
20279                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20280 4E5E           8A46         0C            mov	al,$C[bp]
20281 4E61           30E4                       xor	ah,ah
20282 4E63           8946         F4            mov	-$C[bp],ax
20283                                           !BCC_EOS
20284                                           !BCC_EOS
20285                                           ! 2364             {
20286 4E66           E9         0078            br 	.11C
20287                       00004E69            .11D:
20288                                           ! 2365              if((i<rul+nblines)||(nblines==0))
20289                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20290 4E69           8A46         08            mov	al,8[bp]
20291 4E6C           30E4                       xor	ah,ah
20292 4E6E           0246         04            add	al,4[bp]
20293 4E71           80D4                   00  adc	ah,*0
20294                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20295 4E74           3B46         F4            cmp	ax,-$C[bp]
20296 4E77           77           07            ja  	.11F
20297                       00004E79            .120:
20298                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20299 4E79           8A46         04            mov	al,4[bp]
20300 4E7C           84C0                       test	al,al
20301 4E7E           75           26            jne 	.11E
20302                       00004E80            .11F:
20303                                           ! 2366               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20304                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20305 4E80           8A46         06            mov	al,6[bp]
20306 4E83           30E4                       xor	ah,ah
20307 4E85           50                         push	ax
20308                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20309 4E86           8A46         FD            mov	al,-3[bp]
20310 4E89           30E4                       xor	ah,ah
20311 4E8B           50                         push	ax
20312                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20313 4E8C           FF76         F8            push	-8[bp]
20314                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20315 4E8F           8A46         FB            mov	al,-5[bp]
20316 4E92           30E4                       xor	ah,ah
20317 4E94           50                         push	ax
20318                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20319 4E95           FF76         F4            push	-$C[bp]
20320                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20321 4E98           8A46         0A            mov	al,$A[bp]
20322 4E9B           30E4                       xor	ah,ah
20323 4E9D           50                         push	ax
20324                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20325 4E9E           E8         F8CE            call	_vgamem_fill_pl4
20326 4EA1           83C4                   0C  add	sp,*$C
20327                                           !BCC_EOS
20328                                           ! 2367              else
20329                                           ! 2368               vgamem_copy_pl4
20330                                           ! 2368 (cul,i,i-nblines,cols,nbcols,cheight);
20331 4EA4           EB           28            jmp .121
20332                       00004EA6            .11E:
20333                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20334 4EA6           8A46         FD            mov	al,-3[bp]
20335 4EA9           30E4                       xor	ah,ah
20336 4EAB           50                         push	ax
20337                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20338 4EAC           FF76         F8            push	-8[bp]
20339                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20340 4EAF           8A46         FB            mov	al,-5[bp]
20341 4EB2           30E4                       xor	ah,ah
20342 4EB4           50                         push	ax
20343                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20344 4EB5           8B46         F4            mov	ax,-$C[bp]
20345 4EB8           2A46         04            sub	al,4[bp]
20346 4EBB           80DC                   00  sbb	ah,*0
20347                                           ! Debug: list unsigned int = ax+0 (used reg = )
20348 4EBE           50                         push	ax
20349                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20350 4EBF           FF76         F4            push	-$C[bp]
20351                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20352 4EC2           8A46         0A            mov	al,$A[bp]
20353 4EC5           30E4                       xor	ah,ah
20354 4EC7           50                         push	ax
20355                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20356 4EC8           E8         F7E2            call	_vgamem_copy_pl4
20357 4ECB           83C4                   0C  add	sp,*$C
20358                                           !BCC_EOS
20359                                           ! 2369              if (i>rlr) break;
20360                       00004ECE            .121:
20361                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20362 4ECE           8A46         0C            mov	al,$C[bp]
20363 4ED1           30E4                       xor	ah,ah
20364 4ED3           3B46         F4            cmp	ax,-$C[bp]
20365 4ED6           73           02            jae 	.122
20366                       00004ED8            .123:
20367 4ED8           EB           13            jmp .11A
20368                                           !BCC_EOS
20369                                           ! 2370             }
20370                       00004EDA            .122:
20371                                           ! 2371           }
20372                       00004EDA            .11B:
20373                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20374 4EDA           8B46         F4            mov	ax,-$C[bp]
20375 4EDD           48                         dec	ax
20376 4EDE           8946         F4            mov	-$C[bp],ax
20377                       00004EE1            .11C:
20378                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20379 4EE1           8A46         08            mov	al,8[bp]
20380 4EE4           30E4                       xor	ah,ah
20381 4EE6           3B46         F4            cmp	ax,-$C[bp]
20382 4EE9         0F86         FF7C            blos	.11D
20383                       00004EED            .124:
20384                       00004EED            .11A:
20385                                           ! 2372         }
20386                       00004EED            .119:
20387                                           ! 2373        break;
20388                       00004EED            .10D:
20389 4EED           E9         01FB            br 	.102
20390                                           !BCC_EOS
20391                                           ! 2374      case 0x02:
20392                                           ! 2375        bpp=vga_modes[line].pixbits;
20393                       00004EF0            .125:
20394                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20395 4EF0           8A46         FE            mov	al,-2[bp]
20396 4EF3           30E4                       xor	ah,ah
20397 4EF5           B1                     03  mov	cl,*3
20398 4EF7           D3E0                       shl	ax,cl
20399 4EF9           89C3                       mov	bx,ax
20400 4EFB           81C3                 0204  add	bx,#_vga_modes
20401                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20402 4EFF           8A47         03            mov	al,3[bx]
20403 4F02           8846         FC            mov	-4[bp],al
20404                                           !BCC_EOS
20405                                           ! 2376        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20406                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20407 4F05           8A46         04            mov	al,4[bp]
20408 4F08           84C0                       test	al,al
20409 4F0A           75           77            jne 	.126
20410                       00004F0C            .12B:
20411                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20412 4F0C           8A46         08            mov	al,8[bp]
20413 4F0F           84C0                       test	al,al
20414 4F11           75           70            jne 	.126
20415                       00004F13            .12A:
20416                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20417 4F13           8A46         0A            mov	al,$A[bp]
20418 4F16           84C0                       test	al,al
20419 4F18           75           69            jne 	.126
20420                       00004F1A            .129:
20421                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20422 4F1A           8B46         F6            mov	ax,-$A[bp]
20423                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20424                                           ! Debug: expression subtree swapping
20425 4F1D           48                         dec	ax
20426 4F1E           50                         push	ax
20427 4F1F           8A46         0C            mov	al,$C[bp]
20428 4F22           30E4                       xor	ah,ah
20429 4F24           3B46         F0            cmp	ax,0+..FFFC[bp]
20430 4F27           8D66         F2            lea	sp,2+..FFFC[bp]
20431 4F2A           75           57            jne 	.126
20432                       00004F2C            .128:
20433                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20434 4F2C           8B46         F8            mov	ax,-8[bp]
20435                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20436                                           ! Debug: expression subtree swapping
20437 4F2F           48                         dec	ax
20438 4F30           50                         push	ax
20439 4F31           8A46         0E            mov	al,$E[bp]
20440 4F34           30E4                       xor	ah,ah
20441 4F36           3B46         F0            cmp	ax,0+..FFFC[bp]
20442 4F39           8D66         F2            lea	sp,2+..FFFC[bp]
20443 4F3C           75           45            jne 	.126
20444                       00004F3E            .127:
20445                                           ! 2377         {
20446                                           ! 2378          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20447                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20448 4F3E           8B46         F6            mov	ax,-$A[bp]
20449 4F41           8B4E         F8            mov	cx,-8[bp]
20450 4F44           F7E9                       imul	cx
20451                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20452 4F46           89C3                       mov	bx,ax
20453 4F48           8A46         FD            mov	al,-3[bp]
20454 4F4B           30E4                       xor	ah,ah
20455 4F4D           93                         xchg	ax,bx
20456 4F4E           89D9                       mov	cx,bx
20457 4F50           F7E9                       imul	cx
20458                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20459 4F52           89C3                       mov	bx,ax
20460 4F54           8A46         FC            mov	al,-4[bp]
20461 4F57           30E4                       xor	ah,ah
20462 4F59           93                         xchg	ax,bx
20463 4F5A           89D9                       mov	cx,bx
20464 4F5C           F7E9                       imul	cx
20465                                           ! Debug: list unsigned int = ax+0 (used reg = )
20466 4F5E           50                         push	ax
20467                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20468 4F5F           8A46         06            mov	al,6[bp]
20469 4F62           30E4                       xor	ah,ah
20470 4F64           50                         push	ax
20471                                           ! Debug: list int = const 0 (used reg = )
20472 4F65           31C0                       xor	ax,ax
20473 4F67           50                         push	ax
20474                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20475 4F68           8A46         FE            mov	al,-2[bp]
20476 4F6B           30E4                       xor	ah,ah
20477 4F6D           B1                     03  mov	cl,*3
20478 4F6F           D3E0                       shl	ax,cl
20479 4F71           89C3                       mov	bx,ax
20480 4F73           81C3                 0204  add	bx,#_vga_modes
20481                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20482 4F77           FF77         04            push	4[bx]
20483                                           ! Debug: func () void = memsetb+0 (used reg = )
20484 4F7A           E8         2D45            call	_memsetb
20485 4F7D           83C4                   08  add	sp,*8
20486                                           !BCC_EOS
20487                                           ! 2379         }
20488                                           ! 2380        else
20489                                           ! 2381         {
20490 4F80           E9         0144            br 	.12C
20491                       00004F83            .126:
20492                                           ! 2382          if(bpp==2)
20493                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20494 4F83           8A46         FC            mov	al,-4[bp]
20495 4F86           3C                     02  cmp	al,*2
20496 4F88           75           1C            jne 	.12D
20497                       00004F8A            .12E:
20498                                           ! 2383           {
20499                                           ! 2384            cul<<=1;
20500                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20501 4F8A           8A46         0A            mov	al,$A[bp]
20502 4F8D           30E4                       xor	ah,ah
20503 4F8F           D1E0                       shl	ax,*1
20504 4F91           8846         0A            mov	$A[bp],al
20505                                           !BCC_EOS
20506                                           ! 2385            cols<<=1;
20507                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20508 4F94           8A46         FB            mov	al,-5[bp]
20509 4F97           30E4                       xor	ah,ah
20510 4F99           D1E0                       shl	ax,*1
20511 4F9B           8846         FB            mov	-5[bp],al
20512                                           !BCC_EOS
20513                                           ! 2386            nbcols<<=1;
20514                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20515 4F9E           8B46         F8            mov	ax,-8[bp]
20516 4FA1           D1E0                       shl	ax,*1
20517 4FA3           8946         F8            mov	-8[bp],ax
20518                                           !BCC_EOS
20519                                           ! 2387           }
20520                                           ! 2388          if(dir==1)
20521                       00004FA6            .12D:
20522                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20523 4FA6           8A46         12            mov	al,$12[bp]
20524 4FA9           3C                     01  cmp	al,*1
20525 4FAB         0F85         008A            bne 	.12F
20526                       00004FAF            .130:
20527                                           ! 2389           {for(i=rul;i<=rlr;i++)
20528                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20529 4FAF           8A46         08            mov	al,8[bp]
20530 4FB2           30E4                       xor	ah,ah
20531 4FB4           8946         F4            mov	-$C[bp],ax
20532                                           !BCC_EOS
20533                                           !BCC_EOS
20534                                           ! 2390             {
20535 4FB7           EB           73            jmp .133
20536                       00004FB9            .134:
20537                                           ! 2391              if((i+nblines>rlr)||(nblines==0))
20538                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20539 4FB9           8B46         F4            mov	ax,-$C[bp]
20540 4FBC           0246         04            add	al,4[bp]
20541 4FBF           80D4                   00  adc	ah,*0
20542                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20543 4FC2           50                         push	ax
20544 4FC3           8A46         0C            mov	al,$C[bp]
20545 4FC6           30E4                       xor	ah,ah
20546 4FC8           3B46         F0            cmp	ax,0+..FFFC[bp]
20547 4FCB           8D66         F2            lea	sp,2+..FFFC[bp]
20548 4FCE           72           07            jb  	.136
20549                       00004FD0            .137:
20550                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20551 4FD0           8A46         04            mov	al,4[bp]
20552 4FD3           84C0                       test	al,al
20553 4FD5           75           26            jne 	.135
20554                       00004FD7            .136:
20555                                           ! 2392               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20556                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20557 4FD7           8A46         06            mov	al,6[bp]
20558 4FDA           30E4                       xor	ah,ah
20559 4FDC           50                         push	ax
20560                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20561 4FDD           8A46         FD            mov	al,-3[bp]
20562 4FE0           30E4                       xor	ah,ah
20563 4FE2           50                         push	ax
20564                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20565 4FE3           FF76         F8            push	-8[bp]
20566                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20567 4FE6           8A46         FB            mov	al,-5[bp]
20568 4FE9           30E4                       xor	ah,ah
20569 4FEB           50                         push	ax
20570                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20571 4FEC           FF76         F4            push	-$C[bp]
20572                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20573 4FEF           8A46         0A            mov	al,$A[bp]
20574 4FF2           30E4                       xor	ah,ah
20575 4FF4           50                         push	ax
20576                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20577 4FF5           E8         F914            call	_vgamem_fill_cga
20578 4FF8           83C4                   0C  add	sp,*$C
20579                                           !BCC_EOS
20580                                           ! 2393              else
20581                                           ! 2394               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20582 4FFB           EB           28            jmp .138
20583                       00004FFD            .135:
20584                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20585 4FFD           8A46         FD            mov	al,-3[bp]
20586 5000           30E4                       xor	ah,ah
20587 5002           50                         push	ax
20588                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20589 5003           FF76         F8            push	-8[bp]
20590                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20591 5006           8A46         FB            mov	al,-5[bp]
20592 5009           30E4                       xor	ah,ah
20593 500B           50                         push	ax
20594                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20595 500C           FF76         F4            push	-$C[bp]
20596                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20597 500F           8B46         F4            mov	ax,-$C[bp]
20598 5012           0246         04            add	al,4[bp]
20599 5015           80D4                   00  adc	ah,*0
20600                                           ! Debug: list unsigned int = ax+0 (used reg = )
20601 5018           50                         push	ax
20602                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20603 5019           8A46         0A            mov	al,$A[bp]
20604 501C           30E4                       xor	ah,ah
20605 501E           50                         push	ax
20606                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20607 501F           E8         F7D8            call	_vgamem_copy_cga
20608 5022           83C4                   0C  add	sp,*$C
20609                                           !BCC_EOS
20610                                           ! 2395             }
20611                       00005025            .138:
20612                                           ! 2396           }
20613                       00005025            .132:
20614                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20615 5025           8B46         F4            mov	ax,-$C[bp]
20616 5028           40                         inc	ax
20617 5029           8946         F4            mov	-$C[bp],ax
20618                       0000502C            .133:
20619                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20620 502C           8A46         0C            mov	al,$C[bp]
20621 502F           30E4                       xor	ah,ah
20622 5031           3B46         F4            cmp	ax,-$C[bp]
20623 5034           73           83            jae	.134
20624                       00005036            .139:
20625                       00005036            .131:
20626                                           ! 2397          else
20627                                           ! 2398           {for(i=rlr;i>=rul;i--)
20628 5036           E9         008E            br 	.13A
20629                       00005039            .12F:
20630                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20631 5039           8A46         0C            mov	al,$C[bp]
20632 503C           30E4                       xor	ah,ah
20633 503E           8946         F4            mov	-$C[bp],ax
20634                                           !BCC_EOS
20635                                           !BCC_EOS
20636                                           ! 2399             {
20637 5041           EB           78            jmp .13D
20638                       00005043            .13E:
20639                                           ! 2400              if((i<rul+nblines)||(nblines==0))
20640                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20641 5043           8A46         08            mov	al,8[bp]
20642 5046           30E4                       xor	ah,ah
20643 5048           0246         04            add	al,4[bp]
20644 504B           80D4                   00  adc	ah,*0
20645                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20646 504E           3B46         F4            cmp	ax,-$C[bp]
20647 5051           77           07            ja  	.140
20648                       00005053            .141:
20649                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20650 5053           8A46         04            mov	al,4[bp]
20651 5056           84C0                       test	al,al
20652 5058           75           26            jne 	.13F
20653                       0000505A            .140:
20654                                           ! 2401               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20655                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20656 505A           8A46         06            mov	al,6[bp]
20657 505D           30E4                       xor	ah,ah
20658 505F           50                         push	ax
20659                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20660 5060           8A46         FD            mov	al,-3[bp]
20661 5063           30E4                       xor	ah,ah
20662 5065           50                         push	ax
20663                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20664 5066           FF76         F8            push	-8[bp]
20665                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20666 5069           8A46         FB            mov	al,-5[bp]
20667 506C           30E4                       xor	ah,ah
20668 506E           50                         push	ax
20669                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20670 506F           FF76         F4            push	-$C[bp]
20671                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20672 5072           8A46         0A            mov	al,$A[bp]
20673 5075           30E4                       xor	ah,ah
20674 5077           50                         push	ax
20675                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20676 5078           E8         F891            call	_vgamem_fill_cga
20677 507B           83C4                   0C  add	sp,*$C
20678                                           !BCC_EOS
20679                                           ! 2402              else
20680                                           ! 2403               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20681 507E           EB           28            jmp .142
20682                       00005080            .13F:
20683                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20684 5080           8A46         FD            mov	al,-3[bp]
20685 5083           30E4                       xor	ah,ah
20686 5085           50                         push	ax
20687                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20688 5086           FF76         F8            push	-8[bp]
20689                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20690 5089           8A46         FB            mov	al,-5[bp]
20691 508C           30E4                       xor	ah,ah
20692 508E           50                         push	ax
20693                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20694 508F           8B46         F4            mov	ax,-$C[bp]
20695 5092           2A46         04            sub	al,4[bp]
20696 5095           80DC                   00  sbb	ah,*0
20697                                           ! Debug: list unsigned int = ax+0 (used reg = )
20698 5098           50                         push	ax
20699                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20700 5099           FF76         F4            push	-$C[bp]
20701                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20702 509C           8A46         0A            mov	al,$A[bp]
20703 509F           30E4                       xor	ah,ah
20704 50A1           50                         push	ax
20705                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20706 50A2           E8         F755            call	_vgamem_copy_cga
20707 50A5           83C4                   0C  add	sp,*$C
20708                                           !BCC_EOS
20709                                           ! 2404              if (i>rlr) break;
20710                       000050A8            .142:
20711                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20712 50A8           8A46         0C            mov	al,$C[bp]
20713 50AB           30E4                       xor	ah,ah
20714 50AD           3B46         F4            cmp	ax,-$C[bp]
20715 50B0           73           02            jae 	.143
20716                       000050B2            .144:
20717 50B2           EB           13            jmp .13B
20718                                           !BCC_EOS
20719                                           ! 2405             }
20720                       000050B4            .143:
20721                                           ! 2406           }
20722                       000050B4            .13C:
20723                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20724 50B4           8B46         F4            mov	ax,-$C[bp]
20725 50B7           48                         dec	ax
20726 50B8           8946         F4            mov	-$C[bp],ax
20727                       000050BB            .13D:
20728                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20729 50BB           8A46         08            mov	al,8[bp]
20730 50BE           30E4                       xor	ah,ah
20731 50C0           3B46         F4            cmp	ax,-$C[bp]
20732 50C3         0F86         FF7C            blos	.13E
20733                       000050C7            .145:
20734                       000050C7            .13B:
20735                                           ! 2407         }
20736                       000050C7            .13A:
20737                                           ! 2408        break;
20738                       000050C7            .12C:
20739 50C7           EB           22            jmp .102
20740                                           !BCC_EOS
20741                                           ! 2409      default:
20742                                           ! 2410        printf("Scroll in graphics mode ");
20743                       000050C9            .146:
20744                                           ! Debug: list * char = .147+0 (used reg = )
20745 50C9           BB                   A135  mov	bx,#.147
20746 50CC           53                         push	bx
20747                                           ! Debug: func () void = printf+0 (used reg = )
20748 50CD           E8         2D47            call	_printf
20749 50D0           44                         inc	sp
20750 50D1           44                         inc	sp
20751                                           !BCC_EOS
20752                                           ! 2411        unimplemented();
20753                                           ! Debug: func () void = unimplemented+0 (used reg = )
20754 50D2           E8         2D26            call	_unimplemented
20755                                           !BCC_EOS
20756                                           ! 2412     }
20757                                           ! 2413   }
20758 50D5           EB           14            jmp .102
20759                       000050D7            .104:
20760 50D7           2C                     02  sub	al,*2
20761 50D9         0F84         FE13            beq 	.125
20762 50DD           2C                     01  sub	al,*1
20763 50DF         0F84         FC56            beq 	.106
20764 50E3           2C                     01  sub	al,*1
20765 50E5         0F84         FC50            beq 	.105
20766 50E9           EB           DE            jmp	.146
20767                       000050EB            .102:
20768                       FFFFFFF0            ..FFFC	=	-$10
20769                                           ! 2414 }
20770                       000050EB            .101:
20771 50EB           89EC                       mov	sp,bp
20772 50ED           5D                         pop	bp
20773 50EE           C3                         ret
20774                                           ! 2415 static void biosfn_read_char_attr (page,car)
20775                                           ! Register BX used in function biosfn_scroll
20776                                           ! 2416 Bit8u page;Bit16u *car;
20777                       000050EF            _biosfn_read_char_attr:
20778                                           !BCC_EOS
20779                                           !BCC_EOS
20780                                           ! 2417 {Bit16u ss=get_SS();
20781 50EF           55                         push	bp
20782 50F0           89E5                       mov	bp,sp
20783 50F2           4C                         dec	sp
20784 50F3           4C                         dec	sp
20785                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20786 50F4           E8         2D01            call	_get_SS
20787                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20788 50F7           8946         FE            mov	-2[bp],ax
20789                                           !BCC_EOS
20790                                           ! 2418  Bit8u xcurs,ycurs,mode,line;
20791                                           !BCC_EOS
20792                                           ! 2419  Bit16u nbcols,nbrows,address;
20793                                           !BCC_EOS
20794                                           ! 2420  Bit16u cursor,dummy;
20795                                           !BCC_EOS
20796                                           ! 2421  mode=read_byte(0x40,0x49);
20797 50FA           83C4                   F2  add	sp,*-$E
20798                                           ! Debug: list int = const $49 (used reg = )
20799 50FD           B8                   0049  mov	ax,*$49
20800 5100           50                         push	ax
20801                                           ! Debug: list int = const $40 (used reg = )
20802 5101           B8                   0040  mov	ax,*$40
20803 5104           50                         push	ax
20804                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20805 5105           E8         2C64            call	_read_byte
20806 5108           83C4                   04  add	sp,*4
20807                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20808 510B           8846         FB            mov	-5[bp],al
20809                                           !BCC_EOS
20810                                           ! 2422  line=find_vga_entry(mode);
20811                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20812 510E           8A46         FB            mov	al,-5[bp]
20813 5111           30E4                       xor	ah,ah
20814 5113           50                         push	ax
20815                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20816 5114           E8         2B69            call	_find_vga_entry
20817 5117           44                         inc	sp
20818 5118           44                         inc	sp
20819                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20820 5119           8846         FA            mov	-6[bp],al
20821                                           !BCC_EOS
20822                                           ! 2423  if(line==0xFF)return;
20823                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20824 511C           8A46         FA            mov	al,-6[bp]
20825 511F           3C                     FF  cmp	al,#$FF
20826 5121           75           04            jne 	.148
20827                       00005123            .149:
20828 5123           89EC                       mov	sp,bp
20829 5125           5D                         pop	bp
20830 5126           C3                         ret
20831                                           !BCC_EOS
20832                                           ! 2424  biosfn_get_cursor_pos(page,&dummy,&cursor);
20833                       00005127            .148:
20834                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20835 5127           8D5E         F2            lea	bx,-$E[bp]
20836 512A           53                         push	bx
20837                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20838 512B           8D5E         F0            lea	bx,-$10[bp]
20839 512E           53                         push	bx
20840                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20841 512F           8A46         04            mov	al,4[bp]
20842 5132           30E4                       xor	ah,ah
20843 5134           50                         push	ax
20844                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20845 5135           E8         F37E            call	_biosfn_get_cursor_pos
20846 5138           83C4                   06  add	sp,*6
20847                                           !BCC_EOS
20848                                           ! 2425  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20849                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20850 513B           8A46         F2            mov	al,-$E[bp]
20851                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20852 513E           8846         FD            mov	-3[bp],al
20853                                           !BCC_EOS
20854                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20855 5141           8B46         F2            mov	ax,-$E[bp]
20856 5144           30C0                       xor	al,al
20857                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20858 5146           88E0                       mov	al,ah
20859 5148           30E4                       xor	ah,ah
20860                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20861 514A           8846         FC            mov	-4[bp],al
20862                                           !BCC_EOS
20863                                           ! 2426  nbrows=read_byte(0x40,0x84)+1;
20864                                           ! Debug: list int = const $84 (used reg = )
20865 514D           B8                   0084  mov	ax,#$84
20866 5150           50                         push	ax
20867                                           ! Debug: list int = const $40 (used reg = )
20868 5151           B8                   0040  mov	ax,*$40
20869 5154           50                         push	ax
20870                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20871 5155           E8         2C14            call	_read_byte
20872 5158           83C4                   04  add	sp,*4
20873                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20874 515B           30E4                       xor	ah,ah
20875                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20876 515D           40                         inc	ax
20877 515E           8946         F6            mov	-$A[bp],ax
20878                                           !BCC_EOS
20879                                           ! 2427  nbcols=read_word(0x40,0x4A);
20880                                           ! Debug: list int = const $4A (used reg = )
20881 5161           B8                   004A  mov	ax,*$4A
20882 5164           50                         push	ax
20883                                           ! Debug: list int = const $40 (used reg = )
20884 5165           B8                   0040  mov	ax,*$40
20885 5168           50                         push	ax
20886                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20887 5169           E8         2C13            call	_read_word
20888 516C           83C4                   04  add	sp,*4
20889                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20890 516F           8946         F8            mov	-8[bp],ax
20891                                           !BCC_EOS
20892                                           ! 2428  if(vga_modes[line].class==0x00)
20893                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20894 5172           8A46         FA            mov	al,-6[bp]
20895 5175           30E4                       xor	ah,ah
20896 5177           B1                     03  mov	cl,*3
20897 5179           D3E0                       shl	ax,cl
20898 517B           89C3                       mov	bx,ax
20899 517D           81C3                 0204  add	bx,#_vga_modes
20900                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20901 5181           8A47         01            mov	al,1[bx]
20902 5184           84C0                       test	al,al
20903 5186           75           5E            jne 	.14A
20904                       00005188            .14B:
20905                                           ! 2429   {
20906                                           ! 2430    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20907                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20908 5188           8A46         FC            mov	al,-4[bp]
20909 518B           30E4                       xor	ah,ah
20910 518D           8B4E         F8            mov	cx,-8[bp]
20911 5190           F7E9                       imul	cx
20912                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20913                                           ! Debug: expression subtree swapping
20914 5192           0246         FD            add	al,-3[bp]
20915 5195           80D4                   00  adc	ah,*0
20916                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20917 5198           D1E0                       shl	ax,*1
20918 519A           50                         push	ax
20919                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20920 519B           8B46         F8            mov	ax,-8[bp]
20921 519E           8B4E         F6            mov	cx,-$A[bp]
20922 51A1           F7E9                       imul	cx
20923                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20924 51A3           D1E0                       shl	ax,*1
20925                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20926 51A5           0C                     FF  or	al,#$FF
20927                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20928                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20929 51A7           89C3                       mov	bx,ax
20930 51A9           8A46         04            mov	al,4[bp]
20931 51AC           30E4                       xor	ah,ah
20932 51AE           93                         xchg	ax,bx
20933 51AF           40                         inc	ax
20934 51B0           89D9                       mov	cx,bx
20935 51B2           F7E9                       imul	cx
20936                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20937 51B4           0346         EE            add	ax,-$12[bp]
20938 51B7           44                         inc	sp
20939 51B8           44                         inc	sp
20940                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20941 51B9           8946         F4            mov	-$C[bp],ax
20942                                           !BCC_EOS
20943                                           ! 2431    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20944                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20945 51BC           FF76         F4            push	-$C[bp]
20946                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20947 51BF           8A46         FA            mov	al,-6[bp]
20948 51C2           30E4                       xor	ah,ah
20949 51C4           B1                     03  mov	cl,*3
20950 51C6           D3E0                       shl	ax,cl
20951 51C8           89C3                       mov	bx,ax
20952 51CA           81C3                 0204  add	bx,#_vga_modes
20953                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20954 51CE           FF77         04            push	4[bx]
20955                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20956 51D1           E8         2BAB            call	_read_word
20957 51D4           83C4                   04  add	sp,*4
20958                                           ! Debug: list unsigned short = ax+0 (used reg = )
20959 51D7           50                         push	ax
20960                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20961 51D8           FF76         06            push	6[bp]
20962                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20963 51DB           FF76         FE            push	-2[bp]
20964                                           ! Debug: func () void = write_word+0 (used reg = )
20965 51DE           E8         2BC9            call	_write_word
20966 51E1           83C4                   06  add	sp,*6
20967                                           !BCC_EOS
20968                                           ! 2432   }
20969                                           ! 2433  else
20970                                           ! 2434   {
20971 51E4           EB           03            jmp .14C
20972                       000051E6            .14A:
20973                                           ! 2435    unimplemented();
20974                                           ! Debug: func () void = unimplemented+0 (used reg = )
20975 51E6           E8         2C12            call	_unimplemented
20976                                           !BCC_EOS
20977                                           ! 2436   }
20978                                           ! 2437 }
20979                       000051E9            .14C:
20980 51E9           89EC                       mov	sp,bp
20981 51EB           5D                         pop	bp
20982 51EC           C3                         ret
20983                                           ! 2438 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20984                                           ! Register BX used in function biosfn_read_char_attr
20985                                           ! 2439 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20986                       000051ED            _write_gfx_char_pl4:
20987                                           !BCC_EOS
20988                                           !BCC_EOS
20989                                           !BCC_EOS
20990                                           !BCC_EOS
20991                                           !BCC_EOS
20992                                           !BCC_EOS
20993                                           ! 2440 {
20994                                           ! 2441  Bit8u i,j,mask;
20995                                           !BCC_EOS
20996                                           ! 2442  Bit8u *fdata;
20997                                           !BCC_EOS
20998                                           ! 2443  Bit16u addr,dest,src;
20999                                           !BCC_EOS
21000                                           ! 2444  switch(cheight)
21001 51ED           55                         push	bp
21002 51EE           89E5                       mov	bp,sp
21003 51F0           83C4                   F4  add	sp,*-$C
21004 51F3           8A46         0E            mov	al,$E[bp]
21005                                           ! 2445   {case 14:
21006 51F6           EB           18            jmp .14F
21007                                           ! 2446     fdata = &vg
21008                       000051F8            .150:
21009                                           ! 2446 afont14;
21010                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21011 51F8           BB                   1768  mov	bx,#_vgafont14
21012 51FB           895E         FA            mov	-6[bp],bx
21013                                           !BCC_EOS
21014                                           ! 2447     break;
21015 51FE           EB           1A            jmp .14D
21016                                           !BCC_EOS
21017                                           ! 2448    case 16:
21018                                           ! 2449     fdata = &vgafont16;
21019                       00005200            .151:
21020                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21021 5200           BB                   2568  mov	bx,#_vgafont16
21022 5203           895E         FA            mov	-6[bp],bx
21023                                           !BCC_EOS
21024                                           ! 2450     break;
21025 5206           EB           12            jmp .14D
21026                                           !BCC_EOS
21027                                           ! 2451    default:
21028                                           ! 2452     fdata = &vgafont8;
21029                       00005208            .152:
21030                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21031 5208           BB                   0F68  mov	bx,#_vgafont8
21032 520B           895E         FA            mov	-6[bp],bx
21033                                           !BCC_EOS
21034                                           ! 2453   }
21035                                           ! 2454  addr=xcurs+ycurs*cheight*nbcols;
21036 520E           EB           0A            jmp .14D
21037                       00005210            .14F:
21038 5210           2C                     0E  sub	al,*$E
21039 5212           74           E4            je 	.150
21040 5214           2C                     02  sub	al,*2
21041 5216           74           E8            je 	.151
21042 5218           EB           EE            jmp	.152
21043                       0000521A            .14D:
21044                       FFFFFFF2            ..FFFB	=	-$E
21045                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
21046 521A           8A46         0E            mov	al,$E[bp]
21047 521D           30E4                       xor	ah,ah
21048 521F           89C3                       mov	bx,ax
21049 5221           8A46         0A            mov	al,$A[bp]
21050 5224           30E4                       xor	ah,ah
21051 5226           89D9                       mov	cx,bx
21052 5228           F7E9                       imul	cx
21053                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
21054 522A           89C3                       mov	bx,ax
21055 522C           8A46         0C            mov	al,$C[bp]
21056 522F           30E4                       xor	ah,ah
21057 5231           93                         xchg	ax,bx
21058 5232           89D9                       mov	cx,bx
21059 5234           F7E9                       imul	cx
21060                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
21061                                           ! Debug: expression subtree swapping
21062 5236           0246         08            add	al,8[bp]
21063 5239           80D4                   00  adc	ah,*0
21064                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21065 523C           8946         F8            mov	-8[bp],ax
21066                                           !BCC_EOS
21067                                           ! 2455  src = car * cheight;
21068                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
21069 523F           8A46         0E            mov	al,$E[bp]
21070 5242           30E4                       xor	ah,ah
21071 5244           89C3                       mov	bx,ax
21072 5246           8A46         04            mov	al,4[bp]
21073 5249           30E4                       xor	ah,ah
21074 524B           89D9                       mov	cx,bx
21075 524D           F7E9                       imul	cx
21076                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21077 524F           8946         F4            mov	-$C[bp],ax
21078                                           !BCC_EOS
21079                                           ! 2456  outw(0x3c4, 0x0f02);
21080                                           ! Debug: list int = const $F02 (used reg = )
21081 5252           B8                   0F02  mov	ax,#$F02
21082 5255           50                         push	ax
21083                                           ! Debug: list int = const $3C4 (used reg = )
21084 5256           B8                   03C4  mov	ax,#$3C4
21085 5259           50                         push	ax
21086                                           ! Debug: func () void = outw+0 (used reg = )
21087 525A           E8         2B8B            call	_outw
21088 525D           83C4                   04  add	sp,*4
21089                                           !BCC_EOS
21090                                           ! 2457  outw(0x3ce, 0x0205);
21091                                           ! Debug: list int = const $205 (used reg = )
21092 5260           B8                   0205  mov	ax,#$205
21093 5263           50                         push	ax
21094                                           ! Debug: list int = const $3CE (used reg = )
21095 5264           B8                   03CE  mov	ax,#$3CE
21096 5267           50                         push	ax
21097                                           ! Debug: func () void = outw+0 (used reg = )
21098 5268           E8         2B7D            call	_outw
21099 526B           83C4                   04  add	sp,*4
21100                                           !BCC_EOS
21101                                           ! 2458  if(attr&0x80)
21102                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21103 526E           8A46         06            mov	al,6[bp]
21104 5271           24                     80  and	al,#$80
21105 5273           84C0                       test	al,al
21106 5275           74           10            je  	.153
21107                       00005277            .154:
21108                                           ! 2459   {
21109                                           ! 2460    outw(0x3ce, 0x1803);
21110                                           ! Debug: list int = const $1803 (used reg = )
21111 5277           B8                   1803  mov	ax,#$1803
21112 527A           50                         push	ax
21113                                           ! Debug: list int = const $3CE (used reg = )
21114 527B           B8                   03CE  mov	ax,#$3CE
21115 527E           50                         push	ax
21116                                           ! Debug: func () void = outw+0 (used reg = )
21117 527F           E8         2B66            call	_outw
21118 5282           83C4                   04  add	sp,*4
21119                                           !BCC_EOS
21120                                           ! 2461   }
21121                                           ! 2462  else
21122                                           ! 2463   {
21123 5285           EB           0E            jmp .155
21124                       00005287            .153:
21125                                           ! 2464    outw(0x3ce, 0x0003);
21126                                           ! Debug: list int = const 3 (used reg = )
21127 5287           B8                   0003  mov	ax,*3
21128 528A           50                         push	ax
21129                                           ! Debug: list int = const $3CE (used reg = )
21130 528B           B8                   03CE  mov	ax,#$3CE
21131 528E           50                         push	ax
21132                                           ! Debug: func () void = outw+0 (used reg = )
21133 528F           E8         2B56            call	_outw
21134 5292           83C4                   04  add	sp,*4
21135                                           !BCC_EOS
21136                                           ! 2465   }
21137                                           ! 2466  for(i=0;i<cheight;i++)
21138                       00005295            .155:
21139                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21140 5295           30C0                       xor	al,al
21141 5297           8846         FF            mov	-1[bp],al
21142                                           !BCC_EOS
21143                                           !BCC_EOS
21144                                           ! 2467   {
21145 529A           E9         00A6            br 	.158
21146                       0000529D            .159:
21147                                           ! 2468    dest=addr+i*nbcols;
21148                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21149 529D           8A46         0C            mov	al,$C[bp]
21150 52A0           30E4                       xor	ah,ah
21151 52A2           89C3                       mov	bx,ax
21152 52A4           8A46         FF            mov	al,-1[bp]
21153 52A7           30E4                       xor	ah,ah
21154 52A9           89D9                       mov	cx,bx
21155 52AB           F7E9                       imul	cx
21156                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21157                                           ! Debug: expression subtree swapping
21158 52AD           0346         F8            add	ax,-8[bp]
21159                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21160 52B0           8946         F6            mov	-$A[bp],ax
21161                                           !BCC_EOS
21162                                           ! 2469    for(j=0;j<8;j++)
21163                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21164 52B3           30C0                       xor	al,al
21165 52B5           8846         FE            mov	-2[bp],al
21166                                           !BCC_EOS
21167                                           !BCC_EOS
21168                                           ! 2470     {
21169 52B8           EB           79            jmp .15C
21170                       000052BA            .15D:
21171                                           ! 2471      mask=0x80>>j;
21172                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21173 52BA           8A46         FE            mov	al,-2[bp]
21174 52BD           30E4                       xor	ah,ah
21175 52BF           89C3                       mov	bx,ax
21176 52C1           B8                   0080  mov	ax,#$80
21177 52C4           89D9                       mov	cx,bx
21178 52C6           D3F8                       sar	ax,cl
21179                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21180 52C8           8846         FD            mov	-3[bp],al
21181                                           !BCC_EOS
21182                                           ! 2472      outw(0x3ce, (mask << 8) | 0x08);
21183                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21184 52CB           8A46         FD            mov	al,-3[bp]
21185 52CE           30E4                       xor	ah,ah
21186 52D0           88C4                       mov	ah,al
21187 52D2           30C0                       xor	al,al
21188                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21189 52D4           0C                     08  or	al,*8
21190                                           ! Debug: list unsigned int = ax+0 (used reg = )
21191 52D6           50                         push	ax
21192                                           ! Debug: list int = const $3CE (used reg = )
21193 52D7           B8                   03CE  mov	ax,#$3CE
21194 52DA           50                         push	ax
21195                                           ! Debug: func () void = outw+0 (used reg = )
21196 52DB           E8         2B0A            call	_outw
21197 52DE           83C4                   04  add	sp,*4
21198                                           !BCC_EOS
21199                                           ! 2473      read_byte(0xa000,dest);
21200                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21201 52E1           FF76         F6            push	-$A[bp]
21202                                           ! Debug: list unsigned int = const $A000 (used reg = )
21203 52E4           B8                   A000  mov	ax,#$A000
21204 52E7           50                         push	ax
21205                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21206 52E8           E8         2A81            call	_read_byte
21207 52EB           83C4                   04  add	sp,*4
21208                                           !BCC_EOS
21209                                           ! 2474      if(fdata[src+i]&mask)
21210                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21211 52EE           8B46         F4            mov	ax,-$C[bp]
21212 52F1           0246         FF            add	al,-1[bp]
21213 52F4           80D4                   00  adc	ah,*0
21214                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21215 52F7           0346         FA            add	ax,-6[bp]
21216 52FA           89C3                       mov	bx,ax
21217                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21218 52FC           8A07                       mov	al,[bx]
21219 52FE           2246         FD            and	al,-3[bp]
21220 5301           84C0                       test	al,al
21221 5303           74           17            je  	.15E
21222                       00005305            .15F:
21223                                           ! 2475       {
21224                                           ! 2476        write_byte(0xa000,dest,attr&0x0f);
21225                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21226 5305           8A46         06            mov	al,6[bp]
21227 5308           24                     0F  and	al,*$F
21228                                           ! Debug: list unsigned char = al+0 (used reg = )
21229 530A           30E4                       xor	ah,ah
21230 530C           50                         push	ax
21231                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21232 530D           FF76         F6            push	-$A[bp]
21233                                           ! Debug: list unsigned int = const $A000 (used reg = )
21234 5310           B8                   A000  mov	ax,#$A000
21235 5313           50                         push	ax
21236                                           ! Debug: func () void = write_byte+0 (used reg = )
21237 5314           E8         2A7B            call	_write_byte
21238 5317           83C4                   06  add	sp,*6
21239                                           !BCC_EOS
21240                                           ! 2477       }
21241                                           ! 2478      else
21242                                           ! 2479       {
21243 531A           EB           10            jmp .160
21244                       0000531C            .15E:
21245                                           ! 2480        write_byte(0xa000,dest,0x00);
21246                                           ! Debug: list int = const 0 (used reg = )
21247 531C           31C0                       xor	ax,ax
21248 531E           50                         push	ax
21249                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21250 531F           FF76         F6            push	-$A[bp]
21251                                           ! Debug: list unsigned int = const $A000 (used reg = )
21252 5322           B8                   A000  mov	ax,#$A000
21253 5325           50                         push	ax
21254                                           ! Debug: func () void = write_byte+0 (used reg = )
21255 5326           E8         2A69            call	_write_byte
21256 5329           83C4                   06  add	sp,*6
21257                                           !BCC_EOS
21258                                           ! 2481       }
21259                                           ! 2482     }
21260                       0000532C            .160:
21261                                           ! 2483   }
21262                       0000532C            .15B:
21263                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21264 532C           8A46         FE            mov	al,-2[bp]
21265 532F           40                         inc	ax
21266 5330           8846         FE            mov	-2[bp],al
21267                       00005333            .15C:
21268                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21269 5333           8A46         FE            mov	al,-2[bp]
21270 5336           3C                     08  cmp	al,*8
21271 5338         0F82         FF7E            blo 	.15D
21272                       0000533C            .161:
21273                       0000533C            .15A:
21274                                           ! 2484 #asm
21275                       0000533C            .157:
21276                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21277 533C           8A46         FF            mov	al,-1[bp]
21278 533F           40                         inc	ax
21279 5340           8846         FF            mov	-1[bp],al
21280                       00005343            .158:
21281                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21282 5343           8A46         FF            mov	al,-1[bp]
21283 5346           3A46         0E            cmp	al,$E[bp]
21284 5349         0F82         FF50            blo 	.159
21285                       0000534D            .162:
21286                       0000534D            .156:
21287                                           !BCC_EOS
21288                                           !BCC_ASM
21289                       0000000A            _write_gfx_char_pl4.j	set	$A
21290                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21291                       00000006            _write_gfx_char_pl4.fdata	set	6
21292                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21293                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21294                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21295                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21296                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21297                       0000000B            _write_gfx_char_pl4.i	set	$B
21298                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21299                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21300                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21301                       00000009            _write_gfx_char_pl4.mask	set	9
21302                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21303                       00000002            _write_gfx_char_pl4.dest	set	2
21304                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21305                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21306                       00000008            .write_gfx_char_pl4.xcurs	set	8
21307                       00000000            _write_gfx_char_pl4.src	set	0
21308                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21309                       00000012            _write_gfx_char_pl4.attr	set	$12
21310                       00000006            .write_gfx_char_pl4.attr	set	6
21311                       00000010            _write_gfx_char_pl4.car	set	$10
21312                       00000004            .write_gfx_char_pl4.car	set	4
21313                       00000004            _write_gfx_char_pl4.addr	set	4
21314                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21315 534D           BA                   03CE    mov dx, # 0x3ce
21316 5350           B8                   FF08    mov ax, #0xff08
21317 5353           EF                           out dx, ax
21318 5354           B8                   0005    mov ax, #0x0005
21319 5357           EF                           out dx, ax
21320 5358           B8                   0003    mov ax, #0x0003
21321 535B           EF                           out dx, ax
21322                                           ! 2492 endasm
21323                                           !BCC_ENDASM
21324                                           !BCC_EOS
21325                                           ! 2493 }
21326 535C           89EC                       mov	sp,bp
21327 535E           5D                         pop	bp
21328 535F           C3                         ret
21329                                           ! 2494 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21330                                           ! Register BX used in function write_gfx_char_pl4
21331                                           ! 2495 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21332                       00005360            _write_gfx_char_cga:
21333                                           !BCC_EOS
21334                                           !BCC_EOS
21335                                           !BCC_EOS
21336                                           !BCC_EOS
21337                                           !BCC_EOS
21338                                           !BCC_EOS
21339                                           ! 2496 {
21340                                           ! 2497  Bit8u i,j,mask,data;
21341                                           !BCC_EOS
21342                                           ! 2498  Bit8u *fdata;
21343                                           !BCC_EOS
21344                                           ! 2499  Bit16u addr,dest,src;
21345                                           !BCC_EOS
21346                                           ! 2500  fdata = &vgafont8;
21347 5360           55                         push	bp
21348 5361           89E5                       mov	bp,sp
21349 5363           83C4                   F4  add	sp,*-$C
21350                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21351 5366           BB                   0F68  mov	bx,#_vgafont8
21352 5369           895E         FA            mov	-6[bp],bx
21353                                           !BCC_EOS
21354                                           ! 2501  addr=(xcurs*bpp)+ycurs*320;
21355                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21356 536C           8A46         0A            mov	al,$A[bp]
21357 536F           30E4                       xor	ah,ah
21358 5371           B9                   0140  mov	cx,#$140
21359 5374           F7E9                       imul	cx
21360 5376           50                         push	ax
21361                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21362 5377           8A46         0E            mov	al,$E[bp]
21363 537A           30E4                       xor	ah,ah
21364 537C           89C3                       mov	bx,ax
21365 537E           8A46         08            mov	al,8[bp]
21366 5381           30E4                       xor	ah,ah
21367 5383           89D9                       mov	cx,bx
21368 5385           F7E9                       imul	cx
21369                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21370 5387           0346         F2            add	ax,-$E[bp]
21371 538A           44                         inc	sp
21372 538B           44                         inc	sp
21373                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21374 538C           8946         F8            mov	-8[bp],ax
21375                                           !BCC_EOS
21376                                           ! 2502  src = car * 8;
21377                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21378 538F           8A46         04            mov	al,4[bp]
21379 5392           30E4                       xor	ah,ah
21380 5394           B1                     03  mov	cl,*3
21381 5396           D3E0                       shl	ax,cl
21382                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21383 5398           8946         F4            mov	-$C[bp],ax
21384                                           !BCC_EOS
21385                                           ! 2503  for(i=0;i<8;i++)
21386                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21387 539B           30C0                       xor	al,al
21388 539D           8846         FF            mov	-1[bp],al
21389                                           !BCC_EOS
21390                                           !BCC_EOS
21391                                           ! 2504   {
21392 53A0           E9         01B3            br 	.165
21393                       000053A3            .166:
21394                                           ! 2505    dest=addr+(i>>1)*80;
21395                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21396 53A3           8A46         FF            mov	al,-1[bp]
21397 53A6           30E4                       xor	ah,ah
21398 53A8           D1E8                       shr	ax,*1
21399                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21400 53AA           B9                   0050  mov	cx,*$50
21401 53AD           F7E9                       imul	cx
21402                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21403                                           ! Debug: expression subtree swapping
21404 53AF           0346         F8            add	ax,-8[bp]
21405                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21406 53B2           8946         F6            mov	-$A[bp],ax
21407                                           !BCC_EOS
21408                                           ! 2506    if (i & 1) dest += 0x2000;
21409                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21410 53B5           8A46         FF            mov	al,-1[bp]
21411 53B8           24                     01  and	al,*1
21412 53BA           84C0                       test	al,al
21413 53BC           74           09            je  	.167
21414                       000053BE            .168:
21415                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21416 53BE           8B46         F6            mov	ax,-$A[bp]
21417 53C1           05                   2000  add	ax,#$2000
21418 53C4           8946         F6            mov	-$A[bp],ax
21419                                           !BCC_EOS
21420                                           ! 2507    mask = 0x80;
21421                       000053C7            .167:
21422                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21423 53C7           B0                     80  mov	al,#$80
21424 53C9           8846         FD            mov	-3[bp],al
21425                                           !BCC_EOS
21426                                           ! 2508    if (bpp == 1)
21427                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21428 53CC           8A46         0E            mov	al,$E[bp]
21429 53CF           3C                     01  cmp	al,*1
21430 53D1         0F85         00B3            bne 	.169
21431                       000053D5            .16A:
21432                                           ! 2509     {
21433                                           ! 2510      if (attr & 0x80)
21434                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21435 53D5           8A46         06            mov	al,6[bp]
21436 53D8           24                     80  and	al,#$80
21437 53DA           84C0                       test	al,al
21438 53DC           74           12            je  	.16B
21439                       000053DE            .16C:
21440                                           ! 2511       {
21441                                           ! 2512        data = read_byte(0xb800,dest);
21442                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21443 53DE           FF76         F6            push	-$A[bp]
21444                                           ! Debug: list unsigned int = const $B800 (used reg = )
21445 53E1           B8                   B800  mov	ax,#$B800
21446 53E4           50                         push	ax
21447                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21448 53E5           E8         2984            call	_read_byte
21449 53E8           83C4                   04  add	sp,*4
21450                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21451 53EB           8846         FC            mov	-4[bp],al
21452                                           !BCC_EOS
21453                                           ! 2513       }
21454                                           ! 2514      else
21455                                           ! 2515       {
21456 53EE           EB           05            jmp .16D
21457                       000053F0            .16B:
21458                                           ! 2516        data = 0x00;
21459                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21460 53F0           30C0                       xor	al,al
21461 53F2           8846         FC            mov	-4[bp],al
21462                                           !BCC_EOS
21463                                           ! 2517       }
21464                                           ! 2518      for(j=0;j<8;j++)
21465                       000053F5            .16D:
21466                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21467 53F5           30C0                       xor	al,al
21468 53F7           8846         FE            mov	-2[bp],al
21469                                           !BCC_EOS
21470                                           !BCC_EOS
21471                                           ! 2519       {
21472 53FA           EB           6F            jmp .170
21473                       000053FC            .171:
21474                                           ! 2520        if (fdata[src+i] & mask)
21475                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21476 53FC           8B46         F4            mov	ax,-$C[bp]
21477 53FF           0246         FF            add	al,-1[bp]
21478 5402           80D4                   00  adc	ah,*0
21479                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21480 5405           0346         FA            add	ax,-6[bp]
21481 5408           89C3                       mov	bx,ax
21482                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21483 540A           8A07                       mov	al,[bx]
21484 540C           2246         FD            and	al,-3[bp]
21485 540F           84C0                       test	al,al
21486 5411           74           47            je  	.172
21487                       00005413            .173:
21488                                           ! 2521         {
21489                                           ! 2522          if (attr & 0x80)
21490                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21491 5413           8A46         06            mov	al,6[bp]
21492 5416           24                     80  and	al,#$80
21493 5418           84C0                       test	al,al
21494 541A           74           20            je  	.174
21495                       0000541C            .175:
21496                                           ! 2523           {
21497                                           ! 2524            data ^= (attr & 0x01) << (7-j);
21498                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21499 541C           B8                   0007  mov	ax,*7
21500 541F           2A46         FE            sub	al,-2[bp]
21501 5422           80DC                   00  sbb	ah,*0
21502 5425           50                         push	ax
21503                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21504 5426           8A46         06            mov	al,6[bp]
21505 5429           24                     01  and	al,*1
21506                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21507 542B           30E4                       xor	ah,ah
21508 542D           8B4E         F2            mov	cx,-$E[bp]
21509 5430           D3E0                       shl	ax,cl
21510 5432           44                         inc	sp
21511 5433           44                         inc	sp
21512                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21513 5434           3246         FC            xor	al,-4[bp]
21514 5437           8846         FC            mov	-4[bp],al
21515                                           !BCC_EOS
21516                                           ! 2525           }
21517                                           ! 2526          else
21518                                           ! 2527           {
21519 543A           EB           1E            jmp .176
21520                       0000543C            .174:
21521                                           ! 2528            data |= (attr & 0x01) << (7-j);
21522                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21523 543C           B8                   0007  mov	ax,*7
21524 543F           2A46         FE            sub	al,-2[bp]
21525 5442           80DC                   00  sbb	ah,*0
21526 5445           50                         push	ax
21527                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21528 5446           8A46         06            mov	al,6[bp]
21529 5449           24                     01  and	al,*1
21530                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21531 544B           30E4                       xor	ah,ah
21532 544D           8B4E         F2            mov	cx,-$E[bp]
21533 5450           D3E0                       shl	ax,cl
21534 5452           44                         inc	sp
21535 5453           44                         inc	sp
21536                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21537 5454           0A46         FC            or	al,-4[bp]
21538 5457           8846         FC            mov	-4[bp],al
21539                                           !BCC_EOS
21540                                           ! 2529           }
21541                                           ! 2530         }
21542                       0000545A            .176:
21543                                           ! 2531        mask >>= 1;
21544                       0000545A            .172:
21545                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21546 545A           8A46         FD            mov	al,-3[bp]
21547 545D           30E4                       xor	ah,ah
21548 545F           D1E8                       shr	ax,*1
21549 5461           8846         FD            mov	-3[bp],al
21550                                           !BCC_EOS
21551                                           ! 2532       }
21552                                           ! 2533      write_byte(0xb800,dest,data);
21553                       00005464            .16F:
21554                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21555 5464           8A46         FE            mov	al,-2[bp]
21556 5467           40                         inc	ax
21557 5468           8846         FE            mov	-2[bp],al
21558                       0000546B            .170:
21559                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21560 546B           8A46         FE            mov	al,-2[bp]
21561 546E           3C                     08  cmp	al,*8
21562 5470           72           8A            jb 	.171
21563                       00005472            .177:
21564                       00005472            .16E:
21565                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21566 5472           8A46         FC            mov	al,-4[bp]
21567 5475           30E4                       xor	ah,ah
21568 5477           50                         push	ax
21569                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21570 5478           FF76         F6            push	-$A[bp]
21571                                           ! Debug: list unsigned int = const $B800 (used reg = )
21572 547B           B8                   B800  mov	ax,#$B800
21573 547E           50                         push	ax
21574                                           ! Debug: func () void = write_byte+0 (used reg = )
21575 547F           E8         2910            call	_write_byte
21576 5482           83C4                   06  add	sp,*6
21577                                           !BCC_EOS
21578                                           ! 2534     }
21579                                           ! 2535    else
21580                                           ! 2536     {
21581 5485           E9         00C7            br 	.178
21582                       00005488            .169:
21583                                           ! 2537      while (mask > 0)
21584                                           ! 2538       {
21585 5488           E9         00BB            br 	.17A
21586                       0000548B            .17B:
21587                                           ! 2539        if (attr & 0x80)
21588                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21589 548B           8A46         06            mov	al,6[bp]
21590 548E           24                     80  and	al,#$80
21591 5490           84C0                       test	al,al
21592 5492           74           12            je  	.17C
21593                       00005494            .17D:
21594                                           ! 2540         {
21595                                           ! 2541          data = read_byte(0xb800,dest);
21596                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21597 5494           FF76         F6            push	-$A[bp]
21598                                           ! Debug: list unsigned int = const $B800 (used reg = )
21599 5497           B8                   B800  mov	ax,#$B800
21600 549A           50                         push	ax
21601                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21602 549B           E8         28CE            call	_read_byte
21603 549E           83C4                   04  add	sp,*4
21604                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21605 54A1           8846         FC            mov	-4[bp],al
21606                                           !BCC_EOS
21607                                           ! 2542         }
21608                                           ! 2543        else
21609                                           ! 2544         {
21610 54A4           EB           05            jmp .17E
21611                       000054A6            .17C:
21612                                           ! 2545          data = 0x00;
21613                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21614 54A6           30C0                       xor	al,al
21615 54A8           8846         FC            mov	-4[bp],al
21616                                           !BCC_EOS
21617                                           ! 2546         }
21618                                           ! 2547        for(j=0;j<4;j++)
21619                       000054AB            .17E:
21620                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21621 54AB           30C0                       xor	al,al
21622 54AD           8846         FE            mov	-2[bp],al
21623                                           !BCC_EOS
21624                                           !BCC_EOS
21625                                           ! 2548         {
21626 54B0           EB           73            jmp .181
21627                       000054B2            .182:
21628                                           ! 2549          if (fdata[src+i] & mask)
21629                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21630 54B2           8B46         F4            mov	ax,-$C[bp]
21631 54B5           0246         FF            add	al,-1[bp]
21632 54B8           80D4                   00  adc	ah,*0
21633                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21634 54BB           0346         FA            add	ax,-6[bp]
21635 54BE           89C3                       mov	bx,ax
21636                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21637 54C0           8A07                       mov	al,[bx]
21638 54C2           2246         FD            and	al,-3[bp]
21639 54C5           84C0                       test	al,al
21640 54C7           74           4B            je  	.183
21641                       000054C9            .184:
21642                                           ! 2550           {
21643                                           ! 2551            if (attr & 0x80)
21644                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21645 54C9           8A46         06            mov	al,6[bp]
21646 54CC           24                     80  and	al,#$80
21647 54CE           84C0                       test	al,al
21648 54D0           74           22            je  	.185
21649                       000054D2            .186:
21650                                           ! 2552             {
21651                                           ! 2553              data ^= (attr & 0x03) << ((3-j)*2);
21652                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21653 54D2           B8                   0003  mov	ax,*3
21654 54D5           2A46         FE            sub	al,-2[bp]
21655 54D8           80DC                   00  sbb	ah,*0
21656                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21657 54DB           D1E0                       shl	ax,*1
21658 54DD           50                         push	ax
21659                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21660 54DE           8A46         06            mov	al,6[bp]
21661 54E1           24                     03  and	al,*3
21662                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21663 54E3           30E4                       xor	ah,ah
21664 54E5           8B4E         F2            mov	cx,-$E[bp]
21665 54E8           D3E0                       shl	ax,cl
21666 54EA           44                         inc	sp
21667 54EB           44                         inc	sp
21668                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21669 54EC           3246         FC            xor	al,-4[bp]
21670 54EF           8846         FC            mov	-4[bp],al
21671                                           !BCC_EOS
21672                                           ! 2554             }
21673                                           ! 2555            else
21674                                           ! 2556             {
21675 54F2           EB           20            jmp .187
21676                       000054F4            .185:
21677                                           ! 2557              data |= (attr & 0x03) << ((3-j)*2);
21678                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21679 54F4           B8                   0003  mov	ax,*3
21680 54F7           2A46         FE            sub	al,-2[bp]
21681 54FA           80DC                   00  sbb	ah,*0
21682                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21683 54FD           D1E0                       shl	ax,*1
21684 54FF           50                         push	ax
21685                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21686 5500           8A46         06            mov	al,6[bp]
21687 5503           24                     03  and	al,*3
21688                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21689 5505           30E4                       xor	ah,ah
21690 5507           8B4E         F2            mov	cx,-$E[bp]
21691 550A           D3E0                       shl	ax,cl
21692 550C           44                         inc	sp
21693 550D           44                         inc	sp
21694                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21695 550E           0A46         FC            or	al,-4[bp]
21696 5511           8846         FC            mov	-4[bp],al
21697                                           !BCC_EOS
21698                                           ! 2558             }
21699                                           ! 2559           }
21700                       00005514            .187:
21701                                           ! 2560          mask >>=
21702                       00005514            .183:
21703                                           ! 2560  1;
21704                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21705 5514           8A46         FD            mov	al,-3[bp]
21706 5517           30E4                       xor	ah,ah
21707 5519           D1E8                       shr	ax,*1
21708 551B           8846         FD            mov	-3[bp],al
21709                                           !BCC_EOS
21710                                           ! 2561         }
21711                                           ! 2562        write_byte(0xb800,dest,data);
21712                       0000551E            .180:
21713                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21714 551E           8A46         FE            mov	al,-2[bp]
21715 5521           40                         inc	ax
21716 5522           8846         FE            mov	-2[bp],al
21717                       00005525            .181:
21718                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21719 5525           8A46         FE            mov	al,-2[bp]
21720 5528           3C                     04  cmp	al,*4
21721 552A           72           86            jb 	.182
21722                       0000552C            .188:
21723                       0000552C            .17F:
21724                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21725 552C           8A46         FC            mov	al,-4[bp]
21726 552F           30E4                       xor	ah,ah
21727 5531           50                         push	ax
21728                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21729 5532           FF76         F6            push	-$A[bp]
21730                                           ! Debug: list unsigned int = const $B800 (used reg = )
21731 5535           B8                   B800  mov	ax,#$B800
21732 5538           50                         push	ax
21733                                           ! Debug: func () void = write_byte+0 (used reg = )
21734 5539           E8         2856            call	_write_byte
21735 553C           83C4                   06  add	sp,*6
21736                                           !BCC_EOS
21737                                           ! 2563        dest += 1;
21738                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21739 553F           8B46         F6            mov	ax,-$A[bp]
21740 5542           40                         inc	ax
21741 5543           8946         F6            mov	-$A[bp],ax
21742                                           !BCC_EOS
21743                                           ! 2564       }
21744                                           ! 2565     }
21745                       00005546            .17A:
21746                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21747 5546           8A46         FD            mov	al,-3[bp]
21748 5549           84C0                       test	al,al
21749 554B         0F85         FF3C            bne 	.17B
21750                       0000554F            .189:
21751                       0000554F            .179:
21752                                           ! 2566   }
21753                       0000554F            .178:
21754                                           ! 2567 }
21755                       0000554F            .164:
21756                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21757 554F           8A46         FF            mov	al,-1[bp]
21758 5552           40                         inc	ax
21759 5553           8846         FF            mov	-1[bp],al
21760                       00005556            .165:
21761                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21762 5556           8A46         FF            mov	al,-1[bp]
21763 5559           3C                     08  cmp	al,*8
21764 555B         0F82         FE44            blo 	.166
21765                       0000555F            .18A:
21766                       0000555F            .163:
21767 555F           89EC                       mov	sp,bp
21768 5561           5D                         pop	bp
21769 5562           C3                         ret
21770                                           ! 2568 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21771                                           ! Register BX used in function write_gfx_char_cga
21772                                           ! 2569 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21773                       00005563            _write_gfx_char_lin:
21774                                           !BCC_EOS
21775                                           !BCC_EOS
21776                                           !BCC_EOS
21777                                           !BCC_EOS
21778                                           !BCC_EOS
21779                                           ! 2570 {
21780                                           ! 2571  Bit8u i,j,mask,data;
21781                                           !BCC_EOS
21782                                           ! 2572  Bit8u *fdata;
21783                                           !BCC_EOS
21784                                           ! 2573  Bit16u addr,dest,src;
21785                                           !BCC_EOS
21786                                           ! 2574  fdata = &vgafont8;
21787 5563           55                         push	bp
21788 5564           89E5                       mov	bp,sp
21789 5566           83C4                   F4  add	sp,*-$C
21790                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21791 5569           BB                   0F68  mov	bx,#_vgafont8
21792 556C           895E         FA            mov	-6[bp],bx
21793                                           !BCC_EOS
21794                                           ! 2575  addr=xcurs*8+ycurs*nbcols*64;
21795                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21796 556F           8A46         0C            mov	al,$C[bp]
21797 5572           30E4                       xor	ah,ah
21798 5574           89C3                       mov	bx,ax
21799 5576           8A46         0A            mov	al,$A[bp]
21800 5579           30E4                       xor	ah,ah
21801 557B           89D9                       mov	cx,bx
21802 557D           F7E9                       imul	cx
21803                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21804 557F           B1                     06  mov	cl,*6
21805 5581           D3E0                       shl	ax,cl
21806 5583           50                         push	ax
21807                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21808 5584           8A46         08            mov	al,8[bp]
21809 5587           30E4                       xor	ah,ah
21810 5589           B1                     03  mov	cl,*3
21811 558B           D3E0                       shl	ax,cl
21812                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21813 558D           0346         F2            add	ax,-$E[bp]
21814 5590           44                         inc	sp
21815 5591           44                         inc	sp
21816                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21817 5592           8946         F8            mov	-8[bp],ax
21818                                           !BCC_EOS
21819                                           ! 2576  src = car * 8;
21820                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21821 5595           8A46         04            mov	al,4[bp]
21822 5598           30E4                       xor	ah,ah
21823 559A           B1                     03  mov	cl,*3
21824 559C           D3E0                       shl	ax,cl
21825                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21826 559E           8946         F4            mov	-$C[bp],ax
21827                                           !BCC_EOS
21828                                           ! 2577  for(i=0;i<8;i++)
21829                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21830 55A1           30C0                       xor	al,al
21831 55A3           8846         FF            mov	-1[bp],al
21832                                           !BCC_EOS
21833                                           !BCC_EOS
21834                                           ! 2578   {
21835 55A6           E9         0081            br 	.18D
21836                       000055A9            .18E:
21837                                           ! 2579    dest=addr+i*nbcols*8;
21838                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21839 55A9           8A46         0C            mov	al,$C[bp]
21840 55AC           30E4                       xor	ah,ah
21841 55AE           89C3                       mov	bx,ax
21842 55B0           8A46         FF            mov	al,-1[bp]
21843 55B3           30E4                       xor	ah,ah
21844 55B5           89D9                       mov	cx,bx
21845 55B7           F7E9                       imul	cx
21846                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21847 55B9           B1                     03  mov	cl,*3
21848 55BB           D3E0                       shl	ax,cl
21849                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21850                                           ! Debug: expression subtree swapping
21851 55BD           0346         F8            add	ax,-8[bp]
21852                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21853 55C0           8946         F6            mov	-$A[bp],ax
21854                                           !BCC_EOS
21855                                           ! 2580    mask = 0x80;
21856                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21857 55C3           B0                     80  mov	al,#$80
21858 55C5           8846         FD            mov	-3[bp],al
21859                                           !BCC_EOS
21860                                           ! 2581    for(j=0;j<8;j++)
21861                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21862 55C8           30C0                       xor	al,al
21863 55CA           8846         FE            mov	-2[bp],al
21864                                           !BCC_EOS
21865                                           !BCC_EOS
21866                                           ! 2582     {
21867 55CD           EB           4D            jmp .191
21868                       000055CF            .192:
21869                                           ! 2583      data = 0x00;
21870                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21871 55CF           30C0                       xor	al,al
21872 55D1           8846         FC            mov	-4[bp],al
21873                                           !BCC_EOS
21874                                           ! 2584      if (fdata[src+i] & mask)
21875                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21876 55D4           8B46         F4            mov	ax,-$C[bp]
21877 55D7           0246         FF            add	al,-1[bp]
21878 55DA           80D4                   00  adc	ah,*0
21879                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21880 55DD           0346         FA            add	ax,-6[bp]
21881 55E0           89C3                       mov	bx,ax
21882                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21883 55E2           8A07                       mov	al,[bx]
21884 55E4           2246         FD            and	al,-3[bp]
21885 55E7           84C0                       test	al,al
21886 55E9           74           06            je  	.193
21887                       000055EB            .194:
21888                                           ! 2585       {
21889                                           ! 2586        data = attr;
21890                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21891 55EB           8A46         06            mov	al,6[bp]
21892 55EE           8846         FC            mov	-4[bp],al
21893                                           !BCC_EOS
21894                                           ! 2587       }
21895                                           ! 2588      write_byte(0xa000,dest+j,data);
21896                       000055F1            .193:
21897                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21898 55F1           8A46         FC            mov	al,-4[bp]
21899 55F4           30E4                       xor	ah,ah
21900 55F6           50                         push	ax
21901                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21902 55F7           8B46         F6            mov	ax,-$A[bp]
21903 55FA           0246         FE            add	al,-2[bp]
21904 55FD           80D4                   00  adc	ah,*0
21905                                           ! Debug: list unsigned int = ax+0 (used reg = )
21906 5600           50                         push	ax
21907                                           ! Debug: list unsigned int = const $A000 (used reg = )
21908 5601           B8                   A000  mov	ax,#$A000
21909 5604           50                         push	ax
21910                                           ! Debug: func () void = write_byte+0 (used reg = )
21911 5605           E8         278A            call	_write_byte
21912 5608           83C4                   06  add	sp,*6
21913                                           !BCC_EOS
21914                                           ! 2589      mask >>= 1;
21915                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21916 560B           8A46         FD            mov	al,-3[bp]
21917 560E           30E4                       xor	ah,ah
21918 5610           D1E8                       shr	ax,*1
21919 5612           8846         FD            mov	-3[bp],al
21920                                           !BCC_EOS
21921                                           ! 2590     }
21922                                           ! 2591   }
21923                       00005615            .190:
21924                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21925 5615           8A46         FE            mov	al,-2[bp]
21926 5618           40                         inc	ax
21927 5619           8846         FE            mov	-2[bp],al
21928                       0000561C            .191:
21929                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21930 561C           8A46         FE            mov	al,-2[bp]
21931 561F           3C                     08  cmp	al,*8
21932 5621           72           AC            jb 	.192
21933                       00005623            .195:
21934                       00005623            .18F:
21935                                           ! 2592 }
21936                       00005623            .18C:
21937                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21938 5623           8A46         FF            mov	al,-1[bp]
21939 5626           40                         inc	ax
21940 5627           8846         FF            mov	-1[bp],al
21941                       0000562A            .18D:
21942                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21943 562A           8A46         FF            mov	al,-1[bp]
21944 562D           3C                     08  cmp	al,*8
21945 562F         0F82         FF76            blo 	.18E
21946                       00005633            .196:
21947                       00005633            .18B:
21948 5633           89EC                       mov	sp,bp
21949 5635           5D                         pop	bp
21950 5636           C3                         ret
21951                                           ! 2593 static void biosfn_write_char_attr (car,page,attr,count)
21952                                           ! Register BX used in function write_gfx_char_lin
21953                                           ! 2594 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21954                       00005637            _biosfn_write_char_attr:
21955                                           !BCC_EOS
21956                                           !BCC_EOS
21957                                           !BCC_EOS
21958                                           !BCC_EOS
21959                                           ! 2595 {
21960                                           ! 2596  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21961                                           !BCC_EOS
21962                                           ! 2597  Bit16u nbcols,nbrows,address;
21963                                           !BCC_EOS
21964                                           ! 2598  Bit16u cursor,dummy;
21965                                           !BCC_EOS
21966                                           ! 2599  mode=read_byte(0x40,0x49);
21967 5637           55                         push	bp
21968 5638           89E5                       mov	bp,sp
21969 563A           83C4                   F0  add	sp,*-$10
21970                                           ! Debug: list int = const $49 (used reg = )
21971 563D           B8                   0049  mov	ax,*$49
21972 5640           50                         push	ax
21973                                           ! Debug: list int = const $40 (used reg = )
21974 5641           B8                   0040  mov	ax,*$40
21975 5644           50                         push	ax
21976                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21977 5645           E8         2724            call	_read_byte
21978 5648           83C4                   04  add	sp,*4
21979                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21980 564B           8846         FC            mov	-4[bp],al
21981                                           !BCC_EOS
21982                                           ! 2600  line=find_vga_entry(mode);
21983                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21984 564E           8A46         FC            mov	al,-4[bp]
21985 5651           30E4                       xor	ah,ah
21986 5653           50                         push	ax
21987                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21988 5654           E8         2629            call	_find_vga_entry
21989 5657           44                         inc	sp
21990 5658           44                         inc	sp
21991                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21992 5659           8846         FB            mov	-5[bp],al
21993                                           !BCC_EOS
21994                                           ! 2601  if(line==0xFF)return;
21995                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21996 565C           8A46         FB            mov	al,-5[bp]
21997 565F           3C                     FF  cmp	al,#$FF
21998 5661           75           04            jne 	.197
21999                       00005663            .198:
22000 5663           89EC                       mov	sp,bp
22001 5665           5D                         pop	bp
22002 5666           C3                         ret
22003                                           !BCC_EOS
22004                                           ! 2602  biosfn_get_cursor_pos(page,&dummy,&cursor);
22005                       00005667            .197:
22006                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22007 5667           8D5E         F2            lea	bx,-$E[bp]
22008 566A           53                         push	bx
22009                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22010 566B           8D5E         F0            lea	bx,-$10[bp]
22011 566E           53                         push	bx
22012                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22013 566F           8A46         06            mov	al,6[bp]
22014 5672           30E4                       xor	ah,ah
22015 5674           50                         push	ax
22016                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22017 5675           E8         EE3E            call	_biosfn_get_cursor_pos
22018 5678           83C4                   06  add	sp,*6
22019                                           !BCC_EOS
22020                                           ! 2603  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22021                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22022 567B           8A46         F2            mov	al,-$E[bp]
22023                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22024 567E           8846         FE            mov	-2[bp],al
22025                                           !BCC_EOS
22026                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22027 5681           8B46         F2            mov	ax,-$E[bp]
22028 5684           30C0                       xor	al,al
22029                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22030 5686           88E0                       mov	al,ah
22031 5688           30E4                       xor	ah,ah
22032                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22033 568A           8846         FD            mov	-3[bp],al
22034                                           !BCC_EOS
22035                                           ! 2604  nbrows=read_byte(0x40,0x84)+1;
22036                                           ! Debug: list int = const $84 (used reg = )
22037 568D           B8                   0084  mov	ax,#$84
22038 5690           50                         push	ax
22039                                           ! Debug: list int = const $40 (used reg = )
22040 5691           B8                   0040  mov	ax,*$40
22041 5694           50                         push	ax
22042                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22043 5695           E8         26D4            call	_read_byte
22044 5698           83C4                   04  add	sp,*4
22045                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22046 569B           30E4                       xor	ah,ah
22047                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22048 569D           40                         inc	ax
22049 569E           8946         F6            mov	-$A[bp],ax
22050                                           !BCC_EOS
22051                                           ! 2605  nbcols=read_word(0x40,0x4A);
22052                                           ! Debug: list int = const $4A (used reg = )
22053 56A1           B8                   004A  mov	ax,*$4A
22054 56A4           50                         push	ax
22055                                           ! Debug: list int = const $40 (used reg = )
22056 56A5           B8                   0040  mov	ax,*$40
22057 56A8           50                         push	ax
22058                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22059 56A9           E8         26D3            call	_read_word
22060 56AC           83C4                   04  add	sp,*4
22061                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22062 56AF           8946         F8            mov	-8[bp],ax
22063                                           !BCC_EOS
22064                                           ! 2606  if(vga_modes[line].class==0x00)
22065                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22066 56B2           8A46         FB            mov	al,-5[bp]
22067 56B5           30E4                       xor	ah,ah
22068 56B7           B1                     03  mov	cl,*3
22069 56B9           D3E0                       shl	ax,cl
22070 56BB           89C3                       mov	bx,ax
22071 56BD           81C3                 0204  add	bx,#_vga_modes
22072                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22073 56C1           8A47         01            mov	al,1[bx]
22074 56C4           84C0                       test	al,al
22075 56C6           75           6A            jne 	.199
22076                       000056C8            .19A:
22077                                           ! 2607   {
22078                                           ! 2608    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22079                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22080 56C8           8A46         FD            mov	al,-3[bp]
22081 56CB           30E4                       xor	ah,ah
22082 56CD           8B4E         F8            mov	cx,-8[bp]
22083 56D0           F7E9                       imul	cx
22084                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22085                                           ! Debug: expression subtree swapping
22086 56D2           0246         FE            add	al,-2[bp]
22087 56D5           80D4                   00  adc	ah,*0
22088                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22089 56D8           D1E0                       shl	ax,*1
22090 56DA           50                         push	ax
22091                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22092 56DB           8B46         F8            mov	ax,-8[bp]
22093 56DE           8B4E         F6            mov	cx,-$A[bp]
22094 56E1           F7E9                       imul	cx
22095                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22096 56E3           D1E0                       shl	ax,*1
22097                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22098 56E5           0C                     FF  or	al,#$FF
22099                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22100                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22101 56E7           89C3                       mov	bx,ax
22102 56E9           8A46         06            mov	al,6[bp]
22103 56EC           30E4                       xor	ah,ah
22104 56EE           93                         xchg	ax,bx
22105 56EF           40                         inc	ax
22106 56F0           89D9                       mov	cx,bx
22107 56F2           F7E9                       imul	cx
22108                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22109 56F4           0346         EE            add	ax,-$12[bp]
22110 56F7           44                         inc	sp
22111 56F8           44                         inc	sp
22112                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22113 56F9           8946         F4            mov	-$C[bp],ax
22114                                           !BCC_EOS
22115                                           ! 2609    dummy=((Bit16u)attr<<8)+car;
22116                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
22117 56FC           8A46         08            mov	al,8[bp]
22118 56FF           30E4                       xor	ah,ah
22119                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
22120 5701           88C4                       mov	ah,al
22121 5703           30C0                       xor	al,al
22122                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
22123 5705           0246         04            add	al,4[bp]
22124 5708           80D4                   00  adc	ah,*0
22125                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
22126 570B           8946         F0            mov	-$10[bp],ax
22127                                           !BCC_EOS
22128                                           ! 2610    memsetw(vga_modes[line].sstart,address,dummy,count);
22129                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
22130 570E           FF76         0A            push	$A[bp]
22131                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
22132 5711           FF76         F0            push	-$10[bp]
22133                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
22134 5714           FF76         F4            push	-$C[bp]
22135                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
22136 5717           8A46         FB            mov	al,-5[bp]
22137 571A           30E4                       xor	ah,ah
22138 571C           B1                     03  mov	cl,*3
22139 571E           D3E0                       shl	ax,cl
22140 5720           89C3                       mov	bx,ax
22141 5722           81C3                 0204  add	bx,#_vga_modes
22142                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22143 5726           FF77         04            push	4[bx]
22144                                           ! Debug: func () void = memsetw+0 (used reg = )
22145 5729           E8         25BB            call	_memsetw
22146 572C           83C4                   08  add	sp,*8
22147                                           !BCC_EOS
22148                                           ! 2611   }
22149                                           ! 2612  else
22150                                           ! 2613   {
22151 572F           E9         00F8            br 	.19B
22152                       00005732            .199:
22153                                           ! 2614    cheight=video_param_table[line_to_vpti[line]].cheight;
22154                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22155 5732           8A46         FB            mov	al,-5[bp]
22156 5735           30E4                       xor	ah,ah
22157 5737           89C3                       mov	bx,ax
22158                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22159 5739           8A87       0284            mov	al,_line_to_vpti[bx]
22160 573D           30E4                       xor	ah,ah
22161 573F           B1                     06  mov	cl,*6
22162 5741           D3E0                       shl	ax,cl
22163 5743           89C3                       mov	bx,ax
22164 5745           81C3                 0298  add	bx,#_video_param_table
22165                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22166 5749           8A47         02            mov	al,2[bx]
22167 574C           8846         FF            mov	-1[bp],al
22168                                           !BCC_EOS
22169                                           ! 2615    bpp=vga_modes[line].pixbits;
22170                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22171 574F           8A46         FB            mov	al,-5[bp]
22172 5752           30E4                       xor	ah,ah
22173 5754           B1                     03  mov	cl,*3
22174 5756           D3E0                       shl	ax,cl
22175 5758           89C3                       mov	bx,ax
22176 575A           81C3                 0204  add	bx,#_vga_modes
22177                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22178 575E           8A47         03            mov	al,3[bx]
22179 5761           8846         FA            mov	-6[bp],al
22180                                           !BCC_EOS
22181                                           ! 2616    while((count-->0) && (xcurs<nbcols))
22182                                           ! 2617     {
22183 5764           E9         00AB            br 	.19D
22184                       00005767            .19E:
22185                                           ! 2618      switch(vga_modes[line].memmodel)
22186                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22187 5767           8A46         FB            mov	al,-5[bp]
22188 576A           30E4                       xor	ah,ah
22189 576C           B1                     03  mov	cl,*3
22190 576E           D3E0                       shl	ax,cl
22191 5770           89C3                       mov	bx,ax
22192 5772           81C3                 0204  add	bx,#_vga_modes
22193 5776           8A47         02            mov	al,2[bx]
22194                                           ! 2619       {
22195 5779           EB           7A            jmp .1A1
22196                                           ! 2620        case 0x04:
22197                                           ! 2621        case 0x03:
22198                       0000577B            .1A2:
22199                                           ! 2622          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22200                       0000577B            .1A3:
22201                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22202 577B           8A46         FF            mov	al,-1[bp]
22203 577E           30E4                       xor	ah,ah
22204 5780           50                         push	ax
22205                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22206 5781           FF76         F8            push	-8[bp]
22207                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22208 5784           8A46         FD            mov	al,-3[bp]
22209 5787           30E4                       xor	ah,ah
22210 5789           50                         push	ax
22211                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22212 578A           8A46         FE            mov	al,-2[bp]
22213 578D           30E4                       xor	ah,ah
22214 578F           50                         push	ax
22215                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22216 5790           8A46         08            mov	al,8[bp]
22217 5793           30E4                       xor	ah,ah
22218 5795           50                         push	ax
22219                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22220 5796           8A46         04            mov	al,4[bp]
22221 5799           30E4                       xor	ah,ah
22222 579B           50                         push	ax
22223                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22224 579C           E8         FA4E            call	_write_gfx_char_pl4
22225 579F           83C4                   0C  add	sp,*$C
22226                                           !BCC_EOS
22227                                           ! 2623          break;
22228 57A2           EB           67            jmp .19F
22229                                           !BCC_EOS
22230                                           ! 2624        case 0x02:
22231                                           ! 2625          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22232                       000057A4            .1A4:
22233                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22234 57A4           8A46         FA            mov	al,-6[bp]
22235 57A7           30E4                       xor	ah,ah
22236 57A9           50                         push	ax
22237                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22238 57AA           FF76         F8            push	-8[bp]
22239                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22240 57AD           8A46         FD            mov	al,-3[bp]
22241 57B0           30E4                       xor	ah,ah
22242 57B2           50                         push	ax
22243                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22244 57B3           8A46         FE            mov	al,-2[bp]
22245 57B6           30E4                       xor	ah,ah
22246 57B8           50                         push	ax
22247                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22248 57B9           8A46         08            mov	al,8[bp]
22249 57BC           30E4                       xor	ah,ah
22250 57BE           50                         push	ax
22251                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22252 57BF           8A46         04            mov	al,4[bp]
22253 57C2           30E4                       xor	ah,ah
22254 57C4           50                         push	ax
22255                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22256 57C5           E8         FB98            call	_write_gfx_char_cga
22257 57C8           83C4                   0C  add	sp,*$C
22258                                           !BCC_EOS
22259                                           ! 2626          break;
22260 57CB           EB           3E            jmp .19F
22261                                           !BCC_EOS
22262                                           ! 2627        case 0x05:
22263                                           ! 2628          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22264                       000057CD            .1A5:
22265                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22266 57CD           FF76         F8            push	-8[bp]
22267                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22268 57D0           8A46         FD            mov	al,-3[bp]
22269 57D3           30E4                       xor	ah,ah
22270 57D5           50                         push	ax
22271                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22272 57D6           8A46         FE            mov	al,-2[bp]
22273 57D9           30E4                       xor	ah,ah
22274 57DB           50                         push	ax
22275                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22276 57DC           8A46         08            mov	al,8[bp]
22277 57DF           30E4                       xor	ah,ah
22278 57E1           50                         push	ax
22279                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22280 57E2           8A46         04            mov	al,4[bp]
22281 57E5           30E4                       xor	ah,ah
22282 57E7           50                         push	ax
22283                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22284 57E8           E8         FD78            call	_write_gfx_char_lin
22285 57EB           83C4                   0A  add	sp,*$A
22286                                           !BCC_EOS
22287                                           ! 2629          break;
22288 57EE           EB           1B            jmp .19F
22289                                           !BCC_EOS
22290                                           ! 2630        default:
22291                                           ! 2631          unimplemented();
22292                       000057F0            .1A6:
22293                                           ! Debug: func () void = unimplemented+0 (used reg = )
22294 57F0           E8         2608            call	_unimplemented
22295                                           !BCC_EOS
22296                                           ! 2632       }
22297                                           ! 2633      xcurs++;
22298 57F3           EB           16            jmp .19F
22299                       000057F5            .1A1:
22300 57F5           2C                     02  sub	al,*2
22301 57F7           74           AB            je 	.1A4
22302 57F9           2C                     01  sub	al,*1
22303 57FB         0F84         FF7C            beq 	.1A3
22304 57FF           2C                     01  sub	al,*1
22305 5801         0F84         FF76            beq 	.1A2
22306 5805           2C                     01  sub	al,*1
22307 5807           74           C4            je 	.1A5
22308 5809           EB           E5            jmp	.1A6
22309                       0000580B            .19F:
22310                       FFFFFFEE            ..FFFA	=	-$12
22311                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22312 580B           8A46         FE            mov	al,-2[bp]
22313 580E           40                         inc	ax
22314 580F           8846         FE            mov	-2[bp],al
22315                                           !BCC_EOS
22316                                           ! 2634     }
22317                                           ! 2635   }
22318                       00005812            .19D:
22319                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22320 5812           8B46         0A            mov	ax,$A[bp]
22321 5815           48                         dec	ax
22322 5816           8946         0A            mov	$A[bp],ax
22323                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22324 5819           3D                   FFFF  cmp	ax,*-1
22325 581C           74           0C            je  	.1A7
22326                       0000581E            .1A8:
22327                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22328 581E           8A46         FE            mov	al,-2[bp]
22329 5821           30E4                       xor	ah,ah
22330 5823           3B46         F8            cmp	ax,-8[bp]
22331 5826         0F82         FF3D            blo 	.19E
22332                       0000582A            .1A7:
22333                       0000582A            .19C:
22334                                           ! 2636 }
22335                       0000582A            .19B:
22336 582A           89EC                       mov	sp,bp
22337 582C           5D                         pop	bp
22338 582D           C3                         ret
22339                                           ! 2637 static void biosfn_write_char_only (car,page,attr,count)
22340                                           ! Register BX used in function biosfn_write_char_attr
22341                                           ! 2638 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22342                       0000582E            _biosfn_write_char_only:
22343                                           !BCC_EOS
22344                                           !BCC_EOS
22345                                           !BCC_EOS
22346                                           !BCC_EOS
22347                                           ! 2639 {
22348                                           ! 2640  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22349                                           !BCC_EOS
22350                                           ! 2641  Bit16u nbcols,nbrows,address;
22351                                           !BCC_EOS
22352                                           ! 2642  Bit16u cursor,dummy;
22353                                           !BCC_EOS
22354                                           ! 2643  mode=read_byte(0x40,0x49);
22355 582E           55                         push	bp
22356 582F           89E5                       mov	bp,sp
22357 5831           83C4                   F0  add	sp,*-$10
22358                                           ! Debug: list int = const $49 (used reg = )
22359 5834           B8                   0049  mov	ax,*$49
22360 5837           50                         push	ax
22361                                           ! Debug: list int = const $40 (used reg = )
22362 5838           B8                   0040  mov	ax,*$40
22363 583B           50                         push	ax
22364                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22365 583C           E8         252D            call	_read_byte
22366 583F           83C4                   04  add	sp,*4
22367                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22368 5842           8846         FC            mov	-4[bp],al
22369                                           !BCC_EOS
22370                                           ! 2644  line=find_vga_entry(mode);
22371                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22372 5845           8A46         FC            mov	al,-4[bp]
22373 5848           30E4                       xor	ah,ah
22374 584A           50                         push	ax
22375                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22376 584B           E8         2432            call	_find_vga_entry
22377 584E           44                         inc	sp
22378 584F           44                         inc	sp
22379                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22380 5850           8846         FB            mov	-5[bp],al
22381                                           !BCC_EOS
22382                                           ! 2645  if(lin
22383                                           ! 2645 e==0xFF)return;
22384                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22385 5853           8A46         FB            mov	al,-5[bp]
22386 5856           3C                     FF  cmp	al,#$FF
22387 5858           75           04            jne 	.1A9
22388                       0000585A            .1AA:
22389 585A           89EC                       mov	sp,bp
22390 585C           5D                         pop	bp
22391 585D           C3                         ret
22392                                           !BCC_EOS
22393                                           ! 2646  biosfn_get_cursor_pos(page,&dummy,&cursor);
22394                       0000585E            .1A9:
22395                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22396 585E           8D5E         F2            lea	bx,-$E[bp]
22397 5861           53                         push	bx
22398                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22399 5862           8D5E         F0            lea	bx,-$10[bp]
22400 5865           53                         push	bx
22401                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22402 5866           8A46         06            mov	al,6[bp]
22403 5869           30E4                       xor	ah,ah
22404 586B           50                         push	ax
22405                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22406 586C           E8         EC47            call	_biosfn_get_cursor_pos
22407 586F           83C4                   06  add	sp,*6
22408                                           !BCC_EOS
22409                                           ! 2647  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22410                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22411 5872           8A46         F2            mov	al,-$E[bp]
22412                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22413 5875           8846         FE            mov	-2[bp],al
22414                                           !BCC_EOS
22415                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22416 5878           8B46         F2            mov	ax,-$E[bp]
22417 587B           30C0                       xor	al,al
22418                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22419 587D           88E0                       mov	al,ah
22420 587F           30E4                       xor	ah,ah
22421                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22422 5881           8846         FD            mov	-3[bp],al
22423                                           !BCC_EOS
22424                                           ! 2648  nbrows=read_byte(0x40,0x84)+1;
22425                                           ! Debug: list int = const $84 (used reg = )
22426 5884           B8                   0084  mov	ax,#$84
22427 5887           50                         push	ax
22428                                           ! Debug: list int = const $40 (used reg = )
22429 5888           B8                   0040  mov	ax,*$40
22430 588B           50                         push	ax
22431                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22432 588C           E8         24DD            call	_read_byte
22433 588F           83C4                   04  add	sp,*4
22434                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22435 5892           30E4                       xor	ah,ah
22436                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22437 5894           40                         inc	ax
22438 5895           8946         F6            mov	-$A[bp],ax
22439                                           !BCC_EOS
22440                                           ! 2649  nbcols=read_word(0x40,0x4A);
22441                                           ! Debug: list int = const $4A (used reg = )
22442 5898           B8                   004A  mov	ax,*$4A
22443 589B           50                         push	ax
22444                                           ! Debug: list int = const $40 (used reg = )
22445 589C           B8                   0040  mov	ax,*$40
22446 589F           50                         push	ax
22447                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22448 58A0           E8         24DC            call	_read_word
22449 58A3           83C4                   04  add	sp,*4
22450                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22451 58A6           8946         F8            mov	-8[bp],ax
22452                                           !BCC_EOS
22453                                           ! 2650  if(vga_modes[line].class==0x00)
22454                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22455 58A9           8A46         FB            mov	al,-5[bp]
22456 58AC           30E4                       xor	ah,ah
22457 58AE           B1                     03  mov	cl,*3
22458 58B0           D3E0                       shl	ax,cl
22459 58B2           89C3                       mov	bx,ax
22460 58B4           81C3                 0204  add	bx,#_vga_modes
22461                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22462 58B8           8A47         01            mov	al,1[bx]
22463 58BB           84C0                       test	al,al
22464 58BD           75           6E            jne 	.1AB
22465                       000058BF            .1AC:
22466                                           ! 2651   {
22467                                           ! 2652    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22468                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22469 58BF           8A46         FD            mov	al,-3[bp]
22470 58C2           30E4                       xor	ah,ah
22471 58C4           8B4E         F8            mov	cx,-8[bp]
22472 58C7           F7E9                       imul	cx
22473                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22474                                           ! Debug: expression subtree swapping
22475 58C9           0246         FE            add	al,-2[bp]
22476 58CC           80D4                   00  adc	ah,*0
22477                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22478 58CF           D1E0                       shl	ax,*1
22479 58D1           50                         push	ax
22480                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22481 58D2           8B46         F8            mov	ax,-8[bp]
22482 58D5           8B4E         F6            mov	cx,-$A[bp]
22483 58D8           F7E9                       imul	cx
22484                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22485 58DA           D1E0                       shl	ax,*1
22486                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22487 58DC           0C                     FF  or	al,#$FF
22488                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22489                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22490 58DE           89C3                       mov	bx,ax
22491 58E0           8A46         06            mov	al,6[bp]
22492 58E3           30E4                       xor	ah,ah
22493 58E5           93                         xchg	ax,bx
22494 58E6           40                         inc	ax
22495 58E7           89D9                       mov	cx,bx
22496 58E9           F7E9                       imul	cx
22497                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22498 58EB           0346         EE            add	ax,-$12[bp]
22499 58EE           44                         inc	sp
22500 58EF           44                         inc	sp
22501                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22502 58F0           8946         F4            mov	-$C[bp],ax
22503                                           !BCC_EOS
22504                                           ! 2653    while(count-->0)
22505                                           ! 2654     {write_byte(vga_modes[line].sstart,address,car);
22506 58F3           EB           29            jmp .1AE
22507                       000058F5            .1AF:
22508                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22509 58F5           8A46         04            mov	al,4[bp]
22510 58F8           30E4                       xor	ah,ah
22511 58FA           50                         push	ax
22512                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22513 58FB           FF76         F4            push	-$C[bp]
22514                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22515 58FE           8A46         FB            mov	al,-5[bp]
22516 5901           30E4                       xor	ah,ah
22517 5903           B1                     03  mov	cl,*3
22518 5905           D3E0                       shl	ax,cl
22519 5907           89C3                       mov	bx,ax
22520 5909           81C3                 0204  add	bx,#_vga_modes
22521                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22522 590D           FF77         04            push	4[bx]
22523                                           ! Debug: func () void = write_byte+0 (used reg = )
22524 5910           E8         247F            call	_write_byte
22525 5913           83C4                   06  add	sp,*6
22526                                           !BCC_EOS
22527                                           ! 2655      address+=2;
22528                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22529 5916           8B46         F4            mov	ax,-$C[bp]
22530 5919           40                         inc	ax
22531 591A           40                         inc	ax
22532 591B           8946         F4            mov	-$C[bp],ax
22533                                           !BCC_EOS
22534                                           ! 2656     }
22535                                           ! 2657   }
22536                       0000591E            .1AE:
22537                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22538 591E           8B46         0A            mov	ax,$A[bp]
22539 5921           48                         dec	ax
22540 5922           8946         0A            mov	$A[bp],ax
22541                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22542 5925           3D                   FFFF  cmp	ax,*-1
22543 5928           75           CB            jne	.1AF
22544                       0000592A            .1B0:
22545                       0000592A            .1AD:
22546                                           ! 2658  else
22547                                           ! 2659   {
22548 592A           E9         00F8            br 	.1B1
22549                       0000592D            .1AB:
22550                                           ! 2660    cheight=video_param_table[line_to_vpti[line]].cheight;
22551                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22552 592D           8A46         FB            mov	al,-5[bp]
22553 5930           30E4                       xor	ah,ah
22554 5932           89C3                       mov	bx,ax
22555                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22556 5934           8A87       0284            mov	al,_line_to_vpti[bx]
22557 5938           30E4                       xor	ah,ah
22558 593A           B1                     06  mov	cl,*6
22559 593C           D3E0                       shl	ax,cl
22560 593E           89C3                       mov	bx,ax
22561 5940           81C3                 0298  add	bx,#_video_param_table
22562                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22563 5944           8A47         02            mov	al,2[bx]
22564 5947           8846         FF            mov	-1[bp],al
22565                                           !BCC_EOS
22566                                           ! 2661    bpp=vga_modes[line].pixbits;
22567                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22568 594A           8A46         FB            mov	al,-5[bp]
22569 594D           30E4                       xor	ah,ah
22570 594F           B1                     03  mov	cl,*3
22571 5951           D3E0                       shl	ax,cl
22572 5953           89C3                       mov	bx,ax
22573 5955           81C3                 0204  add	bx,#_vga_modes
22574                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22575 5959           8A47         03            mov	al,3[bx]
22576 595C           8846         FA            mov	-6[bp],al
22577                                           !BCC_EOS
22578                                           ! 2662    while((count-->0) && (xcurs<nbcols))
22579                                           ! 2663     {
22580 595F           E9         00AB            br 	.1B3
22581                       00005962            .1B4:
22582                                           ! 2664      switch(vga_modes[line].memmodel)
22583                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22584 5962           8A46         FB            mov	al,-5[bp]
22585 5965           30E4                       xor	ah,ah
22586 5967           B1                     03  mov	cl,*3
22587 5969           D3E0                       shl	ax,cl
22588 596B           89C3                       mov	bx,ax
22589 596D           81C3                 0204  add	bx,#_vga_modes
22590 5971           8A47         02            mov	al,2[bx]
22591                                           ! 2665       {
22592 5974           EB           7A            jmp .1B7
22593                                           ! 2666        case 0x04:
22594                                           ! 2667        case 0x03:
22595                       00005976            .1B8:
22596                                           ! 2668          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22597                       00005976            .1B9:
22598                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22599 5976           8A46         FF            mov	al,-1[bp]
22600 5979           30E4                       xor	ah,ah
22601 597B           50                         push	ax
22602                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22603 597C           FF76         F8            push	-8[bp]
22604                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22605 597F           8A46         FD            mov	al,-3[bp]
22606 5982           30E4                       xor	ah,ah
22607 5984           50                         push	ax
22608                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22609 5985           8A46         FE            mov	al,-2[bp]
22610 5988           30E4                       xor	ah,ah
22611 598A           50                         push	ax
22612                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22613 598B           8A46         08            mov	al,8[bp]
22614 598E           30E4                       xor	ah,ah
22615 5990           50                         push	ax
22616                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22617 5991           8A46         04            mov	al,4[bp]
22618 5994           30E4                       xor	ah,ah
22619 5996           50                         push	ax
22620                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22621 5997           E8         F853            call	_write_gfx_char_pl4
22622 599A           83C4                   0C  add	sp,*$C
22623                                           !BCC_EOS
22624                                           ! 2669          break;
22625 599D           EB           67            jmp .1B5
22626                                           !BCC_EOS
22627                                           ! 2670        case 0x02:
22628                                           ! 2671          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22629                       0000599F            .1BA:
22630                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22631 599F           8A46         FA            mov	al,-6[bp]
22632 59A2           30E4                       xor	ah,ah
22633 59A4           50                         push	ax
22634                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22635 59A5           FF76         F8            push	-8[bp]
22636                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22637 59A8           8A46         FD            mov	al,-3[bp]
22638 59AB           30E4                       xor	ah,ah
22639 59AD           50                         push	ax
22640                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22641 59AE           8A46         FE            mov	al,-2[bp]
22642 59B1           30E4                       xor	ah,ah
22643 59B3           50                         push	ax
22644                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22645 59B4           8A46         08            mov	al,8[bp]
22646 59B7           30E4                       xor	ah,ah
22647 59B9           50                         push	ax
22648                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22649 59BA           8A46         04            mov	al,4[bp]
22650 59BD           30E4                       xor	ah,ah
22651 59BF           50                         push	ax
22652                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22653 59C0           E8         F99D            call	_write_gfx_char_cga
22654 59C3           83C4                   0C  add	sp,*$C
22655                                           !BCC_EOS
22656                                           ! 2672          break;
22657 59C6           EB           3E            jmp .1B5
22658                                           !BCC_EOS
22659                                           ! 2673        case 0x05:
22660                                           ! 2674          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22661                       000059C8            .1BB:
22662                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22663 59C8           FF76         F8            push	-8[bp]
22664                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22665 59CB           8A46         FD            mov	al,-3[bp]
22666 59CE           30E4                       xor	ah,ah
22667 59D0           50                         push	ax
22668                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22669 59D1           8A46         FE            mov	al,-2[bp]
22670 59D4           30E4                       xor	ah,ah
22671 59D6           50                         push	ax
22672                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22673 59D7           8A46         08            mov	al,8[bp]
22674 59DA           30E4                       xor	ah,ah
22675 59DC           50                         push	ax
22676                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22677 59DD           8A46         04            mov	al,4[bp]
22678 59E0           30E4                       xor	ah,ah
22679 59E2           50                         push	ax
22680                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22681 59E3           E8         FB7D            call	_write_gfx_char_lin
22682 59E6           83C4                   0A  add	sp,*$A
22683                                           !BCC_EOS
22684                                           ! 2675          break;
22685 59E9           EB           1B            jmp .1B5
22686                                           !BCC_EOS
22687                                           ! 2676        default:
22688                                           ! 2677          unimplemented();
22689                       000059EB            .1BC:
22690                                           ! Debug: func () void = unimplemented+0 (used reg = )
22691 59EB           E8         240D            call	_unimplemented
22692                                           !BCC_EOS
22693                                           ! 2678       }
22694                                           ! 2679      xcurs++;
22695 59EE           EB           16            jmp .1B5
22696                       000059F0            .1B7:
22697 59F0           2C                     02  sub	al,*2
22698 59F2           74           AB            je 	.1BA
22699 59F4           2C                     01  sub	al,*1
22700 59F6         0F84         FF7C            beq 	.1B9
22701 59FA           2C                     01  sub	al,*1
22702 59FC         0F84         FF76            beq 	.1B8
22703 5A00           2C                     01  sub	al,*1
22704 5A02           74           C4            je 	.1BB
22705 5A04           EB           E5            jmp	.1BC
22706                       00005A06            .1B5:
22707                       FFFFFFEE            ..FFF9	=	-$12
22708                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22709 5A06           8A46         FE            mov	al,-2[bp]
22710 5A09           40                         inc	ax
22711 5A0A           8846         FE            mov	-2[bp],al
22712                                           !BCC_EOS
22713                                           ! 2680     }
22714                                           ! 2681   }
22715                       00005A0D            .1B3:
22716                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22717 5A0D           8B46         0A            mov	ax,$A[bp]
22718 5A10           48                         dec	ax
22719 5A11           8946         0A            mov	$A[bp],ax
22720                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22721 5A14           3D                   FFFF  cmp	ax,*-1
22722 5A17           74           0C            je  	.1BD
22723                       00005A19            .1BE:
22724                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22725 5A19           8A46         FE            mov	al,-2[bp]
22726 5A1C           30E4                       xor	ah,ah
22727 5A1E           3B46         F8            cmp	ax,-8[bp]
22728 5A21         0F82         FF3D            blo 	.1B4
22729                       00005A25            .1BD:
22730                       00005A25            .1B2:
22731                                           ! 2682 }
22732                       00005A25            .1B1:
22733 5A25           89EC                       mov	sp,bp
22734 5A27           5D                         pop	bp
22735 5A28           C3                         ret
22736                                           ! 2683 #asm
22737                                           !BCC_ASM
22738                       00000008            _biosfn_write_char_only.count	set	8
22739                       00000006            _biosfn_write_char_only.attr	set	6
22740                       00000004            _biosfn_write_char_only.page	set	4
22741                       00000002            _biosfn_write_char_only.car	set	2
22742                       00005A29            biosfn_group_0B:
22743 5A29           80FF                   00    cmp bh, #0x00
22744 5A2C           74           09              je biosfn_set_border_color
22745 5A2E           80FF                   01    cmp bh, #0x01
22746 5A31           74           43              je biosfn_set_palette
22747 5A33           E8         23D3              call _unknown
22748 5A36           C3                           ret
22749                       00005A37            biosfn_set_border_color:
22750 5A37           50                           push ax
22751 5A38           53                           push bx
22752 5A39           51                           push cx
22753 5A3A           52                           push dx
22754 5A3B           BA                   03DA    mov dx, # 0x3da
22755 5A3E           EC                           in al, dx
22756 5A3F           BA                   03C0    mov dx, # 0x3c0
22757 5A42           B0                     00    mov al, #0x00
22758 5A44           EE                           out dx, al
22759 5A45           88D8                         mov al, bl
22760 5A47           24                     0F    and al, #0x0f
22761 5A49           A8                     08    test al, #0x08
22762 5A4B           74           02              jz set_low_border
22763 5A4D           04                     08    add al, #0x08
22764                       00005A4F            set_low_border:
22765 5A4F           EE                           out dx, al
22766 5A50           B1                     01    mov cl, #0x01
22767 5A52           80E3                   10    and bl, #0x10
22768                       00005A55            set_intensity_loop:
22769 5A55           BA                   03C0    mov dx, # 0x3c0
22770 5A58           88C8                         mov al, cl
22771 5A5A           EE                           out dx, al
22772 5A5B           BA                   03C1    mov dx, # 0x3c1
22773 5A5E           EC                           in al, dx
22774 5A5F           24                     EF    and al, #0xef
22775 5A61           08D8                         or al, bl
22776 5A63           BA                   03C0    mov dx, # 0x3c0
22777 5A66           EE                           out dx, al
22778 5A67           FEC1                         inc cl
22779 5A69           80F9                   04    cmp cl, #0x04
22780 5A6C           75           E7              jne set_intensity_loop
22781 5A6E           B0                     20    mov al, #0x20
22782 5A70           EE                           out dx, al
22783 5A71           5A                           pop dx
22784 5A72           59                           pop cx
22785 5A73           5B                           pop bx
22786 5A74           58                           pop ax
22787 5A75           C3                           ret
22788                       00005A76            biosfn_set_palette:
22789 5A76           50                           push ax
22790 5A77           53                           push bx
22791 5A78           51                           push cx
22792 5A79           52                           push dx
22793 5A7A           BA                   03DA    mov dx, # 0x3da
22794 5A7D           EC                           in al, dx
22795 5A7E           B1                     01    mov cl, #0x01
22796 5A80           80E3                   01    and bl, #0x01
22797                       00005A83            set_cga_palette_loop:
22798 5A83           BA                   03C0    mov dx, # 0x3c0
22799 5A86           88C8                         mov al, cl
22800 5A88           EE                           out dx, al
22801 5A89           BA                   03C1    mov dx, # 0x3c1
22802 5A8C           EC                           in al, dx
22803 5A8D           24                     FE    and al, #0xfe
22804 5A8F           08D8                         or al, bl
22805 5A91           BA                   03C0    mov dx, # 0x3c0
22806 5A94           EE                           out dx, al
22807 5A95           FEC1                         inc cl
22808 5A97           80F9                   04    cmp cl, #0x04
22809 5A9A           75           E7              jne set_cga_palette_loop
22810 5A9C           B0                     20    mov al, #0x20
22811 5A9E           EE                           out dx, al
22812 5A9F           5A                           pop dx
22813 5AA0           59                           pop cx
22814 5AA1           5B                           pop bx
22815 5AA2           58                           pop ax
22816 5AA3           C3                           ret
22817                                           ! 2759 endas
22818                                           !BCC_ENDASM
22819                                           ! 2760 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22820                                           ! Register BX used in function biosfn_write_char_only
22821                       00005AA4            _biosfn_write_pixel:
22822                                           !BCC_EOS
22823                                           !BCC_EOS
22824                                           !BCC_EOS
22825                                           !BCC_EOS
22826                                           ! 2761 {
22827                                           ! 2762  Bit8u mode,line,mask,attr,data;
22828                                           !BCC_EOS
22829                                           ! 2763  Bit16u addr;
22830                                           !BCC_EOS
22831                                           ! 2764  mode=read_byte(0x40,0x49);
22832 5AA4           55                         push	bp
22833 5AA5           89E5                       mov	bp,sp
22834 5AA7           83C4                   F8  add	sp,*-8
22835                                           ! Debug: list int = const $49 (used reg = )
22836 5AAA           B8                   0049  mov	ax,*$49
22837 5AAD           50                         push	ax
22838                                           ! Debug: list int = const $40 (used reg = )
22839 5AAE           B8                   0040  mov	ax,*$40
22840 5AB1           50                         push	ax
22841                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22842 5AB2           E8         22B7            call	_read_byte
22843 5AB5           83C4                   04  add	sp,*4
22844                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22845 5AB8           8846         FF            mov	-1[bp],al
22846                                           !BCC_EOS
22847                                           ! 2765  line=find_vga_entry(mode);
22848                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22849 5ABB           8A46         FF            mov	al,-1[bp]
22850 5ABE           30E4                       xor	ah,ah
22851 5AC0           50                         push	ax
22852                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22853 5AC1           E8         21BC            call	_find_vga_entry
22854 5AC4           44                         inc	sp
22855 5AC5           44                         inc	sp
22856                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22857 5AC6           8846         FE            mov	-2[bp],al
22858                                           !BCC_EOS
22859                                           ! 2766  if(line==0xFF)return;
22860                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22861 5AC9           8A46         FE            mov	al,-2[bp]
22862 5ACC           3C                     FF  cmp	al,#$FF
22863 5ACE           75           04            jne 	.1BF
22864                       00005AD0            .1C0:
22865 5AD0           89EC                       mov	sp,bp
22866 5AD2           5D                         pop	bp
22867 5AD3           C3                         ret
22868                                           !BCC_EOS
22869                                           ! 2767  if(vga_modes[line].class==0x00)return;
22870                       00005AD4            .1BF:
22871                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22872 5AD4           8A46         FE            mov	al,-2[bp]
22873 5AD7           30E4                       xor	ah,ah
22874 5AD9           B1                     03  mov	cl,*3
22875 5ADB           D3E0                       shl	ax,cl
22876 5ADD           89C3                       mov	bx,ax
22877 5ADF           81C3                 0204  add	bx,#_vga_modes
22878                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22879 5AE3           8A47         01            mov	al,1[bx]
22880 5AE6           84C0                       test	al,al
22881 5AE8           75           04            jne 	.1C1
22882                       00005AEA            .1C2:
22883 5AEA           89EC                       mov	sp,bp
22884 5AEC           5D                         pop	bp
22885 5AED           C3                         ret
22886                                           !BCC_EOS
22887                                           ! 2768  switch(vga_modes[line].memmodel)
22888                       00005AEE            .1C1:
22889                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22890 5AEE           8A46         FE            mov	al,-2[bp]
22891 5AF1           30E4                       xor	ah,ah
22892 5AF3           B1                     03  mov	cl,*3
22893 5AF5           D3E0                       shl	ax,cl
22894 5AF7           89C3                       mov	bx,ax
22895 5AF9           81C3                 0204  add	bx,#_vga_modes
22896 5AFD           8A47         02            mov	al,2[bx]
22897                                           ! 2769   {
22898 5B00           E9         0226            br 	.1C5
22899                                           ! 2770    case 0x04:
22900                                           ! 2771    case 0x03:
22901                       00005B03            .1C6:
22902                                           ! 2772      addr = CX/8+DX*read_word(0x40,0x4A);
22903                       00005B03            .1C7:
22904                                           ! Debug: list int = const $4A (used reg = )
22905 5B03           B8                   004A  mov	ax,*$4A
22906 5B06           50                         push	ax
22907                                           ! Debug: list int = const $40 (used reg = )
22908 5B07           B8                   0040  mov	ax,*$40
22909 5B0A           50                         push	ax
22910                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22911 5B0B           E8         2271            call	_read_word
22912 5B0E           83C4                   04  add	sp,*4
22913                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22914                                           ! Debug: expression subtree swapping
22915 5B11           8B4E         0A            mov	cx,$A[bp]
22916 5B14           F7E9                       imul	cx
22917 5B16           50                         push	ax
22918                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22919 5B17           8B46         08            mov	ax,8[bp]
22920 5B1A           B1                     03  mov	cl,*3
22921 5B1C           D3E8                       shr	ax,cl
22922                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22923 5B1E           0346         F6            add	ax,0+..FFF8[bp]
22924 5B21           44                         inc	sp
22925 5B22           44                         inc	sp
22926                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22927 5B23           8946         F8            mov	-8[bp],ax
22928                                           !BCC_EOS
22929                                           ! 2773      mask = 0x80 >> (CX & 0x07);
22930                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22931 5B26           8A46         08            mov	al,8[bp]
22932 5B29           24                     07  and	al,*7
22933                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22934 5B2B           30E4                       xor	ah,ah
22935 5B2D           89C3                       mov	bx,ax
22936 5B2F           B8                   0080  mov	ax,#$80
22937 5B32           89D9                       mov	cx,bx
22938 5B34           D3F8                       sar	ax,cl
22939                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22940 5B36           8846         FD            mov	-3[bp],al
22941                                           !BCC_EOS
22942                                           ! 2774      outw(0x3ce, (mask << 8) | 0x08);
22943                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22944 5B39           8A46         FD            mov	al,-3[bp]
22945 5B3C           30E4                       xor	ah,ah
22946 5B3E           88C4                       mov	ah,al
22947 5B40           30C0                       xor	al,al
22948                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22949 5B42           0C                     08  or	al,*8
22950                                           ! Debug: list unsigned int = ax+0 (used reg = )
22951 5B44           50                         push	ax
22952                                           ! Debug: list int = const $3CE (used reg = )
22953 5B45           B8                   03CE  mov	ax,#$3CE
22954 5B48           50                         push	ax
22955                                           ! Debug: func () void = outw+0 (used reg = )
22956 5B49           E8         229C            call	_outw
22957 5B4C           83C4                   04  add	sp,*4
22958                                           !BCC_EOS
22959                                           ! 2775      outw(0x3ce, 0x0205);
22960                                           ! Debug: list int = const $205 (used reg = )
22961 5B4F           B8                   0205  mov	ax,#$205
22962 5B52           50                         push	ax
22963                                           ! Debug: list int = const $3CE (used reg = )
22964 5B53           B8                   03CE  mov	ax,#$3CE
22965 5B56           50                         push	ax
22966                                           ! Debug: func () void = outw+0 (used reg = )
22967 5B57           E8         228E            call	_outw
22968 5B5A           83C4                   04  add	sp,*4
22969                                           !BCC_EOS
22970                                           ! 2776      data = read_byte(0xa000,addr);
22971                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22972 5B5D           FF76         F8            push	-8[bp]
22973                                           ! Debug: list unsigned int = const $A000 (used reg = )
22974 5B60           B8                   A000  mov	ax,#$A000
22975 5B63           50                         push	ax
22976                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22977 5B64           E8         2205            call	_read_byte
22978 5B67           83C4                   04  add	sp,*4
22979                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22980 5B6A           8846         FB            mov	-5[bp],al
22981                                           !BCC_EOS
22982                                           ! 2777      if (AL & 0x80)
22983                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22984 5B6D           8A46         06            mov	al,6[bp]
22985 5B70           24                     80  and	al,#$80
22986 5B72           84C0                       test	al,al
22987 5B74           74           0E            je  	.1C8
22988                       00005B76            .1C9:
22989                                           ! 2778       {
22990                                           ! 2779        outw(0x3ce, 0x1803);
22991                                           ! Debug: list int = const $1803 (used reg = )
22992 5B76           B8                   1803  mov	ax,#$1803
22993 5B79           50                         push	ax
22994                                           ! Debug: list int = const $3CE (used reg = )
22995 5B7A           B8                   03CE  mov	ax,#$3CE
22996 5B7D           50                         push	ax
22997                                           ! Debug: func () void = outw+0 (used reg = )
22998 5B7E           E8         2267            call	_outw
22999 5B81           83C4                   04  add	sp,*4
23000                                           !BCC_EOS
23001                                           ! 2780       }
23002                                           ! 2781      write_byte(0xa000,addr,AL);
23003                       00005B84            .1C8:
23004                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23005 5B84           8A46         06            mov	al,6[bp]
23006 5B87           30E4                       xor	ah,ah
23007 5B89           50                         push	ax
23008                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23009 5B8A           FF76         F8            push	-8[bp]
23010                                           ! Debug: list unsigned int = const $A000 (used reg = )
23011 5B8D           B8                   A000  mov	ax,#$A000
23012 5B90           50                         push	ax
23013                                           ! Debug: func () void = write_byte+0 (used reg = )
23014 5B91           E8         21FE            call	_write_byte
23015 5B94           83C4                   06  add	sp,*6
23016                                           !BCC_EOS
23017                                           ! 2782 #asm
23018                                           !BCC_EOS
23019                                           !BCC_ASM
23020                       0000000C            _biosfn_write_pixel.BH	set	$C
23021                       00000004            .biosfn_write_pixel.BH	set	4
23022                       00000010            _biosfn_write_pixel.CX	set	$10
23023                       00000008            .biosfn_write_pixel.CX	set	8
23024                       00000006            _biosfn_write_pixel.line	set	6
23025                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
23026                       0000000E            _biosfn_write_pixel.AL	set	$E
23027                       00000006            .biosfn_write_pixel.AL	set	6
23028                       00000003            _biosfn_write_pixel.data	set	3
23029                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
23030                       00000012            _biosfn_write_pixel.DX	set	$12
23031                       0000000A            .biosfn_write_pixel.DX	set	$A
23032                       00000005            _biosfn_write_pixel.mask	set	5
23033                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
23034                       00000004            _biosfn_write_pixel.attr	set	4
23035                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
23036                       00000007            _biosfn_write_pixel.mode	set	7
23037                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
23038                       00000000            _biosfn_write_pixel.addr	set	0
23039                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
23040 5B97           BA                   03CE       mov dx, # 0x3ce
23041 5B9A           B8                   FF08       mov ax, #0xff08
23042 5B9D           EF                              out dx, ax
23043 5B9E           B8                   0005       mov ax, #0x0005
23044 5BA1           EF                              out dx, ax
23045 5BA2           B8                   0003       mov ax, #0x0003
23046 5BA5           EF                              out dx, ax
23047                                           ! 2790 endasm
23048                                           !BCC_ENDASM
23049                                           !BCC_EOS
23050                                           ! 2791      break;
23051 5BA6           E9         0198            br 	.1C3
23052                                           !BCC_EOS
23053                                           ! 2792    case 0x02:
23054                                           ! 2793      if(vga_modes[line].pixbits==2)
23055                       00005BA9            .1CA:
23056                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
23057 5BA9           8A46         FE            mov	al,-2[bp]
23058 5BAC           30E4                       xor	ah,ah
23059 5BAE           B1                     03  mov	cl,*3
23060 5BB0           D3E0                       shl	ax,cl
23061 5BB2           89C3                       mov	bx,ax
23062 5BB4           81C3                 0204  add	bx,#_vga_modes
23063                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23064 5BB8           8A47         03            mov	al,3[bx]
23065 5BBB           3C                     02  cmp	al,*2
23066 5BBD           75           1C            jne 	.1CB
23067                       00005BBF            .1CC:
23068                                           ! 2794       {
23069                                           ! 2795        addr=(CX>>2)+(DX>>1)*80;
23070                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23071 5BBF           8B46         0A            mov	ax,$A[bp]
23072 5BC2           D1E8                       shr	ax,*1
23073                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23074 5BC4           B9                   0050  mov	cx,*$50
23075 5BC7           F7E9                       imul	cx
23076 5BC9           50                         push	ax
23077                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
23078 5BCA           8B46         08            mov	ax,8[bp]
23079 5BCD           D1E8                       shr	ax,*1
23080 5BCF           D1E8                       shr	ax,*1
23081                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23082 5BD1           0346         F6            add	ax,0+..FFF8[bp]
23083 5BD4           44                         inc	sp
23084 5BD5           44                         inc	sp
23085                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23086 5BD6           8946         F8            mov	-8[bp],ax
23087                                           !BCC_EOS
23088                                           ! 2796       }
23089                                           ! 2797      else
23090                                           ! 2798       {
23091 5BD9           EB           1A            jmp .1CD
23092                       00005BDB            .1CB:
23093                                           ! 2799        addr=(CX>>3)+(DX>>1)*80;
23094                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23095 5BDB           8B46         0A            mov	ax,$A[bp]
23096 5BDE           D1E8                       shr	ax,*1
23097                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23098 5BE0           B9                   0050  mov	cx,*$50
23099 5BE3           F7E9                       imul	cx
23100 5BE5           50                         push	ax
23101                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
23102 5BE6           8B46         08            mov	ax,8[bp]
23103 5BE9           B1                     03  mov	cl,*3
23104 5BEB           D3E8                       shr	ax,cl
23105                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23106 5BED           0346         F6            add	ax,0+..FFF8[bp]
23107 5BF0           44                         inc	sp
23108 5BF1           44                         inc	sp
23109                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23110 5BF2           8946         F8            mov	-8[bp],ax
23111                                           !BCC_EOS
23112                                           ! 2800       }
23113                                           ! 2801      if (DX & 1) addr += 0x2000;
23114                       00005BF5            .1CD:
23115                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23116 5BF5           8A46         0A            mov	al,$A[bp]
23117 5BF8           24                     01  and	al,*1
23118 5BFA           84C0                       test	al,al
23119 5BFC           74           09            je  	.1CE
23120                       00005BFE            .1CF:
23121                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
23122 5BFE           8B46         F8            mov	ax,-8[bp]
23123 5C01           05                   2000  add	ax,#$2000
23124 5C04           8946         F8            mov	-8[bp],ax
23125                                           !BCC_EOS
23126                                           ! 2802      data = read_byte(0xb800,addr);
23127                       00005C07            .1CE:
23128                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
23129 5C07           FF76         F8            push	-8[bp]
23130                                           ! Debug: list unsigned int = const $B800 (used reg = )
23131 5C0A           B8                   B800  mov	ax,#$B800
23132 5C0D           50                         push	ax
23133                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23134 5C0E           E8         215B            call	_read_byte
23135 5C11           83C4                   04  add	sp,*4
23136                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
23137 5C14           8846         FB            mov	-5[bp],al
23138                                           !BCC_EOS
23139                                           ! 2803      if(vga_modes[line].pixbits==2)
23140                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
23141 5C17           8A46         FE            mov	al,-2[bp]
23142 5C1A           30E4                       xor	ah,ah
23143 5C1C           B1                     03  mov	cl,*3
23144 5C1E           D3E0                       shl	ax,cl
23145 5C20           89C3                       mov	bx,ax
23146 5C22           81C3                 0204  add	bx,#_vga_modes
23147                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23148 5C26           8A47         03            mov	al,3[bx]
23149 5C29           3C                     02  cmp	al,*2
23150 5C2B           75           46            jne 	.1D0
23151                       00005C2D            .1D1:
23152                                           ! 2804       {
23153                                           ! 2805        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
23154                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23155 5C2D           8A46         08            mov	al,8[bp]
23156 5C30           24                     03  and	al,*3
23157                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23158 5C32           50                         push	ax
23159 5C33           B8                   0003  mov	ax,*3
23160 5C36           2A46         F6            sub	al,0+..FFF8[bp]
23161 5C39           80DC                   00  sbb	ah,*0
23162 5C3C           44                         inc	sp
23163 5C3D           44                         inc	sp
23164                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23165 5C3E           D1E0                       shl	ax,*1
23166 5C40           50                         push	ax
23167                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
23168 5C41           8A46         06            mov	al,6[bp]
23169 5C44           24                     03  and	al,*3
23170                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23171 5C46           30E4                       xor	ah,ah
23172 5C48           8B4E         F6            mov	cx,0+..FFF8[bp]
23173 5C4B           D3E0                       shl	ax,cl
23174 5C4D           44                         inc	sp
23175 5C4E           44                         inc	sp
23176                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23177 5C4F           8846         FC            mov	-4[bp],al
23178                                           !BCC_EOS
23179                                           ! 2806        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23180                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23181 5C52           8A46         08            mov	al,8[bp]
23182 5C55           24                     03  and	al,*3
23183                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23184 5C57           50                         push	ax
23185 5C58           B8                   0003  mov	ax,*3
23186 5C5B           2A46         F6            sub	al,0+..FFF8[bp]
23187 5C5E           80DC                   00  sbb	ah,*0
23188 5C61           44                         inc	sp
23189 5C62           44                         inc	sp
23190                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23191 5C63           D1E0                       shl	ax,*1
23192                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23193 5C65           89C3                       mov	bx,ax
23194 5C67           B8                   0003  mov	ax,*3
23195 5C6A           89D9                       mov	cx,bx
23196 5C6C           D3E0                       shl	ax,cl
23197                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23198 5C6E           8846         FD            mov	-3[bp],al
23199                                           !BCC_EOS
23200                                           ! 2807       }
23201                                           ! 2808      else
23202                                           ! 2809       {
23203 5C71           EB           40            jmp .1D2
23204                       00005C73            .1D0:
23205                                           ! 2810        attr = (AL & 0x01) << (7 - (CX & 0x07));
23206                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23207 5C73           8A46         08            mov	al,8[bp]
23208 5C76           24                     07  and	al,*7
23209                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23210 5C78           50                         push	ax
23211 5C79           B8                   0007  mov	ax,*7
23212 5C7C           2A46         F6            sub	al,0+..FFF8[bp]
23213 5C7F           80DC                   00  sbb	ah,*0
23214 5C82           44                         inc	sp
23215 5C83           44                         inc	sp
23216 5C84           50                         push	ax
23217                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23218 5C85           8A46         06            mov	al,6[bp]
23219 5C88           24                     01  and	al,*1
23220                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23221 5C8A           30E4                       xor	ah,ah
23222 5C8C           8B4E         F6            mov	cx,0+..FFF8[bp]
23223 5C8F           D3E0                       shl	ax,cl
23224 5C91           44                         inc	sp
23225 5C92           44                         inc	sp
23226                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23227 5C93           8846         FC            mov	-4[bp],al
23228                                           !BCC_EOS
23229                                           ! 2811        mask = 0x01 << (7 - (CX & 0x07));
23230                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23231 5C96           8A46         08            mov	al,8[bp]
23232 5C99           24                     07  and	al,*7
23233                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23234 5C9B           50                         push	ax
23235 5C9C           B8                   0007  mov	ax,*7
23236 5C9F           2A46         F6            sub	al,0+..FFF8[bp]
23237 5CA2           80DC                   00  sbb	ah,*0
23238 5CA5           44                         inc	sp
23239 5CA6           44                         inc	sp
23240                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23241 5CA7           89C3                       mov	bx,ax
23242 5CA9           B8                   0001  mov	ax,*1
23243 5CAC           89D9                       mov	cx,bx
23244 5CAE           D3E0                       shl	ax,cl
23245                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23246 5CB0           8846         FD            mov	-3[bp],al
23247                                           !BCC_EOS
23248                                           ! 2812       }
23249                                           ! 2813      if (AL & 0x80)
23250                       00005CB3            .1D2:
23251                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23252 5CB3           8A46         06            mov	al,6[bp]
23253 5CB6           24                     80  and	al,#$80
23254 5CB8           84C0                       test	al,al
23255 5CBA           74           0B            je  	.1D3
23256                       00005CBC            .1D4:
23257                                           ! 2814       {
23258                                           ! 2815        data ^= attr;
23259                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23260 5CBC           8A46         FB            mov	al,-5[bp]
23261 5CBF           3246         FC            xor	al,-4[bp]
23262 5CC2           8846         FB            mov	-5[bp],al
23263                                           !BCC_EOS
23264                                           ! 2816       }
23265                                           ! 2817      else
23266                                           ! 2818       {
23267 5CC5           EB           16            jmp .1D5
23268                       00005CC7            .1D3:
23269                                           ! 2819        data &= ~mask;
23270                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23271 5CC7           8A46         FD            mov	al,-3[bp]
23272 5CCA           30E4                       xor	ah,ah
23273 5CCC           F7D0                       not	ax
23274                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23275 5CCE           2246         FB            and	al,-5[bp]
23276 5CD1           8846         FB            mov	-5[bp],al
23277                                           !BCC_EOS
23278                                           ! 2820        data |= attr;
23279                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23280 5CD4           8A46         FB            mov	al,-5[bp]
23281 5CD7           0A46         FC            or	al,-4[bp]
23282 5CDA           8846         FB            mov	-5[bp],al
23283                                           !BCC_EOS
23284                                           ! 2821       }
23285                                           ! 2822      write_byte(0xb800,addr,data);
23286                       00005CDD            .1D5:
23287                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23288 5CDD           8A46         FB            mov	al,-5[bp]
23289 5CE0           30E4                       xor	ah,ah
23290 5CE2           50                         push	ax
23291                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23292 5CE3           FF76         F8            push	-8[bp]
23293                                           ! Debug: list unsigned int = const $B800 (used reg = )
23294 5CE6           B8                   B800  mov	ax,#$B800
23295 5CE9           50                         push	ax
23296                                           ! Debug: func () void = write_byte+0 (used reg = )
23297 5CEA           E8         20A5            call	_write_byte
23298 5CED           83C4                   06  add	sp,*6
23299                                           !BCC_EOS
23300                                           ! 2823      break;
23301 5CF0           EB           4F            jmp .1C3
23302                                           !BCC_EOS
23303                                           ! 2824    case 0x05:
23304                                           ! 2825      addr=CX+DX*(read_word(0x40,0x4A)*8);
23305                       00005CF2            .1D6:
23306                                           ! Debug: list int = const $4A (used reg = )
23307 5CF2           B8                   004A  mov	ax,*$4A
23308 5CF5           50                         push	ax
23309                                           ! Debug: list int = const $40 (used reg = )
23310 5CF6           B8                   0040  mov	ax,*$40
23311 5CF9           50                         push	ax
23312                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23313 5CFA           E8         2082            call	_read_word
23314 5CFD           83C4                   04  add	sp,*4
23315                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23316 5D00           B1                     03  mov	cl,*3
23317 5D02           D3E0                       shl	ax,cl
23318                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23319                                           ! Debug: expression subtree swapping
23320 5D04           8B4E         0A            mov	cx,$A[bp]
23321 5D07           F7E9                       imul	cx
23322                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23323                                           ! Debug: expression subtree swapping
23324 5D09           0346         08            add	ax,8[bp]
23325                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23326 5D0C           8946         F8            mov	-8[bp],ax
23327                                           !BCC_EOS
23328                                           ! 2826      write_byte(0xa000,addr,AL);
23329                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23330 5D0F           8A46         06            mov	al,6[bp]
23331 5D12           30E4                       xor	ah,ah
23332 5D14           50                         push	ax
23333                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23334 5D15           FF76         F8            push	-8[bp]
23335                                           ! Debug: list unsigned int = const $A000 (used reg = )
23336 5D18           B8                   A000  mov	ax,#$A000
23337 5D1B           50                         push	ax
23338                                           ! Debug: func () void = write_byte+0 (used reg = )
23339 5D1C           E8         2073            call	_write_byte
23340 5D1F           83C4                   06  add	sp,*6
23341                                           !BCC_EOS
23342                                           ! 2827      break;
23343 5D22           EB           1D            jmp .1C3
23344                                           !BCC_EOS
23345                                           ! 2828    default:
23346                                           ! 2829      unimplemented();
23347                       00005D24            .1D7:
23348                                           ! Debug: func () void = unimplemented+0 (used reg = )
23349 5D24           E8         20D4            call	_unimplemented
23350                                           !BCC_EOS
23351                                           ! 2830   }
23352                                           ! 2831 }
23353 5D27           EB           18            jmp .1C3
23354                       00005D29            .1C5:
23355 5D29           2C                     02  sub	al,*2
23356 5D2B         0F84         FE7A            beq 	.1CA
23357 5D2F           2C                     01  sub	al,*1
23358 5D31         0F84         FDCE            beq 	.1C7
23359 5D35           2C                     01  sub	al,*1
23360 5D37         0F84         FDC8            beq 	.1C6
23361 5D3B           2C                     01  sub	al,*1
23362 5D3D           74           B3            je 	.1D6
23363 5D3F           EB           E3            jmp	.1D7
23364                       00005D41            .1C3:
23365                       FFFFFFF6            ..FFF8	=	-$A
23366 5D41           89EC                       mov	sp,bp
23367 5D43           5D                         pop	bp
23368 5D44           C3                         ret
23369                                           ! 2832 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23370                                           ! Register BX used in function biosfn_write_pixel
23371                       00005D45            _biosfn_read_pixel:
23372                                           !BCC_EOS
23373                                           !BCC_EOS
23374                                           !BCC_EOS
23375                                           !BCC_EOS
23376                                           ! 2833 {
23377                                           ! 2834  Bit8u mode,line,mask,attr,data,i;
23378                                           !BCC_EOS
23379                                           ! 2835  Bit16u addr;
23380                                           !BCC_EOS
23381                                           ! 2836  Bit16u ss=get_SS();
23382 5D45           55                         push	bp
23383 5D46           89E5                       mov	bp,sp
23384 5D48           83C4                   F6  add	sp,*-$A
23385                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23386 5D4B           E8         20AA            call	_get_SS
23387                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23388 5D4E           8946         F6            mov	-$A[bp],ax
23389                                           !BCC_EOS
23390                                           ! 2837  mode=read_byte(0x40,0x49);
23391                                           ! Debug: list int = const $49 (used reg = )
23392 5D51           B8                   0049  mov	ax,*$49
23393 5D54           50                         push	ax
23394                                           ! Debug: list int = const $40 (used reg = )
23395 5D55           B8                   0040  mov	ax,*$40
23396 5D58           50                         push	ax
23397                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23398 5D59           E8         2010            call	_read_byte
23399 5D5C           83C4                   04  add	sp,*4
23400                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23401 5D5F           8846         FF            mov	-1[bp],al
23402                                           !BCC_EOS
23403                                           ! 2838  line=find_vga_entry(mode);
23404                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23405 5D62           8A46         FF            mov	al,-1[bp]
23406 5D65           30E4                       xor	ah,ah
23407 5D67           50                         push	ax
23408                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23409 5D68           E8         1F15            call	_find_vga_entry
23410 5D6B           44                         inc	sp
23411 5D6C           44                         inc	sp
23412                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23413 5D6D           8846         FE            mov	-2[bp],al
23414                                           !BCC_EOS
23415                                           ! 2839  if(line==0xFF)return;
23416                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23417 5D70           8A46         FE            mov	al,-2[bp]
23418 5D73           3C                     FF  cmp	al,#$FF
23419 5D75           75           04            jne 	.1D8
23420                       00005D77            .1D9:
23421 5D77           89EC                       mov	sp,bp
23422 5D79           5D                         pop	bp
23423 5D7A           C3                         ret
23424                                           !BCC_EOS
23425                                           ! 2840  if(vga_modes[line].class==0x00)return;
23426                       00005D7B            .1D8:
23427                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23428 5D7B           8A46         FE            mov	al,-2[bp]
23429 5D7E           30E4                       xor	ah,ah
23430 5D80           B1                     03  mov	cl,*3
23431 5D82           D3E0                       shl	ax,cl
23432 5D84           89C3                       mov	bx,ax
23433 5D86           81C3                 0204  add	bx,#_vga_modes
23434                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23435 5D8A           8A47         01            mov	al,1[bx]
23436 5D8D           84C0                       test	al,al
23437 5D8F           75           04            jne 	.1DA
23438                       00005D91            .1DB:
23439 5D91           89EC                       mov	sp,bp
23440 5D93           5D                         pop	bp
23441 5D94           C3                         ret
23442                                           !BCC_EOS
23443                                           ! 2841  switch(vga_modes[line].memmodel)
23444                       00005D95            .1DA:
23445                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23446 5D95           8A46         FE            mov	al,-2[bp]
23447 5D98           30E4                       xor	ah,ah
23448 5D9A           B1                     03  mov	cl,*3
23449 5D9C           D3E0                       shl	ax,cl
23450 5D9E           89C3                       mov	bx,ax
23451 5DA0           81C3                 0204  add	bx,#_vga_modes
23452 5DA4           8A47         02            mov	al,2[bx]
23453                                           ! 2842   {
23454 5DA7           E9         016A            br 	.1DE
23455                                           ! 2843    case 0x04:
23456                                           ! 2844    case 0x03:
23457                       00005DAA            .1DF:
23458                                           ! 2845      addr = CX/8+DX*read_word(0x40,0x4A);
23459                       00005DAA            .1E0:
23460                                           ! Debug: list int = const $4A (used reg = )
23461 5DAA           B8                   004A  mov	ax,*$4A
23462 5DAD           50                         push	ax
23463                                           ! Debug: list int = const $40 (used reg = )
23464 5DAE           B8                   0040  mov	ax,*$40
23465 5DB1           50                         push	ax
23466                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23467 5DB2           E8         1FCA            call	_read_word
23468 5DB5           83C4                   04  add	sp,*4
23469                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23470                                           ! Debug: expression subtree swapping
23471 5DB8           8B4E         08            mov	cx,8[bp]
23472 5DBB           F7E9                       imul	cx
23473 5DBD           50                         push	ax
23474                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23475 5DBE           8B46         06            mov	ax,6[bp]
23476 5DC1           B1                     03  mov	cl,*3
23477 5DC3           D3E8                       shr	ax,cl
23478                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23479 5DC5           0346         F4            add	ax,0+..FFF7[bp]
23480 5DC8           44                         inc	sp
23481 5DC9           44                         inc	sp
23482                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23483 5DCA           8946         F8            mov	-8[bp],ax
23484                                           !BCC_EOS
23485                                           ! 2846      mask = 0x80 >> (CX & 0x07);
23486                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23487 5DCD           8A46         06            mov	al,6[bp]
23488 5DD0           24                     07  and	al,*7
23489                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23490 5DD2           30E4                       xor	ah,ah
23491 5DD4           89C3                       mov	bx,ax
23492 5DD6           B8                   0080  mov	ax,#$80
23493 5DD9           89D9                       mov	cx,bx
23494 5DDB           D3F8                       sar	ax,cl
23495                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23496 5DDD           8846         FD            mov	-3[bp],al
23497                                           !BCC_EOS
23498                                           ! 2847      attr = 0x00;
23499                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23500 5DE0           30C0                       xor	al,al
23501 5DE2           8846         FC            mov	-4[bp],al
23502                                           !BCC_EOS
23503                                           ! 2848      for(i=0;i<4;i++)
23504                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23505 5DE5           30C0                       xor	al,al
23506 5DE7           8846         FA            mov	-6[bp],al
23507                                           !BCC_EOS
23508                                           !BCC_EOS
23509                                           ! 2849       {
23510 5DEA           EB           4B            jmp .1E3
23511                       00005DEC            .1E4:
23512                                           ! 2850        outw(0x3ce, (i << 8)
23513                                           ! 2850  | 0x04);
23514                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23515 5DEC           8A46         FA            mov	al,-6[bp]
23516 5DEF           30E4                       xor	ah,ah
23517 5DF1           88C4                       mov	ah,al
23518 5DF3           30C0                       xor	al,al
23519                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23520 5DF5           0C                     04  or	al,*4
23521                                           ! Debug: list unsigned int = ax+0 (used reg = )
23522 5DF7           50                         push	ax
23523                                           ! Debug: list int = const $3CE (used reg = )
23524 5DF8           B8                   03CE  mov	ax,#$3CE
23525 5DFB           50                         push	ax
23526                                           ! Debug: func () void = outw+0 (used reg = )
23527 5DFC           E8         1FE9            call	_outw
23528 5DFF           83C4                   04  add	sp,*4
23529                                           !BCC_EOS
23530                                           ! 2851        data = read_byte(0xa000,addr) & mask;
23531                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23532 5E02           FF76         F8            push	-8[bp]
23533                                           ! Debug: list unsigned int = const $A000 (used reg = )
23534 5E05           B8                   A000  mov	ax,#$A000
23535 5E08           50                         push	ax
23536                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23537 5E09           E8         1F60            call	_read_byte
23538 5E0C           83C4                   04  add	sp,*4
23539                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23540 5E0F           2246         FD            and	al,-3[bp]
23541                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23542 5E12           8846         FB            mov	-5[bp],al
23543                                           !BCC_EOS
23544                                           ! 2852        if (data > 0) attr |= (0x01 << i);
23545                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23546 5E15           8A46         FB            mov	al,-5[bp]
23547 5E18           84C0                       test	al,al
23548 5E1A           74           14            je  	.1E5
23549                       00005E1C            .1E6:
23550                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23551 5E1C           8A46         FA            mov	al,-6[bp]
23552 5E1F           30E4                       xor	ah,ah
23553 5E21           89C3                       mov	bx,ax
23554 5E23           B8                   0001  mov	ax,*1
23555 5E26           89D9                       mov	cx,bx
23556 5E28           D3E0                       shl	ax,cl
23557                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23558 5E2A           0A46         FC            or	al,-4[bp]
23559 5E2D           8846         FC            mov	-4[bp],al
23560                                           !BCC_EOS
23561                                           ! 2853       }
23562                       00005E30            .1E5:
23563                                           ! 2854      break;
23564                       00005E30            .1E2:
23565                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23566 5E30           8A46         FA            mov	al,-6[bp]
23567 5E33           40                         inc	ax
23568 5E34           8846         FA            mov	-6[bp],al
23569                       00005E37            .1E3:
23570                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23571 5E37           8A46         FA            mov	al,-6[bp]
23572 5E3A           3C                     04  cmp	al,*4
23573 5E3C           72           AE            jb 	.1E4
23574                       00005E3E            .1E7:
23575                       00005E3E            .1E1:
23576 5E3E           E9         00EB            br 	.1DC
23577                                           !BCC_EOS
23578                                           ! 2855    case 0x02:
23579                                           ! 2856      addr=(CX>>2)+(DX>>1)*80;
23580                       00005E41            .1E8:
23581                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23582 5E41           8B46         08            mov	ax,8[bp]
23583 5E44           D1E8                       shr	ax,*1
23584                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23585 5E46           B9                   0050  mov	cx,*$50
23586 5E49           F7E9                       imul	cx
23587 5E4B           50                         push	ax
23588                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23589 5E4C           8B46         06            mov	ax,6[bp]
23590 5E4F           D1E8                       shr	ax,*1
23591 5E51           D1E8                       shr	ax,*1
23592                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23593 5E53           0346         F4            add	ax,0+..FFF7[bp]
23594 5E56           44                         inc	sp
23595 5E57           44                         inc	sp
23596                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23597 5E58           8946         F8            mov	-8[bp],ax
23598                                           !BCC_EOS
23599                                           ! 2857      if (DX & 1) addr += 0x2000;
23600                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23601 5E5B           8A46         08            mov	al,8[bp]
23602 5E5E           24                     01  and	al,*1
23603 5E60           84C0                       test	al,al
23604 5E62           74           09            je  	.1E9
23605                       00005E64            .1EA:
23606                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23607 5E64           8B46         F8            mov	ax,-8[bp]
23608 5E67           05                   2000  add	ax,#$2000
23609 5E6A           8946         F8            mov	-8[bp],ax
23610                                           !BCC_EOS
23611                                           ! 2858      data = read_byte(0xb800,addr);
23612                       00005E6D            .1E9:
23613                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23614 5E6D           FF76         F8            push	-8[bp]
23615                                           ! Debug: list unsigned int = const $B800 (used reg = )
23616 5E70           B8                   B800  mov	ax,#$B800
23617 5E73           50                         push	ax
23618                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23619 5E74           E8         1EF5            call	_read_byte
23620 5E77           83C4                   04  add	sp,*4
23621                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23622 5E7A           8846         FB            mov	-5[bp],al
23623                                           !BCC_EOS
23624                                           ! 2859      if(vga_modes[line].pixbits==2)
23625                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23626 5E7D           8A46         FE            mov	al,-2[bp]
23627 5E80           30E4                       xor	ah,ah
23628 5E82           B1                     03  mov	cl,*3
23629 5E84           D3E0                       shl	ax,cl
23630 5E86           89C3                       mov	bx,ax
23631 5E88           81C3                 0204  add	bx,#_vga_modes
23632                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23633 5E8C           8A47         03            mov	al,3[bx]
23634 5E8F           3C                     02  cmp	al,*2
23635 5E91           75           25            jne 	.1EB
23636                       00005E93            .1EC:
23637                                           ! 2860       {
23638                                           ! 2861        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23639                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23640 5E93           8A46         06            mov	al,6[bp]
23641 5E96           24                     03  and	al,*3
23642                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23643 5E98           50                         push	ax
23644 5E99           B8                   0003  mov	ax,*3
23645 5E9C           2A46         F4            sub	al,0+..FFF7[bp]
23646 5E9F           80DC                   00  sbb	ah,*0
23647 5EA2           44                         inc	sp
23648 5EA3           44                         inc	sp
23649                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23650 5EA4           D1E0                       shl	ax,*1
23651                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23652 5EA6           89C3                       mov	bx,ax
23653 5EA8           8A46         FB            mov	al,-5[bp]
23654 5EAB           30E4                       xor	ah,ah
23655 5EAD           89D9                       mov	cx,bx
23656 5EAF           D3E8                       shr	ax,cl
23657                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23658 5EB1           24                     03  and	al,*3
23659                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23660 5EB3           8846         FC            mov	-4[bp],al
23661                                           !BCC_EOS
23662                                           ! 2862       }
23663                                           ! 2863      else
23664                                           ! 2864       {
23665 5EB6           EB           21            jmp .1ED
23666                       00005EB8            .1EB:
23667                                           ! 2865        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23668                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23669 5EB8           8A46         06            mov	al,6[bp]
23670 5EBB           24                     07  and	al,*7
23671                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23672 5EBD           50                         push	ax
23673 5EBE           B8                   0007  mov	ax,*7
23674 5EC1           2A46         F4            sub	al,0+..FFF7[bp]
23675 5EC4           80DC                   00  sbb	ah,*0
23676 5EC7           44                         inc	sp
23677 5EC8           44                         inc	sp
23678                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23679 5EC9           89C3                       mov	bx,ax
23680 5ECB           8A46         FB            mov	al,-5[bp]
23681 5ECE           30E4                       xor	ah,ah
23682 5ED0           89D9                       mov	cx,bx
23683 5ED2           D3E8                       shr	ax,cl
23684                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23685 5ED4           24                     01  and	al,*1
23686                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23687 5ED6           8846         FC            mov	-4[bp],al
23688                                           !BCC_EOS
23689                                           ! 2866       }
23690                                           ! 2867      break;
23691                       00005ED9            .1ED:
23692 5ED9           EB           51            jmp .1DC
23693                                           !BCC_EOS
23694                                           ! 2868    case 0x05:
23695                                           ! 2869      addr=CX+DX*(read_word(0x40,0x4A)*8);
23696                       00005EDB            .1EE:
23697                                           ! Debug: list int = const $4A (used reg = )
23698 5EDB           B8                   004A  mov	ax,*$4A
23699 5EDE           50                         push	ax
23700                                           ! Debug: list int = const $40 (used reg = )
23701 5EDF           B8                   0040  mov	ax,*$40
23702 5EE2           50                         push	ax
23703                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23704 5EE3           E8         1E99            call	_read_word
23705 5EE6           83C4                   04  add	sp,*4
23706                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23707 5EE9           B1                     03  mov	cl,*3
23708 5EEB           D3E0                       shl	ax,cl
23709                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23710                                           ! Debug: expression subtree swapping
23711 5EED           8B4E         08            mov	cx,8[bp]
23712 5EF0           F7E9                       imul	cx
23713                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23714                                           ! Debug: expression subtree swapping
23715 5EF2           0346         06            add	ax,6[bp]
23716                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23717 5EF5           8946         F8            mov	-8[bp],ax
23718                                           !BCC_EOS
23719                                           ! 2870      attr=read_byte(0xa000,addr);
23720                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23721 5EF8           FF76         F8            push	-8[bp]
23722                                           ! Debug: list unsigned int = const $A000 (used reg = )
23723 5EFB           B8                   A000  mov	ax,#$A000
23724 5EFE           50                         push	ax
23725                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23726 5EFF           E8         1E6A            call	_read_byte
23727 5F02           83C4                   04  add	sp,*4
23728                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23729 5F05           8846         FC            mov	-4[bp],al
23730                                           !BCC_EOS
23731                                           ! 2871      break;
23732 5F08           EB           22            jmp .1DC
23733                                           !BCC_EOS
23734                                           ! 2872    default:
23735                                           ! 2873      unimplemented();
23736                       00005F0A            .1EF:
23737                                           ! Debug: func () void = unimplemented+0 (used reg = )
23738 5F0A           E8         1EEE            call	_unimplemented
23739                                           !BCC_EOS
23740                                           ! 2874      attr = 0;
23741                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23742 5F0D           30C0                       xor	al,al
23743 5F0F           8846         FC            mov	-4[bp],al
23744                                           !BCC_EOS
23745                                           ! 2875   }
23746                                           ! 2876  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23747 5F12           EB           18            jmp .1DC
23748                       00005F14            .1DE:
23749 5F14           2C                     02  sub	al,*2
23750 5F16         0F84         FF27            beq 	.1E8
23751 5F1A           2C                     01  sub	al,*1
23752 5F1C         0F84         FE8A            beq 	.1E0
23753 5F20           2C                     01  sub	al,*1
23754 5F22         0F84         FE84            beq 	.1DF
23755 5F26           2C                     01  sub	al,*1
23756 5F28           74           B1            je 	.1EE
23757 5F2A           EB           DE            jmp	.1EF
23758                       00005F2C            .1DC:
23759                       FFFFFFF4            ..FFF7	=	-$C
23760                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23761 5F2C           FF76         0A            push	$A[bp]
23762                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23763 5F2F           FF76         F6            push	-$A[bp]
23764                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23765 5F32           E8         1E4A            call	_read_word
23766 5F35           83C4                   04  add	sp,*4
23767                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23768 5F38           30C0                       xor	al,al
23769                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23770 5F3A           0A46         FC            or	al,-4[bp]
23771                                           ! Debug: list unsigned int = ax+0 (used reg = )
23772 5F3D           50                         push	ax
23773                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23774 5F3E           FF76         0A            push	$A[bp]
23775                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23776 5F41           FF76         F6            push	-$A[bp]
23777                                           ! Debug: func () void = write_word+0 (used reg = )
23778 5F44           E8         1E63            call	_write_word
23779 5F47           83C4                   06  add	sp,*6
23780                                           !BCC_EOS
23781                                           ! 2877 }
23782 5F4A           89EC                       mov	sp,bp
23783 5F4C           5D                         pop	bp
23784 5F4D           C3                         ret
23785                                           ! 2878 static void biosfn_write_teletype (car, page, attr, flag)
23786                                           ! Register BX used in function biosfn_read_pixel
23787                                           ! 2879 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23788                       00005F4E            _biosfn_write_teletype:
23789                                           !BCC_EOS
23790                                           !BCC_EOS
23791                                           !BCC_EOS
23792                                           !BCC_EOS
23793                                           ! 2880 {
23794                                           ! 2881  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23795                                           !BCC_EOS
23796                                           ! 2882  Bit16u nbcols,nbrows,address;
23797                                           !BCC_EOS
23798                                           ! 2883  Bit16u cursor,dummy;
23799                                           !BCC_EOS
23800                                           ! 2884  if(page==0xff)
23801 5F4E           55                         push	bp
23802 5F4F           89E5                       mov	bp,sp
23803 5F51           83C4                   F0  add	sp,*-$10
23804                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23805 5F54           8A46         06            mov	al,6[bp]
23806 5F57           3C                     FF  cmp	al,#$FF
23807 5F59           75           11            jne 	.1F0
23808                       00005F5B            .1F1:
23809                                           ! 2885   page=read_byte(0x40,0x62);
23810                                           ! Debug: list int = const $62 (used reg = )
23811 5F5B           B8                   0062  mov	ax,*$62
23812 5F5E           50                         push	ax
23813                                           ! Debug: list int = const $40 (used reg = )
23814 5F5F           B8                   0040  mov	ax,*$40
23815 5F62           50                         push	ax
23816                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23817 5F63           E8         1E06            call	_read_byte
23818 5F66           83C4                   04  add	sp,*4
23819                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23820 5F69           8846         06            mov	6[bp],al
23821                                           !BCC_EOS
23822                                           ! 2886  mode=read_byte(0x40,0x49);
23823                       00005F6C            .1F0:
23824                                           ! Debug: list int = const $49 (used reg = )
23825 5F6C           B8                   0049  mov	ax,*$49
23826 5F6F           50                         push	ax
23827                                           ! Debug: list int = const $40 (used reg = )
23828 5F70           B8                   0040  mov	ax,*$40
23829 5F73           50                         push	ax
23830                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23831 5F74           E8         1DF5            call	_read_byte
23832 5F77           83C4                   04  add	sp,*4
23833                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23834 5F7A           8846         FC            mov	-4[bp],al
23835                                           !BCC_EOS
23836                                           ! 2887  line=find_vga_entry(mode);
23837                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23838 5F7D           8A46         FC            mov	al,-4[bp]
23839 5F80           30E4                       xor	ah,ah
23840 5F82           50                         push	ax
23841                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23842 5F83           E8         1CFA            call	_find_vga_entry
23843 5F86           44                         inc	sp
23844 5F87           44                         inc	sp
23845                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23846 5F88           8846         FB            mov	-5[bp],al
23847                                           !BCC_EOS
23848                                           ! 2888  if(line==0xFF)return;
23849                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23850 5F8B           8A46         FB            mov	al,-5[bp]
23851 5F8E           3C                     FF  cmp	al,#$FF
23852 5F90           75           04            jne 	.1F2
23853                       00005F92            .1F3:
23854 5F92           89EC                       mov	sp,bp
23855 5F94           5D                         pop	bp
23856 5F95           C3                         ret
23857                                           !BCC_EOS
23858                                           ! 2889  biosfn_get_cursor_pos(page,&dummy,&cursor);
23859                       00005F96            .1F2:
23860                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23861 5F96           8D5E         F2            lea	bx,-$E[bp]
23862 5F99           53                         push	bx
23863                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23864 5F9A           8D5E         F0            lea	bx,-$10[bp]
23865 5F9D           53                         push	bx
23866                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23867 5F9E           8A46         06            mov	al,6[bp]
23868 5FA1           30E4                       xor	ah,ah
23869 5FA3           50                         push	ax
23870                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23871 5FA4           E8         E50F            call	_biosfn_get_cursor_pos
23872 5FA7           83C4                   06  add	sp,*6
23873                                           !BCC_EOS
23874                                           ! 2890  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23875                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23876 5FAA           8A46         F2            mov	al,-$E[bp]
23877                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23878 5FAD           8846         FE            mov	-2[bp],al
23879                                           !BCC_EOS
23880                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23881 5FB0           8B46         F2            mov	ax,-$E[bp]
23882 5FB3           30C0                       xor	al,al
23883                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23884 5FB5           88E0                       mov	al,ah
23885 5FB7           30E4                       xor	ah,ah
23886                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23887 5FB9           8846         FD            mov	-3[bp],al
23888                                           !BCC_EOS
23889                                           ! 2891  nbrows=read_byte(0x40,0x84)+1;
23890                                           ! Debug: list int = const $84 (used reg = )
23891 5FBC           B8                   0084  mov	ax,#$84
23892 5FBF           50                         push	ax
23893                                           ! Debug: list int = const $40 (used reg = )
23894 5FC0           B8                   0040  mov	ax,*$40
23895 5FC3           50                         push	ax
23896                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23897 5FC4           E8         1DA5            call	_read_byte
23898 5FC7           83C4                   04  add	sp,*4
23899                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23900 5FCA           30E4                       xor	ah,ah
23901                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23902 5FCC           40                         inc	ax
23903 5FCD           8946         F6            mov	-$A[bp],ax
23904                                           !BCC_EOS
23905                                           ! 2892  nbcols=read_word(0x40,0x4A);
23906                                           ! Debug: list int = const $4A (used reg = )
23907 5FD0           B8                   004A  mov	ax,*$4A
23908 5FD3           50                         push	ax
23909                                           ! Debug: list int = const $40 (used reg = )
23910 5FD4           B8                   0040  mov	ax,*$40
23911 5FD7           50                         push	ax
23912                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23913 5FD8           E8         1DA4            call	_read_word
23914 5FDB           83C4                   04  add	sp,*4
23915                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23916 5FDE           8946         F8            mov	-8[bp],ax
23917                                           !BCC_EOS
23918                                           ! 2893  switch(car)
23919 5FE1           8A46         04            mov	al,4[bp]
23920                                           ! 2894   {
23921 5FE4           E9         01EF            br 	.1F6
23922                                           ! 2895    case 7:
23923                                           ! 2896     break;
23924                       00005FE7            .1F7:
23925 5FE7           E9         020D            br 	.1F4
23926                                           !BCC_EOS
23927                                           ! 2897    case 8:
23928                                           ! 2898     if(xcurs>0)xcurs--;
23929                       00005FEA            .1F8:
23930                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23931 5FEA           8A46         FE            mov	al,-2[bp]
23932 5FED           84C0                       test	al,al
23933 5FEF           74           07            je  	.1F9
23934                       00005FF1            .1FA:
23935                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23936 5FF1           8A46         FE            mov	al,-2[bp]
23937 5FF4           48                         dec	ax
23938 5FF5           8846         FE            mov	-2[bp],al
23939                                           !BCC_EOS
23940                                           ! 2899     break;
23941                       00005FF8            .1F9:
23942 5FF8           E9         01FC            br 	.1F4
23943                                           !BCC_EOS
23944                                           ! 2900    case '\r':
23945                                           ! 2901     xcurs=0;
23946                       00005FFB            .1FB:
23947                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23948 5FFB           30C0                       xor	al,al
23949 5FFD           8846         FE            mov	-2[bp],al
23950                                           !BCC_EOS
23951                                           ! 2902     break;
23952 6000           E9         01F4            br 	.1F4
23953                                           !BCC_EOS
23954                                           ! 2903    case '\n':
23955                                           ! 2904     ycurs++;
23956                       00006003            .1FC:
23957                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23958 6003           8A46         FD            mov	al,-3[bp]
23959 6006           40                         inc	ax
23960 6007           8846         FD            mov	-3[bp],al
23961                                           !BCC_EOS
23962                                           ! 2905     break;
23963 600A           E9         01EA            br 	.1F4
23964                                           !BCC_EOS
23965                                           ! 2906    case '\t':
23966                                           ! 2907     do
23967                       0000600D            .1FD:
23968                                           ! 2908      {
23969                       0000600D            .200:
23970                                           ! 2909       biosfn_write_teletype(' ',page,attr,flag);
23971                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23972 600D           8A46         0A            mov	al,$A[bp]
23973 6010           30E4                       xor	ah,ah
23974 6012           50                         push	ax
23975                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23976 6013           8A46         08            mov	al,8[bp]
23977 6016           30E4                       xor	ah,ah
23978 6018           50                         push	ax
23979                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23980 6019           8A46         06            mov	al,6[bp]
23981 601C           30E4                       xor	ah,ah
23982 601E           50                         push	ax
23983                                           ! Debug: list int = const $20 (used reg = )
23984 601F           B8                   0020  mov	ax,*$20
23985 6022           50                         push	ax
23986                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23987 6023           E8         FF28            call	_biosfn_write_teletype
23988 6026           83C4                   08  add	sp,*8
23989                                           !BCC_EOS
23990                                           ! 2910       biosfn_get_cursor_pos(page,&dummy,&cursor);
23991                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23992 6029           8D5E         F2            lea	bx,-$E[bp]
23993 602C           53                         push	bx
23994                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23995 602D           8D5E         F0            lea	bx,-$10[bp]
23996 6030           53                         push	bx
23997                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23998 6031           8A46         06            mov	al,6[bp]
23999 6034           30E4                       xor	ah,ah
24000 6036           50                         push	ax
24001                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
24002 6037           E8         E47C            call	_biosfn_get_cursor_pos
24003 603A           83C4                   06  add	sp,*6
24004                                           !BCC_EOS
24005                                           ! 2911       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
24006                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
24007 603D           8A46         F2            mov	al,-$E[bp]
24008                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24009 6040           8846         FE            mov	-2[bp],al
24010                                           !BCC_EOS
24011                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
24012 6043           8B46         F2            mov	ax,-$E[bp]
24013 6046           30C0                       xor	al,al
24014                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
24015 6048           88E0                       mov	al,ah
24016 604A           30E4                       xor	ah,ah
24017                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
24018 604C           8846         FD            mov	-3[bp],al
24019                                           !BCC_EOS
24020                                           ! 2912      }while(xcurs%8==0);
24021                       0000604F            .1FF:
24022                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
24023 604F           8A46         FE            mov	al,-2[bp]
24024 6052           30E4                       xor	ah,ah
24025 6054           24                     07  and	al,*7
24026                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
24027 6056           84C0                       test	al,al
24028 6058           74           B3            je 	.200
24029                       0000605A            .201:
24030                                           !BCC_EOS
24031                                           ! 2913     break;
24032                       0000605A            .1FE:
24033 605A           E9         019A            br 	.1F4
24034                                           !BCC_EOS
24035                                           ! 2914    default:
24036                                           ! 2915     if(vga_modes[line].class==0x00)
24037                       0000605D            .202:
24038                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24039 605D           8A46         FB            mov	al,-5[bp]
24040 6060           30E4                       xor	ah,ah
24041 6062           B1                     03  mov	cl,*3
24042 6064           D3E0                       shl	ax,cl
24043 6066           89C3                       mov	bx,ax
24044 6068           81C3                 0204  add	bx,#_vga_modes
24045                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24046 606C           8A47         01            mov	al,1[bx]
24047 606F           84C0                       test	al,al
24048 6071         0F85         0082            bne 	.203
24049                       00006075            .204:
24050                                           ! 2916      {
24051                                           ! 2917       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
24052                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
24053 6075           8A46         FD            mov	al,-3[bp]
24054 6078           30E4                       xor	ah,ah
24055 607A           8B4E         F8            mov	cx,-8[bp]
24056 607D           F7E9                       imul	cx
24057                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24058                                           ! Debug: expression subtree swapping
24059 607F           0246         FE            add	al,-2[bp]
24060 6082           80D4                   00  adc	ah,*0
24061                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24062 6085           D1E0                       shl	ax,*1
24063 6087           50                         push	ax
24064                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24065 6088           8B46         F8            mov	ax,-8[bp]
24066 608B           8B4E         F6            mov	cx,-$A[bp]
24067 608E           F7E9                       imul	cx
24068                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24069 6090           D1E0                       shl	ax,*1
24070                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24071 6092           0C                     FF  or	al,#$FF
24072                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24073                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24074 6094           89C3                       mov	bx,ax
24075 6096           8A46         06            mov	al,6[bp]
24076 6099           30E4                       xor	ah,ah
24077 609B           93                         xchg	ax,bx
24078 609C           40                         inc	ax
24079 609D           89D9                       mov	cx,bx
24080 609F           F7E9                       imul	cx
24081                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24082 60A1           0346         EE            add	ax,0+..FFF6[bp]
24083 60A4           44                         inc	sp
24084 60A5           44                         inc	sp
24085                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24086 60A6           8946         F4            mov	-$C[bp],ax
24087                                           !BCC_EOS
24088                                           ! 2918       write_byte(vga_modes[line].sstart,address,car);
24089                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
24090 60A9           8A46         04            mov	al,4[bp]
24091 60AC           30E4                       xor	ah,ah
24092 60AE           50                         push	ax
24093                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
24094 60AF           FF76         F4            push	-$C[bp]
24095                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
24096 60B2           8A46         FB            mov	al,-5[bp]
24097 60B5           30E4                       xor	ah,ah
24098 60B7           B1                     03  mov	cl,*3
24099 60B9           D3E0                       shl	ax,cl
24100 60BB           89C3                       mov	bx,ax
24101 60BD           81C3                 0204  add	bx,#_vga_modes
24102                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24103 60C1           FF77         04            push	4[bx]
24104                                           ! Debug: func () void = write_byte+0 (used reg = )
24105 60C4           E8         1CCB            call	_write_byte
24106 60C7           83C4                   06  add	sp,*6
24107                                           !BCC_EOS
24108                                           ! 2919       if(flag==3)
24109                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
24110 60CA           8A46         0A            mov	al,$A[bp]
24111 60CD           3C                     03  cmp	al,*3
24112 60CF           75           23            jne 	.205
24113                       000060D1            .206:
24114                                           ! 2920        write_byte(vga_modes[line].sstart,address+1,attr);
24115                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
24116 60D1           8A46         08            mov	al,8[bp]
24117 60D4           30E4                       xor	ah,ah
24118 60D6           50                         push	ax
24119                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
24120 60D7           8B46         F4            mov	ax,-$C[bp]
24121                                           ! Debug: list unsigned int = ax+1 (used reg = )
24122 60DA           40                         inc	ax
24123 60DB           50                         push	ax
24124                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
24125 60DC           8A46         FB            mov	al,-5[bp]
24126 60DF           30E4                       xor	ah,ah
24127 60E1           B1                     03  mov	cl,*3
24128 60E3           D3E0                       shl	ax,cl
24129 60E5           89C3                       mov	bx,ax
24130 60E7           81C3                 0204  add	bx,#_vga_modes
24131                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24132 60EB           FF77         04            push	4[bx]
24133                                           ! Debug: func () void = write_byte+0 (used reg = )
24134 60EE           E8         1CA1            call	_write_byte
24135 60F1           83C4                   06  add	sp,*6
24136                                           !BCC_EOS
24137                                           ! 2921      }
24138                       000060F4            .205:
24139                                           ! 2922     else
24140                                           ! 2923      {
24141 60F4           E9         00D6            br 	.207
24142                       000060F7            .203:
24143                                           ! 2924       cheight=video_param_table[line_to_vpti[line]].cheight;
24144                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
24145 60F7           8A46         FB            mov	al,-5[bp]
24146 60FA           30E4                       xor	ah,ah
24147 60FC           89C3                       mov	bx,ax
24148                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
24149 60FE           8A87       0284            mov	al,_line_to_vpti[bx]
24150 6102           30E4                       xor	ah,ah
24151 6104           B1                     06  mov	cl,*6
24152 6106           D3E0                       shl	ax,cl
24153 6108           89C3                       mov	bx,ax
24154 610A           81C3                 0298  add	bx,#_video_param_table
24155                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
24156 610E           8A47         02            mov	al,2[bx]
24157 6111           8846         FF            mov	-1[bp],al
24158                                           !BCC_EOS
24159                                           ! 2925       bpp=vga_modes[line].pixbits;
24160                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24161 6114           8A46         FB            mov	al,-5[bp]
24162 6117           30E4                       xor	ah,ah
24163 6119           B1                     03  mov	cl,*3
24164 611B           D3E0                       shl	ax,cl
24165 611D           89C3                       mov	bx,ax
24166 611F           81C3                 0204  add	bx,#_vga_modes
24167                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
24168 6123           8A47         03            mov	al,3[bx]
24169 6126           8846         FA            mov	-6[bp],al
24170                                           !BCC_EOS
24171                                           ! 2926       switch(vga_modes[line].memmodel)
24172                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24173 6129           8A46         FB            mov	al,-5[bp]
24174 612C           30E4                       xor	ah,ah
24175 612E           B1                     03  mov	cl,*3
24176 6130           D3E0                       shl	ax,cl
24177 6132           89C3                       mov	bx,ax
24178 6134           81C3                 0204  add	bx,#_vga_modes
24179 6138           8A47         02            mov	al,2[bx]
24180                                           ! 2927        {
24181 613B           EB           7A            jmp .20A
24182                                           ! 2928         case 0x04:
24183                                           ! 2929         case 0x03:
24184                       0000613D            .20B:
24185                                           ! 2930           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24186                       0000613D            .20C:
24187                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24188 613D           8A46         FF            mov	al,-1[bp]
24189 6140           30E4                       xor	ah,ah
24190 6142           50                         push	ax
24191                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24192 6143           FF76         F8            push	-8[bp]
24193                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24194 6146           8A46         FD            mov	al,-3[bp]
24195 6149           30E4                       xor	ah,ah
24196 614B           50                         push	ax
24197                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24198 614C           8A46         FE            mov	al,-2[bp]
24199 614F           30E4                       xor	ah,ah
24200 6151           50                         push	ax
24201                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24202 6152           8A46         08            mov	al,8[bp]
24203 6155           30E4                       xor	ah,ah
24204 6157           50                         push	ax
24205                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24206 6158           8A46         04            mov	al,4[bp]
24207 615B           30E4                       xor	ah,ah
24208 615D           50                         push	ax
24209                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24210 615E           E8         F08C            call	_write_gfx_char_pl4
24211 6161           83C4                   0C  add	sp,*$C
24212                                           !BCC_EOS
24213                                           ! 2931           break;
24214 6164           EB           67            jmp .208
24215                                           !BCC_EOS
24216                                           ! 2932        
24217                                           ! 2932  case 0x02:
24218                                           ! 2933           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24219                       00006166            .20D:
24220                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24221 6166           8A46         FA            mov	al,-6[bp]
24222 6169           30E4                       xor	ah,ah
24223 616B           50                         push	ax
24224                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24225 616C           FF76         F8            push	-8[bp]
24226                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24227 616F           8A46         FD            mov	al,-3[bp]
24228 6172           30E4                       xor	ah,ah
24229 6174           50                         push	ax
24230                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24231 6175           8A46         FE            mov	al,-2[bp]
24232 6178           30E4                       xor	ah,ah
24233 617A           50                         push	ax
24234                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24235 617B           8A46         08            mov	al,8[bp]
24236 617E           30E4                       xor	ah,ah
24237 6180           50                         push	ax
24238                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24239 6181           8A46         04            mov	al,4[bp]
24240 6184           30E4                       xor	ah,ah
24241 6186           50                         push	ax
24242                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24243 6187           E8         F1D6            call	_write_gfx_char_cga
24244 618A           83C4                   0C  add	sp,*$C
24245                                           !BCC_EOS
24246                                           ! 2934           break;
24247 618D           EB           3E            jmp .208
24248                                           !BCC_EOS
24249                                           ! 2935         case 0x05:
24250                                           ! 2936           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24251                       0000618F            .20E:
24252                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24253 618F           FF76         F8            push	-8[bp]
24254                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24255 6192           8A46         FD            mov	al,-3[bp]
24256 6195           30E4                       xor	ah,ah
24257 6197           50                         push	ax
24258                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24259 6198           8A46         FE            mov	al,-2[bp]
24260 619B           30E4                       xor	ah,ah
24261 619D           50                         push	ax
24262                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24263 619E           8A46         08            mov	al,8[bp]
24264 61A1           30E4                       xor	ah,ah
24265 61A3           50                         push	ax
24266                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24267 61A4           8A46         04            mov	al,4[bp]
24268 61A7           30E4                       xor	ah,ah
24269 61A9           50                         push	ax
24270                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24271 61AA           E8         F3B6            call	_write_gfx_char_lin
24272 61AD           83C4                   0A  add	sp,*$A
24273                                           !BCC_EOS
24274                                           ! 2937           break;
24275 61B0           EB           1B            jmp .208
24276                                           !BCC_EOS
24277                                           ! 2938         default:
24278                                           ! 2939           unimplemented();
24279                       000061B2            .20F:
24280                                           ! Debug: func () void = unimplemented+0 (used reg = )
24281 61B2           E8         1C46            call	_unimplemented
24282                                           !BCC_EOS
24283                                           ! 2940        }
24284                                           ! 2941      }
24285 61B5           EB           16            jmp .208
24286                       000061B7            .20A:
24287 61B7           2C                     02  sub	al,*2
24288 61B9           74           AB            je 	.20D
24289 61BB           2C                     01  sub	al,*1
24290 61BD         0F84         FF7C            beq 	.20C
24291 61C1           2C                     01  sub	al,*1
24292 61C3         0F84         FF76            beq 	.20B
24293 61C7           2C                     01  sub	al,*1
24294 61C9           74           C4            je 	.20E
24295 61CB           EB           E5            jmp	.20F
24296                       000061CD            .208:
24297                                           ! 2942     xcurs++;
24298                       000061CD            .207:
24299                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24300 61CD           8A46         FE            mov	al,-2[bp]
24301 61D0           40                         inc	ax
24302 61D1           8846         FE            mov	-2[bp],al
24303                                           !BCC_EOS
24304                                           ! 2943   }
24305                                           ! 2944  if(xcurs==nbcols)
24306 61D4           EB           21            jmp .1F4
24307                       000061D6            .1F6:
24308 61D6           2C                     07  sub	al,*7
24309 61D8         0F84         FE0B            beq 	.1F7
24310 61DC           2C                     01  sub	al,*1
24311 61DE         0F84         FE08            beq 	.1F8
24312 61E2           2C                     01  sub	al,*1
24313 61E4         0F84         FE25            beq 	.1FD
24314 61E8           2C                     01  sub	al,*1
24315 61EA         0F84         FE15            beq 	.1FC
24316 61EE           2C                     03  sub	al,*3
24317 61F0         0F84         FE07            beq 	.1FB
24318 61F4           E9         FE66            br 	.202
24319                       000061F7            .1F4:
24320                       FFFFFFEE            ..FFF6	=	-$12
24321                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24322 61F7           8A46         FE            mov	al,-2[bp]
24323 61FA           30E4                       xor	ah,ah
24324 61FC           3B46         F8            cmp	ax,-8[bp]
24325 61FF           75           0C            jne 	.210
24326                       00006201            .211:
24327                                           ! 2945   {xcurs=0;
24328                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24329 6201           30C0                       xor	al,al
24330 6203           8846         FE            mov	-2[bp],al
24331                                           !BCC_EOS
24332                                           ! 2946    ycurs++;
24333                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24334 6206           8A46         FD            mov	al,-3[bp]
24335 6209           40                         inc	ax
24336 620A           8846         FD            mov	-3[bp],al
24337                                           !BCC_EOS
24338                                           ! 2947   }
24339                                           ! 2948  if(ycurs==nbrows)
24340                       0000620D            .210:
24341                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24342 620D           8A46         FD            mov	al,-3[bp]
24343 6210           30E4                       xor	ah,ah
24344 6212           3B46         F6            cmp	ax,-$A[bp]
24345 6215         0F85         00C9            bne 	.212
24346                       00006219            .213:
24347                                           ! 2949   {
24348                                           ! 2950    if(vga_modes[line].class==0x00)
24349                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24350 6219           8A46         FB            mov	al,-5[bp]
24351 621C           30E4                       xor	ah,ah
24352 621E           B1                     03  mov	cl,*3
24353 6220           D3E0                       shl	ax,cl
24354 6222           89C3                       mov	bx,ax
24355 6224           81C3                 0204  add	bx,#_vga_modes
24356                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24357 6228           8A47         01            mov	al,1[bx]
24358 622B           84C0                       test	al,al
24359 622D         0F85         0081            bne 	.214
24360                       00006231            .215:
24361                                           ! 2951     {
24362                                           ! 2952      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
24363                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24364 6231           8A46         FD            mov	al,-3[bp]
24365 6234           30E4                       xor	ah,ah
24366                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
24367 6236           48                         dec	ax
24368 6237           8B4E         F8            mov	cx,-8[bp]
24369 623A           F7E9                       imul	cx
24370                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24371                                           ! Debug: expression subtree swapping
24372 623C           0246         FE            add	al,-2[bp]
24373 623F           80D4                   00  adc	ah,*0
24374                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24375 6242           D1E0                       shl	ax,*1
24376 6244           50                         push	ax
24377                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24378 6245           8B46         F8            mov	ax,-8[bp]
24379 6248           8B4E         F6            mov	cx,-$A[bp]
24380 624B           F7E9                       imul	cx
24381                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24382 624D           D1E0                       shl	ax,*1
24383                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24384 624F           0C                     FF  or	al,#$FF
24385                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24386                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24387 6251           89C3                       mov	bx,ax
24388 6253           8A46         06            mov	al,6[bp]
24389 6256           30E4                       xor	ah,ah
24390 6258           93                         xchg	ax,bx
24391 6259           40                         inc	ax
24392 625A           89D9                       mov	cx,bx
24393 625C           F7E9                       imul	cx
24394                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24395 625E           0346         EE            add	ax,-$12[bp]
24396 6261           44                         inc	sp
24397 6262           44                         inc	sp
24398                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24399 6263           8946         F4            mov	-$C[bp],ax
24400                                           !BCC_EOS
24401                                           ! 2953      attr=read_byte(vga_modes[line].sstart,address+1);
24402                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
24403 6266           8B46         F4            mov	ax,-$C[bp]
24404                                           ! Debug: list unsigned int = ax+1 (used reg = )
24405 6269           40                         inc	ax
24406 626A           50                         push	ax
24407                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
24408 626B           8A46         FB            mov	al,-5[bp]
24409 626E           30E4                       xor	ah,ah
24410 6270           B1                     03  mov	cl,*3
24411 6272           D3E0                       shl	ax,cl
24412 6274           89C3                       mov	bx,ax
24413 6276           81C3                 0204  add	bx,#_vga_modes
24414                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24415 627A           FF77         04            push	4[bx]
24416                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24417 627D           E8         1AEC            call	_read_byte
24418 6280           83C4                   04  add	sp,*4
24419                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
24420 6283           8846         08            mov	8[bp],al
24421                                           !BCC_EOS
24422                                           ! 2954      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
24423                                           ! Debug: list int = const 1 (used reg = )
24424 6286           B8                   0001  mov	ax,*1
24425 6289           50                         push	ax
24426                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24427 628A           8A46         06            mov	al,6[bp]
24428 628D           30E4                       xor	ah,ah
24429 628F           50                         push	ax
24430                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24431 6290           8B46         F8            mov	ax,-8[bp]
24432                                           ! Debug: list unsigned int = ax-1 (used reg = )
24433 6293           48                         dec	ax
24434 6294           50                         push	ax
24435                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24436 6295           8B46         F6            mov	ax,-$A[bp]
24437                                           ! Debug: list unsigned int = ax-1 (used reg = )
24438 6298           48                         dec	ax
24439 6299           50                         push	ax
24440                                           ! Debug: list int = const 0 (used reg = )
24441 629A           31C0                       xor	ax,ax
24442 629C           50                         push	ax
24443                                           ! Debug: list int = const 0 (used reg = )
24444 629D           31C0                       xor	ax,ax
24445 629F           50                         push	ax
24446                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
24447 62A0           8A46         08            mov	al,8[bp]
24448 62A3           30E4                       xor	ah,ah
24449 62A5           50                         push	ax
24450                                           ! Debug: list int = const 1 (used reg = )
24451 62A6           B8                   0001  mov	ax,*1
24452 62A9           50                         push	ax
24453                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24454 62AA           E8         E714            call	_biosfn_scroll
24455 62AD           83C4                   10  add	sp,*$10
24456                                           !BCC_EOS
24457                                           ! 2955     }
24458                                           ! 2956    else
24459                                           ! 2957     {
24460 62B0           EB           27            jmp .216
24461                       000062B2            .214:
24462                                           ! 2958      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24463                                           ! Debug: list int = const 1 (used reg = )
24464 62B2           B8                   0001  mov	ax,*1
24465 62B5           50                         push	ax
24466                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24467 62B6           8A46         06            mov	al,6[bp]
24468 62B9           30E4                       xor	ah,ah
24469 62BB           50                         push	ax
24470                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24471 62BC           8B46         F8            mov	ax,-8[bp]
24472                                           ! Debug: list unsigned int = ax-1 (used reg = )
24473 62BF           48                         dec	ax
24474 62C0           50                         push	ax
24475                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24476 62C1           8B46         F6            mov	ax,-$A[bp]
24477                                           ! Debug: list unsigned int = ax-1 (used reg = )
24478 62C4           48                         dec	ax
24479 62C5           50                         push	ax
24480                                           ! Debug: list int = const 0 (used reg = )
24481 62C6           31C0                       xor	ax,ax
24482 62C8           50                         push	ax
24483                                           ! Debug: list int = const 0 (used reg = )
24484 62C9           31C0                       xor	ax,ax
24485 62CB           50                         push	ax
24486                                           ! Debug: list int = const 0 (used reg = )
24487 62CC           31C0                       xor	ax,ax
24488 62CE           50                         push	ax
24489                                           ! Debug: list int = const 1 (used reg = )
24490 62CF           B8                   0001  mov	ax,*1
24491 62D2           50                         push	ax
24492                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24493 62D3           E8         E6EB            call	_biosfn_scroll
24494 62D6           83C4                   10  add	sp,*$10
24495                                           !BCC_EOS
24496                                           ! 2959     }
24497                                           ! 2960    ycurs-=1;
24498                       000062D9            .216:
24499                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24500 62D9           8A46         FD            mov	al,-3[bp]
24501 62DC           30E4                       xor	ah,ah
24502 62DE           48                         dec	ax
24503 62DF           8846         FD            mov	-3[bp],al
24504                                           !BCC_EOS
24505                                           ! 2961   }
24506                                           ! 2962  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24507                       000062E2            .212:
24508                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24509 62E2           8A46         FD            mov	al,-3[bp]
24510 62E5           30E4                       xor	ah,ah
24511 62E7           8946         F2            mov	-$E[bp],ax
24512                                           !BCC_EOS
24513                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24514 62EA           8B46         F2            mov	ax,-$E[bp]
24515 62ED           88C4                       mov	ah,al
24516 62EF           30C0                       xor	al,al
24517 62F1           8946         F2            mov	-$E[bp],ax
24518                                           !BCC_EOS
24519                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24520 62F4           8B46         F2            mov	ax,-$E[bp]
24521 62F7           0246         FE            add	al,-2[bp]
24522 62FA           80D4                   00  adc	ah,*0
24523 62FD           8946         F2            mov	-$E[bp],ax
24524                                           !BCC_EOS
24525                                           ! 2963  biosfn_set_cursor_pos(page,cursor);
24526                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24527 6300           FF76         F2            push	-$E[bp]
24528                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24529 6303           8A46         06            mov	al,6[bp]
24530 6306           30E4                       xor	ah,ah
24531 6308           50                         push	ax
24532                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24533 6309           E8         E0AA            call	_biosfn_set_cursor_pos
24534 630C           83C4                   04  add	sp,*4
24535                                           !BCC_EOS
24536                                           ! 2964 }
24537 630F           89EC                       mov	sp,bp
24538 6311           5D                         pop	bp
24539 6312           C3                         ret
24540                                           ! 2965 #asm
24541                                           !BCC_ASM
24542                       00000008            _biosfn_write_teletype.flag	set	8
24543                       00000006            _biosfn_write_teletype.attr	set	6
24544                       00000004            _biosfn_write_teletype.page	set	4
24545                       00000002            _biosfn_write_teletype.car	set	2
24546                       00006313            biosfn_get_video_mode:
24547 6313           1E                           push ds
24548 6314           B8                   0040    mov ax, # 0x40
24549 6317           8ED8                         mov ds, ax
24550 6319           53                           push bx
24551 631A           BB                   0062    mov bx, # 0x62
24552 631D           8A07                         mov al, [bx]
24553 631F           5B                           pop bx
24554 6320           88C7                         mov bh, al
24555 6322           53                           push bx
24556 6323           BB                   0087    mov bx, # 0x87
24557 6326           8A27                         mov ah, [bx]
24558 6328           80E4                   80    and ah, #0x80
24559 632B           BB                   0049    mov bx, # 0x49
24560 632E           8A07                         mov al, [bx]
24561 6330           08E0                         or al, ah
24562 6332           BB                   004A    mov bx, # 0x4A
24563 6335           8A27                         mov ah, [bx]
24564 6337           5B                           pop bx
24565 6338           1F                           pop ds
24566 6339           C3                           ret
24567                                           ! 2987 endasm
24568                                           !BCC_ENDASM
24569                                           ! 2988 #asm
24570                                           !BCC_ASM
24571                       00000008            _biosfn_write_teletype.flag	set	8
24572                       00000006            _biosfn_write_teletype.attr	set	6
24573                       00000004            _biosfn_write_teletype.page	set	4
24574                       00000002            _biosfn_write_teletype.car	set	2
24575                       0000633A            biosfn_group_10:
24576 633A           3C                     00    cmp al, #0x00
24577 633C           75           02              jne int10_test_1001
24578 633E           EB           64              jmp biosfn_set_single_palette_reg
24579                       00006340            int10_test_1001:
24580 6340           3C                     01    cmp al, #0x01
24581 6342           75           02              jne int10_test_1002
24582 6344           EB           78              jmp biosfn_set_overscan_border_color
24583                       00006346            int10_test_1002:
24584 6346           3C                     02    cmp al, #0x02
24585 6348           75           02              jne int10_test_1003
24586 634A           EB           7A              jmp biosfn_set_all_palette_reg
24587                       0000634C            int10_test_1003:
24588 634C           3C                     03    cmp al, #0x03
24589 634E           75           03              jne int10_test_1007
24590 6350           E9         00A0              jmp biosfn_toggle_intensity
24591                       00006353            int10_test_1007:
24592 6353           3C                     07    cmp al, #0x07
24593 6355           75           03              jne int10_test_1008
24594 6357           E9         00BF              jmp biosfn_get_single_palette_reg
24595                       0000635A            int10_test_1008:
24596 635A           3C                     08    cmp al, #0x08
24597 635C           75           03              jne int10_test_1009
24598 635E           E9         00DC              jmp biosfn_read_overscan_border_color
24599                       00006361            int10_test_1009:
24600 6361           3C                     09    cmp al, #0x09
24601 6363           75           03              jne int10_test_1010
24602 6365           E9         00E3              jmp biosfn_get_all_palette_reg
24603                       00006368            int10_test_1010:
24604 6368           3C                     10    cmp al, #0x10
24605 636A           75           03              jne int10_test_1012
24606 636C           E9         011D              jmp biosfn_set_single_dac_reg
24607                       0000636F            int10_test_1012:
24608 636F           3C                     12    cmp al, #0x12
24609 6371           75           03              jne int10_test_1013
24610 6373           E9         012F              jmp biosfn_set_all_dac_reg
24611                       00006376            int10_test_1013:
24612 6376           3C                     13    cmp al, #0x13
24613 6378           75           03              jne int10_test_1015
24614 637A           E9         0150              jmp biosfn_select_video_dac_color_page
24615                       0000637D            int10_test_1015:
24616 637D           3C                     15    cmp al, #0x15
24617 637F           75           03              jne int10_test_1017
24618 6381           E9         018C              jmp biosfn_read_single_dac_reg
24619                       00006384            int10_test_1017:
24620 6384           3C                     17    cmp al, #0x17
24621 6386           75           03              jne int10_test_1018
24622 6388           E9         01A0              jmp biosfn_read_all_dac_reg
24623                       0000638B            int10_test_1018:
24624 638B           3C                     18    cmp al, #0x18
24625 638D           75           03              jne int10_test_1019
24626 638F           E9         01C1              jmp biosfn_set_pel_mask
24627                       00006392            int10_test_1019:
24628 6392           3C                     19    cmp al, #0x19
24629 6394           75           03              jne int10_test_101A
24630 6396           E9         01C5              jmp biosfn_read_pel_mask
24631                       00006399            int10_test_101A:
24632 6399           3C                     1A    cmp al, #0x1a
24633 639B           75           03              jne int10_group_10_unknown
24634 639D           E9         01C9              jmp biosfn_read_video_dac_state
24635                       000063A0            int10_group_10_unknown:
24636 63A0           E8         1A66              call _unknown
24637 63A3           C3                           ret
24638                       000063A4            biosfn_set_single_palette_reg:
24639 63A4           80FB                   14    cmp bl, #0x14
24640 63A7           77           14              ja no_actl_reg1
24641 63A9           50                           push ax
24642 63AA           52                           push dx
24643 63AB           BA                   03DA    mov dx, # 0x3da
24644 63AE           EC                           in al, dx
24645 63AF           BA                   03C0    mov dx, # 0x3c0
24646 63B2           88D8                         mov al, bl
24647 63B4           EE                           out dx, al
24648 63B5           88F8                         mov al, bh
24649 63B7           EE                           out dx, al
24650 63B8           B0                     20    mov al, #0x20
24651 63BA           EE                           out dx, al
24652 63BB           5A                           pop dx
24653 63BC           58                           pop ax
24654                       000063BD            no_actl_reg1:
24655 63BD           C3                           ret
24656                                           ! 3070 endasm
24657                                           !BCC_ENDASM
24658                                           ! 3071 #asm
24659                                           !BCC_ASM
24660                       00000008            _biosfn_write_teletype.flag	set	8
24661                       00000006            _biosfn_write_teletype.attr	set	6
24662                       00000004            _biosfn_write_teletype.page	set	4
24663                       00000002            _biosfn_write_teletype.car	set	2
24664                       000063BE            biosfn_set_overscan_border_color:
24665 63BE           53                           push bx
24666 63BF           B3                     11    mov bl, #0x11
24667 63C1           E8         FFE0              call biosfn_set_single_palette_reg
24668 63C4           5B                           pop bx
24669 63C5           C3                           ret
24670                                           ! 3078 endasm
24671                                           !BCC_ENDASM
24672                                           ! 3079 #asm
24673                                           !BCC_ASM
24674                       00000008            _biosfn_write_teletype.flag	set	8
24675                       00000006            _biosfn_write_teletype.attr	set	6
24676                       00000004            _biosfn_write_teletype.page	set	4
24677                       00000002            _biosfn_write_teletype.car	set	2
24678                       000063C6            biosfn_set_all_palette_reg:
24679 63C6           50                           push ax
24680 63C7           53                           push bx
24681 63C8           51                           push cx
24682 63C9           52                           push dx
24683 63CA           89D3                         mov bx, dx
24684 63CC           BA                   03DA    mov dx, # 0x3da
24685 63CF           EC                           in al, dx
24686 63D0           B1                     00    mov cl, #0x00
24687 63D2           BA                   03C0    mov dx, # 0x3c0
24688                       000063D5            set_palette_loop:
24689 63D5           88C8                         mov al, cl
24690 63D7           EE                           out dx, al
24691 63D8           26                           seg es
24692 63D9           8A07                         mov al, [bx]
24693 63DB           EE                           out dx, al
24694 63DC           43                           inc bx
24695 63DD           FEC1                         inc cl
24696 63DF           80F9                   10    cmp cl, #0x10
24697 63E2           75           F1              jne set_palette_loop
24698 63E4           B0                     11    mov al, #0x11
24699 63E6           EE                           out dx, al
24700 63E7           26                           seg es
24701 63E8           8A07                         mov al, [bx]
24702 63EA           EE                           out dx, al
24703 63EB           B0                     20    mov al, #0x20
24704 63ED           EE                           out dx, al
24705 63EE           5A                           pop dx
24706 63EF           59                           pop cx
24707 63F0           5B                           pop bx
24708 63F1           58                           pop ax
24709 63F2           C3                           ret
24710                                           ! 3112 endasm
24711                                           !BCC_ENDASM
24712                                           ! 3113 #asm
24713                                           !BCC_ASM
24714                       00000008            _biosfn_write_teletype.flag	set	8
24715                       00000006            _biosfn_write_teletype.attr	set	6
24716                       00000004            _biosfn_write_teletype.page	set	4
24717                       00000002            _biosfn_write_teletype.car	set	2
24718                       000063F3            biosfn_toggle_intensity:
24719 63F3           50                           push ax
24720 63F4           53                           push bx
24721 63F5           52                           push dx
24722 63F6           BA                   03DA    mov dx, # 0x3da
24723 63F9           EC                           in al, dx
24724 63FA           BA                   03C0    mov dx, # 0x3c0
24725 63FD           B0                     10    mov al, #0x10
24726 63FF           EE                           out dx, al
24727 6400           BA                   03C1    mov dx, # 0x3c1
24728 6403           EC                           in al, dx
24729 6404           24                     F7    and al, #0xf7
24730 6406           80E3                   01    and bl, #0x01
24731 6409           C0E3                   03    shl bl, 3
24732 640C           08D8                         or al, bl
24733 640E           BA                   03C0    mov dx, # 0x3c0
24734 6411           EE                           out dx, al
24735 6412           B0                     20    mov al, #0x20
24736 6414           EE                           out dx, al
24737 6415           5A                           pop dx
24738 6416           5B                           pop bx
24739 6417           58                           pop ax
24740 6418           C3                           ret
24741                                           ! 3137 endasm
24742                                           !BCC_ENDASM
24743                                           ! 3138 #asm
24744                                           !BCC_ASM
24745                       00000008            _biosfn_write_teletype.flag	set	8
24746                       00000006            _biosfn_write_teletype.attr	set	6
24747                       00000004            _biosfn_write_teletype.page	set	4
24748                       00000002            _biosfn_write_teletype.car	set	2
24749                       00006419            biosfn_get_single_palette_reg:
24750 6419           80FB                   14    cmp bl, #0x14
24751 641C           77           1E              ja no_actl_reg2
24752 641E           50                           push ax
24753 641F           52                           push dx
24754 6420           BA                   03DA    mov dx, # 0x3da
24755 6423           EC                           in al, dx
24756 6424           BA                   03C0    mov dx, # 0x3c0
24757 6427           88D8                         mov al, bl
24758 6429           EE                           out dx, al
24759 642A           BA                   03C1    mov dx, # 0x3c1
24760 642D           EC                           in al, dx
24761 642E           88C7                         mov bh, al
24762 6430           BA                   03DA    mov dx, # 0x3da
24763 6433           EC                           in al, dx
24764 6434           BA                   03C0    mov dx, # 0x3c0
24765 6437           B0                     20    mov al, #0x20
24766 6439           EE                           out dx, al
24767 643A           5A                           pop dx
24768 643B           58                           pop ax
24769                       0000643C            no_actl_reg2:
24770 643C           C3                           ret
24771                                           ! 3161 endasm
24772                                           !BCC_ENDASM
24773                                           ! 3162 #asm
24774                                           !BCC_ASM
24775                       00000008            _biosfn_write_teletype.flag	set	8
24776                       00000006            _biosfn_write_teletype.attr	set	6
24777                       00000004            _biosfn_write_teletype.page	set	4
24778                       00000002            _biosfn_write_teletype.car	set	2
24779                       0000643D            biosfn_read_overscan_border_color:
24780 643D           50                           push ax
24781 643E           53                           push bx
24782 643F           B3                     11    mov bl, #0x11
24783 6441           E8         FFD5              call biosfn_get_single_palette_reg
24784 6444           88F8                         mov al, bh
24785 6446           5B                           pop bx
24786 6447           88C7                         mov bh, al
24787 6449           58                           pop ax
24788 644A           C3                           ret
24789                                           ! 3173 endasm
24790                                           !BCC_ENDASM
24791                                           ! 3174 #asm
24792                                           !BCC_ASM
24793                       00000008            _biosfn_write_teletype.flag	set	8
24794                       00000006            _biosfn_write_teletype.attr	set	6
24795                       00000004            _biosfn_write_teletype.page	set	4
24796                       00000002            _biosfn_write_teletype.car	set	2
24797                       0000644B            biosfn_get_all_palette_reg:
24798 644B           50                           push ax
24799 644C           53                           push bx
24800 644D           51                           push cx
24801 644E           52                           push dx
24802 644F           89D3                         mov bx, dx
24803 6451           B1                     00    mov cl, #0x00
24804                       00006453            get_palette_loop:
24805 6453           BA                   03DA    mov dx, # 0x3da
24806 6456           EC                           in al, dx
24807 6457           BA                   03C0    mov dx, # 0x3c0
24808 645A           88C8                         mov al, cl
24809 645C           EE                           out dx, al
24810 645D           BA                   03C1    mov dx, # 0x3c1
24811 6460           EC                           in al, dx
24812 6461           26                           seg es
24813 6462           8807                         mov [bx], al
24814 6464           43                           inc bx
24815 6465           FEC1                         inc cl
24816 6467           80F9                   10    cmp cl, #0x10
24817 646A           75           E7              jne get_palette_loop
24818 646C           BA                   03DA    mov dx, # 0x3da
24819 646F           EC                           in al, dx
24820 6470           BA                   03C0    mov dx, # 0x3c0
24821 6473           B0                     11    mov al, #0x11
24822 6475           EE                           out dx, al
24823 6476           BA                   03C1    mov dx, # 0x3c1
24824 6479           EC                           in al, dx
24825 647A           26                           seg es
24826 647B           8807                         mov [bx], al
24827 647D           BA                   03DA    mov dx, # 0x3da
24828 6480           EC                           in al, dx
24829 6481           BA                   03C0    mov dx, # 0x3c0
24830 6484           B0                     20    mov al, #0x20
24831 6486           EE                           out dx, al
24832 6487           5A                           pop dx
24833 6488           59                           pop cx
24834 6489           5B                           pop bx
24835 648A           58                           pop ax
24836 648B           C3                           ret
24837                                           ! 3215 endasm
24838                                           !BCC_ENDASM
24839                                           ! 3216 #asm
24840                                           !BCC_ASM
24841                       00000008            _biosfn_write_teletype.flag	set	8
24842                       00000006            _biosfn_write_teletype.attr	set	6
24843                       00000004            _biosfn_write_teletype.page	set	4
24844                       00000002            _biosfn_write_teletype.car	set	2
24845                       0000648C            biosfn_set_single_dac_reg:
24846 648C           50                           push ax
24847 648D           52                           push dx
24848 648E           BA                   03C8    mov dx, # 0x3c8
24849 6491           88D8                         mov al, bl
24850 6493           EE                           out dx, al
24851 6494           BA                   03C9    mov dx, # 0x3c9
24852 6497           58                           pop ax
24853 6498           50                           push ax
24854 6499           88E0                         mov al, ah
24855 649B           EE                           out dx, al
24856 649C           88E8                         mov al, ch
24857 649E           EE                           out dx, al
24858 649F           88C8                         mov al, cl
24859 64A1           EE                           out dx, al
24860 64A2           5A                           pop dx
24861 64A3           58                           pop ax
24862 64A4           C3                           ret
24863                                           ! 3235 endasm
24864                                           !BCC_ENDASM
24865                                           ! 3236 #asm
24866                                           !BCC_ASM
24867                       00000008            _biosfn_write_teletype.flag	set	8
24868                       00000006            _biosfn_write_teletype.attr	set	6
24869                       00000004            _biosfn_write_teletype.page	set	4
24870                       00000002            _biosfn_write_teletype.car	set	2
24871                       000064A5            biosfn_set_all_dac_reg:
24872 64A5           50                           push ax
24873 64A6           53                           push bx
24874 64A7           51                           push cx
24875 64A8           52                           push dx
24876 64A9           BA                   03C8    mov dx, # 0x3c8
24877 64AC           88D8                         mov al, bl
24878 64AE           EE                           out dx, al
24879 64AF           5A                           pop dx
24880 64B0           52                           push dx
24881 64B1           89D3                         mov bx, dx
24882 64B3           BA                   03C9    mov dx, # 0x3c9
24883                       000064B6            set_dac_loop:
24884 64B6           26                           seg es
24885 64B7           8A07                         mov al, [bx]
24886 64B9           EE                           out dx, al
24887 64BA           43                           inc bx
24888 64BB           26                           seg es
24889 64BC           8A07                         mov al, [bx]
24890 64BE           EE                           out dx, al
24891 64BF           43                           inc bx
24892 64C0           26                           seg es
24893 64C1           8A07                         mov al, [bx]
24894 64C3           EE                           out dx, al
24895 64C4           43                           inc bx
24896 64C5           49                           dec cx
24897 64C6           75           EE              jnz set_dac_loop
24898 64C8           5A                           pop dx
24899 64C9           59                           pop cx
24900 64CA           5B                           pop bx
24901 64CB           58                           pop ax
24902 64CC           C3                           ret
24903                                           ! 3269 endasm
24904                                           !BCC_ENDASM
24905                                           ! 3270 #asm
24906                                           !BCC_ASM
24907                       00000008            _biosfn_write_teletype.flag	set	8
24908                       00000006            _biosfn_write_teletype.attr	set	6
24909                       00000004            _biosfn_write_teletype.page	set	4
24910                       00000002            _biosfn_write_teletype.car	set	2
24911                       000064CD            biosfn_select_video_dac_color_page:
24912 64CD           50                           push ax
24913 64CE           53                           push bx
24914 64CF           52                           push dx
24915 64D0           BA                   03DA    mov dx, # 0x3da
24916 64D3           EC                           in al, dx
24917 64D4           BA                   03C0    mov dx, # 0x3c0
24918 64D7           B0                     10    mov al, #0x10
24919 64D9           EE                           out dx, al
24920 64DA           BA                   03C1    mov dx, # 0x3c1
24921 64DD           EC                           in al, dx
24922 64DE           80E3                   01    and bl, #0x01
24923 64E1           75           0D              jnz set_dac_page
24924 64E3           24                     7F    and al, #0x7f
24925 64E5           C0E7                   07    shl bh, 7
24926 64E8           08F8                         or al, bh
24927 64EA           BA                   03C0    mov dx, # 0x3c0
24928 64ED           EE                           out dx, al
24929 64EE           EB           19              jmp set_actl_normal
24930                       000064F0            set_dac_page:
24931 64F0           50                           push ax
24932 64F1           BA                   03DA    mov dx, # 0x3da
24933 64F4           EC                           in al, dx
24934 64F5           BA                   03C0    mov dx, # 0x3c0
24935 64F8           B0                     14    mov al, #0x14
24936 64FA           EE                           out dx, al
24937 64FB           58                           pop ax
24938 64FC           24                     80    and al, #0x80
24939 64FE           75           03              jnz set_dac_16_page
24940 6500           C0E7                   02    shl bh, 2
24941                       00006503            set_dac_16_page:
24942 6503           80E7                   0F    and bh, #0x0f
24943 6506           88F8                         mov al, bh
24944 6508           EE                           out dx, al
24945                       00006509            set_actl_normal:
24946 6509           B0                     20    mov al, #0x20
24947 650B           EE                           out dx, al
24948 650C           5A                           pop dx
24949 650D           5B                           pop bx
24950 650E           58                           pop ax
24951 650F           C3                           ret
24952                                           ! 3312 endasm
24953                                           !BCC_ENDASM
24954                                           ! 3313 #asm
24955                                           !BCC_ASM
24956                       00000008            _biosfn_write_teletype.flag	set	8
24957                       00000006            _biosfn_write_teletype.attr	set	6
24958                       00000004            _biosfn_write_teletype.page	set	4
24959                       00000002            _biosfn_write_teletype.car	set	2
24960                       00006510            biosfn_read_single_dac_reg:
24961 6510           50                           push ax
24962 6511           52                           push dx
24963 6512           BA                   03C7    mov dx, # 0x3c7
24964 6515           88D8                         mov al, bl
24965 6517           EE                           out dx, al
24966 6518           58                           pop ax
24967 6519           88C4                         mov ah, al
24968 651B           BA                   03C9    mov dx, # 0x3c9
24969 651E           EC                           in al, dx
24970 651F           86E0                         xchg al, ah
24971 6521           50                           push ax
24972 6522           EC                           in al, dx
24973 6523           88C5                         mov ch, al
24974 6525           EC                           in al, dx
24975 6526           88C1                         mov cl, al
24976 6528           5A                           pop dx
24977 6529           58                           pop ax
24978 652A           C3                           ret
24979                                           ! 3333 endasm
24980                                           !BCC_ENDASM
24981                                           ! 3334 #a
24982                                           ! 3334 sm
24983                                           !BCC_ASM
24984                       00000008            _biosfn_write_teletype.flag	set	8
24985                       00000006            _biosfn_write_teletype.attr	set	6
24986                       00000004            _biosfn_write_teletype.page	set	4
24987                       00000002            _biosfn_write_teletype.car	set	2
24988                       0000652B            biosfn_read_all_dac_reg:
24989 652B           50                           push ax
24990 652C           53                           push bx
24991 652D           51                           push cx
24992 652E           52                           push dx
24993 652F           BA                   03C7    mov dx, # 0x3c7
24994 6532           88D8                         mov al, bl
24995 6534           EE                           out dx, al
24996 6535           5A                           pop dx
24997 6536           52                           push dx
24998 6537           89D3                         mov bx, dx
24999 6539           BA                   03C9    mov dx, # 0x3c9
25000                       0000653C            read_dac_loop:
25001 653C           EC                           in al, dx
25002 653D           26                           seg es
25003 653E           8807                         mov [bx], al
25004 6540           43                           inc bx
25005 6541           EC                           in al, dx
25006 6542           26                           seg es
25007 6543           8807                         mov [bx], al
25008 6545           43                           inc bx
25009 6546           EC                           in al, dx
25010 6547           26                           seg es
25011 6548           8807                         mov [bx], al
25012 654A           43                           inc bx
25013 654B           49                           dec cx
25014 654C           75           EE              jnz read_dac_loop
25015 654E           5A                           pop dx
25016 654F           59                           pop cx
25017 6550           5B                           pop bx
25018 6551           58                           pop ax
25019 6552           C3                           ret
25020                                           ! 3367 endasm
25021                                           !BCC_ENDASM
25022                                           ! 3368 #asm
25023                                           !BCC_ASM
25024                       00000008            _biosfn_write_teletype.flag	set	8
25025                       00000006            _biosfn_write_teletype.attr	set	6
25026                       00000004            _biosfn_write_teletype.page	set	4
25027                       00000002            _biosfn_write_teletype.car	set	2
25028                       00006553            biosfn_set_pel_mask:
25029 6553           50                           push ax
25030 6554           52                           push dx
25031 6555           BA                   03C6    mov dx, # 0x3c6
25032 6558           88D8                         mov al, bl
25033 655A           EE                           out dx, al
25034 655B           5A                           pop dx
25035 655C           58                           pop ax
25036 655D           C3                           ret
25037                                           ! 3378 endasm
25038                                           !BCC_ENDASM
25039                                           ! 3379 #asm
25040                                           !BCC_ASM
25041                       00000008            _biosfn_write_teletype.flag	set	8
25042                       00000006            _biosfn_write_teletype.attr	set	6
25043                       00000004            _biosfn_write_teletype.page	set	4
25044                       00000002            _biosfn_write_teletype.car	set	2
25045                       0000655E            biosfn_read_pel_mask:
25046 655E           50                           push ax
25047 655F           52                           push dx
25048 6560           BA                   03C6    mov dx, # 0x3c6
25049 6563           EC                           in al, dx
25050 6564           88C3                         mov bl, al
25051 6566           5A                           pop dx
25052 6567           58                           pop ax
25053 6568           C3                           ret
25054                                           ! 3389 endasm
25055                                           !BCC_ENDASM
25056                                           ! 3390 #asm
25057                                           !BCC_ASM
25058                       00000008            _biosfn_write_teletype.flag	set	8
25059                       00000006            _biosfn_write_teletype.attr	set	6
25060                       00000004            _biosfn_write_teletype.page	set	4
25061                       00000002            _biosfn_write_teletype.car	set	2
25062                       00006569            biosfn_read_video_dac_state:
25063 6569           50                           push ax
25064 656A           52                           push dx
25065 656B           BA                   03DA    mov dx, # 0x3da
25066 656E           EC                           in al, dx
25067 656F           BA                   03C0    mov dx, # 0x3c0
25068 6572           B0                     10    mov al, #0x10
25069 6574           EE                           out dx, al
25070 6575           BA                   03C1    mov dx, # 0x3c1
25071 6578           EC                           in al, dx
25072 6579           88C3                         mov bl, al
25073 657B           C0EB                   07    shr bl, 7
25074 657E           BA                   03DA    mov dx, # 0x3da
25075 6581           EC                           in al, dx
25076 6582           BA                   03C0    mov dx, # 0x3c0
25077 6585           B0                     14    mov al, #0x14
25078 6587           EE                           out dx, al
25079 6588           BA                   03C1    mov dx, # 0x3c1
25080 658B           EC                           in al, dx
25081 658C           88C7                         mov bh, al
25082 658E           80E7                   0F    and bh, #0x0f
25083 6591           F6C3                   01    test bl, #0x01
25084 6594           75           03              jnz get_dac_16_page
25085 6596           C0EF                   02    shr bh, 2
25086                       00006599            get_dac_16_page:
25087 6599           BA                   03DA    mov dx, # 0x3da
25088 659C           EC                           in al, dx
25089 659D           BA                   03C0    mov dx, # 0x3c0
25090 65A0           B0                     20    mov al, #0x20
25091 65A2           EE                           out dx, al
25092 65A3           5A                           pop dx
25093 65A4           58                           pop ax
25094 65A5           C3                           ret
25095                                           ! 3424 endasm
25096                                           !BCC_ENDASM
25097                                           ! 3425 static void biosfn_perform_gray_scale_summing (start,count)
25098                                           ! Register BX used in function biosfn_write_teletype
25099                                           ! 3426 Bit16u start;Bit16u count;
25100                       000065A6            _biosfn_perform_gray_scale_summing:
25101                                           !BCC_EOS
25102                                           !BCC_EOS
25103                                           ! 3427 {Bit8u r,g,b;
25104                                           !BCC_EOS
25105                                           ! 3428  Bit16u i;
25106                                           !BCC_EOS
25107                                           ! 3429  Bit16u index;
25108                                           !BCC_EOS
25109                                           ! 3430  inb(0x3da);
25110 65A6           55                         push	bp
25111 65A7           89E5                       mov	bp,sp
25112 65A9           83C4                   F8  add	sp,*-8
25113                                           ! Debug: list int = const $3DA (used reg = )
25114 65AC           B8                   03DA  mov	ax,#$3DA
25115 65AF           50                         push	ax
25116                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25117 65B0           E8         180F            call	_inb
25118 65B3           44                         inc	sp
25119 65B4           44                         inc	sp
25120                                           !BCC_EOS
25121                                           ! 3431  outb(0x3c0,0x00);
25122                                           ! Debug: list int = const 0 (used reg = )
25123 65B5           31C0                       xor	ax,ax
25124 65B7           50                         push	ax
25125                                           ! Debug: list int = const $3C0 (used reg = )
25126 65B8           B8                   03C0  mov	ax,#$3C0
25127 65BB           50                         push	ax
25128                                           ! Debug: func () void = outb+0 (used reg = )
25129 65BC           E8         1819            call	_outb
25130 65BF           83C4                   04  add	sp,*4
25131                                           !BCC_EOS
25132                                           ! 3432  for( index = 0; index < count; index++ )
25133                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
25134 65C2           31C0                       xor	ax,ax
25135 65C4           8946         F8            mov	-8[bp],ax
25136                                           !BCC_EOS
25137                                           !BCC_EOS
25138                                           ! 3433   {
25139 65C7           E9         00BE            br 	.219
25140                       000065CA            .21A:
25141                                           ! 3434    outb(0x3c7,start);
25142                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25143 65CA           FF76         04            push	4[bp]
25144                                           ! Debug: list int = const $3C7 (used reg = )
25145 65CD           B8                   03C7  mov	ax,#$3C7
25146 65D0           50                         push	ax
25147                                           ! Debug: func () void = outb+0 (used reg = )
25148 65D1           E8         1804            call	_outb
25149 65D4           83C4                   04  add	sp,*4
25150                                           !BCC_EOS
25151                                           ! 3435    r=inb( 0x3c9 );
25152                                           ! Debug: list int = const $3C9 (used reg = )
25153 65D7           B8                   03C9  mov	ax,#$3C9
25154 65DA           50                         push	ax
25155                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25156 65DB           E8         17E4            call	_inb
25157 65DE           44                         inc	sp
25158 65DF           44                         inc	sp
25159                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
25160 65E0           8846         FF            mov	-1[bp],al
25161                                           !BCC_EOS
25162                                           ! 3436    g=inb( 0x3c9 );
25163                                           ! Debug: list int = const $3C9 (used reg = )
25164 65E3           B8                   03C9  mov	ax,#$3C9
25165 65E6           50                         push	ax
25166                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25167 65E7           E8         17D8            call	_inb
25168 65EA           44                         inc	sp
25169 65EB           44                         inc	sp
25170                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
25171 65EC           8846         FE            mov	-2[bp],al
25172                                           !BCC_EOS
25173                                           ! 3437    b=inb( 0x3c9 );
25174                                           ! Debug: list int = const $3C9 (used reg = )
25175 65EF           B8                   03C9  mov	ax,#$3C9
25176 65F2           50                         push	ax
25177                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25178 65F3           E8         17CC            call	_inb
25179 65F6           44                         inc	sp
25180 65F7           44                         inc	sp
25181                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
25182 65F8           8846         FD            mov	-3[bp],al
25183                                           !BCC_EOS
25184                                           ! 3438    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
25185                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
25186                                           ! Debug: expression subtree swapping
25187 65FB           8A46         FD            mov	al,-3[bp]
25188 65FE           30E4                       xor	ah,ah
25189 6600           B9                   001C  mov	cx,*$1C
25190 6603           F7E9                       imul	cx
25191 6605           50                         push	ax
25192                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
25193                                           ! Debug: expression subtree swapping
25194 6606           8A46         FE            mov	al,-2[bp]
25195 6609           30E4                       xor	ah,ah
25196 660B           B9                   0097  mov	cx,#$97
25197 660E           F7E9                       imul	cx
25198 6610           50                         push	ax
25199                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
25200                                           ! Debug: expression subtree swapping
25201 6611           8A46         FF            mov	al,-1[bp]
25202 6614           30E4                       xor	ah,ah
25203 6616           B9                   004D  mov	cx,*$4D
25204 6619           F7E9                       imul	cx
25205                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
25206 661B           0346         F4            add	ax,-$C[bp]
25207 661E           44                         inc	sp
25208 661F           44                         inc	sp
25209                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25210 6620           0346         F6            add	ax,-$A[bp]
25211 6623           44                         inc	sp
25212 6624           44                         inc	sp
25213                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
25214                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
25215 6625           05                   0080  add	ax,#$80
25216 6628           88E0                       mov	al,ah
25217 662A           30E4                       xor	ah,ah
25218                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
25219 662C           8946         FA            mov	-6[bp],ax
25220                                           !BCC_EOS
25221                                           ! 3439    if(i>0x3f)i=0x3f;
25222                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25223 662F           8B46         FA            mov	ax,-6[bp]
25224 6632           3D                   003F  cmp	ax,*$3F
25225 6635           76           06            jbe 	.21B
25226                       00006637            .21C:
25227                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25228 6637           B8                   003F  mov	ax,*$3F
25229 663A           8946         FA            mov	-6[bp],ax
25230                                           !BCC_EOS
25231                                           ! 3440    outb(0x3c8,start);
25232                       0000663D            .21B:
25233                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25234 663D           FF76         04            push	4[bp]
25235                                           ! Debug: list int = const $3C8 (used reg = )
25236 6640           B8                   03C8  mov	ax,#$3C8
25237 6643           50                         push	ax
25238                                           ! Debug: func () void = outb+0 (used reg = )
25239 6644           E8         1791            call	_outb
25240 6647           83C4                   04  add	sp,*4
25241                                           !BCC_EOS
25242                                           ! 3441    outb( 0x3c9, i&0xff );
25243                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25244 664A           8A46         FA            mov	al,-6[bp]
25245                                           ! Debug: list unsigned char = al+0 (used reg = )
25246 664D           30E4                       xor	ah,ah
25247 664F           50                         push	ax
25248                                           ! Debug: list int = const $3C9 (used reg = )
25249 6650           B8                   03C9  mov	ax,#$3C9
25250 6653           50                         push	ax
25251                                           ! Debug: func () void = outb+0 (used reg = )
25252 6654           E8         1781            call	_outb
25253 6657           83C4                   04  add	sp,*4
25254                                           !BCC_EOS
25255                                           ! 3442    outb( 0x3c9, i&0xff );
25256                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25257 665A           8A46         FA            mov	al,-6[bp]
25258                                           ! Debug: list unsigned char = al+0 (used reg = )
25259 665D           30E4                       xor	ah,ah
25260 665F           50                         push	ax
25261                                           ! Debug: list int = const $3C9 (used reg = )
25262 6660           B8                   03C9  mov	ax,#$3C9
25263 6663           50                         push	ax
25264                                           ! Debug: func () void = outb+0 (used reg = )
25265 6664           E8         1771            call	_outb
25266 6667           83C4                   04  add	sp,*4
25267                                           !BCC_EOS
25268                                           ! 3443    outb( 0x3c9, i&0xff );
25269                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25270 666A           8A46         FA            mov	al,-6[bp]
25271                                           ! Debug: list unsigned char = al+0 (used reg = )
25272 666D           30E4                       xor	ah,ah
25273 666F           50                         push	ax
25274                                           ! Debug: list int = const $3C9 (used reg = )
25275 6670           B8                   03C9  mov	ax,#$3C9
25276 6673           50                         push	ax
25277                                           ! Debug: func () void = outb+0 (used reg = )
25278 6674           E8         1761            call	_outb
25279 6677           83C4                   04  add	sp,*4
25280                                           !BCC_EOS
25281                                           ! 3444    start++;
25282                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25283 667A           8B46         04            mov	ax,4[bp]
25284 667D           40                         inc	ax
25285 667E           8946         04            mov	4[bp],ax
25286                                           !BCC_EOS
25287                                           ! 3445   }
25288                                           ! 3446  inb(0x3da);
25289                       00006681            .218:
25290                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25291 6681           8B46         F8            mov	ax,-8[bp]
25292 6684           40                         inc	ax
25293 6685           8946         F8            mov	-8[bp],ax
25294                       00006688            .219:
25295                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25296 6688           8B46         F8            mov	ax,-8[bp]
25297 668B           3B46         06            cmp	ax,6[bp]
25298 668E         0F82         FF38            blo 	.21A
25299                       00006692            .21D:
25300                       00006692            .217:
25301                                           ! Debug: list int = const $3DA (used reg = )
25302 6692           B8                   03DA  mov	ax,#$3DA
25303 6695           50                         push	ax
25304                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25305 6696           E8         1729            call	_inb
25306 6699           44                         inc	sp
25307 669A           44                         inc	sp
25308                                           !BCC_EOS
25309                                           ! 3447  outb(0x3c0,0x20);
25310                                           ! Debug: list int = const $20 (used reg = )
25311 669B           B8                   0020  mov	ax,*$20
25312 669E           50                         push	ax
25313                                           ! Debug: list int = const $3C0 (used reg = )
25314 669F           B8                   03C0  mov	ax,#$3C0
25315 66A2           50                         push	ax
25316                                           ! Debug: func () void = outb+0 (used reg = )
25317 66A3           E8         1732            call	_outb
25318 66A6           83C4                   04  add	sp,*4
25319                                           !BCC_EOS
25320                                           ! 3448 }
25321 66A9           89EC                       mov	sp,bp
25322 66AB           5D                         pop	bp
25323 66AC           C3                         ret
25324                                           ! 3449 static void get_font_access()
25325                                           ! 3450 {
25326                       000066AD            _get_font_access:
25327                                           ! 3451 #asm
25328                                           !BCC_ASM
25329 66AD           BA                   03C4   mov dx, # 0x3c4
25330 66B0           B8                   0100   mov ax, #0x0100
25331 66B3           EF                          out dx, ax
25332 66B4           B8                   0402   mov ax, #0x0402
25333 66B7           EF                          out dx, ax
25334 66B8           B8                   0704   mov ax, #0x0704
25335 66BB           EF                          out dx, ax
25336 66BC           B8                   0300   mov ax, #0x0300
25337 66BF           EF                          out dx, ax
25338 66C0           BA                   03CE   mov dx, # 0x3ce
25339 66C3           B8                   0204   mov ax, #0x0204
25340 66C6           EF                          out dx, ax
25341 66C7           B8                   0005   mov ax, #0x0005
25342 66CA           EF                          out dx, ax
25343 66CB           B8                   0406   mov ax, #0x0406
25344 66CE           EF                          out dx, ax
25345                                           ! 3468 endasm
25346                                           !BCC_ENDASM
25347                                           ! 3469 }
25348 66CF           C3                         ret
25349                                           ! 3470 static void release_font_access()
25350                                           ! 3471 {
25351                       000066D0            _release_font_access:
25352                                           ! 3472 #asm
25353                                           !BCC_ASM
25354 66D0           BA                   03C4   mov dx, # 0x3c4
25355 66D3           B8                   0100   mov ax, #0x0100
25356 66D6           EF                          out dx, ax
25357 66D7           B8                   0302   mov ax, #0x0302
25358 66DA           EF                          out dx, ax
25359 66DB           B8                   0304   mov ax, #0x0304
25360 66DE           EF                          out dx, ax
25361 66DF           B8                   0300   mov ax, #0x0300
25362 66E2           EF                          out dx, ax
25363 66E3           BA                   03CC   mov dx, # 0x3cc
25364 66E6           EC                          in al, dx
25365 66E7           24                     01   and al, #0x01
25366 66E9           C0E0                   02   shl al, 2
25367 66EC           0C                     0A   or al, #0x0a
25368 66EE           88C4                        mov ah, al
25369 66F0           B0                     06   mov al, #0x06
25370 66F2           BA                   03CE   mov dx, # 0x3ce
25371 66F5           EF                          out dx, ax
25372 66F6           B8                   0004   mov ax, #0x0004
25373 66F9           EF                          out dx, ax
25374 66FA           B8                   1005   mov ax, #0x1005
25375 66FD           EF                          out dx, ax
25376                                           ! 3495 endasm
25377                                           !BCC_ENDASM
25378                                           ! 3496 }
25379 66FE           C3                         ret
25380                                           ! 3497 #asm
25381                                           !BCC_ASM
25382                       000066FF            idiv_u:
25383 66FF           31D2                         xor dx,dx
25384 6701           F7F3                         div bx
25385 6703           C3                           ret
25386                                           ! 3502 endasm
25387                                           !BCC_ENDASM
25388                                           ! 3503 static void set_scan_lines(lines) Bit8u lines;
25389                       00006704            _set_scan_lines:
25390                                           !BCC_EOS
25391                                           ! 3504 {
25392                                           ! 3505  Bit16u crtc_addr,cols,page,vde;
25393                                           !BCC_EOS
25394                                           ! 3506  Bit8u crtc_r9,ovl,rows;
25395                                           !BCC_EOS
25396                                           ! 3507  crtc_addr = read_word(0x40,0x63);
25397 6704           55                         push	bp
25398 6705           89E5                       mov	bp,sp
25399 6707           83C4                   F4  add	sp,*-$C
25400                                           ! Debug: list int = const $63 (used reg = )
25401 670A           B8                   0063  mov	ax,*$63
25402 670D           50                         push	ax
25403                                           ! Debug: list int = const $40 (used reg = )
25404 670E           B8                   0040  mov	ax,*$40
25405 6711           50                         push	ax
25406                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25407 6712           E8         166A            call	_read_word
25408 6715           83C4                   04  add	sp,*4
25409                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25410 6718           8946         FE            mov	-2[bp],ax
25411                                           !BCC_EOS
25412                                           ! 3508  outb(crtc_addr, 0x09);
25413                                           ! Debug: list int = const 9 (used reg = )
25414 671B           B8                   0009  mov	ax,*9
25415 671E           50                         push	ax
25416                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25417 671F           FF76         FE            push	-2[bp]
25418                                           ! Debug: func () void = outb+0 (used reg = )
25419 6722           E8         16B3            call	_outb
25420 6725           83C4                   04  add	sp,*4
25421                                           !BCC_EOS
25422                                           ! 3509  crtc_r9 = inb(crtc_addr+1);
25423                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25424 6728           8B46         FE            mov	ax,-2[bp]
25425                                           ! Debug: list unsigned int = ax+1 (used reg = )
25426 672B           40                         inc	ax
25427 672C           50                         push	ax
25428                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25429 672D           E8         1692            call	_inb
25430 6730           44                         inc	sp
25431 6731           44                         inc	sp
25432                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25433 6732           8846         F7            mov	-9[bp],al
25434                                           !BCC_EOS
25435                                           ! 3510  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25436                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25437 6735           8A46         04            mov	al,4[bp]
25438 6738           30E4                       xor	ah,ah
25439 673A           48                         dec	ax
25440 673B           50                         push	ax
25441                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25442 673C           8A46         F7            mov	al,-9[bp]
25443 673F           24                     E0  and	al,#$E0
25444                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25445 6741           30E4                       xor	ah,ah
25446 6743           0B46         F2            or	ax,-$E[bp]
25447 6746           44                         inc	sp
25448 6747           44                         inc	sp
25449                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25450 6748           8846         F7            mov	-9[bp],al
25451                                           !BCC_EOS
25452                                           ! 3511  outb(crtc_addr+1, crtc_r9);
25453                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25454 674B           8A46         F7            mov	al,-9[bp]
25455 674E           30E4                       xor	ah,ah
25456 6750           50                         push	ax
25457                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25458 6751           8B46         FE            mov	ax,-2[bp]
25459                                           ! Debug: list unsigned int = ax+1 (used reg = )
25460 6754           40                         inc	ax
25461 6755           50                         push	ax
25462                                           ! Debug: func () void = outb+0 (used reg = )
25463 6756           E8         167F            call	_outb
25464 6759           83C4                   04  add	sp,*4
25465                                           !BCC_EOS
25466                                           ! 3512  if(lines==8)
25467                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25468 675C           8A46         04            mov	al,4[bp]
25469 675F           3C                     08  cmp	al,*8
25470 6761           75           10            jne 	.21E
25471                       00006763            .21F:
25472                                           ! 3513   {
25473                                           ! 3514    biosfn_set_cursor_shape(0x06,0x07);
25474                                           ! Debug: list int = const 7 (used reg = )
25475 6763           B8                   0007  mov	ax,*7
25476 6766           50                         push	ax
25477                                           ! Debug: list int = const 6 (used reg = )
25478 6767           B8                   0006  mov	ax,*6
25479 676A           50                         push	ax
25480                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25481 676B           E8         DB2D            call	_biosfn_set_cursor_shape
25482 676E           83C4                   04  add	sp,*4
25483                                           !BCC_EOS
25484                                           ! 3515   }
25485                                           ! 3516  else
25486                                           ! 3517   {
25487 6771           EB           18            jmp .220
25488                       00006773            .21E:
25489                                           ! 3518    biosfn_set_cursor_shape(lines-4,lines-3);
25490                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25491 6773           8A46         04            mov	al,4[bp]
25492 6776           30E4                       xor	ah,ah
25493                                           ! Debug: list unsigned int = ax-3 (used reg = )
25494 6778           05                   FFFD  add	ax,*-3
25495 677B           50                         push	ax
25496                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25497 677C           8A46         04            mov	al,4[bp]
25498 677F           30E4                       xor	ah,ah
25499                                           ! Debug: list unsigned int = ax-4 (used reg = )
25500 6781           05                   FFFC  add	ax,*-4
25501 6784           50                         push	ax
25502                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25503 6785           E8         DB13            call	_biosfn_set_cursor_shape
25504 6788           83C4                   04  add	sp,*4
25505                                           !BCC_EOS
25506                                           ! 3519   }
25507                                           ! 3520  write_word(0x40,0x85, lines);
25508                       0000678B            .220:
25509                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25510 678B           8A46         04            mov	al,4[bp]
25511 678E           30E4                       xor	ah,ah
25512 6790           50                         push	ax
25513                                           ! Debug: list int = const $85 (used reg = )
25514 6791           B8                   0085  mov	ax,#$85
25515 6794           50                         push	ax
25516                                           ! Debug: list int = const $40 (used reg = )
25517 6795           B8                   0040  mov	ax,*$40
25518 6798           50                         push	ax
25519                                           ! Debug: func () void = write_word+0 (used reg = )
25520 6799           E8         160E            call	_write_word
25521 679C           83C4                   06  add	sp,*6
25522                                           !BCC_EOS
25523                                           ! 3521  outb(crtc_addr, 0x12);
25524                                           ! Debug: list int = const $12 (used reg = )
25525 679F           B8                   0012  mov	ax,*$12
25526 67A2           50                         push	ax
25527                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25528 67A3           FF76         FE            push	-2[bp]
25529                                           ! Debug: func () void = outb+0 (used reg = )
25530 67A6           E8         162F            call	_outb
25531 67A9           83C4                   04  add	sp,*4
25532                                           !BCC_EOS
25533                                           ! 3522  vde = inb(crtc_addr+1);
25534                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25535 67AC           8B46         FE            mov	ax,-2[bp]
25536                                           ! Debug: list unsigned int = ax+1 (used reg = )
25537 67AF           40                         inc	ax
25538 67B0           50                         push	ax
25539                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25540 67B1           E8         160E            call	_inb
25541 67B4           44                         inc	sp
25542 67B5           44                         inc	sp
25543                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25544 67B6           30E4                       xor	ah,ah
25545 67B8           8946         F8            mov	-8[bp],ax
25546                                           !BCC_EOS
25547                                           ! 3523  outb(crtc_addr, 0x07);
25548                                           ! Debug: list int = const 7 (used reg = )
25549 67BB           B8                   0007  mov	ax,*7
25550 67BE           50                         push	ax
25551                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25552 67BF           FF76         FE            push	-2[bp]
25553                                           ! Debug: func () void = outb+0 (used reg = )
25554 67C2           E8         1613            call	_outb
25555 67C5           83C4                   04  add	sp,*4
25556                                           !BCC_EOS
25557                                           ! 3524  ovl = inb(crtc_addr+1);
25558                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25559 67C8           8B46         FE            mov	ax,-2[bp]
25560                                           ! Debug: list unsigned int = ax+1 (used reg = )
25561 67CB           40                         inc	ax
25562 67CC           50                         push	ax
25563                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25564 67CD           E8         15F2            call	_inb
25565 67D0           44                         inc	sp
25566 67D1           44                         inc	sp
25567                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25568 67D2           8846         F6            mov	-$A[bp],al
25569                                           !BCC_EOS
25570                                           ! 3525  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25571                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25572 67D5           8A46         F6            mov	al,-$A[bp]
25573 67D8           24                     40  and	al,*$40
25574                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25575 67DA           30E4                       xor	ah,ah
25576 67DC           B1                     03  mov	cl,*3
25577 67DE           D3E0                       shl	ax,cl
25578 67E0           50                         push	ax
25579                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25580 67E1           8A46         F6            mov	al,-$A[bp]
25581 67E4           24                     02  and	al,*2
25582                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25583 67E6           30E4                       xor	ah,ah
25584 67E8           B1                     07  mov	cl,*7
25585 67EA           D3E0                       shl	ax,cl
25586                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25587 67EC           0346         F2            add	ax,-$E[bp]
25588 67EF           44                         inc	sp
25589 67F0           44                         inc	sp
25590                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25591                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25592 67F1           40                         inc	ax
25593 67F2           0346         F8            add	ax,-8[bp]
25594 67F5           8946         F8            mov	-8[bp],ax
25595                                           !BCC_EOS
25596                                           ! 3526  rows = vde / lines;
25597                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25598 67F8           8A46         04            mov	al,4[bp]
25599 67FB           30E4                       xor	ah,ah
25600 67FD           89C3                       mov	bx,ax
25601 67FF           8B46         F8            mov	ax,-8[bp]
25602 6802           E8         FEFA            call	idiv_u
25603                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25604 6805           8846         F5            mov	-$B[bp],al
25605                                           !BCC_EOS
25606                                           ! 3527  write_byte(0x40,0x84, rows-1);
25607                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25608 6808           8A46         F5            mov	al,-$B[bp]
25609 680B           30E4                       xor	ah,ah
25610                                           ! Debug: list unsigned int = ax-1 (used reg = )
25611 680D           48                         dec	ax
25612 680E           50                         push	ax
25613                                           ! Debug: list int = const $84 (used reg = )
25614 680F           B8                   0084  mov	ax,#$84
25615 6812           50                         push	ax
25616                                           ! Debug: list int = const $40 (used reg = )
25617 6813           B8                   0040  mov	ax,*$40
25618 6816           50                         push	ax
25619                                           ! Debug: func () void = write_byte+0 (used reg = )
25620 6817           E8         1578            call	_write_byte
25621 681A           83C4                   06  add	sp,*6
25622                                           !BCC_EOS
25623                                           ! 3528  cols = read_word(0x40,0x4A);
25624                                           ! Debug: list int = const $4A (used reg = )
25625 681D           B8                   004A  mov	ax,*$4A
25626 6820           50                         push	ax
25627                                           ! Debug: list int = const $40 (used reg = )
25628 6821           B8                   0040  mov	ax,*$40
25629 6824           50                         push	ax
25630                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25631 6825           E8         1557            call	_read_word
25632 6828           83C4                   04  add	sp,*4
25633                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25634 682B           8946         FC            mov	-4[bp],ax
25635                                           !BCC_EOS
25636                                           ! 3529  write_word(0x40,0x4C, rows * cols * 2);
25637                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25638 682E           8A46         F5            mov	al,-$B[bp]
25639 6831           30E4                       xor	ah,ah
25640 6833           8B4E         FC            mov	cx,-4[bp]
25641 6836           F7E9                       imul	cx
25642                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25643 6838           D1E0                       shl	ax,*1
25644                                           ! Debug: list unsigned int = ax+0 (used reg = )
25645 683A           50                         push	ax
25646                                           ! Debug: list int = const $4C (used reg = )
25647 683B           B8                   004C  mov	ax,*$4C
25648 683E           50                         push	ax
25649                                           ! Debug: list int = const $40 (used reg = )
25650 683F           B8                   0040  mov	ax,*$40
25651 6842           50                         push	ax
25652                                           ! Debug: func () void = write_word+0 (used reg = )
25653 6843           E8         1564            call	_write_word
25654 6846           83C4                   06  add	sp,*6
25655                                           !BCC_EOS
25656                                           ! 3530 }
25657 6849           89EC                       mov	sp,bp
25658 684B           5D                         pop	bp
25659 684C           C3                         ret
25660                                           ! 3531 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25661                                           ! Register BX used in function set_scan_lines
25662                       0000684D            _biosfn_load_text_user_pat:
25663                                           !BCC_EOS
25664                                           !BCC_EOS
25665                                           !BCC_EOS
25666                                           !BCC_EOS
25667                                           !BCC_EOS
25668                                           !BCC_EOS
25669                                           !BCC_EOS
25670                                           ! 3532 {
25671                                           ! 3533  Bit16u blockaddr,dest,i,src;
25672                                           !BCC_EOS
25673                                           ! 3534  get_font_access();
25674 684D           55                         push	bp
25675 684E           89E5                       mov	bp,sp
25676 6850           83C4                   F8  add	sp,*-8
25677                                           ! Debug: func () void = get_font_access+0 (used reg = )
25678 6853           E8         FE57            call	_get_font_access
25679                                           !BCC_EOS
25680                                           ! 3535  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25681                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25682 6856           8A46         0E            mov	al,$E[bp]
25683 6859           24                     04  and	al,*4
25684                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25685 685B           30E4                       xor	ah,ah
25686 685D           88C4                       mov	ah,al
25687 685F           30C0                       xor	al,al
25688 6861           B1                     03  mov	cl,*3
25689 6863           D3E0                       shl	ax,cl
25690 6865           50                         push	ax
25691                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25692 6866           8A46         0E            mov	al,$E[bp]
25693 6869           24                     03  and	al,*3
25694                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25695 686B           30E4                       xor	ah,ah
25696 686D           88C4                       mov	ah,al
25697 686F           30C0                       xor	al,al
25698 6871           B1                     06  mov	cl,*6
25699 6873           D3E0                       shl	ax,cl
25700                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25701 6875           0346         F6            add	ax,-$A[bp]
25702 6878           44                         inc	sp
25703 6879           44                         inc	sp
25704                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25705 687A           8946         FE            mov	-2[bp],ax
25706                                           !BCC_EOS
25707                                           ! 3536  for(i=0;i<CX;i++)
25708                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25709 687D           31C0                       xor	ax,ax
25710 687F           8946         FA            mov	-6[bp],ax
25711                                           !BCC_EOS
25712                                           !BCC_EOS
25713                                           ! 3537   {
25714 6882           EB           44            jmp .223
25715                       00006884            .224:
25716                                           ! 3538    src = BP + i * BH;
25717                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25718 6884           8A46         10            mov	al,$10[bp]
25719 6887           30E4                       xor	ah,ah
25720 6889           89C3                       mov	bx,ax
25721 688B           8B46         FA            mov	ax,-6[bp]
25722 688E           89D9                       mov	cx,bx
25723 6890           F7E9                       imul	cx
25724                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25725                                           ! Debug: expression subtree swapping
25726 6892           0346         08            add	ax,8[bp]
25727                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25728 6895           8946         F8            mov	-8[bp],ax
25729                                           !BCC_EOS
25730                                           ! 3539    dest = blockaddr + (DX + i) * 32;
25731                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25732 6898           8B46         0C            mov	ax,$C[bp]
25733 689B           0346         FA            add	ax,-6[bp]
25734                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25735 689E           B1                     05  mov	cl,*5
25736 68A0           D3E0                       shl	ax,cl
25737                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25738                                           ! Debug: expression subtree swapping
25739 68A2           0346         FE            add	ax,-2[bp]
25740                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25741 68A5           8946         FC            mov	-4[bp],ax
25742                                           !BCC_EOS
25743                                           ! 3540    memcpyb(0xA000, dest, ES, src, BH);
25744                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25745 68A8           8A46         10            mov	al,$10[bp]
25746 68AB           30E4                       xor	ah,ah
25747 68AD           50                         push	ax
25748                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25749 68AE           FF76         F8            push	-8[bp]
25750                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25751 68B1           FF76         06            push	6[bp]
25752                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25753 68B4           FF76         FC            push	-4[bp]
25754                                           ! Debug: list unsigned int = const $A000 (used reg = )
25755 68B7           B8                   A000  mov	ax,#$A000
25756 68BA           50                         push	ax
25757                                           ! Debug: func () void = memcpyb+0 (used reg = )
25758 68BB           E8         144E            call	_memcpyb
25759 68BE           83C4                   0A  add	sp,*$A
25760                                           !BCC_EOS
25761                                           ! 3541   }
25762                                           ! 3542  release_font_access();
25763                       000068C1            .222:
25764                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25765 68C1           8B46         FA            mov	ax,-6[bp]
25766 68C4           40                         inc	ax
25767 68C5           8946         FA            mov	-6[bp],ax
25768                       000068C8            .223:
25769                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25770 68C8           8B46         FA            mov	ax,-6[bp]
25771 68CB           3B46         0A            cmp	ax,$A[bp]
25772 68CE           72           B4            jb 	.224
25773                       000068D0            .225:
25774                       000068D0            .221:
25775                                           ! Debug: func () void = release_font_access+0 (used reg = )
25776 68D0           E8         FDFD            call	_release_font_access
25777                                           !BCC_EOS
25778                                           ! 3543  if(AL>=0x10)
25779                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25780 68D3           8A46         04            mov	al,4[bp]
25781 68D6           3C                     10  cmp	al,*$10
25782 68D8           72           0B            jb  	.226
25783                       000068DA            .227:
25784                                           ! 3544   {
25785                                           ! 3545    set_scan_lines(BH);
25786                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25787 68DA           8A46         10            mov	al,$10[bp]
25788 68DD           30E4                       xor	ah,ah
25789 68DF           50                         push	ax
25790                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25791 68E0           E8         FE21            call	_set_scan_lines
25792 68E3           44                         inc	sp
25793 68E4           44                         inc	sp
25794                                           !BCC_EOS
25795                                           ! 3546   }
25796                                           ! 3547 }
25797                       000068E5            .226:
25798 68E5           89EC                       mov	sp,bp
25799 68E7           5D                         pop	bp
25800 68E8           C3                         ret
25801                                           ! 3548 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25802                                           ! Register BX used in function biosfn_load_text_user_pat
25803                       000068E9            _biosfn_load_text_8_14_pat:
25804                                           !BCC_EOS
25805                                           !BCC_EOS
25806                                           ! 3549 {
25807                                           ! 3550  Bit16u blockaddr,dest,i,src;
25808                                           !BCC_EOS
25809                                           ! 3551  get_font_access();
25810 68E9           55                         push	bp
25811 68EA           89E5                       mov	bp,sp
25812 68EC           83C4                   F8  add	sp,*-8
25813                                           ! Debug: func () void = get_font_access+0 (used reg = )
25814 68EF           E8         FDBB            call	_get_font_access
25815                                           !BCC_EOS
25816                                           ! 3552  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25817                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25818 68F2           8A46         06            mov	al,6[bp]
25819 68F5           24                     04  and	al,*4
25820                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25821 68F7           30E4                       xor	ah,ah
25822 68F9           88C4                       mov	ah,al
25823 68FB           30C0                       xor	al,al
25824 68FD           B1                     03  mov	cl,*3
25825 68FF           D3E0                       shl	ax,cl
25826 6901           50                         push	ax
25827                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25828 6902           8A46         06            mov	al,6[bp]
25829 6905           24                     03  and	al,*3
25830                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25831 6907           30E4                       xor	ah,ah
25832 6909           88C4                       mov	ah,al
25833 690B           30C0                       xor	al,al
25834 690D           B1                     06  mov	cl,*6
25835 690F           D3E0                       shl	ax,cl
25836                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25837 6911           0346         F6            add	ax,-$A[bp]
25838 6914           44                         inc	sp
25839 6915           44                         inc	sp
25840                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25841 6916           8946         FE            mov	-2[bp],ax
25842                                           !BCC_EOS
25843                                           ! 3553  for(i=0;i<0x100;i++)
25844                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25845 6919           31C0                       xor	ax,ax
25846 691B           8946         FA            mov	-6[bp],ax
25847                                           !BCC_EOS
25848                                           !BCC_EOS
25849                                           ! 3554   {
25850 691E           EB           41            jmp .22A
25851                       00006920            .22B:
25852                                           ! 3555    src = i * 14;
25853                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25854 6920           8B46         FA            mov	ax,-6[bp]
25855 6923           89C2                       mov	dx,ax
25856 6925           B1                     03  mov	cl,*3
25857 6927           D3E0                       shl	ax,cl
25858 6929           29D0                       sub	ax,dx
25859 692B           D1E0                       shl	ax,*1
25860                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25861 692D           8946         F8            mov	-8[bp],ax
25862                                           !BCC_EOS
25863                                           ! 3556    dest = blockaddr + i * 32;
25864                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25865 6930           8B46         FA            mov	ax,-6[bp]
25866 6933           B1                     05  mov	cl,*5
25867 6935           D3E0                       shl	ax,cl
25868                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25869                                           ! Debug: expression subtree swapping
25870 6937           0346         FE            add	ax,-2[bp]
25871                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25872 693A           8946         FC            mov	-4[bp],ax
25873                                           !BCC_EOS
25874                                           ! 3557    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25875                                           ! Debug: list int = const $E (used reg = )
25876 693D           B8                   000E  mov	ax,*$E
25877 6940           50                         push	ax
25878                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25879 6941           8B5E         F8            mov	bx,-8[bp]
25880                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25881                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25882 6944           81C3                 1768  add	bx,#_vgafont14
25883 6948           53                         push	bx
25884                                           ! Debug: list unsigned int = const $C000 (used reg = )
25885 6949           B8                   C000  mov	ax,#$C000
25886 694C           50                         push	ax
25887                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25888 694D           FF76         FC            push	-4[bp]
25889                                           ! Debug: list unsigned int = const $A000 (used reg = )
25890 6950           B8                   A000  mov	ax,#$A000
25891 6953           50                         push	ax
25892                                           ! Debug: func () void = memcpyb+0 (used reg = )
25893 6954           E8         13B5            call	_memcpyb
25894 6957           83C4                   0A  add	sp,*$A
25895                                           !BCC_EOS
25896                                           ! 3558   }
25897                                           ! 3559  release_font_access();
25898                       0000695A            .229:
25899                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25900 695A           8B46         FA            mov	ax,-6[bp]
25901 695D           40                         inc	ax
25902 695E           8946         FA            mov	-6[bp],ax
25903                       00006961            .22A:
25904                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25905 6961           8B46         FA            mov	ax,-6[bp]
25906 6964           3D                   0100  cmp	ax,#$100
25907 6967           72           B7            jb 	.22B
25908                       00006969            .22C:
25909                       00006969            .228:
25910                                           ! Debug: func () void = release_font_access+0 (used reg = )
25911 6969           E8         FD64            call	_release_font_access
25912                                           !BCC_EOS
25913                                           ! 3560  if(AL>=0x10)
25914                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25915 696C           8A46         04            mov	al,4[bp]
25916 696F           3C                     10  cmp	al,*$10
25917 6971           72           09            jb  	.22D
25918                       00006973            .22E:
25919                                           ! 3561   {
25920                                           ! 3562    set_scan_lines(14);
25921                                           ! Debug: list int = const $E (used reg = )
25922 6973           B8                   000E  mov	ax,*$E
25923 6976           50                         push	ax
25924                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25925 6977           E8         FD8A            call	_set_scan_lines
25926 697A           44                         inc	sp
25927 697B           44                         inc	sp
25928                                           !BCC_EOS
25929                                           ! 3563   }
25930                                           ! 3564 }
25931                       0000697C            .22D:
25932 697C           89EC                       mov	sp,bp
25933 697E           5D                         pop	bp
25934 697F           C3                         ret
25935                                           ! 3565 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25936                                           ! Register BX used in function biosfn_load_text_8_14_pat
25937                       00006980            _biosfn_load_text_8_8_pat:
25938                                           !BCC_EOS
25939                                           !BCC_EOS
25940                                           ! 3566 {
25941                                           ! 3567  Bit16u blockaddr,dest,i,src;
25942                                           !BCC_EOS
25943                                           ! 3568  get_font_access();
25944 6980           55                         push	bp
25945 6981           89E5                       mov	bp,sp
25946 6983           83C4                   F8  add	sp,*-8
25947                                           ! Debug: func () void = get_font_access+0 (used reg = )
25948 6986           E8         FD24            call	_get_font_access
25949                                           !BCC_EOS
25950                                           ! 3569  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25951                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25952 6989           8A46         06            mov	al,6[bp]
25953 698C           24                     04  and	al,*4
25954                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25955 698E           30E4                       xor	ah,ah
25956 6990           88C4                       mov	ah,al
25957 6992           30C0                       xor	al,al
25958 6994           B1                     03  mov	cl,*3
25959 6996           D3E0                       shl	ax,cl
25960 6998           50                         push	ax
25961                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25962 6999           8A46         06            mov	al,6[bp]
25963 699C           24                     03  and	al,*3
25964                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25965 699E           30E4                       xor	ah,ah
25966 69A0           88C4                       mov	ah,al
25967 69A2           30C0                       xor	al,al
25968 69A4           B1                     06  mov	cl,*6
25969 69A6           D3E0                       shl	ax,cl
25970                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25971 69A8           0346         F6            add	ax,-$A[bp]
25972 69AB           44                         inc	sp
25973 69AC           44                         inc	sp
25974                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25975 69AD           8946         FE            mov	-2[bp],ax
25976                                           !BCC_EOS
25977                                           ! 3570  for(i=0;i<0x100;i++)
25978                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25979 69B0           31C0                       xor	ax,ax
25980 69B2           8946         FA            mov	-6[bp],ax
25981                                           !BCC_EOS
25982                                           !BCC_EOS
25983                                           ! 3571   {
25984 69B5           EB           3B            jmp .231
25985                       000069B7            .232:
25986                                           ! 3572    src = i * 8;
25987                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25988 69B7           8B46         FA            mov	ax,-6[bp]
25989 69BA           B1                     03  mov	cl,*3
25990 69BC           D3E0                       shl	ax,cl
25991                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25992 69BE           8946         F8            mov	-8[bp],ax
25993                                           !BCC_EOS
25994                                           ! 3573    dest = blockaddr + i * 32;
25995                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25996 69C1           8B46         FA            mov	ax,-6[bp]
25997 69C4           B1                     05  mov	cl,*5
25998 69C6           D3E0                       shl	ax,cl
25999                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26000                                           ! Debug: expression subtree swapping
26001 69C8           0346         FE            add	ax,-2[bp]
26002                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
26003 69CB           8946         FC            mov	-4[bp],ax
26004                                           !BCC_EOS
26005                                           ! 3574    memcpyb(
26006                                           ! 3574 0xA000, dest, 0xC000, vgafont8+src, 8);
26007                                           ! Debug: list int = const 8 (used reg = )
26008 69CE           B8                   0008  mov	ax,*8
26009 69D1           50                         push	ax
26010                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
26011 69D2           8B5E         F8            mov	bx,-8[bp]
26012                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
26013                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
26014 69D5           81C3                 0F68  add	bx,#_vgafont8
26015 69D9           53                         push	bx
26016                                           ! Debug: list unsigned int = const $C000 (used reg = )
26017 69DA           B8                   C000  mov	ax,#$C000
26018 69DD           50                         push	ax
26019                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
26020 69DE           FF76         FC            push	-4[bp]
26021                                           ! Debug: list unsigned int = const $A000 (used reg = )
26022 69E1           B8                   A000  mov	ax,#$A000
26023 69E4           50                         push	ax
26024                                           ! Debug: func () void = memcpyb+0 (used reg = )
26025 69E5           E8         1324            call	_memcpyb
26026 69E8           83C4                   0A  add	sp,*$A
26027                                           !BCC_EOS
26028                                           ! 3575   }
26029                                           ! 3576  release_font_access();
26030                       000069EB            .230:
26031                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26032 69EB           8B46         FA            mov	ax,-6[bp]
26033 69EE           40                         inc	ax
26034 69EF           8946         FA            mov	-6[bp],ax
26035                       000069F2            .231:
26036                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26037 69F2           8B46         FA            mov	ax,-6[bp]
26038 69F5           3D                   0100  cmp	ax,#$100
26039 69F8           72           BD            jb 	.232
26040                       000069FA            .233:
26041                       000069FA            .22F:
26042                                           ! Debug: func () void = release_font_access+0 (used reg = )
26043 69FA           E8         FCD3            call	_release_font_access
26044                                           !BCC_EOS
26045                                           ! 3577  if(AL>=0x10)
26046                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26047 69FD           8A46         04            mov	al,4[bp]
26048 6A00           3C                     10  cmp	al,*$10
26049 6A02           72           09            jb  	.234
26050                       00006A04            .235:
26051                                           ! 3578   {
26052                                           ! 3579    set_scan_lines(8);
26053                                           ! Debug: list int = const 8 (used reg = )
26054 6A04           B8                   0008  mov	ax,*8
26055 6A07           50                         push	ax
26056                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26057 6A08           E8         FCF9            call	_set_scan_lines
26058 6A0B           44                         inc	sp
26059 6A0C           44                         inc	sp
26060                                           !BCC_EOS
26061                                           ! 3580   }
26062                                           ! 3581 }
26063                       00006A0D            .234:
26064 6A0D           89EC                       mov	sp,bp
26065 6A0F           5D                         pop	bp
26066 6A10           C3                         ret
26067                                           ! 3582 #asm
26068                                           !BCC_ASM
26069                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
26070                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
26071                       00006A11            biosfn_set_text_block_specifier:
26072 6A11           50                           push ax
26073 6A12           52                           push dx
26074 6A13           BA                   03C4    mov dx, # 0x3c4
26075 6A16           88DC                         mov ah, bl
26076 6A18           B0                     03    mov al, #0x03
26077 6A1A           EF                           out dx, ax
26078 6A1B           5A                           pop dx
26079 6A1C           58                           pop ax
26080 6A1D           C3                           ret
26081                                           ! 3593 endasm
26082                                           !BCC_ENDASM
26083                                           ! 3594 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
26084                                           ! Register BX used in function biosfn_load_text_8_8_pat
26085                       00006A1E            _biosfn_load_text_8_16_pat:
26086                                           !BCC_EOS
26087                                           !BCC_EOS
26088                                           ! 3595 {
26089                                           ! 3596  Bit16u blockaddr,dest,i,src;
26090                                           !BCC_EOS
26091                                           ! 3597  get_font_access();
26092 6A1E           55                         push	bp
26093 6A1F           89E5                       mov	bp,sp
26094 6A21           83C4                   F8  add	sp,*-8
26095                                           ! Debug: func () void = get_font_access+0 (used reg = )
26096 6A24           E8         FC86            call	_get_font_access
26097                                           !BCC_EOS
26098                                           ! 3598  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
26099                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
26100 6A27           8A46         06            mov	al,6[bp]
26101 6A2A           24                     04  and	al,*4
26102                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
26103 6A2C           30E4                       xor	ah,ah
26104 6A2E           88C4                       mov	ah,al
26105 6A30           30C0                       xor	al,al
26106 6A32           B1                     03  mov	cl,*3
26107 6A34           D3E0                       shl	ax,cl
26108 6A36           50                         push	ax
26109                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
26110 6A37           8A46         06            mov	al,6[bp]
26111 6A3A           24                     03  and	al,*3
26112                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
26113 6A3C           30E4                       xor	ah,ah
26114 6A3E           88C4                       mov	ah,al
26115 6A40           30C0                       xor	al,al
26116 6A42           B1                     06  mov	cl,*6
26117 6A44           D3E0                       shl	ax,cl
26118                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
26119 6A46           0346         F6            add	ax,-$A[bp]
26120 6A49           44                         inc	sp
26121 6A4A           44                         inc	sp
26122                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26123 6A4B           8946         FE            mov	-2[bp],ax
26124                                           !BCC_EOS
26125                                           ! 3599  for(i=0;i<0x100;i++)
26126                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
26127 6A4E           31C0                       xor	ax,ax
26128 6A50           8946         FA            mov	-6[bp],ax
26129                                           !BCC_EOS
26130                                           !BCC_EOS
26131                                           ! 3600   {
26132 6A53           EB           3B            jmp .238
26133                       00006A55            .239:
26134                                           ! 3601    src = i * 16;
26135                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
26136 6A55           8B46         FA            mov	ax,-6[bp]
26137 6A58           B1                     04  mov	cl,*4
26138 6A5A           D3E0                       shl	ax,cl
26139                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
26140 6A5C           8946         F8            mov	-8[bp],ax
26141                                           !BCC_EOS
26142                                           ! 3602    dest = blockaddr + i * 32;
26143                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
26144 6A5F           8B46         FA            mov	ax,-6[bp]
26145 6A62           B1                     05  mov	cl,*5
26146 6A64           D3E0                       shl	ax,cl
26147                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26148                                           ! Debug: expression subtree swapping
26149 6A66           0346         FE            add	ax,-2[bp]
26150                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
26151 6A69           8946         FC            mov	-4[bp],ax
26152                                           !BCC_EOS
26153                                           ! 3603    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
26154                                           ! Debug: list int = const $10 (used reg = )
26155 6A6C           B8                   0010  mov	ax,*$10
26156 6A6F           50                         push	ax
26157                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
26158 6A70           8B5E         F8            mov	bx,-8[bp]
26159                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
26160                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
26161 6A73           81C3                 2568  add	bx,#_vgafont16
26162 6A77           53                         push	bx
26163                                           ! Debug: list unsigned int = const $C000 (used reg = )
26164 6A78           B8                   C000  mov	ax,#$C000
26165 6A7B           50                         push	ax
26166                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
26167 6A7C           FF76         FC            push	-4[bp]
26168                                           ! Debug: list unsigned int = const $A000 (used reg = )
26169 6A7F           B8                   A000  mov	ax,#$A000
26170 6A82           50                         push	ax
26171                                           ! Debug: func () void = memcpyb+0 (used reg = )
26172 6A83           E8         1286            call	_memcpyb
26173 6A86           83C4                   0A  add	sp,*$A
26174                                           !BCC_EOS
26175                                           ! 3604   }
26176                                           ! 3605  release_font_access();
26177                       00006A89            .237:
26178                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26179 6A89           8B46         FA            mov	ax,-6[bp]
26180 6A8C           40                         inc	ax
26181 6A8D           8946         FA            mov	-6[bp],ax
26182                       00006A90            .238:
26183                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26184 6A90           8B46         FA            mov	ax,-6[bp]
26185 6A93           3D                   0100  cmp	ax,#$100
26186 6A96           72           BD            jb 	.239
26187                       00006A98            .23A:
26188                       00006A98            .236:
26189                                           ! Debug: func () void = release_font_access+0 (used reg = )
26190 6A98           E8         FC35            call	_release_font_access
26191                                           !BCC_EOS
26192                                           ! 3606  if(AL>=0x10)
26193                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26194 6A9B           8A46         04            mov	al,4[bp]
26195 6A9E           3C                     10  cmp	al,*$10
26196 6AA0           72           09            jb  	.23B
26197                       00006AA2            .23C:
26198                                           ! 3607   {
26199                                           ! 3608    set_scan_lines(16);
26200                                           ! Debug: list int = const $10 (used reg = )
26201 6AA2           B8                   0010  mov	ax,*$10
26202 6AA5           50                         push	ax
26203                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26204 6AA6           E8         FC5B            call	_set_scan_lines
26205 6AA9           44                         inc	sp
26206 6AAA           44                         inc	sp
26207                                           !BCC_EOS
26208                                           ! 3609   }
26209                                           ! 3610 }
26210                       00006AAB            .23B:
26211 6AAB           89EC                       mov	sp,bp
26212 6AAD           5D                         pop	bp
26213 6AAE           C3                         ret
26214                                           ! 3611 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
26215                                           ! Register BX used in function biosfn_load_text_8_16_pat
26216                       00006AAF            _biosfn_load_gfx_8_8_chars:
26217                                           !BCC_EOS
26218                                           !BCC_EOS
26219                                           ! 3612 {
26220                                           ! 3613  unimplemented();
26221 6AAF           55                         push	bp
26222 6AB0           89E5                       mov	bp,sp
26223                                           ! Debug: func () void = unimplemented+0 (used reg = )
26224 6AB2           E8         1346            call	_unimplemented
26225                                           !BCC_EOS
26226                                           ! 3614 }
26227 6AB5           5D                         pop	bp
26228 6AB6           C3                         ret
26229                                           ! 3615 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26230                       00006AB7            _biosfn_load_gfx_user_chars:
26231                                           !BCC_EOS
26232                                           !BCC_EOS
26233                                           !BCC_EOS
26234                                           !BCC_EOS
26235                                           !BCC_EOS
26236                                           ! 3616 {
26237                                           ! 3617  unimplemented();
26238 6AB7           55                         push	bp
26239 6AB8           89E5                       mov	bp,sp
26240                                           ! Debug: func () void = unimplemented+0 (used reg = )
26241 6ABA           E8         133E            call	_unimplemented
26242                                           !BCC_EOS
26243                                           ! 3618 }
26244 6ABD           5D                         pop	bp
26245 6ABE           C3                         ret
26246                                           ! 3619 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26247                       00006ABF            _biosfn_load_gfx_8_14_chars:
26248                                           !BCC_EOS
26249                                           ! 3620 {
26250                                           ! 3621  unimplemented();
26251 6ABF           55                         push	bp
26252 6AC0           89E5                       mov	bp,sp
26253                                           ! Debug: func () void = unimplemented+0 (used reg = )
26254 6AC2           E8         1336            call	_unimplemented
26255                                           !BCC_EOS
26256                                           ! 3622 }
26257 6AC5           5D                         pop	bp
26258 6AC6           C3                         ret
26259                                           ! 3623 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26260                       00006AC7            _biosfn_load_gfx_8_8_dd_chars:
26261                                           !BCC_EOS
26262                                           ! 3624 {
26263                                           ! 3625  unimplemented();
26264 6AC7           55                         push	bp
26265 6AC8           89E5                       mov	bp,sp
26266                                           ! Debug: func () void = unimplemented+0 (used reg = )
26267 6ACA           E8         132E            call	_unimplemented
26268                                           !BCC_EOS
26269                                           ! 3626 }
26270 6ACD           5D                         pop	bp
26271 6ACE           C3                         ret
26272                                           ! 3627 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26273                       00006ACF            _biosfn_load_gfx_8_16_chars:
26274                                           !BCC_EOS
26275                                           ! 3628 {
26276                                           ! 3629  unimplemented();
26277 6ACF           55                         push	bp
26278 6AD0           89E5                       mov	bp,sp
26279                                           ! Debug: func () void = unimplemented+0 (used reg = )
26280 6AD2           E8         1326            call	_unimplemented
26281                                           !BCC_EOS
26282                                           ! 3630 }
26283 6AD5           5D                         pop	bp
26284 6AD6           C3                         ret
26285                                           ! 3631 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26286                                           ! 3632 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26287                       00006AD7            _biosfn_get_font_info:
26288                                           !BCC_EOS
26289                                           !BCC_EOS
26290                                           !BCC_EOS
26291                                           !BCC_EOS
26292                                           !BCC_EOS
26293                                           ! 3633 {Bit16u ss=get_SS();
26294 6AD7           55                         push	bp
26295 6AD8           89E5                       mov	bp,sp
26296 6ADA           4C                         dec	sp
26297 6ADB           4C                         dec	sp
26298                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26299 6ADC           E8         1319            call	_get_SS
26300                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26301 6ADF           8946         FE            mov	-2[bp],ax
26302                                           !BCC_EOS
26303                                           ! 3634  switch(BH)
26304 6AE2           8A46         04            mov	al,4[bp]
26305                                           ! 3635   {case 0x00:
26306 6AE5           E9         0154            br 	.23F
26307                                           ! 3636     write_word(ss,ES,read_word(0x00,0x1f*4));
26308                       00006AE8            .240:
26309                                           ! Debug: list int = const $7C (used reg = )
26310 6AE8           B8                   007C  mov	ax,*$7C
26311 6AEB           50                         push	ax
26312                                           ! Debug: list int = const 0 (used reg = )
26313 6AEC           31C0                       xor	ax,ax
26314 6AEE           50                         push	ax
26315                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26316 6AEF           E8         128D            call	_read_word
26317 6AF2           83C4                   04  add	sp,*4
26318                                           ! Debug: list unsigned short = ax+0 (used reg = )
26319 6AF5           50                         push	ax
26320                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26321 6AF6           FF76         06            push	6[bp]
26322                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26323 6AF9           FF76         FE            push	-2[bp]
26324                                           ! Debug: func () void = write_word+0 (used reg = )
26325 6AFC           E8         12AB            call	_write_word
26326 6AFF           83C4                   06  add	sp,*6
26327                                           !BCC_EOS
26328                                           ! 3637     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26329                                           ! Debug: list int = const $7E (used reg = )
26330 6B02           B8                   007E  mov	ax,*$7E
26331 6B05           50                         push	ax
26332                                           ! Debug: list int = const 0 (used reg = )
26333 6B06           31C0                       xor	ax,ax
26334 6B08           50                         push	ax
26335                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26336 6B09           E8         1273            call	_read_word
26337 6B0C           83C4                   04  add	sp,*4
26338                                           ! Debug: list unsigned short = ax+0 (used reg = )
26339 6B0F           50                         push	ax
26340                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26341 6B10           FF76         08            push	8[bp]
26342                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26343 6B13           FF76         FE            push	-2[bp]
26344                                           ! Debug: func () void = write_word+0 (used reg = )
26345 6B16           E8         1291            call	_write_word
26346 6B19           83C4                   06  add	sp,*6
26347                                           !BCC_EOS
26348                                           ! 3638     break;
26349 6B1C           E9         0142            br 	.23D
26350                                           !BCC_EOS
26351                                           ! 3639    case 0x01:
26352                                           ! 3640     write_word(ss,ES,read_word(0x00,0x43*4));
26353                       00006B1F            .241:
26354                                           ! Debug: list int = const $10C (used reg = )
26355 6B1F           B8                   010C  mov	ax,#$10C
26356 6B22           50                         push	ax
26357                                           ! Debug: list int = const 0 (used reg = )
26358 6B23           31C0                       xor	ax,ax
26359 6B25           50                         push	ax
26360                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26361 6B26           E8         1256            call	_read_word
26362 6B29           83C4                   04  add	sp,*4
26363                                           ! Debug: list unsigned short = ax+0 (used reg = )
26364 6B2C           50                         push	ax
26365                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26366 6B2D           FF76         06            push	6[bp]
26367                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26368 6B30           FF76         FE            push	-2[bp]
26369                                           ! Debug: func () void = write_word+0 (used reg = )
26370 6B33           E8         1274            call	_write_word
26371 6B36           83C4                   06  add	sp,*6
26372                                           !BCC_EOS
26373                                           ! 3641     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26374                                           ! Debug: list int = const $10E (used reg = )
26375 6B39           B8                   010E  mov	ax,#$10E
26376 6B3C           50                         push	ax
26377                                           ! Debug: list int = const 0 (used reg = )
26378 6B3D           31C0                       xor	ax,ax
26379 6B3F           50                         push	ax
26380                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26381 6B40           E8         123C            call	_read_word
26382 6B43           83C4                   04  add	sp,*4
26383                                           ! Debug: list unsigned short = ax+0 (used reg = )
26384 6B46           50                         push	ax
26385                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26386 6B47           FF76         08            push	8[bp]
26387                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26388 6B4A           FF76         FE            push	-2[bp]
26389                                           ! Debug: func () void = write_word+0 (used reg = )
26390 6B4D           E8         125A            call	_write_word
26391 6B50           83C4                   06  add	sp,*6
26392                                           !BCC_EOS
26393                                           ! 3642     break;
26394 6B53           E9         010B            br 	.23D
26395                                           !BCC_EOS
26396                                           ! 3643    case 0x02:
26397                                           ! 3644     write_word(ss,ES,0xC000);
26398                       00006B56            .242:
26399                                           ! Debug: list unsigned int = const $C000 (used reg = )
26400 6B56           B8                   C000  mov	ax,#$C000
26401 6B59           50                         push	ax
26402                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26403 6B5A           FF76         06            push	6[bp]
26404                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26405 6B5D           FF76         FE            push	-2[bp]
26406                                           ! Debug: func () void = write_word+0 (used reg = )
26407 6B60           E8         1247            call	_write_word
26408 6B63           83C4                   06  add	sp,*6
26409                                           !BCC_EOS
26410                                           ! 3645     write_word(ss,BP,vgafont14);
26411                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26412 6B66           BB                   1768  mov	bx,#_vgafont14
26413 6B69           53                         push	bx
26414                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26415 6B6A           FF76         08            push	8[bp]
26416                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26417 6B6D           FF76         FE            push	-2[bp]
26418                                           ! Debug: func () void = write_word+0 (used reg = )
26419 6B70           E8         1237            call	_write_word
26420 6B73           83C4                   06  add	sp,*6
26421                                           !BCC_EOS
26422                                           ! 3646     break;
26423 6B76           E9         00E8            br 	.23D
26424                                           !BCC_EOS
26425                                           ! 3647    case 0x03:
26426                                           ! 3648     write_word(ss,ES,0xC000);
26427                       00006B79            .243:
26428                                           ! Debug: list unsigned int = const $C000 (used reg = )
26429 6B79           B8                   C000  mov	ax,#$C000
26430 6B7C           50                         push	ax
26431                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26432 6B7D           FF76         06            push	6[bp]
26433                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26434 6B80           FF76         FE            push	-2[bp]
26435                                           ! Debug: func () void = write_word+0 (used reg = )
26436 6B83           E8         1224            call	_write_word
26437 6B86           83C4                   06  add	sp,*6
26438                                           !BCC_EOS
26439                                           ! 3649     write_word(ss,BP,vgafont8);
26440                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26441 6B89           BB                   0F68  mov	bx,#_vgafont8
26442 6B8C           53                         push	bx
26443                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26444 6B8D           FF76         08            push	8[bp]
26445                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26446 6B90           FF76         FE            push	-2[bp]
26447                                           ! Debug: func () void = write_word+0 (used reg = )
26448 6B93           E8         1214            call	_write_word
26449 6B96           83C4                   06  add	sp,*6
26450                                           !BCC_EOS
26451                                           ! 3650     break;
26452 6B99           E9         00C5            br 	.23D
26453                                           !BCC_EOS
26454                                           ! 3651    case 0x04:
26455                                           ! 3652     write_word(ss,ES,0xC000);
26456                       00006B9C            .244:
26457                                           ! Debug: list unsigned int = const $C000 (used reg = )
26458 6B9C           B8                   C000  mov	ax,#$C000
26459 6B9F           50                         push	ax
26460                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26461 6BA0           FF76         06            push	6[bp]
26462                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26463 6BA3           FF76         FE            push	-2[bp]
26464                                           ! Debug: func () void = write_word+0 (used reg = )
26465 6BA6           E8         1201            call	_write_word
26466 6BA9           83C4                   06  add	sp,*6
26467                                           !BCC_EOS
26468                                           ! 3653     write_word(ss,BP,vgafont8+128*8);
26469                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26470 6BAC           BB                   1368  mov	bx,#_vgafont8+$400
26471 6BAF           53                         push	bx
26472                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26473 6BB0           FF76         08            push	8[bp]
26474                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26475 6BB3           FF76         FE            push	-2[bp]
26476                                           ! Debug: func () void = write_word+0 (used reg = )
26477 6BB6           E8         11F1            call	_write_word
26478 6BB9           83C4                   06  add	sp,*6
26479                                           !BCC_EOS
26480                                           ! 3654     break;
26481 6BBC           E9         00A2            br 	.23D
26482                                           !BCC_EOS
26483                                           ! 3655    case 0x05:
26484                                           ! 3656     write_word(ss,ES,0xC000);
26485                       00006BBF            .245:
26486                                           ! Debug: list unsigned int = const $C000 (used reg = )
26487 6BBF           B8                   C000  mov	ax,#$C000
26488 6BC2           50                         push	ax
26489                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26490 6BC3           FF76         06            push	6[bp]
26491                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26492 6BC6           FF76         FE            push	-2[bp]
26493                                           ! Debug: func () void = write_word+0 (used reg = )
26494 6BC9           E8         11DE            call	_write_word
26495 6BCC           83C4                   06  add	sp,*6
26496                                           !BCC_EOS
26497                                           ! 3657     write_word(ss,BP,vgafont14alt);
26498                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26499 6BCF           BB                   3568  mov	bx,#_vgafont14alt
26500 6BD2           53                         push	bx
26501                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26502 6BD3           FF76         08            push	8[bp]
26503                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26504 6BD6           FF76         FE            push	-2[bp]
26505                                           ! Debug: func () void = write_word+0 (used reg = )
26506 6BD9           E8         11CE            call	_write_word
26507 6BDC           83C4                   06  add	sp,*6
26508                                           !BCC_EOS
26509                                           ! 3658     break;
26510 6BDF           E9         007F            jmp .23D
26511                                           !BCC_EOS
26512                                           ! 3659    case 0x06:
26513                                           ! 3660     write_word(ss,ES,0xC000);
26514                       00006BE2            .246:
26515                                           ! Debug: list unsigned int = const $C000 (used reg = )
26516 6BE2           B8                   C000  mov	ax,#$C000
26517 6BE5           50                         push	ax
26518                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26519 6BE6           FF76         06            push	6[bp]
26520                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26521 6BE9           FF76         FE            push	-2[bp]
26522                                           ! Debug: func () void = write_word+0 (used reg = )
26523 6BEC           E8         11BB            call	_write_word
26524 6BEF           83C4                   06  add	sp,*6
26525                                           !BCC_EOS
26526                                           ! 3661     write_word(ss,BP,vgafont16);
26527                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26528 6BF2           BB                   2568  mov	bx,#_vgafont16
26529 6BF5           53                         push	bx
26530                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26531 6BF6           FF76         08            push	8[bp]
26532                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26533 6BF9           FF76         FE            push	-2[bp]
26534                                           ! Debug: func () void = write_word+0 (used reg = )
26535 6BFC           E8         11AB            call	_write_word
26536 6BFF           83C4                   06  add	sp,*6
26537                                           !BCC_EOS
26538                                           ! 3662     break;
26539 6C02           EB           5D            jmp .23D
26540                                           !BCC_EOS
26541                                           ! 3663    case 0x07:
26542                                           ! 3664     write_word(ss,ES,0xC000);
26543                       00006C04            .247:
26544                                           ! Debug: list unsigned int = const $C000 (used reg = )
26545 6C04           B8                   C000  mov	ax,#$C000
26546 6C07           50                         push	ax
26547                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26548 6C08           FF76         06            push	6[bp]
26549                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26550 6C0B           FF76         FE            push	-2[bp]
26551                                           ! Debug: func () void = write_word+0 (used reg = )
26552 6C0E           E8         1199            call	_write_word
26553 6C11           83C4                   06  add	sp,*6
26554                                           !BCC_EOS
26555                                           ! 3665     write_word(ss,BP,vgafont16alt);
26556                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26557 6C14           BB                   3569  mov	bx,#_vgafont16alt
26558 6C17           53                         push	bx
26559                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26560 6C18           FF76         08            push	8[bp]
26561                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26562 6C1B           FF76         FE            push	-2[bp]
26563                                           ! Debug: func () void = write_word+0 (used reg = )
26564 6C1E           E8         1189            call	_write_word
26565 6C21           83C4                   06  add	sp,*6
26566                                           !BCC_EOS
26567                                           ! 3666     break;
26568 6C24           EB           3B            jmp .23D
26569                                           !BCC_EOS
26570                                           ! 3667    default:
26571                                           ! 3668      printf("Get font info BH(%02x)
26572                       00006C26            .248:
26573                                           ! 3668  was discarded\n",BH);
26574                                           ! Debug: list unsigned char BH = [S+4+2] (used reg = )
26575 6C26           8A46         04            mov	al,4[bp]
26576 6C29           30E4                       xor	ah,ah
26577 6C2B           50                         push	ax
26578                                           ! Debug: list * char = .249+0 (used reg = )
26579 6C2C           BB                   A10F  mov	bx,#.249
26580 6C2F           53                         push	bx
26581                                           ! Debug: func () void = printf+0 (used reg = )
26582 6C30           E8         11E4            call	_printf
26583 6C33           83C4                   04  add	sp,*4
26584                                           !BCC_EOS
26585                                           ! 3669     return;
26586 6C36           89EC                       mov	sp,bp
26587 6C38           5D                         pop	bp
26588 6C39           C3                         ret
26589                                           !BCC_EOS
26590                                           ! 3670   }
26591                                           ! 3671  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26592 6C3A           EB           25            jmp .23D
26593                       00006C3C            .23F:
26594 6C3C           2C                     00  sub	al,*0
26595 6C3E           72           E6            jb 	.248
26596 6C40           3C                     07  cmp	al,*7
26597 6C42           77           1B            ja  	.24A
26598 6C44           30E4                       xor	ah,ah
26599 6C46           D1E0                       shl	ax,*1
26600 6C48           89C3                       mov	bx,ax
26601 6C4A           2E                         seg	cs
26602 6C4B           FFA7       6C4F            br	.24B[bx]
26603                       00006C4F            .24B:
26604 6C4F                      6AE8            .word	.240
26605 6C51                      6B1F            .word	.241
26606 6C53                      6B56            .word	.242
26607 6C55                      6B79            .word	.243
26608 6C57                      6B9C            .word	.244
26609 6C59                      6BBF            .word	.245
26610 6C5B                      6BE2            .word	.246
26611 6C5D                      6C04            .word	.247
26612                       00006C5F            .24A:
26613 6C5F           EB           C5            jmp	.248
26614                       00006C61            .23D:
26615                       FFFFFFFC            ..FFF5	=	-4
26616                                           ! Debug: list int = const $85 (used reg = )
26617 6C61           B8                   0085  mov	ax,#$85
26618 6C64           50                         push	ax
26619                                           ! Debug: list int = const $40 (used reg = )
26620 6C65           B8                   0040  mov	ax,*$40
26621 6C68           50                         push	ax
26622                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26623 6C69           E8         1100            call	_read_byte
26624 6C6C           83C4                   04  add	sp,*4
26625                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26626 6C6F           30E4                       xor	ah,ah
26627                                           ! Debug: list unsigned short = ax+0 (used reg = )
26628 6C71           50                         push	ax
26629                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26630 6C72           FF76         0A            push	$A[bp]
26631                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26632 6C75           FF76         FE            push	-2[bp]
26633                                           ! Debug: func () void = write_word+0 (used reg = )
26634 6C78           E8         112F            call	_write_word
26635 6C7B           83C4                   06  add	sp,*6
26636                                           !BCC_EOS
26637                                           ! 3672  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26638                                           ! Debug: list int = const $84 (used reg = )
26639 6C7E           B8                   0084  mov	ax,#$84
26640 6C81           50                         push	ax
26641                                           ! Debug: list int = const $40 (used reg = )
26642 6C82           B8                   0040  mov	ax,*$40
26643 6C85           50                         push	ax
26644                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26645 6C86           E8         10E3            call	_read_byte
26646 6C89           83C4                   04  add	sp,*4
26647                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26648 6C8C           30E4                       xor	ah,ah
26649                                           ! Debug: list unsigned short = ax+0 (used reg = )
26650 6C8E           50                         push	ax
26651                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26652 6C8F           FF76         0C            push	$C[bp]
26653                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26654 6C92           FF76         FE            push	-2[bp]
26655                                           ! Debug: func () void = write_word+0 (used reg = )
26656 6C95           E8         1112            call	_write_word
26657 6C98           83C4                   06  add	sp,*6
26658                                           !BCC_EOS
26659                                           ! 3673 }
26660 6C9B           89EC                       mov	sp,bp
26661 6C9D           5D                         pop	bp
26662 6C9E           C3                         ret
26663                                           ! 3674 #asm
26664                                           !BCC_ASM
26665                       00000006            _biosfn_get_font_info.BP	set	6
26666                       00000002            _biosfn_get_font_info.BH	set	2
26667                       00000008            _biosfn_get_font_info.CX	set	8
26668                       0000000A            _biosfn_get_font_info.DX	set	$A
26669                       00000004            _biosfn_get_font_info.ES	set	4
26670                       00006C9F            biosfn_get_ega_info:
26671 6C9F           1E                           push ds
26672 6CA0           50                           push ax
26673 6CA1           B8                   0040    mov ax, # 0x40
26674 6CA4           8ED8                         mov ds, ax
26675 6CA6           30ED                         xor ch, ch
26676 6CA8           BB                   0088    mov bx, # 0x88
26677 6CAB           8A0F                         mov cl, [bx]
26678 6CAD           80E1                   0F    and cl, #0x0f
26679 6CB0           BB                   0063    mov bx, # 0x63
26680 6CB3           8B07                         mov ax, [bx]
26681 6CB5           BB                   0003    mov bx, #0x0003
26682 6CB8           3D                   03B4    cmp ax, # 0x3b4
26683 6CBB           75           02              jne mode_ega_color
26684 6CBD           B7                     01    mov bh, #0x01
26685                       00006CBF            mode_ega_color:
26686 6CBF           58                           pop ax
26687 6CC0           1F                           pop ds
26688 6CC1           C3                           ret
26689                                           ! 3694 endasm
26690                                           !BCC_ENDASM
26691                                           ! 3695 static void biosfn_alternate_prtsc()
26692                                           ! Register BX used in function biosfn_get_font_info
26693                                           ! 3696 {
26694                       00006CC2            _biosfn_alternate_prtsc:
26695                                           ! 3697  unimplemented();
26696 6CC2           55                         push	bp
26697 6CC3           89E5                       mov	bp,sp
26698                                           ! Debug: func () void = unimplemented+0 (used reg = )
26699 6CC5           E8         1133            call	_unimplemented
26700                                           !BCC_EOS
26701                                           ! 3698 }
26702 6CC8           5D                         pop	bp
26703 6CC9           C3                         ret
26704                                           ! 3699 #asm
26705                                           !BCC_ASM
26706                       00006CCA            biosfn_select_vert_res:
26707                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26708 6CCA           1E                           push ds
26709 6CCB           53                           push bx
26710 6CCC           52                           push dx
26711 6CCD           88C2                         mov dl, al
26712 6CCF           B8                   0040    mov ax, # 0x40
26713 6CD2           8ED8                         mov ds, ax
26714 6CD4           BB                   0089    mov bx, # 0x89
26715 6CD7           8A07                         mov al, [bx]
26716 6CD9           BB                   0088    mov bx, # 0x88
26717 6CDC           8A27                         mov ah, [bx]
26718 6CDE           80FA                   01    cmp dl, #0x01
26719 6CE1           74           24              je vert_res_350
26720 6CE3           72           2C              jb vert_res_200
26721 6CE5           80FA                   02    cmp dl, #0x02
26722 6CE8           74           11              je vert_res_400
26723 6CEA           88D0                         mov al, dl
26724 6CEC           30E4                         xor ah, ah
26725 6CEE           50                           push ax
26726 6CEF           BB                   6D2C    mov bx, #msg_vert_res
26727 6CF2           53                           push bx
26728 6CF3           E8         1121              call _printf
26729 6CF6           83C4                   04    add sp, #4
26730 6CF9           EB           2A              jmp set_retcode
26731                       00006CFB            vert_res_400:
26732                                             ; reset modeset ctl bit 7 and set bit 4
26733                                             ; set switches bit 3-0 to 0x09
26734 6CFB           24                     7F    and al, #0x7f
26735 6CFD           0C                     10    or al, #0x10
26736 6CFF           80E4                   F0    and ah, #0xf0
26737 6D02           80CC                   09    or ah, #0x09
26738 6D05           75           14              jnz set_vert_res
26739                       00006D07            vert_res_350:
26740                                             ; reset modeset ctl bit 7 and bit 4
26741                                             ; set switches bit 3-0 to 0x09
26742 6D07           24                     6F    and al, #0x6f
26743 6D09           80E4                   F0    and ah, #0xf0
26744 6D0C           80CC                   09    or ah, #0x09
26745 6D0F           75           0A              jnz set_vert_res
26746                       00006D11            vert_res_200:
26747                                             ; set modeset ctl bit 7 and reset bit 4
26748                                             ; set switches bit 3-0 to 0x08
26749 6D11           24                     EF    and al, #0xef
26750 6D13           0C                     80    or al, #0x80
26751 6D15           80E4                   F0    and ah, #0xf0
26752 6D18           80CC                   08    or ah, #0x08
26753                       00006D1B            set_vert_res:
26754 6D1B           BB                   0089    mov bx, # 0x89
26755 6D1E           8807                         mov [bx], al
26756 6D20           BB                   0088    mov bx, # 0x88
26757 6D23           8827                         mov [bx], ah
26758                       00006D25            set_retcode:
26759 6D25           B8                   1212    mov ax, #0x1212
26760 6D28           5A                           pop dx
26761 6D29           5B                           pop bx
26762 6D2A           1F                           pop ds
26763 6D2B           C3                           ret
26764                       00006D2C            msg_vert_res:
26765 6D2C                        53            .ascii "Select vert res (%02x) was discarded"
26766 6D50                        0D            .byte 0x0d,0x0a,0x00
26767                       00006D53            biosfn_enable_default_palette_loading:
26768 6D53           1E                           push ds
26769 6D54           53                           push bx
26770 6D55           52                           push dx
26771 6D56           88C2                         mov dl, al
26772 6D58           80E2                   01    and dl, #0x01
26773 6D5B           C0E2                   03    shl dl, 3
26774 6D5E           B8                   0040    mov ax, # 0x40
26775 6D61           8ED8                         mov ds, ax
26776 6D63           BB                   0089    mov bx, # 0x89
26777 6D66           8A07                         mov al, [bx]
26778 6D68           24                     F7    and al, #0xf7
26779 6D6A           08D0                         or al, dl
26780 6D6C           8807                         mov [bx], al
26781 6D6E           B8                   1212    mov ax, #0x1212
26782 6D71           5A                           pop dx
26783 6D72           5B                           pop bx
26784 6D73           1F                           pop ds
26785 6D74           C3                           ret
26786                       00006D75            biosfn_enable_video_addressing:
26787 6D75           53                           push bx
26788 6D76           52                           push dx
26789 6D77           88C3                         mov bl, al
26790 6D79           80E3                   01    and bl, #0x01
26791 6D7C           80F3                   01    xor bl, #0x01
26792 6D7F           D0E3                         shl bl, 1
26793 6D81           BA                   03CC    mov dx, # 0x3cc
26794 6D84           EC                           in al, dx
26795 6D85           24                     FD    and al, #0xfd
26796 6D87           08D8                         or al, bl
26797 6D89           BA                   03C2    mov dx, # 0x3c2
26798 6D8C           EE                           out dx, al
26799 6D8D           B8                   1212    mov ax, #0x1212
26800 6D90           5A                           pop dx
26801 6D91           5B                           pop bx
26802 6D92           C3                           ret
26803                       00006D93            biosfn_enable_grayscale_summing:
26804 6D93           1E                           push ds
26805 6D94           53                           push bx
26806 6D95           52                           push dx
26807 6D96           88C2                         mov dl, al
26808 6D98           80E2                   01    and dl, #0x01
26809 6D9B           80F2                   01    xor dl, #0x01
26810 6D9E           D0E2                         shl dl, 1
26811 6DA0           B8                   0040    mov ax, # 0x40
26812 6DA3           8ED8                         mov ds, ax
26813 6DA5           BB                   0089    mov bx, # 0x89
26814 6DA8           8A07                         mov al, [bx]
26815 6DAA           24                     FD    and al, #0xfd
26816 6DAC           08D0                         or al, dl
26817 6DAE           8807                         mov [bx], al
26818 6DB0           B8                   1212    mov ax, #0x1212
26819 6DB3           5A                           pop dx
26820 6DB4           5B                           pop bx
26821 6DB5           1F                           pop ds
26822 6DB6           C3                           ret
26823                       00006DB7            biosfn_enable_cursor_emulation:
26824 6DB7           1E                           push ds
26825 6DB8           53                           push bx
26826 6DB9           52                           push dx
26827 6DBA           88C2                         mov dl, al
26828 6DBC           80E2                   01    and dl, #0x01
26829 6DBF           80F2                   01    xor dl, #0x01
26830 6DC2           B8                   0040    mov ax, # 0x40
26831 6DC5           8ED8                         mov ds, ax
26832 6DC7           BB                   0089    mov bx, # 0x89
26833 6DCA           8A07                         mov al, [bx]
26834 6DCC           24                     FE    and al, #0xfe
26835 6DCE           08D0                         or al, dl
26836 6DD0           8807                         mov [bx], al
26837 6DD2           B8                   1212    mov ax, #0x1212
26838 6DD5           5A                           pop dx
26839 6DD6           5B                           pop bx
26840 6DD7           1F                           pop ds
26841 6DD8           C3                           ret
26842                                           ! 3836 endasm
26843                                           !BCC_ENDASM
26844                                           ! 3837 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26845                       00006DD9            _biosfn_switch_video_interface:
26846                                           !BCC_EOS
26847                                           !BCC_EOS
26848                                           !BCC_EOS
26849                                           ! 3838 {
26850                                           ! 3839  unimplemented();
26851 6DD9           55                         push	bp
26852 6DDA           89E5                       mov	bp,sp
26853                                           ! Debug: func () void = unimplemented+0 (used reg = )
26854 6DDC           E8         101C            call	_unimplemented
26855                                           !BCC_EOS
26856                                           ! 3840 }
26857 6DDF           5D                         pop	bp
26858 6DE0           C3                         ret
26859                                           ! 3841 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26860                       00006DE1            _biosfn_enable_video_refresh_control:
26861                                           !BCC_EOS
26862                                           ! 3842 {
26863                                           ! 3843  unimplemented();
26864 6DE1           55                         push	bp
26865 6DE2           89E5                       mov	bp,sp
26866                                           ! Debug: func () void = unimplemented+0 (used reg = )
26867 6DE4           E8         1014            call	_unimplemented
26868                                           !BCC_EOS
26869                                           ! 3844 }
26870 6DE7           5D                         pop	bp
26871 6DE8           C3                         ret
26872                                           ! 3845 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26873                                           ! 3846 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26874                       00006DE9            _biosfn_write_string:
26875                                           !BCC_EOS
26876                                           !BCC_EOS
26877                                           !BCC_EOS
26878                                           !BCC_EOS
26879                                           !BCC_EOS
26880                                           !BCC_EOS
26881                                           !BCC_EOS
26882                                           !BCC_EOS
26883                                           ! 3847 {
26884                                           ! 3848  Bit16u newcurs,oldcurs,dummy;
26885                                           !BCC_EOS
26886                                           ! 3849  Bit8u car,carattr;
26887                                           !BCC_EOS
26888                                           ! 3850  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26889 6DE9           55                         push	bp
26890 6DEA           89E5                       mov	bp,sp
26891 6DEC           83C4                   F8  add	sp,*-8
26892                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26893 6DEF           8D5E         FC            lea	bx,-4[bp]
26894 6DF2           53                         push	bx
26895                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26896 6DF3           8D5E         FA            lea	bx,-6[bp]
26897 6DF6           53                         push	bx
26898                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26899 6DF7           8A46         06            mov	al,6[bp]
26900 6DFA           30E4                       xor	ah,ah
26901 6DFC           50                         push	ax
26902                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26903 6DFD           E8         D6B6            call	_biosfn_get_cursor_pos
26904 6E00           83C4                   06  add	sp,*6
26905                                           !BCC_EOS
26906                                           ! 3851  if(row==0xff)
26907                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26908 6E03           8A46         0C            mov	al,$C[bp]
26909 6E06           3C                     FF  cmp	al,#$FF
26910 6E08           75           12            jne 	.24C
26911                       00006E0A            .24D:
26912                                           ! 3852   {col=oldcurs&0x00ff;
26913                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26914 6E0A           8A46         FC            mov	al,-4[bp]
26915                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26916 6E0D           8846         0E            mov	$E[bp],al
26917                                           !BCC_EOS
26918                                           ! 3853    row=(oldcurs&0xff00)>>8;
26919                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26920 6E10           8B46         FC            mov	ax,-4[bp]
26921 6E13           30C0                       xor	al,al
26922                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26923 6E15           88E0                       mov	al,ah
26924 6E17           30E4                       xor	ah,ah
26925                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26926 6E19           8846         0C            mov	$C[bp],al
26927                                           !BCC_EOS
26928                                           ! 3854   }
26929                                           ! 3855  newcurs=row; newcurs<<=8; newcurs+=col;
26930                       00006E1C            .24C:
26931                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26932 6E1C           8A46         0C            mov	al,$C[bp]
26933 6E1F           30E4                       xor	ah,ah
26934 6E21           8946         FE            mov	-2[bp],ax
26935                                           !BCC_EOS
26936                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26937 6E24           8B46         FE            mov	ax,-2[bp]
26938 6E27           88C4                       mov	ah,al
26939 6E29           30C0                       xor	al,al
26940 6E2B           8946         FE            mov	-2[bp],ax
26941                                           !BCC_EOS
26942                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26943 6E2E           8B46         FE            mov	ax,-2[bp]
26944 6E31           0246         0E            add	al,$E[bp]
26945 6E34           80D4                   00  adc	ah,*0
26946 6E37           8946         FE            mov	-2[bp],ax
26947                                           !BCC_EOS
26948                                           ! 3856  biosfn_set_cursor_pos(page,newcurs);
26949                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26950 6E3A           FF76         FE            push	-2[bp]
26951                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26952 6E3D           8A46         06            mov	al,6[bp]
26953 6E40           30E4                       xor	ah,ah
26954 6E42           50                         push	ax
26955                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26956 6E43           E8         D570            call	_biosfn_set_cursor_pos
26957 6E46           83C4                   04  add	sp,*4
26958                                           !BCC_EOS
26959                                           ! 3857  while(count--!=0)
26960                                           ! 3858   {
26961 6E49           EB           4F            jmp .24F
26962                       00006E4B            .250:
26963                                           ! 3859    car=read_byte(seg,offset++);
26964                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26965 6E4B           8B46         12            mov	ax,$12[bp]
26966 6E4E           40                         inc	ax
26967 6E4F           8946         12            mov	$12[bp],ax
26968                                           ! Debug: list unsigned short = ax-1 (used reg = )
26969 6E52           48                         dec	ax
26970 6E53           50                         push	ax
26971                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26972 6E54           FF76         10            push	$10[bp]
26973                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26974 6E57           E8         0F12            call	_read_byte
26975 6E5A           83C4                   04  add	sp,*4
26976                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26977 6E5D           8846         F9            mov	-7[bp],al
26978                                           !BCC_EOS
26979                                           ! 3860    if((flag&0x02)!=0)
26980                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26981 6E60           8A46         04            mov	al,4[bp]
26982 6E63           24                     02  and	al,*2
26983                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26984 6E65           84C0                       test	al,al
26985 6E67           74           15            je  	.251
26986                       00006E69            .252:
26987                                           ! 3861     attr=read_byte(seg,offset++);
26988                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26989 6E69           8B46         12            mov	ax,$12[bp]
26990 6E6C           40                         inc	ax
26991 6E6D           8946         12            mov	$12[bp],ax
26992                                           ! Debug: list unsigned short = ax-1 (used reg = )
26993 6E70           48                         dec	ax
26994 6E71           50                         push	ax
26995                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26996 6E72           FF76         10            push	$10[bp]
26997                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26998 6E75           E8         0EF4            call	_read_byte
26999 6E78           83C4                   04  add	sp,*4
27000                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
27001 6E7B           8846         08            mov	8[bp],al
27002                                           !BCC_EOS
27003                                           ! 3862    biosfn_write_teletype(car,page,attr,3);
27004                       00006E7E            .251:
27005                                           ! Debug: list int = const 3 (used reg = )
27006 6E7E           B8                   0003  mov	ax,*3
27007 6E81           50                         push	ax
27008                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
27009 6E82           8A46         08            mov	al,8[bp]
27010 6E85           30E4                       xor	ah,ah
27011 6E87           50                         push	ax
27012                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
27013 6E88           8A46         06            mov	al,6[bp]
27014 6E8B           30E4                       xor	ah,ah
27015 6E8D           50                         push	ax
27016                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
27017 6E8E           8A46         F9            mov	al,-7[bp]
27018 6E91           30E4                       xor	ah,ah
27019 6E93           50                         push	ax
27020                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
27021 6E94           E8         F0B7            call	_biosfn_write_teletype
27022 6E97           83C4                   08  add	sp,*8
27023                                           !BCC_EOS
27024                                           ! 3863   }
27025                                           ! 3864  if((flag&0x01)==0)
27026                       00006E9A            .24F:
27027                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
27028 6E9A           8B46         0A            mov	ax,$A[bp]
27029 6E9D           48                         dec	ax
27030 6E9E           8946         0A            mov	$A[bp],ax
27031                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
27032 6EA1           3D                   FFFF  cmp	ax,*-1
27033 6EA4           75           A5            jne	.250
27034                       00006EA6            .253:
27035                       00006EA6            .24E:
27036                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
27037 6EA6           8A46         04            mov	al,4[bp]
27038 6EA9           24                     01  and	al,*1
27039                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
27040 6EAB           84C0                       test	al,al
27041 6EAD           75           0F            jne 	.254
27042                       00006EAF            .255:
27043                                           ! 3865   biosfn_set_cursor_pos(page,oldcurs);
27044                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
27045 6EAF           FF76         FC            push	-4[bp]
27046                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
27047 6EB2           8A46         06            mov	al,6[bp]
27048 6EB5           30E4                       xor	ah,ah
27049 6EB7           50                         push	ax
27050                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
27051 6EB8           E8         D4FB            call	_biosfn_set_cursor_pos
27052 6EBB           83C4                   04  add	sp,*4
27053                                           !BCC_EOS
27054                                           ! 3866 }
27055                       00006EBE            .254:
27056 6EBE           89EC                       mov	sp,bp
27057 6EC0           5D                         pop	bp
27058 6EC1           C3                         ret
27059                                           ! 3867 #asm
27060                                           !BCC_ASM
27061                       00000008            _biosfn_write_string.count	set	8
27062                       0000000E            _biosfn_write_string.seg	set	$E
27063                       0000000C            _biosfn_write_string.col	set	$C
27064                       00000002            _biosfn_write_string.flag	set	2
27065                       00000006            _biosfn_write_string.attr	set	6
27066                       00000004            _biosfn_write_string.page	set	4
27067                       0000000A            _biosfn_write_string.row	set	$A
27068                       00000010            _biosfn_write_string.offset	set	$10
27069                       00006EC2            biosfn_group_1A:
27070 6EC2           3C                     00    cmp al, #0x00
27071 6EC4           74           08              je biosfn_read_display_code
27072 6EC6           3C                     01    cmp al, #0x01
27073 6EC8           74           19              je biosfn_set_display_code
27074 6ECA           E8         0F3C              call _unknown
27075 6ECD           C3                           ret
27076                       00006ECE            biosfn_read_display_code:
27077 6ECE           1E                           push ds
27078 6ECF           50                           push ax
27079 6ED0           B8                   0040    mov ax, # 0x40
27080 6ED3           8ED8                         mov ds, ax
27081 6ED5           BB                   008A    mov bx, # 0x8A
27082 6ED8           8A07                         mov al, [bx]
27083 6EDA           88C3                         mov bl, al
27084 6EDC           30FF                         xor bh, bh
27085 6EDE           58                           pop ax
27086 6EDF           88E0                         mov al, ah
27087 6EE1           1F                           pop ds
27088 6EE2           C3                           ret
27089                       00006EE3            biosfn_set_display_code:
27090 6EE3           1E                           push ds
27091 6EE4           50                           push ax
27092 6EE5           53                           push bx
27093 6EE6           B8                   0040    mov ax, # 0x40
27094 6EE9           8ED8                         mov ds, ax
27095 6EEB           89D8                         mov ax, bx
27096 6EED           BB                   008A    mov bx, # 0x8A
27097 6EF0           8807                         mov [bx], al
27098 6EF2           88E0                         mov al, ah
27099 6EF4           30E4                         xor ah, ah
27100 6EF6           50                           push ax
27101 6EF7           BB                   6F07    mov bx, #msg_alt_dcc
27102 6EFA           53                           push bx
27103 6EFB           E8         0F19              call _printf
27104 6EFE           83C4                   04    add sp, #4
27105 6F01           5B                           pop bx
27106 6F02           58                           pop ax
27107 6F03           88E0                         mov al, ah
27108 6F05           1F                           pop ds
27109 6F06           C3                           ret
27110                       00006F07            msg_alt_dcc:
27111 6F07                        41            .ascii "Alternate Display code (%02x) was discarded"
27112 6F32                        0D            .byte 0x0d,0x0a,0x00
27113                                           ! 3912 endasm
27114                                           !BCC_ENDASM
27115                                           ! 3913 static void biosfn_read_state_info (BX,ES,DI)
27116                                           ! Register BX used in function biosfn_write_string
27117                                           ! 3914 Bit16u BX;Bit16u ES;Bit16u DI;
27118                       00006F35            _biosfn_read_state_info:
27119                                           !BCC_EOS
27120                                           !BCC_EOS
27121                                           !BCC_EOS
27122                                           ! 3915 {
27123                                           ! 3916  write_word(ES,DI+0x00,&static_functionality);
27124 6F35           55                         push	bp
27125 6F36           89E5                       mov	bp,sp
27126                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
27127 6F38           BB                   0F58  mov	bx,#_static_functionality
27128 6F3B           53                         push	bx
27129                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
27130 6F3C           8B46         08            mov	ax,8[bp]
27131                                           ! Debug: list unsigned int = ax+0 (used reg = )
27132 6F3F           50                         push	ax
27133                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27134 6F40           FF76         06            push	6[bp]
27135                                           ! Debug: func () void = write_word+0 (used reg = )
27136 6F43           E8         0E64            call	_write_word
27137 6F46           89EC                       mov	sp,bp
27138                                           !BCC_EOS
27139                                           ! 3917  write_word(ES,DI+0x02,0xC000);
27140                                           ! Debug: list unsigned int = const $C000 (used reg = )
27141 6F48           B8                   C000  mov	ax,#$C000
27142 6F4B           50                         push	ax
27143                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
27144 6F4C           8B46         08            mov	ax,8[bp]
27145                                           ! Debug: list unsigned int = ax+2 (used reg = )
27146 6F4F           40                         inc	ax
27147 6F50           40                         inc	ax
27148 6F51           50                         push	ax
27149                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27150 6F52           FF76         06            push	6[bp]
27151                                           ! Debug: func () void = write_word+0 (used reg = )
27152 6F55           E8         0E52            call	_write_word
27153 6F58           89EC                       mov	sp,bp
27154                                           !BCC_EOS
27155                                           ! 3918  memcpyb(ES,DI+0x04,0x40,0x49,30);
27156                                           ! Debug: list int = const $1E (used reg = )
27157 6F5A           B8                   001E  mov	ax,*$1E
27158 6F5D           50                         push	ax
27159                                           ! Debug: list int = const $49 (used reg = )
27160 6F5E           B8                   0049  mov	ax,*$49
27161 6F61           50                         push	ax
27162                                           ! Debug: list int = const $40 (used reg = )
27163 6F62           B8                   0040  mov	ax,*$40
27164 6F65           50                         push	ax
27165                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
27166 6F66           8B46         08            mov	ax,8[bp]
27167                                           ! Debug: list unsigned int = ax+4 (used reg = )
27168 6F69           05                   0004  add	ax,*4
27169 6F6C           50                         push	ax
27170                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27171 6F6D           FF76         06            push	6[bp]
27172                                           ! Debug: func () void = memcpyb+0 (used reg = )
27173 6F70           E8         0D99            call	_memcpyb
27174 6F73           89EC                       mov	sp,bp
27175                                           !BCC_EOS
27176                                           ! 3919  memcpyb(ES,DI+0x22,0x40,0x84,3);
27177                                           ! Debug: list int = const 3 (used reg = )
27178 6F75           B8                   0003  mov	ax,*3
27179 6F78           50                         push	ax
27180                                           ! Debug: list int = const $84 (used reg = )
27181 6F79           B8                   0084  mov	ax,#$84
27182 6F7C           50                         push	ax
27183                                           ! Debug: list int = const $40 (used reg = )
27184 6F7D           B8                   0040  mov	ax,*$40
27185 6F80           50                         push	ax
27186                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
27187 6F81           8B46         08            mov	ax,8[bp]
27188                                           ! Debug: list unsigned int = ax+$22 (used reg = )
27189 6F84           05                   0022  add	ax,*$22
27190 6F87           50                         push	ax
27191                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27192 6F88           FF76         06            push	6[bp]
27193                                           ! Debug: func () void = memcpyb+0 (used reg = )
27194 6F8B           E8         0D7E            call	_memcpyb
27195 6F8E           89EC                       mov	sp,bp
27196                                           !BCC_EOS
27197                                           ! 3920  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
27198                                           ! Debug: list int = const $8A (used reg = )
27199 6F90           B8                   008A  mov	ax,#$8A
27200 6F93           50                         push	ax
27201                                           ! Debug: list int = const $40 (used reg = )
27202 6F94           B8                   0040  mov	ax,*$40
27203 6F97           50                         push	ax
27204                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27205 6F98           E8         0DD1            call	_read_byte
27206 6F9B           89EC                       mov	sp,bp
27207                                           ! Debug: list unsigned char = al+0 (used reg = )
27208 6F9D           30E4                       xor	ah,ah
27209 6F9F           50                         push	ax
27210                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
27211 6FA0           8B46         08            mov	ax,8[bp]
27212                                           ! Debug: list unsigned int = ax+$25 (used reg = )
27213 6FA3           05                   0025  add	ax,*$25
27214 6FA6           50                         push	ax
27215                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27216 6FA7           FF76         06            push	6[bp]
27217                                           ! Debug: func () void = write_byte+0 (used reg = )
27218 6FAA           E8         0DE5            call	_write_byte
27219 6FAD           89EC                       mov	sp,bp
27220                                           !BCC_EOS
27221                                           ! 3921  write_byte(ES,DI+0x26,0);
27222                                           ! Debug: list int = const 0 (used reg = )
27223 6FAF           31C0                       xor	ax,ax
27224 6FB1           50                         push	ax
27225                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
27226 6FB2           8B46         08            mov	ax,8[bp]
27227                                           ! Debug: list unsigned int = ax+$26 (used reg = )
27228 6FB5           05                   0026  add	ax,*$26
27229 6FB8           50                         push	ax
27230                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27231 6FB9           FF76         06            push	6[bp]
27232                                           ! Debug: func () void = write_byte+0 (used reg = )
27233 6FBC           E8         0DD3            call	_write_byte
27234 6FBF           89EC                       mov	sp,bp
27235                                           !BCC_EOS
27236                                           ! 3922  write_byte(ES,DI+0x27,16);
27237                                           ! Debug: list int = const $10 (used reg = )
27238 6FC1           B8                   0010  mov	ax,*$10
27239 6FC4           50                         push	ax
27240                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
27241 6FC5           8B46         08            mov	ax,8[bp]
27242                                           ! Debug: list unsigned int = ax+$27 (used reg = )
27243 6FC8           05                   0027  add	ax,*$27
27244 6FCB           50                         push	ax
27245                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27246 6FCC           FF76         06            push	6[bp]
27247                                           ! Debug: func () void = write_byte+0 (used reg = )
27248 6FCF           E8         0DC0            call	_write_byte
27249 6FD2           89EC                       mov	sp,bp
27250                                           !BCC_EOS
27251                                           ! 3923  write_byte(ES,DI+0x28,0);
27252                                           ! Debug: list int = const 0 (used reg = )
27253 6FD4           31C0                       xor	ax,ax
27254 6FD6           50                         push	ax
27255                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
27256 6FD7           8B46         08            mov	ax,8[bp]
27257                                           ! Debug: list unsigned int = ax+$28 (used reg = )
27258 6FDA           05                   0028  add	ax,*$28
27259 6FDD           50                         push	ax
27260                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27261 6FDE           FF76         06            push	6[bp]
27262                                           ! Debug: func () void = write_byte+0 (used reg = )
27263 6FE1           E8         0DAE            call	_write_byte
27264 6FE4           89EC                       mov	sp,bp
27265                                           !BCC_EOS
27266                                           ! 3924  write_byte(ES,DI+0x29,8);
27267                                           ! Debug: list int = const 8 (used reg = )
27268 6FE6           B8                   0008  mov	ax,*8
27269 6FE9           50                         push	ax
27270                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
27271 6FEA           8B46         08            mov	ax,8[bp]
27272                                           ! Debug: list unsigned int = ax+$29 (used reg = )
27273 6FED           05                   0029  add	ax,*$29
27274 6FF0           50                         push	ax
27275                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27276 6FF1           FF76         06            push	6[bp]
27277                                           ! Debug: func () void = write_byte+0 (used reg = )
27278 6FF4           E8         0D9B            call	_write_byte
27279 6FF7           89EC                       mov	sp,bp
27280                                           !BCC_EOS
27281                                           ! 3925  write_byte(ES,DI+0x2a,2);
27282                                           ! Debug: list int = const 2 (used reg = )
27283 6FF9           B8                   0002  mov	ax,*2
27284 6FFC           50                         push	ax
27285                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27286 6FFD           8B46         08            mov	ax,8[bp]
27287                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27288 7000           05                   002A  add	ax,*$2A
27289 7003           50                         push	ax
27290                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27291 7004           FF76         06            push	6[bp]
27292                                           ! Debug: func () void = write_byte+0 (used reg = )
27293 7007           E8         0D88            call	_write_byte
27294 700A           89EC                       mov	sp,bp
27295                                           !BCC_EOS
27296                                           ! 3926  write_byte(ES,DI+0x2b,0);
27297                                           ! Debug: list int = const 0 (used reg = )
27298 700C           31C0                       xor	ax,ax
27299 700E           50                         push	ax
27300                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27301 700F           8B46         08            mov	ax,8[bp]
27302                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27303 7012           05                   002B  add	ax,*$2B
27304 7015           50                         push	ax
27305                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27306 7016           FF76         06            push	6[bp]
27307                                           ! Debug: func () void = write_byte+0 (used reg = )
27308 7019           E8         0D76            call	_write_byte
27309 701C           89EC                       mov	sp,bp
27310                                           !BCC_EOS
27311                                           ! 3927  write_byte(ES,DI+0x2c,0);
27312                                           ! Debug: list int = const 0 (used reg = )
27313 701E           31C0                       xor	ax,ax
27314 7020           50                         push	ax
27315                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27316 7021           8B46         08            mov	ax,8[bp]
27317                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27318 7024           05                   002C  add	ax,*$2C
27319 7027           50                         push	ax
27320                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27321 7028           FF76         06            push	6[bp]
27322                                           ! Debug: func () void = write_byte+0 (used reg = )
27323 702B           E8         0D64            call	_write_byte
27324 702E           89EC                       mov	sp,bp
27325                                           !BCC_EOS
27326                                           ! 3928  write_byte(ES,DI+0x31,3);
27327                                           ! Debug: list int = const 3 (used reg = )
27328 7030           B8                   0003  mov	ax,*3
27329 7033           50                         push	ax
27330                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27331 7034           8B46         08            mov	ax,8[bp]
27332                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27333 7037           05                   0031  add	ax,*$31
27334 703A           50                         push	ax
27335                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27336 703B           FF76         06            push	6[bp]
27337                                           ! Debug: func () void = write_byte+0 (used reg = )
27338 703E           E8         0D51            call	_write_byte
27339 7041           89EC                       mov	sp,bp
27340                                           !BCC_EOS
27341                                           ! 3929  write_byte(ES,DI+0x32,0);
27342                                           ! Debug: list int = const 0 (used reg = )
27343 7043           31C0                       xor	ax,ax
27344 7045           50                         push	ax
27345                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27346 7046           8B46         08            mov	ax,8[bp]
27347                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27348 7049           05                   0032  add	ax,*$32
27349 704C           50                         push	ax
27350                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27351 704D           FF76         06            push	6[bp]
27352                                           ! Debug: func () void = write_byte+0 (used reg = )
27353 7050           E8         0D3F            call	_write_byte
27354 7053           89EC                       mov	sp,bp
27355                                           !BCC_EOS
27356                                           ! 3930  memsetb(ES,DI+0x33,0,13);
27357                                           ! Debug: list int = const $D (used reg = )
27358 7055           B8                   000D  mov	ax,*$D
27359 7058           50                         push	ax
27360                                           ! Debug: list int = const 0 (used reg = )
27361 7059           31C0                       xor	ax,ax
27362 705B           50                         push	ax
27363                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27364 705C           8B46         08            mov	ax,8[bp]
27365                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27366 705F           05                   0033  add	ax,*$33
27367 7062           50                         push	ax
27368                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27369 7063           FF76         06            push	6[bp]
27370                                           ! Debug: func () void = memsetb+0 (used reg = )
27371 7066           E8         0C59            call	_memsetb
27372 7069           89EC                       mov	sp,bp
27373                                           !BCC_EOS
27374                                           ! 3931 }
27375 706B           5D                         pop	bp
27376 706C           C3                         ret
27377                                           ! 3932 static Bit16u biosfn_read_video_state_size2 (CX)
27378                                           ! Register BX used in function biosfn_read_state_info
27379                                           ! 3933      Bit16u CX;
27380                       0000706D            _biosfn_read_video_state_size2:
27381                                           !BCC_EOS
27382                                           ! 3934 {
27383                                           ! 3935     Bit16u size;
27384                                           !BCC_EOS
27385                                           ! 3936     size = 0;
27386 706D           55                         push	bp
27387 706E           89E5                       mov	bp,sp
27388 7070           4C                         dec	sp
27389 7071           4C                         dec	sp
27390                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27391 7072           31C0                       xor	ax,ax
27392 7074           8946         FE            mov	-2[bp],ax
27393                                           !BCC_EOS
27394                                           ! 3937     if (CX & 1) {
27395                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27396 7077           8A46         04            mov	al,4[bp]
27397 707A           24                     01  and	al,*1
27398 707C           84C0                       test	al,al
27399 707E           74           09            je  	.256
27400                       00007080            .257:
27401                                           ! 3938         size += 0x46;
27402                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27403 7080           8B46         FE            mov	ax,-2[bp]
27404 7083           05                   0046  add	ax,*$46
27405 7086           8946         FE            mov	-2[bp],ax
27406                                           !BCC_EOS
27407                                           ! 3939     }
27408                                           ! 3940     if (CX & 2) {
27409                       00007089            .256:
27410                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27411 7089           8A46         04            mov	al,4[bp]
27412 708C           24                     02  and	al,*2
27413 708E           84C0                       test	al,al
27414 7090           74           09            je  	.258
27415                       00007092            .259:
27416                                           ! 3941         size += (5 + 8 + 5) * 2 + 6;
27417                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27418 7092           8B46         FE            mov	ax,-2[bp]
27419 7095           05                   002A  add	ax,*$2A
27420 7098           8946         FE            mov	-2[bp],ax
27421                                           !BCC_EOS
27422                                           ! 3942     }
27423                                           ! 3943     if (CX & 4) {
27424                       0000709B            .258:
27425                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27426 709B           8A46         04            mov	al,4[bp]
27427 709E           24                     04  and	al,*4
27428 70A0           84C0                       test	al,al
27429 70A2           74           09            je  	.25A
27430                       000070A4            .25B:
27431                                           ! 3944         size += 3 + 256 * 3 + 1;
27432                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27433 70A4           8B46         FE            mov	ax,-2[bp]
27434 70A7           05                   0304  add	ax,#$304
27435 70AA           8946         FE            mov	-2[bp],ax
27436                                           !BCC_EOS
27437                                           ! 3945 }
27438                                           ! 3946     return size;
27439                       000070AD            .25A:
27440 70AD           8B46         FE            mov	ax,-2[bp]
27441 70B0           89EC                       mov	sp,bp
27442 70B2           5D                         pop	bp
27443 70B3           C3                         ret
27444                                           !BCC_EOS
27445                                           ! 3947 }
27446                                           ! 3948 static void biosfn_read_video_state_size (CX, BX)
27447                                           ! 3949      Bit16u CX; Bit16u *BX;
27448                       000070B4            _biosfn_read_video_state_size:
27449                                           !BCC_EOS
27450                                           !BCC_EOS
27451                                           ! 3950 {
27452                                           ! 3951     Bit16u ss=get_SS();
27453 70B4           55                         push	bp
27454 70B5           89E5                       mov	bp,sp
27455 70B7           4C                         dec	sp
27456 70B8           4C                         dec	sp
27457                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27458 70B9           E8         0D3C            call	_get_SS
27459                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27460 70BC           8946         FE            mov	-2[bp],ax
27461                                           !BCC_EOS
27462                                           ! 3952     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27463                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27464 70BF           FF76         04            push	4[bp]
27465                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27466 70C2           E8         FFA8            call	_biosfn_read_video_state_size2
27467 70C5           44                         inc	sp
27468 70C6           44                         inc	sp
27469                                           ! Debug: list unsigned short = ax+0 (used reg = )
27470 70C7           50                         push	ax
27471                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27472 70C8           FF76         06            push	6[bp]
27473                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27474 70CB           FF76         FE            push	-2[bp]
27475                                           ! Debug: func () void = write_word+0 (used reg = )
27476 70CE           E8         0CD9            call	_write_word
27477 70D1           83C4                   06  add	sp,*6
27478                                           !BCC_EOS
27479                                           ! 3953 }
27480 70D4           89EC                       mov	sp,bp
27481 70D6           5D                         pop	bp
27482 70D7           C3                         ret
27483                                           ! 3954 static Bit16u biosfn_save_video_state (CX,ES,BX)
27484                                           ! 3955      Bit16u CX;Bit16u ES;Bit16u BX;
27485                       000070D8            _biosfn_save_video_state:
27486                                           !BCC_EOS
27487                                           !BCC_EOS
27488                                           !BCC_EOS
27489                                           ! 3956 {
27490                                           ! 3957     Bit16u i, v, crtc_addr, ar_index;
27491                                           !BCC_EOS
27492                                           ! 3958     crtc_addr = read_word(0x40, 0x63);
27493 70D8           55                         push	bp
27494 70D9           89E5                       mov	bp,sp
27495 70DB           83C4                   F8  add	sp,*-8
27496                                           ! Debug: list int = const $63 (used reg = )
27497 70DE           B8                   0063  mov	ax,*$63
27498 70E1           50                         push	ax
27499                                           ! Debug: list int = const $40 (used reg = )
27500 70E2           B8                   0040  mov	ax,*$40
27501 70E5           50                         push	ax
27502                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27503 70E6           E8         0C96            call	_read_word
27504 70E9           83C4                   04  add	sp,*4
27505                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27506 70EC           8946         FA            mov	-6[bp],ax
27507                                           !BCC_EOS
27508                                           ! 3959     if (CX & 1) {
27509                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27510 70EF           8A46         04            mov	al,4[bp]
27511 70F2           24                     01  and	al,*1
27512 70F4           84C0                       test	al,al
27513 70F6         0F84         0266            beq 	.25C
27514                       000070FA            .25D:
27515                                           ! 3960         write_byte(ES, BX, inb(0x3c4)); BX++;
27516                                           ! Debug: list int = const $3C4 (used reg = )
27517 70FA           B8                   03C4  mov	ax,#$3C4
27518 70FD           50                         push	ax
27519                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27520 70FE           E8         0CC1            call	_inb
27521 7101           44                         inc	sp
27522 7102           44                         inc	sp
27523                                           ! Debug: list unsigned char = al+0 (used reg = )
27524 7103           30E4                       xor	ah,ah
27525 7105           50                         push	ax
27526                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27527 7106           FF76         08            push	8[bp]
27528                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27529 7109           FF76         06            push	6[bp]
27530                                           ! Debug: func () void = write_byte+0 (used reg = )
27531 710C           E8         0C83            call	_write_byte
27532 710F           83C4                   06  add	sp,*6
27533                                           !BCC_EOS
27534                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27535 7112           8B46         08            mov	ax,8[bp]
27536 7115           40                         inc	ax
27537 7116           8946         08            mov	8[bp],ax
27538                                           !BCC_EOS
27539                                           ! 3961         write_byte(ES, BX, inb(crtc_addr)); BX++;
27540                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27541 7119           FF76         FA            push	-6[bp]
27542                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27543 711C           E8         0CA3            call	_inb
27544 711F           44                         inc	sp
27545 7120           44                         inc	sp
27546                                           ! Debug: list unsigned char = al+0 (used reg = )
27547 7121           30E4                       xor	ah,ah
27548 7123           50                         push	ax
27549                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27550 7124           FF76         08            push	8[bp]
27551                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27552 7127           FF76         06            push	6[bp]
27553                                           ! Debug: func () void = write_byte+0 (used reg = )
27554 712A           E8         0C65            call	_write_byte
27555 712D           83C4                   06  add	sp,*6
27556                                           !BCC_EOS
27557                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27558 7130           8B46         08            mov	ax,8[bp]
27559 7133           40                         inc	ax
27560 7134           8946         08            mov	8[bp],ax
27561                                           !BCC_EOS
27562                                           ! 3962         write_byte(ES, BX, inb(0x3ce)); BX++;
27563                                           ! Debug: list int = const $3CE (used reg = )
27564 7137           B8                   03CE  mov	ax,#$3CE
27565 713A           50                         push	ax
27566                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27567 713B           E8         0C84            call	_inb
27568 713E           44                         inc	sp
27569 713F           44                         inc	sp
27570                                           ! Debug: list unsigned char = al+0 (used reg = )
27571 7140           30E4                       xor	ah,ah
27572 7142           50                         push	ax
27573                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27574 7143           FF76         08            push	8[bp]
27575                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27576 7146           FF76         06            push	6[bp]
27577                                           ! Debug: func () void = write_byte+0 (used reg = )
27578 7149           E8         0C46            call	_write_byte
27579 714C           83C4                   06  add	sp,*6
27580                                           !BCC_EOS
27581                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27582 714F           8B46         08            mov	ax,8[bp]
27583 7152           40                         inc	ax
27584 7153           8946         08            mov	8[bp],ax
27585                                           !BCC_EOS
27586                                           ! 3963         inb(0x3da);
27587                                           ! Debug: list int = const $3DA (used reg = )
27588 7156           B8                   03DA  mov	ax,#$3DA
27589 7159           50                         push	ax
27590                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27591 715A           E8         0C65            call	_inb
27592 715D           44                         inc	sp
27593 715E           44                         inc	sp
27594                                           !BCC_EOS
27595                                           ! 3964         ar_index = inb(0x3c0);
27596                                           ! Debug: list int = const $3C0 (used reg = )
27597 715F           B8                   03C0  mov	ax,#$3C0
27598 7162           50                         push	ax
27599                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27600 7163           E8         0C5C            call	_inb
27601 7166           44                         inc	sp
27602 7167           44                         inc	sp
27603                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27604 7168           30E4                       xor	ah,ah
27605 716A           8946         F8            mov	-8[bp],ax
27606                                           !BCC_EOS
27607                                           ! 3965         write_byte(ES, BX, ar_index); BX++;
27608                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27609 716D           FF76         F8            push	-8[bp]
27610                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27611 7170           FF76         08            push	8[bp]
27612                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27613 7173           FF76         06            push	6[bp]
27614                                           ! Debug: func () void = write_byte+0 (used reg = )
27615 7176           E8         0C19            call	_write_byte
27616 7179           83C4                   06  add	sp,*6
27617                                           !BCC_EOS
27618                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27619 717C           8B46         08            mov	ax,8[bp]
27620 717F           40                         inc	ax
27621 7180           8946         08            mov	8[bp],ax
27622                                           !BCC_EOS
27623                                           ! 3966         write_byte(ES, BX, inb(0x3ca)); BX++;
27624                                           ! Debug: list int = const $3CA (used reg = )
27625 7183           B8                   03CA  mov	ax,#$3CA
27626 7186           50                         push	ax
27627                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27628 7187           E8         0C38            call	_inb
27629 718A           44                         inc	sp
27630 718B           44                         inc	sp
27631                                           ! Debug: list unsigned char = al+0 (used reg = )
27632 718C           30E4                       xor	ah,ah
27633 718E           50                         push	ax
27634                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27635 718F           FF76         08            push	8[bp]
27636                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27637 7192           FF76         06            push	6[bp]
27638                                           ! Debug: func () void = write_byte+0 (used reg = )
27639 7195           E8         0BFA            call	_write_byte
27640 7198           83C4                   06  add	sp,*6
27641                                           !BCC_EOS
27642                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27643 719B           8B46         08            mov	ax,8[bp]
27644 719E           40                         inc	ax
27645 719F           8946         08            mov	8[bp],ax
27646                                           !BCC_EOS
27647                                           ! 3967         for(i=1;i<=4;i++){
27648                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27649 71A2           B8                   0001  mov	ax,*1
27650 71A5           8946         FE            mov	-2[bp],ax
27651                                           !BCC_EOS
27652                                           !BCC_EOS
27653 71A8           EB           33            jmp .260
27654                       000071AA            .261:
27655                                           ! 3968             outb(0x3c4, i);
27656                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27657 71AA           FF76         FE            push	-2[bp]
27658                                           ! Debug: list int = const $3C4 (used reg = )
27659 71AD           B8                   03C4  mov	ax,#$3C4
27660 71B0           50                         push	ax
27661                                           ! Debug: func () void = outb+0 (used reg = )
27662 71B1           E8         0C24            call	_outb
27663 71B4           83C4                   04  add	sp,*4
27664                                           !BCC_EOS
27665                                           ! 3969             write_byte(ES, BX, inb(0x3c5)); BX++;
27666                                           ! Debug: list int = const $3C5 (used reg = )
27667 71B7           B8                   03C5  mov	ax,#$3C5
27668 71BA           50                         push	ax
27669                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27670 71BB           E8         0C04            call	_inb
27671 71BE           44                         inc	sp
27672 71BF           44                         inc	sp
27673                                           ! Debug: list unsigned char = al+0 (used reg = )
27674 71C0           30E4                       xor	ah,ah
27675 71C2           50                         push	ax
27676                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27677 71C3           FF76         08            push	8[bp]
27678                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27679 71C6           FF76         06            push	6[bp]
27680                                           ! Debug: func () void = write_byte+0 (used reg = )
27681 71C9           E8         0BC6            call	_write_byte
27682 71CC           83C4                   06  add	sp,*6
27683                                           !BCC_EOS
27684                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27685 71CF           8B46         08            mov	ax,8[bp]
27686 71D2           40                         inc	ax
27687 71D3           8946         08            mov	8[bp],ax
27688                                           !BCC_EOS
27689                                           ! 3970         }
27690                                           ! 3971         outb(0x3c4, 0);
27691                       000071D6            .25F:
27692                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27693 71D6           8B46         FE            mov	ax,-2[bp]
27694 71D9           40                         inc	ax
27695 71DA           8946         FE            mov	-2[bp],ax
27696                       000071DD            .260:
27697                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27698 71DD           8B46         FE            mov	ax,-2[bp]
27699 71E0           3D                   0004  cmp	ax,*4
27700 71E3           76           C5            jbe	.261
27701                       000071E5            .262:
27702                       000071E5            .25E:
27703                                           ! Debug: list int = const 0 (used reg = )
27704 71E5           31C0                       xor	ax,ax
27705 71E7           50                         push	ax
27706                                           ! Debug: list int = const $3C4 (used reg = )
27707 71E8           B8                   03C4  mov	ax,#$3C4
27708 71EB           50                         push	ax
27709                                           ! Debug: func () void = outb+0 (used reg = )
27710 71EC           E8         0BE9            call	_outb
27711 71EF           83C4                   04  add	sp,*4
27712                                           !BCC_EOS
27713                                           ! 3972         write_byte(ES, BX, inb(0x3c5)); BX++;
27714                                           ! Debug: list int = const $3C5 (used reg = )
27715 71F2           B8                   03C5  mov	ax,#$3C5
27716 71F5           50                         push	ax
27717                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27718 71F6           E8         0BC9            call	_inb
27719 71F9           44                         inc	sp
27720 71FA           44                         inc	sp
27721                                           ! Debug: list unsigned char = al+0 (used reg = )
27722 71FB           30E4                       xor	ah,ah
27723 71FD           50                         push	ax
27724                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27725 71FE           FF76         08            push	8[bp]
27726                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27727 7201           FF76         06            push	6[bp]
27728                                           ! Debug: func () void = write_byte+0 (used reg = )
27729 7204           E8         0B8B            call	_write_byte
27730 7207           83C4                   06  add	sp,*6
27731                                           !BCC_EOS
27732                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27733 720A           8B46         08            mov	ax,8[bp]
27734 720D           40                         inc	ax
27735 720E           8946         08            mov	8[bp],ax
27736                                           !BCC_EOS
27737                                           ! 3973         for(i=0;i<=0x18;i++) {
27738                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27739 7211           31C0                       xor	ax,ax
27740 7213           8946         FE            mov	-2[bp],ax
27741                                           !BCC_EOS
27742                                           !BCC_EOS
27743 7216           EB           33            jmp .265
27744                       00007218            .266:
27745                                           ! 3974             outb(crtc_addr,i);
27746                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27747 7218           FF76         FE            push	-2[bp]
27748                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27749 721B           FF76         FA            push	-6[bp]
27750                                           ! Debug: func () void = outb+0 (used reg = )
27751 721E           E8         0BB7            call	_outb
27752 7221           83C4                   04  add	sp,*4
27753                                           !BCC_EOS
27754                                           ! 3975             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27755                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27756 7224           8B46         FA            mov	ax,-6[bp]
27757                                           ! Debug: list unsigned int = ax+1 (used reg = )
27758 7227           40                         inc	ax
27759 7228           50                         push	ax
27760                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27761 7229           E8         0B96            call	_inb
27762 722C           44                         inc	sp
27763 722D           44                         inc	sp
27764                                           ! Debug: list unsigned char = al+0 (used reg = )
27765 722E           30E4                       xor	ah,ah
27766 7230           50                         push	ax
27767                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27768 7231           FF76         08            push	8[bp]
27769                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27770 7234           FF76         06            push	6[bp]
27771                                           ! Debug: func () void = write_byte+0 (used reg = )
27772 7237           E8         0B58            call	_write_byte
27773 723A           83C4                   06  add	sp,*6
27774                                           !BCC_EOS
27775                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27776 723D           8B46         08            mov	ax,8[bp]
27777 7240           40                         inc	ax
27778 7241           8946         08            mov	8[bp],ax
27779                                           !BCC_EOS
27780                                           ! 3976         }
27781                                           ! 3977         for(i=0;i<=0x13;i++) {
27782                       00007244            .264:
27783                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27784 7244           8B46         FE            mov	ax,-2[bp]
27785 7247           40                         inc	ax
27786 7248           8946         FE            mov	-2[bp],ax
27787                       0000724B            .265:
27788                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27789 724B           8B46         FE            mov	ax,-2[bp]
27790 724E           3D                   0018  cmp	ax,*$18
27791 7251           76           C5            jbe	.266
27792                       00007253            .267:
27793                       00007253            .263:
27794                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27795 7253           31C0                       xor	ax,ax
27796 7255           8946         FE            mov	-2[bp],ax
27797                                           !BCC_EOS
27798                                           !BCC_EOS
27799 7258           EB           44            jmp .26A
27800                       0000725A            .26B:
27801                                           ! 3978             inb(0x3da);
27802                                           ! Debug: list int = const $3DA (used reg = )
27803 725A           B8                   03DA  mov	ax,#$3DA
27804 725D           50                         push	ax
27805                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27806 725E           E8         0B61            call	_inb
27807 7261           44                         inc	sp
27808 7262           44                         inc	sp
27809                                           !BCC_EOS
27810                                           ! 3979             outb(0x3c0, i | (ar_index & 0x20));
27811                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27812 7263           8A46         F8            mov	al,-8[bp]
27813 7266           24                     20  and	al,*$20
27814                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27815                                           ! Debug: expression subtree swapping
27816 7268           30E4                       xor	ah,ah
27817 726A           0B46         FE            or	ax,-2[bp]
27818                                           ! Debug: list unsigned int = ax+0 (used reg = )
27819 726D           50                         push	ax
27820                                           ! Debug: list int = const $3C0 (used reg = )
27821 726E           B8                   03C0  mov	ax,#$3C0
27822 7271           50                         push	ax
27823                                           ! Debug: func () void = outb+0 (used reg = )
27824 7272           E8         0B63            call	_outb
27825 7275           83C4                   04  add	sp,*4
27826                                           !BCC_EOS
27827                                           ! 3980             write_byte(ES, BX, inb(0x3c1)); BX++;
27828                                           ! Debug: list int = const $3C1 (used reg = )
27829 7278           B8                   03C1  mov	ax,#$3C1
27830 727B           50                         push	ax
27831                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27832 727C           E8         0B43            call	_inb
27833 727F           44                         inc	sp
27834 7280           44                         inc	sp
27835                                           ! Debug: list unsigned char = al+0 (used reg = )
27836 7281           30E4                       xor	ah,ah
27837 7283           50                         push	ax
27838                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27839 7284           FF76         08            push	8[bp]
27840                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27841 7287           FF76         06            push	6[bp]
27842                                           ! Debug: func () void = write_byte+0 (used reg = )
27843 728A           E8         0B05            call	_write_byte
27844 728D           83C4                   06  add	sp,*6
27845                                           !BCC_EOS
27846                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27847 7290           8B46         08            mov	ax,8[bp]
27848 7293           40                         inc	ax
27849 7294           8946         08            mov	8[bp],ax
27850                                           !BCC_EOS
27851                                           ! 3981         }
27852                                           ! 3982         inb(0x3da);
27853                       00007297            .269:
27854                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27855 7297           8B46         FE            mov	ax,-2[bp]
27856 729A           40                         inc	ax
27857 729B           8946         FE            mov	-2[bp],ax
27858                       0000729E            .26A:
27859                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27860 729E           8B46         FE            mov	ax,-2[bp]
27861 72A1           3D                   0013  cmp	ax,*$13
27862 72A4           76           B4            jbe	.26B
27863                       000072A6            .26C:
27864                       000072A6            .268:
27865                                           ! Debug: list int = const $3DA (used reg = )
27866 72A6           B8                   03DA  mov	ax,#$3DA
27867 72A9           50                         push	ax
27868                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27869 72AA           E8         0B15            call	_inb
27870 72AD           44                         inc	sp
27871 72AE           44                         inc	sp
27872                                           !BCC_EOS
27873                                           ! 3983         for(i=0;i<=8;i++) {
27874                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27875 72AF           31C0                       xor	ax,ax
27876 72B1           8946         FE            mov	-2[bp],ax
27877                                           !BCC_EOS
27878                                           !BCC_EOS
27879 72B4           EB           33            jmp .26F
27880                       000072B6            .270:
27881                                           ! 3984             outb(
27882                                           ! 3984 0x3ce,i);
27883                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27884 72B6           FF76         FE            push	-2[bp]
27885                                           ! Debug: list int = const $3CE (used reg = )
27886 72B9           B8                   03CE  mov	ax,#$3CE
27887 72BC           50                         push	ax
27888                                           ! Debug: func () void = outb+0 (used reg = )
27889 72BD           E8         0B18            call	_outb
27890 72C0           83C4                   04  add	sp,*4
27891                                           !BCC_EOS
27892                                           ! 3985             write_byte(ES, BX, inb(0x3cf)); BX++;
27893                                           ! Debug: list int = const $3CF (used reg = )
27894 72C3           B8                   03CF  mov	ax,#$3CF
27895 72C6           50                         push	ax
27896                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27897 72C7           E8         0AF8            call	_inb
27898 72CA           44                         inc	sp
27899 72CB           44                         inc	sp
27900                                           ! Debug: list unsigned char = al+0 (used reg = )
27901 72CC           30E4                       xor	ah,ah
27902 72CE           50                         push	ax
27903                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27904 72CF           FF76         08            push	8[bp]
27905                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27906 72D2           FF76         06            push	6[bp]
27907                                           ! Debug: func () void = write_byte+0 (used reg = )
27908 72D5           E8         0ABA            call	_write_byte
27909 72D8           83C4                   06  add	sp,*6
27910                                           !BCC_EOS
27911                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27912 72DB           8B46         08            mov	ax,8[bp]
27913 72DE           40                         inc	ax
27914 72DF           8946         08            mov	8[bp],ax
27915                                           !BCC_EOS
27916                                           ! 3986         }
27917                                           ! 3987         write_word(ES, BX, crtc_addr); BX+= 2;
27918                       000072E2            .26E:
27919                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27920 72E2           8B46         FE            mov	ax,-2[bp]
27921 72E5           40                         inc	ax
27922 72E6           8946         FE            mov	-2[bp],ax
27923                       000072E9            .26F:
27924                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27925 72E9           8B46         FE            mov	ax,-2[bp]
27926 72EC           3D                   0008  cmp	ax,*8
27927 72EF           76           C5            jbe	.270
27928                       000072F1            .271:
27929                       000072F1            .26D:
27930                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27931 72F1           FF76         FA            push	-6[bp]
27932                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27933 72F4           FF76         08            push	8[bp]
27934                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27935 72F7           FF76         06            push	6[bp]
27936                                           ! Debug: func () void = write_word+0 (used reg = )
27937 72FA           E8         0AAD            call	_write_word
27938 72FD           83C4                   06  add	sp,*6
27939                                           !BCC_EOS
27940                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27941 7300           8B46         08            mov	ax,8[bp]
27942 7303           40                         inc	ax
27943 7304           40                         inc	ax
27944 7305           8946         08            mov	8[bp],ax
27945                                           !BCC_EOS
27946                                           ! 3988         write_byte(ES, BX, 0); BX++;
27947                                           ! Debug: list int = const 0 (used reg = )
27948 7308           31C0                       xor	ax,ax
27949 730A           50                         push	ax
27950                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27951 730B           FF76         08            push	8[bp]
27952                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27953 730E           FF76         06            push	6[bp]
27954                                           ! Debug: func () void = write_byte+0 (used reg = )
27955 7311           E8         0A7E            call	_write_byte
27956 7314           83C4                   06  add	sp,*6
27957                                           !BCC_EOS
27958                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27959 7317           8B46         08            mov	ax,8[bp]
27960 731A           40                         inc	ax
27961 731B           8946         08            mov	8[bp],ax
27962                                           !BCC_EOS
27963                                           ! 3989         write_byte(ES, BX, 0); BX++;
27964                                           ! Debug: list int = const 0 (used reg = )
27965 731E           31C0                       xor	ax,ax
27966 7320           50                         push	ax
27967                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27968 7321           FF76         08            push	8[bp]
27969                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27970 7324           FF76         06            push	6[bp]
27971                                           ! Debug: func () void = write_byte+0 (used reg = )
27972 7327           E8         0A68            call	_write_byte
27973 732A           83C4                   06  add	sp,*6
27974                                           !BCC_EOS
27975                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27976 732D           8B46         08            mov	ax,8[bp]
27977 7330           40                         inc	ax
27978 7331           8946         08            mov	8[bp],ax
27979                                           !BCC_EOS
27980                                           ! 3990         write_byte(ES, BX, 0); BX++;
27981                                           ! Debug: list int = const 0 (used reg = )
27982 7334           31C0                       xor	ax,ax
27983 7336           50                         push	ax
27984                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27985 7337           FF76         08            push	8[bp]
27986                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27987 733A           FF76         06            push	6[bp]
27988                                           ! Debug: func () void = write_byte+0 (used reg = )
27989 733D           E8         0A52            call	_write_byte
27990 7340           83C4                   06  add	sp,*6
27991                                           !BCC_EOS
27992                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27993 7343           8B46         08            mov	ax,8[bp]
27994 7346           40                         inc	ax
27995 7347           8946         08            mov	8[bp],ax
27996                                           !BCC_EOS
27997                                           ! 3991         write_byte(ES, BX, 0); BX++;
27998                                           ! Debug: list int = const 0 (used reg = )
27999 734A           31C0                       xor	ax,ax
28000 734C           50                         push	ax
28001                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28002 734D           FF76         08            push	8[bp]
28003                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28004 7350           FF76         06            push	6[bp]
28005                                           ! Debug: func () void = write_byte+0 (used reg = )
28006 7353           E8         0A3C            call	_write_byte
28007 7356           83C4                   06  add	sp,*6
28008                                           !BCC_EOS
28009                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28010 7359           8B46         08            mov	ax,8[bp]
28011 735C           40                         inc	ax
28012 735D           8946         08            mov	8[bp],ax
28013                                           !BCC_EOS
28014                                           ! 3992     }
28015                                           ! 3993     if (CX & 2) {
28016                       00007360            .25C:
28017                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
28018 7360           8A46         04            mov	al,4[bp]
28019 7363           24                     02  and	al,*2
28020 7365           84C0                       test	al,al
28021 7367         0F84         0270            beq 	.272
28022                       0000736B            .273:
28023                                           ! 3994         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
28024                                           ! Debug: list int = const $49 (used reg = )
28025 736B           B8                   0049  mov	ax,*$49
28026 736E           50                         push	ax
28027                                           ! Debug: list int = const $40 (used reg = )
28028 736F           B8                   0040  mov	ax,*$40
28029 7372           50                         push	ax
28030                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28031 7373           E8         09F6            call	_read_byte
28032 7376           83C4                   04  add	sp,*4
28033                                           ! Debug: list unsigned char = al+0 (used reg = )
28034 7379           30E4                       xor	ah,ah
28035 737B           50                         push	ax
28036                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28037 737C           FF76         08            push	8[bp]
28038                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28039 737F           FF76         06            push	6[bp]
28040                                           ! Debug: func () void = write_byte+0 (used reg = )
28041 7382           E8         0A0D            call	_write_byte
28042 7385           83C4                   06  add	sp,*6
28043                                           !BCC_EOS
28044                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28045 7388           8B46         08            mov	ax,8[bp]
28046 738B           40                         inc	ax
28047 738C           8946         08            mov	8[bp],ax
28048                                           !BCC_EOS
28049                                           ! 3995         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
28050                                           ! Debug: list int = const $4A (used reg = )
28051 738F           B8                   004A  mov	ax,*$4A
28052 7392           50                         push	ax
28053                                           ! Debug: list int = const $40 (used reg = )
28054 7393           B8                   0040  mov	ax,*$40
28055 7396           50                         push	ax
28056                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28057 7397           E8         09E5            call	_read_word
28058 739A           83C4                   04  add	sp,*4
28059                                           ! Debug: list unsigned short = ax+0 (used reg = )
28060 739D           50                         push	ax
28061                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28062 739E           FF76         08            push	8[bp]
28063                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28064 73A1           FF76         06            push	6[bp]
28065                                           ! Debug: func () void = write_word+0 (used reg = )
28066 73A4           E8         0A03            call	_write_word
28067 73A7           83C4                   06  add	sp,*6
28068                                           !BCC_EOS
28069                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28070 73AA           8B46         08            mov	ax,8[bp]
28071 73AD           40                         inc	ax
28072 73AE           40                         inc	ax
28073 73AF           8946         08            mov	8[bp],ax
28074                                           !BCC_EOS
28075                                           ! 3996         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
28076                                           ! Debug: list int = const $4C (used reg = )
28077 73B2           B8                   004C  mov	ax,*$4C
28078 73B5           50                         push	ax
28079                                           ! Debug: list int = const $40 (used reg = )
28080 73B6           B8                   0040  mov	ax,*$40
28081 73B9           50                         push	ax
28082                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28083 73BA           E8         09C2            call	_read_word
28084 73BD           83C4                   04  add	sp,*4
28085                                           ! Debug: list unsigned short = ax+0 (used reg = )
28086 73C0           50                         push	ax
28087                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28088 73C1           FF76         08            push	8[bp]
28089                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28090 73C4           FF76         06            push	6[bp]
28091                                           ! Debug: func () void = write_word+0 (used reg = )
28092 73C7           E8         09E0            call	_write_word
28093 73CA           83C4                   06  add	sp,*6
28094                                           !BCC_EOS
28095                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28096 73CD           8B46         08            mov	ax,8[bp]
28097 73D0           40                         inc	ax
28098 73D1           40                         inc	ax
28099 73D2           8946         08            mov	8[bp],ax
28100                                           !BCC_EOS
28101                                           ! 3997         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
28102                                           ! Debug: list int = const $63 (used reg = )
28103 73D5           B8                   0063  mov	ax,*$63
28104 73D8           50                         push	ax
28105                                           ! Debug: list int = const $40 (used reg = )
28106 73D9           B8                   0040  mov	ax,*$40
28107 73DC           50                         push	ax
28108                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28109 73DD           E8         099F            call	_read_word
28110 73E0           83C4                   04  add	sp,*4
28111                                           ! Debug: list unsigned short = ax+0 (used reg = )
28112 73E3           50                         push	ax
28113                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28114 73E4           FF76         08            push	8[bp]
28115                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28116 73E7           FF76         06            push	6[bp]
28117                                           ! Debug: func () void = write_word+0 (used reg = )
28118 73EA           E8         09BD            call	_write_word
28119 73ED           83C4                   06  add	sp,*6
28120                                           !BCC_EOS
28121                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28122 73F0           8B46         08            mov	ax,8[bp]
28123 73F3           40                         inc	ax
28124 73F4           40                         inc	ax
28125 73F5           8946         08            mov	8[bp],ax
28126                                           !BCC_EOS
28127                                           ! 3998         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
28128                                           ! Debug: list int = const $84 (used reg = )
28129 73F8           B8                   0084  mov	ax,#$84
28130 73FB           50                         push	ax
28131                                           ! Debug: list int = const $40 (used reg = )
28132 73FC           B8                   0040  mov	ax,*$40
28133 73FF           50                         push	ax
28134                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28135 7400           E8         0969            call	_read_byte
28136 7403           83C4                   04  add	sp,*4
28137                                           ! Debug: list unsigned char = al+0 (used reg = )
28138 7406           30E4                       xor	ah,ah
28139 7408           50                         push	ax
28140                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28141 7409           FF76         08            push	8[bp]
28142                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28143 740C           FF76         06            push	6[bp]
28144                                           ! Debug: func () void = write_byte+0 (used reg = )
28145 740F           E8         0980            call	_write_byte
28146 7412           83C4                   06  add	sp,*6
28147                                           !BCC_EOS
28148                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28149 7415           8B46         08            mov	ax,8[bp]
28150 7418           40                         inc	ax
28151 7419           8946         08            mov	8[bp],ax
28152                                           !BCC_EOS
28153                                           ! 3999         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
28154                                           ! Debug: list int = const $85 (used reg = )
28155 741C           B8                   0085  mov	ax,#$85
28156 741F           50                         push	ax
28157                                           ! Debug: list int = const $40 (used reg = )
28158 7420           B8                   0040  mov	ax,*$40
28159 7423           50                         push	ax
28160                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28161 7424           E8         0958            call	_read_word
28162 7427           83C4                   04  add	sp,*4
28163                                           ! Debug: list unsigned short = ax+0 (used reg = )
28164 742A           50                         push	ax
28165                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28166 742B           FF76         08            push	8[bp]
28167                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28168 742E           FF76         06            push	6[bp]
28169                                           ! Debug: func () void = write_word+0 (used reg = )
28170 7431           E8         0976            call	_write_word
28171 7434           83C4                   06  add	sp,*6
28172                                           !BCC_EOS
28173                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28174 7437           8B46         08            mov	ax,8[bp]
28175 743A           40                         inc	ax
28176 743B           40                         inc	ax
28177 743C           8946         08            mov	8[bp],ax
28178                                           !BCC_EOS
28179                                           ! 4000         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
28180                                           ! Debug: list int = const $87 (used reg = )
28181 743F           B8                   0087  mov	ax,#$87
28182 7442           50                         push	ax
28183                                           ! Debug: list int = const $40 (used reg = )
28184 7443           B8                   0040  mov	ax,*$40
28185 7446           50                         push	ax
28186                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28187 7447           E8         0922            call	_read_byte
28188 744A           83C4                   04  add	sp,*4
28189                                           ! Debug: list unsigned char = al+0 (used reg = )
28190 744D           30E4                       xor	ah,ah
28191 744F           50                         push	ax
28192                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28193 7450           FF76         08            push	8[bp]
28194                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28195 7453           FF76         06            push	6[bp]
28196                                           ! Debug: func () void = write_byte+0 (used reg = )
28197 7456           E8         0939            call	_write_byte
28198 7459           83C4                   06  add	sp,*6
28199                                           !BCC_EOS
28200                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28201 745C           8B46         08            mov	ax,8[bp]
28202 745F           40                         inc	ax
28203 7460           8946         08            mov	8[bp],ax
28204                                           !BCC_EOS
28205                                           ! 4001         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
28206                                           ! Debug: list int = const $88 (used reg = )
28207 7463           B8                   0088  mov	ax,#$88
28208 7466           50                         push	ax
28209                                           ! Debug: list int = const $40 (used reg = )
28210 7467           B8                   0040  mov	ax,*$40
28211 746A           50                         push	ax
28212                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28213 746B           E8         08FE            call	_read_byte
28214 746E           83C4                   04  add	sp,*4
28215                                           ! Debug: list unsigned char = al+0 (used reg = )
28216 7471           30E4                       xor	ah,ah
28217 7473           50                         push	ax
28218                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28219 7474           FF76         08            push	8[bp]
28220                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28221 7477           FF76         06            push	6[bp]
28222                                           ! Debug: func () void = write_byte+0 (used reg = )
28223 747A           E8         0915            call	_write_byte
28224 747D           83C4                   06  add	sp,*6
28225                                           !BCC_EOS
28226                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28227 7480           8B46         08            mov	ax,8[bp]
28228 7483           40                         inc	ax
28229 7484           8946         08            mov	8[bp],ax
28230                                           !BCC_EOS
28231                                           ! 4002         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
28232                                           ! Debug: list int = const $89 (used reg = )
28233 7487           B8                   0089  mov	ax,#$89
28234 748A           50                         push	ax
28235                                           ! Debug: list int = const $40 (used reg = )
28236 748B           B8                   0040  mov	ax,*$40
28237 748E           50                         push	ax
28238                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28239 748F           E8         08DA            call	_read_byte
28240 7492           83C4                   04  add	sp,*4
28241                                           ! Debug: list unsigned char = al+0 (used reg = )
28242 7495           30E4                       xor	ah,ah
28243 7497           50                         push	ax
28244                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28245 7498           FF76         08            push	8[bp]
28246                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28247 749B           FF76         06            push	6[bp]
28248                                           ! Debug: func () void = write_byte+0 (used reg = )
28249 749E           E8         08F1            call	_write_byte
28250 74A1           83C4                   06  add	sp,*6
28251                                           !BCC_EOS
28252                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28253 74A4           8B46         08            mov	ax,8[bp]
28254 74A7           40                         inc	ax
28255 74A8           8946         08            mov	8[bp],ax
28256                                           !BCC_EOS
28257                                           ! 4003         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
28258                                           ! Debug: list int = const $60 (used reg = )
28259 74AB           B8                   0060  mov	ax,*$60
28260 74AE           50                         push	ax
28261                                           ! Debug: list int = const $40 (used reg = )
28262 74AF           B8                   0040  mov	ax,*$40
28263 74B2           50                         push	ax
28264                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28265 74B3           E8         08C9            call	_read_word
28266 74B6           83C4                   04  add	sp,*4
28267                                           ! Debug: list unsigned short = ax+0 (used reg = )
28268 74B9           50                         push	ax
28269                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28270 74BA           FF76         08            push	8[bp]
28271                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28272 74BD           FF76         06            push	6[bp]
28273                                           ! Debug: func () void = write_word+0 (used reg = )
28274 74C0           E8         08E7            call	_write_word
28275 74C3           83C4                   06  add	sp,*6
28276                                           !BCC_EOS
28277                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28278 74C6           8B46         08            mov	ax,8[bp]
28279 74C9           40                         inc	ax
28280 74CA           40                         inc	ax
28281 74CB           8946         08            mov	8[bp],ax
28282                                           !BCC_EOS
28283                                           ! 4004         for(i=0;i<8;i++) {
28284                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28285 74CE           31C0                       xor	ax,ax
28286 74D0           8946         FE            mov	-2[bp],ax
28287                                           !BCC_EOS
28288                                           !BCC_EOS
28289 74D3           EB           2F            jmp .276
28290                       000074D5            .277:
28291                                           ! 4005             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28292                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28293                                           ! Debug: expression subtree swapping
28294 74D5           8B46         FE            mov	ax,-2[bp]
28295 74D8           D1E0                       shl	ax,*1
28296                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28297                                           ! Debug: expression subtree swapping
28298                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28299 74DA           05                   0050  add	ax,*$50
28300 74DD           50                         push	ax
28301                                           ! Debug: list int = const $40 (used reg = )
28302 74DE           B8                   0040  mov	ax,*$40
28303 74E1           50                         push	ax
28304                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28305 74E2           E8         089A            call	_read_word
28306 74E5           83C4                   04  add	sp,*4
28307                                           ! Debug: list unsigned short = ax+0 (used reg = )
28308 74E8           50                         push	ax
28309                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28310 74E9           FF76         08            push	8[bp]
28311                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28312 74EC           FF76         06            push	6[bp]
28313                                           ! Debug: func () void = write_word+0 (used reg = )
28314 74EF           E8         08B8            call	_write_word
28315 74F2           83C4                   06  add	sp,*6
28316                                           !BCC_EOS
28317                                           ! 4006             BX += 2;
28318                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28319 74F5           8B46         08            mov	ax,8[bp]
28320 74F8           40                         inc	ax
28321 74F9           40                         inc	ax
28322 74FA           8946         08            mov	8[bp],ax
28323                                           !BCC_EOS
28324                                           ! 4007         }
28325                                           ! 4008         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28326                       000074FD            .275:
28327                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28328 74FD           8B46         FE            mov	ax,-2[bp]
28329 7500           40                         inc	ax
28330 7501           8946         FE            mov	-2[bp],ax
28331                       00007504            .276:
28332                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28333 7504           8B46         FE            mov	ax,-2[bp]
28334 7507           3D                   0008  cmp	ax,*8
28335 750A           72           C9            jb 	.277
28336                       0000750C            .278:
28337                       0000750C            .274:
28338                                           ! Debug: list int = const $4E (used reg = )
28339 750C           B8                   004E  mov	ax,*$4E
28340 750F           50                         push	ax
28341                                           ! Debug: list int = const $40 (used reg = )
28342 7510           B8                   0040  mov	ax,*$40
28343 7513           50                         push	ax
28344                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28345 7514           E8         0868            call	_read_word
28346 7517           83C4                   04  add	sp,*4
28347                                           ! Debug: list unsigned short = ax+0 (used reg = )
28348 751A           50                         push	ax
28349                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28350 751B           FF76         08            push	8[bp]
28351                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28352 751E           FF76         06            push	6[bp]
28353                                           ! Debug: func () void = write_word+0 (used reg = )
28354 7521           E8         0886            call	_write_word
28355 7524           83C4                   06  add	sp,*6
28356                                           !BCC_EOS
28357                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28358 7527           8B46         08            mov	ax,8[bp]
28359 752A           40                         inc	ax
28360 752B           40                         inc	ax
28361 752C           8946         08            mov	8[bp],ax
28362                                           !BCC_EOS
28363                                           ! 4009         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28364                                           ! Debug: list int = const $62 (used reg = )
28365 752F           B8                   0062  mov	ax,*$62
28366 7532           50                         push	ax
28367                                           ! Debug: list int = const $40 (used reg = )
28368 7533           B8                   0040  mov	ax,*$40
28369 7536           50                         push	ax
28370                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28371 7537           E8         0832            call	_read_byte
28372 753A           83C4                   04  add	sp,*4
28373                                           ! Debug: list unsigned char = al+0 (used reg = )
28374 753D           30E4                       xor	ah,ah
28375 753F           50                         push	ax
28376                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28377 7540           FF76         08            push	8[bp]
28378                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28379 7543           FF76         06            push	6[bp]
28380                                           ! Debug: func () void = write_byte+0 (used reg = )
28381 7546           E8         0849            call	_write_byte
28382 7549           83C4                   06  add	sp,*6
28383                                           !BCC_EOS
28384                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28385 754C           8B46         08            mov	ax,8[bp]
28386 754F           40                         inc	ax
28387 7550           8946         08            mov	8[bp],ax
28388                                           !BCC_EOS
28389                                           ! 4010         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28390                                           ! Debug: list int = const $7C (used reg = )
28391 7553           B8                   007C  mov	ax,*$7C
28392 7556           50                         push	ax
28393                                           ! Debug: list int = const 0 (used reg = )
28394 7557           31C0                       xor	ax,ax
28395 7559           50                         push	ax
28396                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28397 755A           E8         0822            call	_read_word
28398 755D           83C4                   04  add	sp,*4
28399                                           ! Debug: list unsigned short = ax+0 (used reg = )
28400 7560           50                         push	ax
28401                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28402 7561           FF76         08            push	8[bp]
28403                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28404 7564           FF76         06            push	6[bp]
28405                                           ! Debug: func () void = write_word+0 (used reg = )
28406 7567           E8         0840            call	_write_word
28407 756A           83C4                   06  add	sp,*6
28408                                           !BCC_EOS
28409                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28410 756D           8B46         08            mov	ax,8[bp]
28411 7570           40                         inc	ax
28412 7571           40                         inc	ax
28413 7572           8946         08            mov	8[bp],ax
28414                                           !BCC_EOS
28415                                           ! 4011         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28416                                           ! Debug: list int = const $7E (used reg = )
28417 7575           B8                   007E  mov	ax,*$7E
28418 7578           50                         push	ax
28419                                           ! Debug: list int = const 0 (used reg = )
28420 7579           31C0                       xor	ax,ax
28421 757B           50                         push	ax
28422                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28423 757C           E8         0800            call	_read_word
28424 757F           83C4                   04  add	sp,*4
28425                                           ! Debug: list unsigned short = ax+0 (used reg = )
28426 7582           50                         push	ax
28427                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28428 7583           FF76         08            push	8[bp]
28429                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28430 7586           FF76         06            push	6[bp]
28431                                           ! Debug: func () void = write_word+0 (used reg = )
28432 7589           E8         081E            call	_write_word
28433 758C           83C4                   06  add	sp,*6
28434                                           !BCC_EOS
28435                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28436 758F           8B46         08            mov	ax,8[bp]
28437 7592           40                         inc	ax
28438 7593           40                         inc	ax
28439 7594           8946         08            mov	8[bp],ax
28440                                           !BCC_EOS
28441                                           ! 4012         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28442                                           ! Debug: list int = const $10C (used reg = )
28443 7597           B8                   010C  mov	ax,#$10C
28444 759A           50                         push	ax
28445                                           ! Debug: list int = const 0 (used reg = )
28446 759B           31C0                       xor	ax,ax
28447 759D           50                         push	ax
28448                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28449 759E           E8         07DE            call	_read_word
28450 75A1           83C4                   04  add	sp,*4
28451                                           ! Debug: list unsigned short = ax+0 (used reg = )
28452 75A4           50                         push	ax
28453                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28454 75A5           FF76         08            push	8[bp]
28455                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28456 75A8           FF76         06            push	6[bp]
28457                                           ! Debug: func () void = write_word+0 (used reg = )
28458 75AB           E8         07FC            call	_write_word
28459 75AE           83C4                   06  add	sp,*6
28460                                           !BCC_EOS
28461                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28462 75B1           8B46         08            mov	ax,8[bp]
28463 75B4           40                         inc	ax
28464 75B5           40                         inc	ax
28465 75B6           8946         08            mov	8[bp],ax
28466                                           !BCC_EOS
28467                                           ! 4013         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28468                                           ! Debug: list int = const $10E (used reg = )
28469 75B9           B8                   010E  mov	ax,#$10E
28470 75BC           50                         push	ax
28471                                           ! Debug: list int = const 0 (used reg = )
28472 75BD           31C0                       xor	ax,ax
28473 75BF           50                         push	ax
28474                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28475 75C0           E8         07BC            call	_read_word
28476 75C3           83C4                   04  add	sp,*4
28477                                           ! Debug: list unsigned short = ax+0 (used reg = )
28478 75C6           50                         push	ax
28479                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28480 75C7           FF76         08            push	8[bp]
28481                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28482 75CA           FF76         06            push	6[bp]
28483                                           ! Debug: func () void = write_word+0 (used reg = )
28484 75CD           E8         07DA            call	_write_word
28485 75D0           83C4                   06  add	sp,*6
28486                                           !BCC_EOS
28487                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28488 75D3           8B46         08            mov	ax,8[bp]
28489 75D6           40                         inc	ax
28490 75D7           40                         inc	ax
28491 75D8           8946         08            mov	8[bp],ax
28492                                           !BCC_EOS
28493                                           ! 4014     }
28494                                           ! 4015     if (CX & 4) {
28495                       000075DB            .272:
28496                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28497 75DB           8A46         04            mov	al,4[bp]
28498 75DE           24                     04  and	al,*4
28499 75E0           84C0                       test	al,al
28500 75E2         0F84         00B5            beq 	.279
28501                       000075E6            .27A:
28502                                           ! 4016         write_byte(ES, BX, inb(0x3c7)); BX++;
28503                                           ! Debug: list int = const $3C7 (used reg = )
28504 75E6           B8                   03C7  mov	ax,#$3C7
28505 75E9           50                         push	ax
28506                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28507 75EA           E8         07D5            call	_inb
28508 75ED           44                         inc	sp
28509 75EE           44                         inc	sp
28510                                           ! Debug: list unsigned char = al+0 (used reg = )
28511 75EF           30E4                       xor	ah,ah
28512 75F1           50                         push	ax
28513                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28514 75F2           FF76         08            push	8[bp]
28515                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28516 75F5           FF76         06            push	6[bp]
28517                                           ! Debug: func () void = write_byte+0 (used reg = )
28518 75F8           E8         0797            call	_write_byte
28519 75FB           83C4                   06  add	sp,*6
28520                                           !BCC_EOS
28521                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28522 75FE           8B46         08            mov	ax,8[bp]
28523 7601           40                         inc	ax
28524 7602           8946         08            mov	8[bp],ax
28525                                           !BCC_EOS
28526                                           ! 4017         write_byte(ES, BX, inb(0x3c8)); BX++;
28527                                           ! Debug: list int = const $3C8 (used reg = )
28528 7605           B8                   03C8  mov	ax,#$3C8
28529 7608           50                         push	ax
28530                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28531 7609           E8         07B6            call	_inb
28532 760C           44                         inc	sp
28533 760D           44                         inc	sp
28534                                           ! Debug: list unsigned char = al+0 (used reg = )
28535 760E           30E4                       xor	ah,ah
28536 7610           50                         push	ax
28537                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28538 7611           FF76         08            push	8[bp]
28539                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28540 7614           FF76         06            push	6[bp]
28541                                           ! Debug: func () void = write_byte+0 (used reg = )
28542 7617           E8         0778            call	_write_byte
28543 761A           83C4                   06  add	sp,*6
28544                                           !BCC_EOS
28545                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28546 761D           8B46         08            mov	ax,8[bp]
28547 7620           40                         inc	ax
28548 7621           8946         08            mov	8[bp],ax
28549                                           !BCC_EOS
28550                                           ! 4018         write_byte(ES, BX, inb(0x3c6)); BX++;
28551                                           ! Debug: list int = const $3C6 (used reg = )
28552 7624           B8                   03C6  mov	ax,#$3C6
28553 7627           50                         push	ax
28554                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28555 7628           E8         0797            call	_inb
28556 762B           44                         inc	sp
28557 762C           44                         inc	sp
28558                                           ! Debug: list unsigned char = al+0 (used reg = )
28559 762D           30E4                       xor	ah,ah
28560 762F           50                         push	ax
28561                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28562 7630           FF76         08            push	8[bp]
28563                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28564 7633           FF76         06            push	6[bp]
28565                                           ! Debug: func () void = write_byte+0 (used reg = )
28566 7636           E8         0759            call	_write_byte
28567 7639           83C4                   06  add	sp,*6
28568                                           !BCC_EOS
28569                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28570 763C           8B46         08            mov	ax,8[bp]
28571 763F           40                         inc	ax
28572 7640           8946         08            mov	8[bp],ax
28573                                           !BCC_EOS
28574                                           ! 4019         outb(0x3c8,0x00);
28575                                           ! Debug: list int = const 0 (used reg = )
28576 7643           31C0                       xor	ax,ax
28577 7645           50                         push	ax
28578                                           ! Debug: list int = const $3C8 (used reg = )
28579 7646           B8                   03C8  mov	ax,#$3C8
28580 7649           50                         push	ax
28581                                           ! Debug: func () void = outb+0 (used reg = )
28582 764A           E8         078B            call	_outb
28583 764D           83C4                   04  add	sp,*4
28584                                           !BCC_EOS
28585                                           ! 4020         for(i=0;i<256*3;i++) {
28586                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28587 7650           31C0                       xor	ax,ax
28588 7652           8946         FE            mov	-2[bp],ax
28589                                           !BCC_EOS
28590                                           !BCC_EOS
28591 7655           EB           26            jmp .27D
28592                       00007657            .27E:
28593                                           ! 4021             write_byte(ES, BX, inb(0x3c9)); BX++;
28594                                           ! Debug: list int = const $3C9 (used reg = )
28595 7657           B8                   03C9  mov	ax,#$3C9
28596 765A           50                         push	ax
28597                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28598 765B           E8         0764            call	_inb
28599 765E           44                         inc	sp
28600 765F           44                         inc	sp
28601                                           ! Debug: list unsigned char = al+0 (used reg = )
28602 7660           30E4                       xor	ah,ah
28603 7662           50                         push	ax
28604                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28605 7663           FF76         08            push	8[bp]
28606                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28607 7666           FF76         06            push	6[bp]
28608                                           ! Debug: func () void = write_byte+0 (used reg = )
28609 7669           E8         0726            call	_write_byte
28610 766C           83C4                   06  add	sp,*6
28611                                           !BCC_EOS
28612                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28613 766F           8B46         08            mov	ax,8[bp]
28614 7672           40                         inc	ax
28615 7673           8946         08            mov	8[bp],ax
28616                                           !BCC_EOS
28617                                           ! 4022         }
28618                                           ! 4023         write_byte(ES, BX, 0); BX++;
28619                       00007676            .27C:
28620                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28621 7676           8B46         FE            mov	ax,-2[bp]
28622 7679           40                         inc	ax
28623 767A           8946         FE            mov	-2[bp],ax
28624                       0000767D            .27D:
28625                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28626 767D           8B46         FE            mov	ax,-2[bp]
28627 7680           3D                   0300  cmp	ax,#$300
28628 7683           72           D2            jb 	.27E
28629                       00007685            .27F:
28630                       00007685            .27B:
28631                                           ! Debug: list int = const 0 (used reg = )
28632 7685           31C0                       xor	ax,ax
28633 7687           50                         push	ax
28634                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28635 7688           FF76         08            push	8[bp]
28636                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28637 768B           FF76         06            push	6[bp]
28638                                           ! Debug: func () void = write_byte+0 (used reg = )
28639 768E           E8         0701            call	_write_byte
28640 7691           83C4                   06  add	sp,*6
28641                                           !BCC_EOS
28642                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28643 7694           8B46         08            mov	ax,8[bp]
28644 7697           40                         inc	ax
28645 7698           8946         08            mov	8[bp],ax
28646                                           !BCC_EOS
28647                                           ! 4024     }
28648                                           ! 4025     return BX;
28649                       0000769B            .279:
28650 769B           8B46         08            mov	ax,8[bp]
28651 769E           89EC                       mov	sp,bp
28652 76A0           5D                         pop	bp
28653 76A1           C3                         ret
28654                                           !BCC_EOS
28655                                           ! 4026 }
28656                                           ! 4027 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28657                                           ! 4028      Bit16u CX;Bit16u ES;Bit16u BX;
28658                       000076A2            _biosfn_restore_video_state:
28659                                           !BCC_EOS
28660                                           !BCC_EOS
28661                                           !BCC_EOS
28662                                           ! 4029 {
28663                                           ! 4030     Bit16u i, crtc_addr, v, addr1, ar_index;
28664                                           !BCC_EOS
28665                                           ! 4031     if (CX & 1) {
28666 76A2           55                         push	bp
28667 76A3           89E5                       mov	bp,sp
28668 76A5           83C4                   F6  add	sp,*-$A
28669                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28670 76A8           8A46         04            mov	al,4[bp]
28671 76AB           24                     01  and	al,*1
28672 76AD           84C0                       test	al,al
28673 76AF         0F84         02AA            beq 	.280
28674                       000076B3            .281:
28675                                           ! 4032         inb(0x3da);
28676                                           ! Debug: list int = const $3DA (used reg = )
28677 76B3           B8                   03DA  mov	ax,#$3DA
28678 76B6           50                         push	ax
28679                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28680 76B7           E8         0708            call	_inb
28681 76BA           44                         inc	sp
28682 76BB           44                         inc	sp
28683                                           !BCC_EOS
28684                                           ! 4033         crtc_addr = read_word(ES, BX + 0x40);
28685                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28686 76BC           8B46         08            mov	ax,8[bp]
28687                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28688 76BF           05                   0040  add	ax,*$40
28689 76C2           50                         push	ax
28690                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28691 76C3           FF76         06            push	6[bp]
28692                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28693 76C6           E8         06B6            call	_read_word
28694 76C9           83C4                   04  add	sp,*4
28695                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28696 76CC           8946         FC            mov	-4[bp],ax
28697                                           !BCC_EOS
28698                                           ! 4034         addr1 = BX;
28699                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28700 76CF           8B46         08            mov	ax,8[bp]
28701 76D2           8946         F8            mov	-8[bp],ax
28702                                           !BCC_EOS
28703                                           ! 4035         BX += 5;
28704                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28705 76D5           8B46         08            mov	ax,8[bp]
28706 76D8           05                   0005  add	ax,*5
28707 76DB           8946         08            mov	8[bp],ax
28708                                           !BCC_EOS
28709                                           ! 4036         for(i=1;i<=4;i++){
28710                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28711 76DE           B8                   0001  mov	ax,*1
28712 76E1           8946         FE            mov	-2[bp],ax
28713                                           !BCC_EOS
28714                                           !BCC_EOS
28715 76E4           EB           34            jmp .284
28716                       000076E6            .285:
28717                                           ! 4037             outb(0x3c4, i);
28718                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28719 76E6           FF76         FE            push	-2[bp]
28720                                           ! Debug: list int = const $3C4 (used reg = )
28721 76E9           B8                   03C4  mov	ax,#$3C4
28722 76EC           50                         push	ax
28723                                           ! Debug: func () void = outb+0 (used reg = )
28724 76ED           E8         06E8            call	_outb
28725 76F0           83C4                   04  add	sp,*4
28726                                           !BCC_EOS
28727                                           ! 4038             outb(0x3c5, read_byte(ES, BX)); BX++;
28728                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28729 76F3           FF76         08            push	8[bp]
28730                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28731 76F6           FF76         06            push	6[bp]
28732                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28733 76F9           E8         0670            call	_read_byte
28734 76FC           83C4                   04  add	sp,*4
28735                                           ! Debug: list unsigned char = al+0 (used reg = )
28736 76FF           30E4                       xor	ah,ah
28737 7701           50                         push	ax
28738                                           ! Debug: list int = const $3C5 (used reg = )
28739 7702           B8                   03C5  mov	ax,#$3C5
28740 7705           50                         push	ax
28741                                           ! Debug: func () void = outb+0 (used reg = )
28742 7706           E8         06CF            call	_outb
28743 7709           83C4                   04  add	sp,*4
28744                                           !BCC_EOS
28745                                           ! 4038 
28746                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28747 770C           8B46         08            mov	ax,8[bp]
28748 770F           40                         inc	ax
28749 7710           8946         08            mov	8[bp],ax
28750                                           !BCC_EOS
28751                                           ! 4039         }
28752                                           ! 4040         outb(0x3c4, 0);
28753                       00007713            .283:
28754                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28755 7713           8B46         FE            mov	ax,-2[bp]
28756 7716           40                         inc	ax
28757 7717           8946         FE            mov	-2[bp],ax
28758                       0000771A            .284:
28759                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28760 771A           8B46         FE            mov	ax,-2[bp]
28761 771D           3D                   0004  cmp	ax,*4
28762 7720           76           C4            jbe	.285
28763                       00007722            .286:
28764                       00007722            .282:
28765                                           ! Debug: list int = const 0 (used reg = )
28766 7722           31C0                       xor	ax,ax
28767 7724           50                         push	ax
28768                                           ! Debug: list int = const $3C4 (used reg = )
28769 7725           B8                   03C4  mov	ax,#$3C4
28770 7728           50                         push	ax
28771                                           ! Debug: func () void = outb+0 (used reg = )
28772 7729           E8         06AC            call	_outb
28773 772C           83C4                   04  add	sp,*4
28774                                           !BCC_EOS
28775                                           ! 4041         outb(0x3c5, read_byte(ES, BX)); BX++;
28776                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28777 772F           FF76         08            push	8[bp]
28778                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28779 7732           FF76         06            push	6[bp]
28780                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28781 7735           E8         0634            call	_read_byte
28782 7738           83C4                   04  add	sp,*4
28783                                           ! Debug: list unsigned char = al+0 (used reg = )
28784 773B           30E4                       xor	ah,ah
28785 773D           50                         push	ax
28786                                           ! Debug: list int = const $3C5 (used reg = )
28787 773E           B8                   03C5  mov	ax,#$3C5
28788 7741           50                         push	ax
28789                                           ! Debug: func () void = outb+0 (used reg = )
28790 7742           E8         0693            call	_outb
28791 7745           83C4                   04  add	sp,*4
28792                                           !BCC_EOS
28793                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28794 7748           8B46         08            mov	ax,8[bp]
28795 774B           40                         inc	ax
28796 774C           8946         08            mov	8[bp],ax
28797                                           !BCC_EOS
28798                                           ! 4042         outw(crtc_addr,0x0011);
28799                                           ! Debug: list int = const $11 (used reg = )
28800 774F           B8                   0011  mov	ax,*$11
28801 7752           50                         push	ax
28802                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28803 7753           FF76         FC            push	-4[bp]
28804                                           ! Debug: func () void = outw+0 (used reg = )
28805 7756           E8         068F            call	_outw
28806 7759           83C4                   04  add	sp,*4
28807                                           !BCC_EOS
28808                                           ! 4043         for(i=0;i<=0x18;i++) {
28809                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28810 775C           31C0                       xor	ax,ax
28811 775E           8946         FE            mov	-2[bp],ax
28812                                           !BCC_EOS
28813                                           !BCC_EOS
28814 7761           EB           3C            jmp .289
28815                       00007763            .28A:
28816                                           ! 4044             if (i != 0x11) {
28817                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28818 7763           8B46         FE            mov	ax,-2[bp]
28819 7766           3D                   0011  cmp	ax,*$11
28820 7769           74           26            je  	.28B
28821                       0000776B            .28C:
28822                                           ! 4045                 outb(crtc_addr,i);
28823                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28824 776B           FF76         FE            push	-2[bp]
28825                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28826 776E           FF76         FC            push	-4[bp]
28827                                           ! Debug: func () void = outb+0 (used reg = )
28828 7771           E8         0664            call	_outb
28829 7774           83C4                   04  add	sp,*4
28830                                           !BCC_EOS
28831                                           ! 4046                 outb(crtc_addr+1, read_byte(ES, BX));
28832                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28833 7777           FF76         08            push	8[bp]
28834                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28835 777A           FF76         06            push	6[bp]
28836                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28837 777D           E8         05EC            call	_read_byte
28838 7780           83C4                   04  add	sp,*4
28839                                           ! Debug: list unsigned char = al+0 (used reg = )
28840 7783           30E4                       xor	ah,ah
28841 7785           50                         push	ax
28842                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28843 7786           8B46         FC            mov	ax,-4[bp]
28844                                           ! Debug: list unsigned int = ax+1 (used reg = )
28845 7789           40                         inc	ax
28846 778A           50                         push	ax
28847                                           ! Debug: func () void = outb+0 (used reg = )
28848 778B           E8         064A            call	_outb
28849 778E           83C4                   04  add	sp,*4
28850                                           !BCC_EOS
28851                                           ! 4047             }
28852                                           ! 4048             BX++;
28853                       00007791            .28B:
28854                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28855 7791           8B46         08            mov	ax,8[bp]
28856 7794           40                         inc	ax
28857 7795           8946         08            mov	8[bp],ax
28858                                           !BCC_EOS
28859                                           ! 4049         }
28860                                           ! 4050         v = inb(0x3cc) & ~0x01;
28861                       00007798            .288:
28862                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28863 7798           8B46         FE            mov	ax,-2[bp]
28864 779B           40                         inc	ax
28865 779C           8946         FE            mov	-2[bp],ax
28866                       0000779F            .289:
28867                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28868 779F           8B46         FE            mov	ax,-2[bp]
28869 77A2           3D                   0018  cmp	ax,*$18
28870 77A5           76           BC            jbe	.28A
28871                       000077A7            .28D:
28872                       000077A7            .287:
28873                                           ! Debug: list int = const $3CC (used reg = )
28874 77A7           B8                   03CC  mov	ax,#$3CC
28875 77AA           50                         push	ax
28876                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28877 77AB           E8         0614            call	_inb
28878 77AE           44                         inc	sp
28879 77AF           44                         inc	sp
28880                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28881 77B0           24                     FE  and	al,#$FE
28882                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28883 77B2           30E4                       xor	ah,ah
28884 77B4           8946         FA            mov	-6[bp],ax
28885                                           !BCC_EOS
28886                                           ! 4051         if (crtc_addr = 0x3d4)
28887                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28888 77B7           B8                   03D4  mov	ax,#$3D4
28889 77BA           8946         FC            mov	-4[bp],ax
28890 77BD           85C0                       test	ax,ax
28891 77BF           74           08            je  	.28E
28892                       000077C1            .28F:
28893                                           ! 4052             v |= 0x01;
28894                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28895 77C1           8B46         FA            mov	ax,-6[bp]
28896 77C4           0C                     01  or	al,*1
28897 77C6           8946         FA            mov	-6[bp],ax
28898                                           !BCC_EOS
28899                                           ! 4053         outb(0x3c2, v);
28900                       000077C9            .28E:
28901                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28902 77C9           FF76         FA            push	-6[bp]
28903                                           ! Debug: list int = const $3C2 (used reg = )
28904 77CC           B8                   03C2  mov	ax,#$3C2
28905 77CF           50                         push	ax
28906                                           ! Debug: func () void = outb+0 (used reg = )
28907 77D0           E8         0605            call	_outb
28908 77D3           83C4                   04  add	sp,*4
28909                                           !BCC_EOS
28910                                           ! 4054         outb(crtc_addr, 0x11);
28911                                           ! Debug: list int = const $11 (used reg = )
28912 77D6           B8                   0011  mov	ax,*$11
28913 77D9           50                         push	ax
28914                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28915 77DA           FF76         FC            push	-4[bp]
28916                                           ! Debug: func () void = outb+0 (used reg = )
28917 77DD           E8         05F8            call	_outb
28918 77E0           83C4                   04  add	sp,*4
28919                                           !BCC_EOS
28920                                           ! 4055         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28921                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28922 77E3           8B46         08            mov	ax,8[bp]
28923                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28924                                           ! Debug: list unsigned int = ax-7 (used reg = )
28925 77E6           05                   FFF9  add	ax,*-7
28926 77E9           50                         push	ax
28927                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28928 77EA           FF76         06            push	6[bp]
28929                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28930 77ED           E8         057C            call	_read_byte
28931 77F0           83C4                   04  add	sp,*4
28932                                           ! Debug: list unsigned char = al+0 (used reg = )
28933 77F3           30E4                       xor	ah,ah
28934 77F5           50                         push	ax
28935                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28936 77F6           8B46         FC            mov	ax,-4[bp]
28937                                           ! Debug: list unsigned int = ax+1 (used reg = )
28938 77F9           40                         inc	ax
28939 77FA           50                         push	ax
28940                                           ! Debug: func () void = outb+0 (used reg = )
28941 77FB           E8         05DA            call	_outb
28942 77FE           83C4                   04  add	sp,*4
28943                                           !BCC_EOS
28944                                           ! 4056         ar_index = read_byte(ES, addr1 + 0x03);
28945                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28946 7801           8B46         F8            mov	ax,-8[bp]
28947                                           ! Debug: list unsigned int = ax+3 (used reg = )
28948 7804           05                   0003  add	ax,*3
28949 7807           50                         push	ax
28950                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28951 7808           FF76         06            push	6[bp]
28952                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28953 780B           E8         055E            call	_read_byte
28954 780E           83C4                   04  add	sp,*4
28955                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28956 7811           30E4                       xor	ah,ah
28957 7813           8946         F6            mov	-$A[bp],ax
28958                                           !BCC_EOS
28959                                           ! 4057         inb(0x3da);
28960                                           ! Debug: list int = const $3DA (used reg = )
28961 7816           B8                   03DA  mov	ax,#$3DA
28962 7819           50                         push	ax
28963                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28964 781A           E8         05A5            call	_inb
28965 781D           44                         inc	sp
28966 781E           44                         inc	sp
28967                                           !BCC_EOS
28968                                           ! 4058         for(i=0;i<=0x13;i++) {
28969                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28970 781F           31C0                       xor	ax,ax
28971 7821           8946         FE            mov	-2[bp],ax
28972                                           !BCC_EOS
28973                                           !BCC_EOS
28974 7824           EB           3C            jmp .292
28975                       00007826            .293:
28976                                           ! 4059             outb(0x3c0, i | (ar_index & 0x20));
28977                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28978 7826           8A46         F6            mov	al,-$A[bp]
28979 7829           24                     20  and	al,*$20
28980                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28981                                           ! Debug: expression subtree swapping
28982 782B           30E4                       xor	ah,ah
28983 782D           0B46         FE            or	ax,-2[bp]
28984                                           ! Debug: list unsigned int = ax+0 (used reg = )
28985 7830           50                         push	ax
28986                                           ! Debug: list int = const $3C0 (used reg = )
28987 7831           B8                   03C0  mov	ax,#$3C0
28988 7834           50                         push	ax
28989                                           ! Debug: func () void = outb+0 (used reg = )
28990 7835           E8         05A0            call	_outb
28991 7838           83C4                   04  add	sp,*4
28992                                           !BCC_EOS
28993                                           ! 4060             outb(0x3c0, read_byte(ES, BX)); BX++;
28994                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28995 783B           FF76         08            push	8[bp]
28996                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28997 783E           FF76         06            push	6[bp]
28998                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28999 7841           E8         0528            call	_read_byte
29000 7844           83C4                   04  add	sp,*4
29001                                           ! Debug: list unsigned char = al+0 (used reg = )
29002 7847           30E4                       xor	ah,ah
29003 7849           50                         push	ax
29004                                           ! Debug: list int = const $3C0 (used reg = )
29005 784A           B8                   03C0  mov	ax,#$3C0
29006 784D           50                         push	ax
29007                                           ! Debug: func () void = outb+0 (used reg = )
29008 784E           E8         0587            call	_outb
29009 7851           83C4                   04  add	sp,*4
29010                                           !BCC_EOS
29011                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29012 7854           8B46         08            mov	ax,8[bp]
29013 7857           40                         inc	ax
29014 7858           8946         08            mov	8[bp],ax
29015                                           !BCC_EOS
29016                                           ! 4061         }
29017                                           ! 4062         outb(0x3c0, ar_index);
29018                       0000785B            .291:
29019                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29020 785B           8B46         FE            mov	ax,-2[bp]
29021 785E           40                         inc	ax
29022 785F           8946         FE            mov	-2[bp],ax
29023                       00007862            .292:
29024                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
29025 7862           8B46         FE            mov	ax,-2[bp]
29026 7865           3D                   0013  cmp	ax,*$13
29027 7868           76           BC            jbe	.293
29028                       0000786A            .294:
29029                       0000786A            .290:
29030                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
29031 786A           FF76         F6            push	-$A[bp]
29032                                           ! Debug: list int = const $3C0 (used reg = )
29033 786D           B8                   03C0  mov	ax,#$3C0
29034 7870           50                         push	ax
29035                                           ! Debug: func () void = outb+0 (used reg = )
29036 7871           E8         0564            call	_outb
29037 7874           83C4                   04  add	sp,*4
29038                                           !BCC_EOS
29039                                           ! 4063         inb(0x3da);
29040                                           ! Debug: list int = const $3DA (used reg = )
29041 7877           B8                   03DA  mov	ax,#$3DA
29042 787A           50                         push	ax
29043                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29044 787B           E8         0544            call	_inb
29045 787E           44                         inc	sp
29046 787F           44                         inc	sp
29047                                           !BCC_EOS
29048                                           ! 4064         for(i=0;i<=8;i++) {
29049                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29050 7880           31C0                       xor	ax,ax
29051 7882           8946         FE            mov	-2[bp],ax
29052                                           !BCC_EOS
29053                                           !BCC_EOS
29054 7885           EB           34            jmp .297
29055                       00007887            .298:
29056                                           ! 4065             outb(0x3ce,i);
29057                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
29058 7887           FF76         FE            push	-2[bp]
29059                                           ! Debug: list int = const $3CE (used reg = )
29060 788A           B8                   03CE  mov	ax,#$3CE
29061 788D           50                         push	ax
29062                                           ! Debug: func () void = outb+0 (used reg = )
29063 788E           E8         0547            call	_outb
29064 7891           83C4                   04  add	sp,*4
29065                                           !BCC_EOS
29066                                           ! 4066             outb(0x3cf, read_byte(ES, BX)); BX++;
29067                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29068 7894           FF76         08            push	8[bp]
29069                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29070 7897           FF76         06            push	6[bp]
29071                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29072 789A           E8         04CF            call	_read_byte
29073 789D           83C4                   04  add	sp,*4
29074                                           ! Debug: list unsigned char = al+0 (used reg = )
29075 78A0           30E4                       xor	ah,ah
29076 78A2           50                         push	ax
29077                                           ! Debug: list int = const $3CF (used reg = )
29078 78A3           B8                   03CF  mov	ax,#$3CF
29079 78A6           50                         push	ax
29080                                           ! Debug: func () void = outb+0 (used reg = )
29081 78A7           E8         052E            call	_outb
29082 78AA           83C4                   04  add	sp,*4
29083                                           !BCC_EOS
29084                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29085 78AD           8B46         08            mov	ax,8[bp]
29086 78B0           40                         inc	ax
29087 78B1           8946         08            mov	8[bp],ax
29088                                           !BCC_EOS
29089                                           ! 4067         }
29090                                           ! 4068         BX += 2;
29091                       000078B4            .296:
29092                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29093 78B4           8B46         FE            mov	ax,-2[bp]
29094 78B7           40                         inc	ax
29095 78B8           8946         FE            mov	-2[bp],ax
29096                       000078BB            .297:
29097                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29098 78BB           8B46         FE            mov	ax,-2[bp]
29099 78BE           3D                   0008  cmp	ax,*8
29100 78C1           76           C4            jbe	.298
29101                       000078C3            .299:
29102                       000078C3            .295:
29103                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29104 78C3           8B46         08            mov	ax,8[bp]
29105 78C6           40                         inc	ax
29106 78C7           40                         inc	ax
29107 78C8           8946         08            mov	8[bp],ax
29108                                           !BCC_EOS
29109                                           ! 4069         BX += 4;
29110                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
29111 78CB           8B46         08            mov	ax,8[bp]
29112 78CE           05                   0004  add	ax,*4
29113 78D1           8946         08            mov	8[bp],ax
29114                                           !BCC_EOS
29115                                           ! 4070         outb(0x3c4, read_byte(ES, addr1)); addr1++;
29116                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29117 78D4           FF76         F8            push	-8[bp]
29118                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29119 78D7           FF76         06            push	6[bp]
29120                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29121 78DA           E8         048F            call	_read_byte
29122 78DD           83C4                   04  add	sp,*4
29123                                           ! Debug: list unsigned char = al+0 (used reg = )
29124 78E0           30E4                       xor	ah,ah
29125 78E2           50                         push	ax
29126                                           ! Debug: list int = const $3C4 (used reg = )
29127 78E3           B8                   03C4  mov	ax,#$3C4
29128 78E6           50                         push	ax
29129                                           ! Debug: func () void = outb+0 (used reg = )
29130 78E7           E8         04EE            call	_outb
29131 78EA           83C4                   04  add	sp,*4
29132                                           !BCC_EOS
29133                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29134 78ED           8B46         F8            mov	ax,-8[bp]
29135 78F0           40                         inc	ax
29136 78F1           8946         F8            mov	-8[bp],ax
29137                                           !BCC_EOS
29138                                           ! 4071         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
29139                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29140 78F4           FF76         F8            push	-8[bp]
29141                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29142 78F7           FF76         06            push	6[bp]
29143                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29144 78FA           E8         046F            call	_read_byte
29145 78FD           83C4                   04  add	sp,*4
29146                                           ! Debug: list unsigned char = al+0 (used reg = )
29147 7900           30E4                       xor	ah,ah
29148 7902           50                         push	ax
29149                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29150 7903           FF76         FC            push	-4[bp]
29151                                           ! Debug: func () void = outb+0 (used reg = )
29152 7906           E8         04CF            call	_outb
29153 7909           83C4                   04  add	sp,*4
29154                                           !BCC_EOS
29155                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29156 790C           8B46         F8            mov	ax,-8[bp]
29157 790F           40                         inc	ax
29158 7910           8946         F8            mov	-8[bp],ax
29159                                           !BCC_EOS
29160                                           ! 4072         outb(0x3ce, read_byte(ES, addr1)); addr1++;
29161                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29162 7913           FF76         F8            push	-8[bp]
29163                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29164 7916           FF76         06            push	6[bp]
29165                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29166 7919           E8         0450            call	_read_byte
29167 791C           83C4                   04  add	sp,*4
29168                                           ! Debug: list unsigned char = al+0 (used reg = )
29169 791F           30E4                       xor	ah,ah
29170 7921           50                         push	ax
29171                                           ! Debug: list int = const $3CE (used reg = )
29172 7922           B8                   03CE  mov	ax,#$3CE
29173 7925           50                         push	ax
29174                                           ! Debug: func () void = outb+0 (used reg = )
29175 7926           E8         04AF            call	_outb
29176 7929           83C4                   04  add	sp,*4
29177                                           !BCC_EOS
29178                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29179 792C           8B46         F8            mov	ax,-8[bp]
29180 792F           40                         inc	ax
29181 7930           8946         F8            mov	-8[bp],ax
29182                                           !BCC_EOS
29183                                           ! 4073         addr1++;
29184                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29185 7933           8B46         F8            mov	ax,-8[bp]
29186 7936           40                         inc	ax
29187 7937           8946         F8            mov	-8[bp],ax
29188                                           !BCC_EOS
29189                                           ! 4074         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
29190                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29191 793A           FF76         F8            push	-8[bp]
29192                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29193 793D           FF76         06            push	6[bp]
29194                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29195 7940           E8         0429            call	_read_byte
29196 7943           83C4                   04  add	sp,*4
29197                                           ! Debug: list unsigned char = al+0 (used reg = )
29198 7946           30E4                       xor	ah,ah
29199 7948           50                         push	ax
29200                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29201 7949           8B46         FC            mov	ax,-4[bp]
29202                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
29203                                           ! Debug: list unsigned int = ax+6 (used reg = )
29204 794C           05                   0006  add	ax,*6
29205 794F           50                         push	ax
29206                                           ! Debug: func () void = outb+0 (used reg = )
29207 7950           E8         0485            call	_outb
29208 7953           83C4                   04  add	sp,*4
29209                                           !BCC_EOS
29210                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29211 7956           8B46         F8            mov	ax,-8[bp]
29212 7959           40                         inc	ax
29213 795A           8946         F8            mov	-8[bp],ax
29214                                           !BCC_EOS
29215                                           ! 4075     }
29216                                           ! 4076     if (CX & 2) {
29217                       0000795D            .280:
29218                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
29219 795D           8A46         04            mov	al,4[bp]
29220 7960           24                     02  and	al,*2
29221 7962           84C0                       test	al,al
29222 7964         0F84         0270            beq 	.29A
29223                       00007968            .29B:
29224                                           ! 4077         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
29225                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29226 7968           FF76         08            push	8[bp]
29227                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29228 796B           FF76         06            push	6[bp]
29229                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29230 796E           E8         03FB            call	_read_byte
29231 7971           83C4                   04  add	sp,*4
29232                                           ! Debug: list unsigned char = al+0 (used reg = )
29233 7974           30E4                       xor	ah,ah
29234 7976           50                         push	ax
29235                                           ! Debug: list int = const $49 (used reg = )
29236 7977           B8                   0049  mov	ax,*$49
29237 797A           50                         push	ax
29238                                           ! Debug: list int = const $40 (used reg = )
29239 797B           B8                   0040  mov	ax,*$40
29240 797E           50                         push	ax
29241                                           ! Debug: func () void = write_byte+0 (used reg = )
29242 797F           E8         0410            call	_write_byte
29243 7982           83C4                   06  add	sp,*6
29244                                           !BCC_EOS
29245                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29246 7985           8B46         08            mov	ax,8[bp]
29247 7988           40                         inc	ax
29248 7989           8946         08            mov	8[bp],ax
29249                                           !BCC_EOS
29250                                           ! 4078         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
29251                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29252 798C           FF76         08            push	8[bp]
29253                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29254 798F           FF76         06            push	6[bp]
29255                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29256 7992           E8         03EA            call	_read_word
29257 7995           83C4                   04  add	sp,*4
29258                                           ! Debug: list unsigned short = ax+0 (used reg = )
29259 7998           50                         push	ax
29260                                           ! Debug: list int = const $4A (used reg = )
29261 7999           B8                   004A  mov	ax,*$4A
29262 799C           50                         push	ax
29263                                           ! Debug: list int = const $40 (used reg = )
29264 799D           B8                   0040  mov	ax,*$40
29265 79A0           50                         push	ax
29266                                           ! Debug: func () void = write_word+0 (used reg = )
29267 79A1           E8         0406            call	_write_word
29268 79A4           83C4                   06  add	sp,*6
29269                                           !BCC_EOS
29270                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29271 79A7           8B46         08            mov	ax,8[bp]
29272 79AA           40                         inc	ax
29273 79AB           40                         inc	ax
29274 79AC           8946         08            mov	8[bp],ax
29275                                           !BCC_EOS
29276                                           ! 4079         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
29277                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29278 79AF           FF76         08            push	8[bp]
29279                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29280 79B2           FF76         06            push	6[bp]
29281                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29282 79B5           E8         03C7            call	_read_word
29283 79B8           83C4                   04  add	sp,*4
29284                                           ! Debug: list unsigned short = ax+0 (used reg = )
29285 79BB           50                         push	ax
29286                                           ! Debug: list int = const $4C (used reg = )
29287 79BC           B8                   004C  mov	ax,*$4C
29288 79BF           50                         push	ax
29289                                           ! Debug: list int = const $40 (used reg = )
29290 79C0           B8                   0040  mov	ax,*$40
29291 79C3           50                         push	ax
29292                                           ! Debug: func () void = write_word+0 (used reg = )
29293 79C4           E8         03E3            call	_write_word
29294 79C7           83C4                   06  add	sp,*6
29295                                           !BCC_EOS
29296                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29297 79CA           8B46         08            mov	ax,8[bp]
29298 79CD           40                         inc	ax
29299 79CE           40                         inc	ax
29300 79CF           8946         08            mov	8[bp],ax
29301                                           !BCC_EOS
29302                                           ! 4080         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29303                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29304 79D2           FF76         08            push	8[bp]
29305                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29306 79D5           FF76         06            push	6[bp]
29307                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29308 79D8           E8         03A4            call	_read_word
29309 79DB           83C4                   04  add	sp,*4
29310                                           ! Debug: list unsigned short = ax+0 (used reg = )
29311 79DE           50                         push	ax
29312                                           ! Debug: list int = const $63 (used reg = )
29313 79DF           B8                   0063  mov	ax,*$63
29314 79E2           50                         push	ax
29315                                           ! Debug: list int = const $40 (used reg = )
29316 79E3           B8                   0040  mov	ax,*$40
29317 79E6           50                         push	ax
29318                                           ! Debug: func () void = write_word+0 (used reg = )
29319 79E7           E8         03C0            call	_write_word
29320 79EA           83C4                   06  add	sp,*6
29321                                           !BCC_EOS
29322                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29323 79ED           8B46         08            mov	ax,8[bp]
29324 79F0           40                         inc	ax
29325 79F1           40                         inc	ax
29326 79F2           8946         08            mov	8[bp],ax
29327                                           !BCC_EOS
29328                                           ! 4081         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29329                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29330 79F5           FF76         08            push	8[bp]
29331                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29332 79F8           FF76         06            push	6[bp]
29333                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29334 79FB           E8         036E            call	_read_byte
29335 79FE           83C4                   04  add	sp,*4
29336                                           ! Debug: list unsigned char = al+0 (used reg = )
29337 7A01           30E4                       xor	ah,ah
29338 7A03           50                         push	ax
29339                                           ! Debug: list int = const $84 (used reg = )
29340 7A04           B8                   0084  mov	ax,#$84
29341 7A07           50                         push	ax
29342                                           ! Debug: list int = const $40 (used reg = )
29343 7A08           B8                   0040  mov	ax,*$40
29344 7A0B           50                         push	ax
29345                                           ! Debug: func () void = write_byte+0 (used reg = )
29346 7A0C           E8         0383            call	_write_byte
29347 7A0F           83C4                   06  add	sp,*6
29348                                           !BCC_EOS
29349                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29350 7A12           8B46         08            mov	ax,8[bp]
29351 7A15           40                         inc	ax
29352 7A16           8946         08            mov	8[bp],ax
29353                                           !BCC_EOS
29354                                           ! 4082         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29355                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29356 7A19           FF76         08            push	8[bp]
29357                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29358 7A1C           FF76         06            push	6[bp]
29359                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29360 7A1F           E8         035D            call	_read_word
29361 7A22           83C4                   04  add	sp,*4
29362                                           ! Debug: list unsigned short = ax+0 (used reg = )
29363 7A25           50                         push	ax
29364                                           ! Debug: list int = const $85 (used reg = )
29365 7A26           B8                   0085  mov	ax,#$85
29366 7A29           50                         push	ax
29367                                           ! Debug: list int = const $40 (used reg = )
29368 7A2A           B8                   0040  mov	ax,*$40
29369 7A2D           50                         push	ax
29370                                           ! Debug: func () void = write_word+0 (used reg = )
29371 7A2E           E8         0379            call	_write_word
29372 7A31           83C4                   06  add	sp,*6
29373                                           !BCC_EOS
29374                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29375 7A34           8B46         08            mov	ax,8[bp]
29376 7A37           40                         inc	ax
29377 7A38           40                         inc	ax
29378 7A39           8946         08            mov	8[bp],ax
29379                                           !BCC_EOS
29380                                           ! 4083         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29381                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29382 7A3C           FF76         08            push	8[bp]
29383                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29384 7A3F           FF76         06            push	6[bp]
29385                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29386 7A42           E8         0327            call	_read_byte
29387 7A45           83C4                   04  add	sp,*4
29388                                           ! Debug: list unsigned char = al+0 (used reg = )
29389 7A48           30E4                       xor	ah,ah
29390 7A4A           50                         push	ax
29391                                           ! Debug: list int = const $87 (used reg = )
29392 7A4B           B8                   0087  mov	ax,#$87
29393 7A4E           50                         push	ax
29394                                           ! Debug: list int = const $40 (used reg = )
29395 7A4F           B8                   0040  mov	ax,*$40
29396 7A52           50                         push	ax
29397                                           ! Debug: func () void = write_byte+0 (used reg = )
29398 7A53           E8         033C            call	_write_byte
29399 7A56           83C4                   06  add	sp,*6
29400                                           !BCC_EOS
29401                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29402 7A59           8B46         08            mov	ax,8[bp]
29403 7A5C           40                         inc	ax
29404 7A5D           8946         08            mov	8[bp],ax
29405                                           !BCC_EOS
29406                                           ! 4084         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29407                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29408 7A60           FF76         08            push	8[bp]
29409                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29410 7A63           FF76         06            push	6[bp]
29411                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29412 7A66           E8         0303            call	_read_byte
29413 7A69           83C4                   04  add	sp,*4
29414                                           ! Debug: list unsigned char = al+0 (used reg = )
29415 7A6C           30E4                       xor	ah,ah
29416 7A6E           50                         push	ax
29417                                           ! Debug: list int = const $88 (used reg = )
29418 7A6F           B8                   0088  mov	ax,#$88
29419 7A72           50                         push	ax
29420                                           ! Debug: list int = const $40 (used reg = )
29421 7A73           B8                   0040  mov	ax,*$40
29422 7A76           50                         push	ax
29423                                           ! Debug: func () void = write_byte+0 (used reg = )
29424 7A77           E8         0318            call	_write_byte
29425 7A7A           83C4                   06  add	sp,*6
29426                                           !BCC_EOS
29427                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29428 7A7D           8B46         08            mov	ax,8[bp]
29429 7A80           40                         inc	ax
29430 7A81           8946         08            mov	8[bp],ax
29431                                           !BCC_EOS
29432                                           ! 4085         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29433                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29434 7A84           FF76         08            push	8[bp]
29435                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29436 7A87           FF76         06            push	6[bp]
29437                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29438 7A8A           E8         02DF            call	_read_byte
29439 7A8D           83C4                   04  add	sp,*4
29440                                           ! Debug: list unsigned char = al+0 (used reg = )
29441 7A90           30E4                       xor	ah,ah
29442 7A92           50                         push	ax
29443                                           ! Debug: list int = const $89 (used reg = )
29444 7A93           B8                   0089  mov	ax,#$89
29445 7A96           50                         push	ax
29446                                           ! Debug: list int = const $40 (used reg = )
29447 7A97           B8                   0040  mov	ax,*$40
29448 7A9A           50                         push	ax
29449                                           ! Debug: func () void = write_byte+0 (used reg = )
29450 7A9B           E8         02F4            call	_write_byte
29451 7A9E           83C4                   06  add	sp,*6
29452                                           !BCC_EOS
29453                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29454 7AA1           8B46         08            mov	ax,8[bp]
29455 7AA4           40                         inc	ax
29456 7AA5           8946         08            mov	8[bp],ax
29457                                           !BCC_EOS
29458                                           ! 4086         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29459                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29460 7AA8           FF76         08            push	8[bp]
29461                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29462 7AAB           FF76         06            push	6[bp]
29463                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29464 7AAE           E8         02CE            call	_read_word
29465 7AB1           83C4                   04  add	sp,*4
29466                                           ! Debug: list unsigned short = ax+0 (used reg = )
29467 7AB4           50                         push	ax
29468                                           ! Debug: list int = const $60 (used reg = )
29469 7AB5           B8                   0060  mov	ax,*$60
29470 7AB8           50                         push	ax
29471                                           ! Debug: list int = const $40 (used reg = )
29472 7AB9           B8                   0040  mov	ax,*$40
29473 7ABC           50                         push	ax
29474                                           ! Debug: func () void = write_word+0 (used reg = )
29475 7ABD           E8         02EA            call	_write_word
29476 7AC0           83C4                   06  add	sp,*6
29477                                           !BCC_EOS
29478                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29479 7AC3           8B46         08            mov	ax,8[bp]
29480 7AC6           40                         inc	ax
29481 7AC7           40                         inc	ax
29482 7AC8           8946         08            mov	8[bp],ax
29483                                           !BCC_EOS
29484                                           ! 4087         for(i=0;i<8;i++) {
29485                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29486 7ACB           31C0                       xor	ax,ax
29487 7ACD           8946         FE            mov	-2[bp],ax
29488                                           !BCC_EOS
29489                                           !BCC_EOS
29490 7AD0           EB           2F            jmp .29E
29491                       00007AD2            .29F:
29492                                           ! 4088             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29493                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29494 7AD2           FF76         08            push	8[bp]
29495                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29496 7AD5           FF76         06            push	6[bp]
29497                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29498 7AD8           E8         02A4            call	_read_word
29499 7ADB           83C4                   04  add	sp,*4
29500                                           ! Debug: list unsigned short = ax+0 (used reg = )
29501 7ADE           50                         push	ax
29502                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29503                                           ! Debug: expression subtree swapping
29504 7ADF           8B46         FE            mov	ax,-2[bp]
29505 7AE2           D1E0                       shl	ax,*1
29506                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29507                                           ! Debug: expression subtree swapping
29508                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29509 7AE4           05                   0050  add	ax,*$50
29510 7AE7           50                         push	ax
29511                                           ! Debug: list int = const $40 (used reg = )
29512 7AE8           B8                   0040  mov	ax,*$40
29513 7AEB           50                         push	ax
29514                                           ! Debug: func () void = write_word+0 (used reg = )
29515 7AEC           E8         02BB            call	_write_word
29516 7AEF           83C4                   06  add	sp,*6
29517                                           !BCC_EOS
29518                                           ! 4089             BX += 2;
29519                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29520 7AF2           8B46         08            mov	ax,8[bp]
29521 7AF5           40                         inc	ax
29522 7AF6           40                         inc	ax
29523 7AF7           8946         08            mov	8[bp],ax
29524                                           !BCC_EOS
29525                                           ! 4090         }
29526                                           ! 4091         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29527                       00007AFA            .29D:
29528                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29529 7AFA           8B46         FE            mov	ax,-2[bp]
29530 7AFD           40                         inc	ax
29531 7AFE           8946         FE            mov	-2[bp],ax
29532                       00007B01            .29E:
29533                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29534 7B01           8B46         FE            mov	ax,-2[bp]
29535 7B04           3D                   0008  cmp	ax,*8
29536 7B07           72           C9            jb 	.29F
29537                       00007B09            .2A0:
29538                       00007B09            .29C:
29539                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29540 7B09           FF76         08            push	8[bp]
29541                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29542 7B0C           FF76         06            push	6[bp]
29543                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29544 7B0F           E8         026D            call	_read_word
29545 7B12           83C4                   04  add	sp,*4
29546                                           ! Debug: list unsigned short = ax+0 (used reg = )
29547 7B15           50                         push	ax
29548                                           ! Debug: list int = const $4E (used reg = )
29549 7B16           B8                   004E  mov	ax,*$4E
29550 7B19           50                         push	ax
29551                                           ! Debug: list int = const $40 (used reg = )
29552 7B1A           B8                   0040  mov	ax,*$40
29553 7B1D           50                         push	ax
29554                                           ! Debug: func () void = write_word+0 (used reg = )
29555 7B1E           E8         0289            call	_write_word
29556 7B21           83C4                   06  add	sp,*6
29557                                           !BCC_EOS
29558                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29559 7B24           8B46         08            mov	ax,8[bp]
29560 7B27           40                         inc	ax
29561 7B28           40                         inc	ax
29562 7B29           8946         08            mov	8[bp],ax
29563                                           !BCC_EOS
29564                                           ! 4092         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29565                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29566 7B2C           FF76         08            push	8[bp]
29567                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29568 7B2F           FF76         06            push	6[bp]
29569                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29570 7B32           E8         0237            call	_read_byte
29571 7B35           83C4                   04  add	sp,*4
29572                                           ! Debug: list unsigned char = al+0 (used reg = )
29573 7B38           30E4                       xor	ah,ah
29574 7B3A           50                         push	ax
29575                                           ! Debug: list int = const $62 (used reg = )
29576 7B3B           B8                   0062  mov	ax,*$62
29577 7B3E           50                         push	ax
29578                                           ! Debug: list int = const $40 (used reg = )
29579 7B3F           B8                   0040  mov	ax,*$40
29580 7B42           50                         push	ax
29581                                           ! Debug: func () void = write_byte+0 (used reg = )
29582 7B43           E8         024C            call	_write_byte
29583 7B46           83C4                   06  add	sp,*6
29584                                           !BCC_EOS
29585                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29586 7B49           8B46         08            mov	ax,8[bp]
29587 7B4C           40                         inc	ax
29588 7B4D           8946         08            mov	8[bp],ax
29589                                           !BCC_EOS
29590                                           ! 4093         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2
29591                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29592 7B50           FF76         08            push	8[bp]
29593                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29594 7B53           FF76         06            push	6[bp]
29595                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29596 7B56           E8         0226            call	_read_word
29597 7B59           83C4                   04  add	sp,*4
29598                                           ! Debug: list unsigned short = ax+0 (used reg = )
29599 7B5C           50                         push	ax
29600                                           ! Debug: list int = const $7C (used reg = )
29601 7B5D           B8                   007C  mov	ax,*$7C
29602 7B60           50                         push	ax
29603                                           ! Debug: list int = const 0 (used reg = )
29604 7B61           31C0                       xor	ax,ax
29605 7B63           50                         push	ax
29606                                           ! Debug: func () void = write_word+0 (used reg = )
29607 7B64           E8         0243            call	_write_word
29608 7B67           83C4                   06  add	sp,*6
29609                                           !BCC_EOS
29610                                           ! 4093 ;
29611                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29612 7B6A           8B46         08            mov	ax,8[bp]
29613 7B6D           40                         inc	ax
29614 7B6E           40                         inc	ax
29615 7B6F           8946         08            mov	8[bp],ax
29616                                           !BCC_EOS
29617                                           ! 4094         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29618                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29619 7B72           FF76         08            push	8[bp]
29620                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29621 7B75           FF76         06            push	6[bp]
29622                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29623 7B78           E8         0204            call	_read_word
29624 7B7B           83C4                   04  add	sp,*4
29625                                           ! Debug: list unsigned short = ax+0 (used reg = )
29626 7B7E           50                         push	ax
29627                                           ! Debug: list int = const $7E (used reg = )
29628 7B7F           B8                   007E  mov	ax,*$7E
29629 7B82           50                         push	ax
29630                                           ! Debug: list int = const 0 (used reg = )
29631 7B83           31C0                       xor	ax,ax
29632 7B85           50                         push	ax
29633                                           ! Debug: func () void = write_word+0 (used reg = )
29634 7B86           E8         0221            call	_write_word
29635 7B89           83C4                   06  add	sp,*6
29636                                           !BCC_EOS
29637                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29638 7B8C           8B46         08            mov	ax,8[bp]
29639 7B8F           40                         inc	ax
29640 7B90           40                         inc	ax
29641 7B91           8946         08            mov	8[bp],ax
29642                                           !BCC_EOS
29643                                           ! 4095         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29644                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29645 7B94           FF76         08            push	8[bp]
29646                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29647 7B97           FF76         06            push	6[bp]
29648                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29649 7B9A           E8         01E2            call	_read_word
29650 7B9D           83C4                   04  add	sp,*4
29651                                           ! Debug: list unsigned short = ax+0 (used reg = )
29652 7BA0           50                         push	ax
29653                                           ! Debug: list int = const $10C (used reg = )
29654 7BA1           B8                   010C  mov	ax,#$10C
29655 7BA4           50                         push	ax
29656                                           ! Debug: list int = const 0 (used reg = )
29657 7BA5           31C0                       xor	ax,ax
29658 7BA7           50                         push	ax
29659                                           ! Debug: func () void = write_word+0 (used reg = )
29660 7BA8           E8         01FF            call	_write_word
29661 7BAB           83C4                   06  add	sp,*6
29662                                           !BCC_EOS
29663                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29664 7BAE           8B46         08            mov	ax,8[bp]
29665 7BB1           40                         inc	ax
29666 7BB2           40                         inc	ax
29667 7BB3           8946         08            mov	8[bp],ax
29668                                           !BCC_EOS
29669                                           ! 4096         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29670                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29671 7BB6           FF76         08            push	8[bp]
29672                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29673 7BB9           FF76         06            push	6[bp]
29674                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29675 7BBC           E8         01C0            call	_read_word
29676 7BBF           83C4                   04  add	sp,*4
29677                                           ! Debug: list unsigned short = ax+0 (used reg = )
29678 7BC2           50                         push	ax
29679                                           ! Debug: list int = const $10E (used reg = )
29680 7BC3           B8                   010E  mov	ax,#$10E
29681 7BC6           50                         push	ax
29682                                           ! Debug: list int = const 0 (used reg = )
29683 7BC7           31C0                       xor	ax,ax
29684 7BC9           50                         push	ax
29685                                           ! Debug: func () void = write_word+0 (used reg = )
29686 7BCA           E8         01DD            call	_write_word
29687 7BCD           83C4                   06  add	sp,*6
29688                                           !BCC_EOS
29689                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29690 7BD0           8B46         08            mov	ax,8[bp]
29691 7BD3           40                         inc	ax
29692 7BD4           40                         inc	ax
29693 7BD5           8946         08            mov	8[bp],ax
29694                                           !BCC_EOS
29695                                           ! 4097     }
29696                                           ! 4098     if (CX & 4) {
29697                       00007BD8            .29A:
29698                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29699 7BD8           8A46         04            mov	al,4[bp]
29700 7BDB           24                     04  and	al,*4
29701 7BDD           84C0                       test	al,al
29702 7BDF         0F84         0096            beq 	.2A1
29703                       00007BE3            .2A2:
29704                                           ! 4099         BX++;
29705                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29706 7BE3           8B46         08            mov	ax,8[bp]
29707 7BE6           40                         inc	ax
29708 7BE7           8946         08            mov	8[bp],ax
29709                                           !BCC_EOS
29710                                           ! 4100         v = read_byte(ES, BX); BX++;
29711                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29712 7BEA           FF76         08            push	8[bp]
29713                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29714 7BED           FF76         06            push	6[bp]
29715                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29716 7BF0           E8         0179            call	_read_byte
29717 7BF3           83C4                   04  add	sp,*4
29718                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29719 7BF6           30E4                       xor	ah,ah
29720 7BF8           8946         FA            mov	-6[bp],ax
29721                                           !BCC_EOS
29722                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29723 7BFB           8B46         08            mov	ax,8[bp]
29724 7BFE           40                         inc	ax
29725 7BFF           8946         08            mov	8[bp],ax
29726                                           !BCC_EOS
29727                                           ! 4101         outb(0x3c6, read_byte(ES, BX)); BX++;
29728                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29729 7C02           FF76         08            push	8[bp]
29730                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29731 7C05           FF76         06            push	6[bp]
29732                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29733 7C08           E8         0161            call	_read_byte
29734 7C0B           83C4                   04  add	sp,*4
29735                                           ! Debug: list unsigned char = al+0 (used reg = )
29736 7C0E           30E4                       xor	ah,ah
29737 7C10           50                         push	ax
29738                                           ! Debug: list int = const $3C6 (used reg = )
29739 7C11           B8                   03C6  mov	ax,#$3C6
29740 7C14           50                         push	ax
29741                                           ! Debug: func () void = outb+0 (used reg = )
29742 7C15           E8         01C0            call	_outb
29743 7C18           83C4                   04  add	sp,*4
29744                                           !BCC_EOS
29745                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29746 7C1B           8B46         08            mov	ax,8[bp]
29747 7C1E           40                         inc	ax
29748 7C1F           8946         08            mov	8[bp],ax
29749                                           !BCC_EOS
29750                                           ! 4102         outb(0x3c8,0x00);
29751                                           ! Debug: list int = const 0 (used reg = )
29752 7C22           31C0                       xor	ax,ax
29753 7C24           50                         push	ax
29754                                           ! Debug: list int = const $3C8 (used reg = )
29755 7C25           B8                   03C8  mov	ax,#$3C8
29756 7C28           50                         push	ax
29757                                           ! Debug: func () void = outb+0 (used reg = )
29758 7C29           E8         01AC            call	_outb
29759 7C2C           83C4                   04  add	sp,*4
29760                                           !BCC_EOS
29761                                           ! 4103         for(i=0;i<256*3;i++) {
29762                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29763 7C2F           31C0                       xor	ax,ax
29764 7C31           8946         FE            mov	-2[bp],ax
29765                                           !BCC_EOS
29766                                           !BCC_EOS
29767 7C34           EB           27            jmp .2A5
29768                       00007C36            .2A6:
29769                                           ! 4104             outb(0x3c9, read_byte(ES, BX)); BX++;
29770                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29771 7C36           FF76         08            push	8[bp]
29772                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29773 7C39           FF76         06            push	6[bp]
29774                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29775 7C3C           E8         012D            call	_read_byte
29776 7C3F           83C4                   04  add	sp,*4
29777                                           ! Debug: list unsigned char = al+0 (used reg = )
29778 7C42           30E4                       xor	ah,ah
29779 7C44           50                         push	ax
29780                                           ! Debug: list int = const $3C9 (used reg = )
29781 7C45           B8                   03C9  mov	ax,#$3C9
29782 7C48           50                         push	ax
29783                                           ! Debug: func () void = outb+0 (used reg = )
29784 7C49           E8         018C            call	_outb
29785 7C4C           83C4                   04  add	sp,*4
29786                                           !BCC_EOS
29787                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29788 7C4F           8B46         08            mov	ax,8[bp]
29789 7C52           40                         inc	ax
29790 7C53           8946         08            mov	8[bp],ax
29791                                           !BCC_EOS
29792                                           ! 4105         }
29793                                           ! 4106         BX++;
29794                       00007C56            .2A4:
29795                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29796 7C56           8B46         FE            mov	ax,-2[bp]
29797 7C59           40                         inc	ax
29798 7C5A           8946         FE            mov	-2[bp],ax
29799                       00007C5D            .2A5:
29800                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29801 7C5D           8B46         FE            mov	ax,-2[bp]
29802 7C60           3D                   0300  cmp	ax,#$300
29803 7C63           72           D1            jb 	.2A6
29804                       00007C65            .2A7:
29805                       00007C65            .2A3:
29806                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29807 7C65           8B46         08            mov	ax,8[bp]
29808 7C68           40                         inc	ax
29809 7C69           8946         08            mov	8[bp],ax
29810                                           !BCC_EOS
29811                                           ! 4107         outb(0x3c8, v);
29812                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29813 7C6C           FF76         FA            push	-6[bp]
29814                                           ! Debug: list int = const $3C8 (used reg = )
29815 7C6F           B8                   03C8  mov	ax,#$3C8
29816 7C72           50                         push	ax
29817                                           ! Debug: func () void = outb+0 (used reg = )
29818 7C73           E8         0162            call	_outb
29819 7C76           83C4                   04  add	sp,*4
29820                                           !BCC_EOS
29821                                           ! 4108     }
29822                                           ! 4109     return BX;
29823                       00007C79            .2A1:
29824 7C79           8B46         08            mov	ax,8[bp]
29825 7C7C           89EC                       mov	sp,bp
29826 7C7E           5D                         pop	bp
29827 7C7F           C3                         ret
29828                                           !BCC_EOS
29829                                           ! 4110 }
29830                                           ! 4111 static Bit8u find_vga_entry(mode)
29831                                           ! 4112 Bit8u mode;
29832                       00007C80            _find_vga_entry:
29833                                           !BCC_EOS
29834                                           ! 4113 {
29835                                           ! 4114  Bit8u i,line=0xFF;
29836 7C80           55                         push	bp
29837 7C81           89E5                       mov	bp,sp
29838 7C83           4C                         dec	sp
29839 7C84           4C                         dec	sp
29840                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29841 7C85           B0                     FF  mov	al,#$FF
29842 7C87           8846         FE            mov	-2[bp],al
29843                                           !BCC_EOS
29844                                           ! 4115  for(i=0;i<=15;i++)
29845                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29846 7C8A           30C0                       xor	al,al
29847 7C8C           8846         FF            mov	-1[bp],al
29848                                           !BCC_EOS
29849                                           !BCC_EOS
29850                                           ! 4116   if(vga_modes[i].svgamode==mode)
29851 7C8F           EB           23            jmp .2AA
29852                       00007C91            .2AB:
29853                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29854 7C91           8A46         FF            mov	al,-1[bp]
29855 7C94           30E4                       xor	ah,ah
29856 7C96           B1                     03  mov	cl,*3
29857 7C98           D3E0                       shl	ax,cl
29858 7C9A           89C3                       mov	bx,ax
29859                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29860 7C9C           8A87       0204            mov	al,_vga_modes[bx]
29861 7CA0           3A46         04            cmp	al,4[bp]
29862 7CA3           75           08            jne 	.2AC
29863                       00007CA5            .2AD:
29864                                           ! 4117    {line=i;
29865                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29866 7CA5           8A46         FF            mov	al,-1[bp]
29867 7CA8           8846         FE            mov	-2[bp],al
29868                                           !BCC_EOS
29869                                           ! 4118     break;
29870 7CAB           EB           0E            jmp .2A8
29871                                           !BCC_EOS
29872                                           ! 4119    }
29873                                           ! 4120  return line;
29874                       00007CAD            .2AC:
29875                       00007CAD            .2A9:
29876                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29877 7CAD           8A46         FF            mov	al,-1[bp]
29878 7CB0           40                         inc	ax
29879 7CB1           8846         FF            mov	-1[bp],al
29880                       00007CB4            .2AA:
29881                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29882 7CB4           8A46         FF            mov	al,-1[bp]
29883 7CB7           3C                     0F  cmp	al,*$F
29884 7CB9           76           D6            jbe	.2AB
29885                       00007CBB            .2AE:
29886                       00007CBB            .2A8:
29887 7CBB           8A46         FE            mov	al,-2[bp]
29888 7CBE           89EC                       mov	sp,bp
29889 7CC0           5D                         pop	bp
29890 7CC1           C3                         ret
29891                                           !BCC_EOS
29892                                           ! 4121 }
29893                                           ! 4122 static void memsetb(seg,offset,value,count)
29894                                           ! Register BX used in function find_vga_entry
29895                                           ! 4123   Bit16u seg;
29896                       00007CC2            _memsetb:
29897                                           !BCC_EOS
29898                                           ! 4124   Bit16u offset;
29899                                           !BCC_EOS
29900                                           ! 4125   Bit16u value;
29901                                           !BCC_EOS
29902                                           ! 4126   Bit16u count;
29903                                           !BCC_EOS
29904                                           ! 4127 {
29905                                           ! 4128 #asm
29906                                           !BCC_ASM
29907                       00000008            _memsetb.count	set	8
29908                       00000002            _memsetb.seg	set	2
29909                       00000006            _memsetb.value	set	6
29910                       00000004            _memsetb.offset	set	4
29911 7CC2           55                           push bp
29912 7CC3           89E5                         mov bp, sp
29913 7CC5           50                             push ax
29914 7CC6           51                             push cx
29915 7CC7           06                             push es
29916 7CC8           57                             push di
29917 7CC9           8B4E         0A                mov cx, 10[bp] ; count
29918 7CCC           83F9                   00      cmp cx, #0x00
29919 7CCF           74           10                je memsetb_end
29920 7CD1           8B46         04                mov ax, 4[bp] ; segment
29921 7CD4           8EC0                           mov es, ax
29922 7CD6           8B46         06                mov ax, 6[bp] ; offset
29923 7CD9           89C7                           mov di, ax
29924 7CDB           8A46         08                mov al, 8[bp] ; value
29925 7CDE           FC                             cld
29926 7CDF           F3                             rep
29927 7CE0           AA                              stosb
29928                       00007CE1            memsetb_end:
29929 7CE1           5F                             pop di
29930 7CE2           07                             pop es
29931 7CE3           59                             pop cx
29932 7CE4           58                             pop ax
29933 7CE5           5D                           pop bp
29934                                           ! 4152 endasm
29935                                           !BCC_ENDASM
29936                                           ! 4153 }
29937 7CE6           C3                         ret
29938                                           ! 4154 static void memsetw(seg,offset,value,count)
29939                                           ! 4155   Bit16u seg;
29940                       00007CE7            _memsetw:
29941                                           !BCC_EOS
29942                                           ! 4156   Bit16u offset;
29943                                           !BCC_EOS
29944                                           ! 4157   Bit16u value;
29945                                           !BCC_EOS
29946                                           ! 4158   Bit16u count;
29947                                           !BCC_EOS
29948                                           ! 4159 {
29949                                           ! 4160 #asm
29950                                           !BCC_ASM
29951                       00000008            _memsetw.count	set	8
29952                       00000002            _memsetw.seg	set	2
29953                       00000006            _memsetw.value	set	6
29954                       00000004            _memsetw.offset	set	4
29955 7CE7           55                           push bp
29956 7CE8           89E5                         mov bp, sp
29957 7CEA           50                             push ax
29958 7CEB           51                             push cx
29959 7CEC           06                             push es
29960 7CED           57                             push di
29961 7CEE           8B4E         0A                mov cx, 10[bp] ; count
29962 7CF1           83F9                   00      cmp cx, #0x00
29963 7CF4           74           10                je memsetw_end
29964 7CF6           8B46         04                mov ax, 4[bp] ; segment
29965 7CF9           8EC0                           mov es, ax
29966 7CFB           8B46         06                mov ax, 6[bp] ; offset
29967 7CFE           89C7                           mov di, ax
29968 7D00           8B46         08                mov ax, 8[bp] ; value
29969 7D03           FC                             cld
29970 7D04           F3                             rep
29971 7D05           AB                              stosw
29972                       00007D06            memsetw_end:
29973 7D06           5F                             pop di
29974 7D07           07                             pop es
29975 7D08           59                             pop cx
29976 7D09           58                             pop ax
29977 7D0A           5D                           pop bp
29978                                           ! 4184 endasm
29979                                           !BCC_ENDASM
29980                                           ! 4185 }
29981 7D0B           C3                         ret
29982                                           ! 4186 static void memcpyb(dseg,doffset,sseg,soffset,count)
29983                                           ! 4187   Bit16u dseg;
29984                       00007D0C            _memcpyb:
29985                                           !BCC_EOS
29986                                           ! 4188   Bit16u doffset;
29987                                           !BCC_EOS
29988                                           ! 4189   Bit16u sseg;
29989                                           !BCC_EOS
29990                                           ! 4190   Bit16u soffset;
29991                                           !BCC_EOS
29992                                           ! 4191   Bit16u count;
29993                                           !BCC_EOS
29994                                           ! 4192 {
29995                                           ! 4193 #asm
29996                                           !BCC_ASM
29997                       0000000A            _memcpyb.count	set	$A
29998                       00000006            _memcpyb.sseg	set	6
29999                       00000008            _memcpyb.soffset	set	8
30000                       00000002            _memcpyb.dseg	set	2
30001                       00000004            _memcpyb.doffset	set	4
30002 7D0C           55                           push bp
30003 7D0D           89E5                         mov bp, sp
30004 7D0F           50                             push ax
30005 7D10           51                             push cx
30006 7D11           06                             push es
30007 7D12           57                             push di
30008 7D13           1E                             push ds
30009 7D14           56                             push si
30010 7D15           8B4E         0C                mov cx, 12[bp] ; count
30011 7D18           83F9                   00      cmp cx, #0x0000
30012 7D1B           74           17                je memcpyb_end
30013 7D1D           8B46         04                mov ax, 4[bp] ; dsegment
30014 7D20           8EC0                           mov es, ax
30015 7D22           8B46         06                mov ax, 6[bp] ; doffset
30016 7D25           89C7                           mov di, ax
30017 7D27           8B46         08                mov ax, 8[bp] ; ssegment
30018 7D2A           8ED8                           mov ds, ax
30019 7D2C           8B46         0A                mov ax, 10[bp] ; soffset
30020 7D2F           89C6                           mov si, ax
30021 7D31           FC                             cld
30022 7D32           F3                             rep
30023 7D33           A4                              movsb
30024                       00007D34            memcpyb_end:
30025 7D34           5E                             pop si
30026 7D35           1F                             pop ds
30027 7D36           5F                             pop di
30028 7D37           07                             pop es
30029 7D38           59                             pop cx
30030 7D39           58                             pop ax
30031 7D3A           5D                           pop bp
30032                                           ! 4224 endasm
30033                                           !BCC_ENDASM
30034                                           ! 4225 }
30035 7D3B           C3                         ret
30036                                           ! 4226 static void memcpyw(dseg,doffset,sseg,soffset,count)
30037                                           ! 4227   Bit16u dseg;
30038                       00007D3C            _memcpyw:
30039                                           !BCC_EOS
30040                                           ! 4228   Bit16u doffset;
30041                                           !BCC_EOS
30042                                           ! 4229   Bit16u sseg;
30043                                           !BCC_EOS
30044                                           ! 4230   Bit16u soffset;
30045                                           !BCC_EOS
30046                                           ! 4231   Bit16u count;
30047                                           !BCC_EOS
30048                                           ! 4232 {
30049                                           ! 4233 #asm
30050                                           !BCC_ASM
30051                       0000000A            _memcpyw.count	set	$A
30052                       00000006            _memcpyw.sseg	set	6
30053                       00000008            _memcpyw.soffset	set	8
30054                       00000002            _memcpyw.dseg	set	2
30055                       00000004            _memcpyw.doffset	set	4
30056 7D3C           55                           push bp
30057 7D3D           89E5                         mov bp, sp
30058 7D3F           50                             push ax
30059 7D40           51                             push cx
30060 7D41           06                             push es
30061 7D42           57                             push di
30062 7D43           1E                             push ds
30063 7D44           56                             push si
30064 7D45           8B4E         0C                mov cx, 12[bp] ; count
30065 7D48           83F9                   00      cmp cx, #0x0000
30066 7D4B           74           17                je memcpyw_end
30067 7D4D           8B46         04                mov ax, 4[bp] ; dsegment
30068 7D50           8EC0                           mov es, ax
30069 7D52           8B46         06                mov ax, 6[bp] ; doffset
30070 7D55           89C7                           mov di, ax
30071 7D57           8B46         08                mov ax, 8[bp] ; ssegment
30072 7D5A           8ED8                           mov ds, ax
30073 7D5C           8B46         0A                mov ax, 10[bp] ; soffset
30074 7D5F           89C6                           mov si, ax
30075 7D61           FC                             cld
30076 7D62           F3                             rep
30077 7D63           A5                              movsw
30078                       00007D64            memcpyw_end:
30079 7D64           5E                             pop si
30080 7D65           1F                             pop ds
30081 7D66           5F                             pop di
30082 7D67           07                             pop es
30083 7D68           59                             pop cx
30084 7D69           58                             pop ax
30085 7D6A           5D                           pop bp
30086                                           ! 4264 endasm
30087                                           !BCC_ENDASM
30088                                           ! 4265 }
30089 7D6B           C3                         ret
30090                                           ! 4266 static Bit8u
30091                                           ! 4267 read_byte(seg, offset)
30092                                           ! 4268   Bit16u seg;
30093                       00007D6C            _read_byte:
30094                                           !BCC_EOS
30095                                           ! 4269   Bit16u offset;
30096                                           !BCC_EOS
30097                                           ! 4270 {
30098                                           ! 4271 #asm
30099                                           !BCC_ASM
30100                       00000002            _read_byte.seg	set	2
30101                       00000004            _read_byte.offset	set	4
30102 7D6C           55                           push bp
30103 7D6D           89E5                         mov bp, sp
30104 7D6F           53                             push bx
30105 7D70           1E                             push ds
30106 7D71           8B46         04                mov ax, 4[bp] ; segment
30107 7D74           8ED8                           mov ds, ax
30108 7D76           8B5E         06                mov bx, 6[bp] ; offset
30109 7D79           8A07                           mov al, [bx]
30110                                               ;; al = return value (byte)
30111 7D7B           1F                             pop ds
30112 7D7C           5B                             pop bx
30113 7D7D           5D                           pop bp
30114                                           ! 4284 endasm
30115                                           !BCC_ENDASM
30116                                           ! 4285 }
30117 7D7E           C3                         ret
30118                                           ! 4286 static Bit16u
30119                                           ! 4287 read_word(seg, offset)
30120                                           ! 4288   Bit16u seg;
30121                       00007D7F            _read_word:
30122                                           !BCC_EOS
30123                                           ! 4289   Bit16u offset;
30124                                           !BCC_EOS
30125                                           ! 4290 {
30126                                           ! 4291 #asm
30127                                           !BCC_ASM
30128                       00000002            _read_word.seg	set	2
30129                       00000004            _read_word.offset	set	4
30130 7D7F           55                           push bp
30131 7D80           89E5                         mov bp, sp
30132 7D82           53                             push bx
30133 7D83           1E                             push ds
30134 7D84           8B46         04                mov ax, 4[bp] ; segment
30135 7D87           8ED8                           mov ds, ax
30136 7D89           8B5E         06                mov bx, 6[bp] ; offset
30137 7D8C           8B07                           mov ax, [bx]
30138                                               ;; ax = return value (word)
30139 7D8E           1F                             pop ds
30140 7D8F           5B                             pop bx
30141 7D90           5D                           pop bp
30142                                           ! 4304 endasm
30143                                           !BCC_ENDASM
30144                                           ! 4305 }
30145 7D91           C3                         ret
30146                                           ! 4306 static void
30147                                           ! 4307 write_byte(seg, offset, data)
30148                                           ! 4308   Bit16u seg;
30149                       00007D92            _write_byte:
30150                                           !BCC_EOS
30151                                           ! 4309   Bit16u offset;
30152                                           !BCC_EOS
30153                                           ! 4310   Bit8u data;
30154                                           !BCC_EOS
30155                                           ! 4311 {
30156                                           ! 4312 #asm
30157                                           !BCC_ASM
30158                       00000002            _write_byte.seg	set	2
30159                       00000006            _write_byte.data	set	6
30160                       00000004            _write_byte.offset	set	4
30161 7D92           55                           push bp
30162 7D93           89E5                         mov bp, sp
30163 7D95           50                             push ax
30164 7D96           53                             push bx
30165 7D97           1E                             push ds
30166 7D98           8B46         04                mov ax, 4[bp] ; segment
30167 7D9B           8ED8                           mov ds, ax
30168 7D9D           8B5E         06                mov bx, 6[bp] ; offset
30169 7DA0           8A46         08                mov al, 8[bp] ; data byte
30170 7DA3           8807                           mov [bx], al ; write data byte
30171 7DA5           1F                             pop ds
30172 7DA6           5B                             pop bx
30173 7DA7           58                             pop ax
30174 7DA8           5D                           pop bp
30175                                           ! 4327 endasm
30176                                           !BCC_ENDASM
30177                                           ! 4328 }
30178 7DA9           C3                         ret
30179                                           ! 4329 static void
30180                                           ! 4330 write_word(seg, offset, data)
30181                                           ! 4331   Bit16u seg;
30182                       00007DAA            _write_word:
30183                                           !BCC_EOS
30184                                           ! 4332   Bit16u offset;
30185                                           !BCC_EOS
30186                                           ! 4333   Bit16u data;
30187                                           !BCC_EOS
30188                                           ! 4334 {
30189                                           ! 4335 #asm
30190                                           !BCC_ASM
30191                       00000002            _write_word.seg	set	2
30192                       00000006            _write_word.data	set	6
30193                       00000004            _write_word.offset	set	4
30194 7DAA           55                           push bp
30195 7DAB           89E5                         mov bp, sp
30196 7DAD           50                             push ax
30197 7DAE           53                             push bx
30198 7DAF           1E                             push ds
30199 7DB0           8B46         04                mov ax, 4[bp] ; segment
30200 7DB3           8ED8                           mov ds, ax
30201 7DB5           8B5E         06                mov bx, 6[bp] ; offset
30202 7DB8           8B46         08                mov ax, 8[bp] ; data word
30203 7DBB           8907                           mov [bx], ax ; write data word
30204 7DBD           1F                             pop ds
30205 7DBE           5B                             pop bx
30206 7DBF           58                             pop ax
30207 7DC0           5D                           pop bp
30208                                           ! 4350 endasm
30209                                           !BCC_ENDASM
30210                                           ! 4351 }
30211 7DC1           C3                         ret
30212                                           ! 4352  Bit8u
30213                                           ! 4353 inb(port)
30214                                           ! 4354   Bit16u port;
30215                                           export	_inb
30216                       00007DC2            _inb:
30217                                           !BCC_EOS
30218                                           ! 4355 {
30219                                           ! 4356 #asm
30220                                           !BCC_ASM
30221                       00000002            _inb.port	set	2
30222 7DC2           55                           push bp
30223 7DC3           89E5                         mov bp, sp
30224 7DC5           52                             push dx
30225 7DC6           8B56         04                mov dx, 4[bp]
30226 7DC9           EC                             in al, dx
30227 7DCA           5A                             pop dx
30228 7DCB           5D                           pop bp
30229                                           ! 4364 endasm
30230                                           !BCC_ENDASM
30231                                           ! 4365 }
30232 7DCC           C3                         ret
30233                                           ! 4366   Bit16u
30234                                           ! 4367 inw(port)
30235                                           ! 4368   Bit16u port;
30236                                           export	_inw
30237                       00007DCD            _inw:
30238                                           !BCC_EOS
30239                                           ! 4369 {
30240                                           ! 4370 #asm
30241                                           !BCC_ASM
30242                       00000002            _inw.port	set	2
30243 7DCD           55                           push bp
30244 7DCE           89E5                         mov bp, sp
30245 7DD0           52                             push dx
30246 7DD1           8B56         04                mov dx, 4[bp]
30247 7DD4           ED                             in ax, dx
30248 7DD5           5A                             pop dx
30249 7DD6           5D                           pop bp
30250                                           ! 4378 endasm
30251                                           !BCC_ENDASM
30252                                           ! 4379 }
30253 7DD7           C3                         ret
30254                                           ! 4380   void
30255                                           ! 4381 outb(port, val)
30256                                           ! 4382   Bit16u port;
30257                                           export	_outb
30258                       00007DD8            _outb:
30259                                           !BCC_EOS
30260                                           ! 4383   Bit8u val;
30261                                           !BCC_EOS
30262                                           ! 4384 {
30263                                           ! 4385 #asm
30264                                           !BCC_ASM
30265                       00000004            _outb.val	set	4
30266                       00000002            _outb.port	set	2
30267 7DD8           55                           push bp
30268 7DD9           89E5                         mov bp, sp
30269 7DDB           50                             push ax
30270 7DDC           52                             push dx
30271 7DDD           8B56         04                mov dx, 4[bp]
30272 7DE0           8A46         06                mov al, 6[bp]
30273 7DE3           EE                             out dx, al
30274 7DE4           5A                             pop dx
30275 7DE5           58                             pop ax
30276 7DE6           5D                           pop bp
30277                                           ! 4396 endasm
30278                                           !BCC_ENDASM
30279                                           ! 4397 }
30280 7DE7           C3                         ret
30281                                           ! 4398   void
30282                                           ! 4399 outw(port, val)
30283                                           ! 4400   Bit16u port;
30284                                           export	_outw
30285                       00007DE8            _outw:
30286                                           !BCC_EOS
30287                                           ! 4401   Bit16u val;
30288                                           !BCC_EOS
30289                                           ! 4402 {
30290                                           ! 4403 #asm
30291                                           !BCC_ASM
30292                       00000004            _outw.val	set	4
30293                       00000002            _outw.port	set	2
30294 7DE8           55                           push bp
30295 7DE9           89E5                         mov bp, sp
30296 7DEB           50                             push ax
30297 7DEC           52                             push dx
30298 7DED           8B56         04                mov dx, 4[bp]
30299 7DF0           8B46         06                mov ax, 6[bp]
30300 7DF3           EF                             out dx, ax
30301 7DF4           5A                             pop dx
30302 7DF5           58                             pop ax
30303 7DF6           5D                           pop bp
30304                                           ! 4414 endasm
30305                                           !BCC_ENDASM
30306                                           ! 4415 }
30307 7DF7           C3                         ret
30308                                           ! 4416 Bit16u get_SS()
30309                                           ! 4417 {
30310                                           export	_get_SS
30311                       00007DF8            _get_SS:
30312                                           ! 4418 #asm
30313                                           !BCC_ASM
30314 7DF8           8CD0                         mov ax, ss
30315                                           ! 4420 endasm
30316                                           !BCC_ENDASM
30317                                           ! 4421 }
30318 7DFA           C3                         ret
30319                                           ! 4422 void unimplemented()
30320                                           ! 4423 {
30321                                           export	_unimplemented
30322                       00007DFB            _unimplemented:
30323                                           ! 4424  printf("--> Unimplemented\n");
30324 7DFB           55                         push	bp
30325 7DFC           89E5                       mov	bp,sp
30326                                           ! Debug: list * char = .2AF+0 (used reg = )
30327 7DFE           BB                   A0FC  mov	bx,#.2AF
30328 7E01           53                         push	bx
30329                                           ! Debug: func () void = printf+0 (used reg = )
30330 7E02           E8         0012            call	_printf
30331 7E05           89EC                       mov	sp,bp
30332                                           !BCC_EOS
30333                                           ! 4425 }
30334 7E07           5D                         pop	bp
30335 7E08           C3                         ret
30336                                           ! 4426 void unknown()
30337                                           ! Register BX used in function unimplemented
30338                                           ! 4427 {
30339                                           export	_unknown
30340                       00007E09            _unknown:
30341                                           ! 4428  printf("--> Unknown int10\n");
30342 7E09           55                         push	bp
30343 7E0A           89E5                       mov	bp,sp
30344                                           ! Debug: list * char = .2B0+0 (used reg = )
30345 7E0C           BB                   A0E9  mov	bx,#.2B0
30346 7E0F           53                         push	bx
30347                                           ! Debug: func () void = printf+0 (used reg = )
30348 7E10           E8         0004            call	_printf
30349 7E13           89EC                       mov	sp,bp
30350                                           !BCC_EOS
30351                                           ! 4429 }
30352 7E15           5D                         pop	bp
30353 7E16           C3                         ret
30354                                           ! 4430 void printf(s)
30355                                           ! Register BX used in function unknown
30356                                           ! 4431   Bit8u *s;
30357                                           export	_printf
30358                       00007E17            _printf:
30359                                           !BCC_EOS
30360                                           ! 4432 {
30361                                           ! 4433   Bit8u c, format_char;
30362                                           !BCC_EOS
30363                                           ! 4434   Boolean in_format;
30364                                           !BCC_EOS
30365                                           ! 4435   unsigned format_width, i;
30366                                           !BCC_EOS
30367                                           ! 4436   Bit16u *arg_ptr;
30368                                           !BCC_EOS
30369                                           ! 4437   Bit16u arg_seg, arg, digit, nibble, shift_count;
30370                                           !BCC_EOS
30371                                           ! 4438   arg_ptr = &s;
30372 7E17           55                         push	bp
30373 7E18           89E5                       mov	bp,sp
30374 7E1A           83C4                   EC  add	sp,*-$14
30375                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30376 7E1D           8D5E         04            lea	bx,4[bp]
30377 7E20           895E         F6            mov	-$A[bp],bx
30378                                           !BCC_EOS
30379                                           ! 4439   arg_seg = get_SS();
30380                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30381 7E23           E8         FFD2            call	_get_SS
30382                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30383 7E26           8946         F4            mov	-$C[bp],ax
30384                                           !BCC_EOS
30385                                           ! 4440   in_format = 0;
30386                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30387 7E29           31C0                       xor	ax,ax
30388 7E2B           8946         FC            mov	-4[bp],ax
30389                                           !BCC_EOS
30390                                           ! 4441   format_width = 0;
30391                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30392 7E2E           31C0                       xor	ax,ax
30393 7E30           8946         FA            mov	-6[bp],ax
30394                                           !BCC_EOS
30395                                           ! 4442   while (c = read_byte(0xc000, s)) {
30396 7E33           E9         0104            br 	.2B2
30397                       00007E36            .2B3:
30398                                           ! 4443     if ( c == '%' ) {
30399                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30400 7E36           8A46         FF            mov	al,-1[bp]
30401 7E39           3C                     25  cmp	al,*$25
30402 7E3B           75           0E            jne 	.2B4
30403                       00007E3D            .2B5:
30404                                           ! 4444       in_format = 1;
30405                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30406 7E3D           B8                   0001  mov	ax,*1
30407 7E40           8946         FC            mov	-4[bp],ax
30408                                           !BCC_EOS
30409                                           ! 4445       format_width = 0;
30410                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30411 7E43           31C0                       xor	ax,ax
30412 7E45           8946         FA            mov	-6[bp],ax
30413                                           !BCC_EOS
30414                                           ! 4446       }
30415                                           ! 4447     else if (in_format) {
30416 7E48           E9         00E8            br 	.2B6
30417                       00007E4B            .2B4:
30418 7E4B           8B46         FC            mov	ax,-4[bp]
30419 7E4E           85C0                       test	ax,ax
30420 7E50         0F84         00CF            beq 	.2B7
30421                       00007E54            .2B8:
30422                                           ! 4448       if ( (c>='0') && (c<='9') ) {
30423                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30424 7E54           8A46         FF            mov	al,-1[bp]
30425 7E57           3C                     30  cmp	al,*$30
30426 7E59           72           28            jb  	.2B9
30427                       00007E5B            .2BB:
30428                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30429 7E5B           8A46         FF            mov	al,-1[bp]
30430 7E5E           3C                     39  cmp	al,*$39
30431 7E60           77           21            ja  	.2B9
30432                       00007E62            .2BA:
30433                                           ! 4449         format_width = (format_width * 10) + (c - '0');
30434                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30435 7E62           8A46         FF            mov	al,-1[bp]
30436 7E65           30E4                       xor	ah,ah
30437 7E67           05                   FFD0  add	ax,*-$30
30438 7E6A           50                         push	ax
30439                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30440 7E6B           8B46         FA            mov	ax,-6[bp]
30441 7E6E           89C2                       mov	dx,ax
30442 7E70           D1E0                       shl	ax,*1
30443 7E72           D1E0                       shl	ax,*1
30444 7E74           01D0                       add	ax,dx
30445 7E76           D1E0                       shl	ax,*1
30446                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30447 7E78           0346         EA            add	ax,-$16[bp]
30448 7E7B           44                         inc	sp
30449 7E7C           44                         inc	sp
30450                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30451 7E7D           8946         FA            mov	-6[bp],ax
30452                                           !BCC_EOS
30453                                           ! 4450         }
30454                                           ! 4451       else if (c == 'x') {
30455 7E80           E9         009E            br 	.2BC
30456                       00007E83            .2B9:
30457                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30458 7E83           8A46         FF            mov	al,-1[bp]
30459 7E86           3C                     78  cmp	al,*$78
30460 7E88         0F85         0095            bne 	.2BD
30461                       00007E8C            .2BE:
30462                                           ! 4452         arg_ptr++;
30463                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30464 7E8C           8B5E         F6            mov	bx,-$A[bp]
30465 7E8F           43                         inc	bx
30466 7E90           43                         inc	bx
30467 7E91           895E         F6            mov	-$A[bp],bx
30468                                           !BCC_EOS
30469                                           ! 4453         arg = read_word(arg_seg, arg_ptr);
30470                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30471 7E94           FF76         F6            push	-$A[bp]
30472                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30473 7E97           FF76         F4            push	-$C[bp]
30474                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30475 7E9A           E8         FEE2            call	_read_word
30476 7E9D           83C4                   04  add	sp,*4
30477                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30478 7EA0           8946         F2            mov	-$E[bp],ax
30479                                           !BCC_EOS
30480                                           ! 4454         if (format_width == 0)
30481                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30482 7EA3           8B46         FA            mov	ax,-6[bp]
30483 7EA6           85C0                       test	ax,ax
30484 7EA8           75           06            jne 	.2BF
30485                       00007EAA            .2C0:
30486                                           ! 4455           format_width = 4;
30487                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30488 7EAA           B8                   0004  mov	ax,*4
30489 7EAD           8946         FA            mov	-6[bp],ax
30490                                           !BCC_EOS
30491                                           ! 4456         i = 0;
30492                       00007EB0            .2BF:
30493                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30494 7EB0           31C0                       xor	ax,ax
30495 7EB2           8946         F8            mov	-8[bp],ax
30496                                           !BCC_EOS
30497                                           ! 4457         digit = format_width - 1;
30498                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30499 7EB5           8B46         FA            mov	ax,-6[bp]
30500                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30501 7EB8           48                         dec	ax
30502 7EB9           8946         F0            mov	-$10[bp],ax
30503                                           !BCC_EOS
30504                                           ! 4458         for (i=0; i<format_width; i++) {
30505                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30506 7EBC           31C0                       xor	ax,ax
30507 7EBE           8946         F8            mov	-8[bp],ax
30508                                           !BCC_EOS
30509                                           !BCC_EOS
30510 7EC1           EB           51            jmp .2C3
30511                       00007EC3            .2C4:
30512                                           ! 4459           nibble = (arg >> (4 * digit)) & 0x000f;
30513                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30514                                           ! Debug: expression subtree swapping
30515 7EC3           8B46         F0            mov	ax,-$10[bp]
30516 7EC6           D1E0                       shl	ax,*1
30517 7EC8           D1E0                       shl	ax,*1
30518                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30519 7ECA           89C3                       mov	bx,ax
30520 7ECC           8B46         F2            mov	ax,-$E[bp]
30521 7ECF           89D9                       mov	cx,bx
30522 7ED1           D3E8                       shr	ax,cl
30523                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30524 7ED3           24                     0F  and	al,*$F
30525                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30526 7ED5           30E4                       xor	ah,ah
30527 7ED7           8946         EE            mov	-$12[bp],ax
30528                                           !BCC_EOS
30529                                           ! 4460           if (nibble <= 9)
30530                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30531 7EDA           8B46         EE            mov	ax,-$12[bp]
30532 7EDD           3D                   0009  cmp	ax,*9
30533 7EE0           77           13            ja  	.2C5
30534                       00007EE2            .2C6:
30535                                           ! 4461             outb(0x0500, nibble + '0');
30536                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30537 7EE2           8B46         EE            mov	ax,-$12[bp]
30538                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30539 7EE5           05                   0030  add	ax,*$30
30540 7EE8           50                         push	ax
30541                                           ! Debug: list int = const $500 (used reg = )
30542 7EE9           B8                   0500  mov	ax,#$500
30543 7EEC           50                         push	ax
30544                                           ! Debug: func () void = outb+0 (used reg = )
30545 7EED           E8         FEE8            call	_outb
30546 7EF0           83C4                   04  add	sp,*4
30547                                           !BCC_EOS
30548                                           ! 4462           else
30549                                           ! 4463             outb(0x0500, (nibble - 10) + 'A');
30550 7EF3           EB           11            jmp .2C7
30551                       00007EF5            .2C5:
30552                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30553 7EF5           8B46         EE            mov	ax,-$12[bp]
30554                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30555                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30556 7EF8           05                   0037  add	ax,*$37
30557 7EFB           50                         push	ax
30558                                           ! Debug: list int = const $500 (used reg = )
30559 7EFC           B8                   0500  mov	ax,#$500
30560 7EFF           50                         push	ax
30561                                           ! Debug: func () void = outb+0 (used reg = )
30562 7F00           E8         FED5            call	_outb
30563 7F03           83C4                   04  add	sp,*4
30564                                           !BCC_EOS
30565                                           ! 4464           digit--;
30566                       00007F06            .2C7:
30567                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30568 7F06           8B46         F0            mov	ax,-$10[bp]
30569 7F09           48                         dec	ax
30570 7F0A           8946         F0            mov	-$10[bp],ax
30571                                           !BCC_EOS
30572                                           ! 4465           }
30573                                           ! 4466         in_format = 0;
30574                       00007F0D            .2C2:
30575                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30576 7F0D           8B46         F8            mov	ax,-8[bp]
30577 7F10           40                         inc	ax
30578 7F11           8946         F8            mov	-8[bp],ax
30579                       00007F14            .2C3:
30580                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30581 7F14           8B46         F8            mov	ax,-8[bp]
30582 7F17           3B46         FA            cmp	ax,-6[bp]
30583 7F1A           72           A7            jb 	.2C4
30584                       00007F1C            .2C8:
30585                       00007F1C            .2C1:
30586                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30587 7F1C           31C0                       xor	ax,ax
30588 7F1E           8946         FC            mov	-4[bp],ax
30589                                           !BCC_EOS
30590                                           ! 4467         }
30591                                           ! 4468       }
30592                       00007F21            .2BD:
30593                       00007F21            .2BC:
30594                                           ! 4469     else {
30595 7F21           EB           10            jmp .2C9
30596                       00007F23            .2B7:
30597                                           ! 4470       outb(0x0500, c);
30598                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30599 7F23           8A46         FF            mov	al,-1[bp]
30600 7F26           30E4                       xor	ah,ah
30601 7F28           50                         push	ax
30602                                           ! Debug: list int = const $500 (used reg = )
30603 7F29           B8                   0500  mov	ax,#$500
30604 7F2C           50                         push	ax
30605                                           ! Debug: func () void = outb+0 (used reg = )
30606 7F2D           E8         FEA8            call	_outb
30607 7F30           83C4                   04  add	sp,*4
30608                                           !BCC_EOS
30609                                           ! 4471       }
30610                                           ! 4472     s ++;
30611                       00007F33            .2C9:
30612                       00007F33            .2B6:
30613                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30614 7F33           8B5E         04            mov	bx,4[bp]
30615 7F36           43                         inc	bx
30616 7F37           895E         04            mov	4[bp],bx
30617                                           !BCC_EOS
30618                                           ! 4473     }
30619                                           ! 4474 }
30620                       00007F3A            .2B2:
30621                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30622 7F3A           FF76         04            push	4[bp]
30623                                           ! Debug: list unsigned int = const $C000 (used reg = )
30624 7F3D           B8                   C000  mov	ax,#$C000
30625 7F40           50                         push	ax
30626                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30627 7F41           E8         FE28            call	_read_byte
30628 7F44           83C4                   04  add	sp,*4
30629                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30630 7F47           8846         FF            mov	-1[bp],al
30631 7F4A           84C0                       test	al,al
30632 7F4C         0F85         FEE6            bne 	.2B3
30633                       00007F50            .2CA:
30634                       00007F50            .2B1:
30635 7F50           89EC                       mov	sp,bp
30636 7F52           5D                         pop	bp
30637 7F53           C3                         ret
30638                                           ! 4475 #asm
30639                                           !BCC_ASM
30640                       00000002            _printf.s	set	2
30641                                             ; get LFB address from PCI
30642                                             ; in - ax: PCI device vendor
30643                                             ; out - ax: LFB address (high 16 bit)
30644                                             ;; NOTE - may be called in protected mode
30645                       00007F54            _pci_get_lfb_addr:
30646 7F54           53                           push bx
30647 7F55           51                           push cx
30648 7F56           52                           push dx
30649 7F57     66    50                           push eax
30650 7F59           89C3                           mov bx, ax
30651 7F5B           31C9                           xor cx, cx
30652 7F5D           B2                     00      mov dl, #0x00
30653 7F5F           E8         0033                call pci_read_reg
30654 7F62           3D                   FFFF      cmp ax, #0xffff
30655 7F65           74           12                jz pci_get_lfb_addr_5
30656                       00007F67             pci_get_lfb_addr_3:
30657 7F67           B2                     00      mov dl, #0x00
30658 7F69           E8         0029                call pci_read_reg
30659 7F6C           39D8                           cmp ax, bx ;; check vendor
30660 7F6E           74           0D                jz pci_get_lfb_addr_4
30661 7F70           83C1                   08      add cx, #0x8
30662 7F73           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
30663 7F77           72           EE                jb pci_get_lfb_addr_3
30664                       00007F79             pci_get_lfb_addr_5:
30665 7F79           31D2                           xor dx, dx ;; no LFB
30666 7F7B           EB           10                jmp pci_get_lfb_addr_6
30667                       00007F7D             pci_get_lfb_addr_4:
30668 7F7D           B2                     10      mov dl, #0x10 ;; I/O space #0
30669 7F7F           E8         0013                call pci_read_reg
30670 7F82           A9                   FFF1      test ax, #0xfff1
30671 7F85           75           F2                jnz pci_get_lfb_addr_5
30672 7F87     66    C1E8                   10      shr eax, #16
30673 7F8B           89C2                           mov dx, ax ;; LFB address
30674                       00007F8D             pci_get_lfb_addr_6:
30675 7F8D     66    58                           pop eax
30676 7F8F           89D0                         mov ax, dx
30677 7F91           5A                           pop dx
30678 7F92           59                           pop cx
30679 7F93           5B                           pop bx
30680 7F94           C3                           ret
30681                                             ; read PCI register
30682                                             ; in - cx: device/function
30683                                             ; in - dl: register
30684                                             ; out - eax: value
30685                       00007F95            pci_read_reg:
30686 7F95     66    B8               00800000    mov eax, #0x00800000
30687 7F9B           89C8                         mov ax, cx
30688 7F9D     66    C1E0                   08    shl eax, #8
30689 7FA1           88D0                         mov al, dl
30690 7FA3           BA                   0CF8    mov dx, #0xcf8
30691 7FA6     66    EF                           out dx, eax
30692 7FA8           80C2                   04    add dl, #4
30693 7FAB     66    ED                           in eax, dx
30694 7FAD           C3                           ret
30695                                           ! 4530 endasm
30696                                           !BCC_ENDASM
30697                                           ! 4531 static ModeInfoListItem mode_info_list[]=
30698                                           ! Register BX used in function printf
30699                                           ! 4532 {
30700                                           
30701                       00007FAE            _mode_info_list:
30702                                           ! 4533 { 0x0100,
30703 7FAE                      0100            .word	$100
30704                                           ! 4534 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30705 7FB0                      009B            .word	$9B
30706                                           ! 4535                           0x01 | 0x02 | 0x04,
30707 7FB2                        07            .byte	7
30708                                           ! 4536                           0,
30709 7FB3                        00            .byte	0
30710                                           ! 4537                           64,
30711 7FB4                      0040            .word	$40
30712                                           ! 4538                    64,
30713 7FB6                      0040            .word	$40
30714                                           ! 4539                        0xA000,
30715 7FB8                      A000            .word	$A000
30716                                           ! 4540                        0x0000,
30717 7FBA                      0000            .word	0
30718                                           ! 4541                       0,
30719 7FBC                      0000            .word	0
30720 7FBE                      0000            .word	0
30721                                           ! 4542                             640,
30722 7FC0                      0280            .word	$280
30723                                           ! 4543                        640,
30724 7FC2                      0280            .word	$280
30725                                           ! 4544                        400,
30726 7FC4                      0190            .word	$190
30727                                           ! 4545                      8,
30728 7FC6                        08            .byte	8
30729                                           ! 4546                      16,
30730 7FC7                        10            .byte	$10
30731                                           ! 4547                           1,
30732 7FC8                        01            .byte	1
30733                                           ! 4548                         8,
30734 7FC9                        08            .byte	8
30735                                           ! 4549                          4,
30736 7FCA                        04            .byte	4
30737                                           ! 4550                        0x04,
30738 7FCB                        04            .byte	4
30739                                           ! 4551                     0,
30740 7FCC                        00            .byte	0
30741                                           ! 4552                               64,
30742 7FCD                        40            .byte	$40
30743                                           ! 4553                          0,
30744 7FCE                        00            .byte	0
30745                                           ! 4554                        0,
30746 7FCF                        00            .byte	0
30747                                           ! 4555                             0,
30748 7FD0                        00            .byte	0
30749                                           ! 4556                          0,
30750 7FD1                        00            .byte	0
30751                                           ! 4557                               0,
30752 7FD2                        00            .byte	0
30753                                           ! 4558                         0,
30754 7FD3                        00            .byte	0
30755                                           ! 4559                              0,
30756 7FD4                        00            .byte	0
30757                                           ! 4560                         0,
30758 7FD5                        00            .byte	0
30759                                           ! 4561                              0,
30760 7FD6                        00            .byte	0
30761                                           ! 4562                                0,
30762 7FD7                        00            .byte	0
30763                                           ! 4563                        0xE0000000,
30764 7FD8                      0000            .word	0
30765 7FDA                      E000            .word	$E000
30766                                           ! 4564                               0,
30767 7FDC                      0000            .word	0
30768 7FDE                      0000            .word	0
30769                                           ! 4565                             0,
30770 7FE0                      0000            .word	0
30771                                           ! 4566                                640,
30772 7FE2                      0280            .word	$280
30773                                           ! 4567                             0,
30774 7FE4                        00            .byte	0
30775                                           ! 4568                             0,
30776 7FE5                        00            .byte	0
30777                                           ! 4569                           0,
30778 7FE6                        00            .byte	0
30779                                           ! 4570                                0,
30780 7FE7                        00            .byte	0
30781                                           ! 4571                          
30782                                           ! 4571    0,
30783 7FE8                        00            .byte	0
30784                                           ! 4572                                  0,
30785 7FE9                        00            .byte	0
30786                                           ! 4573                            0,
30787 7FEA                        00            .byte	0
30788                                           ! 4574                                 0,
30789 7FEB                        00            .byte	0
30790                                           ! 4575                            0,
30791 7FEC                        00            .byte	0
30792                                           ! 4576                                 0,
30793 7FED                        00            .byte	0
30794                                           ! 4577                          0,
30795 7FEE                      0000            .word	0
30796 7FF0                      0000            .word	0
30797                                           ! 4578 } },
30798                                           ! 4579 { 0x0101,
30799 7FF2                      0101            .word	$101
30800                                           ! 4580 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30801 7FF4                      009B            .word	$9B
30802                                           ! 4581                           0x01 | 0x02 | 0x04,
30803 7FF6                        07            .byte	7
30804                                           ! 4582                           0,
30805 7FF7                        00            .byte	0
30806                                           ! 4583                           64,
30807 7FF8                      0040            .word	$40
30808                                           ! 4584                    64,
30809 7FFA                      0040            .word	$40
30810                                           ! 4585                        0xA000,
30811 7FFC                      A000            .word	$A000
30812                                           ! 4586                        0x0000,
30813 7FFE                      0000            .word	0
30814                                           ! 4587                       0,
30815 8000                      0000            .word	0
30816 8002                      0000            .word	0
30817                                           ! 4588                             640,
30818 8004                      0280            .word	$280
30819                                           ! 4589                        640,
30820 8006                      0280            .word	$280
30821                                           ! 4590                        480,
30822 8008                      01E0            .word	$1E0
30823                                           ! 4591                      8,
30824 800A                        08            .byte	8
30825                                           ! 4592                      16,
30826 800B                        10            .byte	$10
30827                                           ! 4593                           1,
30828 800C                        01            .byte	1
30829                                           ! 4594                         8,
30830 800D                        08            .byte	8
30831                                           ! 4595                          5,
30832 800E                        05            .byte	5
30833                                           ! 4596                        0x04,
30834 800F                        04            .byte	4
30835                                           ! 4597                     0,
30836 8010                        00            .byte	0
30837                                           ! 4598                               53,
30838 8011                        35            .byte	$35
30839                                           ! 4599                          0,
30840 8012                        00            .byte	0
30841                                           ! 4600                        0,
30842 8013                        00            .byte	0
30843                                           ! 4601                             0,
30844 8014                        00            .byte	0
30845                                           ! 4602                          0,
30846 8015                        00            .byte	0
30847                                           ! 4603                               0,
30848 8016                        00            .byte	0
30849                                           ! 4604                         0,
30850 8017                        00            .byte	0
30851                                           ! 4605                              0,
30852 8018                        00            .byte	0
30853                                           ! 4606                         0,
30854 8019                        00            .byte	0
30855                                           ! 4607                              0,
30856 801A                        00            .byte	0
30857                                           ! 4608                                0,
30858 801B                        00            .byte	0
30859                                           ! 4609                        0xE0000000,
30860 801C                      0000            .word	0
30861 801E                      E000            .word	$E000
30862                                           ! 4610                               0,
30863 8020                      0000            .word	0
30864 8022                      0000            .word	0
30865                                           ! 4611                             0,
30866 8024                      0000            .word	0
30867                                           ! 4612                                640,
30868 8026                      0280            .word	$280
30869                                           ! 4613                             0,
30870 8028                        00            .byte	0
30871                                           ! 4614                             0,
30872 8029                        00            .byte	0
30873                                           ! 4615                           0,
30874 802A                        00            .byte	0
30875                                           ! 4616                                0,
30876 802B                        00            .byte	0
30877                                           ! 4617                             0,
30878 802C                        00            .byte	0
30879                                           ! 4618                                  0,
30880 802D                        00            .byte	0
30881                                           ! 4619                            0,
30882 802E                        00            .byte	0
30883                                           ! 4620                                 0,
30884 802F                        00            .byte	0
30885                                           ! 4621                            0,
30886 8030                        00            .byte	0
30887                                           ! 4622                                 0,
30888 8031                        00            .byte	0
30889                                           ! 4623                          0,
30890 8032                      0000            .word	0
30891 8034                      0000            .word	0
30892                                           ! 4624 } },
30893                                           ! 4625 { 0x0102,
30894 8036                      0102            .word	$102
30895                                           ! 4626 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30896 8038                      001F            .word	$1F
30897                                           ! 4627                           0x01 | 0x02 | 0x04,
30898 803A                        07            .byte	7
30899                                           ! 4628                           0,
30900 803B                        00            .byte	0
30901                                           ! 4629                           64,
30902 803C                      0040            .word	$40
30903                                           ! 4630                    64,
30904 803E                      0040            .word	$40
30905                                           ! 4631                        0xA000,
30906 8040                      A000            .word	$A000
30907                                           ! 4632                        0x0000,
30908 8042                      0000            .word	0
30909                                           ! 4633                       0,
30910 8044                      0000            .word	0
30911 8046                      0000            .word	0
30912                                           ! 4634                             100,
30913 8048                      0064            .word	$64
30914                                           ! 4635                        800,
30915 804A                      0320            .word	$320
30916                                           ! 4636                        600,
30917 804C                      0258            .word	$258
30918                                           ! 4637                      8,
30919 804E                        08            .byte	8
30920                                           ! 4638                      16,
30921 804F                        10            .byte	$10
30922                                           ! 4639                           4,
30923 8050                        04            .byte	4
30924                                           ! 4640                         4,
30925 8051                        04            .byte	4
30926                                           ! 4641            
30927                                           ! 4641               1,
30928 8052                        01            .byte	1
30929                                           ! 4642                        0x03,
30930 8053                        03            .byte	3
30931                                           ! 4643                     0,
30932 8054                        00            .byte	0
30933                                           ! 4644                               68,
30934 8055                        44            .byte	$44
30935                                           ! 4645                          0,
30936 8056                        00            .byte	0
30937                                           ! 4646                        0,
30938 8057                        00            .byte	0
30939                                           ! 4647                             0,
30940 8058                        00            .byte	0
30941                                           ! 4648                          0,
30942 8059                        00            .byte	0
30943                                           ! 4649                               0,
30944 805A                        00            .byte	0
30945                                           ! 4650                         0,
30946 805B                        00            .byte	0
30947                                           ! 4651                              0,
30948 805C                        00            .byte	0
30949                                           ! 4652                         0,
30950 805D                        00            .byte	0
30951                                           ! 4653                              0,
30952 805E                        00            .byte	0
30953                                           ! 4654                                0,
30954 805F                        00            .byte	0
30955                                           ! 4655                        0,
30956 8060                      0000            .word	0
30957 8062                      0000            .word	0
30958                                           ! 4656                               0,
30959 8064                      0000            .word	0
30960 8066                      0000            .word	0
30961                                           ! 4657                             0,
30962 8068                      0000            .word	0
30963                                           ! 4658                                100,
30964 806A                      0064            .word	$64
30965                                           ! 4659                             0,
30966 806C                        00            .byte	0
30967                                           ! 4660                             0,
30968 806D                        00            .byte	0
30969                                           ! 4661                           0,
30970 806E                        00            .byte	0
30971                                           ! 4662                                0,
30972 806F                        00            .byte	0
30973                                           ! 4663                             0,
30974 8070                        00            .byte	0
30975                                           ! 4664                                  0,
30976 8071                        00            .byte	0
30977                                           ! 4665                            0,
30978 8072                        00            .byte	0
30979                                           ! 4666                                 0,
30980 8073                        00            .byte	0
30981                                           ! 4667                            0,
30982 8074                        00            .byte	0
30983                                           ! 4668                                 0,
30984 8075                        00            .byte	0
30985                                           ! 4669                          0,
30986 8076                      0000            .word	0
30987 8078                      0000            .word	0
30988                                           ! 4670 } },
30989                                           ! 4671 { 0x0103,
30990 807A                      0103            .word	$103
30991                                           ! 4672 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30992 807C                      009B            .word	$9B
30993                                           ! 4673                           0x01 | 0x02 | 0x04,
30994 807E                        07            .byte	7
30995                                           ! 4674                           0,
30996 807F                        00            .byte	0
30997                                           ! 4675                           64,
30998 8080                      0040            .word	$40
30999                                           ! 4676                    64,
31000 8082                      0040            .word	$40
31001                                           ! 4677                        0xA000,
31002 8084                      A000            .word	$A000
31003                                           ! 4678                        0x0000,
31004 8086                      0000            .word	0
31005                                           ! 4679                       0,
31006 8088                      0000            .word	0
31007 808A                      0000            .word	0
31008                                           ! 4680                             800,
31009 808C                      0320            .word	$320
31010                                           ! 4681                        800,
31011 808E                      0320            .word	$320
31012                                           ! 4682                        600,
31013 8090                      0258            .word	$258
31014                                           ! 4683                      8,
31015 8092                        08            .byte	8
31016                                           ! 4684                      16,
31017 8093                        10            .byte	$10
31018                                           ! 4685                           1,
31019 8094                        01            .byte	1
31020                                           ! 4686                         8,
31021 8095                        08            .byte	8
31022                                           ! 4687                          8,
31023 8096                        08            .byte	8
31024                                           ! 4688                        0x04,
31025 8097                        04            .byte	4
31026                                           ! 4689                     0,
31027 8098                        00            .byte	0
31028                                           ! 4690                               33,
31029 8099                        21            .byte	$21
31030                                           ! 4691                          0,
31031 809A                        00            .byte	0
31032                                           ! 4692                        0,
31033 809B                        00            .byte	0
31034                                           ! 4693                             0,
31035 809C                        00            .byte	0
31036                                           ! 4694                          0,
31037 809D                        00            .byte	0
31038                                           ! 4695                               0,
31039 809E                        00            .byte	0
31040                                           ! 4696                         0,
31041 809F                        00            .byte	0
31042                                           ! 4697                              0,
31043 80A0                        00            .byte	0
31044                                           ! 4698                         0,
31045 80A1                        00            .byte	0
31046                                           ! 4699                              0,
31047 80A2                        00            .byte	0
31048                                           ! 4700                                0,
31049 80A3                        00            .byte	0
31050                                           ! 4701                        0xE0000000,
31051 80A4                      0000            .word	0
31052 80A6                      E000            .word	$E000
31053                                           ! 4702                               0,
31054 80A8                      0000            .word	0
31055 80AA                      0000            .word	0
31056                                           ! 4703                             0,
31057 80AC                      0000            .word	0
31058                                           ! 4704                                800,
31059 80AE                      0320            .word	$320
31060                                           ! 4705                             0,
31061 80B0                        00            .byte	0
31062                                           ! 4706                             0,
31063 80B1                        00            .byte	0
31064                                           ! 4707                           0,
31065 80B2                        00            .byte	0
31066                                           ! 4708                                0,
31067 80B3                        00            .byte	0
31068                                           ! 4709                             0
31069                                           ! 4709 ,
31070 80B4                        00            .byte	0
31071                                           ! 4710                                  0,
31072 80B5                        00            .byte	0
31073                                           ! 4711                            0,
31074 80B6                        00            .byte	0
31075                                           ! 4712                                 0,
31076 80B7                        00            .byte	0
31077                                           ! 4713                            0,
31078 80B8                        00            .byte	0
31079                                           ! 4714                                 0,
31080 80B9                        00            .byte	0
31081                                           ! 4715                          0,
31082 80BA                      0000            .word	0
31083 80BC                      0000            .word	0
31084                                           ! 4716 } },
31085                                           ! 4717 { 0x0104,
31086 80BE                      0104            .word	$104
31087                                           ! 4718 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31088 80C0                      001F            .word	$1F
31089                                           ! 4719                           0x01 | 0x02 | 0x04,
31090 80C2                        07            .byte	7
31091                                           ! 4720                           0,
31092 80C3                        00            .byte	0
31093                                           ! 4721                           64,
31094 80C4                      0040            .word	$40
31095                                           ! 4722                    64,
31096 80C6                      0040            .word	$40
31097                                           ! 4723                        0xA000,
31098 80C8                      A000            .word	$A000
31099                                           ! 4724                        0x0000,
31100 80CA                      0000            .word	0
31101                                           ! 4725                       0,
31102 80CC                      0000            .word	0
31103 80CE                      0000            .word	0
31104                                           ! 4726                             128,
31105 80D0                      0080            .word	$80
31106                                           ! 4727                        1024,
31107 80D2                      0400            .word	$400
31108                                           ! 4728                        768,
31109 80D4                      0300            .word	$300
31110                                           ! 4729                      8,
31111 80D6                        08            .byte	8
31112                                           ! 4730                      16,
31113 80D7                        10            .byte	$10
31114                                           ! 4731                           4,
31115 80D8                        04            .byte	4
31116                                           ! 4732                         4,
31117 80D9                        04            .byte	4
31118                                           ! 4733                          2,
31119 80DA                        02            .byte	2
31120                                           ! 4734                        0x03,
31121 80DB                        03            .byte	3
31122                                           ! 4735                     0,
31123 80DC                        00            .byte	0
31124                                           ! 4736                               41,
31125 80DD                        29            .byte	$29
31126                                           ! 4737                          0,
31127 80DE                        00            .byte	0
31128                                           ! 4738                        0,
31129 80DF                        00            .byte	0
31130                                           ! 4739                             0,
31131 80E0                        00            .byte	0
31132                                           ! 4740                          0,
31133 80E1                        00            .byte	0
31134                                           ! 4741                               0,
31135 80E2                        00            .byte	0
31136                                           ! 4742                         0,
31137 80E3                        00            .byte	0
31138                                           ! 4743                              0,
31139 80E4                        00            .byte	0
31140                                           ! 4744                         0,
31141 80E5                        00            .byte	0
31142                                           ! 4745                              0,
31143 80E6                        00            .byte	0
31144                                           ! 4746                                0,
31145 80E7                        00            .byte	0
31146                                           ! 4747                        0,
31147 80E8                      0000            .word	0
31148 80EA                      0000            .word	0
31149                                           ! 4748                               0,
31150 80EC                      0000            .word	0
31151 80EE                      0000            .word	0
31152                                           ! 4749                             0,
31153 80F0                      0000            .word	0
31154                                           ! 4750                                128,
31155 80F2                      0080            .word	$80
31156                                           ! 4751                             0,
31157 80F4                        00            .byte	0
31158                                           ! 4752                             0,
31159 80F5                        00            .byte	0
31160                                           ! 4753                           0,
31161 80F6                        00            .byte	0
31162                                           ! 4754                                0,
31163 80F7                        00            .byte	0
31164                                           ! 4755                             0,
31165 80F8                        00            .byte	0
31166                                           ! 4756                                  0,
31167 80F9                        00            .byte	0
31168                                           ! 4757                            0,
31169 80FA                        00            .byte	0
31170                                           ! 4758                                 0,
31171 80FB                        00            .byte	0
31172                                           ! 4759                            0,
31173 80FC                        00            .byte	0
31174                                           ! 4760                                 0,
31175 80FD                        00            .byte	0
31176                                           ! 4761                          0,
31177 80FE                      0000            .word	0
31178 8100                      0000            .word	0
31179                                           ! 4762 } },
31180                                           ! 4763 { 0x0105,
31181 8102                      0105            .word	$105
31182                                           ! 4764 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31183 8104                      009B            .word	$9B
31184                                           ! 4765                           0x01 | 0x02 | 0x04,
31185 8106                        07            .byte	7
31186                                           ! 4766                           0,
31187 8107                        00            .byte	0
31188                                           ! 4767                           64,
31189 8108                      0040            .word	$40
31190                                           ! 4768                    64,
31191 810A                      0040            .word	$40
31192                                           ! 4769                        0xA000,
31193 810C                      A000            .word	$A000
31194                                           ! 4770                        0x0000,
31195 810E                      0000            .word	0
31196                                           ! 4771                       0,
31197 8110                      0000            .word	0
31198 8112                      0000            .word	0
31199                                           ! 4772                             1024,
31200 8114                      0400            .word	$400
31201                                           ! 4773                        1024,
31202 8116                      0400            .word	$400
31203                                           ! 4774                        768,
31204 8118                      0300            .word	$300
31205                                           ! 4775                      8,
31206 811A                        08            .byte	8
31207                                           ! 4776                      16,
31208 811B                        10            .byte	$10
31209                                           ! 4777                           1,
31210 811C                        01            .byte	1
31211                                           ! 4778                         8,
31212 811D                        08            .byte	8
31213                                           ! 4779                      
31214                                           ! 4779     12,
31215 811E                        0C            .byte	$C
31216                                           ! 4780                        0x04,
31217 811F                        04            .byte	4
31218                                           ! 4781                     0,
31219 8120                        00            .byte	0
31220                                           ! 4782                               20,
31221 8121                        14            .byte	$14
31222                                           ! 4783                          0,
31223 8122                        00            .byte	0
31224                                           ! 4784                        0,
31225 8123                        00            .byte	0
31226                                           ! 4785                             0,
31227 8124                        00            .byte	0
31228                                           ! 4786                          0,
31229 8125                        00            .byte	0
31230                                           ! 4787                               0,
31231 8126                        00            .byte	0
31232                                           ! 4788                         0,
31233 8127                        00            .byte	0
31234                                           ! 4789                              0,
31235 8128                        00            .byte	0
31236                                           ! 4790                         0,
31237 8129                        00            .byte	0
31238                                           ! 4791                              0,
31239 812A                        00            .byte	0
31240                                           ! 4792                                0,
31241 812B                        00            .byte	0
31242                                           ! 4793                        0xE0000000,
31243 812C                      0000            .word	0
31244 812E                      E000            .word	$E000
31245                                           ! 4794                               0,
31246 8130                      0000            .word	0
31247 8132                      0000            .word	0
31248                                           ! 4795                             0,
31249 8134                      0000            .word	0
31250                                           ! 4796                                1024,
31251 8136                      0400            .word	$400
31252                                           ! 4797                             0,
31253 8138                        00            .byte	0
31254                                           ! 4798                             0,
31255 8139                        00            .byte	0
31256                                           ! 4799                           0,
31257 813A                        00            .byte	0
31258                                           ! 4800                                0,
31259 813B                        00            .byte	0
31260                                           ! 4801                             0,
31261 813C                        00            .byte	0
31262                                           ! 4802                                  0,
31263 813D                        00            .byte	0
31264                                           ! 4803                            0,
31265 813E                        00            .byte	0
31266                                           ! 4804                                 0,
31267 813F                        00            .byte	0
31268                                           ! 4805                            0,
31269 8140                        00            .byte	0
31270                                           ! 4806                                 0,
31271 8141                        00            .byte	0
31272                                           ! 4807                          0,
31273 8142                      0000            .word	0
31274 8144                      0000            .word	0
31275                                           ! 4808 } },
31276                                           ! 4809 { 0x0106,
31277 8146                      0106            .word	$106
31278                                           ! 4810 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31279 8148                      001F            .word	$1F
31280                                           ! 4811                           0x01 | 0x02 | 0x04,
31281 814A                        07            .byte	7
31282                                           ! 4812                           0,
31283 814B                        00            .byte	0
31284                                           ! 4813                           64,
31285 814C                      0040            .word	$40
31286                                           ! 4814                    64,
31287 814E                      0040            .word	$40
31288                                           ! 4815                        0xA000,
31289 8150                      A000            .word	$A000
31290                                           ! 4816                        0x0000,
31291 8152                      0000            .word	0
31292                                           ! 4817                       0,
31293 8154                      0000            .word	0
31294 8156                      0000            .word	0
31295                                           ! 4818                             160,
31296 8158                      00A0            .word	$A0
31297                                           ! 4819                        1280,
31298 815A                      0500            .word	$500
31299                                           ! 4820                        1024,
31300 815C                      0400            .word	$400
31301                                           ! 4821                      8,
31302 815E                        08            .byte	8
31303                                           ! 4822                      16,
31304 815F                        10            .byte	$10
31305                                           ! 4823                           4,
31306 8160                        04            .byte	4
31307                                           ! 4824                         4,
31308 8161                        04            .byte	4
31309                                           ! 4825                          3,
31310 8162                        03            .byte	3
31311                                           ! 4826                        0x03,
31312 8163                        03            .byte	3
31313                                           ! 4827                     0,
31314 8164                        00            .byte	0
31315                                           ! 4828                               24,
31316 8165                        18            .byte	$18
31317                                           ! 4829                          0,
31318 8166                        00            .byte	0
31319                                           ! 4830                        0,
31320 8167                        00            .byte	0
31321                                           ! 4831                             0,
31322 8168                        00            .byte	0
31323                                           ! 4832                          0,
31324 8169                        00            .byte	0
31325                                           ! 4833                               0,
31326 816A                        00            .byte	0
31327                                           ! 4834                         0,
31328 816B                        00            .byte	0
31329                                           ! 4835                              0,
31330 816C                        00            .byte	0
31331                                           ! 4836                         0,
31332 816D                        00            .byte	0
31333                                           ! 4837                              0,
31334 816E                        00            .byte	0
31335                                           ! 4838                                0,
31336 816F                        00            .byte	0
31337                                           ! 4839                        0,
31338 8170                      0000            .word	0
31339 8172                      0000            .word	0
31340                                           ! 4840                               0,
31341 8174                      0000            .word	0
31342 8176                      0000            .word	0
31343                                           ! 4841                             0,
31344 8178                      0000            .word	0
31345                                           ! 4842                                160,
31346 817A                      00A0            .word	$A0
31347                                           ! 4843                             0,
31348 817C                        00            .byte	0
31349                                           ! 4844                             0,
31350 817D                        00            .byte	0
31351                                           ! 4845                           0,
31352 817E                        00            .byte	0
31353                                           ! 4846                                0,
31354 817F                        00            .byte	0
31355                                           ! 4847                             0,
31356 8180                        00            .byte	0
31357                                           ! 4848     
31358                                           ! 4848                              0,
31359 8181                        00            .byte	0
31360                                           ! 4849                            0,
31361 8182                        00            .byte	0
31362                                           ! 4850                                 0,
31363 8183                        00            .byte	0
31364                                           ! 4851                            0,
31365 8184                        00            .byte	0
31366                                           ! 4852                                 0,
31367 8185                        00            .byte	0
31368                                           ! 4853                          0,
31369 8186                      0000            .word	0
31370 8188                      0000            .word	0
31371                                           ! 4854 } },
31372                                           ! 4855 { 0x0107,
31373 818A                      0107            .word	$107
31374                                           ! 4856 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31375 818C                      009B            .word	$9B
31376                                           ! 4857                           0x01 | 0x02 | 0x04,
31377 818E                        07            .byte	7
31378                                           ! 4858                           0,
31379 818F                        00            .byte	0
31380                                           ! 4859                           64,
31381 8190                      0040            .word	$40
31382                                           ! 4860                    64,
31383 8192                      0040            .word	$40
31384                                           ! 4861                        0xA000,
31385 8194                      A000            .word	$A000
31386                                           ! 4862                        0x0000,
31387 8196                      0000            .word	0
31388                                           ! 4863                       0,
31389 8198                      0000            .word	0
31390 819A                      0000            .word	0
31391                                           ! 4864                             1280,
31392 819C                      0500            .word	$500
31393                                           ! 4865                        1280,
31394 819E                      0500            .word	$500
31395                                           ! 4866                        1024,
31396 81A0                      0400            .word	$400
31397                                           ! 4867                      8,
31398 81A2                        08            .byte	8
31399                                           ! 4868                      16,
31400 81A3                        10            .byte	$10
31401                                           ! 4869                           1,
31402 81A4                        01            .byte	1
31403                                           ! 4870                         8,
31404 81A5                        08            .byte	8
31405                                           ! 4871                          20,
31406 81A6                        14            .byte	$14
31407                                           ! 4872                        0x04,
31408 81A7                        04            .byte	4
31409                                           ! 4873                     0,
31410 81A8                        00            .byte	0
31411                                           ! 4874                               11,
31412 81A9                        0B            .byte	$B
31413                                           ! 4875                          0,
31414 81AA                        00            .byte	0
31415                                           ! 4876                        0,
31416 81AB                        00            .byte	0
31417                                           ! 4877                             0,
31418 81AC                        00            .byte	0
31419                                           ! 4878                          0,
31420 81AD                        00            .byte	0
31421                                           ! 4879                               0,
31422 81AE                        00            .byte	0
31423                                           ! 4880                         0,
31424 81AF                        00            .byte	0
31425                                           ! 4881                              0,
31426 81B0                        00            .byte	0
31427                                           ! 4882                         0,
31428 81B1                        00            .byte	0
31429                                           ! 4883                              0,
31430 81B2                        00            .byte	0
31431                                           ! 4884                                0,
31432 81B3                        00            .byte	0
31433                                           ! 4885                        0xE0000000,
31434 81B4                      0000            .word	0
31435 81B6                      E000            .word	$E000
31436                                           ! 4886                               0,
31437 81B8                      0000            .word	0
31438 81BA                      0000            .word	0
31439                                           ! 4887                             0,
31440 81BC                      0000            .word	0
31441                                           ! 4888                                1280,
31442 81BE                      0500            .word	$500
31443                                           ! 4889                             0,
31444 81C0                        00            .byte	0
31445                                           ! 4890                             0,
31446 81C1                        00            .byte	0
31447                                           ! 4891                           0,
31448 81C2                        00            .byte	0
31449                                           ! 4892                                0,
31450 81C3                        00            .byte	0
31451                                           ! 4893                             0,
31452 81C4                        00            .byte	0
31453                                           ! 4894                                  0,
31454 81C5                        00            .byte	0
31455                                           ! 4895                            0,
31456 81C6                        00            .byte	0
31457                                           ! 4896                                 0,
31458 81C7                        00            .byte	0
31459                                           ! 4897                            0,
31460 81C8                        00            .byte	0
31461                                           ! 4898                                 0,
31462 81C9                        00            .byte	0
31463                                           ! 4899                          0,
31464 81CA                      0000            .word	0
31465 81CC                      0000            .word	0
31466                                           ! 4900 } },
31467                                           ! 4901 { 0x010d,
31468 81CE                      010D            .word	$10D
31469                                           ! 4902 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31470 81D0                      009B            .word	$9B
31471                                           ! 4903                           0x01 | 0x02 | 0x04,
31472 81D2                        07            .byte	7
31473                                           ! 4904                           0,
31474 81D3                        00            .byte	0
31475                                           ! 4905                           64,
31476 81D4                      0040            .word	$40
31477                                           ! 4906                    64,
31478 81D6                      0040            .word	$40
31479                                           ! 4907                        0xA000,
31480 81D8                      A000            .word	$A000
31481                                           ! 4908                        0x0000,
31482 81DA                      0000            .word	0
31483                                           ! 4909                       0,
31484 81DC                      0000            .word	0
31485 81DE                      0000            .word	0
31486                                           ! 4910                             640,
31487 81E0                      0280            .word	$280
31488                                           ! 4911                        320,
31489 81E2                      0140            .word	$140
31490                                           ! 4912                        200,
31491 81E4                      00C8            .word	$C8
31492                                           ! 4913                      8,
31493 81E6                        08            .byte	8
31494                                           ! 4914                      16,
31495 81E7                        10            .byte	$10
31496                                           ! 4915                           1,
31497 81E8                        01            .byte	1
31498                                           ! 4916                         15,
31499 81E9                        0F            .byte	$F
31500                                           ! 4917                
31501                                           ! 4917           2,
31502 81EA                        02            .byte	2
31503                                           ! 4918                        0x06,
31504 81EB                        06            .byte	6
31505                                           ! 4919                     0,
31506 81EC                        00            .byte	0
31507                                           ! 4920                               130,
31508 81ED                        82            .byte	$82
31509                                           ! 4921                          0,
31510 81EE                        00            .byte	0
31511                                           ! 4922                        5,
31512 81EF                        05            .byte	5
31513                                           ! 4923                             10,
31514 81F0                        0A            .byte	$A
31515                                           ! 4924                          5,
31516 81F1                        05            .byte	5
31517                                           ! 4925                               5,
31518 81F2                        05            .byte	5
31519                                           ! 4926                         5,
31520 81F3                        05            .byte	5
31521                                           ! 4927                              0,
31522 81F4                        00            .byte	0
31523                                           ! 4928                         1,
31524 81F5                        01            .byte	1
31525                                           ! 4929                              15,
31526 81F6                        0F            .byte	$F
31527                                           ! 4930                                0,
31528 81F7                        00            .byte	0
31529                                           ! 4931                        0xE0000000,
31530 81F8                      0000            .word	0
31531 81FA                      E000            .word	$E000
31532                                           ! 4932                               0,
31533 81FC                      0000            .word	0
31534 81FE                      0000            .word	0
31535                                           ! 4933                             0,
31536 8200                      0000            .word	0
31537                                           ! 4934                                640,
31538 8202                      0280            .word	$280
31539                                           ! 4935                             0,
31540 8204                        00            .byte	0
31541                                           ! 4936                             0,
31542 8205                        00            .byte	0
31543                                           ! 4937                           5,
31544 8206                        05            .byte	5
31545                                           ! 4938                                10,
31546 8207                        0A            .byte	$A
31547                                           ! 4939                             5,
31548 8208                        05            .byte	5
31549                                           ! 4940                                  5,
31550 8209                        05            .byte	5
31551                                           ! 4941                            5,
31552 820A                        05            .byte	5
31553                                           ! 4942                                 0,
31554 820B                        00            .byte	0
31555                                           ! 4943                            1,
31556 820C                        01            .byte	1
31557                                           ! 4944                                 15,
31558 820D                        0F            .byte	$F
31559                                           ! 4945                          0,
31560 820E                      0000            .word	0
31561 8210                      0000            .word	0
31562                                           ! 4946 } },
31563                                           ! 4947 { 0x010e,
31564 8212                      010E            .word	$10E
31565                                           ! 4948 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31566 8214                      009B            .word	$9B
31567                                           ! 4949                           0x01 | 0x02 | 0x04,
31568 8216                        07            .byte	7
31569                                           ! 4950                           0,
31570 8217                        00            .byte	0
31571                                           ! 4951                           64,
31572 8218                      0040            .word	$40
31573                                           ! 4952                    64,
31574 821A                      0040            .word	$40
31575                                           ! 4953                        0xA000,
31576 821C                      A000            .word	$A000
31577                                           ! 4954                        0x0000,
31578 821E                      0000            .word	0
31579                                           ! 4955                       0,
31580 8220                      0000            .word	0
31581 8222                      0000            .word	0
31582                                           ! 4956                             640,
31583 8224                      0280            .word	$280
31584                                           ! 4957                        320,
31585 8226                      0140            .word	$140
31586                                           ! 4958                        200,
31587 8228                      00C8            .word	$C8
31588                                           ! 4959                      8,
31589 822A                        08            .byte	8
31590                                           ! 4960                      16,
31591 822B                        10            .byte	$10
31592                                           ! 4961                           1,
31593 822C                        01            .byte	1
31594                                           ! 4962                         16,
31595 822D                        10            .byte	$10
31596                                           ! 4963                          2,
31597 822E                        02            .byte	2
31598                                           ! 4964                        0x06,
31599 822F                        06            .byte	6
31600                                           ! 4965                     0,
31601 8230                        00            .byte	0
31602                                           ! 4966                               130,
31603 8231                        82            .byte	$82
31604                                           ! 4967                          0,
31605 8232                        00            .byte	0
31606                                           ! 4968                        5,
31607 8233                        05            .byte	5
31608                                           ! 4969                             11,
31609 8234                        0B            .byte	$B
31610                                           ! 4970                          6,
31611 8235                        06            .byte	6
31612                                           ! 4971                               5,
31613 8236                        05            .byte	5
31614                                           ! 4972                         5,
31615 8237                        05            .byte	5
31616                                           ! 4973                              0,
31617 8238                        00            .byte	0
31618                                           ! 4974                         0,
31619 8239                        00            .byte	0
31620                                           ! 4975                              0,
31621 823A                        00            .byte	0
31622                                           ! 4976                                0,
31623 823B                        00            .byte	0
31624                                           ! 4977                        0xE0000000,
31625 823C                      0000            .word	0
31626 823E                      E000            .word	$E000
31627                                           ! 4978                               0,
31628 8240                      0000            .word	0
31629 8242                      0000            .word	0
31630                                           ! 4979                             0,
31631 8244                      0000            .word	0
31632                                           ! 4980                                640,
31633 8246                      0280            .word	$280
31634                                           ! 4981                             0,
31635 8248                        00            .byte	0
31636                                           ! 4982                             0,
31637 8249                        00            .byte	0
31638                                           ! 4983                           5,
31639 824A                        05            .byte	5
31640                                           ! 4984                                11,
31641 824B                        0B            .byte	$B
31642                                           ! 4985                
31643                                           ! 4985              6,
31644 824C                        06            .byte	6
31645                                           ! 4986                                  5,
31646 824D                        05            .byte	5
31647                                           ! 4987                            5,
31648 824E                        05            .byte	5
31649                                           ! 4988                                 0,
31650 824F                        00            .byte	0
31651                                           ! 4989                            0,
31652 8250                        00            .byte	0
31653                                           ! 4990                                 0,
31654 8251                        00            .byte	0
31655                                           ! 4991                          0,
31656 8252                      0000            .word	0
31657 8254                      0000            .word	0
31658                                           ! 4992 } },
31659                                           ! 4993 { 0x010f,
31660 8256                      010F            .word	$10F
31661                                           ! 4994 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31662 8258                      009B            .word	$9B
31663                                           ! 4995                           0x01 | 0x02 | 0x04,
31664 825A                        07            .byte	7
31665                                           ! 4996                           0,
31666 825B                        00            .byte	0
31667                                           ! 4997                           64,
31668 825C                      0040            .word	$40
31669                                           ! 4998                    64,
31670 825E                      0040            .word	$40
31671                                           ! 4999                        0xA000,
31672 8260                      A000            .word	$A000
31673                                           ! 5000                        0x0000,
31674 8262                      0000            .word	0
31675                                           ! 5001                       0,
31676 8264                      0000            .word	0
31677 8266                      0000            .word	0
31678                                           ! 5002                             960,
31679 8268                      03C0            .word	$3C0
31680                                           ! 5003                        320,
31681 826A                      0140            .word	$140
31682                                           ! 5004                        200,
31683 826C                      00C8            .word	$C8
31684                                           ! 5005                      8,
31685 826E                        08            .byte	8
31686                                           ! 5006                      16,
31687 826F                        10            .byte	$10
31688                                           ! 5007                           1,
31689 8270                        01            .byte	1
31690                                           ! 5008                         24,
31691 8271                        18            .byte	$18
31692                                           ! 5009                          3,
31693 8272                        03            .byte	3
31694                                           ! 5010                        0x06,
31695 8273                        06            .byte	6
31696                                           ! 5011                     0,
31697 8274                        00            .byte	0
31698                                           ! 5012                               86,
31699 8275                        56            .byte	$56
31700                                           ! 5013                          0,
31701 8276                        00            .byte	0
31702                                           ! 5014                        8,
31703 8277                        08            .byte	8
31704                                           ! 5015                             16,
31705 8278                        10            .byte	$10
31706                                           ! 5016                          8,
31707 8279                        08            .byte	8
31708                                           ! 5017                               8,
31709 827A                        08            .byte	8
31710                                           ! 5018                         8,
31711 827B                        08            .byte	8
31712                                           ! 5019                              0,
31713 827C                        00            .byte	0
31714                                           ! 5020                         0,
31715 827D                        00            .byte	0
31716                                           ! 5021                              0,
31717 827E                        00            .byte	0
31718                                           ! 5022                                0,
31719 827F                        00            .byte	0
31720                                           ! 5023                        0xE0000000,
31721 8280                      0000            .word	0
31722 8282                      E000            .word	$E000
31723                                           ! 5024                               0,
31724 8284                      0000            .word	0
31725 8286                      0000            .word	0
31726                                           ! 5025                             0,
31727 8288                      0000            .word	0
31728                                           ! 5026                                960,
31729 828A                      03C0            .word	$3C0
31730                                           ! 5027                             0,
31731 828C                        00            .byte	0
31732                                           ! 5028                             0,
31733 828D                        00            .byte	0
31734                                           ! 5029                           8,
31735 828E                        08            .byte	8
31736                                           ! 5030                                16,
31737 828F                        10            .byte	$10
31738                                           ! 5031                             8,
31739 8290                        08            .byte	8
31740                                           ! 5032                                  8,
31741 8291                        08            .byte	8
31742                                           ! 5033                            8,
31743 8292                        08            .byte	8
31744                                           ! 5034                                 0,
31745 8293                        00            .byte	0
31746                                           ! 5035                            0,
31747 8294                        00            .byte	0
31748                                           ! 5036                                 0,
31749 8295                        00            .byte	0
31750                                           ! 5037                          0,
31751 8296                      0000            .word	0
31752 8298                      0000            .word	0
31753                                           ! 5038 } },
31754                                           ! 5039 { 0x0110,
31755 829A                      0110            .word	$110
31756                                           ! 5040 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31757 829C                      009B            .word	$9B
31758                                           ! 5041                           0x01 | 0x02 | 0x04,
31759 829E                        07            .byte	7
31760                                           ! 5042                           0,
31761 829F                        00            .byte	0
31762                                           ! 5043                           64,
31763 82A0                      0040            .word	$40
31764                                           ! 5044                    64,
31765 82A2                      0040            .word	$40
31766                                           ! 5045                        0xA000,
31767 82A4                      A000            .word	$A000
31768                                           ! 5046                        0x0000,
31769 82A6                      0000            .word	0
31770                                           ! 5047                       0,
31771 82A8                      0000            .word	0
31772 82AA                      0000            .word	0
31773                                           ! 5048                             1280,
31774 82AC                      0500            .word	$500
31775                                           ! 5049                        640,
31776 82AE                      0280            .word	$280
31777                                           ! 5050                        480,
31778 82B0                      01E0            .word	$1E0
31779                                           ! 5051                      8,
31780 82B2                        08            .byte	8
31781                                           ! 5052                      16,
31782 82B3                        10            .byte	$10
31783                                           ! 5053                           1,
31784 82B4                        01            .byte	1
31785                                           ! 5054                         
31786                                           ! 5054 15,
31787 82B5                        0F            .byte	$F
31788                                           ! 5055                          10,
31789 82B6                        0A            .byte	$A
31790                                           ! 5056                        0x06,
31791 82B7                        06            .byte	6
31792                                           ! 5057                     0,
31793 82B8                        00            .byte	0
31794                                           ! 5058                               26,
31795 82B9                        1A            .byte	$1A
31796                                           ! 5059                          0,
31797 82BA                        00            .byte	0
31798                                           ! 5060                        5,
31799 82BB                        05            .byte	5
31800                                           ! 5061                             10,
31801 82BC                        0A            .byte	$A
31802                                           ! 5062                          5,
31803 82BD                        05            .byte	5
31804                                           ! 5063                               5,
31805 82BE                        05            .byte	5
31806                                           ! 5064                         5,
31807 82BF                        05            .byte	5
31808                                           ! 5065                              0,
31809 82C0                        00            .byte	0
31810                                           ! 5066                         1,
31811 82C1                        01            .byte	1
31812                                           ! 5067                              15,
31813 82C2                        0F            .byte	$F
31814                                           ! 5068                                0,
31815 82C3                        00            .byte	0
31816                                           ! 5069                        0xE0000000,
31817 82C4                      0000            .word	0
31818 82C6                      E000            .word	$E000
31819                                           ! 5070                               0,
31820 82C8                      0000            .word	0
31821 82CA                      0000            .word	0
31822                                           ! 5071                             0,
31823 82CC                      0000            .word	0
31824                                           ! 5072                                1280,
31825 82CE                      0500            .word	$500
31826                                           ! 5073                             0,
31827 82D0                        00            .byte	0
31828                                           ! 5074                             0,
31829 82D1                        00            .byte	0
31830                                           ! 5075                           5,
31831 82D2                        05            .byte	5
31832                                           ! 5076                                10,
31833 82D3                        0A            .byte	$A
31834                                           ! 5077                             5,
31835 82D4                        05            .byte	5
31836                                           ! 5078                                  5,
31837 82D5                        05            .byte	5
31838                                           ! 5079                            5,
31839 82D6                        05            .byte	5
31840                                           ! 5080                                 0,
31841 82D7                        00            .byte	0
31842                                           ! 5081                            1,
31843 82D8                        01            .byte	1
31844                                           ! 5082                                 15,
31845 82D9                        0F            .byte	$F
31846                                           ! 5083                          0,
31847 82DA                      0000            .word	0
31848 82DC                      0000            .word	0
31849                                           ! 5084 } },
31850                                           ! 5085 { 0x0111,
31851 82DE                      0111            .word	$111
31852                                           ! 5086 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31853 82E0                      009B            .word	$9B
31854                                           ! 5087                           0x01 | 0x02 | 0x04,
31855 82E2                        07            .byte	7
31856                                           ! 5088                           0,
31857 82E3                        00            .byte	0
31858                                           ! 5089                           64,
31859 82E4                      0040            .word	$40
31860                                           ! 5090                    64,
31861 82E6                      0040            .word	$40
31862                                           ! 5091                        0xA000,
31863 82E8                      A000            .word	$A000
31864                                           ! 5092                        0x0000,
31865 82EA                      0000            .word	0
31866                                           ! 5093                       0,
31867 82EC                      0000            .word	0
31868 82EE                      0000            .word	0
31869                                           ! 5094                             1280,
31870 82F0                      0500            .word	$500
31871                                           ! 5095                        640,
31872 82F2                      0280            .word	$280
31873                                           ! 5096                        480,
31874 82F4                      01E0            .word	$1E0
31875                                           ! 5097                      8,
31876 82F6                        08            .byte	8
31877                                           ! 5098                      16,
31878 82F7                        10            .byte	$10
31879                                           ! 5099                           1,
31880 82F8                        01            .byte	1
31881                                           ! 5100                         16,
31882 82F9                        10            .byte	$10
31883                                           ! 5101                          10,
31884 82FA                        0A            .byte	$A
31885                                           ! 5102                        0x06,
31886 82FB                        06            .byte	6
31887                                           ! 5103                     0,
31888 82FC                        00            .byte	0
31889                                           ! 5104                               26,
31890 82FD                        1A            .byte	$1A
31891                                           ! 5105                          0,
31892 82FE                        00            .byte	0
31893                                           ! 5106                        5,
31894 82FF                        05            .byte	5
31895                                           ! 5107                             11,
31896 8300                        0B            .byte	$B
31897                                           ! 5108                          6,
31898 8301                        06            .byte	6
31899                                           ! 5109                               5,
31900 8302                        05            .byte	5
31901                                           ! 5110                         5,
31902 8303                        05            .byte	5
31903                                           ! 5111                              0,
31904 8304                        00            .byte	0
31905                                           ! 5112                         0,
31906 8305                        00            .byte	0
31907                                           ! 5113                              0,
31908 8306                        00            .byte	0
31909                                           ! 5114                                0,
31910 8307                        00            .byte	0
31911                                           ! 5115                        0xE0000000,
31912 8308                      0000            .word	0
31913 830A                      E000            .word	$E000
31914                                           ! 5116                               0,
31915 830C                      0000            .word	0
31916 830E                      0000            .word	0
31917                                           ! 5117                             0,
31918 8310                      0000            .word	0
31919                                           ! 5118                                1280,
31920 8312                      0500            .word	$500
31921                                           ! 5119                             0,
31922 8314                        00            .byte	0
31923                                           ! 5120                             0,
31924 8315                        00            .byte	0
31925                                           ! 5121                           5,
31926 8316                        05            .byte	5
31927                                           ! 5122                             
31928                                           ! 5122    11,
31929 8317                        0B            .byte	$B
31930                                           ! 5123                             6,
31931 8318                        06            .byte	6
31932                                           ! 5124                                  5,
31933 8319                        05            .byte	5
31934                                           ! 5125                            5,
31935 831A                        05            .byte	5
31936                                           ! 5126                                 0,
31937 831B                        00            .byte	0
31938                                           ! 5127                            0,
31939 831C                        00            .byte	0
31940                                           ! 5128                                 0,
31941 831D                        00            .byte	0
31942                                           ! 5129                          0,
31943 831E                      0000            .word	0
31944 8320                      0000            .word	0
31945                                           ! 5130 } },
31946                                           ! 5131 { 0x0112,
31947 8322                      0112            .word	$112
31948                                           ! 5132 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31949 8324                      009B            .word	$9B
31950                                           ! 5133                           0x01 | 0x02 | 0x04,
31951 8326                        07            .byte	7
31952                                           ! 5134                           0,
31953 8327                        00            .byte	0
31954                                           ! 5135                           64,
31955 8328                      0040            .word	$40
31956                                           ! 5136                    64,
31957 832A                      0040            .word	$40
31958                                           ! 5137                        0xA000,
31959 832C                      A000            .word	$A000
31960                                           ! 5138                        0x0000,
31961 832E                      0000            .word	0
31962                                           ! 5139                       0,
31963 8330                      0000            .word	0
31964 8332                      0000            .word	0
31965                                           ! 5140                             1920,
31966 8334                      0780            .word	$780
31967                                           ! 5141                        640,
31968 8336                      0280            .word	$280
31969                                           ! 5142                        480,
31970 8338                      01E0            .word	$1E0
31971                                           ! 5143                      8,
31972 833A                        08            .byte	8
31973                                           ! 5144                      16,
31974 833B                        10            .byte	$10
31975                                           ! 5145                           1,
31976 833C                        01            .byte	1
31977                                           ! 5146                         24,
31978 833D                        18            .byte	$18
31979                                           ! 5147                          15,
31980 833E                        0F            .byte	$F
31981                                           ! 5148                        0x06,
31982 833F                        06            .byte	6
31983                                           ! 5149                     0,
31984 8340                        00            .byte	0
31985                                           ! 5150                               17,
31986 8341                        11            .byte	$11
31987                                           ! 5151                          0,
31988 8342                        00            .byte	0
31989                                           ! 5152                        8,
31990 8343                        08            .byte	8
31991                                           ! 5153                             16,
31992 8344                        10            .byte	$10
31993                                           ! 5154                          8,
31994 8345                        08            .byte	8
31995                                           ! 5155                               8,
31996 8346                        08            .byte	8
31997                                           ! 5156                         8,
31998 8347                        08            .byte	8
31999                                           ! 5157                              0,
32000 8348                        00            .byte	0
32001                                           ! 5158                         0,
32002 8349                        00            .byte	0
32003                                           ! 5159                              0,
32004 834A                        00            .byte	0
32005                                           ! 5160                                0,
32006 834B                        00            .byte	0
32007                                           ! 5161                        0xE0000000,
32008 834C                      0000            .word	0
32009 834E                      E000            .word	$E000
32010                                           ! 5162                               0,
32011 8350                      0000            .word	0
32012 8352                      0000            .word	0
32013                                           ! 5163                             0,
32014 8354                      0000            .word	0
32015                                           ! 5164                                1920,
32016 8356                      0780            .word	$780
32017                                           ! 5165                             0,
32018 8358                        00            .byte	0
32019                                           ! 5166                             0,
32020 8359                        00            .byte	0
32021                                           ! 5167                           8,
32022 835A                        08            .byte	8
32023                                           ! 5168                                16,
32024 835B                        10            .byte	$10
32025                                           ! 5169                             8,
32026 835C                        08            .byte	8
32027                                           ! 5170                                  8,
32028 835D                        08            .byte	8
32029                                           ! 5171                            8,
32030 835E                        08            .byte	8
32031                                           ! 5172                                 0,
32032 835F                        00            .byte	0
32033                                           ! 5173                            0,
32034 8360                        00            .byte	0
32035                                           ! 5174                                 0,
32036 8361                        00            .byte	0
32037                                           ! 5175                          0,
32038 8362                      0000            .word	0
32039 8364                      0000            .word	0
32040                                           ! 5176 } },
32041                                           ! 5177 { 0x0113,
32042 8366                      0113            .word	$113
32043                                           ! 5178 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32044 8368                      009B            .word	$9B
32045                                           ! 5179                           0x01 | 0x02 | 0x04,
32046 836A                        07            .byte	7
32047                                           ! 5180                           0,
32048 836B                        00            .byte	0
32049                                           ! 5181                           64,
32050 836C                      0040            .word	$40
32051                                           ! 5182                    64,
32052 836E                      0040            .word	$40
32053                                           ! 5183                        0xA000,
32054 8370                      A000            .word	$A000
32055                                           ! 5184                        0x0000,
32056 8372                      0000            .word	0
32057                                           ! 5185                       0,
32058 8374                      0000            .word	0
32059 8376                      0000            .word	0
32060                                           ! 5186                             1600,
32061 8378                      0640            .word	$640
32062                                           ! 5187                        800,
32063 837A                      0320            .word	$320
32064                                           ! 5188                        600,
32065 837C                      0258            .word	$258
32066                                           ! 5189                      8,
32067 837E                        08            .byte	8
32068                                           ! 5190                      16,
32069 837F                        10            .byte	$10
32070                                           ! 5191                           1,
32071                                           ! 5191 
32072 8380                        01            .byte	1
32073                                           ! 5192                         15,
32074 8381                        0F            .byte	$F
32075                                           ! 5193                          15,
32076 8382                        0F            .byte	$F
32077                                           ! 5194                        0x06,
32078 8383                        06            .byte	6
32079                                           ! 5195                     0,
32080 8384                        00            .byte	0
32081                                           ! 5196                               16,
32082 8385                        10            .byte	$10
32083                                           ! 5197                          0,
32084 8386                        00            .byte	0
32085                                           ! 5198                        5,
32086 8387                        05            .byte	5
32087                                           ! 5199                             10,
32088 8388                        0A            .byte	$A
32089                                           ! 5200                          5,
32090 8389                        05            .byte	5
32091                                           ! 5201                               5,
32092 838A                        05            .byte	5
32093                                           ! 5202                         5,
32094 838B                        05            .byte	5
32095                                           ! 5203                              0,
32096 838C                        00            .byte	0
32097                                           ! 5204                         1,
32098 838D                        01            .byte	1
32099                                           ! 5205                              15,
32100 838E                        0F            .byte	$F
32101                                           ! 5206                                0,
32102 838F                        00            .byte	0
32103                                           ! 5207                        0xE0000000,
32104 8390                      0000            .word	0
32105 8392                      E000            .word	$E000
32106                                           ! 5208                               0,
32107 8394                      0000            .word	0
32108 8396                      0000            .word	0
32109                                           ! 5209                             0,
32110 8398                      0000            .word	0
32111                                           ! 5210                                1600,
32112 839A                      0640            .word	$640
32113                                           ! 5211                             0,
32114 839C                        00            .byte	0
32115                                           ! 5212                             0,
32116 839D                        00            .byte	0
32117                                           ! 5213                           5,
32118 839E                        05            .byte	5
32119                                           ! 5214                                10,
32120 839F                        0A            .byte	$A
32121                                           ! 5215                             5,
32122 83A0                        05            .byte	5
32123                                           ! 5216                                  5,
32124 83A1                        05            .byte	5
32125                                           ! 5217                            5,
32126 83A2                        05            .byte	5
32127                                           ! 5218                                 0,
32128 83A3                        00            .byte	0
32129                                           ! 5219                            1,
32130 83A4                        01            .byte	1
32131                                           ! 5220                                 15,
32132 83A5                        0F            .byte	$F
32133                                           ! 5221                          0,
32134 83A6                      0000            .word	0
32135 83A8                      0000            .word	0
32136                                           ! 5222 } },
32137                                           ! 5223 { 0x0114,
32138 83AA                      0114            .word	$114
32139                                           ! 5224 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32140 83AC                      009B            .word	$9B
32141                                           ! 5225                           0x01 | 0x02 | 0x04,
32142 83AE                        07            .byte	7
32143                                           ! 5226                           0,
32144 83AF                        00            .byte	0
32145                                           ! 5227                           64,
32146 83B0                      0040            .word	$40
32147                                           ! 5228                    64,
32148 83B2                      0040            .word	$40
32149                                           ! 5229                        0xA000,
32150 83B4                      A000            .word	$A000
32151                                           ! 5230                        0x0000,
32152 83B6                      0000            .word	0
32153                                           ! 5231                       0,
32154 83B8                      0000            .word	0
32155 83BA                      0000            .word	0
32156                                           ! 5232                             1600,
32157 83BC                      0640            .word	$640
32158                                           ! 5233                        800,
32159 83BE                      0320            .word	$320
32160                                           ! 5234                        600,
32161 83C0                      0258            .word	$258
32162                                           ! 5235                      8,
32163 83C2                        08            .byte	8
32164                                           ! 5236                      16,
32165 83C3                        10            .byte	$10
32166                                           ! 5237                           1,
32167 83C4                        01            .byte	1
32168                                           ! 5238                         16,
32169 83C5                        10            .byte	$10
32170                                           ! 5239                          15,
32171 83C6                        0F            .byte	$F
32172                                           ! 5240                        0x06,
32173 83C7                        06            .byte	6
32174                                           ! 5241                     0,
32175 83C8                        00            .byte	0
32176                                           ! 5242                               16,
32177 83C9                        10            .byte	$10
32178                                           ! 5243                          0,
32179 83CA                        00            .byte	0
32180                                           ! 5244                        5,
32181 83CB                        05            .byte	5
32182                                           ! 5245                             11,
32183 83CC                        0B            .byte	$B
32184                                           ! 5246                          6,
32185 83CD                        06            .byte	6
32186                                           ! 5247                               5,
32187 83CE                        05            .byte	5
32188                                           ! 5248                         5,
32189 83CF                        05            .byte	5
32190                                           ! 5249                              0,
32191 83D0                        00            .byte	0
32192                                           ! 5250                         0,
32193 83D1                        00            .byte	0
32194                                           ! 5251                              0,
32195 83D2                        00            .byte	0
32196                                           ! 5252                                0,
32197 83D3                        00            .byte	0
32198                                           ! 5253                        0xE0000000,
32199 83D4                      0000            .word	0
32200 83D6                      E000            .word	$E000
32201                                           ! 5254                               0,
32202 83D8                      0000            .word	0
32203 83DA                      0000            .word	0
32204                                           ! 5255                             0,
32205 83DC                      0000            .word	0
32206                                           ! 5256                                1600,
32207 83DE                      0640            .word	$640
32208                                           ! 5257                             0,
32209 83E0                        00            .byte	0
32210                                           ! 5258                             0,
32211 83E1                        00            .byte	0
32212                                           ! 5259                           5,
32213 83E2                        05            .byte	5
32214                                           ! 5260    
32215                                           ! 5260                             11,
32216 83E3                        0B            .byte	$B
32217                                           ! 5261                             6,
32218 83E4                        06            .byte	6
32219                                           ! 5262                                  5,
32220 83E5                        05            .byte	5
32221                                           ! 5263                            5,
32222 83E6                        05            .byte	5
32223                                           ! 5264                                 0,
32224 83E7                        00            .byte	0
32225                                           ! 5265                            0,
32226 83E8                        00            .byte	0
32227                                           ! 5266                                 0,
32228 83E9                        00            .byte	0
32229                                           ! 5267                          0,
32230 83EA                      0000            .word	0
32231 83EC                      0000            .word	0
32232                                           ! 5268 } },
32233                                           ! 5269 { 0x0115,
32234 83EE                      0115            .word	$115
32235                                           ! 5270 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32236 83F0                      009B            .word	$9B
32237                                           ! 5271                           0x01 | 0x02 | 0x04,
32238 83F2                        07            .byte	7
32239                                           ! 5272                           0,
32240 83F3                        00            .byte	0
32241                                           ! 5273                           64,
32242 83F4                      0040            .word	$40
32243                                           ! 5274                    64,
32244 83F6                      0040            .word	$40
32245                                           ! 5275                        0xA000,
32246 83F8                      A000            .word	$A000
32247                                           ! 5276                        0x0000,
32248 83FA                      0000            .word	0
32249                                           ! 5277                       0,
32250 83FC                      0000            .word	0
32251 83FE                      0000            .word	0
32252                                           ! 5278                             2400,
32253 8400                      0960            .word	$960
32254                                           ! 5279                        800,
32255 8402                      0320            .word	$320
32256                                           ! 5280                        600,
32257 8404                      0258            .word	$258
32258                                           ! 5281                      8,
32259 8406                        08            .byte	8
32260                                           ! 5282                      16,
32261 8407                        10            .byte	$10
32262                                           ! 5283                           1,
32263 8408                        01            .byte	1
32264                                           ! 5284                         24,
32265 8409                        18            .byte	$18
32266                                           ! 5285                          22,
32267 840A                        16            .byte	$16
32268                                           ! 5286                        0x06,
32269 840B                        06            .byte	6
32270                                           ! 5287                     0,
32271 840C                        00            .byte	0
32272                                           ! 5288                               10,
32273 840D                        0A            .byte	$A
32274                                           ! 5289                          0,
32275 840E                        00            .byte	0
32276                                           ! 5290                        8,
32277 840F                        08            .byte	8
32278                                           ! 5291                             16,
32279 8410                        10            .byte	$10
32280                                           ! 5292                          8,
32281 8411                        08            .byte	8
32282                                           ! 5293                               8,
32283 8412                        08            .byte	8
32284                                           ! 5294                         8,
32285 8413                        08            .byte	8
32286                                           ! 5295                              0,
32287 8414                        00            .byte	0
32288                                           ! 5296                         0,
32289 8415                        00            .byte	0
32290                                           ! 5297                              0,
32291 8416                        00            .byte	0
32292                                           ! 5298                                0,
32293 8417                        00            .byte	0
32294                                           ! 5299                        0xE0000000,
32295 8418                      0000            .word	0
32296 841A                      E000            .word	$E000
32297                                           ! 5300                               0,
32298 841C                      0000            .word	0
32299 841E                      0000            .word	0
32300                                           ! 5301                             0,
32301 8420                      0000            .word	0
32302                                           ! 5302                                2400,
32303 8422                      0960            .word	$960
32304                                           ! 5303                             0,
32305 8424                        00            .byte	0
32306                                           ! 5304                             0,
32307 8425                        00            .byte	0
32308                                           ! 5305                           8,
32309 8426                        08            .byte	8
32310                                           ! 5306                                16,
32311 8427                        10            .byte	$10
32312                                           ! 5307                             8,
32313 8428                        08            .byte	8
32314                                           ! 5308                                  8,
32315 8429                        08            .byte	8
32316                                           ! 5309                            8,
32317 842A                        08            .byte	8
32318                                           ! 5310                                 0,
32319 842B                        00            .byte	0
32320                                           ! 5311                            0,
32321 842C                        00            .byte	0
32322                                           ! 5312                                 0,
32323 842D                        00            .byte	0
32324                                           ! 5313                          0,
32325 842E                      0000            .word	0
32326 8430                      0000            .word	0
32327                                           ! 5314 } },
32328                                           ! 5315 { 0x0116,
32329 8432                      0116            .word	$116
32330                                           ! 5316 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32331 8434                      009B            .word	$9B
32332                                           ! 5317                           0x01 | 0x02 | 0x04,
32333 8436                        07            .byte	7
32334                                           ! 5318                           0,
32335 8437                        00            .byte	0
32336                                           ! 5319                           64,
32337 8438                      0040            .word	$40
32338                                           ! 5320                    64,
32339 843A                      0040            .word	$40
32340                                           ! 5321                        0xA000,
32341 843C                      A000            .word	$A000
32342                                           ! 5322                        0x0000,
32343 843E                      0000            .word	0
32344                                           ! 5323                       0,
32345 8440                      0000            .word	0
32346 8442                      0000            .word	0
32347                                           ! 5324                             2048,
32348 8444                      0800            .word	$800
32349                                           ! 5325                        1024,
32350 8446                      0400            .word	$400
32351                                           ! 5326                        768,
32352 8448                      0300            .word	$300
32353                                           ! 5327                      8,
32354 844A                        08            .byte	8
32355                                           ! 5328                      16,
32356 844B                        10            .byte	$10
32357                                           ! 5329   
32358                                           ! 5329                         1,
32359 844C                        01            .byte	1
32360                                           ! 5330                         15,
32361 844D                        0F            .byte	$F
32362                                           ! 5331                          24,
32363 844E                        18            .byte	$18
32364                                           ! 5332                        0x06,
32365 844F                        06            .byte	6
32366                                           ! 5333                     0,
32367 8450                        00            .byte	0
32368                                           ! 5334                               9,
32369 8451                        09            .byte	9
32370                                           ! 5335                          0,
32371 8452                        00            .byte	0
32372                                           ! 5336                        5,
32373 8453                        05            .byte	5
32374                                           ! 5337                             10,
32375 8454                        0A            .byte	$A
32376                                           ! 5338                          5,
32377 8455                        05            .byte	5
32378                                           ! 5339                               5,
32379 8456                        05            .byte	5
32380                                           ! 5340                         5,
32381 8457                        05            .byte	5
32382                                           ! 5341                              0,
32383 8458                        00            .byte	0
32384                                           ! 5342                         1,
32385 8459                        01            .byte	1
32386                                           ! 5343                              15,
32387 845A                        0F            .byte	$F
32388                                           ! 5344                                0,
32389 845B                        00            .byte	0
32390                                           ! 5345                        0xE0000000,
32391 845C                      0000            .word	0
32392 845E                      E000            .word	$E000
32393                                           ! 5346                               0,
32394 8460                      0000            .word	0
32395 8462                      0000            .word	0
32396                                           ! 5347                             0,
32397 8464                      0000            .word	0
32398                                           ! 5348                                2048,
32399 8466                      0800            .word	$800
32400                                           ! 5349                             0,
32401 8468                        00            .byte	0
32402                                           ! 5350                             0,
32403 8469                        00            .byte	0
32404                                           ! 5351                           5,
32405 846A                        05            .byte	5
32406                                           ! 5352                                10,
32407 846B                        0A            .byte	$A
32408                                           ! 5353                             5,
32409 846C                        05            .byte	5
32410                                           ! 5354                                  5,
32411 846D                        05            .byte	5
32412                                           ! 5355                            5,
32413 846E                        05            .byte	5
32414                                           ! 5356                                 0,
32415 846F                        00            .byte	0
32416                                           ! 5357                            1,
32417 8470                        01            .byte	1
32418                                           ! 5358                                 15,
32419 8471                        0F            .byte	$F
32420                                           ! 5359                          0,
32421 8472                      0000            .word	0
32422 8474                      0000            .word	0
32423                                           ! 5360 } },
32424                                           ! 5361 { 0x0117,
32425 8476                      0117            .word	$117
32426                                           ! 5362 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32427 8478                      009B            .word	$9B
32428                                           ! 5363                           0x01 | 0x02 | 0x04,
32429 847A                        07            .byte	7
32430                                           ! 5364                           0,
32431 847B                        00            .byte	0
32432                                           ! 5365                           64,
32433 847C                      0040            .word	$40
32434                                           ! 5366                    64,
32435 847E                      0040            .word	$40
32436                                           ! 5367                        0xA000,
32437 8480                      A000            .word	$A000
32438                                           ! 5368                        0x0000,
32439 8482                      0000            .word	0
32440                                           ! 5369                       0,
32441 8484                      0000            .word	0
32442 8486                      0000            .word	0
32443                                           ! 5370                             2048,
32444 8488                      0800            .word	$800
32445                                           ! 5371                        1024,
32446 848A                      0400            .word	$400
32447                                           ! 5372                        768,
32448 848C                      0300            .word	$300
32449                                           ! 5373                      8,
32450 848E                        08            .byte	8
32451                                           ! 5374                      16,
32452 848F                        10            .byte	$10
32453                                           ! 5375                           1,
32454 8490                        01            .byte	1
32455                                           ! 5376                         16,
32456 8491                        10            .byte	$10
32457                                           ! 5377                          24,
32458 8492                        18            .byte	$18
32459                                           ! 5378                        0x06,
32460 8493                        06            .byte	6
32461                                           ! 5379                     0,
32462 8494                        00            .byte	0
32463                                           ! 5380                               9,
32464 8495                        09            .byte	9
32465                                           ! 5381                          0,
32466 8496                        00            .byte	0
32467                                           ! 5382                        5,
32468 8497                        05            .byte	5
32469                                           ! 5383                             11,
32470 8498                        0B            .byte	$B
32471                                           ! 5384                          6,
32472 8499                        06            .byte	6
32473                                           ! 5385                               5,
32474 849A                        05            .byte	5
32475                                           ! 5386                         5,
32476 849B                        05            .byte	5
32477                                           ! 5387                              0,
32478 849C                        00            .byte	0
32479                                           ! 5388                         0,
32480 849D                        00            .byte	0
32481                                           ! 5389                              0,
32482 849E                        00            .byte	0
32483                                           ! 5390                                0,
32484 849F                        00            .byte	0
32485                                           ! 5391                        0xE0000000,
32486 84A0                      0000            .word	0
32487 84A2                      E000            .word	$E000
32488                                           ! 5392                               0,
32489 84A4                      0000            .word	0
32490 84A6                      0000            .word	0
32491                                           ! 5393                             0,
32492 84A8                      0000            .word	0
32493                                           ! 5394                                2048,
32494 84AA                      0800            .word	$800
32495                                           ! 5395                             0,
32496 84AC                        00            .byte	0
32497                                           ! 5396                             0,
32498 84AD                        00            .byte	0
32499                                           ! 5397        
32500                                           ! 5397                    5,
32501 84AE                        05            .byte	5
32502                                           ! 5398                                11,
32503 84AF                        0B            .byte	$B
32504                                           ! 5399                             6,
32505 84B0                        06            .byte	6
32506                                           ! 5400                                  5,
32507 84B1                        05            .byte	5
32508                                           ! 5401                            5,
32509 84B2                        05            .byte	5
32510                                           ! 5402                                 0,
32511 84B3                        00            .byte	0
32512                                           ! 5403                            0,
32513 84B4                        00            .byte	0
32514                                           ! 5404                                 0,
32515 84B5                        00            .byte	0
32516                                           ! 5405                          0,
32517 84B6                      0000            .word	0
32518 84B8                      0000            .word	0
32519                                           ! 5406 } },
32520                                           ! 5407 { 0x0118,
32521 84BA                      0118            .word	$118
32522                                           ! 5408 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32523 84BC                      009B            .word	$9B
32524                                           ! 5409                           0x01 | 0x02 | 0x04,
32525 84BE                        07            .byte	7
32526                                           ! 5410                           0,
32527 84BF                        00            .byte	0
32528                                           ! 5411                           64,
32529 84C0                      0040            .word	$40
32530                                           ! 5412                    64,
32531 84C2                      0040            .word	$40
32532                                           ! 5413                        0xA000,
32533 84C4                      A000            .word	$A000
32534                                           ! 5414                        0x0000,
32535 84C6                      0000            .word	0
32536                                           ! 5415                       0,
32537 84C8                      0000            .word	0
32538 84CA                      0000            .word	0
32539                                           ! 5416                             3072,
32540 84CC                      0C00            .word	$C00
32541                                           ! 5417                        1024,
32542 84CE                      0400            .word	$400
32543                                           ! 5418                        768,
32544 84D0                      0300            .word	$300
32545                                           ! 5419                      8,
32546 84D2                        08            .byte	8
32547                                           ! 5420                      16,
32548 84D3                        10            .byte	$10
32549                                           ! 5421                           1,
32550 84D4                        01            .byte	1
32551                                           ! 5422                         24,
32552 84D5                        18            .byte	$18
32553                                           ! 5423                          36,
32554 84D6                        24            .byte	$24
32555                                           ! 5424                        0x06,
32556 84D7                        06            .byte	6
32557                                           ! 5425                     0,
32558 84D8                        00            .byte	0
32559                                           ! 5426                               6,
32560 84D9                        06            .byte	6
32561                                           ! 5427                          0,
32562 84DA                        00            .byte	0
32563                                           ! 5428                        8,
32564 84DB                        08            .byte	8
32565                                           ! 5429                             16,
32566 84DC                        10            .byte	$10
32567                                           ! 5430                          8,
32568 84DD                        08            .byte	8
32569                                           ! 5431                               8,
32570 84DE                        08            .byte	8
32571                                           ! 5432                         8,
32572 84DF                        08            .byte	8
32573                                           ! 5433                              0,
32574 84E0                        00            .byte	0
32575                                           ! 5434                         0,
32576 84E1                        00            .byte	0
32577                                           ! 5435                              0,
32578 84E2                        00            .byte	0
32579                                           ! 5436                                0,
32580 84E3                        00            .byte	0
32581                                           ! 5437                        0xE0000000,
32582 84E4                      0000            .word	0
32583 84E6                      E000            .word	$E000
32584                                           ! 5438                               0,
32585 84E8                      0000            .word	0
32586 84EA                      0000            .word	0
32587                                           ! 5439                             0,
32588 84EC                      0000            .word	0
32589                                           ! 5440                                3072,
32590 84EE                      0C00            .word	$C00
32591                                           ! 5441                             0,
32592 84F0                        00            .byte	0
32593                                           ! 5442                             0,
32594 84F1                        00            .byte	0
32595                                           ! 5443                           8,
32596 84F2                        08            .byte	8
32597                                           ! 5444                                16,
32598 84F3                        10            .byte	$10
32599                                           ! 5445                             8,
32600 84F4                        08            .byte	8
32601                                           ! 5446                                  8,
32602 84F5                        08            .byte	8
32603                                           ! 5447                            8,
32604 84F6                        08            .byte	8
32605                                           ! 5448                                 0,
32606 84F7                        00            .byte	0
32607                                           ! 5449                            0,
32608 84F8                        00            .byte	0
32609                                           ! 5450                                 0,
32610 84F9                        00            .byte	0
32611                                           ! 5451                          0,
32612 84FA                      0000            .word	0
32613 84FC                      0000            .word	0
32614                                           ! 5452 } },
32615                                           ! 5453 { 0x0119,
32616 84FE                      0119            .word	$119
32617                                           ! 5454 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32618 8500                      009B            .word	$9B
32619                                           ! 5455                           0x01 | 0x02 | 0x04,
32620 8502                        07            .byte	7
32621                                           ! 5456                           0,
32622 8503                        00            .byte	0
32623                                           ! 5457                           64,
32624 8504                      0040            .word	$40
32625                                           ! 5458                    64,
32626 8506                      0040            .word	$40
32627                                           ! 5459                        0xA000,
32628 8508                      A000            .word	$A000
32629                                           ! 5460                        0x0000,
32630 850A                      0000            .word	0
32631                                           ! 5461                       0,
32632 850C                      0000            .word	0
32633 850E                      0000            .word	0
32634                                           ! 5462                             2560,
32635 8510                      0A00            .word	$A00
32636                                           ! 5463                        1280,
32637 8512                      0500            .word	$500
32638                                           ! 5464                        1024,
32639 8514                      0400            .word	$400
32640                                           ! 5465                      8,
32641 8516                        08            .byte	8
32642                                           ! 5466  
32643                                           ! 5466                     16,
32644 8517                        10            .byte	$10
32645                                           ! 5467                           1,
32646 8518                        01            .byte	1
32647                                           ! 5468                         15,
32648 8519                        0F            .byte	$F
32649                                           ! 5469                          40,
32650 851A                        28            .byte	$28
32651                                           ! 5470                        0x06,
32652 851B                        06            .byte	6
32653                                           ! 5471                     0,
32654 851C                        00            .byte	0
32655                                           ! 5472                               5,
32656 851D                        05            .byte	5
32657                                           ! 5473                          0,
32658 851E                        00            .byte	0
32659                                           ! 5474                        5,
32660 851F                        05            .byte	5
32661                                           ! 5475                             10,
32662 8520                        0A            .byte	$A
32663                                           ! 5476                          5,
32664 8521                        05            .byte	5
32665                                           ! 5477                               5,
32666 8522                        05            .byte	5
32667                                           ! 5478                         5,
32668 8523                        05            .byte	5
32669                                           ! 5479                              0,
32670 8524                        00            .byte	0
32671                                           ! 5480                         1,
32672 8525                        01            .byte	1
32673                                           ! 5481                              15,
32674 8526                        0F            .byte	$F
32675                                           ! 5482                                0,
32676 8527                        00            .byte	0
32677                                           ! 5483                        0xE0000000,
32678 8528                      0000            .word	0
32679 852A                      E000            .word	$E000
32680                                           ! 5484                               0,
32681 852C                      0000            .word	0
32682 852E                      0000            .word	0
32683                                           ! 5485                             0,
32684 8530                      0000            .word	0
32685                                           ! 5486                                2560,
32686 8532                      0A00            .word	$A00
32687                                           ! 5487                             0,
32688 8534                        00            .byte	0
32689                                           ! 5488                             0,
32690 8535                        00            .byte	0
32691                                           ! 5489                           5,
32692 8536                        05            .byte	5
32693                                           ! 5490                                10,
32694 8537                        0A            .byte	$A
32695                                           ! 5491                             5,
32696 8538                        05            .byte	5
32697                                           ! 5492                                  5,
32698 8539                        05            .byte	5
32699                                           ! 5493                            5,
32700 853A                        05            .byte	5
32701                                           ! 5494                                 0,
32702 853B                        00            .byte	0
32703                                           ! 5495                            1,
32704 853C                        01            .byte	1
32705                                           ! 5496                                 15,
32706 853D                        0F            .byte	$F
32707                                           ! 5497                          0,
32708 853E                      0000            .word	0
32709 8540                      0000            .word	0
32710                                           ! 5498 } },
32711                                           ! 5499 { 0x011a,
32712 8542                      011A            .word	$11A
32713                                           ! 5500 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32714 8544                      009B            .word	$9B
32715                                           ! 5501                           0x01 | 0x02 | 0x04,
32716 8546                        07            .byte	7
32717                                           ! 5502                           0,
32718 8547                        00            .byte	0
32719                                           ! 5503                           64,
32720 8548                      0040            .word	$40
32721                                           ! 5504                    64,
32722 854A                      0040            .word	$40
32723                                           ! 5505                        0xA000,
32724 854C                      A000            .word	$A000
32725                                           ! 5506                        0x0000,
32726 854E                      0000            .word	0
32727                                           ! 5507                       0,
32728 8550                      0000            .word	0
32729 8552                      0000            .word	0
32730                                           ! 5508                             2560,
32731 8554                      0A00            .word	$A00
32732                                           ! 5509                        1280,
32733 8556                      0500            .word	$500
32734                                           ! 5510                        1024,
32735 8558                      0400            .word	$400
32736                                           ! 5511                      8,
32737 855A                        08            .byte	8
32738                                           ! 5512                      16,
32739 855B                        10            .byte	$10
32740                                           ! 5513                           1,
32741 855C                        01            .byte	1
32742                                           ! 5514                         16,
32743 855D                        10            .byte	$10
32744                                           ! 5515                          40,
32745 855E                        28            .byte	$28
32746                                           ! 5516                        0x06,
32747 855F                        06            .byte	6
32748                                           ! 5517                     0,
32749 8560                        00            .byte	0
32750                                           ! 5518                               5,
32751 8561                        05            .byte	5
32752                                           ! 5519                          0,
32753 8562                        00            .byte	0
32754                                           ! 5520                        5,
32755 8563                        05            .byte	5
32756                                           ! 5521                             11,
32757 8564                        0B            .byte	$B
32758                                           ! 5522                          6,
32759 8565                        06            .byte	6
32760                                           ! 5523                               5,
32761 8566                        05            .byte	5
32762                                           ! 5524                         5,
32763 8567                        05            .byte	5
32764                                           ! 5525                              0,
32765 8568                        00            .byte	0
32766                                           ! 5526                         0,
32767 8569                        00            .byte	0
32768                                           ! 5527                              0,
32769 856A                        00            .byte	0
32770                                           ! 5528                                0,
32771 856B                        00            .byte	0
32772                                           ! 5529                        0xE0000000,
32773 856C                      0000            .word	0
32774 856E                      E000            .word	$E000
32775                                           ! 5530                               0,
32776 8570                      0000            .word	0
32777 8572                      0000            .word	0
32778                                           ! 5531                             0,
32779 8574                      0000            .word	0
32780                                           ! 5532                                2560,
32781 8576                      0A00            .word	$A00
32782                                           ! 5533                             0,
32783 8578                        00            .byte	0
32784                                           ! 5534            
32785                                           ! 5534                  0,
32786 8579                        00            .byte	0
32787                                           ! 5535                           5,
32788 857A                        05            .byte	5
32789                                           ! 5536                                11,
32790 857B                        0B            .byte	$B
32791                                           ! 5537                             6,
32792 857C                        06            .byte	6
32793                                           ! 5538                                  5,
32794 857D                        05            .byte	5
32795                                           ! 5539                            5,
32796 857E                        05            .byte	5
32797                                           ! 5540                                 0,
32798 857F                        00            .byte	0
32799                                           ! 5541                            0,
32800 8580                        00            .byte	0
32801                                           ! 5542                                 0,
32802 8581                        00            .byte	0
32803                                           ! 5543                          0,
32804 8582                      0000            .word	0
32805 8584                      0000            .word	0
32806                                           ! 5544 } },
32807                                           ! 5545 { 0x011b,
32808 8586                      011B            .word	$11B
32809                                           ! 5546 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32810 8588                      009B            .word	$9B
32811                                           ! 5547                           0x01 | 0x02 | 0x04,
32812 858A                        07            .byte	7
32813                                           ! 5548                           0,
32814 858B                        00            .byte	0
32815                                           ! 5549                           64,
32816 858C                      0040            .word	$40
32817                                           ! 5550                    64,
32818 858E                      0040            .word	$40
32819                                           ! 5551                        0xA000,
32820 8590                      A000            .word	$A000
32821                                           ! 5552                        0x0000,
32822 8592                      0000            .word	0
32823                                           ! 5553                       0,
32824 8594                      0000            .word	0
32825 8596                      0000            .word	0
32826                                           ! 5554                             3840,
32827 8598                      0F00            .word	$F00
32828                                           ! 5555                        1280,
32829 859A                      0500            .word	$500
32830                                           ! 5556                        1024,
32831 859C                      0400            .word	$400
32832                                           ! 5557                      8,
32833 859E                        08            .byte	8
32834                                           ! 5558                      16,
32835 859F                        10            .byte	$10
32836                                           ! 5559                           1,
32837 85A0                        01            .byte	1
32838                                           ! 5560                         24,
32839 85A1                        18            .byte	$18
32840                                           ! 5561                          60,
32841 85A2                        3C            .byte	$3C
32842                                           ! 5562                        0x06,
32843 85A3                        06            .byte	6
32844                                           ! 5563                     0,
32845 85A4                        00            .byte	0
32846                                           ! 5564                               3,
32847 85A5                        03            .byte	3
32848                                           ! 5565                          0,
32849 85A6                        00            .byte	0
32850                                           ! 5566                        8,
32851 85A7                        08            .byte	8
32852                                           ! 5567                             16,
32853 85A8                        10            .byte	$10
32854                                           ! 5568                          8,
32855 85A9                        08            .byte	8
32856                                           ! 5569                               8,
32857 85AA                        08            .byte	8
32858                                           ! 5570                         8,
32859 85AB                        08            .byte	8
32860                                           ! 5571                              0,
32861 85AC                        00            .byte	0
32862                                           ! 5572                         0,
32863 85AD                        00            .byte	0
32864                                           ! 5573                              0,
32865 85AE                        00            .byte	0
32866                                           ! 5574                                0,
32867 85AF                        00            .byte	0
32868                                           ! 5575                        0xE0000000,
32869 85B0                      0000            .word	0
32870 85B2                      E000            .word	$E000
32871                                           ! 5576                               0,
32872 85B4                      0000            .word	0
32873 85B6                      0000            .word	0
32874                                           ! 5577                             0,
32875 85B8                      0000            .word	0
32876                                           ! 5578                                3840,
32877 85BA                      0F00            .word	$F00
32878                                           ! 5579                             0,
32879 85BC                        00            .byte	0
32880                                           ! 5580                             0,
32881 85BD                        00            .byte	0
32882                                           ! 5581                           8,
32883 85BE                        08            .byte	8
32884                                           ! 5582                                16,
32885 85BF                        10            .byte	$10
32886                                           ! 5583                             8,
32887 85C0                        08            .byte	8
32888                                           ! 5584                                  8,
32889 85C1                        08            .byte	8
32890                                           ! 5585                            8,
32891 85C2                        08            .byte	8
32892                                           ! 5586                                 0,
32893 85C3                        00            .byte	0
32894                                           ! 5587                            0,
32895 85C4                        00            .byte	0
32896                                           ! 5588                                 0,
32897 85C5                        00            .byte	0
32898                                           ! 5589                          0,
32899 85C6                      0000            .word	0
32900 85C8                      0000            .word	0
32901                                           ! 5590 } },
32902                                           ! 5591 { 0x011c,
32903 85CA                      011C            .word	$11C
32904                                           ! 5592 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32905 85CC                      009B            .word	$9B
32906                                           ! 5593                           0x01 | 0x02 | 0x04,
32907 85CE                        07            .byte	7
32908                                           ! 5594                           0,
32909 85CF                        00            .byte	0
32910                                           ! 5595                           64,
32911 85D0                      0040            .word	$40
32912                                           ! 5596                    64,
32913 85D2                      0040            .word	$40
32914                                           ! 5597                        0xA000,
32915 85D4                      A000            .word	$A000
32916                                           ! 5598                        0x0000,
32917 85D6                      0000            .word	0
32918                                           ! 5599                       0,
32919 85D8                      0000            .word	0
32920 85DA                      0000            .word	0
32921                                           ! 5600                             1600,
32922 85DC                      0640            .word	$640
32923                                           ! 5601                        1600,
32924 85DE                      0640            .word	$640
32925                                           ! 5602                        120
32926                                           ! 5602 0,
32927 85E0                      04B0            .word	$4B0
32928                                           ! 5603                      8,
32929 85E2                        08            .byte	8
32930                                           ! 5604                      16,
32931 85E3                        10            .byte	$10
32932                                           ! 5605                           1,
32933 85E4                        01            .byte	1
32934                                           ! 5606                         8,
32935 85E5                        08            .byte	8
32936                                           ! 5607                          30,
32937 85E6                        1E            .byte	$1E
32938                                           ! 5608                        0x04,
32939 85E7                        04            .byte	4
32940                                           ! 5609                     0,
32941 85E8                        00            .byte	0
32942                                           ! 5610                               7,
32943 85E9                        07            .byte	7
32944                                           ! 5611                          0,
32945 85EA                        00            .byte	0
32946                                           ! 5612                        0,
32947 85EB                        00            .byte	0
32948                                           ! 5613                             0,
32949 85EC                        00            .byte	0
32950                                           ! 5614                          0,
32951 85ED                        00            .byte	0
32952                                           ! 5615                               0,
32953 85EE                        00            .byte	0
32954                                           ! 5616                         0,
32955 85EF                        00            .byte	0
32956                                           ! 5617                              0,
32957 85F0                        00            .byte	0
32958                                           ! 5618                         0,
32959 85F1                        00            .byte	0
32960                                           ! 5619                              0,
32961 85F2                        00            .byte	0
32962                                           ! 5620                                0,
32963 85F3                        00            .byte	0
32964                                           ! 5621                        0xE0000000,
32965 85F4                      0000            .word	0
32966 85F6                      E000            .word	$E000
32967                                           ! 5622                               0,
32968 85F8                      0000            .word	0
32969 85FA                      0000            .word	0
32970                                           ! 5623                             0,
32971 85FC                      0000            .word	0
32972                                           ! 5624                                1600,
32973 85FE                      0640            .word	$640
32974                                           ! 5625                             0,
32975 8600                        00            .byte	0
32976                                           ! 5626                             0,
32977 8601                        00            .byte	0
32978                                           ! 5627                           0,
32979 8602                        00            .byte	0
32980                                           ! 5628                                0,
32981 8603                        00            .byte	0
32982                                           ! 5629                             0,
32983 8604                        00            .byte	0
32984                                           ! 5630                                  0,
32985 8605                        00            .byte	0
32986                                           ! 5631                            0,
32987 8606                        00            .byte	0
32988                                           ! 5632                                 0,
32989 8607                        00            .byte	0
32990                                           ! 5633                            0,
32991 8608                        00            .byte	0
32992                                           ! 5634                                 0,
32993 8609                        00            .byte	0
32994                                           ! 5635                          0,
32995 860A                      0000            .word	0
32996 860C                      0000            .word	0
32997                                           ! 5636 } },
32998                                           ! 5637 { 0x011d,
32999 860E                      011D            .word	$11D
33000                                           ! 5638 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33001 8610                      009B            .word	$9B
33002                                           ! 5639                           0x01 | 0x02 | 0x04,
33003 8612                        07            .byte	7
33004                                           ! 5640                           0,
33005 8613                        00            .byte	0
33006                                           ! 5641                           64,
33007 8614                      0040            .word	$40
33008                                           ! 5642                    64,
33009 8616                      0040            .word	$40
33010                                           ! 5643                        0xA000,
33011 8618                      A000            .word	$A000
33012                                           ! 5644                        0x0000,
33013 861A                      0000            .word	0
33014                                           ! 5645                       0,
33015 861C                      0000            .word	0
33016 861E                      0000            .word	0
33017                                           ! 5646                             3200,
33018 8620                      0C80            .word	$C80
33019                                           ! 5647                        1600,
33020 8622                      0640            .word	$640
33021                                           ! 5648                        1200,
33022 8624                      04B0            .word	$4B0
33023                                           ! 5649                      8,
33024 8626                        08            .byte	8
33025                                           ! 5650                      16,
33026 8627                        10            .byte	$10
33027                                           ! 5651                           1,
33028 8628                        01            .byte	1
33029                                           ! 5652                         15,
33030 8629                        0F            .byte	$F
33031                                           ! 5653                          59,
33032 862A                        3B            .byte	$3B
33033                                           ! 5654                        0x06,
33034 862B                        06            .byte	6
33035                                           ! 5655                     0,
33036 862C                        00            .byte	0
33037                                           ! 5656                               3,
33038 862D                        03            .byte	3
33039                                           ! 5657                          0,
33040 862E                        00            .byte	0
33041                                           ! 5658                        5,
33042 862F                        05            .byte	5
33043                                           ! 5659                             10,
33044 8630                        0A            .byte	$A
33045                                           ! 5660                          5,
33046 8631                        05            .byte	5
33047                                           ! 5661                               5,
33048 8632                        05            .byte	5
33049                                           ! 5662                         5,
33050 8633                        05            .byte	5
33051                                           ! 5663                              0,
33052 8634                        00            .byte	0
33053                                           ! 5664                         1,
33054 8635                        01            .byte	1
33055                                           ! 5665                              15,
33056 8636                        0F            .byte	$F
33057                                           ! 5666                                0,
33058 8637                        00            .byte	0
33059                                           ! 5667                        0xE0000000,
33060 8638                      0000            .word	0
33061 863A                      E000            .word	$E000
33062                                           ! 5668                               0,
33063 863C                      0000            .word	0
33064 863E                      0000            .word	0
33065                                           ! 5669                             0,
33066 8640                      0000            .word	0
33067                                           ! 5670                                3200,
33068 8642                      0C80            .word	$C80
33069                                           ! 5671                   
33070                                           ! 5671           0,
33071 8644                        00            .byte	0
33072                                           ! 5672                             0,
33073 8645                        00            .byte	0
33074                                           ! 5673                           5,
33075 8646                        05            .byte	5
33076                                           ! 5674                                10,
33077 8647                        0A            .byte	$A
33078                                           ! 5675                             5,
33079 8648                        05            .byte	5
33080                                           ! 5676                                  5,
33081 8649                        05            .byte	5
33082                                           ! 5677                            5,
33083 864A                        05            .byte	5
33084                                           ! 5678                                 0,
33085 864B                        00            .byte	0
33086                                           ! 5679                            1,
33087 864C                        01            .byte	1
33088                                           ! 5680                                 15,
33089 864D                        0F            .byte	$F
33090                                           ! 5681                          0,
33091 864E                      0000            .word	0
33092 8650                      0000            .word	0
33093                                           ! 5682 } },
33094                                           ! 5683 { 0x011e,
33095 8652                      011E            .word	$11E
33096                                           ! 5684 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33097 8654                      009B            .word	$9B
33098                                           ! 5685                           0x01 | 0x02 | 0x04,
33099 8656                        07            .byte	7
33100                                           ! 5686                           0,
33101 8657                        00            .byte	0
33102                                           ! 5687                           64,
33103 8658                      0040            .word	$40
33104                                           ! 5688                    64,
33105 865A                      0040            .word	$40
33106                                           ! 5689                        0xA000,
33107 865C                      A000            .word	$A000
33108                                           ! 5690                        0x0000,
33109 865E                      0000            .word	0
33110                                           ! 5691                       0,
33111 8660                      0000            .word	0
33112 8662                      0000            .word	0
33113                                           ! 5692                             3200,
33114 8664                      0C80            .word	$C80
33115                                           ! 5693                        1600,
33116 8666                      0640            .word	$640
33117                                           ! 5694                        1200,
33118 8668                      04B0            .word	$4B0
33119                                           ! 5695                      8,
33120 866A                        08            .byte	8
33121                                           ! 5696                      16,
33122 866B                        10            .byte	$10
33123                                           ! 5697                           1,
33124 866C                        01            .byte	1
33125                                           ! 5698                         16,
33126 866D                        10            .byte	$10
33127                                           ! 5699                          59,
33128 866E                        3B            .byte	$3B
33129                                           ! 5700                        0x06,
33130 866F                        06            .byte	6
33131                                           ! 5701                     0,
33132 8670                        00            .byte	0
33133                                           ! 5702                               3,
33134 8671                        03            .byte	3
33135                                           ! 5703                          0,
33136 8672                        00            .byte	0
33137                                           ! 5704                        5,
33138 8673                        05            .byte	5
33139                                           ! 5705                             11,
33140 8674                        0B            .byte	$B
33141                                           ! 5706                          6,
33142 8675                        06            .byte	6
33143                                           ! 5707                               5,
33144 8676                        05            .byte	5
33145                                           ! 5708                         5,
33146 8677                        05            .byte	5
33147                                           ! 5709                              0,
33148 8678                        00            .byte	0
33149                                           ! 5710                         0,
33150 8679                        00            .byte	0
33151                                           ! 5711                              0,
33152 867A                        00            .byte	0
33153                                           ! 5712                                0,
33154 867B                        00            .byte	0
33155                                           ! 5713                        0xE0000000,
33156 867C                      0000            .word	0
33157 867E                      E000            .word	$E000
33158                                           ! 5714                               0,
33159 8680                      0000            .word	0
33160 8682                      0000            .word	0
33161                                           ! 5715                             0,
33162 8684                      0000            .word	0
33163                                           ! 5716                                3200,
33164 8686                      0C80            .word	$C80
33165                                           ! 5717                             0,
33166 8688                        00            .byte	0
33167                                           ! 5718                             0,
33168 8689                        00            .byte	0
33169                                           ! 5719                           5,
33170 868A                        05            .byte	5
33171                                           ! 5720                                11,
33172 868B                        0B            .byte	$B
33173                                           ! 5721                             6,
33174 868C                        06            .byte	6
33175                                           ! 5722                                  5,
33176 868D                        05            .byte	5
33177                                           ! 5723                            5,
33178 868E                        05            .byte	5
33179                                           ! 5724                                 0,
33180 868F                        00            .byte	0
33181                                           ! 5725                            0,
33182 8690                        00            .byte	0
33183                                           ! 5726                                 0,
33184 8691                        00            .byte	0
33185                                           ! 5727                          0,
33186 8692                      0000            .word	0
33187 8694                      0000            .word	0
33188                                           ! 5728 } },
33189                                           ! 5729 { 0x011f,
33190 8696                      011F            .word	$11F
33191                                           ! 5730 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33192 8698                      009B            .word	$9B
33193                                           ! 5731                           0x01 | 0x02 | 0x04,
33194 869A                        07            .byte	7
33195                                           ! 5732                           0,
33196 869B                        00            .byte	0
33197                                           ! 5733                           64,
33198 869C                      0040            .word	$40
33199                                           ! 5734                    64,
33200 869E                      0040            .word	$40
33201                                           ! 5735                        0xA000,
33202 86A0                      A000            .word	$A000
33203                                           ! 5736                        0x0000,
33204 86A2                      0000            .word	0
33205                                           ! 5737                       0,
33206 86A4                      0000            .word	0
33207 86A6                      0000            .word	0
33208                                           ! 5738                             4800,
33209 86A8                      12C0            .word	$12C0
33210                                           ! 5739                        1600,
33211 86AA                      0640            .word	$640
33212                                           ! 5740  
33213                                           ! 5740                       1200,
33214 86AC                      04B0            .word	$4B0
33215                                           ! 5741                      8,
33216 86AE                        08            .byte	8
33217                                           ! 5742                      16,
33218 86AF                        10            .byte	$10
33219                                           ! 5743                           1,
33220 86B0                        01            .byte	1
33221                                           ! 5744                         24,
33222 86B1                        18            .byte	$18
33223                                           ! 5745                          88,
33224 86B2                        58            .byte	$58
33225                                           ! 5746                        0x06,
33226 86B3                        06            .byte	6
33227                                           ! 5747                     0,
33228 86B4                        00            .byte	0
33229                                           ! 5748                               1,
33230 86B5                        01            .byte	1
33231                                           ! 5749                          0,
33232 86B6                        00            .byte	0
33233                                           ! 5750                        8,
33234 86B7                        08            .byte	8
33235                                           ! 5751                             16,
33236 86B8                        10            .byte	$10
33237                                           ! 5752                          8,
33238 86B9                        08            .byte	8
33239                                           ! 5753                               8,
33240 86BA                        08            .byte	8
33241                                           ! 5754                         8,
33242 86BB                        08            .byte	8
33243                                           ! 5755                              0,
33244 86BC                        00            .byte	0
33245                                           ! 5756                         0,
33246 86BD                        00            .byte	0
33247                                           ! 5757                              0,
33248 86BE                        00            .byte	0
33249                                           ! 5758                                0,
33250 86BF                        00            .byte	0
33251                                           ! 5759                        0xE0000000,
33252 86C0                      0000            .word	0
33253 86C2                      E000            .word	$E000
33254                                           ! 5760                               0,
33255 86C4                      0000            .word	0
33256 86C6                      0000            .word	0
33257                                           ! 5761                             0,
33258 86C8                      0000            .word	0
33259                                           ! 5762                                4800,
33260 86CA                      12C0            .word	$12C0
33261                                           ! 5763                             0,
33262 86CC                        00            .byte	0
33263                                           ! 5764                             0,
33264 86CD                        00            .byte	0
33265                                           ! 5765                           8,
33266 86CE                        08            .byte	8
33267                                           ! 5766                                16,
33268 86CF                        10            .byte	$10
33269                                           ! 5767                             8,
33270 86D0                        08            .byte	8
33271                                           ! 5768                                  8,
33272 86D1                        08            .byte	8
33273                                           ! 5769                            8,
33274 86D2                        08            .byte	8
33275                                           ! 5770                                 0,
33276 86D3                        00            .byte	0
33277                                           ! 5771                            0,
33278 86D4                        00            .byte	0
33279                                           ! 5772                                 0,
33280 86D5                        00            .byte	0
33281                                           ! 5773                          0,
33282 86D6                      0000            .word	0
33283 86D8                      0000            .word	0
33284                                           ! 5774 } },
33285                                           ! 5775 { 0x0140,
33286 86DA                      0140            .word	$140
33287                                           ! 5776 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33288 86DC                      009B            .word	$9B
33289                                           ! 5777                           0x01 | 0x02 | 0x04,
33290 86DE                        07            .byte	7
33291                                           ! 5778                           0,
33292 86DF                        00            .byte	0
33293                                           ! 5779                           64,
33294 86E0                      0040            .word	$40
33295                                           ! 5780                    64,
33296 86E2                      0040            .word	$40
33297                                           ! 5781                        0xA000,
33298 86E4                      A000            .word	$A000
33299                                           ! 5782                        0x0000,
33300 86E6                      0000            .word	0
33301                                           ! 5783                       0,
33302 86E8                      0000            .word	0
33303 86EA                      0000            .word	0
33304                                           ! 5784                             1280,
33305 86EC                      0500            .word	$500
33306                                           ! 5785                        320,
33307 86EE                      0140            .word	$140
33308                                           ! 5786                        200,
33309 86F0                      00C8            .word	$C8
33310                                           ! 5787                      8,
33311 86F2                        08            .byte	8
33312                                           ! 5788                      16,
33313 86F3                        10            .byte	$10
33314                                           ! 5789                           1,
33315 86F4                        01            .byte	1
33316                                           ! 5790                         32,
33317 86F5                        20            .byte	$20
33318                                           ! 5791                          4,
33319 86F6                        04            .byte	4
33320                                           ! 5792                        0x06,
33321 86F7                        06            .byte	6
33322                                           ! 5793                     0,
33323 86F8                        00            .byte	0
33324                                           ! 5794                               64,
33325 86F9                        40            .byte	$40
33326                                           ! 5795                          0,
33327 86FA                        00            .byte	0
33328                                           ! 5796                        8,
33329 86FB                        08            .byte	8
33330                                           ! 5797                             16,
33331 86FC                        10            .byte	$10
33332                                           ! 5798                          8,
33333 86FD                        08            .byte	8
33334                                           ! 5799                               8,
33335 86FE                        08            .byte	8
33336                                           ! 5800                         8,
33337 86FF                        08            .byte	8
33338                                           ! 5801                              0,
33339 8700                        00            .byte	0
33340                                           ! 5802                         8,
33341 8701                        08            .byte	8
33342                                           ! 5803                              24,
33343 8702                        18            .byte	$18
33344                                           ! 5804                                0x02,
33345 8703                        02            .byte	2
33346                                           ! 5805                        0xE0000000,
33347 8704                      0000            .word	0
33348 8706                      E000            .word	$E000
33349                                           ! 5806                               0,
33350 8708                      0000            .word	0
33351 870A                      0000            .word	0
33352                                           ! 5807                             0,
33353 870C                      0000            .word	0
33354                                           ! 5808                           
33355                                           ! 5808      1280,
33356 870E                      0500            .word	$500
33357                                           ! 5809                             0,
33358 8710                        00            .byte	0
33359                                           ! 5810                             0,
33360 8711                        00            .byte	0
33361                                           ! 5811                           8,
33362 8712                        08            .byte	8
33363                                           ! 5812                                16,
33364 8713                        10            .byte	$10
33365                                           ! 5813                             8,
33366 8714                        08            .byte	8
33367                                           ! 5814                                  8,
33368 8715                        08            .byte	8
33369                                           ! 5815                            8,
33370 8716                        08            .byte	8
33371                                           ! 5816                                 0,
33372 8717                        00            .byte	0
33373                                           ! 5817                            8,
33374 8718                        08            .byte	8
33375                                           ! 5818                                 24,
33376 8719                        18            .byte	$18
33377                                           ! 5819                          0,
33378 871A                      0000            .word	0
33379 871C                      0000            .word	0
33380                                           ! 5820 } },
33381                                           ! 5821 { 0x0141,
33382 871E                      0141            .word	$141
33383                                           ! 5822 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33384 8720                      009B            .word	$9B
33385                                           ! 5823                           0x01 | 0x02 | 0x04,
33386 8722                        07            .byte	7
33387                                           ! 5824                           0,
33388 8723                        00            .byte	0
33389                                           ! 5825                           64,
33390 8724                      0040            .word	$40
33391                                           ! 5826                    64,
33392 8726                      0040            .word	$40
33393                                           ! 5827                        0xA000,
33394 8728                      A000            .word	$A000
33395                                           ! 5828                        0x0000,
33396 872A                      0000            .word	0
33397                                           ! 5829                       0,
33398 872C                      0000            .word	0
33399 872E                      0000            .word	0
33400                                           ! 5830                             2560,
33401 8730                      0A00            .word	$A00
33402                                           ! 5831                        640,
33403 8732                      0280            .word	$280
33404                                           ! 5832                        400,
33405 8734                      0190            .word	$190
33406                                           ! 5833                      8,
33407 8736                        08            .byte	8
33408                                           ! 5834                      16,
33409 8737                        10            .byte	$10
33410                                           ! 5835                           1,
33411 8738                        01            .byte	1
33412                                           ! 5836                         32,
33413 8739                        20            .byte	$20
33414                                           ! 5837                          16,
33415 873A                        10            .byte	$10
33416                                           ! 5838                        0x06,
33417 873B                        06            .byte	6
33418                                           ! 5839                     0,
33419 873C                        00            .byte	0
33420                                           ! 5840                               15,
33421 873D                        0F            .byte	$F
33422                                           ! 5841                          0,
33423 873E                        00            .byte	0
33424                                           ! 5842                        8,
33425 873F                        08            .byte	8
33426                                           ! 5843                             16,
33427 8740                        10            .byte	$10
33428                                           ! 5844                          8,
33429 8741                        08            .byte	8
33430                                           ! 5845                               8,
33431 8742                        08            .byte	8
33432                                           ! 5846                         8,
33433 8743                        08            .byte	8
33434                                           ! 5847                              0,
33435 8744                        00            .byte	0
33436                                           ! 5848                         8,
33437 8745                        08            .byte	8
33438                                           ! 5849                              24,
33439 8746                        18            .byte	$18
33440                                           ! 5850                                0x02,
33441 8747                        02            .byte	2
33442                                           ! 5851                        0xE0000000,
33443 8748                      0000            .word	0
33444 874A                      E000            .word	$E000
33445                                           ! 5852                               0,
33446 874C                      0000            .word	0
33447 874E                      0000            .word	0
33448                                           ! 5853                             0,
33449 8750                      0000            .word	0
33450                                           ! 5854                                2560,
33451 8752                      0A00            .word	$A00
33452                                           ! 5855                             0,
33453 8754                        00            .byte	0
33454                                           ! 5856                             0,
33455 8755                        00            .byte	0
33456                                           ! 5857                           8,
33457 8756                        08            .byte	8
33458                                           ! 5858                                16,
33459 8757                        10            .byte	$10
33460                                           ! 5859                             8,
33461 8758                        08            .byte	8
33462                                           ! 5860                                  8,
33463 8759                        08            .byte	8
33464                                           ! 5861                            8,
33465 875A                        08            .byte	8
33466                                           ! 5862                                 0,
33467 875B                        00            .byte	0
33468                                           ! 5863                            8,
33469 875C                        08            .byte	8
33470                                           ! 5864                                 24,
33471 875D                        18            .byte	$18
33472                                           ! 5865                          0,
33473 875E                      0000            .word	0
33474 8760                      0000            .word	0
33475                                           ! 5866 } },
33476                                           ! 5867 { 0x0142,
33477 8762                      0142            .word	$142
33478                                           ! 5868 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33479 8764                      009B            .word	$9B
33480                                           ! 5869                           0x01 | 0x02 | 0x04,
33481 8766                        07            .byte	7
33482                                           ! 5870                           0,
33483 8767                        00            .byte	0
33484                                           ! 5871                           64,
33485 8768                      0040            .word	$40
33486                                           ! 5872                    64,
33487 876A                      0040            .word	$40
33488                                           ! 5873                        0xA000,
33489 876C                      A000            .word	$A000
33490                                           ! 5874                        0x0000,
33491 876E                      0000            .word	0
33492                                           ! 5875                       0,
33493 8770                      0000            .word	0
33494 8772                      0000            .word	0
33495                                           ! 5876                             256
33496                                           ! 5876 0,
33497 8774                      0A00            .word	$A00
33498                                           ! 5877                        640,
33499 8776                      0280            .word	$280
33500                                           ! 5878                        480,
33501 8778                      01E0            .word	$1E0
33502                                           ! 5879                      8,
33503 877A                        08            .byte	8
33504                                           ! 5880                      16,
33505 877B                        10            .byte	$10
33506                                           ! 5881                           1,
33507 877C                        01            .byte	1
33508                                           ! 5882                         32,
33509 877D                        20            .byte	$20
33510                                           ! 5883                          19,
33511 877E                        13            .byte	$13
33512                                           ! 5884                        0x06,
33513 877F                        06            .byte	6
33514                                           ! 5885                     0,
33515 8780                        00            .byte	0
33516                                           ! 5886                               12,
33517 8781                        0C            .byte	$C
33518                                           ! 5887                          0,
33519 8782                        00            .byte	0
33520                                           ! 5888                        8,
33521 8783                        08            .byte	8
33522                                           ! 5889                             16,
33523 8784                        10            .byte	$10
33524                                           ! 5890                          8,
33525 8785                        08            .byte	8
33526                                           ! 5891                               8,
33527 8786                        08            .byte	8
33528                                           ! 5892                         8,
33529 8787                        08            .byte	8
33530                                           ! 5893                              0,
33531 8788                        00            .byte	0
33532                                           ! 5894                         8,
33533 8789                        08            .byte	8
33534                                           ! 5895                              24,
33535 878A                        18            .byte	$18
33536                                           ! 5896                                0x02,
33537 878B                        02            .byte	2
33538                                           ! 5897                        0xE0000000,
33539 878C                      0000            .word	0
33540 878E                      E000            .word	$E000
33541                                           ! 5898                               0,
33542 8790                      0000            .word	0
33543 8792                      0000            .word	0
33544                                           ! 5899                             0,
33545 8794                      0000            .word	0
33546                                           ! 5900                                2560,
33547 8796                      0A00            .word	$A00
33548                                           ! 5901                             0,
33549 8798                        00            .byte	0
33550                                           ! 5902                             0,
33551 8799                        00            .byte	0
33552                                           ! 5903                           8,
33553 879A                        08            .byte	8
33554                                           ! 5904                                16,
33555 879B                        10            .byte	$10
33556                                           ! 5905                             8,
33557 879C                        08            .byte	8
33558                                           ! 5906                                  8,
33559 879D                        08            .byte	8
33560                                           ! 5907                            8,
33561 879E                        08            .byte	8
33562                                           ! 5908                                 0,
33563 879F                        00            .byte	0
33564                                           ! 5909                            8,
33565 87A0                        08            .byte	8
33566                                           ! 5910                                 24,
33567 87A1                        18            .byte	$18
33568                                           ! 5911                          0,
33569 87A2                      0000            .word	0
33570 87A4                      0000            .word	0
33571                                           ! 5912 } },
33572                                           ! 5913 { 0x0143,
33573 87A6                      0143            .word	$143
33574                                           ! 5914 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33575 87A8                      009B            .word	$9B
33576                                           ! 5915                           0x01 | 0x02 | 0x04,
33577 87AA                        07            .byte	7
33578                                           ! 5916                           0,
33579 87AB                        00            .byte	0
33580                                           ! 5917                           64,
33581 87AC                      0040            .word	$40
33582                                           ! 5918                    64,
33583 87AE                      0040            .word	$40
33584                                           ! 5919                        0xA000,
33585 87B0                      A000            .word	$A000
33586                                           ! 5920                        0x0000,
33587 87B2                      0000            .word	0
33588                                           ! 5921                       0,
33589 87B4                      0000            .word	0
33590 87B6                      0000            .word	0
33591                                           ! 5922                             3200,
33592 87B8                      0C80            .word	$C80
33593                                           ! 5923                        800,
33594 87BA                      0320            .word	$320
33595                                           ! 5924                        600,
33596 87BC                      0258            .word	$258
33597                                           ! 5925                      8,
33598 87BE                        08            .byte	8
33599                                           ! 5926                      16,
33600 87BF                        10            .byte	$10
33601                                           ! 5927                           1,
33602 87C0                        01            .byte	1
33603                                           ! 5928                         32,
33604 87C1                        20            .byte	$20
33605                                           ! 5929                          30,
33606 87C2                        1E            .byte	$1E
33607                                           ! 5930                        0x06,
33608 87C3                        06            .byte	6
33609                                           ! 5931                     0,
33610 87C4                        00            .byte	0
33611                                           ! 5932                               7,
33612 87C5                        07            .byte	7
33613                                           ! 5933                          0,
33614 87C6                        00            .byte	0
33615                                           ! 5934                        8,
33616 87C7                        08            .byte	8
33617                                           ! 5935                             16,
33618 87C8                        10            .byte	$10
33619                                           ! 5936                          8,
33620 87C9                        08            .byte	8
33621                                           ! 5937                               8,
33622 87CA                        08            .byte	8
33623                                           ! 5938                         8,
33624 87CB                        08            .byte	8
33625                                           ! 5939                              0,
33626 87CC                        00            .byte	0
33627                                           ! 5940                         8,
33628 87CD                        08            .byte	8
33629                                           ! 5941                              24,
33630 87CE                        18            .byte	$18
33631                                           ! 5942                                0x02,
33632 87CF                        02            .byte	2
33633                                           ! 5943                        0xE0000000,
33634 87D0                      0000            .word	0
33635 87D2                      E000            .word	$E000
33636                                           ! 5944                               0,
33637 87D4                      0000            .word	0
33638 87D6                      0000            .word	0
33639                                           ! 5945                     
33640                                           ! 5945         0,
33641 87D8                      0000            .word	0
33642                                           ! 5946                                3200,
33643 87DA                      0C80            .word	$C80
33644                                           ! 5947                             0,
33645 87DC                        00            .byte	0
33646                                           ! 5948                             0,
33647 87DD                        00            .byte	0
33648                                           ! 5949                           8,
33649 87DE                        08            .byte	8
33650                                           ! 5950                                16,
33651 87DF                        10            .byte	$10
33652                                           ! 5951                             8,
33653 87E0                        08            .byte	8
33654                                           ! 5952                                  8,
33655 87E1                        08            .byte	8
33656                                           ! 5953                            8,
33657 87E2                        08            .byte	8
33658                                           ! 5954                                 0,
33659 87E3                        00            .byte	0
33660                                           ! 5955                            8,
33661 87E4                        08            .byte	8
33662                                           ! 5956                                 24,
33663 87E5                        18            .byte	$18
33664                                           ! 5957                          0,
33665 87E6                      0000            .word	0
33666 87E8                      0000            .word	0
33667                                           ! 5958 } },
33668                                           ! 5959 { 0x0144,
33669 87EA                      0144            .word	$144
33670                                           ! 5960 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33671 87EC                      009B            .word	$9B
33672                                           ! 5961                           0x01 | 0x02 | 0x04,
33673 87EE                        07            .byte	7
33674                                           ! 5962                           0,
33675 87EF                        00            .byte	0
33676                                           ! 5963                           64,
33677 87F0                      0040            .word	$40
33678                                           ! 5964                    64,
33679 87F2                      0040            .word	$40
33680                                           ! 5965                        0xA000,
33681 87F4                      A000            .word	$A000
33682                                           ! 5966                        0x0000,
33683 87F6                      0000            .word	0
33684                                           ! 5967                       0,
33685 87F8                      0000            .word	0
33686 87FA                      0000            .word	0
33687                                           ! 5968                             4096,
33688 87FC                      1000            .word	$1000
33689                                           ! 5969                        1024,
33690 87FE                      0400            .word	$400
33691                                           ! 5970                        768,
33692 8800                      0300            .word	$300
33693                                           ! 5971                      8,
33694 8802                        08            .byte	8
33695                                           ! 5972                      16,
33696 8803                        10            .byte	$10
33697                                           ! 5973                           1,
33698 8804                        01            .byte	1
33699                                           ! 5974                         32,
33700 8805                        20            .byte	$20
33701                                           ! 5975                          48,
33702 8806                        30            .byte	$30
33703                                           ! 5976                        0x06,
33704 8807                        06            .byte	6
33705                                           ! 5977                     0,
33706 8808                        00            .byte	0
33707                                           ! 5978                               4,
33708 8809                        04            .byte	4
33709                                           ! 5979                          0,
33710 880A                        00            .byte	0
33711                                           ! 5980                        8,
33712 880B                        08            .byte	8
33713                                           ! 5981                             16,
33714 880C                        10            .byte	$10
33715                                           ! 5982                          8,
33716 880D                        08            .byte	8
33717                                           ! 5983                               8,
33718 880E                        08            .byte	8
33719                                           ! 5984                         8,
33720 880F                        08            .byte	8
33721                                           ! 5985                              0,
33722 8810                        00            .byte	0
33723                                           ! 5986                         8,
33724 8811                        08            .byte	8
33725                                           ! 5987                              24,
33726 8812                        18            .byte	$18
33727                                           ! 5988                                0x02,
33728 8813                        02            .byte	2
33729                                           ! 5989                        0xE0000000,
33730 8814                      0000            .word	0
33731 8816                      E000            .word	$E000
33732                                           ! 5990                               0,
33733 8818                      0000            .word	0
33734 881A                      0000            .word	0
33735                                           ! 5991                             0,
33736 881C                      0000            .word	0
33737                                           ! 5992                                4096,
33738 881E                      1000            .word	$1000
33739                                           ! 5993                             0,
33740 8820                        00            .byte	0
33741                                           ! 5994                             0,
33742 8821                        00            .byte	0
33743                                           ! 5995                           8,
33744 8822                        08            .byte	8
33745                                           ! 5996                                16,
33746 8823                        10            .byte	$10
33747                                           ! 5997                             8,
33748 8824                        08            .byte	8
33749                                           ! 5998                                  8,
33750 8825                        08            .byte	8
33751                                           ! 5999                            8,
33752 8826                        08            .byte	8
33753                                           ! 6000                                 0,
33754 8827                        00            .byte	0
33755                                           ! 6001                            8,
33756 8828                        08            .byte	8
33757                                           ! 6002                                 24,
33758 8829                        18            .byte	$18
33759                                           ! 6003                          0,
33760 882A                      0000            .word	0
33761 882C                      0000            .word	0
33762                                           ! 6004 } },
33763                                           ! 6005 { 0x0145,
33764 882E                      0145            .word	$145
33765                                           ! 6006 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33766 8830                      009B            .word	$9B
33767                                           ! 6007                           0x01 | 0x02 | 0x04,
33768 8832                        07            .byte	7
33769                                           ! 6008                           0,
33770 8833                        00            .byte	0
33771                                           ! 6009                           64,
33772 8834                      0040            .word	$40
33773                                           ! 6010                    64,
33774 8836                      0040            .word	$40
33775                                           ! 6011                        0xA000,
33776 8838                      A000            .word	$A000
33777                                           ! 6012                        0x0000,
33778 883A                      0000            .word	0
33779                                           ! 6013                    
33780                                           ! 6013    0,
33781 883C                      0000            .word	0
33782 883E                      0000            .word	0
33783                                           ! 6014                             5120,
33784 8840                      1400            .word	$1400
33785                                           ! 6015                        1280,
33786 8842                      0500            .word	$500
33787                                           ! 6016                        1024,
33788 8844                      0400            .word	$400
33789                                           ! 6017                      8,
33790 8846                        08            .byte	8
33791                                           ! 6018                      16,
33792 8847                        10            .byte	$10
33793                                           ! 6019                           1,
33794 8848                        01            .byte	1
33795                                           ! 6020                         32,
33796 8849                        20            .byte	$20
33797                                           ! 6021                          80,
33798 884A                        50            .byte	$50
33799                                           ! 6022                        0x06,
33800 884B                        06            .byte	6
33801                                           ! 6023                     0,
33802 884C                        00            .byte	0
33803                                           ! 6024                               2,
33804 884D                        02            .byte	2
33805                                           ! 6025                          0,
33806 884E                        00            .byte	0
33807                                           ! 6026                        8,
33808 884F                        08            .byte	8
33809                                           ! 6027                             16,
33810 8850                        10            .byte	$10
33811                                           ! 6028                          8,
33812 8851                        08            .byte	8
33813                                           ! 6029                               8,
33814 8852                        08            .byte	8
33815                                           ! 6030                         8,
33816 8853                        08            .byte	8
33817                                           ! 6031                              0,
33818 8854                        00            .byte	0
33819                                           ! 6032                         8,
33820 8855                        08            .byte	8
33821                                           ! 6033                              24,
33822 8856                        18            .byte	$18
33823                                           ! 6034                                0x02,
33824 8857                        02            .byte	2
33825                                           ! 6035                        0xE0000000,
33826 8858                      0000            .word	0
33827 885A                      E000            .word	$E000
33828                                           ! 6036                               0,
33829 885C                      0000            .word	0
33830 885E                      0000            .word	0
33831                                           ! 6037                             0,
33832 8860                      0000            .word	0
33833                                           ! 6038                                5120,
33834 8862                      1400            .word	$1400
33835                                           ! 6039                             0,
33836 8864                        00            .byte	0
33837                                           ! 6040                             0,
33838 8865                        00            .byte	0
33839                                           ! 6041                           8,
33840 8866                        08            .byte	8
33841                                           ! 6042                                16,
33842 8867                        10            .byte	$10
33843                                           ! 6043                             8,
33844 8868                        08            .byte	8
33845                                           ! 6044                                  8,
33846 8869                        08            .byte	8
33847                                           ! 6045                            8,
33848 886A                        08            .byte	8
33849                                           ! 6046                                 0,
33850 886B                        00            .byte	0
33851                                           ! 6047                            8,
33852 886C                        08            .byte	8
33853                                           ! 6048                                 24,
33854 886D                        18            .byte	$18
33855                                           ! 6049                          0,
33856 886E                      0000            .word	0
33857 8870                      0000            .word	0
33858                                           ! 6050 } },
33859                                           ! 6051 { 0x0146,
33860 8872                      0146            .word	$146
33861                                           ! 6052 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33862 8874                      009B            .word	$9B
33863                                           ! 6053                           0x01 | 0x02 | 0x04,
33864 8876                        07            .byte	7
33865                                           ! 6054                           0,
33866 8877                        00            .byte	0
33867                                           ! 6055                           64,
33868 8878                      0040            .word	$40
33869                                           ! 6056                    64,
33870 887A                      0040            .word	$40
33871                                           ! 6057                        0xA000,
33872 887C                      A000            .word	$A000
33873                                           ! 6058                        0x0000,
33874 887E                      0000            .word	0
33875                                           ! 6059                       0,
33876 8880                      0000            .word	0
33877 8882                      0000            .word	0
33878                                           ! 6060                             320,
33879 8884                      0140            .word	$140
33880                                           ! 6061                        320,
33881 8886                      0140            .word	$140
33882                                           ! 6062                        200,
33883 8888                      00C8            .word	$C8
33884                                           ! 6063                      8,
33885 888A                        08            .byte	8
33886                                           ! 6064                      16,
33887 888B                        10            .byte	$10
33888                                           ! 6065                           1,
33889 888C                        01            .byte	1
33890                                           ! 6066                         8,
33891 888D                        08            .byte	8
33892                                           ! 6067                          1,
33893 888E                        01            .byte	1
33894                                           ! 6068                        0x04,
33895 888F                        04            .byte	4
33896                                           ! 6069                     0,
33897 8890                        00            .byte	0
33898                                           ! 6070                               261,
33899 8891                        05            .byte	5
33900                                           ! 6071                          0,
33901 8892                        00            .byte	0
33902                                           ! 6072                        0,
33903 8893                        00            .byte	0
33904                                           ! 6073                             0,
33905 8894                        00            .byte	0
33906                                           ! 6074                          0,
33907 8895                        00            .byte	0
33908                                           ! 6075                               0,
33909 8896                        00            .byte	0
33910                                           ! 6076                         0,
33911 8897                        00            .byte	0
33912                                           ! 6077                              0,
33913 8898                        00            .byte	0
33914                                           ! 6078                         0,
33915 8899                        00            .byte	0
33916                                           ! 6079                              0,
33917 889A                        00            .byte	0
33918                                           ! 6080                                0,
33919 889B                        00            .byte	0
33920                                           ! 6081                        0xE0000000,
33921 889C                      0000            .word	0
33922 889E                      E000            .word	$E000
33923                                           ! 6082                      
33924                                           ! 6082          0,
33925 88A0                      0000            .word	0
33926 88A2                      0000            .word	0
33927                                           ! 6083                             0,
33928 88A4                      0000            .word	0
33929                                           ! 6084                                320,
33930 88A6                      0140            .word	$140
33931                                           ! 6085                             0,
33932 88A8                        00            .byte	0
33933                                           ! 6086                             0,
33934 88A9                        00            .byte	0
33935                                           ! 6087                           0,
33936 88AA                        00            .byte	0
33937                                           ! 6088                                0,
33938 88AB                        00            .byte	0
33939                                           ! 6089                             0,
33940 88AC                        00            .byte	0
33941                                           ! 6090                                  0,
33942 88AD                        00            .byte	0
33943                                           ! 6091                            0,
33944 88AE                        00            .byte	0
33945                                           ! 6092                                 0,
33946 88AF                        00            .byte	0
33947                                           ! 6093                            0,
33948 88B0                        00            .byte	0
33949                                           ! 6094                                 0,
33950 88B1                        00            .byte	0
33951                                           ! 6095                          0,
33952 88B2                      0000            .word	0
33953 88B4                      0000            .word	0
33954                                           ! 6096 } },
33955                                           ! 6097 { 0x0147,
33956 88B6                      0147            .word	$147
33957                                           ! 6098 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33958 88B8                      009B            .word	$9B
33959                                           ! 6099                           0x01 | 0x02 | 0x04,
33960 88BA                        07            .byte	7
33961                                           ! 6100                           0,
33962 88BB                        00            .byte	0
33963                                           ! 6101                           64,
33964 88BC                      0040            .word	$40
33965                                           ! 6102                    64,
33966 88BE                      0040            .word	$40
33967                                           ! 6103                        0xA000,
33968 88C0                      A000            .word	$A000
33969                                           ! 6104                        0x0000,
33970 88C2                      0000            .word	0
33971                                           ! 6105                       0,
33972 88C4                      0000            .word	0
33973 88C6                      0000            .word	0
33974                                           ! 6106                             6400,
33975 88C8                      1900            .word	$1900
33976                                           ! 6107                        1600,
33977 88CA                      0640            .word	$640
33978                                           ! 6108                        1200,
33979 88CC                      04B0            .word	$4B0
33980                                           ! 6109                      8,
33981 88CE                        08            .byte	8
33982                                           ! 6110                      16,
33983 88CF                        10            .byte	$10
33984                                           ! 6111                           1,
33985 88D0                        01            .byte	1
33986                                           ! 6112                         32,
33987 88D1                        20            .byte	$20
33988                                           ! 6113                          118,
33989 88D2                        76            .byte	$76
33990                                           ! 6114                        0x06,
33991 88D3                        06            .byte	6
33992                                           ! 6115                     0,
33993 88D4                        00            .byte	0
33994                                           ! 6116                               1,
33995 88D5                        01            .byte	1
33996                                           ! 6117                          0,
33997 88D6                        00            .byte	0
33998                                           ! 6118                        8,
33999 88D7                        08            .byte	8
34000                                           ! 6119                             16,
34001 88D8                        10            .byte	$10
34002                                           ! 6120                          8,
34003 88D9                        08            .byte	8
34004                                           ! 6121                               8,
34005 88DA                        08            .byte	8
34006                                           ! 6122                         8,
34007 88DB                        08            .byte	8
34008                                           ! 6123                              0,
34009 88DC                        00            .byte	0
34010                                           ! 6124                         8,
34011 88DD                        08            .byte	8
34012                                           ! 6125                              24,
34013 88DE                        18            .byte	$18
34014                                           ! 6126                                0x02,
34015 88DF                        02            .byte	2
34016                                           ! 6127                        0xE0000000,
34017 88E0                      0000            .word	0
34018 88E2                      E000            .word	$E000
34019                                           ! 6128                               0,
34020 88E4                      0000            .word	0
34021 88E6                      0000            .word	0
34022                                           ! 6129                             0,
34023 88E8                      0000            .word	0
34024                                           ! 6130                                6400,
34025 88EA                      1900            .word	$1900
34026                                           ! 6131                             0,
34027 88EC                        00            .byte	0
34028                                           ! 6132                             0,
34029 88ED                        00            .byte	0
34030                                           ! 6133                           8,
34031 88EE                        08            .byte	8
34032                                           ! 6134                                16,
34033 88EF                        10            .byte	$10
34034                                           ! 6135                             8,
34035 88F0                        08            .byte	8
34036                                           ! 6136                                  8,
34037 88F1                        08            .byte	8
34038                                           ! 6137                            8,
34039 88F2                        08            .byte	8
34040                                           ! 6138                                 0,
34041 88F3                        00            .byte	0
34042                                           ! 6139                            8,
34043 88F4                        08            .byte	8
34044                                           ! 6140                                 24,
34045 88F5                        18            .byte	$18
34046                                           ! 6141                          0,
34047 88F6                      0000            .word	0
34048 88F8                      0000            .word	0
34049                                           ! 6142 } },
34050                                           ! 6143 { 0x0148,
34051 88FA                      0148            .word	$148
34052                                           ! 6144 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34053 88FC                      009B            .word	$9B
34054                                           ! 6145                           0x01 | 0x02 | 0x04,
34055 88FE                        07            .byte	7
34056                                           ! 6146                           0,
34057 88FF                        00            .byte	0
34058                                           ! 6147                           64,
34059 8900                      0040            .word	$40
34060                                           ! 6148                    64,
34061 8902                      0040            .word	$40
34062                                           ! 6149                        0xA000,
34063 8904                      A000            .word	$A000
34064                                           ! 6150                    
34065                                           ! 6150     0x0000,
34066 8906                      0000            .word	0
34067                                           ! 6151                       0,
34068 8908                      0000            .word	0
34069 890A                      0000            .word	0
34070                                           ! 6152                             1152,
34071 890C                      0480            .word	$480
34072                                           ! 6153                        1152,
34073 890E                      0480            .word	$480
34074                                           ! 6154                        864,
34075 8910                      0360            .word	$360
34076                                           ! 6155                      8,
34077 8912                        08            .byte	8
34078                                           ! 6156                      16,
34079 8913                        10            .byte	$10
34080                                           ! 6157                           1,
34081 8914                        01            .byte	1
34082                                           ! 6158                         8,
34083 8915                        08            .byte	8
34084                                           ! 6159                          16,
34085 8916                        10            .byte	$10
34086                                           ! 6160                        0x04,
34087 8917                        04            .byte	4
34088                                           ! 6161                     0,
34089 8918                        00            .byte	0
34090                                           ! 6162                               15,
34091 8919                        0F            .byte	$F
34092                                           ! 6163                          0,
34093 891A                        00            .byte	0
34094                                           ! 6164                        0,
34095 891B                        00            .byte	0
34096                                           ! 6165                             0,
34097 891C                        00            .byte	0
34098                                           ! 6166                          0,
34099 891D                        00            .byte	0
34100                                           ! 6167                               0,
34101 891E                        00            .byte	0
34102                                           ! 6168                         0,
34103 891F                        00            .byte	0
34104                                           ! 6169                              0,
34105 8920                        00            .byte	0
34106                                           ! 6170                         0,
34107 8921                        00            .byte	0
34108                                           ! 6171                              0,
34109 8922                        00            .byte	0
34110                                           ! 6172                                0,
34111 8923                        00            .byte	0
34112                                           ! 6173                        0xE0000000,
34113 8924                      0000            .word	0
34114 8926                      E000            .word	$E000
34115                                           ! 6174                               0,
34116 8928                      0000            .word	0
34117 892A                      0000            .word	0
34118                                           ! 6175                             0,
34119 892C                      0000            .word	0
34120                                           ! 6176                                1152,
34121 892E                      0480            .word	$480
34122                                           ! 6177                             0,
34123 8930                        00            .byte	0
34124                                           ! 6178                             0,
34125 8931                        00            .byte	0
34126                                           ! 6179                           0,
34127 8932                        00            .byte	0
34128                                           ! 6180                                0,
34129 8933                        00            .byte	0
34130                                           ! 6181                             0,
34131 8934                        00            .byte	0
34132                                           ! 6182                                  0,
34133 8935                        00            .byte	0
34134                                           ! 6183                            0,
34135 8936                        00            .byte	0
34136                                           ! 6184                                 0,
34137 8937                        00            .byte	0
34138                                           ! 6185                            0,
34139 8938                        00            .byte	0
34140                                           ! 6186                                 0,
34141 8939                        00            .byte	0
34142                                           ! 6187                          0,
34143 893A                      0000            .word	0
34144 893C                      0000            .word	0
34145                                           ! 6188 } },
34146                                           ! 6189 { 0x0149,
34147 893E                      0149            .word	$149
34148                                           ! 6190 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34149 8940                      009B            .word	$9B
34150                                           ! 6191                           0x01 | 0x02 | 0x04,
34151 8942                        07            .byte	7
34152                                           ! 6192                           0,
34153 8943                        00            .byte	0
34154                                           ! 6193                           64,
34155 8944                      0040            .word	$40
34156                                           ! 6194                    64,
34157 8946                      0040            .word	$40
34158                                           ! 6195                        0xA000,
34159 8948                      A000            .word	$A000
34160                                           ! 6196                        0x0000,
34161 894A                      0000            .word	0
34162                                           ! 6197                       0,
34163 894C                      0000            .word	0
34164 894E                      0000            .word	0
34165                                           ! 6198                             2304,
34166 8950                      0900            .word	$900
34167                                           ! 6199                        1152,
34168 8952                      0480            .word	$480
34169                                           ! 6200                        864,
34170 8954                      0360            .word	$360
34171                                           ! 6201                      8,
34172 8956                        08            .byte	8
34173                                           ! 6202                      16,
34174 8957                        10            .byte	$10
34175                                           ! 6203                           1,
34176 8958                        01            .byte	1
34177                                           ! 6204                         15,
34178 8959                        0F            .byte	$F
34179                                           ! 6205                          31,
34180 895A                        1F            .byte	$1F
34181                                           ! 6206                        0x06,
34182 895B                        06            .byte	6
34183                                           ! 6207                     0,
34184 895C                        00            .byte	0
34185                                           ! 6208                               7,
34186 895D                        07            .byte	7
34187                                           ! 6209                          0,
34188 895E                        00            .byte	0
34189                                           ! 6210                        5,
34190 895F                        05            .byte	5
34191                                           ! 6211                             10,
34192 8960                        0A            .byte	$A
34193                                           ! 6212                          5,
34194 8961                        05            .byte	5
34195                                           ! 6213                               5,
34196 8962                        05            .byte	5
34197                                           ! 6214                         5,
34198 8963                        05            .byte	5
34199                                           ! 6215                              0,
34200 8964                        00            .byte	0
34201                                           ! 6216                         1,
34202 8965                        01            .byte	1
34203                                           ! 6217                              15,
34204 8966                        0F            .byte	$F
34205                                           ! 6218                                0,
34206 8967                        00            .byte	0
34207                                           ! 6219                        0xE000
34208                                           ! 6219 0000,
34209 8968                      0000            .word	0
34210 896A                      E000            .word	$E000
34211                                           ! 6220                               0,
34212 896C                      0000            .word	0
34213 896E                      0000            .word	0
34214                                           ! 6221                             0,
34215 8970                      0000            .word	0
34216                                           ! 6222                                2304,
34217 8972                      0900            .word	$900
34218                                           ! 6223                             0,
34219 8974                        00            .byte	0
34220                                           ! 6224                             0,
34221 8975                        00            .byte	0
34222                                           ! 6225                           5,
34223 8976                        05            .byte	5
34224                                           ! 6226                                10,
34225 8977                        0A            .byte	$A
34226                                           ! 6227                             5,
34227 8978                        05            .byte	5
34228                                           ! 6228                                  5,
34229 8979                        05            .byte	5
34230                                           ! 6229                            5,
34231 897A                        05            .byte	5
34232                                           ! 6230                                 0,
34233 897B                        00            .byte	0
34234                                           ! 6231                            1,
34235 897C                        01            .byte	1
34236                                           ! 6232                                 15,
34237 897D                        0F            .byte	$F
34238                                           ! 6233                          0,
34239 897E                      0000            .word	0
34240 8980                      0000            .word	0
34241                                           ! 6234 } },
34242                                           ! 6235 { 0x014a,
34243 8982                      014A            .word	$14A
34244                                           ! 6236 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34245 8984                      009B            .word	$9B
34246                                           ! 6237                           0x01 | 0x02 | 0x04,
34247 8986                        07            .byte	7
34248                                           ! 6238                           0,
34249 8987                        00            .byte	0
34250                                           ! 6239                           64,
34251 8988                      0040            .word	$40
34252                                           ! 6240                    64,
34253 898A                      0040            .word	$40
34254                                           ! 6241                        0xA000,
34255 898C                      A000            .word	$A000
34256                                           ! 6242                        0x0000,
34257 898E                      0000            .word	0
34258                                           ! 6243                       0,
34259 8990                      0000            .word	0
34260 8992                      0000            .word	0
34261                                           ! 6244                             2304,
34262 8994                      0900            .word	$900
34263                                           ! 6245                        1152,
34264 8996                      0480            .word	$480
34265                                           ! 6246                        864,
34266 8998                      0360            .word	$360
34267                                           ! 6247                      8,
34268 899A                        08            .byte	8
34269                                           ! 6248                      16,
34270 899B                        10            .byte	$10
34271                                           ! 6249                           1,
34272 899C                        01            .byte	1
34273                                           ! 6250                         16,
34274 899D                        10            .byte	$10
34275                                           ! 6251                          31,
34276 899E                        1F            .byte	$1F
34277                                           ! 6252                        0x06,
34278 899F                        06            .byte	6
34279                                           ! 6253                     0,
34280 89A0                        00            .byte	0
34281                                           ! 6254                               7,
34282 89A1                        07            .byte	7
34283                                           ! 6255                          0,
34284 89A2                        00            .byte	0
34285                                           ! 6256                        5,
34286 89A3                        05            .byte	5
34287                                           ! 6257                             11,
34288 89A4                        0B            .byte	$B
34289                                           ! 6258                          6,
34290 89A5                        06            .byte	6
34291                                           ! 6259                               5,
34292 89A6                        05            .byte	5
34293                                           ! 6260                         5,
34294 89A7                        05            .byte	5
34295                                           ! 6261                              0,
34296 89A8                        00            .byte	0
34297                                           ! 6262                         0,
34298 89A9                        00            .byte	0
34299                                           ! 6263                              0,
34300 89AA                        00            .byte	0
34301                                           ! 6264                                0,
34302 89AB                        00            .byte	0
34303                                           ! 6265                        0xE0000000,
34304 89AC                      0000            .word	0
34305 89AE                      E000            .word	$E000
34306                                           ! 6266                               0,
34307 89B0                      0000            .word	0
34308 89B2                      0000            .word	0
34309                                           ! 6267                             0,
34310 89B4                      0000            .word	0
34311                                           ! 6268                                2304,
34312 89B6                      0900            .word	$900
34313                                           ! 6269                             0,
34314 89B8                        00            .byte	0
34315                                           ! 6270                             0,
34316 89B9                        00            .byte	0
34317                                           ! 6271                           5,
34318 89BA                        05            .byte	5
34319                                           ! 6272                                11,
34320 89BB                        0B            .byte	$B
34321                                           ! 6273                             6,
34322 89BC                        06            .byte	6
34323                                           ! 6274                                  5,
34324 89BD                        05            .byte	5
34325                                           ! 6275                            5,
34326 89BE                        05            .byte	5
34327                                           ! 6276                                 0,
34328 89BF                        00            .byte	0
34329                                           ! 6277                            0,
34330 89C0                        00            .byte	0
34331                                           ! 6278                                 0,
34332 89C1                        00            .byte	0
34333                                           ! 6279                          0,
34334 89C2                      0000            .word	0
34335 89C4                      0000            .word	0
34336                                           ! 6280 } },
34337                                           ! 6281 { 0x014b,
34338 89C6                      014B            .word	$14B
34339                                           ! 6282 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34340 89C8                      009B            .word	$9B
34341                                           ! 6283                           0x01 | 0x02 | 0x04,
34342 89CA                        07            .byte	7
34343                                           ! 6284                           0,
34344 89CB                        00            .byte	0
34345                                           ! 6285                           64,
34346 89CC                      0040            .word	$40
34347                                           ! 6286                    64,
34348 89CE                      0040            .word	$40
34349                                           ! 6287                        0xA0
34350                                           ! 6287 00,
34351 89D0                      A000            .word	$A000
34352                                           ! 6288                        0x0000,
34353 89D2                      0000            .word	0
34354                                           ! 6289                       0,
34355 89D4                      0000            .word	0
34356 89D6                      0000            .word	0
34357                                           ! 6290                             3456,
34358 89D8                      0D80            .word	$D80
34359                                           ! 6291                        1152,
34360 89DA                      0480            .word	$480
34361                                           ! 6292                        864,
34362 89DC                      0360            .word	$360
34363                                           ! 6293                      8,
34364 89DE                        08            .byte	8
34365                                           ! 6294                      16,
34366 89DF                        10            .byte	$10
34367                                           ! 6295                           1,
34368 89E0                        01            .byte	1
34369                                           ! 6296                         24,
34370 89E1                        18            .byte	$18
34371                                           ! 6297                          46,
34372 89E2                        2E            .byte	$2E
34373                                           ! 6298                        0x06,
34374 89E3                        06            .byte	6
34375                                           ! 6299                     0,
34376 89E4                        00            .byte	0
34377                                           ! 6300                               4,
34378 89E5                        04            .byte	4
34379                                           ! 6301                          0,
34380 89E6                        00            .byte	0
34381                                           ! 6302                        8,
34382 89E7                        08            .byte	8
34383                                           ! 6303                             16,
34384 89E8                        10            .byte	$10
34385                                           ! 6304                          8,
34386 89E9                        08            .byte	8
34387                                           ! 6305                               8,
34388 89EA                        08            .byte	8
34389                                           ! 6306                         8,
34390 89EB                        08            .byte	8
34391                                           ! 6307                              0,
34392 89EC                        00            .byte	0
34393                                           ! 6308                         0,
34394 89ED                        00            .byte	0
34395                                           ! 6309                              0,
34396 89EE                        00            .byte	0
34397                                           ! 6310                                0,
34398 89EF                        00            .byte	0
34399                                           ! 6311                        0xE0000000,
34400 89F0                      0000            .word	0
34401 89F2                      E000            .word	$E000
34402                                           ! 6312                               0,
34403 89F4                      0000            .word	0
34404 89F6                      0000            .word	0
34405                                           ! 6313                             0,
34406 89F8                      0000            .word	0
34407                                           ! 6314                                3456,
34408 89FA                      0D80            .word	$D80
34409                                           ! 6315                             0,
34410 89FC                        00            .byte	0
34411                                           ! 6316                             0,
34412 89FD                        00            .byte	0
34413                                           ! 6317                           8,
34414 89FE                        08            .byte	8
34415                                           ! 6318                                16,
34416 89FF                        10            .byte	$10
34417                                           ! 6319                             8,
34418 8A00                        08            .byte	8
34419                                           ! 6320                                  8,
34420 8A01                        08            .byte	8
34421                                           ! 6321                            8,
34422 8A02                        08            .byte	8
34423                                           ! 6322                                 0,
34424 8A03                        00            .byte	0
34425                                           ! 6323                            0,
34426 8A04                        00            .byte	0
34427                                           ! 6324                                 0,
34428 8A05                        00            .byte	0
34429                                           ! 6325                          0,
34430 8A06                      0000            .word	0
34431 8A08                      0000            .word	0
34432                                           ! 6326 } },
34433                                           ! 6327 { 0x014c,
34434 8A0A                      014C            .word	$14C
34435                                           ! 6328 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34436 8A0C                      009B            .word	$9B
34437                                           ! 6329                           0x01 | 0x02 | 0x04,
34438 8A0E                        07            .byte	7
34439                                           ! 6330                           0,
34440 8A0F                        00            .byte	0
34441                                           ! 6331                           64,
34442 8A10                      0040            .word	$40
34443                                           ! 6332                    64,
34444 8A12                      0040            .word	$40
34445                                           ! 6333                        0xA000,
34446 8A14                      A000            .word	$A000
34447                                           ! 6334                        0x0000,
34448 8A16                      0000            .word	0
34449                                           ! 6335                       0,
34450 8A18                      0000            .word	0
34451 8A1A                      0000            .word	0
34452                                           ! 6336                             4608,
34453 8A1C                      1200            .word	$1200
34454                                           ! 6337                        1152,
34455 8A1E                      0480            .word	$480
34456                                           ! 6338                        864,
34457 8A20                      0360            .word	$360
34458                                           ! 6339                      8,
34459 8A22                        08            .byte	8
34460                                           ! 6340                      16,
34461 8A23                        10            .byte	$10
34462                                           ! 6341                           1,
34463 8A24                        01            .byte	1
34464                                           ! 6342                         32,
34465 8A25                        20            .byte	$20
34466                                           ! 6343                          61,
34467 8A26                        3D            .byte	$3D
34468                                           ! 6344                        0x06,
34469 8A27                        06            .byte	6
34470                                           ! 6345                     0,
34471 8A28                        00            .byte	0
34472                                           ! 6346                               3,
34473 8A29                        03            .byte	3
34474                                           ! 6347                          0,
34475 8A2A                        00            .byte	0
34476                                           ! 6348                        8,
34477 8A2B                        08            .byte	8
34478                                           ! 6349                             16,
34479 8A2C                        10            .byte	$10
34480                                           ! 6350                          8,
34481 8A2D                        08            .byte	8
34482                                           ! 6351                               8,
34483 8A2E                        08            .byte	8
34484                                           ! 6352                         8,
34485 8A2F                        08            .byte	8
34486                                           ! 6353                              0,
34487 8A30                        00            .byte	0
34488                                           ! 6354                         8,
34489 8A31                        08            .byte	8
34490                                           ! 6355                              24,
34491 8A32                        18            .byte	$18
34492                                           ! 6356                                0x02,
34493 8A33                        02            .byte	2
34494                                           ! 6357  
34495                                           ! 6357                       0xE0000000,
34496 8A34                      0000            .word	0
34497 8A36                      E000            .word	$E000
34498                                           ! 6358                               0,
34499 8A38                      0000            .word	0
34500 8A3A                      0000            .word	0
34501                                           ! 6359                             0,
34502 8A3C                      0000            .word	0
34503                                           ! 6360                                4608,
34504 8A3E                      1200            .word	$1200
34505                                           ! 6361                             0,
34506 8A40                        00            .byte	0
34507                                           ! 6362                             0,
34508 8A41                        00            .byte	0
34509                                           ! 6363                           8,
34510 8A42                        08            .byte	8
34511                                           ! 6364                                16,
34512 8A43                        10            .byte	$10
34513                                           ! 6365                             8,
34514 8A44                        08            .byte	8
34515                                           ! 6366                                  8,
34516 8A45                        08            .byte	8
34517                                           ! 6367                            8,
34518 8A46                        08            .byte	8
34519                                           ! 6368                                 0,
34520 8A47                        00            .byte	0
34521                                           ! 6369                            8,
34522 8A48                        08            .byte	8
34523                                           ! 6370                                 24,
34524 8A49                        18            .byte	$18
34525                                           ! 6371                          0,
34526 8A4A                      0000            .word	0
34527 8A4C                      0000            .word	0
34528                                           ! 6372 } },
34529                                           ! 6373 { 0x0178,
34530 8A4E                      0178            .word	$178
34531                                           ! 6374 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34532 8A50                      009B            .word	$9B
34533                                           ! 6375                           0x01 | 0x02 | 0x04,
34534 8A52                        07            .byte	7
34535                                           ! 6376                           0,
34536 8A53                        00            .byte	0
34537                                           ! 6377                           64,
34538 8A54                      0040            .word	$40
34539                                           ! 6378                    64,
34540 8A56                      0040            .word	$40
34541                                           ! 6379                        0xA000,
34542 8A58                      A000            .word	$A000
34543                                           ! 6380                        0x0000,
34544 8A5A                      0000            .word	0
34545                                           ! 6381                       0,
34546 8A5C                      0000            .word	0
34547 8A5E                      0000            .word	0
34548                                           ! 6382                             2560,
34549 8A60                      0A00            .word	$A00
34550                                           ! 6383                        1280,
34551 8A62                      0500            .word	$500
34552                                           ! 6384                        800,
34553 8A64                      0320            .word	$320
34554                                           ! 6385                      8,
34555 8A66                        08            .byte	8
34556                                           ! 6386                      16,
34557 8A67                        10            .byte	$10
34558                                           ! 6387                           1,
34559 8A68                        01            .byte	1
34560                                           ! 6388                         16,
34561 8A69                        10            .byte	$10
34562                                           ! 6389                          32,
34563 8A6A                        20            .byte	$20
34564                                           ! 6390                        0x06,
34565 8A6B                        06            .byte	6
34566                                           ! 6391                     0,
34567 8A6C                        00            .byte	0
34568                                           ! 6392                               7,
34569 8A6D                        07            .byte	7
34570                                           ! 6393                          0,
34571 8A6E                        00            .byte	0
34572                                           ! 6394                        5,
34573 8A6F                        05            .byte	5
34574                                           ! 6395                             11,
34575 8A70                        0B            .byte	$B
34576                                           ! 6396                          6,
34577 8A71                        06            .byte	6
34578                                           ! 6397                               5,
34579 8A72                        05            .byte	5
34580                                           ! 6398                         5,
34581 8A73                        05            .byte	5
34582                                           ! 6399                              0,
34583 8A74                        00            .byte	0
34584                                           ! 6400                         0,
34585 8A75                        00            .byte	0
34586                                           ! 6401                              0,
34587 8A76                        00            .byte	0
34588                                           ! 6402                                0,
34589 8A77                        00            .byte	0
34590                                           ! 6403                        0xE0000000,
34591 8A78                      0000            .word	0
34592 8A7A                      E000            .word	$E000
34593                                           ! 6404                               0,
34594 8A7C                      0000            .word	0
34595 8A7E                      0000            .word	0
34596                                           ! 6405                             0,
34597 8A80                      0000            .word	0
34598                                           ! 6406                                2560,
34599 8A82                      0A00            .word	$A00
34600                                           ! 6407                             0,
34601 8A84                        00            .byte	0
34602                                           ! 6408                             0,
34603 8A85                        00            .byte	0
34604                                           ! 6409                           5,
34605 8A86                        05            .byte	5
34606                                           ! 6410                                11,
34607 8A87                        0B            .byte	$B
34608                                           ! 6411                             6,
34609 8A88                        06            .byte	6
34610                                           ! 6412                                  5,
34611 8A89                        05            .byte	5
34612                                           ! 6413                            5,
34613 8A8A                        05            .byte	5
34614                                           ! 6414                                 0,
34615 8A8B                        00            .byte	0
34616                                           ! 6415                            0,
34617 8A8C                        00            .byte	0
34618                                           ! 6416                                 0,
34619 8A8D                        00            .byte	0
34620                                           ! 6417                          0,
34621 8A8E                      0000            .word	0
34622 8A90                      0000            .word	0
34623                                           ! 6418 } },
34624                                           ! 6419 { 0x0179,
34625 8A92                      0179            .word	$179
34626                                           ! 6420 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34627 8A94                      009B            .word	$9B
34628                                           ! 6421                           0x01 | 0x02 | 0x04,
34629 8A96                        07            .byte	7
34630                                           ! 6422                           0,
34631 8A97                        00            .byte	0
34632                                           ! 6423                           64,
34633 8A98                      0040            .word	$40
34634                                           ! 6424                    64,
34635                                           ! 6424 
34636 8A9A                      0040            .word	$40
34637                                           ! 6425                        0xA000,
34638 8A9C                      A000            .word	$A000
34639                                           ! 6426                        0x0000,
34640 8A9E                      0000            .word	0
34641                                           ! 6427                       0,
34642 8AA0                      0000            .word	0
34643 8AA2                      0000            .word	0
34644                                           ! 6428                             3840,
34645 8AA4                      0F00            .word	$F00
34646                                           ! 6429                        1280,
34647 8AA6                      0500            .word	$500
34648                                           ! 6430                        800,
34649 8AA8                      0320            .word	$320
34650                                           ! 6431                      8,
34651 8AAA                        08            .byte	8
34652                                           ! 6432                      16,
34653 8AAB                        10            .byte	$10
34654                                           ! 6433                           1,
34655 8AAC                        01            .byte	1
34656                                           ! 6434                         24,
34657 8AAD                        18            .byte	$18
34658                                           ! 6435                          47,
34659 8AAE                        2F            .byte	$2F
34660                                           ! 6436                        0x06,
34661 8AAF                        06            .byte	6
34662                                           ! 6437                     0,
34663 8AB0                        00            .byte	0
34664                                           ! 6438                               4,
34665 8AB1                        04            .byte	4
34666                                           ! 6439                          0,
34667 8AB2                        00            .byte	0
34668                                           ! 6440                        8,
34669 8AB3                        08            .byte	8
34670                                           ! 6441                             16,
34671 8AB4                        10            .byte	$10
34672                                           ! 6442                          8,
34673 8AB5                        08            .byte	8
34674                                           ! 6443                               8,
34675 8AB6                        08            .byte	8
34676                                           ! 6444                         8,
34677 8AB7                        08            .byte	8
34678                                           ! 6445                              0,
34679 8AB8                        00            .byte	0
34680                                           ! 6446                         0,
34681 8AB9                        00            .byte	0
34682                                           ! 6447                              0,
34683 8ABA                        00            .byte	0
34684                                           ! 6448                                0,
34685 8ABB                        00            .byte	0
34686                                           ! 6449                        0xE0000000,
34687 8ABC                      0000            .word	0
34688 8ABE                      E000            .word	$E000
34689                                           ! 6450                               0,
34690 8AC0                      0000            .word	0
34691 8AC2                      0000            .word	0
34692                                           ! 6451                             0,
34693 8AC4                      0000            .word	0
34694                                           ! 6452                                3840,
34695 8AC6                      0F00            .word	$F00
34696                                           ! 6453                             0,
34697 8AC8                        00            .byte	0
34698                                           ! 6454                             0,
34699 8AC9                        00            .byte	0
34700                                           ! 6455                           8,
34701 8ACA                        08            .byte	8
34702                                           ! 6456                                16,
34703 8ACB                        10            .byte	$10
34704                                           ! 6457                             8,
34705 8ACC                        08            .byte	8
34706                                           ! 6458                                  8,
34707 8ACD                        08            .byte	8
34708                                           ! 6459                            8,
34709 8ACE                        08            .byte	8
34710                                           ! 6460                                 0,
34711 8ACF                        00            .byte	0
34712                                           ! 6461                            0,
34713 8AD0                        00            .byte	0
34714                                           ! 6462                                 0,
34715 8AD1                        00            .byte	0
34716                                           ! 6463                          0,
34717 8AD2                      0000            .word	0
34718 8AD4                      0000            .word	0
34719                                           ! 6464 } },
34720                                           ! 6465 { 0x017a,
34721 8AD6                      017A            .word	$17A
34722                                           ! 6466 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34723 8AD8                      009B            .word	$9B
34724                                           ! 6467                           0x01 | 0x02 | 0x04,
34725 8ADA                        07            .byte	7
34726                                           ! 6468                           0,
34727 8ADB                        00            .byte	0
34728                                           ! 6469                           64,
34729 8ADC                      0040            .word	$40
34730                                           ! 6470                    64,
34731 8ADE                      0040            .word	$40
34732                                           ! 6471                        0xA000,
34733 8AE0                      A000            .word	$A000
34734                                           ! 6472                        0x0000,
34735 8AE2                      0000            .word	0
34736                                           ! 6473                       0,
34737 8AE4                      0000            .word	0
34738 8AE6                      0000            .word	0
34739                                           ! 6474                             5120,
34740 8AE8                      1400            .word	$1400
34741                                           ! 6475                        1280,
34742 8AEA                      0500            .word	$500
34743                                           ! 6476                        800,
34744 8AEC                      0320            .word	$320
34745                                           ! 6477                      8,
34746 8AEE                        08            .byte	8
34747                                           ! 6478                      16,
34748 8AEF                        10            .byte	$10
34749                                           ! 6479                           1,
34750 8AF0                        01            .byte	1
34751                                           ! 6480                         32,
34752 8AF1                        20            .byte	$20
34753                                           ! 6481                          63,
34754 8AF2                        3F            .byte	$3F
34755                                           ! 6482                        0x06,
34756 8AF3                        06            .byte	6
34757                                           ! 6483                     0,
34758 8AF4                        00            .byte	0
34759                                           ! 6484                               3,
34760 8AF5                        03            .byte	3
34761                                           ! 6485                          0,
34762 8AF6                        00            .byte	0
34763                                           ! 6486                        8,
34764 8AF7                        08            .byte	8
34765                                           ! 6487                             16,
34766 8AF8                        10            .byte	$10
34767                                           ! 6488                          8,
34768 8AF9                        08            .byte	8
34769                                           ! 6489                               8,
34770 8AFA                        08            .byte	8
34771                                           ! 6490                         8,
34772 8AFB                        08            .byte	8
34773                                           ! 6491                              0,
34774 8AFC                        00            .byte	0
34775                                           ! 6492                         8,
34776 8AFD                        08            .byte	8
34777                                           ! 6493                              24,
34778 8AFE                        18            .byte	$18
34779                                           ! 6494           
34780                                           ! 6494                      0x02,
34781 8AFF                        02            .byte	2
34782                                           ! 6495                        0xE0000000,
34783 8B00                      0000            .word	0
34784 8B02                      E000            .word	$E000
34785                                           ! 6496                               0,
34786 8B04                      0000            .word	0
34787 8B06                      0000            .word	0
34788                                           ! 6497                             0,
34789 8B08                      0000            .word	0
34790                                           ! 6498                                5120,
34791 8B0A                      1400            .word	$1400
34792                                           ! 6499                             0,
34793 8B0C                        00            .byte	0
34794                                           ! 6500                             0,
34795 8B0D                        00            .byte	0
34796                                           ! 6501                           8,
34797 8B0E                        08            .byte	8
34798                                           ! 6502                                16,
34799 8B0F                        10            .byte	$10
34800                                           ! 6503                             8,
34801 8B10                        08            .byte	8
34802                                           ! 6504                                  8,
34803 8B11                        08            .byte	8
34804                                           ! 6505                            8,
34805 8B12                        08            .byte	8
34806                                           ! 6506                                 0,
34807 8B13                        00            .byte	0
34808                                           ! 6507                            8,
34809 8B14                        08            .byte	8
34810                                           ! 6508                                 24,
34811 8B15                        18            .byte	$18
34812                                           ! 6509                          0,
34813 8B16                      0000            .word	0
34814 8B18                      0000            .word	0
34815                                           ! 6510 } },
34816                                           ! 6511 { 0x017b,
34817 8B1A                      017B            .word	$17B
34818                                           ! 6512 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34819 8B1C                      009B            .word	$9B
34820                                           ! 6513                           0x01 | 0x02 | 0x04,
34821 8B1E                        07            .byte	7
34822                                           ! 6514                           0,
34823 8B1F                        00            .byte	0
34824                                           ! 6515                           64,
34825 8B20                      0040            .word	$40
34826                                           ! 6516                    64,
34827 8B22                      0040            .word	$40
34828                                           ! 6517                        0xA000,
34829 8B24                      A000            .word	$A000
34830                                           ! 6518                        0x0000,
34831 8B26                      0000            .word	0
34832                                           ! 6519                       0,
34833 8B28                      0000            .word	0
34834 8B2A                      0000            .word	0
34835                                           ! 6520                             2560,
34836 8B2C                      0A00            .word	$A00
34837                                           ! 6521                        1280,
34838 8B2E                      0500            .word	$500
34839                                           ! 6522                        960,
34840 8B30                      03C0            .word	$3C0
34841                                           ! 6523                      8,
34842 8B32                        08            .byte	8
34843                                           ! 6524                      16,
34844 8B33                        10            .byte	$10
34845                                           ! 6525                           1,
34846 8B34                        01            .byte	1
34847                                           ! 6526                         16,
34848 8B35                        10            .byte	$10
34849                                           ! 6527                          38,
34850 8B36                        26            .byte	$26
34851                                           ! 6528                        0x06,
34852 8B37                        06            .byte	6
34853                                           ! 6529                     0,
34854 8B38                        00            .byte	0
34855                                           ! 6530                               5,
34856 8B39                        05            .byte	5
34857                                           ! 6531                          0,
34858 8B3A                        00            .byte	0
34859                                           ! 6532                        5,
34860 8B3B                        05            .byte	5
34861                                           ! 6533                             11,
34862 8B3C                        0B            .byte	$B
34863                                           ! 6534                          6,
34864 8B3D                        06            .byte	6
34865                                           ! 6535                               5,
34866 8B3E                        05            .byte	5
34867                                           ! 6536                         5,
34868 8B3F                        05            .byte	5
34869                                           ! 6537                              0,
34870 8B40                        00            .byte	0
34871                                           ! 6538                         0,
34872 8B41                        00            .byte	0
34873                                           ! 6539                              0,
34874 8B42                        00            .byte	0
34875                                           ! 6540                                0,
34876 8B43                        00            .byte	0
34877                                           ! 6541                        0xE0000000,
34878 8B44                      0000            .word	0
34879 8B46                      E000            .word	$E000
34880                                           ! 6542                               0,
34881 8B48                      0000            .word	0
34882 8B4A                      0000            .word	0
34883                                           ! 6543                             0,
34884 8B4C                      0000            .word	0
34885                                           ! 6544                                2560,
34886 8B4E                      0A00            .word	$A00
34887                                           ! 6545                             0,
34888 8B50                        00            .byte	0
34889                                           ! 6546                             0,
34890 8B51                        00            .byte	0
34891                                           ! 6547                           5,
34892 8B52                        05            .byte	5
34893                                           ! 6548                                11,
34894 8B53                        0B            .byte	$B
34895                                           ! 6549                             6,
34896 8B54                        06            .byte	6
34897                                           ! 6550                                  5,
34898 8B55                        05            .byte	5
34899                                           ! 6551                            5,
34900 8B56                        05            .byte	5
34901                                           ! 6552                                 0,
34902 8B57                        00            .byte	0
34903                                           ! 6553                            0,
34904 8B58                        00            .byte	0
34905                                           ! 6554                                 0,
34906 8B59                        00            .byte	0
34907                                           ! 6555                          0,
34908 8B5A                      0000            .word	0
34909 8B5C                      0000            .word	0
34910                                           ! 6556 } },
34911                                           ! 6557 { 0x017c,
34912 8B5E                      017C            .word	$17C
34913                                           ! 6558 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34914 8B60                      009B            .word	$9B
34915                                           ! 6559                           0x01 | 0x02 | 0x04,
34916 8B62                        07            .byte	7
34917                                           ! 6560                           0,
34918 8B63                        00            .byte	0
34919                                           ! 6561                         
34920                                           ! 6561   64,
34921 8B64                      0040            .word	$40
34922                                           ! 6562                    64,
34923 8B66                      0040            .word	$40
34924                                           ! 6563                        0xA000,
34925 8B68                      A000            .word	$A000
34926                                           ! 6564                        0x0000,
34927 8B6A                      0000            .word	0
34928                                           ! 6565                       0,
34929 8B6C                      0000            .word	0
34930 8B6E                      0000            .word	0
34931                                           ! 6566                             3840,
34932 8B70                      0F00            .word	$F00
34933                                           ! 6567                        1280,
34934 8B72                      0500            .word	$500
34935                                           ! 6568                        960,
34936 8B74                      03C0            .word	$3C0
34937                                           ! 6569                      8,
34938 8B76                        08            .byte	8
34939                                           ! 6570                      16,
34940 8B77                        10            .byte	$10
34941                                           ! 6571                           1,
34942 8B78                        01            .byte	1
34943                                           ! 6572                         24,
34944 8B79                        18            .byte	$18
34945                                           ! 6573                          57,
34946 8B7A                        39            .byte	$39
34947                                           ! 6574                        0x06,
34948 8B7B                        06            .byte	6
34949                                           ! 6575                     0,
34950 8B7C                        00            .byte	0
34951                                           ! 6576                               3,
34952 8B7D                        03            .byte	3
34953                                           ! 6577                          0,
34954 8B7E                        00            .byte	0
34955                                           ! 6578                        8,
34956 8B7F                        08            .byte	8
34957                                           ! 6579                             16,
34958 8B80                        10            .byte	$10
34959                                           ! 6580                          8,
34960 8B81                        08            .byte	8
34961                                           ! 6581                               8,
34962 8B82                        08            .byte	8
34963                                           ! 6582                         8,
34964 8B83                        08            .byte	8
34965                                           ! 6583                              0,
34966 8B84                        00            .byte	0
34967                                           ! 6584                         0,
34968 8B85                        00            .byte	0
34969                                           ! 6585                              0,
34970 8B86                        00            .byte	0
34971                                           ! 6586                                0,
34972 8B87                        00            .byte	0
34973                                           ! 6587                        0xE0000000,
34974 8B88                      0000            .word	0
34975 8B8A                      E000            .word	$E000
34976                                           ! 6588                               0,
34977 8B8C                      0000            .word	0
34978 8B8E                      0000            .word	0
34979                                           ! 6589                             0,
34980 8B90                      0000            .word	0
34981                                           ! 6590                                3840,
34982 8B92                      0F00            .word	$F00
34983                                           ! 6591                             0,
34984 8B94                        00            .byte	0
34985                                           ! 6592                             0,
34986 8B95                        00            .byte	0
34987                                           ! 6593                           8,
34988 8B96                        08            .byte	8
34989                                           ! 6594                                16,
34990 8B97                        10            .byte	$10
34991                                           ! 6595                             8,
34992 8B98                        08            .byte	8
34993                                           ! 6596                                  8,
34994 8B99                        08            .byte	8
34995                                           ! 6597                            8,
34996 8B9A                        08            .byte	8
34997                                           ! 6598                                 0,
34998 8B9B                        00            .byte	0
34999                                           ! 6599                            0,
35000 8B9C                        00            .byte	0
35001                                           ! 6600                                 0,
35002 8B9D                        00            .byte	0
35003                                           ! 6601                          0,
35004 8B9E                      0000            .word	0
35005 8BA0                      0000            .word	0
35006                                           ! 6602 } },
35007                                           ! 6603 { 0x017d,
35008 8BA2                      017D            .word	$17D
35009                                           ! 6604 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35010 8BA4                      009B            .word	$9B
35011                                           ! 6605                           0x01 | 0x02 | 0x04,
35012 8BA6                        07            .byte	7
35013                                           ! 6606                           0,
35014 8BA7                        00            .byte	0
35015                                           ! 6607                           64,
35016 8BA8                      0040            .word	$40
35017                                           ! 6608                    64,
35018 8BAA                      0040            .word	$40
35019                                           ! 6609                        0xA000,
35020 8BAC                      A000            .word	$A000
35021                                           ! 6610                        0x0000,
35022 8BAE                      0000            .word	0
35023                                           ! 6611                       0,
35024 8BB0                      0000            .word	0
35025 8BB2                      0000            .word	0
35026                                           ! 6612                             5120,
35027 8BB4                      1400            .word	$1400
35028                                           ! 6613                        1280,
35029 8BB6                      0500            .word	$500
35030                                           ! 6614                        960,
35031 8BB8                      03C0            .word	$3C0
35032                                           ! 6615                      8,
35033 8BBA                        08            .byte	8
35034                                           ! 6616                      16,
35035 8BBB                        10            .byte	$10
35036                                           ! 6617                           1,
35037 8BBC                        01            .byte	1
35038                                           ! 6618                         32,
35039 8BBD                        20            .byte	$20
35040                                           ! 6619                          75,
35041 8BBE                        4B            .byte	$4B
35042                                           ! 6620                        0x06,
35043 8BBF                        06            .byte	6
35044                                           ! 6621                     0,
35045 8BC0                        00            .byte	0
35046                                           ! 6622                               2,
35047 8BC1                        02            .byte	2
35048                                           ! 6623                          0,
35049 8BC2                        00            .byte	0
35050                                           ! 6624                        8,
35051 8BC3                        08            .byte	8
35052                                           ! 6625                             16,
35053 8BC4                        10            .byte	$10
35054                                           ! 6626                          8,
35055 8BC5                        08            .byte	8
35056                                           ! 6627                               8,
35057 8BC6                        08            .byte	8
35058                                           ! 6628                         8,
35059 8BC7                        08            .byte	8
35060                                           ! 6629                              0,
35061 8BC8                        00            .byte	0
35062                                           ! 6630                         8,
35063 8BC9                        08            .byte	8
35064                                           ! 6631                
35065                                           ! 6631               24,
35066 8BCA                        18            .byte	$18
35067                                           ! 6632                                0x02,
35068 8BCB                        02            .byte	2
35069                                           ! 6633                        0xE0000000,
35070 8BCC                      0000            .word	0
35071 8BCE                      E000            .word	$E000
35072                                           ! 6634                               0,
35073 8BD0                      0000            .word	0
35074 8BD2                      0000            .word	0
35075                                           ! 6635                             0,
35076 8BD4                      0000            .word	0
35077                                           ! 6636                                5120,
35078 8BD6                      1400            .word	$1400
35079                                           ! 6637                             0,
35080 8BD8                        00            .byte	0
35081                                           ! 6638                             0,
35082 8BD9                        00            .byte	0
35083                                           ! 6639                           8,
35084 8BDA                        08            .byte	8
35085                                           ! 6640                                16,
35086 8BDB                        10            .byte	$10
35087                                           ! 6641                             8,
35088 8BDC                        08            .byte	8
35089                                           ! 6642                                  8,
35090 8BDD                        08            .byte	8
35091                                           ! 6643                            8,
35092 8BDE                        08            .byte	8
35093                                           ! 6644                                 0,
35094 8BDF                        00            .byte	0
35095                                           ! 6645                            8,
35096 8BE0                        08            .byte	8
35097                                           ! 6646                                 24,
35098 8BE1                        18            .byte	$18
35099                                           ! 6647                          0,
35100 8BE2                      0000            .word	0
35101 8BE4                      0000            .word	0
35102                                           ! 6648 } },
35103                                           ! 6649 { 0x017e,
35104 8BE6                      017E            .word	$17E
35105                                           ! 6650 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35106 8BE8                      009B            .word	$9B
35107                                           ! 6651                           0x01 | 0x02 | 0x04,
35108 8BEA                        07            .byte	7
35109                                           ! 6652                           0,
35110 8BEB                        00            .byte	0
35111                                           ! 6653                           64,
35112 8BEC                      0040            .word	$40
35113                                           ! 6654                    64,
35114 8BEE                      0040            .word	$40
35115                                           ! 6655                        0xA000,
35116 8BF0                      A000            .word	$A000
35117                                           ! 6656                        0x0000,
35118 8BF2                      0000            .word	0
35119                                           ! 6657                       0,
35120 8BF4                      0000            .word	0
35121 8BF6                      0000            .word	0
35122                                           ! 6658                             2880,
35123 8BF8                      0B40            .word	$B40
35124                                           ! 6659                        1440,
35125 8BFA                      05A0            .word	$5A0
35126                                           ! 6660                        900,
35127 8BFC                      0384            .word	$384
35128                                           ! 6661                      8,
35129 8BFE                        08            .byte	8
35130                                           ! 6662                      16,
35131 8BFF                        10            .byte	$10
35132                                           ! 6663                           1,
35133 8C00                        01            .byte	1
35134                                           ! 6664                         16,
35135 8C01                        10            .byte	$10
35136                                           ! 6665                          40,
35137 8C02                        28            .byte	$28
35138                                           ! 6666                        0x06,
35139 8C03                        06            .byte	6
35140                                           ! 6667                     0,
35141 8C04                        00            .byte	0
35142                                           ! 6668                               5,
35143 8C05                        05            .byte	5
35144                                           ! 6669                          0,
35145 8C06                        00            .byte	0
35146                                           ! 6670                        5,
35147 8C07                        05            .byte	5
35148                                           ! 6671                             11,
35149 8C08                        0B            .byte	$B
35150                                           ! 6672                          6,
35151 8C09                        06            .byte	6
35152                                           ! 6673                               5,
35153 8C0A                        05            .byte	5
35154                                           ! 6674                         5,
35155 8C0B                        05            .byte	5
35156                                           ! 6675                              0,
35157 8C0C                        00            .byte	0
35158                                           ! 6676                         0,
35159 8C0D                        00            .byte	0
35160                                           ! 6677                              0,
35161 8C0E                        00            .byte	0
35162                                           ! 6678                                0,
35163 8C0F                        00            .byte	0
35164                                           ! 6679                        0xE0000000,
35165 8C10                      0000            .word	0
35166 8C12                      E000            .word	$E000
35167                                           ! 6680                               0,
35168 8C14                      0000            .word	0
35169 8C16                      0000            .word	0
35170                                           ! 6681                             0,
35171 8C18                      0000            .word	0
35172                                           ! 6682                                2880,
35173 8C1A                      0B40            .word	$B40
35174                                           ! 6683                             0,
35175 8C1C                        00            .byte	0
35176                                           ! 6684                             0,
35177 8C1D                        00            .byte	0
35178                                           ! 6685                           5,
35179 8C1E                        05            .byte	5
35180                                           ! 6686                                11,
35181 8C1F                        0B            .byte	$B
35182                                           ! 6687                             6,
35183 8C20                        06            .byte	6
35184                                           ! 6688                                  5,
35185 8C21                        05            .byte	5
35186                                           ! 6689                            5,
35187 8C22                        05            .byte	5
35188                                           ! 6690                                 0,
35189 8C23                        00            .byte	0
35190                                           ! 6691                            0,
35191 8C24                        00            .byte	0
35192                                           ! 6692                                 0,
35193 8C25                        00            .byte	0
35194                                           ! 6693                          0,
35195 8C26                      0000            .word	0
35196 8C28                      0000            .word	0
35197                                           ! 6694 } },
35198                                           ! 6695 { 0x017f,
35199 8C2A                      017F            .word	$17F
35200                                           ! 6696 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35201 8C2C                      009B            .word	$9B
35202                                           ! 6697                           0x01 | 0x02 | 0x04,
35203 8C2E                        07            .byte	7
35204                                           ! 6698                          
35205                                           ! 6698  0,
35206 8C2F                        00            .byte	0
35207                                           ! 6699                           64,
35208 8C30                      0040            .word	$40
35209                                           ! 6700                    64,
35210 8C32                      0040            .word	$40
35211                                           ! 6701                        0xA000,
35212 8C34                      A000            .word	$A000
35213                                           ! 6702                        0x0000,
35214 8C36                      0000            .word	0
35215                                           ! 6703                       0,
35216 8C38                      0000            .word	0
35217 8C3A                      0000            .word	0
35218                                           ! 6704                             4320,
35219 8C3C                      10E0            .word	$10E0
35220                                           ! 6705                        1440,
35221 8C3E                      05A0            .word	$5A0
35222                                           ! 6706                        900,
35223 8C40                      0384            .word	$384
35224                                           ! 6707                      8,
35225 8C42                        08            .byte	8
35226                                           ! 6708                      16,
35227 8C43                        10            .byte	$10
35228                                           ! 6709                           1,
35229 8C44                        01            .byte	1
35230                                           ! 6710                         24,
35231 8C45                        18            .byte	$18
35232                                           ! 6711                          60,
35233 8C46                        3C            .byte	$3C
35234                                           ! 6712                        0x06,
35235 8C47                        06            .byte	6
35236                                           ! 6713                     0,
35237 8C48                        00            .byte	0
35238                                           ! 6714                               3,
35239 8C49                        03            .byte	3
35240                                           ! 6715                          0,
35241 8C4A                        00            .byte	0
35242                                           ! 6716                        8,
35243 8C4B                        08            .byte	8
35244                                           ! 6717                             16,
35245 8C4C                        10            .byte	$10
35246                                           ! 6718                          8,
35247 8C4D                        08            .byte	8
35248                                           ! 6719                               8,
35249 8C4E                        08            .byte	8
35250                                           ! 6720                         8,
35251 8C4F                        08            .byte	8
35252                                           ! 6721                              0,
35253 8C50                        00            .byte	0
35254                                           ! 6722                         0,
35255 8C51                        00            .byte	0
35256                                           ! 6723                              0,
35257 8C52                        00            .byte	0
35258                                           ! 6724                                0,
35259 8C53                        00            .byte	0
35260                                           ! 6725                        0xE0000000,
35261 8C54                      0000            .word	0
35262 8C56                      E000            .word	$E000
35263                                           ! 6726                               0,
35264 8C58                      0000            .word	0
35265 8C5A                      0000            .word	0
35266                                           ! 6727                             0,
35267 8C5C                      0000            .word	0
35268                                           ! 6728                                4320,
35269 8C5E                      10E0            .word	$10E0
35270                                           ! 6729                             0,
35271 8C60                        00            .byte	0
35272                                           ! 6730                             0,
35273 8C61                        00            .byte	0
35274                                           ! 6731                           8,
35275 8C62                        08            .byte	8
35276                                           ! 6732                                16,
35277 8C63                        10            .byte	$10
35278                                           ! 6733                             8,
35279 8C64                        08            .byte	8
35280                                           ! 6734                                  8,
35281 8C65                        08            .byte	8
35282                                           ! 6735                            8,
35283 8C66                        08            .byte	8
35284                                           ! 6736                                 0,
35285 8C67                        00            .byte	0
35286                                           ! 6737                            0,
35287 8C68                        00            .byte	0
35288                                           ! 6738                                 0,
35289 8C69                        00            .byte	0
35290                                           ! 6739                          0,
35291 8C6A                      0000            .word	0
35292 8C6C                      0000            .word	0
35293                                           ! 6740 } },
35294                                           ! 6741 { 0x0180,
35295 8C6E                      0180            .word	$180
35296                                           ! 6742 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35297 8C70                      009B            .word	$9B
35298                                           ! 6743                           0x01 | 0x02 | 0x04,
35299 8C72                        07            .byte	7
35300                                           ! 6744                           0,
35301 8C73                        00            .byte	0
35302                                           ! 6745                           64,
35303 8C74                      0040            .word	$40
35304                                           ! 6746                    64,
35305 8C76                      0040            .word	$40
35306                                           ! 6747                        0xA000,
35307 8C78                      A000            .word	$A000
35308                                           ! 6748                        0x0000,
35309 8C7A                      0000            .word	0
35310                                           ! 6749                       0,
35311 8C7C                      0000            .word	0
35312 8C7E                      0000            .word	0
35313                                           ! 6750                             5760,
35314 8C80                      1680            .word	$1680
35315                                           ! 6751                        1440,
35316 8C82                      05A0            .word	$5A0
35317                                           ! 6752                        900,
35318 8C84                      0384            .word	$384
35319                                           ! 6753                      8,
35320 8C86                        08            .byte	8
35321                                           ! 6754                      16,
35322 8C87                        10            .byte	$10
35323                                           ! 6755                           1,
35324 8C88                        01            .byte	1
35325                                           ! 6756                         32,
35326 8C89                        20            .byte	$20
35327                                           ! 6757                          80,
35328 8C8A                        50            .byte	$50
35329                                           ! 6758                        0x06,
35330 8C8B                        06            .byte	6
35331                                           ! 6759                     0,
35332 8C8C                        00            .byte	0
35333                                           ! 6760                               2,
35334 8C8D                        02            .byte	2
35335                                           ! 6761                          0,
35336 8C8E                        00            .byte	0
35337                                           ! 6762                        8,
35338 8C8F                        08            .byte	8
35339                                           ! 6763                             16,
35340 8C90                        10            .byte	$10
35341                                           ! 6764                          8,
35342 8C91                        08            .byte	8
35343                                           ! 6765                               8,
35344 8C92                        08            .byte	8
35345                                           ! 6766                         8,
35346 8C93                        08            .byte	8
35347                                           ! 6767                              0,
35348 8C94                        00            .byte	0
35349                                           ! 6768               
35350                                           ! 6768           8,
35351 8C95                        08            .byte	8
35352                                           ! 6769                              24,
35353 8C96                        18            .byte	$18
35354                                           ! 6770                                0x02,
35355 8C97                        02            .byte	2
35356                                           ! 6771                        0xE0000000,
35357 8C98                      0000            .word	0
35358 8C9A                      E000            .word	$E000
35359                                           ! 6772                               0,
35360 8C9C                      0000            .word	0
35361 8C9E                      0000            .word	0
35362                                           ! 6773                             0,
35363 8CA0                      0000            .word	0
35364                                           ! 6774                                5760,
35365 8CA2                      1680            .word	$1680
35366                                           ! 6775                             0,
35367 8CA4                        00            .byte	0
35368                                           ! 6776                             0,
35369 8CA5                        00            .byte	0
35370                                           ! 6777                           8,
35371 8CA6                        08            .byte	8
35372                                           ! 6778                                16,
35373 8CA7                        10            .byte	$10
35374                                           ! 6779                             8,
35375 8CA8                        08            .byte	8
35376                                           ! 6780                                  8,
35377 8CA9                        08            .byte	8
35378                                           ! 6781                            8,
35379 8CAA                        08            .byte	8
35380                                           ! 6782                                 0,
35381 8CAB                        00            .byte	0
35382                                           ! 6783                            8,
35383 8CAC                        08            .byte	8
35384                                           ! 6784                                 24,
35385 8CAD                        18            .byte	$18
35386                                           ! 6785                          0,
35387 8CAE                      0000            .word	0
35388 8CB0                      0000            .word	0
35389                                           ! 6786 } },
35390                                           ! 6787 { 0x0181,
35391 8CB2                      0181            .word	$181
35392                                           ! 6788 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35393 8CB4                      009B            .word	$9B
35394                                           ! 6789                           0x01 | 0x02 | 0x04,
35395 8CB6                        07            .byte	7
35396                                           ! 6790                           0,
35397 8CB7                        00            .byte	0
35398                                           ! 6791                           64,
35399 8CB8                      0040            .word	$40
35400                                           ! 6792                    64,
35401 8CBA                      0040            .word	$40
35402                                           ! 6793                        0xA000,
35403 8CBC                      A000            .word	$A000
35404                                           ! 6794                        0x0000,
35405 8CBE                      0000            .word	0
35406                                           ! 6795                       0,
35407 8CC0                      0000            .word	0
35408 8CC2                      0000            .word	0
35409                                           ! 6796                             2800,
35410 8CC4                      0AF0            .word	$AF0
35411                                           ! 6797                        1400,
35412 8CC6                      0578            .word	$578
35413                                           ! 6798                        1050,
35414 8CC8                      041A            .word	$41A
35415                                           ! 6799                      8,
35416 8CCA                        08            .byte	8
35417                                           ! 6800                      16,
35418 8CCB                        10            .byte	$10
35419                                           ! 6801                           1,
35420 8CCC                        01            .byte	1
35421                                           ! 6802                         16,
35422 8CCD                        10            .byte	$10
35423                                           ! 6803                          45,
35424 8CCE                        2D            .byte	$2D
35425                                           ! 6804                        0x06,
35426 8CCF                        06            .byte	6
35427                                           ! 6805                     0,
35428 8CD0                        00            .byte	0
35429                                           ! 6806                               4,
35430 8CD1                        04            .byte	4
35431                                           ! 6807                          0,
35432 8CD2                        00            .byte	0
35433                                           ! 6808                        5,
35434 8CD3                        05            .byte	5
35435                                           ! 6809                             11,
35436 8CD4                        0B            .byte	$B
35437                                           ! 6810                          6,
35438 8CD5                        06            .byte	6
35439                                           ! 6811                               5,
35440 8CD6                        05            .byte	5
35441                                           ! 6812                         5,
35442 8CD7                        05            .byte	5
35443                                           ! 6813                              0,
35444 8CD8                        00            .byte	0
35445                                           ! 6814                         0,
35446 8CD9                        00            .byte	0
35447                                           ! 6815                              0,
35448 8CDA                        00            .byte	0
35449                                           ! 6816                                0,
35450 8CDB                        00            .byte	0
35451                                           ! 6817                        0xE0000000,
35452 8CDC                      0000            .word	0
35453 8CDE                      E000            .word	$E000
35454                                           ! 6818                               0,
35455 8CE0                      0000            .word	0
35456 8CE2                      0000            .word	0
35457                                           ! 6819                             0,
35458 8CE4                      0000            .word	0
35459                                           ! 6820                                2800,
35460 8CE6                      0AF0            .word	$AF0
35461                                           ! 6821                             0,
35462 8CE8                        00            .byte	0
35463                                           ! 6822                             0,
35464 8CE9                        00            .byte	0
35465                                           ! 6823                           5,
35466 8CEA                        05            .byte	5
35467                                           ! 6824                                11,
35468 8CEB                        0B            .byte	$B
35469                                           ! 6825                             6,
35470 8CEC                        06            .byte	6
35471                                           ! 6826                                  5,
35472 8CED                        05            .byte	5
35473                                           ! 6827                            5,
35474 8CEE                        05            .byte	5
35475                                           ! 6828                                 0,
35476 8CEF                        00            .byte	0
35477                                           ! 6829                            0,
35478 8CF0                        00            .byte	0
35479                                           ! 6830                                 0,
35480 8CF1                        00            .byte	0
35481                                           ! 6831                          0,
35482 8CF2                      0000            .word	0
35483 8CF4                      0000            .word	0
35484                                           ! 6832 } },
35485                                           ! 6833 { 0x0182,
35486 8CF6                      0182            .word	$182
35487                                           ! 6834 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35488 8CF8                      009B            .word	$9B
35489                                           ! 6835                           0x01 | 0x02 | 0x
35490                                           ! 6835 04,
35491 8CFA                        07            .byte	7
35492                                           ! 6836                           0,
35493 8CFB                        00            .byte	0
35494                                           ! 6837                           64,
35495 8CFC                      0040            .word	$40
35496                                           ! 6838                    64,
35497 8CFE                      0040            .word	$40
35498                                           ! 6839                        0xA000,
35499 8D00                      A000            .word	$A000
35500                                           ! 6840                        0x0000,
35501 8D02                      0000            .word	0
35502                                           ! 6841                       0,
35503 8D04                      0000            .word	0
35504 8D06                      0000            .word	0
35505                                           ! 6842                             4200,
35506 8D08                      1068            .word	$1068
35507                                           ! 6843                        1400,
35508 8D0A                      0578            .word	$578
35509                                           ! 6844                        1050,
35510 8D0C                      041A            .word	$41A
35511                                           ! 6845                      8,
35512 8D0E                        08            .byte	8
35513                                           ! 6846                      16,
35514 8D0F                        10            .byte	$10
35515                                           ! 6847                           1,
35516 8D10                        01            .byte	1
35517                                           ! 6848                         24,
35518 8D11                        18            .byte	$18
35519                                           ! 6849                          68,
35520 8D12                        44            .byte	$44
35521                                           ! 6850                        0x06,
35522 8D13                        06            .byte	6
35523                                           ! 6851                     0,
35524 8D14                        00            .byte	0
35525                                           ! 6852                               2,
35526 8D15                        02            .byte	2
35527                                           ! 6853                          0,
35528 8D16                        00            .byte	0
35529                                           ! 6854                        8,
35530 8D17                        08            .byte	8
35531                                           ! 6855                             16,
35532 8D18                        10            .byte	$10
35533                                           ! 6856                          8,
35534 8D19                        08            .byte	8
35535                                           ! 6857                               8,
35536 8D1A                        08            .byte	8
35537                                           ! 6858                         8,
35538 8D1B                        08            .byte	8
35539                                           ! 6859                              0,
35540 8D1C                        00            .byte	0
35541                                           ! 6860                         0,
35542 8D1D                        00            .byte	0
35543                                           ! 6861                              0,
35544 8D1E                        00            .byte	0
35545                                           ! 6862                                0,
35546 8D1F                        00            .byte	0
35547                                           ! 6863                        0xE0000000,
35548 8D20                      0000            .word	0
35549 8D22                      E000            .word	$E000
35550                                           ! 6864                               0,
35551 8D24                      0000            .word	0
35552 8D26                      0000            .word	0
35553                                           ! 6865                             0,
35554 8D28                      0000            .word	0
35555                                           ! 6866                                4200,
35556 8D2A                      1068            .word	$1068
35557                                           ! 6867                             0,
35558 8D2C                        00            .byte	0
35559                                           ! 6868                             0,
35560 8D2D                        00            .byte	0
35561                                           ! 6869                           8,
35562 8D2E                        08            .byte	8
35563                                           ! 6870                                16,
35564 8D2F                        10            .byte	$10
35565                                           ! 6871                             8,
35566 8D30                        08            .byte	8
35567                                           ! 6872                                  8,
35568 8D31                        08            .byte	8
35569                                           ! 6873                            8,
35570 8D32                        08            .byte	8
35571                                           ! 6874                                 0,
35572 8D33                        00            .byte	0
35573                                           ! 6875                            0,
35574 8D34                        00            .byte	0
35575                                           ! 6876                                 0,
35576 8D35                        00            .byte	0
35577                                           ! 6877                          0,
35578 8D36                      0000            .word	0
35579 8D38                      0000            .word	0
35580                                           ! 6878 } },
35581                                           ! 6879 { 0x0183,
35582 8D3A                      0183            .word	$183
35583                                           ! 6880 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35584 8D3C                      009B            .word	$9B
35585                                           ! 6881                           0x01 | 0x02 | 0x04,
35586 8D3E                        07            .byte	7
35587                                           ! 6882                           0,
35588 8D3F                        00            .byte	0
35589                                           ! 6883                           64,
35590 8D40                      0040            .word	$40
35591                                           ! 6884                    64,
35592 8D42                      0040            .word	$40
35593                                           ! 6885                        0xA000,
35594 8D44                      A000            .word	$A000
35595                                           ! 6886                        0x0000,
35596 8D46                      0000            .word	0
35597                                           ! 6887                       0,
35598 8D48                      0000            .word	0
35599 8D4A                      0000            .word	0
35600                                           ! 6888                             5600,
35601 8D4C                      15E0            .word	$15E0
35602                                           ! 6889                        1400,
35603 8D4E                      0578            .word	$578
35604                                           ! 6890                        1050,
35605 8D50                      041A            .word	$41A
35606                                           ! 6891                      8,
35607 8D52                        08            .byte	8
35608                                           ! 6892                      16,
35609 8D53                        10            .byte	$10
35610                                           ! 6893                           1,
35611 8D54                        01            .byte	1
35612                                           ! 6894                         32,
35613 8D55                        20            .byte	$20
35614                                           ! 6895                          90,
35615 8D56                        5A            .byte	$5A
35616                                           ! 6896                        0x06,
35617 8D57                        06            .byte	6
35618                                           ! 6897                     0,
35619 8D58                        00            .byte	0
35620                                           ! 6898                               1,
35621 8D59                        01            .byte	1
35622                                           ! 6899                          0,
35623 8D5A                        00            .byte	0
35624                                           ! 6900                        8,
35625 8D5B                        08            .byte	8
35626                                           ! 6901                             16,
35627 8D5C                        10            .byte	$10
35628                                           ! 6902                          8,
35629 8D5D                        08            .byte	8
35630                                           ! 6903                               8,
35631 8D5E                        08            .byte	8
35632                                           ! 6904                         8,
35633 8D5F                        08            .byte	8
35634                                           ! 6905                
35635                                           ! 6905               0,
35636 8D60                        00            .byte	0
35637                                           ! 6906                         8,
35638 8D61                        08            .byte	8
35639                                           ! 6907                              24,
35640 8D62                        18            .byte	$18
35641                                           ! 6908                                0x02,
35642 8D63                        02            .byte	2
35643                                           ! 6909                        0xE0000000,
35644 8D64                      0000            .word	0
35645 8D66                      E000            .word	$E000
35646                                           ! 6910                               0,
35647 8D68                      0000            .word	0
35648 8D6A                      0000            .word	0
35649                                           ! 6911                             0,
35650 8D6C                      0000            .word	0
35651                                           ! 6912                                5600,
35652 8D6E                      15E0            .word	$15E0
35653                                           ! 6913                             0,
35654 8D70                        00            .byte	0
35655                                           ! 6914                             0,
35656 8D71                        00            .byte	0
35657                                           ! 6915                           8,
35658 8D72                        08            .byte	8
35659                                           ! 6916                                16,
35660 8D73                        10            .byte	$10
35661                                           ! 6917                             8,
35662 8D74                        08            .byte	8
35663                                           ! 6918                                  8,
35664 8D75                        08            .byte	8
35665                                           ! 6919                            8,
35666 8D76                        08            .byte	8
35667                                           ! 6920                                 0,
35668 8D77                        00            .byte	0
35669                                           ! 6921                            8,
35670 8D78                        08            .byte	8
35671                                           ! 6922                                 24,
35672 8D79                        18            .byte	$18
35673                                           ! 6923                          0,
35674 8D7A                      0000            .word	0
35675 8D7C                      0000            .word	0
35676                                           ! 6924 } },
35677                                           ! 6925 { 0x0184,
35678 8D7E                      0184            .word	$184
35679                                           ! 6926 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35680 8D80                      009B            .word	$9B
35681                                           ! 6927                           0x01 | 0x02 | 0x04,
35682 8D82                        07            .byte	7
35683                                           ! 6928                           0,
35684 8D83                        00            .byte	0
35685                                           ! 6929                           64,
35686 8D84                      0040            .word	$40
35687                                           ! 6930                    64,
35688 8D86                      0040            .word	$40
35689                                           ! 6931                        0xA000,
35690 8D88                      A000            .word	$A000
35691                                           ! 6932                        0x0000,
35692 8D8A                      0000            .word	0
35693                                           ! 6933                       0,
35694 8D8C                      0000            .word	0
35695 8D8E                      0000            .word	0
35696                                           ! 6934                             3360,
35697 8D90                      0D20            .word	$D20
35698                                           ! 6935                        1680,
35699 8D92                      0690            .word	$690
35700                                           ! 6936                        1050,
35701 8D94                      041A            .word	$41A
35702                                           ! 6937                      8,
35703 8D96                        08            .byte	8
35704                                           ! 6938                      16,
35705 8D97                        10            .byte	$10
35706                                           ! 6939                           1,
35707 8D98                        01            .byte	1
35708                                           ! 6940                         16,
35709 8D99                        10            .byte	$10
35710                                           ! 6941                          54,
35711 8D9A                        36            .byte	$36
35712                                           ! 6942                        0x06,
35713 8D9B                        06            .byte	6
35714                                           ! 6943                     0,
35715 8D9C                        00            .byte	0
35716                                           ! 6944                               3,
35717 8D9D                        03            .byte	3
35718                                           ! 6945                          0,
35719 8D9E                        00            .byte	0
35720                                           ! 6946                        5,
35721 8D9F                        05            .byte	5
35722                                           ! 6947                             11,
35723 8DA0                        0B            .byte	$B
35724                                           ! 6948                          6,
35725 8DA1                        06            .byte	6
35726                                           ! 6949                               5,
35727 8DA2                        05            .byte	5
35728                                           ! 6950                         5,
35729 8DA3                        05            .byte	5
35730                                           ! 6951                              0,
35731 8DA4                        00            .byte	0
35732                                           ! 6952                         0,
35733 8DA5                        00            .byte	0
35734                                           ! 6953                              0,
35735 8DA6                        00            .byte	0
35736                                           ! 6954                                0,
35737 8DA7                        00            .byte	0
35738                                           ! 6955                        0xE0000000,
35739 8DA8                      0000            .word	0
35740 8DAA                      E000            .word	$E000
35741                                           ! 6956                               0,
35742 8DAC                      0000            .word	0
35743 8DAE                      0000            .word	0
35744                                           ! 6957                             0,
35745 8DB0                      0000            .word	0
35746                                           ! 6958                                3360,
35747 8DB2                      0D20            .word	$D20
35748                                           ! 6959                             0,
35749 8DB4                        00            .byte	0
35750                                           ! 6960                             0,
35751 8DB5                        00            .byte	0
35752                                           ! 6961                           5,
35753 8DB6                        05            .byte	5
35754                                           ! 6962                                11,
35755 8DB7                        0B            .byte	$B
35756                                           ! 6963                             6,
35757 8DB8                        06            .byte	6
35758                                           ! 6964                                  5,
35759 8DB9                        05            .byte	5
35760                                           ! 6965                            5,
35761 8DBA                        05            .byte	5
35762                                           ! 6966                                 0,
35763 8DBB                        00            .byte	0
35764                                           ! 6967                            0,
35765 8DBC                        00            .byte	0
35766                                           ! 6968                                 0,
35767 8DBD                        00            .byte	0
35768                                           ! 6969                          0,
35769 8DBE                      0000            .word	0
35770 8DC0                      0000            .word	0
35771                                           ! 6970 } },
35772                                           ! 6971 { 0x0185,
35773 8DC2                      0185            .word	$185
35774                                           ! 6972 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35775 8DC4                      009B            .word	$9B
35776                                           ! 6973            
35777                                           ! 6973                0x01 | 0x02 | 0x04,
35778 8DC6                        07            .byte	7
35779                                           ! 6974                           0,
35780 8DC7                        00            .byte	0
35781                                           ! 6975                           64,
35782 8DC8                      0040            .word	$40
35783                                           ! 6976                    64,
35784 8DCA                      0040            .word	$40
35785                                           ! 6977                        0xA000,
35786 8DCC                      A000            .word	$A000
35787                                           ! 6978                        0x0000,
35788 8DCE                      0000            .word	0
35789                                           ! 6979                       0,
35790 8DD0                      0000            .word	0
35791 8DD2                      0000            .word	0
35792                                           ! 6980                             5040,
35793 8DD4                      13B0            .word	$13B0
35794                                           ! 6981                        1680,
35795 8DD6                      0690            .word	$690
35796                                           ! 6982                        1050,
35797 8DD8                      041A            .word	$41A
35798                                           ! 6983                      8,
35799 8DDA                        08            .byte	8
35800                                           ! 6984                      16,
35801 8DDB                        10            .byte	$10
35802                                           ! 6985                           1,
35803 8DDC                        01            .byte	1
35804                                           ! 6986                         24,
35805 8DDD                        18            .byte	$18
35806                                           ! 6987                          81,
35807 8DDE                        51            .byte	$51
35808                                           ! 6988                        0x06,
35809 8DDF                        06            .byte	6
35810                                           ! 6989                     0,
35811 8DE0                        00            .byte	0
35812                                           ! 6990                               2,
35813 8DE1                        02            .byte	2
35814                                           ! 6991                          0,
35815 8DE2                        00            .byte	0
35816                                           ! 6992                        8,
35817 8DE3                        08            .byte	8
35818                                           ! 6993                             16,
35819 8DE4                        10            .byte	$10
35820                                           ! 6994                          8,
35821 8DE5                        08            .byte	8
35822                                           ! 6995                               8,
35823 8DE6                        08            .byte	8
35824                                           ! 6996                         8,
35825 8DE7                        08            .byte	8
35826                                           ! 6997                              0,
35827 8DE8                        00            .byte	0
35828                                           ! 6998                         0,
35829 8DE9                        00            .byte	0
35830                                           ! 6999                              0,
35831 8DEA                        00            .byte	0
35832                                           ! 7000                                0,
35833 8DEB                        00            .byte	0
35834                                           ! 7001                        0xE0000000,
35835 8DEC                      0000            .word	0
35836 8DEE                      E000            .word	$E000
35837                                           ! 7002                               0,
35838 8DF0                      0000            .word	0
35839 8DF2                      0000            .word	0
35840                                           ! 7003                             0,
35841 8DF4                      0000            .word	0
35842                                           ! 7004                                5040,
35843 8DF6                      13B0            .word	$13B0
35844                                           ! 7005                             0,
35845 8DF8                        00            .byte	0
35846                                           ! 7006                             0,
35847 8DF9                        00            .byte	0
35848                                           ! 7007                           8,
35849 8DFA                        08            .byte	8
35850                                           ! 7008                                16,
35851 8DFB                        10            .byte	$10
35852                                           ! 7009                             8,
35853 8DFC                        08            .byte	8
35854                                           ! 7010                                  8,
35855 8DFD                        08            .byte	8
35856                                           ! 7011                            8,
35857 8DFE                        08            .byte	8
35858                                           ! 7012                                 0,
35859 8DFF                        00            .byte	0
35860                                           ! 7013                            0,
35861 8E00                        00            .byte	0
35862                                           ! 7014                                 0,
35863 8E01                        00            .byte	0
35864                                           ! 7015                          0,
35865 8E02                      0000            .word	0
35866 8E04                      0000            .word	0
35867                                           ! 7016 } },
35868                                           ! 7017 { 0x0186,
35869 8E06                      0186            .word	$186
35870                                           ! 7018 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35871 8E08                      009B            .word	$9B
35872                                           ! 7019                           0x01 | 0x02 | 0x04,
35873 8E0A                        07            .byte	7
35874                                           ! 7020                           0,
35875 8E0B                        00            .byte	0
35876                                           ! 7021                           64,
35877 8E0C                      0040            .word	$40
35878                                           ! 7022                    64,
35879 8E0E                      0040            .word	$40
35880                                           ! 7023                        0xA000,
35881 8E10                      A000            .word	$A000
35882                                           ! 7024                        0x0000,
35883 8E12                      0000            .word	0
35884                                           ! 7025                       0,
35885 8E14                      0000            .word	0
35886 8E16                      0000            .word	0
35887                                           ! 7026                             6720,
35888 8E18                      1A40            .word	$1A40
35889                                           ! 7027                        1680,
35890 8E1A                      0690            .word	$690
35891                                           ! 7028                        1050,
35892 8E1C                      041A            .word	$41A
35893                                           ! 7029                      8,
35894 8E1E                        08            .byte	8
35895                                           ! 7030                      16,
35896 8E1F                        10            .byte	$10
35897                                           ! 7031                           1,
35898 8E20                        01            .byte	1
35899                                           ! 7032                         32,
35900 8E21                        20            .byte	$20
35901                                           ! 7033                          108,
35902 8E22                        6C            .byte	$6C
35903                                           ! 7034                        0x06,
35904 8E23                        06            .byte	6
35905                                           ! 7035                     0,
35906 8E24                        00            .byte	0
35907                                           ! 7036                               1,
35908 8E25                        01            .byte	1
35909                                           ! 7037                          0,
35910 8E26                        00            .byte	0
35911                                           ! 7038                        8,
35912 8E27                        08            .byte	8
35913                                           ! 7039                             16,
35914 8E28                        10            .byte	$10
35915                                           ! 7040                          8,
35916 8E29                        08            .byte	8
35917                                           ! 7041                               8,
35918 8E2A                        08            .byte	8
35919                                           ! 7042           
35920                                           ! 7042               8,
35921 8E2B                        08            .byte	8
35922                                           ! 7043                              0,
35923 8E2C                        00            .byte	0
35924                                           ! 7044                         8,
35925 8E2D                        08            .byte	8
35926                                           ! 7045                              24,
35927 8E2E                        18            .byte	$18
35928                                           ! 7046                                0x02,
35929 8E2F                        02            .byte	2
35930                                           ! 7047                        0xE0000000,
35931 8E30                      0000            .word	0
35932 8E32                      E000            .word	$E000
35933                                           ! 7048                               0,
35934 8E34                      0000            .word	0
35935 8E36                      0000            .word	0
35936                                           ! 7049                             0,
35937 8E38                      0000            .word	0
35938                                           ! 7050                                6720,
35939 8E3A                      1A40            .word	$1A40
35940                                           ! 7051                             0,
35941 8E3C                        00            .byte	0
35942                                           ! 7052                             0,
35943 8E3D                        00            .byte	0
35944                                           ! 7053                           8,
35945 8E3E                        08            .byte	8
35946                                           ! 7054                                16,
35947 8E3F                        10            .byte	$10
35948                                           ! 7055                             8,
35949 8E40                        08            .byte	8
35950                                           ! 7056                                  8,
35951 8E41                        08            .byte	8
35952                                           ! 7057                            8,
35953 8E42                        08            .byte	8
35954                                           ! 7058                                 0,
35955 8E43                        00            .byte	0
35956                                           ! 7059                            8,
35957 8E44                        08            .byte	8
35958                                           ! 7060                                 24,
35959 8E45                        18            .byte	$18
35960                                           ! 7061                          0,
35961 8E46                      0000            .word	0
35962 8E48                      0000            .word	0
35963                                           ! 7062 } },
35964                                           ! 7063 { 0x0187,
35965 8E4A                      0187            .word	$187
35966                                           ! 7064 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35967 8E4C                      009B            .word	$9B
35968                                           ! 7065                           0x01 | 0x02 | 0x04,
35969 8E4E                        07            .byte	7
35970                                           ! 7066                           0,
35971 8E4F                        00            .byte	0
35972                                           ! 7067                           64,
35973 8E50                      0040            .word	$40
35974                                           ! 7068                    64,
35975 8E52                      0040            .word	$40
35976                                           ! 7069                        0xA000,
35977 8E54                      A000            .word	$A000
35978                                           ! 7070                        0x0000,
35979 8E56                      0000            .word	0
35980                                           ! 7071                       0,
35981 8E58                      0000            .word	0
35982 8E5A                      0000            .word	0
35983                                           ! 7072                             3840,
35984 8E5C                      0F00            .word	$F00
35985                                           ! 7073                        1920,
35986 8E5E                      0780            .word	$780
35987                                           ! 7074                        1200,
35988 8E60                      04B0            .word	$4B0
35989                                           ! 7075                      8,
35990 8E62                        08            .byte	8
35991                                           ! 7076                      16,
35992 8E63                        10            .byte	$10
35993                                           ! 7077                           1,
35994 8E64                        01            .byte	1
35995                                           ! 7078                         16,
35996 8E65                        10            .byte	$10
35997                                           ! 7079                          71,
35998 8E66                        47            .byte	$47
35999                                           ! 7080                        0x06,
36000 8E67                        06            .byte	6
36001                                           ! 7081                     0,
36002 8E68                        00            .byte	0
36003                                           ! 7082                               2,
36004 8E69                        02            .byte	2
36005                                           ! 7083                          0,
36006 8E6A                        00            .byte	0
36007                                           ! 7084                        5,
36008 8E6B                        05            .byte	5
36009                                           ! 7085                             11,
36010 8E6C                        0B            .byte	$B
36011                                           ! 7086                          6,
36012 8E6D                        06            .byte	6
36013                                           ! 7087                               5,
36014 8E6E                        05            .byte	5
36015                                           ! 7088                         5,
36016 8E6F                        05            .byte	5
36017                                           ! 7089                              0,
36018 8E70                        00            .byte	0
36019                                           ! 7090                         0,
36020 8E71                        00            .byte	0
36021                                           ! 7091                              0,
36022 8E72                        00            .byte	0
36023                                           ! 7092                                0,
36024 8E73                        00            .byte	0
36025                                           ! 7093                        0xE0000000,
36026 8E74                      0000            .word	0
36027 8E76                      E000            .word	$E000
36028                                           ! 7094                               0,
36029 8E78                      0000            .word	0
36030 8E7A                      0000            .word	0
36031                                           ! 7095                             0,
36032 8E7C                      0000            .word	0
36033                                           ! 7096                                3840,
36034 8E7E                      0F00            .word	$F00
36035                                           ! 7097                             0,
36036 8E80                        00            .byte	0
36037                                           ! 7098                             0,
36038 8E81                        00            .byte	0
36039                                           ! 7099                           5,
36040 8E82                        05            .byte	5
36041                                           ! 7100                                11,
36042 8E83                        0B            .byte	$B
36043                                           ! 7101                             6,
36044 8E84                        06            .byte	6
36045                                           ! 7102                                  5,
36046 8E85                        05            .byte	5
36047                                           ! 7103                            5,
36048 8E86                        05            .byte	5
36049                                           ! 7104                                 0,
36050 8E87                        00            .byte	0
36051                                           ! 7105                            0,
36052 8E88                        00            .byte	0
36053                                           ! 7106                                 0,
36054 8E89                        00            .byte	0
36055                                           ! 7107                          0,
36056 8E8A                      0000            .word	0
36057 8E8C                      0000            .word	0
36058                                           ! 7108 } },
36059                                           ! 7109 { 0x0188,
36060 8E8E                      0188            .word	$188
36061                                           ! 7110 { 0x0001 | 0x0002 | 0x000
36062                                           ! 7110 8 | 0x0080 | 0x0010,
36063 8E90                      009B            .word	$9B
36064                                           ! 7111                           0x01 | 0x02 | 0x04,
36065 8E92                        07            .byte	7
36066                                           ! 7112                           0,
36067 8E93                        00            .byte	0
36068                                           ! 7113                           64,
36069 8E94                      0040            .word	$40
36070                                           ! 7114                    64,
36071 8E96                      0040            .word	$40
36072                                           ! 7115                        0xA000,
36073 8E98                      A000            .word	$A000
36074                                           ! 7116                        0x0000,
36075 8E9A                      0000            .word	0
36076                                           ! 7117                       0,
36077 8E9C                      0000            .word	0
36078 8E9E                      0000            .word	0
36079                                           ! 7118                             5760,
36080 8EA0                      1680            .word	$1680
36081                                           ! 7119                        1920,
36082 8EA2                      0780            .word	$780
36083                                           ! 7120                        1200,
36084 8EA4                      04B0            .word	$4B0
36085                                           ! 7121                      8,
36086 8EA6                        08            .byte	8
36087                                           ! 7122                      16,
36088 8EA7                        10            .byte	$10
36089                                           ! 7123                           1,
36090 8EA8                        01            .byte	1
36091                                           ! 7124                         24,
36092 8EA9                        18            .byte	$18
36093                                           ! 7125                          106,
36094 8EAA                        6A            .byte	$6A
36095                                           ! 7126                        0x06,
36096 8EAB                        06            .byte	6
36097                                           ! 7127                     0,
36098 8EAC                        00            .byte	0
36099                                           ! 7128                               1,
36100 8EAD                        01            .byte	1
36101                                           ! 7129                          0,
36102 8EAE                        00            .byte	0
36103                                           ! 7130                        8,
36104 8EAF                        08            .byte	8
36105                                           ! 7131                             16,
36106 8EB0                        10            .byte	$10
36107                                           ! 7132                          8,
36108 8EB1                        08            .byte	8
36109                                           ! 7133                               8,
36110 8EB2                        08            .byte	8
36111                                           ! 7134                         8,
36112 8EB3                        08            .byte	8
36113                                           ! 7135                              0,
36114 8EB4                        00            .byte	0
36115                                           ! 7136                         0,
36116 8EB5                        00            .byte	0
36117                                           ! 7137                              0,
36118 8EB6                        00            .byte	0
36119                                           ! 7138                                0,
36120 8EB7                        00            .byte	0
36121                                           ! 7139                        0xE0000000,
36122 8EB8                      0000            .word	0
36123 8EBA                      E000            .word	$E000
36124                                           ! 7140                               0,
36125 8EBC                      0000            .word	0
36126 8EBE                      0000            .word	0
36127                                           ! 7141                             0,
36128 8EC0                      0000            .word	0
36129                                           ! 7142                                5760,
36130 8EC2                      1680            .word	$1680
36131                                           ! 7143                             0,
36132 8EC4                        00            .byte	0
36133                                           ! 7144                             0,
36134 8EC5                        00            .byte	0
36135                                           ! 7145                           8,
36136 8EC6                        08            .byte	8
36137                                           ! 7146                                16,
36138 8EC7                        10            .byte	$10
36139                                           ! 7147                             8,
36140 8EC8                        08            .byte	8
36141                                           ! 7148                                  8,
36142 8EC9                        08            .byte	8
36143                                           ! 7149                            8,
36144 8ECA                        08            .byte	8
36145                                           ! 7150                                 0,
36146 8ECB                        00            .byte	0
36147                                           ! 7151                            0,
36148 8ECC                        00            .byte	0
36149                                           ! 7152                                 0,
36150 8ECD                        00            .byte	0
36151                                           ! 7153                          0,
36152 8ECE                      0000            .word	0
36153 8ED0                      0000            .word	0
36154                                           ! 7154 } },
36155                                           ! 7155 { 0x0189,
36156 8ED2                      0189            .word	$189
36157                                           ! 7156 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36158 8ED4                      009B            .word	$9B
36159                                           ! 7157                           0x01 | 0x02 | 0x04,
36160 8ED6                        07            .byte	7
36161                                           ! 7158                           0,
36162 8ED7                        00            .byte	0
36163                                           ! 7159                           64,
36164 8ED8                      0040            .word	$40
36165                                           ! 7160                    64,
36166 8EDA                      0040            .word	$40
36167                                           ! 7161                        0xA000,
36168 8EDC                      A000            .word	$A000
36169                                           ! 7162                        0x0000,
36170 8EDE                      0000            .word	0
36171                                           ! 7163                       0,
36172 8EE0                      0000            .word	0
36173 8EE2                      0000            .word	0
36174                                           ! 7164                             7680,
36175 8EE4                      1E00            .word	$1E00
36176                                           ! 7165                        1920,
36177 8EE6                      0780            .word	$780
36178                                           ! 7166                        1200,
36179 8EE8                      04B0            .word	$4B0
36180                                           ! 7167                      8,
36181 8EEA                        08            .byte	8
36182                                           ! 7168                      16,
36183 8EEB                        10            .byte	$10
36184                                           ! 7169                           1,
36185 8EEC                        01            .byte	1
36186                                           ! 7170                         32,
36187 8EED                        20            .byte	$20
36188                                           ! 7171                          141,
36189 8EEE                        8D            .byte	$8D
36190                                           ! 7172                        0x06,
36191 8EEF                        06            .byte	6
36192                                           ! 7173                     0,
36193 8EF0                        00            .byte	0
36194                                           ! 7174                               0,
36195 8EF1                        00            .byte	0
36196                                           ! 7175                          0,
36197 8EF2                        00            .byte	0
36198                                           ! 7176                        8,
36199 8EF3                        08            .byte	8
36200                                           ! 7177                             16,
36201 8EF4                        10            .byte	$10
36202                                           ! 7178                          8,
36203 8EF5                        08            .byte	8
36204                                           ! 7179           
36205                                           ! 7179                     8,
36206 8EF6                        08            .byte	8
36207                                           ! 7180                         8,
36208 8EF7                        08            .byte	8
36209                                           ! 7181                              0,
36210 8EF8                        00            .byte	0
36211                                           ! 7182                         8,
36212 8EF9                        08            .byte	8
36213                                           ! 7183                              24,
36214 8EFA                        18            .byte	$18
36215                                           ! 7184                                0x02,
36216 8EFB                        02            .byte	2
36217                                           ! 7185                        0xE0000000,
36218 8EFC                      0000            .word	0
36219 8EFE                      E000            .word	$E000
36220                                           ! 7186                               0,
36221 8F00                      0000            .word	0
36222 8F02                      0000            .word	0
36223                                           ! 7187                             0,
36224 8F04                      0000            .word	0
36225                                           ! 7188                                7680,
36226 8F06                      1E00            .word	$1E00
36227                                           ! 7189                             0,
36228 8F08                        00            .byte	0
36229                                           ! 7190                             0,
36230 8F09                        00            .byte	0
36231                                           ! 7191                           8,
36232 8F0A                        08            .byte	8
36233                                           ! 7192                                16,
36234 8F0B                        10            .byte	$10
36235                                           ! 7193                             8,
36236 8F0C                        08            .byte	8
36237                                           ! 7194                                  8,
36238 8F0D                        08            .byte	8
36239                                           ! 7195                            8,
36240 8F0E                        08            .byte	8
36241                                           ! 7196                                 0,
36242 8F0F                        00            .byte	0
36243                                           ! 7197                            8,
36244 8F10                        08            .byte	8
36245                                           ! 7198                                 24,
36246 8F11                        18            .byte	$18
36247                                           ! 7199                          0,
36248 8F12                      0000            .word	0
36249 8F14                      0000            .word	0
36250                                           ! 7200 } },
36251                                           ! 7201 { 0x018a,
36252 8F16                      018A            .word	$18A
36253                                           ! 7202 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36254 8F18                      009B            .word	$9B
36255                                           ! 7203                           0x01 | 0x02 | 0x04,
36256 8F1A                        07            .byte	7
36257                                           ! 7204                           0,
36258 8F1B                        00            .byte	0
36259                                           ! 7205                           64,
36260 8F1C                      0040            .word	$40
36261                                           ! 7206                    64,
36262 8F1E                      0040            .word	$40
36263                                           ! 7207                        0xA000,
36264 8F20                      A000            .word	$A000
36265                                           ! 7208                        0x0000,
36266 8F22                      0000            .word	0
36267                                           ! 7209                       0,
36268 8F24                      0000            .word	0
36269 8F26                      0000            .word	0
36270                                           ! 7210                             5120,
36271 8F28                      1400            .word	$1400
36272                                           ! 7211                        2560,
36273 8F2A                      0A00            .word	$A00
36274                                           ! 7212                        1600,
36275 8F2C                      0640            .word	$640
36276                                           ! 7213                      8,
36277 8F2E                        08            .byte	8
36278                                           ! 7214                      16,
36279 8F2F                        10            .byte	$10
36280                                           ! 7215                           1,
36281 8F30                        01            .byte	1
36282                                           ! 7216                         16,
36283 8F31                        10            .byte	$10
36284                                           ! 7217                          125,
36285 8F32                        7D            .byte	$7D
36286                                           ! 7218                        0x06,
36287 8F33                        06            .byte	6
36288                                           ! 7219                     0,
36289 8F34                        00            .byte	0
36290                                           ! 7220                               1,
36291 8F35                        01            .byte	1
36292                                           ! 7221                          0,
36293 8F36                        00            .byte	0
36294                                           ! 7222                        5,
36295 8F37                        05            .byte	5
36296                                           ! 7223                             11,
36297 8F38                        0B            .byte	$B
36298                                           ! 7224                          6,
36299 8F39                        06            .byte	6
36300                                           ! 7225                               5,
36301 8F3A                        05            .byte	5
36302                                           ! 7226                         5,
36303 8F3B                        05            .byte	5
36304                                           ! 7227                              0,
36305 8F3C                        00            .byte	0
36306                                           ! 7228                         0,
36307 8F3D                        00            .byte	0
36308                                           ! 7229                              0,
36309 8F3E                        00            .byte	0
36310                                           ! 7230                                0,
36311 8F3F                        00            .byte	0
36312                                           ! 7231                        0xE0000000,
36313 8F40                      0000            .word	0
36314 8F42                      E000            .word	$E000
36315                                           ! 7232                               0,
36316 8F44                      0000            .word	0
36317 8F46                      0000            .word	0
36318                                           ! 7233                             0,
36319 8F48                      0000            .word	0
36320                                           ! 7234                                5120,
36321 8F4A                      1400            .word	$1400
36322                                           ! 7235                             0,
36323 8F4C                        00            .byte	0
36324                                           ! 7236                             0,
36325 8F4D                        00            .byte	0
36326                                           ! 7237                           5,
36327 8F4E                        05            .byte	5
36328                                           ! 7238                                11,
36329 8F4F                        0B            .byte	$B
36330                                           ! 7239                             6,
36331 8F50                        06            .byte	6
36332                                           ! 7240                                  5,
36333 8F51                        05            .byte	5
36334                                           ! 7241                            5,
36335 8F52                        05            .byte	5
36336                                           ! 7242                                 0,
36337 8F53                        00            .byte	0
36338                                           ! 7243                            0,
36339 8F54                        00            .byte	0
36340                                           ! 7244                                 0,
36341 8F55                        00            .byte	0
36342                                           ! 7245                          0,
36343 8F56                      0000            .word	0
36344 8F58                      0000            .word	0
36345                                           ! 7246 } },
36346                                           ! 7247 {
36347                                           ! 7247  0x018b,
36348 8F5A                      018B            .word	$18B
36349                                           ! 7248 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36350 8F5C                      009B            .word	$9B
36351                                           ! 7249                           0x01 | 0x02 | 0x04,
36352 8F5E                        07            .byte	7
36353                                           ! 7250                           0,
36354 8F5F                        00            .byte	0
36355                                           ! 7251                           64,
36356 8F60                      0040            .word	$40
36357                                           ! 7252                    64,
36358 8F62                      0040            .word	$40
36359                                           ! 7253                        0xA000,
36360 8F64                      A000            .word	$A000
36361                                           ! 7254                        0x0000,
36362 8F66                      0000            .word	0
36363                                           ! 7255                       0,
36364 8F68                      0000            .word	0
36365 8F6A                      0000            .word	0
36366                                           ! 7256                             7680,
36367 8F6C                      1E00            .word	$1E00
36368                                           ! 7257                        2560,
36369 8F6E                      0A00            .word	$A00
36370                                           ! 7258                        1600,
36371 8F70                      0640            .word	$640
36372                                           ! 7259                      8,
36373 8F72                        08            .byte	8
36374                                           ! 7260                      16,
36375 8F73                        10            .byte	$10
36376                                           ! 7261                           1,
36377 8F74                        01            .byte	1
36378                                           ! 7262                         24,
36379 8F75                        18            .byte	$18
36380                                           ! 7263                          188,
36381 8F76                        BC            .byte	$BC
36382                                           ! 7264                        0x06,
36383 8F77                        06            .byte	6
36384                                           ! 7265                     0,
36385 8F78                        00            .byte	0
36386                                           ! 7266                               0,
36387 8F79                        00            .byte	0
36388                                           ! 7267                          0,
36389 8F7A                        00            .byte	0
36390                                           ! 7268                        8,
36391 8F7B                        08            .byte	8
36392                                           ! 7269                             16,
36393 8F7C                        10            .byte	$10
36394                                           ! 7270                          8,
36395 8F7D                        08            .byte	8
36396                                           ! 7271                               8,
36397 8F7E                        08            .byte	8
36398                                           ! 7272                         8,
36399 8F7F                        08            .byte	8
36400                                           ! 7273                              0,
36401 8F80                        00            .byte	0
36402                                           ! 7274                         0,
36403 8F81                        00            .byte	0
36404                                           ! 7275                              0,
36405 8F82                        00            .byte	0
36406                                           ! 7276                                0,
36407 8F83                        00            .byte	0
36408                                           ! 7277                        0xE0000000,
36409 8F84                      0000            .word	0
36410 8F86                      E000            .word	$E000
36411                                           ! 7278                               0,
36412 8F88                      0000            .word	0
36413 8F8A                      0000            .word	0
36414                                           ! 7279                             0,
36415 8F8C                      0000            .word	0
36416                                           ! 7280                                7680,
36417 8F8E                      1E00            .word	$1E00
36418                                           ! 7281                             0,
36419 8F90                        00            .byte	0
36420                                           ! 7282                             0,
36421 8F91                        00            .byte	0
36422                                           ! 7283                           8,
36423 8F92                        08            .byte	8
36424                                           ! 7284                                16,
36425 8F93                        10            .byte	$10
36426                                           ! 7285                             8,
36427 8F94                        08            .byte	8
36428                                           ! 7286                                  8,
36429 8F95                        08            .byte	8
36430                                           ! 7287                            8,
36431 8F96                        08            .byte	8
36432                                           ! 7288                                 0,
36433 8F97                        00            .byte	0
36434                                           ! 7289                            0,
36435 8F98                        00            .byte	0
36436                                           ! 7290                                 0,
36437 8F99                        00            .byte	0
36438                                           ! 7291                          0,
36439 8F9A                      0000            .word	0
36440 8F9C                      0000            .word	0
36441                                           ! 7292 } },
36442                                           ! 7293 { 0x018c,
36443 8F9E                      018C            .word	$18C
36444                                           ! 7294 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36445 8FA0                      009B            .word	$9B
36446                                           ! 7295                           0x01 | 0x02 | 0x04,
36447 8FA2                        07            .byte	7
36448                                           ! 7296                           0,
36449 8FA3                        00            .byte	0
36450                                           ! 7297                           64,
36451 8FA4                      0040            .word	$40
36452                                           ! 7298                    64,
36453 8FA6                      0040            .word	$40
36454                                           ! 7299                        0xA000,
36455 8FA8                      A000            .word	$A000
36456                                           ! 7300                        0x0000,
36457 8FAA                      0000            .word	0
36458                                           ! 7301                       0,
36459 8FAC                      0000            .word	0
36460 8FAE                      0000            .word	0
36461                                           ! 7302                             10240,
36462 8FB0                      2800            .word	$2800
36463                                           ! 7303                        2560,
36464 8FB2                      0A00            .word	$A00
36465                                           ! 7304                        1600,
36466 8FB4                      0640            .word	$640
36467                                           ! 7305                      8,
36468 8FB6                        08            .byte	8
36469                                           ! 7306                      16,
36470 8FB7                        10            .byte	$10
36471                                           ! 7307                           1,
36472 8FB8                        01            .byte	1
36473                                           ! 7308                         32,
36474 8FB9                        20            .byte	$20
36475                                           ! 7309                          250,
36476 8FBA                        FA            .byte	$FA
36477                                           ! 7310                        0x06,
36478 8FBB                        06            .byte	6
36479                                           ! 7311                     0,
36480 8FBC                        00            .byte	0
36481                                           ! 7312                               0,
36482 8FBD                        00            .byte	0
36483                                           ! 7313                          0,
36484 8FBE                        00            .byte	0
36485                                           ! 7314                        8,
36486 8FBF                        08            .byte	8
36487                                           ! 7315                             16,
36488 8FC0                        10            .byte	$10
36489                                           ! 7316    
36490                                           ! 7316                       8,
36491 8FC1                        08            .byte	8
36492                                           ! 7317                               8,
36493 8FC2                        08            .byte	8
36494                                           ! 7318                         8,
36495 8FC3                        08            .byte	8
36496                                           ! 7319                              0,
36497 8FC4                        00            .byte	0
36498                                           ! 7320                         8,
36499 8FC5                        08            .byte	8
36500                                           ! 7321                              24,
36501 8FC6                        18            .byte	$18
36502                                           ! 7322                                0x02,
36503 8FC7                        02            .byte	2
36504                                           ! 7323                        0xE0000000,
36505 8FC8                      0000            .word	0
36506 8FCA                      E000            .word	$E000
36507                                           ! 7324                               0,
36508 8FCC                      0000            .word	0
36509 8FCE                      0000            .word	0
36510                                           ! 7325                             0,
36511 8FD0                      0000            .word	0
36512                                           ! 7326                                10240,
36513 8FD2                      2800            .word	$2800
36514                                           ! 7327                             0,
36515 8FD4                        00            .byte	0
36516                                           ! 7328                             0,
36517 8FD5                        00            .byte	0
36518                                           ! 7329                           8,
36519 8FD6                        08            .byte	8
36520                                           ! 7330                                16,
36521 8FD7                        10            .byte	$10
36522                                           ! 7331                             8,
36523 8FD8                        08            .byte	8
36524                                           ! 7332                                  8,
36525 8FD9                        08            .byte	8
36526                                           ! 7333                            8,
36527 8FDA                        08            .byte	8
36528                                           ! 7334                                 0,
36529 8FDB                        00            .byte	0
36530                                           ! 7335                            8,
36531 8FDC                        08            .byte	8
36532                                           ! 7336                                 24,
36533 8FDD                        18            .byte	$18
36534                                           ! 7337                          0,
36535 8FDE                      0000            .word	0
36536 8FE0                      0000            .word	0
36537                                           ! 7338 } },
36538                                           ! 7339 { 0xFFFF,
36539 8FE2                      FFFF            .word	$FFFF
36540                                           ! 7340 { 0,
36541 8FE4                      0000            .word	0
36542                                           ! 7341 } },
36543 8FE6                  00000040            .blkb	$40
36544                                           ! 7342 };
36545                                           !BCC_EOS
36546                                           ! 7343 extern char vbebios_copyright;
36547                                           !BCC_EOS
36548                                           ! 7344 extern char vbebios_vendor_name;
36549                                           !BCC_EOS
36550                                           ! 7345 extern char vbebios_product_name;
36551                                           !BCC_EOS
36552                                           ! 7346 extern char vbebios_product_revision;
36553                                           !BCC_EOS
36554                                           ! 7347 #asm
36555                                           !BCC_ASM
36556                       00009026            _vbebios_copyright:
36557 9026                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
36558 906B                        00            .byte 0x00
36559                       0000906C            _vbebios_vendor_name:
36560 906C                        42            .ascii "Bochs/Plex86 Developers"
36561 9083                        00            .byte 0x00
36562                       00009084            _vbebios_product_name:
36563 9084                        42            .ascii "Bochs/Plex86 VBE Adapter"
36564 909C                        00            .byte 0x00
36565                       0000909D            _vbebios_product_revision:
36566 909D                        24            .ascii "$Id: vbe.c,v 1.62 2009/01/25 15:46:25 vruppert Exp $"
36567 90D1                        00            .byte 0x00
36568                       000090D2            _vbebios_info_string:
36569 90D2                        42            .ascii "Bochs VBE Display Adapter enabled"
36570 90F3                        0A            .byte 0x0a,0x0d
36571 90F5                        0A            .byte 0x0a,0x0d
36572 90F7                        00            .byte 0x00
36573                       000090F8            _no_vbebios_info_string:
36574 90F8                        4E            .ascii "NO Bochs VBE Support available!"
36575 9117                        0A            .byte 0x0a,0x0d
36576 9119                        0A            .byte 0x0a,0x0d
36577 911B                        00            .byte 0x00
36578                       0000911C            msg_vbe_init:
36579 911C                        56            .ascii "VBE Bios $Id: vbe.c,v 1.62 2009/01/25 15:46:25 vruppert Exp $"
36580 9159                        0A            .byte 0x0a,0x0d, 0x00
36581 915C                  00000002              .align 2
36582                       0000915C            vesa_pm_start:
36583 915C                      0014              dw vesa_pm_set_window - vesa_pm_start
36584 915E                      004B              dw vesa_pm_set_display_start - vesa_pm_start
36585 9160                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
36586 9162                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
36587                       00009164            vesa_pm_io_ports_table:
36588 9164                      01CE              dw 0x01CE
36589 9166                      01CF              dw 0x01CE + 1
36590 9168                      01CF              dw 0x01CF
36591 916A                      01D0              dw 0x01CF + 1
36592 916C                      FFFF              dw 0xffff
36593 916E                      FFFF              dw 0xffff
36594                                             USE32
36595                       00009170            vesa_pm_set_window:
36596 9170     66    83FB                   00    cmp bx, #0x00
36597 9174           74           05              je vesa_pm_set_display_window1
36598 9176     66    B8                   0100    mov ax, #0x0100
36599 917A           C3                           ret
36600                       0000917B            vesa_pm_set_display_window1:
36601 917B     66    89D0                         mov ax, dx
36602 917E     66    52                           push dx
36603 9180     66    50                           push ax
36604 9182     66    BA                   01CE    mov dx, # 0x01CE
36605 9186     66    B8                   0005    mov ax, # 0x5
36606 918A     66    EF                           out dx, ax
36607 918C     66    58                           pop ax
36608 918E     66    BA                   01CF    mov dx, # 0x01CF
36609 9192     66    EF                           out dx, ax
36610 9194     66    ED                           in ax, dx
36611 9196     66    5A                           pop dx
36612 9198     66    39C2                         cmp dx, ax
36613 919B           75           05              jne illegal_window
36614 919D     66    B8                   004F    mov ax, #0x004f
36615 91A1           C3                           ret
36616                       000091A2            illegal_window:
36617 91A2     66    B8                   014F    mov ax, #0x014f
36618 91A6           C3                           ret
36619                       000091A7            vesa_pm_set_display_start:
36620 91A7           80FB                   80    cmp bl, #0x80
36621 91AA           74           0A              je vesa_pm_set_display_start1
36622 91AC           80FB                   00    cmp bl, #0x00
36623 91AF           74           05              je vesa_pm_set_display_start1
36624 91B1     66    B8                   0100    mov ax, #0x0100
36625 91B5           C3                           ret
36626                       000091B6            vesa_pm_set_display_start1:
36627                                           ; convert offset to (X, Y) coordinate
36628                                           ; (would be simpler to change Bochs 1 API...)
36629 91B6           50                           push eax
36630 91B7           51                           push ecx
36631 91B8           52                           push edx
36632 91B9           56                           push esi
36633 91BA           57                           push edi
36634 91BB           C1E2                   10    shl edx, #16
36635 91BE           81E1             0000FFFF    and ecx, #0xffff
36636 91C4           09D1                         or ecx, edx
36637 91C6           C1E1                   02    shl ecx, #2
36638 91C9           89C8                         mov eax, ecx
36639 91CB           50                           push eax
36640 91CC     66    BA                   01CE    mov dx, # 0x01CE
36641 91D0     66    B8                   0006    mov ax, # 0x6
36642 91D4     66    EF                           out dx, ax
36643 91D6     66    BA                   01CF    mov dx, # 0x01CF
36644 91DA     66    ED                           in ax, dx
36645 91DC         0FB7C8                         movzx ecx, ax
36646 91DF     66    BA                   01CE    mov dx, # 0x01CE
36647 91E3     66    B8                   0003    mov ax, # 0x3
36648 91E7     66    EF                           out dx, ax
36649 91E9     66    BA                   01CF    mov dx, # 0x01CF
36650 91ED     66    ED                           in ax, dx
36651 91EF         0FB7F0                         movzx esi, ax
36652 91F2           58                           pop eax
36653 91F3           83FE                   04    cmp esi, #4
36654 91F6           74           17              jz bpp4_mode
36655 91F8           83C6                   07    add esi, #7
36656 91FB           C1EE                   03    shr esi, #3
36657 91FE         0FAFCE                         imul ecx, esi
36658 9201           31D2                         xor edx, edx
36659 9203           F7F1                         div ecx
36660 9205           89C7                         mov edi, eax
36661 9207           89D0                         mov eax, edx
36662 9209           31D2                         xor edx, edx
36663 920B           F7F6                         div esi
36664 920D           EB           0C              jmp set_xy_regs
36665                       0000920F            bpp4_mode:
36666 920F           D1E9                         shr ecx, #1
36667 9211           31D2                         xor edx, edx
36668 9213           F7F1                         div ecx
36669 9215           89C7                         mov edi, eax
36670 9217           89D0                         mov eax, edx
36671 9219           D1E0                         shl eax, #1
36672                       0000921B            set_xy_regs:
36673 921B     66    52                           push dx
36674 921D     66    50                           push ax
36675 921F     66    BA                   01CE    mov dx, # 0x01CE
36676 9223     66    B8                   0008    mov ax, # 0x8
36677 9227     66    EF                           out dx, ax
36678 9229     66    58                           pop ax
36679 922B     66    BA                   01CF    mov dx, # 0x01CF
36680 922F     66    EF                           out dx, ax
36681 9231     66    5A                           pop dx
36682 9233     66    89F8                         mov ax, di
36683 9236     66    52                           push dx
36684 9238     66    50                           push ax
36685 923A     66    BA                   01CE    mov dx, # 0x01CE
36686 923E     66    B8                   0009    mov ax, # 0x9
36687 9242     66    EF                           out dx, ax
36688 9244     66    58                           pop ax
36689 9246     66    BA                   01CF    mov dx, # 0x01CF
36690 924A     66    EF                           out dx, ax
36691 924C     66    5A                           pop dx
36692 924E           5F                           pop edi
36693 924F           5E                           pop esi
36694 9250           5A                           pop edx
36695 9251           59                           pop ecx
36696 9252           58                           pop eax
36697 9253     66    B8                   004F    mov ax, #0x004f
36698 9257           C3                           ret
36699                       00009258            vesa_pm_unimplemented:
36700 9258     66    B8                   014F    mov ax, #0x014f
36701 925C           C3                           ret
36702                                             USE16
36703                       0000925D            vesa_pm_end:
36704                                           ; DISPI ioport functions
36705                       0000925D            dispi_get_id:
36706 925D           52                           push dx
36707 925E           BA                   01CE    mov dx, # 0x01CE
36708 9261           B8                   0000    mov ax, # 0x0
36709 9264           EF                           out dx, ax
36710 9265           BA                   01CF    mov dx, # 0x01CF
36711 9268           ED                           in ax, dx
36712 9269           5A                           pop dx
36713 926A           C3                           ret
36714                       0000926B            dispi_set_id:
36715 926B           52                           push dx
36716 926C           50                           push ax
36717 926D           BA                   01CE    mov dx, # 0x01CE
36718 9270           B8                   0000    mov ax, # 0x0
36719 9273           EF                           out dx, ax
36720 9274           58                           pop ax
36721 9275           BA                   01CF    mov dx, # 0x01CF
36722 9278           EF                           out dx, ax
36723 9279           5A                           pop dx
36724 927A           C3                           ret
36725                                           ! 7517 endasm
36726                                           !BCC_ENDASM
36727                                           ! 7518 static void dispi_set_xres(xres)
36728                                           ! 7519   Bit16u xres;
36729                                           
36730                       0000927B            _dispi_set_xres:
36731                                           !BCC_EOS
36732                                           ! 7520 {
36733                                           ! 7521 #asm
36734                                           !BCC_ASM
36735                       00000002            _dispi_set_xres.xres	set	2
36736 927B           55                           push bp
36737 927C           89E5                         mov bp, sp
36738 927E           50                           push ax
36739 927F           52                           push dx
36740 9280           BA                   01CE    mov dx, # 0x01CE
36741 9283           B8                   0001    mov ax, # 0x1
36742 9286           EF                           out dx, ax
36743 9287           BA                   01CF    mov dx, # 0x01CF
36744 928A           8B46         04              mov ax, 4[bp] ; xres
36745 928D           EF                           out dx, ax
36746 928E           5A                           pop dx
36747 928F           58                           pop ax
36748 9290           5D                           pop bp
36749                                           ! 7535 endasm
36750                                           !BCC_ENDASM
36751                                           ! 7536 }
36752 9291           C3                         ret
36753                                           ! 7537 static void dispi_set_yres(yres)
36754                                           ! 7538   Bit16u yres;
36755                       00009292            _dispi_set_yres:
36756                                           !BCC_EOS
36757                                           ! 7539 {
36758                                           ! 7540   outw(0x01CE,0x2);
36759 9292           55                         push	bp
36760 9293           89E5                       mov	bp,sp
36761                                           ! Debug: list int = const 2 (used reg = )
36762 9295           B8                   0002  mov	ax,*2
36763 9298           50                         push	ax
36764                                           ! Debug: list int = const $1CE (used reg = )
36765 9299           B8                   01CE  mov	ax,#$1CE
36766 929C           50                         push	ax
36767                                           ! Debug: func () void = outw+0 (used reg = )
36768 929D           E8         EB48            call	_outw
36769 92A0           89EC                       mov	sp,bp
36770                                           !BCC_EOS
36771                                           ! 7541   outw(0x01CF
36772                                           ! 7541 ,yres);
36773                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
36774 92A2           FF76         04            push	4[bp]
36775                                           ! Debug: list int = const $1CF (used reg = )
36776 92A5           B8                   01CF  mov	ax,#$1CF
36777 92A8           50                         push	ax
36778                                           ! Debug: func () void = outw+0 (used reg = )
36779 92A9           E8         EB3C            call	_outw
36780 92AC           89EC                       mov	sp,bp
36781                                           !BCC_EOS
36782                                           ! 7542 }
36783 92AE           5D                         pop	bp
36784 92AF           C3                         ret
36785                                           ! 7543 static void dispi_set_bpp(bpp)
36786                                           ! 7544   Bit16u bpp;
36787                       000092B0            _dispi_set_bpp:
36788                                           !BCC_EOS
36789                                           ! 7545 {
36790                                           ! 7546   outw(0x01CE,0x3);
36791 92B0           55                         push	bp
36792 92B1           89E5                       mov	bp,sp
36793                                           ! Debug: list int = const 3 (used reg = )
36794 92B3           B8                   0003  mov	ax,*3
36795 92B6           50                         push	ax
36796                                           ! Debug: list int = const $1CE (used reg = )
36797 92B7           B8                   01CE  mov	ax,#$1CE
36798 92BA           50                         push	ax
36799                                           ! Debug: func () void = outw+0 (used reg = )
36800 92BB           E8         EB2A            call	_outw
36801 92BE           89EC                       mov	sp,bp
36802                                           !BCC_EOS
36803                                           ! 7547   outw(0x01CF,bpp);
36804                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
36805 92C0           FF76         04            push	4[bp]
36806                                           ! Debug: list int = const $1CF (used reg = )
36807 92C3           B8                   01CF  mov	ax,#$1CF
36808 92C6           50                         push	ax
36809                                           ! Debug: func () void = outw+0 (used reg = )
36810 92C7           E8         EB1E            call	_outw
36811 92CA           89EC                       mov	sp,bp
36812                                           !BCC_EOS
36813                                           ! 7548 }
36814 92CC           5D                         pop	bp
36815 92CD           C3                         ret
36816                                           ! 7549 #asm
36817                                           !BCC_ASM
36818                       00000002            _dispi_set_bpp.bpp	set	2
36819                                           ; AL = bits per pixel / AH = bytes per pixel
36820                       000092CE            dispi_get_bpp:
36821 92CE           52                           push dx
36822 92CF           BA                   01CE    mov dx, # 0x01CE
36823 92D2           B8                   0003    mov ax, # 0x3
36824 92D5           EF                           out dx, ax
36825 92D6           BA                   01CF    mov dx, # 0x01CF
36826 92D9           ED                           in ax, dx
36827 92DA           88C4                         mov ah, al
36828 92DC           C0EC                   03    shr ah, 3
36829 92DF           A8                     07    test al, #0x07
36830 92E1           74           02              jz get_bpp_noinc
36831 92E3           FEC4                         inc ah
36832                       000092E5            get_bpp_noinc:
36833 92E5           5A                           pop dx
36834 92E6           C3                           ret
36835                                           ; get display capabilities
36836                       000092E7            _dispi_get_max_xres:
36837 92E7           52                           push dx
36838 92E8           53                           push bx
36839 92E9           E8         004F              call dispi_get_enable
36840 92EC           89C3                         mov bx, ax
36841 92EE           0D                   0002    or ax, # 0x02
36842 92F1           E8         0037              call _dispi_set_enable
36843 92F4           BA                   01CE    mov dx, # 0x01CE
36844 92F7           B8                   0001    mov ax, # 0x1
36845 92FA           EF                           out dx, ax
36846 92FB           BA                   01CF    mov dx, # 0x01CF
36847 92FE           ED                           in ax, dx
36848 92FF           50                           push ax
36849 9300           89D8                         mov ax, bx
36850 9302           E8         0026              call _dispi_set_enable
36851 9305           58                           pop ax
36852 9306           5B                           pop bx
36853 9307           5A                           pop dx
36854 9308           C3                           ret
36855                       00009309            _dispi_get_max_bpp:
36856 9309           52                           push dx
36857 930A           53                           push bx
36858 930B           E8         002D              call dispi_get_enable
36859 930E           89C3                         mov bx, ax
36860 9310           0D                   0002    or ax, # 0x02
36861 9313           E8         0015              call _dispi_set_enable
36862 9316           BA                   01CE    mov dx, # 0x01CE
36863 9319           B8                   0003    mov ax, # 0x3
36864 931C           EF                           out dx, ax
36865 931D           BA                   01CF    mov dx, # 0x01CF
36866 9320           ED                           in ax, dx
36867 9321           50                           push ax
36868 9322           89D8                         mov ax, bx
36869 9324           E8         0004              call _dispi_set_enable
36870 9327           58                           pop ax
36871 9328           5B                           pop bx
36872 9329           5A                           pop dx
36873 932A           C3                           ret
36874                       0000932B            _dispi_set_enable:
36875 932B           52                           push dx
36876 932C           50                           push ax
36877 932D           BA                   01CE    mov dx, # 0x01CE
36878 9330           B8                   0004    mov ax, # 0x4
36879 9333           EF                           out dx, ax
36880 9334           58                           pop ax
36881 9335           BA                   01CF    mov dx, # 0x01CF
36882 9338           EF                           out dx, ax
36883 9339           5A                           pop dx
36884 933A           C3                           ret
36885                       0000933B            dispi_get_enable:
36886 933B           52                           push dx
36887 933C           BA                   01CE    mov dx, # 0x01CE
36888 933F           B8                   0004    mov ax, # 0x4
36889 9342           EF                           out dx, ax
36890 9343           BA                   01CF    mov dx, # 0x01CF
36891 9346           ED                           in ax, dx
36892 9347           5A                           pop dx
36893 9348           C3                           ret
36894                       00009349            _dispi_set_bank:
36895 9349           52                           push dx
36896 934A           50                           push ax
36897 934B           BA                   01CE    mov dx, # 0x01CE
36898 934E           B8                   0005    mov ax, # 0x5
36899 9351           EF                           out dx, ax
36900 9352           58                           pop ax
36901 9353           BA                   01CF    mov dx, # 0x01CF
36902 9356           EF                           out dx, ax
36903 9357           5A                           pop dx
36904 9358           C3                           ret
36905                       00009359            dispi_get_bank:
36906 9359           52                           push dx
36907 935A           BA                   01CE    mov dx, # 0x01CE
36908 935D           B8                   0005    mov ax, # 0x5
36909 9360           EF                           out dx, ax
36910 9361           BA                   01CF    mov dx, # 0x01CF
36911 9364           ED                           in ax, dx
36912 9365           5A                           pop dx
36913 9366           C3                           ret
36914                                           ! 7645 endasm
36915                                           !BCC_ENDASM
36916                                           ! 7646 static void dispi_set_bank_farcall()
36917                                           ! 7647 {
36918                       00009367            _dispi_set_bank_farcall:
36919                                           ! 7648 #asm
36920                                           !BCC_ASM
36921 9367           81FB                 0100    cmp bx,#0x0100
36922 936B           74           1E              je dispi_set_bank_farcall_get
36923 936D           09DB                         or bx,bx
36924 936F           75           28              jnz dispi_set_bank_farcall_error
36925 9371           89D0                         mov ax,dx
36926 9373           52                           push dx
36927 9374           50                           push ax
36928 9375           B8                   0005    mov ax,# 0x5
36929 9378           BA                   01CE    mov dx,# 0x01CE
36930 937B           EF                           out dx,ax
36931 937C           58                           pop ax
36932 937D           BA                   01CF    mov dx,# 0x01CF
36933 9380           EF                           out dx,ax
36934 9381           ED                           in ax,dx
36935 9382           5A                           pop dx
36936 9383           39C2                         cmp dx,ax
36937 9385           75           12              jne dispi_set_bank_farcall_error
36938 9387           B8                   004F    mov ax, #0x004f
36939 938A           CB                           retf
36940                       0000938B            dispi_set_bank_farcall_get:
36941 938B           B8                   0005    mov ax,# 0x5
36942 938E           BA                   01CE    mov dx,# 0x01CE
36943 9391           EF                           out dx,ax
36944 9392           BA                   01CF    mov dx,# 0x01CF
36945 9395           ED                           in ax,dx
36946 9396           89C2                         mov dx,ax
36947 9398           CB                           retf
36948                       00009399            dispi_set_bank_farcall_error:
36949 9399           B8                   014F    mov ax,#0x014F
36950 939C           CB                           retf
36951                                           ! 7679 endasm
36952                                           !BCC_ENDASM
36953                                           ! 7680 }
36954 939D           C3                         ret
36955                                           ! 7681 #asm
36956                                           !BCC_ASM
36957                       0000939E            dispi_set_x_offset:
36958 939E           52                           push dx
36959 939F           50                           push ax
36960 93A0           BA                   01CE    mov dx, # 0x01CE
36961 93A3           B8                   0008    mov ax, # 0x8
36962 93A6           EF                           out dx, ax
36963 93A7           58                           pop ax
36964 93A8           BA                   01CF    mov dx, # 0x01CF
36965 93AB           EF                           out dx, ax
36966 93AC           5A                           pop dx
36967 93AD           C3                           ret
36968                       000093AE            dispi_get_x_offset:
36969 93AE           52                           push dx
36970 93AF           BA                   01CE    mov dx, # 0x01CE
36971 93B2           B8                   0008    mov ax, # 0x8
36972 93B5           EF                           out dx, ax
36973 93B6           BA                   01CF    mov dx, # 0x01CF
36974 93B9           ED                           in ax, dx
36975 93BA           5A                           pop dx
36976 93BB           C3                           ret
36977                       000093BC            dispi_set_y_offset:
36978 93BC           52                           push dx
36979 93BD           50                           push ax
36980 93BE           BA                   01CE    mov dx, # 0x01CE
36981 93C1           B8                   0009    mov ax, # 0x9
36982 93C4           EF                           out dx, ax
36983 93C5           58                           pop ax
36984 93C6           BA                   01CF    mov dx, # 0x01CF
36985 93C9           EF                           out dx, ax
36986 93CA           5A                           pop dx
36987 93CB           C3                           ret
36988                       000093CC            dispi_get_y_offset:
36989 93CC           52                           push dx
36990 93CD           BA                   01CE    mov dx, # 0x01CE
36991 93D0           B8                   0009    mov ax, # 0x9
36992 93D3           EF                           out dx, ax
36993 93D4           BA                   01CF    mov dx, # 0x01CF
36994 93D7           ED                           in ax, dx
36995 93D8           5A                           pop dx
36996 93D9           C3                           ret
36997                       000093DA            vga_set_virt_width:
36998 93DA           50                           push ax
36999 93DB           53                           push bx
37000 93DC           52                           push dx
37001 93DD           89C3                         mov bx, ax
37002 93DF           E8         FEEC              call dispi_get_bpp
37003 93E2           3C                     04    cmp al, #0x04
37004 93E4           77           02              ja set_width_svga
37005 93E6           D1EB                         shr bx, #1
37006                       000093E8            set_width_svga:
37007 93E8           C1EB                   03    shr bx, #3
37008 93EB           BA                   03D4    mov dx, # 0x3d4
37009 93EE           88DC                         mov ah, bl
37010 93F0           B0                     13    mov al, #0x13
37011 93F2           EF                           out dx, ax
37012 93F3           5A                           pop dx
37013 93F4           5B                           pop bx
37014 93F5           58                           pop ax
37015 93F6           C3                           ret
37016                       000093F7            dispi_set_virt_width:
37017 93F7           E8         FFE0              call vga_set_virt_width
37018 93FA           52                           push dx
37019 93FB           50                           push ax
37020 93FC           BA                   01CE    mov dx, # 0x01CE
37021 93FF           B8                   0006    mov ax, # 0x6
37022 9402           EF                           out dx, ax
37023 9403           58                           pop ax
37024 9404           BA                   01CF    mov dx, # 0x01CF
37025 9407           EF                           out dx, ax
37026 9408           5A                           pop dx
37027 9409           C3                           ret
37028                       0000940A            dispi_get_virt_width:
37029 940A           52                           push dx
37030 940B           BA                   01CE    mov dx, # 0x01CE
37031 940E           B8                   0006    mov ax, # 0x6
37032 9411           EF                           out dx, ax
37033 9412           BA                   01CF    mov dx, # 0x01CF
37034 9415           ED                           in ax, dx
37035 9416           5A                           pop dx
37036 9417           C3                           ret
37037                       00009418            dispi_get_virt_height:
37038 9418           52                           push dx
37039 9419           BA                   01CE    mov dx, # 0x01CE
37040 941C           B8                   0007    mov ax, # 0x7
37041 941F           EF                           out dx, ax
37042 9420           BA                   01CF    mov dx, # 0x01CF
37043 9423           ED                           in ax, dx
37044 9424           5A                           pop dx
37045 9425           C3                           ret
37046                       00009426            _vga_compat_setup:
37047 9426           50                           push ax
37048 9427           52                           push dx
37049                                             ; set CRT X resolution
37050 9428           BA                   01CE    mov dx, # 0x01CE
37051 942B           B8                   0001    mov ax, # 0x1
37052 942E           EF                           out dx, ax
37053 942F           BA                   01CF    mov dx, # 0x01CF
37054 9432           ED                           in ax, dx
37055 9433           50                           push ax
37056 9434           BA                   03D4    mov dx, # 0x3d4
37057 9437           B8                   0011    mov ax, #0x0011
37058 943A           EF                           out dx, ax
37059 943B           58                           pop ax
37060 943C           50                           push ax
37061 943D           C1E8                   03    shr ax, #3
37062 9440           48                           dec ax
37063 9441           88C4                         mov ah, al
37064 9443           B0                     01    mov al, #0x01
37065 9445           EF                           out dx, ax
37066 9446           58                           pop ax
37067 9447           E8         FF90              call vga_set_virt_width
37068                                             ; set CRT Y resolution
37069 944A           BA                   01CE    mov dx, # 0x01CE
37070 944D           B8                   0002    mov ax, # 0x2
37071 9450           EF                           out dx, ax
37072 9451           BA                   01CF    mov dx, # 0x01CF
37073 9454           ED                           in ax, dx
37074 9455           48                           dec ax
37075 9456           50                           push ax
37076 9457           BA                   03D4    mov dx, # 0x3d4
37077 945A           88C4                         mov ah, al
37078 945C           B0                     12    mov al, #0x12
37079 945E           EF                           out dx, ax
37080 945F           58                           pop ax
37081 9460           B0                     07    mov al, #0x07
37082 9462           EE                           out dx, al
37083 9463           42                           inc dx
37084 9464           EC                           in al, dx
37085 9465           24                     BD    and al, #0xbd
37086 9467           F6C4                   01    test ah, #0x01
37087 946A           74           02              jz bit8_clear
37088 946C           0C                     02    or al, #0x02
37089                       0000946E            bit8_clear:
37090 946E           F6C4                   02    test ah, #0x02
37091 9471           74           02              jz bit9_clear
37092 9473           0C                     40    or al, #0x40
37093                       00009475            bit9_clear:
37094 9475           EE                           out dx, al
37095                                             ; other settings
37096 9476           BA                   03D4    mov dx, # 0x3d4
37097 9479           B8                   0009    mov ax, #0x0009
37098 947C           EF                           out dx, ax
37099 947D           B0                     17    mov al, #0x17
37100 947F           EE                           out dx, al
37101 9480           BA                   03D5    mov dx, # 0x3d5
37102 9483           EC                           in al, dx
37103 9484           0C                     03    or al, #0x03
37104 9486           EE                           out dx, al
37105 9487           BA                   03DA    mov dx, # 0x3da
37106 948A           EC                           in al, dx
37107 948B           BA                   03C0    mov dx, # 0x3c0
37108 948E           B0                     10    mov al, #0x10
37109 9490           EE                           out dx, al
37110 9491           BA                   03C1    mov dx, # 0x3c1
37111 9494           EC                           in al, dx
37112 9495           0C                     01    or al, #0x01
37113 9497           BA                   03C0    mov dx, # 0x3c0
37114 949A           EE                           out dx, al
37115 949B           B0                     20    mov al, #0x20
37116 949D           EE                           out dx, al
37117 949E           BA                   03CE    mov dx, # 0x3ce
37118 94A1           B8                   0506    mov ax, #0x0506
37119 94A4           EF                           out dx, ax
37120 94A5           BA                   03C4    mov dx, # 0x3c4
37121 94A8           B8                   0F02    mov ax, #0x0f02
37122 94AB           EF                           out dx, ax
37123                                             ; settings for >= 8bpp
37124 94AC           BA                   01CE    mov dx, # 0x01CE
37125 94AF           B8                   0003    mov ax, # 0x3
37126 94B2           EF                           out dx, ax
37127 94B3           BA                   01CF    mov dx, # 0x01CF
37128 94B6           ED                           in ax, dx
37129 94B7           3C                     08    cmp al, #0x08
37130 94B9           72           40              jb vga_compat_end
37131 94BB           BA                   03D4    mov dx, # 0x3d4
37132 94BE           B0                     14    mov al, #0x14
37133 94C0           EE                           out dx, al
37134 94C1           BA                   03D5    mov dx, # 0x3d5
37135 94C4           EC                           in al, dx
37136 94C5           0C                     40    or al, #0x40
37137 94C7           EE                           out dx, al
37138 94C8           BA                   03DA    mov dx, # 0x3da
37139 94CB           EC                           in al, dx
37140 94CC           BA                   03C0    mov dx, # 0x3c0
37141 94CF           B0                     10    mov al, #0x10
37142 94D1           EE                           out dx, al
37143 94D2           BA                   03C1    mov dx, # 0x3c1
37144 94D5           EC                           in al, dx
37145 94D6           0C                     40    or al, #0x40
37146 94D8           BA                   03C0    mov dx, # 0x3c0
37147 94DB           EE                           out dx, al
37148 94DC           B0                     20    mov al, #0x20
37149 94DE           EE                           out dx, al
37150 94DF           BA                   03C4    mov dx, # 0x3c4
37151 94E2           B0                     04    mov al, #0x04
37152 94E4           EE                           out dx, al
37153 94E5           BA                   03C5    mov dx, # 0x3c5
37154 94E8           EC                           in al, dx
37155 94E9           0C                     08    or al, #0x08
37156 94EB           EE                           out dx, al
37157 94EC           BA                   03CE    mov dx, # 0x3ce
37158 94EF           B0                     05    mov al, #0x05
37159 94F1           EE                           out dx, al
37160 94F2           BA                   03CF    mov dx, # 0x3cf
37161 94F5           EC                           in al, dx
37162 94F6           24                     9F    and al, #0x9f
37163 94F8           0C                     40    or al, #0x40
37164 94FA           EE                           out dx, al
37165                       000094FB            vga_compat_end:
37166 94FB           5A                           pop dx
37167 94FC           58                           pop ax
37168                                           ! 7893 endasm
37169                                           !BCC_ENDASM
37170                                           ! 7894 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
37171                                           ! 7895   Bit16u mode; Boolean using_lfb;
37172                       000094FD            _mode_info_find_mode:
37173                                           !BCC_EOS
37174                                           !BCC_EOS
37175                                           ! 7896 {
37176                                           ! 7897   ModeInfoListItem *cur_info=&mode_info_list;
37177 94FD           55                         push	bp
37178 94FE           89E5                       mov	bp,sp
37179 9500           4C                         dec	sp
37180 9501           4C                         dec	sp
37181                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
37182 9502           BB                   7FAE  mov	bx,#_mode_info_list
37183 9505           895E         FE            mov	-2[bp],bx
37184                                           !BCC_EOS
37185                                           ! 7898   while (cur_info->mode != 0xFFFF)
37186                                           ! 7899   {
37187 9508           EB           43            jmp .2CC
37188                       0000950A            .2CD:
37189                                           ! 7900     if (cur_info->mode == mode)
37190 950A           8B5E         FE            mov	bx,-2[bp]
37191                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
37192 950D           8B1F                       mov	bx,[bx]
37193 950F           3B5E         04            cmp	bx,4[bp]
37194 9512           75           30            jne 	.2CE
37195                       00009514            .2CF:
37196                                           ! 7901     {
37197                                           ! 7902       if (!using_lfb)
37198 9514           8B46         06            mov	ax,6[bp]
37199 9517           85C0                       test	ax,ax
37200 9519           75           09            jne 	.2D0
37201                       0000951B            .2D1:
37202                                           ! 7903       {
37203                                           ! 7904         return cur_info;
37204 951B           8B46         FE            mov	ax,-2[bp]
37205 951E           89EC                       mov	sp,bp
37206 9520           5D                         pop	bp
37207 9521           C3                         ret
37208                                           !BCC_EOS
37209                                           ! 7905       }
37210                                           ! 7906       else if (cur_info->info.ModeAttributes & 0x0080)
37211 9522           EB           1E            jmp .2D2
37212                       00009524            .2D0:
37213 9524           8B5E         FE            mov	bx,-2[bp]
37214                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
37215 9527           8A47         02            mov	al,2[bx]
37216 952A           24                     80  and	al,#$80
37217 952C           84C0                       test	al,al
37218 952E           74           09            je  	.2D3
37219                       00009530            .2D4:
37220                                           ! 7907       {
37221                                           ! 7908         return cur_info;
37222 9530           8B46         FE            mov	ax,-2[bp]
37223 9533           89EC                       mov	sp,bp
37224 9535           5D                         pop	bp
37225 9536           C3                         ret
37226                                           !BCC_EOS
37227                                           ! 7909       }
37228                                           ! 7910       else
37229                                           ! 7911       {
37230 9537           EB           09            jmp .2D5
37231                       00009539            .2D3:
37232                                           ! 7912         cur_info++;
37233                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
37234 9539           8B5E         FE            mov	bx,-2[bp]
37235 953C           83C3                   44  add	bx,*$44
37236 953F           895E         FE            mov	-2[bp],bx
37237                                           !BCC_EOS
37238                                           ! 7913       }
37239                                           ! 7914     }
37240                       00009542            .2D5:
37241                       00009542            .2D2:
37242                                           ! 7915     else
37243                                           ! 7916     {
37244 9542           EB           09            jmp .2D6
37245                       00009544            .2CE:
37246                                           ! 7917       cur_info++;
37247                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
37248 9544           8B5E         FE            mov	bx,-2[bp]
37249 9547           83C3                   44  add	bx,*$44
37250 954A           895E         FE            mov	-2[bp],bx
37251                                           !BCC_EOS
37252                                           ! 7918     }
37253                                           ! 7919   }
37254                       0000954D            .2D6:
37255                                           ! 7920   return 0;
37256                       0000954D            .2CC:
37257 954D           8B5E         FE            mov	bx,-2[bp]
37258                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37259 9550           8B1F                       mov	bx,[bx]
37260 9552           81FB                 FFFF  cmp	bx,#$FFFF
37261 9556           75           B2            jne	.2CD
37262                       00009558            .2D7:
37263                       00009558            .2CB:
37264 9558           31C0                       xor	ax,ax
37265 955A           89EC                       mov	sp,bp
37266 955C           5D                         pop	bp
37267 955D           C3                         ret
37268                                           !BCC_EOS
37269                                           ! 7921 }
37270                                           ! 7922 #asm
37271                                           !BCC_ASM
37272                       00000004            _mode_info_find_mode.using_lfb	set	4
37273                       00000002            _mode_info_find_mode.mode	set	2
37274                                           ; Has 1 display - Returns true if 1 display detected
37275                       0000955E            _vbe_has_vbe_display:
37276 955E           1E                           push ds
37277 955F           53                           push bx
37278 9560           B8                   0040    mov ax, # 0x40
37279 9563           8ED8                         mov ds, ax
37280 9565           BB                   00B9    mov bx, # 0xB9
37281 9568           8A07                         mov al, [bx]
37282 956A           24                     01    and al, #0x01
37283 956C           30E4                         xor ah, ah
37284 956E           5B                           pop bx
37285 956F           1F                           pop ds
37286 9570           C3                           ret
37287                                           ; 1 Init - Initialise the Vesa Bios Extension Code
37288                                           ; This function does a sanity check on the host side display code interface.
37289                       00009571            vbe_init:
37290 9571           B8                   B0C0    mov ax, # 0xB0C0
37291 9574           E8         FCF4              call dispi_set_id
37292 9577           E8         FCE3              call dispi_get_id
37293 957A           3D                   B0C0    cmp ax, # 0xB0C0
37294 957D           75           16              jne no_vbe_interface
37295 957F           1E                           push ds
37296 9580           53                           push bx
37297 9581           B8                   0040    mov ax, # 0x40
37298 9584           8ED8                         mov ds, ax
37299 9586           BB                   00B9    mov bx, # 0xB9
37300 9589           B0                     01    mov al, #0x01
37301 958B           8807                         mov [bx], al
37302 958D           5B                           pop bx
37303 958E           1F                           pop ds
37304 958F           B8                   B0C5    mov ax, # 0xB0C5
37305 9592           E8         FCD6              call dispi_set_id
37306                       00009595            no_vbe_interface:
37307 9595           BB                   911C    mov bx, #msg_vbe_init
37308 9598           53                           push bx
37309 9599           E8         E87B              call _printf
37310 959C           44                           inc sp
37311 959D           44                           inc sp
37312 959E           C3                           ret
37313                                           ; 1 Display Info - Display information on screen about the 1
37314                       0000959F            vbe_display_info:
37315 959F           E8         FFBC              call _vbe_has_vbe_display
37316 95A2           85C0                         test ax, ax
37317 95A4           74           0B              jz no_vbe_flag
37318 95A6           B8                   C000    mov ax, #0xc000
37319 95A9           8ED8                         mov ds, ax
37320 95AB           BE                   90D2    mov si, #_vbebios_info_string
37321 95AE           E9         A08B              jmp _display_string
37322                       000095B1            no_vbe_flag:
37323 95B1           B8                   C000    mov ax, #0xc000
37324 95B4           8ED8                         mov ds, ax
37325 95B6           BE                   90F8    mov si, #_no_vbebios_info_string
37326 95B9           E9         A080              jmp _display_string
37327                                           ; helper function for memory size calculation
37328                       000095BC            lmulul:
37329 95BC     66    25               0000FFFF    and eax, #0x0000FFFF
37330 95C2     66    C1E3                   10    shl ebx, #16
37331 95C6     66    09D8                         or eax, ebx
37332 95C9           36                           SEG SS
37333 95CA     66    F725                         mul eax, dword ptr [di]
37334 95CD     66    89C3                         mov ebx, eax
37335 95D0     66    C1EB                   10    shr ebx, #16
37336 95D4           C3                           ret
37337                                           ! 7986 endasm
37338                                           !BCC_ENDASM
37339                                           ! 7987 void vbe_biosfn_return_controller_information(AX, ES, DI)
37340                                           ! Register BX used in function mode_info_find_mode
37341                                           ! 7988 Bit16u *AX;Bit16u ES;Bit16u DI;
37342                                           export	_vbe_biosfn_return_controller_information
37343                       000095D5            _vbe_biosfn_return_controller_information:
37344                                           !BCC_EOS
37345                                           !BCC_EOS
37346                                           !BCC_EOS
37347                                           ! 7989 {
37348                                           ! 7990         Bit16u ss=get_SS();
37349 95D5           55                         push	bp
37350 95D6           89E5                       mov	bp,sp
37351 95D8           4C                         dec	sp
37352 95D9           4C                         dec	sp
37353                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37354 95DA           E8         E81B            call	_get_SS
37355                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
37356 95DD           8946         FE            mov	-2[bp],ax
37357                                           !BCC_EOS
37358                                           ! 7991         VbeInfoBlock vbe_info_block;
37359                                           !BCC_EOS
37360                                           ! 7992         Bit16u status;
37361                                           !BCC_EOS
37362                                           ! 7993         Bit16u result;
37363                                           !BCC_EOS
37364                                           ! 7994         Bit16u vbe2_info;
37365                                           !BCC_EOS
37366                                           ! 7995         Bit16u cur_mode=0;
37367 95E0           81C4                 FDF8  add	sp,#-$208
37368                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
37369 95E4           31C0                       xor	ax,ax
37370 95E6           8986       FDF6            mov	-$20A[bp],ax
37371                                           !BCC_EOS
37372                                           ! 7996         Bit16u cur_ptr=34;
37373 95EA           4C                         dec	sp
37374 95EB           4C                         dec	sp
37375                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
37376 95EC           B8                   0022  mov	ax,*$22
37377 95EF           8986       FDF4            mov	-$20C[bp],ax
37378                                           !BCC_EOS
37379                                           ! 7997         Bit16u size_64k;
37380                                           !BCC_EOS
37381                                           ! 7998         ModeInfoListItem *cur_info=&mode_info_list;
37382 95F3           83C4                   FC  add	sp,*-4
37383                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
37384 95F6           BB                   7FAE  mov	bx,#_mode_info_list
37385 95F9           899E       FDF0            mov	-$210[bp],bx
37386                                           !BCC_EOS
37387                                           ! 7999         status = read_word(ss, AX);
37388                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
37389 95FD           FF76         04            push	4[bp]
37390                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37391 9600           FF76         FE            push	-2[bp]
37392                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
37393 9603           E8         E779            call	_read_word
37394 9606           83C4                   04  add	sp,*4
37395                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$212-$206] (used reg = )
37396 9609           8986       FDFC            mov	-$204[bp],ax
37397                                           !BCC_EOS
37398                                           ! 8000         printf("VBE vbe_biosfn_return_vbe_info ES%x DI%x AX%x\n",ES,DI,status);
37399                                           ! Debug: list unsigned short status = [S+$212-$206] (used reg = )
37400 960D           FFB6       FDFC            push	-$204[bp]
37401                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
37402 9611           FF76         08            push	8[bp]
37403                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37404 9614           FF76         06            push	6[bp]
37405                                           ! Debug: list * char = .2D8+0 (used reg = )
37406 9617           BB                   A0BA  mov	bx,#.2D8
37407 961A           53                         push	bx
37408                                           ! Debug: func () void = printf+0 (used reg = )
37409 961B           E8         E7F9            call	_printf
37410 961E           83C4                   08  add	sp,*8
37411                                           !BCC_EOS
37412                                           ! 8001         vbe2_info = 0;
37413                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
37414 9621           31C0                       xor	ax,ax
37415 9623           8986       FDF8            mov	-$208[bp],ax
37416                                           !BCC_EOS
37417                                           ! 8002         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
37418                                           ! Debug: list int = const $200 (used reg = )
37419 9627           B8                   0200  mov	ax,#$200
37420 962A           50                         push	ax
37421                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
37422 962B           FF76         08            push	8[bp]
37423                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37424 962E           FF76         06            push	6[bp]
37425                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$218-$204 (used reg = )
37426 9631           8D9E       FDFE            lea	bx,-$202[bp]
37427 9635           53                         push	bx
37428                                           ! Debug: list unsigned short ss = [S+$21A-4] (used reg = )
37429 9636           FF76         FE            push	-2[bp]
37430                                           ! Debug: func () void = memcpyb+0 (used reg = )
37431 9639           E8         E6D0            call	_memcpyb
37432 963C           83C4                   0A  add	sp,*$A
37433                                           !BCC_EOS
37434                                           ! 8003         if (((vbe_info_block.VbeSignature[0] == 'V') &&
37435                                           ! 8004              (vbe_info_block.VbeSignature[1] == 'B') &&
37436                                           ! 8005              (vbe_info_block.VbeSignature[2] == 'E') &&
37437                                           ! 8006              (vbe_info_block.VbeSignature[3] == '2')) ||
37438                                           ! 8007             ((vbe_info_block.VbeSignature[0] == 'V') &&
37439                                           ! 8008              (vbe_info_block.VbeSignature[1] == 'E') &&
37440                                           ! 8009              (vbe_info_block.VbeSignature[2] == 'S') &&
37441                                           ! 8010              (vbe_info_block.VbeSignature[3] == 'A')) )
37442                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
37443 963F           8A86       FDFE            mov	al,-$202[bp]
37444 9643           3C                     56  cmp	al,*$56
37445 9645           75           18            jne 	.2DB
37446                       00009647            .2DE:
37447                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
37448 9647           8A86       FDFF            mov	al,-$201[bp]
37449 964B           3C                     42  cmp	al,*$42
37450 964D           75           10            jne 	.2DB
37451                       0000964F            .2DD:
37452                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
37453 964F           8A86       FE00            mov	al,-$200[bp]
37454 9653           3C                     45  cmp	al,*$45
37455 9655           75           08            jne 	.2DB
37456                       00009657            .2DC:
37457                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
37458 9657           8A86       FE01            mov	al,-$1FF[bp]
37459 965B           3C                     32  cmp	al,*$32
37460 965D           74           20            je  	.2DA
37461                       0000965F            .2DB:
37462                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
37463 965F           8A86       FDFE            mov	al,-$202[bp]
37464 9663           3C                     56  cmp	al,*$56
37465 9665           75           28            jne 	.2D9
37466                       00009667            .2E1:
37467                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
37468 9667           8A86       FDFF            mov	al,-$201[bp]
37469 966B           3C                     45  cmp	al,*$45
37470 966D           75           20            jne 	.2D9
37471                       0000966F            .2E0:
37472                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
37473 966F           8A86       FE00            mov	al,-$200[bp]
37474 9673           3C                     53  cmp	al,*$53
37475 9675           75           18            jne 	.2D9
37476                       00009677            .2DF:
37477                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
37478 9677           8A86       FE01            mov	al,-$1FF[bp]
37479 967B           3C                     41  cmp	al,*$41
37480 967D           75           10            jne 	.2D9
37481                       0000967F            .2DA:
37482                                           ! 8011         {
37483                                           ! 8012                 vbe2_info = 1;
37484                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
37485 967F           B8                   0001  mov	ax,*1
37486 9682           8986       FDF8            mov	-$208[bp],ax
37487                                           !BCC_EOS
37488                                           ! 8013                 printf("VBE correct VESA/VBE2 signature found\n");
37489                                           ! Debug: list * char = .2E2+0 (used reg = )
37490 9686           BB                   A093  mov	bx,#.2E2
37491 9689           53                         push	bx
37492                                           ! Debug: func () void = printf+0 (used reg = )
37493 968A           E8         E78A            call	_printf
37494 968D           44                         inc	sp
37495 968E           44                         inc	sp
37496                                           !BCC_EOS
37497                                           ! 8014         }
37498                                           ! 8015         vbe_info_block.VbeSignature[0] = 'V';
37499                       0000968F            .2D9:
37500                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
37501 968F           B0                     56  mov	al,*$56
37502 9691           8886       FDFE            mov	-$202[bp],al
37503                                           !BCC_EOS
37504                                           ! 8016         vbe_info_block.VbeSignature[1] = 'E';
37505                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
37506 9695           B0                     45  mov	al,*$45
37507 9697           8886       FDFF            mov	-$201[bp],al
37508                                           !BCC_EOS
37509                                           ! 8017         vbe_info_block.VbeSignature[2] = 'S';
37510                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
37511 969B           B0                     53  mov	al,*$53
37512 969D           8886       FE00            mov	-$200[bp],al
37513                                           !BCC_EOS
37514                                           ! 8018         vbe_info_block.VbeSignature[3] = 'A';
37515                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
37516 96A1           B0                     41  mov	al,*$41
37517 96A3           8886       FE01            mov	-$1FF[bp],al
37518                                           !BCC_EOS
37519                                           ! 8019         vbe_info_block.VbeVersion = 0x0200;
37520                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$212-$200] (used reg = )
37521 96A7           B8                   0200  mov	ax,#$200
37522 96AA           8986       FE02            mov	-$1FE[bp],ax
37523                                           !BCC_EOS
37524                                           ! 8020         vbe_info_block.OemStringPtr_Seg = 0xc000;
37525                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1FC] (used reg = )
37526 96AE           B8                   C000  mov	ax,#$C000
37527 96B1           8986       FE06            mov	-$1FA[bp],ax
37528                                           !BCC_EOS
37529                                           ! 8021         vbe_in
37530                                           ! 8021 fo_block.OemStringPtr_Off = &vbebios_copyright;
37531                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$212-$1FE] (used reg = )
37532 96B5           BB                   9026  mov	bx,#_vbebios_copyright
37533 96B8           899E       FE04            mov	-$1FC[bp],bx
37534                                           !BCC_EOS
37535                                           ! 8022         vbe_info_block.Capabilities[0] = 0x0001;
37536                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$212-$1FA] (used reg = )
37537 96BC           B0                     01  mov	al,*1
37538 96BE           8886       FE08            mov	-$1F8[bp],al
37539                                           !BCC_EOS
37540                                           ! 8023         vbe_info_block.Capabilities[1] = 0;
37541                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F9] (used reg = )
37542 96C2           30C0                       xor	al,al
37543 96C4           8886       FE09            mov	-$1F7[bp],al
37544                                           !BCC_EOS
37545                                           ! 8024         vbe_info_block.Capabilities[2] = 0;
37546                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F8] (used reg = )
37547 96C8           30C0                       xor	al,al
37548 96CA           8886       FE0A            mov	-$1F6[bp],al
37549                                           !BCC_EOS
37550                                           ! 8025         vbe_info_block.Capabilities[3] = 0;
37551                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F7] (used reg = )
37552 96CE           30C0                       xor	al,al
37553 96D0           8886       FE0B            mov	-$1F5[bp],al
37554                                           !BCC_EOS
37555                                           ! 8026         vbe_info_block.VideoModePtr_Seg= ES ;
37556                                           ! Debug: eq unsigned short ES = [S+$212+4] to unsigned short vbe_info_block = [S+$212-$1F4] (used reg = )
37557 96D4           8B46         06            mov	ax,6[bp]
37558 96D7           8986       FE0E            mov	-$1F2[bp],ax
37559                                           !BCC_EOS
37560                                           ! 8027         vbe_info_block.VideoModePtr_Off= DI + 34;
37561                                           ! Debug: add int = const $22 to unsigned short DI = [S+$212+6] (used reg = )
37562 96DB           8B46         08            mov	ax,8[bp]
37563                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$212-$1F6] (used reg = )
37564 96DE           05                   0022  add	ax,*$22
37565 96E1           8986       FE0C            mov	-$1F4[bp],ax
37566                                           !BCC_EOS
37567                                           ! 8028         outw(0x01CE, 0xa);
37568                                           ! Debug: list int = const $A (used reg = )
37569 96E5           B8                   000A  mov	ax,*$A
37570 96E8           50                         push	ax
37571                                           ! Debug: list int = const $1CE (used reg = )
37572 96E9           B8                   01CE  mov	ax,#$1CE
37573 96EC           50                         push	ax
37574                                           ! Debug: func () void = outw+0 (used reg = )
37575 96ED           E8         E6F8            call	_outw
37576 96F0           83C4                   04  add	sp,*4
37577                                           !BCC_EOS
37578                                           ! 8029         vbe_info_block.TotalMemory = inw(0x01CF);
37579                                           ! Debug: list int = const $1CF (used reg = )
37580 96F3           B8                   01CF  mov	ax,#$1CF
37581 96F6           50                         push	ax
37582                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37583 96F7           E8         E6D3            call	_inw
37584 96FA           44                         inc	sp
37585 96FB           44                         inc	sp
37586                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$212-$1F2] (used reg = )
37587 96FC           8986       FE10            mov	-$1F0[bp],ax
37588                                           !BCC_EOS
37589                                           ! 8030         if (vbe2_info)
37590 9700           8B86       FDF8            mov	ax,-$208[bp]
37591 9704           85C0                       test	ax,ax
37592 9706           74           4B            je  	.2E3
37593                       00009708            .2E4:
37594                                           ! 8031         {
37595                                           ! 8032                 vbe_info_block.OemSoftwareRev = 0x0002;;
37596                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$212-$1F0] (used reg = )
37597 9708           B8                   0002  mov	ax,*2
37598 970B           8986       FE12            mov	-$1EE[bp],ax
37599                                           !BCC_EOS
37600                                           !BCC_EOS
37601                                           ! 8033                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
37602                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1EC] (used reg = )
37603 970F           B8                   C000  mov	ax,#$C000
37604 9712           8986       FE16            mov	-$1EA[bp],ax
37605                                           !BCC_EOS
37606                                           ! 8034                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
37607                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$212-$1EE] (used reg = )
37608 9716           BB                   906C  mov	bx,#_vbebios_vendor_name
37609 9719           899E       FE14            mov	-$1EC[bp],bx
37610                                           !BCC_EOS
37611                                           ! 8035                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
37612                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E8] (used reg = )
37613 971D           B8                   C000  mov	ax,#$C000
37614 9720           8986       FE1A            mov	-$1E6[bp],ax
37615                                           !BCC_EOS
37616                                           ! 8036                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
37617                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$212-$1EA] (used reg = )
37618 9724           BB                   9084  mov	bx,#_vbebios_product_name
37619 9727           899E       FE18            mov	-$1E8[bp],bx
37620                                           !BCC_EOS
37621                                           ! 8037                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
37622                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E4] (used reg = )
37623 972B           B8                   C000  mov	ax,#$C000
37624 972E           8986       FE1E            mov	-$1E2[bp],ax
37625                                           !BCC_EOS
37626                                           ! 8038                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
37627                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$212-$1E6] (used reg = )
37628 9732           BB                   909D  mov	bx,#_vbebios_product_revision
37629 9735           899E       FE1C            mov	-$1E4[bp],bx
37630                                           !BCC_EOS
37631                                           ! 8039                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
37632                                           ! Debug: list int = const $200 (used reg = )
37633 9739           B8                   0200  mov	ax,#$200
37634 973C           50                         push	ax
37635                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
37636 973D           8D9E       FDFE            lea	bx,-$202[bp]
37637 9741           53                         push	bx
37638                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
37639 9742           FF76         FE            push	-2[bp]
37640                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
37641 9745           FF76         08            push	8[bp]
37642                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
37643 9748           FF76         06            push	6[bp]
37644                                           ! Debug: func () void = memcpyb+0 (used reg = )
37645 974B           E8         E5BE            call	_memcpyb
37646 974E           83C4                   0A  add	sp,*$A
37647                                           !BCC_EOS
37648                                           ! 8040         }
37649                                           ! 8041         else
37650                                           ! 8042         {
37651 9751           EB           18            jmp .2E5
37652                       00009753            .2E3:
37653                                           ! 8043                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
37654                                           ! Debug: list int = const $100 (used reg = )
37655 9753           B8                   0100  mov	ax,#$100
37656 9756           50                         push	ax
37657                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
37658 9757           8D9E       FDFE            lea	bx,-$202[bp]
37659 975B           53                         push	bx
37660                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
37661 975C           FF76         FE            push	-2[bp]
37662                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
37663 975F           FF76         08            push	8[bp]
37664                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
37665 9762           FF76         06            push	6[bp]
37666                                           ! Debug: func () void = memcpyb+0 (used reg = )
37667 9765           E8         E5A4            call	_memcpyb
37668 9768           83C4                   0A  add	sp,*$A
37669                                           !BCC_EOS
37670                                           ! 8044         }
37671                                           ! 8045         do
37672                       0000976B            .2E5:
37673                                           ! 8046         {
37674                       0000976B            .2E8:
37675                                           ! 8047                 size_64k = (Bit16u)((Bit32u)cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel) >> 19;
37676 976B           8B9E       FDF0            mov	bx,-$210[bp]
37677                                           ! Debug: cast unsigned long = const 0 to unsigned char = [bx+$1B] (used reg = )
37678 976F           8A47         1B            mov	al,$1B[bx]
37679 9772           30E4                       xor	ah,ah
37680 9774           31DB                       xor	bx,bx
37681 9776           53                         push	bx
37682 9777           50                         push	ax
37683 9778           8B9E       FDF0            mov	bx,-$210[bp]
37684                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
37685 977C           8B47         14            mov	ax,$14[bx]
37686 977F           31DB                       xor	bx,bx
37687 9781           53                         push	bx
37688 9782           50                         push	ax
37689 9783           8B9E       FDF0            mov	bx,-$210[bp]
37690                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
37691 9787           8B47         14            mov	ax,$14[bx]
37692 978A           31DB                       xor	bx,bx
37693                                           ! Debug: mul unsigned long (temp) = [S+$21A-$21A] to unsigned long = bx+0 (used reg = )
37694 978C           8DBE       FDE8            lea	di,-$218[bp]
37695 9790           E8         FE29            call	lmulul
37696 9793           83C4                   04  add	sp,*4
37697                                           ! Debug: mul unsigned long (temp) = [S+$216-$216] to unsigned long = bx+0 (used reg = )
37698 9796           8DBE       FDEC            lea	di,-$214[bp]
37699 979A           E8         FE1F            call	lmulul
37700 979D           83C4                   04  add	sp,*4
37701                                           ! Debug: cast unsigned short = const 0 to unsigned long = bx+0 (used reg = )
37702                                           ! Debug: sr int = const $13 to unsigned short = ax+0 (used reg = )
37703 97A0           31C0                       xor	ax,ax
37704                                           ! Debug: eq unsigned int = ax+0 to unsigned short size_64k = [S+$212-$210] (used reg = )
37705 97A2           8986       FDF2            mov	-$20E[bp],ax
37706                                           !BCC_EOS
37707                                           ! 8048                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
37708                                           ! 8049                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
37709                                           ! 8050                     (size_64k <= vbe_info_block.TotalMemory)) {
37710                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
37711 97A6           E8         FB3E            call	_dispi_get_max_xres
37712 97A9           8B9E       FDF0            mov	bx,-$210[bp]
37713                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
37714 97AD           3B47         14            cmp	ax,$14[bx]
37715 97B0           72           61            jb  	.2E9
37716                       000097B2            .2EC:
37717                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
37718 97B2           E8         FB54            call	_dispi_get_max_bpp
37719 97B5           8B9E       FDF0            mov	bx,-$210[bp]
37720                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
37721 97B9           50                         push	ax
37722 97BA           8A47         1B            mov	al,$1B[bx]
37723 97BD           30E4                       xor	ah,ah
37724 97BF           3B86       FDEE            cmp	ax,-$212[bp]
37725 97C3           8DA6       FDF0            lea	sp,-$210[bp]
37726 97C7           77           4A            ja  	.2E9
37727                       000097C9            .2EB:
37728                                           ! Debug: le unsigned short vbe_info_block = [S+$212-$1F2] to unsigned short size_64k = [S+$212-$210] (used reg = )
37729 97C9           8B86       FDF2            mov	ax,-$20E[bp]
37730 97CD           3B86       FE10            cmp	ax,-$1F0[bp]
37731 97D1           77           40            ja  	.2E9
37732                       000097D3            .2EA:
37733                                           ! 8051                   printf("VBE found mode %x => %x\n", cur_info->mode,cur_mode);
37734                                           ! Debug: list unsigned short cur_mode = [S+$212-$20C] (used reg = )
37735 97D3           FFB6       FDF6            push	-$20A[bp]
37736 97D7           8B9E       FDF0            mov	bx,-$210[bp]
37737                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37738 97DB           FF37                       push	[bx]
37739                                           ! Debug: list * char = .2ED+0 (used reg = )
37740 97DD           BB                   A07A  mov	bx,#.2ED
37741 97E0           53                         push	bx
37742                                           ! Debug: func () void = printf+0 (used reg = )
37743 97E1           E8         E633            call	_printf
37744 97E4           83C4                   06  add	sp,*6
37745                                           !BCC_EOS
37746                                           ! 8052                   write_word(ES, DI + cur_ptr, cur_info->mode);
37747 97E7           8B9E       FDF0            mov	bx,-$210[bp]
37748                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37749 97EB           FF37                       push	[bx]
37750                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
37751 97ED           8B46         08            mov	ax,8[bp]
37752 97F0           0386       FDF4            add	ax,-$20C[bp]
37753                                           ! Debug: list unsigned int = ax+0 (used reg = )
37754 97F4           50                         push	ax
37755                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37756 97F5           FF76         06            push	6[bp]
37757                                           ! Debug: func () void = write_word+0 (used reg = )
37758 97F8           E8         E5AF            call	_write_word
37759 97FB           83C4                   06  add	sp,*6
37760                                           !BCC_EOS
37761                                           ! 8053                   cur_mode++;
37762                                           ! Debug: postinc unsigned short cur_mode = [S+$212-$20C] (used reg = )
37763 97FE           8B86       FDF6            mov	ax,-$20A[bp]
37764 9802           40                         inc	ax
37765 9803           8986       FDF6            mov	-$20A[bp],ax
37766                                           !BCC_EOS
37767                                           ! 8054                   cur_ptr+=2;
37768                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$212-$20E] (used reg = )
37769 9807           8B86       FDF4            mov	ax,-$20C[bp]
37770 980B           40                         inc	ax
37771 980C           40                         inc	ax
37772 980D           8986       FDF4            mov	-$20C[bp],ax
37773                                           !BCC_EOS
37774                                           ! 8055                 } else {
37775 9811           EB           21            jmp .2EE
37776                       00009813            .2E9:
37777                                           ! 8056                   printf("VBE mode %x (xres=%x / bpp=%02x) not supported \n", cur_info->mode,cur_info->info.XResolution,cur_info->info.BitsPerPixel);
37778 9813           8B9E       FDF0            mov	bx,-$210[bp]
37779                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
37780 9817           8A47         1B            mov	al,$1B[bx]
37781 981A           30E4                       xor	ah,ah
37782 981C           50                         push	ax
37783 981D           8B9E       FDF0            mov	bx,-$210[bp]
37784                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
37785 9821           FF77         14            push	$14[bx]
37786 9824           8B9E       FDF0            mov	bx,-$210[bp]
37787                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37788 9828           FF37                       push	[bx]
37789                                           ! Debug: list * char = .2EF+0 (used reg = )
37790 982A           BB                   A049  mov	bx,#.2EF
37791 982D           53                         push	bx
37792                                           ! Debug: func () void = printf+0 (used reg = )
37793 982E           E8         E5E6            call	_printf
37794 9831           83C4                   08  add	sp,*8
37795                                           !BCC_EOS
37796                                           ! 8057                 }
37797                                           ! 8058                 cur_info++;
37798                       00009834            .2EE:
37799                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
37800 9834           8B9E       FDF0            mov	bx,-$210[bp]
37801 9838           83C3                   44  add	bx,*$44
37802 983B           899E       FDF0            mov	-$210[bp],bx
37803                                           !BCC_EOS
37804                                           ! 8059         } while (cur_info->mode != 0xFFFF);
37805                       0000983F            .2E7:
37806 983F           8B9E       FDF0            mov	bx,-$210[bp]
37807                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37808 9843           8B1F                       mov	bx,[bx]
37809 9845           81FB                 FFFF  cmp	bx,#$FFFF
37810 9849         0F85         FF1E            bne 	.2E8
37811                       0000984D            .2F0:
37812                                           !BCC_EOS
37813                                           ! 8060         write_word(ES, DI + cur_ptr, cur_info->mode);
37814                       0000984D            .2E6:
37815 984D           8B9E       FDF0            mov	bx,-$210[bp]
37816                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37817 9851           FF37                       push	[bx]
37818                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
37819 9853           8B46         08            mov	ax,8[bp]
37820 9856           0386       FDF4            add	ax,-$20C[bp]
37821                                           ! Debug: list unsigned int = ax+0 (used reg = )
37822 985A           50                         push	ax
37823                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37824 985B           FF76         06            push	6[bp]
37825                                           ! Debug: func () void = write_word+0 (used reg = )
37826 985E           E8         E549            call	_write_word
37827 9861           83C4                   06  add	sp,*6
37828                                           !BCC_EOS
37829                                           ! 8061         result = 0x4f;
37830                                           ! Debug: eq int = const $4F to unsigned short result = [S+$212-$208] (used reg = )
37831 9864           B8                   004F  mov	ax,*$4F
37832 9867           8986       FDFA            mov	-$206[bp],ax
37833                                           !BCC_EOS
37834                                           ! 8062         write_word(ss, AX, result
37835                                           ! 8062 );
37836                                           ! Debug: list unsigned short result = [S+$212-$208] (used reg = )
37837 986B           FFB6       FDFA            push	-$206[bp]
37838                                           ! Debug: list * unsigned short AX = [S+$214+2] (used reg = )
37839 986F           FF76         04            push	4[bp]
37840                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
37841 9872           FF76         FE            push	-2[bp]
37842                                           ! Debug: func () void = write_word+0 (used reg = )
37843 9875           E8         E532            call	_write_word
37844 9878           83C4                   06  add	sp,*6
37845                                           !BCC_EOS
37846                                           ! 8063 }
37847 987B           89EC                       mov	sp,bp
37848 987D           5D                         pop	bp
37849 987E           C3                         ret
37850                                           ! 8064 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
37851                                           ! Register BX used in function vbe_biosfn_return_controller_information
37852                                           ! 8065 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
37853                                           export	_vbe_biosfn_return_mode_information
37854                       0000987F            _vbe_biosfn_return_mode_information:
37855                                           !BCC_EOS
37856                                           !BCC_EOS
37857                                           !BCC_EOS
37858                                           !BCC_EOS
37859                                           ! 8066 {
37860                                           ! 8067         Bit16u result=0x0100;
37861 987F           55                         push	bp
37862 9880           89E5                       mov	bp,sp
37863 9882           4C                         dec	sp
37864 9883           4C                         dec	sp
37865                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
37866 9884           B8                   0100  mov	ax,#$100
37867 9887           8946         FE            mov	-2[bp],ax
37868                                           !BCC_EOS
37869                                           ! 8068         Bit16u ss=get_SS();
37870 988A           4C                         dec	sp
37871 988B           4C                         dec	sp
37872                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37873 988C           E8         E569            call	_get_SS
37874                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
37875 988F           8946         FC            mov	-4[bp],ax
37876                                           !BCC_EOS
37877                                           ! 8069         ModeInfoBlock info;
37878                                           !BCC_EOS
37879                                           ! 8070         ModeInfoListItem *cur_info;
37880                                           !BCC_EOS
37881                                           ! 8071         Boolean using_lfb;
37882                                           !BCC_EOS
37883                                           ! 8072         Bit16u lfb_addr;
37884                                           !BCC_EOS
37885                                           ! 8073         printf("VBE vbe_biosfn_return_mode_information ES%x DI%x CX%x\n",ES,DI,CX);
37886 9892           81C4                 FEFA  add	sp,#-$106
37887                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
37888 9896           FF76         06            push	6[bp]
37889                                           ! Debug: list unsigned short DI = [S+$10E+8] (used reg = )
37890 9899           FF76         0A            push	$A[bp]
37891                                           ! Debug: list unsigned short ES = [S+$110+6] (used reg = )
37892 989C           FF76         08            push	8[bp]
37893                                           ! Debug: list * char = .2F1+0 (used reg = )
37894 989F           BB                   A012  mov	bx,#.2F1
37895 98A2           53                         push	bx
37896                                           ! Debug: func () void = printf+0 (used reg = )
37897 98A3           E8         E571            call	_printf
37898 98A6           83C4                   08  add	sp,*8
37899                                           !BCC_EOS
37900                                           ! 8074         using_lfb=((CX & 0x4000) == 0x4000);
37901                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10C+4] (used reg = )
37902 98A9           8B46         06            mov	ax,6[bp]
37903 98AC           25                   4000  and	ax,#$4000
37904                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37905 98AF           3D                   4000  cmp	ax,#$4000
37906 98B2           75           04            jne	.2F2
37907 98B4           B0                     01  mov	al,*1
37908 98B6           EB           02            jmp	.2F3
37909                       000098B8            .2F2:
37910 98B8           30C0                       xor	al,al
37911                       000098BA            .2F3:
37912                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10C-$10A] (used reg = )
37913 98BA           30E4                       xor	ah,ah
37914 98BC           8986       FEF8            mov	-$108[bp],ax
37915                                           !BCC_EOS
37916                                           ! 8075         CX = (CX & 0x1ff);
37917                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10C+4] (used reg = )
37918 98C0           8B46         06            mov	ax,6[bp]
37919 98C3           25                   01FF  and	ax,#$1FF
37920                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10C+4] (used reg = )
37921 98C6           8946         06            mov	6[bp],ax
37922                                           !BCC_EOS
37923                                           ! 8076         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
37924                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10C-$108 (used reg = )
37925 98C9           8D9E       FEFA            lea	bx,-$106[bp]
37926 98CD           53                         push	bx
37927                                           ! Debug: list unsigned short using_lfb = [S+$10E-$10A] (used reg = )
37928 98CE           FFB6       FEF8            push	-$108[bp]
37929                                           ! Debug: list unsigned short CX = [S+$110+4] (used reg = )
37930 98D2           FF76         06            push	6[bp]
37931                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37932 98D5           E8         FC25            call	_mode_info_find_mode
37933 98D8           83C4                   06  add	sp,*6
37934                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
37935 98DB           8986       FEFA            mov	-$106[bp],ax
37936                                           !BCC_EOS
37937                                           ! 8077         if (cur_info != 0)
37938                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
37939 98DF           8B86       FEFA            mov	ax,-$106[bp]
37940 98E3           85C0                       test	ax,ax
37941 98E5         0F84         0099            beq 	.2F4
37942                       000098E9            .2F5:
37943                                           ! 8078         {
37944                                           ! 8079                 printf("VBE found mode %x\n",CX);
37945                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
37946 98E9           FF76         06            push	6[bp]
37947                                           ! Debug: list * char = .2F6+0 (used reg = )
37948 98EC           BB                   9FFF  mov	bx,#.2F6
37949 98EF           53                         push	bx
37950                                           ! Debug: func () void = printf+0 (used reg = )
37951 98F0           E8         E524            call	_printf
37952 98F3           83C4                   04  add	sp,*4
37953                                           !BCC_EOS
37954                                           ! 8080                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
37955                                           ! Debug: list int = const $100 (used reg = )
37956 98F6           B8                   0100  mov	ax,#$100
37957 98F9           50                         push	ax
37958                                           ! Debug: list int = const 0 (used reg = )
37959 98FA           31C0                       xor	ax,ax
37960 98FC           50                         push	ax
37961                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
37962 98FD           8D9E       FEFC            lea	bx,-$104[bp]
37963 9901           53                         push	bx
37964                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
37965 9902           FF76         FC            push	-4[bp]
37966                                           ! Debug: func () void = memsetb+0 (used reg = )
37967 9905           E8         E3BA            call	_memsetb
37968 9908           83C4                   08  add	sp,*8
37969                                           !BCC_EOS
37970                                           ! 8081                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
37971                                           ! Debug: list int = const $42 (used reg = )
37972 990B           B8                   0042  mov	ax,*$42
37973 990E           50                         push	ax
37974 990F           8B9E       FEFA            mov	bx,-$106[bp]
37975                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
37976                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
37977 9913           43                         inc	bx
37978 9914           43                         inc	bx
37979 9915           53                         push	bx
37980                                           ! Debug: list unsigned int = const $C000 (used reg = )
37981 9916           B8                   C000  mov	ax,#$C000
37982 9919           50                         push	ax
37983                                           ! Debug: list * struct ModeInfoBlock info = S+$112-$106 (used reg = )
37984 991A           8D9E       FEFC            lea	bx,-$104[bp]
37985 991E           53                         push	bx
37986                                           ! Debug: list unsigned short ss = [S+$114-6] (used reg = )
37987 991F           FF76         FC            push	-4[bp]
37988                                           ! Debug: func () void = memcpyb+0 (used reg = )
37989 9922           E8         E3E7            call	_memcpyb
37990 9925           83C4                   0A  add	sp,*$A
37991                                           !BCC_EOS
37992                                           ! 8082                 if (using_lfb) {
37993 9928           8B86       FEF8            mov	ax,-$108[bp]
37994 992C           85C0                       test	ax,ax
37995 992E           74           06            je  	.2F7
37996                       00009930            .2F8:
37997                                           ! 8083                   info.NumberOfBanks = 1;
37998                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10C-$EC] (used reg = )
37999 9930           B0                     01  mov	al,*1
38000 9932           8886       FF16            mov	-$EA[bp],al
38001                                           !BCC_EOS
38002                                           ! 8084                 }
38003                                           ! 8085                 lfb_addr = pci_get_lfb_addr(0x1234);
38004                       00009936            .2F7:
38005                                           ! Debug: list int = const $1234 (used reg = )
38006 9936           B8                   1234  mov	ax,#$1234
38007 9939           50                         push	ax
38008                                           ! Debug: func () int = pci_get_lfb_addr+0 (used reg = )
38009 993A           E8         E617            call	_pci_get_lfb_addr
38010 993D           44                         inc	sp
38011 993E           44                         inc	sp
38012                                           ! Debug: eq int = ax+0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
38013 993F           8986       FEF6            mov	-$10A[bp],ax
38014                                           !BCC_EOS
38015                                           ! 8086                 if (lfb_addr > 0) {
38016                                           ! Debug: gt int = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
38017 9943           8B86       FEF6            mov	ax,-$10A[bp]
38018 9947           85C0                       test	ax,ax
38019 9949           74           11            je  	.2F9
38020                       0000994B            .2FA:
38021                                           ! 8087                   info.PhysBasePtr = ((Bit32u)lfb_addr << 16);
38022                                           ! Debug: cast unsigned long = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
38023 994B           8B86       FEF6            mov	ax,-$10A[bp]
38024 994F           31DB                       xor	bx,bx
38025                                           ! Debug: sl int = const $10 to unsigned long = bx+0 (used reg = )
38026 9951           93                         xchg	bx,ax
38027 9952           31C0                       xor	ax,ax
38028                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10C-$DE] (used reg = )
38029 9954           8986       FF24            mov	-$DC[bp],ax
38030 9958           899E       FF26            mov	-$DA[bp],bx
38031                                           !BCC_EOS
38032                                           ! 8088                 }
38033                                           ! 8089                 if (info.WinAAttributes & 0x01) {
38034                       0000995C            .2F9:
38035                                           ! Debug: and int = const 1 to unsigned char info = [S+$10C-$104] (used reg = )
38036 995C           8A86       FEFE            mov	al,-$102[bp]
38037 9960           24                     01  and	al,*1
38038 9962           84C0                       test	al,al
38039 9964           74           14            je  	.2FB
38040                       00009966            .2FC:
38041                                           ! 8090                   info.WinFuncPtr = 0xC0000000UL;
38042                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10C-$FA] (used reg = )
38043 9966           31C0                       xor	ax,ax
38044 9968           BB                   C000  mov	bx,#$C000
38045 996B           8986       FF08            mov	-$F8[bp],ax
38046 996F           899E       FF0A            mov	-$F6[bp],bx
38047                                           !BCC_EOS
38048                                           ! 8091                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
38049                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
38050                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10C-$FA] (used reg = )
38051 9973           BB                   9367  mov	bx,#_dispi_set_bank_farcall
38052 9976           899E       FF08            mov	-$F8[bp],bx
38053                                           !BCC_EOS
38054                                           ! 8092                 }
38055                                           ! 8093                 result = 0x4f;
38056                       0000997A            .2FB:
38057                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
38058 997A           B8                   004F  mov	ax,*$4F
38059 997D           8946         FE            mov	-2[bp],ax
38060                                           !BCC_EOS
38061                                           ! 8094         }
38062                                           ! 8095         else
38063                                           ! 8096         {
38064 9980           EB           13            jmp .2FD
38065                       00009982            .2F4:
38066                                           ! 8097                 printf("VBE *NOT* found mode %x\n",CX);
38067                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
38068 9982           FF76         06            push	6[bp]
38069                                           ! Debug: list * char = .2FE+0 (used reg = )
38070 9985           BB                   9FE6  mov	bx,#.2FE
38071 9988           53                         push	bx
38072                                           ! Debug: func () void = printf+0 (used reg = )
38073 9989           E8         E48B            call	_printf
38074 998C           83C4                   04  add	sp,*4
38075                                           !BCC_EOS
38076                                           ! 8098                 result = 0x100;
38077                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10C-4] (used reg = )
38078 998F           B8                   0100  mov	ax,#$100
38079 9992           8946         FE            mov	-2[bp],ax
38080                                           !BCC_EOS
38081                                           ! 8099         }
38082                                           ! 8100         if (result == 0x4f)
38083                       00009995            .2FD:
38084                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
38085 9995           8B46         FE            mov	ax,-2[bp]
38086 9998           3D                   004F  cmp	ax,*$4F
38087 999B           75           18            jne 	.2FF
38088                       0000999D            .300:
38089                                           ! 8101         {
38090                                           ! 8102                 memcpyb(ES, DI, ss, &info, sizeof(info));
38091                                           ! Debug: list int = const $100 (used reg = )
38092 999D           B8                   0100  mov	ax,#$100
38093 99A0           50                         push	ax
38094                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
38095 99A1           8D9E       FEFC            lea	bx,-$104[bp]
38096 99A5           53                         push	bx
38097                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
38098 99A6           FF76         FC            push	-4[bp]
38099                                           ! Debug: list unsigned short DI = [S+$112+8] (used reg = )
38100 99A9           FF76         0A            push	$A[bp]
38101                                           ! Debug: list unsigned short ES = [S+$114+6] (used reg = )
38102 99AC           FF76         08            push	8[bp]
38103                                           ! Debug: func () void = memcpyb+0 (used reg = )
38104 99AF           E8         E35A            call	_memcpyb
38105 99B2           83C4                   0A  add	sp,*$A
38106                                           !BCC_EOS
38107                                           ! 8103         }
38108                                           ! 8104         write_word(ss, AX, result);
38109                       000099B5            .2FF:
38110                                           ! Debug: list unsigned short result = [S+$10C-4] (used reg = )
38111 99B5           FF76         FE            push	-2[bp]
38112                                           ! Debug: list * unsigned short AX = [S+$10E+2] (used reg = )
38113 99B8           FF76         04            push	4[bp]
38114                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
38115 99BB           FF76         FC            push	-4[bp]
38116                                           ! Debug: func () void = write_word+0 (used reg = )
38117 99BE           E8         E3E9            call	_write_word
38118 99C1           83C4                   06  add	sp,*6
38119                                           !BCC_EOS
38120                                           ! 8105 }
38121 99C4           89EC                       mov	sp,bp
38122 99C6           5D                         pop	bp
38123 99C7           C3                         ret
38124                                           ! 8106 void vbe_biosfn_set_mode(AX, BX, ES, DI)
38125                                           ! Register BX used in function vbe_biosfn_return_mode_information
38126                                           ! 8107 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
38127                                           export	_vbe_biosfn_set_mode
38128                       000099C8            _vbe_biosfn_set_mode:
38129                                           !BCC_EOS
38130                                           !BCC_EOS
38131                                           !BCC_EOS
38132                                           !BCC_EOS
38133                                           ! 8108 {
38134                                           ! 8109         Bit16u ss = get_SS();
38135 99C8           55                         push	bp
38136 99C9           89E5                       mov	bp,sp
38137 99CB           4C                         dec	sp
38138 99CC           4C                         dec	sp
38139                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38140 99CD           E8         E428            call	_get_SS
38141                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38142 99D0           8946         FE            mov	-2[bp],ax
38143                                           !BCC_EOS
38144                                           ! 8110         Bit16u result;
38145                                           !BCC_EOS
38146                                           ! 8111         ModeInfoListItem *cur_info;
38147                                           !BCC_EOS
38148                                           ! 8112         Boolean using_lfb;
38149                                           !BCC_EOS
38150                                           ! 8113         Bit8u no_clear;
38151                                           !BCC_EOS
38152                                           ! 8114         Bit8u lfb_flag;
38153                                           !BCC_EOS
38154                                           ! 8115         using_lfb=((BX & 0x4000) == 0x4000);
38155 99D3           83C4                   F8  add	sp,*-8
38156                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
38157 99D6           8B46         06            mov	ax,6[bp]
38158 99D9           25                   4000  and	ax,#$4000
38159                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
38160 99DC           3D                   4000  cmp	ax,#$4000
38161 99DF           75           04            jne	.301
38162 99E1           B0                     01  mov	al,*1
38163 99E3           EB           02            jmp	.302
38164                       000099E5            .301:
38165 99E5           30C0                       xor	al,al
38166                       000099E7            .302:
38167                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
38168 99E7           30E4                       xor	ah,ah
38169 99E9           8946         F8            mov	-8[bp],ax
38170                                           !BCC_EOS
38171                                           ! 8116         lfb_flag=using_lfb?0x40:0;
38172 99EC           8B46         F8            mov	ax,-8[bp]
38173 99EF           85C0                       test	ax,ax
38174 99F1           74           04            je  	.303
38175                       000099F3            .304:
38176 99F3           B0                     40  mov	al,*$40
38177 99F5           EB           02            jmp .305
38178                       000099F7            .303:
38179 99F7           30C0                       xor	al,al
38180                       000099F9            .305:
38181                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
38182 99F9           8846         F6            mov	-$A[bp],al
38183                                           !BCC_EOS
38184                                           ! 8117         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
38185                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
38186 99FC           8B46         06            mov	ax,6[bp]
38187 99FF           25                   8000  and	ax,#$8000
38188                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
38189 9A02           3D                   8000  cmp	ax,#$8000
38190 9A05           75           04            jne 	.306
38191                       00009A07            .307:
38192 9A07           B0                     80  mov	al,#$80
38193 9A09           EB           02            jmp .308
38194                       00009A0B            .306:
38195 9A0B           30C0                       xor	al,al
38196                       00009A0D            .308:
38197                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
38198 9A0D           8846         F7            mov	-9[bp],al
38199                                           !BCC_EOS
38200                                           ! 8118         BX = (BX & 0x1ff);
38201                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
38202 9A10           8B46         06            mov	ax,6[bp]
38203 9A13           25                   01FF  and	ax,#$1FF
38204                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
38205 9A16           8946         06            mov	6[bp],ax
38206                                           !BCC_EOS
38207                                           ! 8119         if (BX<0x0100)
38208                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
38209 9A19           8B46         06            mov	ax,6[bp]
38210 9A1C           3D                   0100  cmp	ax,#$100
38211 9A1F           73           23            jae 	.309
38212                       00009A21            .30A:
38213                                           ! 8120         {
38214                                           ! 8121                 Bit8u mode;
38215                                           !BCC_EOS
38216                                           ! 8122                 dispi_set_enable(0x00);
38217 9A21           4C                         dec	sp
38218 9A22           4C                         dec	sp
38219                                           ! Debug: list int = const 0 (used reg = )
38220 9A23           31C0                       xor	ax,ax
38221 9A25           50                         push	ax
38222                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38223 9A26           E8         F902            call	_dispi_set_enable
38224 9A29           44                         inc	sp
38225 9A2A           44                         inc	sp
38226                                           !BCC_EOS
38227                                           ! 8123                 mode=(BX
38228                                           ! 8123  & 0xff);
38229                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
38230 9A2B           8A46         06            mov	al,6[bp]
38231                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
38232 9A2E           8846         F5            mov	-$B[bp],al
38233                                           !BCC_EOS
38234                                           ! 8124                 biosfn_set_video_mode(mode);
38235                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
38236 9A31           8A46         F5            mov	al,-$B[bp]
38237 9A34           30E4                       xor	ah,ah
38238 9A36           50                         push	ax
38239                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
38240 9A37           E8         A1B4            call	_biosfn_set_video_mode
38241 9A3A           44                         inc	sp
38242 9A3B           44                         inc	sp
38243                                           !BCC_EOS
38244                                           ! 8125                 result = 0x4f;
38245                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
38246 9A3C           B8                   004F  mov	ax,*$4F
38247 9A3F           8946         FC            mov	-4[bp],ax
38248                                           !BCC_EOS
38249                                           ! 8126         }
38250 9A42           44                         inc	sp
38251 9A43           44                         inc	sp
38252                                           ! 8127         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
38253                       00009A44            .309:
38254                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
38255 9A44           8D5E         FA            lea	bx,-6[bp]
38256 9A47           53                         push	bx
38257                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
38258 9A48           FF76         F8            push	-8[bp]
38259                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
38260 9A4B           FF76         06            push	6[bp]
38261                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
38262 9A4E           E8         FAAC            call	_mode_info_find_mode
38263 9A51           83C4                   06  add	sp,*6
38264                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
38265 9A54           8946         FA            mov	-6[bp],ax
38266                                           !BCC_EOS
38267                                           ! 8128         if (cur_info != 0)
38268                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
38269 9A57           8B46         FA            mov	ax,-6[bp]
38270 9A5A           85C0                       test	ax,ax
38271 9A5C         0F84         00B5            beq 	.30B
38272                       00009A60            .30C:
38273                                           ! 8129         {
38274                                           ! 8130                 printf("VBE found mode %x, setting:\n", BX);
38275                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
38276 9A60           FF76         06            push	6[bp]
38277                                           ! Debug: list * char = .30D+0 (used reg = )
38278 9A63           BB                   9FC9  mov	bx,#.30D
38279 9A66           53                         push	bx
38280                                           ! Debug: func () void = printf+0 (used reg = )
38281 9A67           E8         E3AD            call	_printf
38282 9A6A           83C4                   04  add	sp,*4
38283                                           !BCC_EOS
38284                                           ! 8131                 printf("\txres%x yres%x bpp%x\n",
38285                                           ! 8132                         cur_info->info.XResolution,
38286                                           ! 8133                         cur_info->info.YResolution,
38287                                           ! 8134                         cur_info->info.BitsPerPixel);
38288 9A6D           8B5E         FA            mov	bx,-6[bp]
38289                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
38290 9A70           8A47         1B            mov	al,$1B[bx]
38291 9A73           30E4                       xor	ah,ah
38292 9A75           50                         push	ax
38293 9A76           8B5E         FA            mov	bx,-6[bp]
38294                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
38295 9A79           FF77         16            push	$16[bx]
38296 9A7C           8B5E         FA            mov	bx,-6[bp]
38297                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
38298 9A7F           FF77         14            push	$14[bx]
38299                                           ! Debug: list * char = .30E+0 (used reg = )
38300 9A82           BB                   9FB3  mov	bx,#.30E
38301 9A85           53                         push	bx
38302                                           ! Debug: func () void = printf+0 (used reg = )
38303 9A86           E8         E38E            call	_printf
38304 9A89           83C4                   08  add	sp,*8
38305                                           !BCC_EOS
38306                                           ! 8135                 dispi_set_enable(0x00);
38307                                           ! Debug: list int = const 0 (used reg = )
38308 9A8C           31C0                       xor	ax,ax
38309 9A8E           50                         push	ax
38310                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38311 9A8F           E8         F899            call	_dispi_set_enable
38312 9A92           44                         inc	sp
38313 9A93           44                         inc	sp
38314                                           !BCC_EOS
38315                                           ! 8136                 if (cur_info->info.BitsPerPixel == 4)
38316 9A94           8B5E         FA            mov	bx,-6[bp]
38317                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
38318 9A97           8A47         1B            mov	al,$1B[bx]
38319 9A9A           3C                     04  cmp	al,*4
38320 9A9C           75           09            jne 	.30F
38321                       00009A9E            .310:
38322                                           ! 8137                 {
38323                                           ! 8138                   biosfn_set_video_mode(0x6a);
38324                                           ! Debug: list int = const $6A (used reg = )
38325 9A9E           B8                   006A  mov	ax,*$6A
38326 9AA1           50                         push	ax
38327                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
38328 9AA2           E8         A149            call	_biosfn_set_video_mode
38329 9AA5           44                         inc	sp
38330 9AA6           44                         inc	sp
38331                                           !BCC_EOS
38332                                           ! 8139                 }
38333                                           ! 8140                 dispi_set_bpp(cur_info->info.BitsPerPixel);
38334                       00009AA7            .30F:
38335 9AA7           8B5E         FA            mov	bx,-6[bp]
38336                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
38337 9AAA           8A47         1B            mov	al,$1B[bx]
38338 9AAD           30E4                       xor	ah,ah
38339 9AAF           50                         push	ax
38340                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
38341 9AB0           E8         F7FD            call	_dispi_set_bpp
38342 9AB3           44                         inc	sp
38343 9AB4           44                         inc	sp
38344                                           !BCC_EOS
38345                                           ! 8141                 dispi_set_xres(cur_info->info.XResolution);
38346 9AB5           8B5E         FA            mov	bx,-6[bp]
38347                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
38348 9AB8           FF77         14            push	$14[bx]
38349                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
38350 9ABB           E8         F7BD            call	_dispi_set_xres
38351 9ABE           44                         inc	sp
38352 9ABF           44                         inc	sp
38353                                           !BCC_EOS
38354                                           ! 8142                 dispi_set_yres(cur_info->info.YResolution);
38355 9AC0           8B5E         FA            mov	bx,-6[bp]
38356                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
38357 9AC3           FF77         16            push	$16[bx]
38358                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
38359 9AC6           E8         F7C9            call	_dispi_set_yres
38360 9AC9           44                         inc	sp
38361 9ACA           44                         inc	sp
38362                                           !BCC_EOS
38363                                           ! 8143                 dispi_set_bank(0);
38364                                           ! Debug: list int = const 0 (used reg = )
38365 9ACB           31C0                       xor	ax,ax
38366 9ACD           50                         push	ax
38367                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
38368 9ACE           E8         F878            call	_dispi_set_bank
38369 9AD1           44                         inc	sp
38370 9AD2           44                         inc	sp
38371                                           !BCC_EOS
38372                                           ! 8144                 dispi_set_enable(0x01 | no_clear | lfb_flag);
38373                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
38374                                           ! Debug: expression subtree swapping
38375 9AD3           8A46         F7            mov	al,-9[bp]
38376 9AD6           0C                     01  or	al,*1
38377                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
38378 9AD8           0A46         F6            or	al,-$A[bp]
38379                                           ! Debug: list unsigned char = al+0 (used reg = )
38380 9ADB           30E4                       xor	ah,ah
38381 9ADD           50                         push	ax
38382                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38383 9ADE           E8         F84A            call	_dispi_set_enable
38384 9AE1           44                         inc	sp
38385 9AE2           44                         inc	sp
38386                                           !BCC_EOS
38387                                           ! 8145                 vga_compat_setup();
38388                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
38389 9AE3           E8         F940            call	_vga_compat_setup
38390                                           !BCC_EOS
38391                                           ! 8146                 write_word(0x40,0xBA,BX);
38392                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
38393 9AE6           FF76         06            push	6[bp]
38394                                           ! Debug: list int = const $BA (used reg = )
38395 9AE9           B8                   00BA  mov	ax,#$BA
38396 9AEC           50                         push	ax
38397                                           ! Debug: list int = const $40 (used reg = )
38398 9AED           B8                   0040  mov	ax,*$40
38399 9AF0           50                         push	ax
38400                                           ! Debug: func () void = write_word+0 (used reg = )
38401 9AF1           E8         E2B6            call	_write_word
38402 9AF4           83C4                   06  add	sp,*6
38403                                           !BCC_EOS
38404                                           ! 8147                 write_byte(0x40,0x87,(0x60 | no_clear));
38405                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
38406                                           ! Debug: expression subtree swapping
38407 9AF7           8A46         F7            mov	al,-9[bp]
38408 9AFA           0C                     60  or	al,*$60
38409                                           ! Debug: list unsigned char = al+0 (used reg = )
38410 9AFC           30E4                       xor	ah,ah
38411 9AFE           50                         push	ax
38412                                           ! Debug: list int = const $87 (used reg = )
38413 9AFF           B8                   0087  mov	ax,#$87
38414 9B02           50                         push	ax
38415                                           ! Debug: list int = const $40 (used reg = )
38416 9B03           B8                   0040  mov	ax,*$40
38417 9B06           50                         push	ax
38418                                           ! Debug: func () void = write_byte+0 (used reg = )
38419 9B07           E8         E288            call	_write_byte
38420 9B0A           83C4                   06  add	sp,*6
38421                                           !BCC_EOS
38422                                           ! 8148                 result = 0x4f;
38423                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
38424 9B0D           B8                   004F  mov	ax,*$4F
38425 9B10           8946         FC            mov	-4[bp],ax
38426                                           !BCC_EOS
38427                                           ! 8149         }
38428                                           ! 8150         else
38429                                           ! 8151         {
38430 9B13           EB           21            jmp .311
38431                       00009B15            .30B:
38432                                           ! 8152                 printf("VBE *NOT* found mode %x\n" , BX);
38433                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
38434 9B15           FF76         06            push	6[bp]
38435                                           ! Debug: list * char = .312+0 (used reg = )
38436 9B18           BB                   9F9A  mov	bx,#.312
38437 9B1B           53                         push	bx
38438                                           ! Debug: func () void = printf+0 (used reg = )
38439 9B1C           E8         E2F8            call	_printf
38440 9B1F           83C4                   04  add	sp,*4
38441                                           !BCC_EOS
38442                                           ! 8153                 result = 0x100;
38443                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
38444 9B22           B8                   0100  mov	ax,#$100
38445 9B25           8946         FC            mov	-4[bp],ax
38446                                           !BCC_EOS
38447                                           ! 8154                 if (BX == 3)
38448                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
38449 9B28           8B46         06            mov	ax,6[bp]
38450 9B2B           3D                   0003  cmp	ax,*3
38451 9B2E           75           06            jne 	.313
38452                       00009B30            .314:
38453                                           ! 8155                         result = 0x4f;
38454                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
38455 9B30           B8                   004F  mov	ax,*$4F
38456 9B33           8946         FC            mov	-4[bp],ax
38457                                           !BCC_EOS
38458                                           ! 8156         }
38459                       00009B36            .313:
38460                                           ! 8157         write_word(ss, AX, result);
38461                       00009B36            .311:
38462                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
38463 9B36           FF76         FC            push	-4[bp]
38464                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
38465 9B39           FF76         04            push	4[bp]
38466                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
38467 9B3C           FF76         FE            push	-2[bp]
38468                                           ! Debug: func () void = write_word+0 (used reg = )
38469 9B3F           E8         E268            call	_write_word
38470 9B42           83C4                   06  add	sp,*6
38471                                           !BCC_EOS
38472                                           ! 8158 }
38473 9B45           89EC                       mov	sp,bp
38474 9B47           5D                         pop	bp
38475 9B48           C3                         ret
38476                                           ! 8159 #asm
38477                                           !BCC_ASM
38478                       00000008            _vbe_biosfn_set_mode.DI	set	8
38479                       00000006            _vbe_biosfn_set_mode.ES	set	6
38480                       00000002            _vbe_biosfn_set_mode.AX	set	2
38481                       00000004            _vbe_biosfn_set_mode.BX	set	4
38482                       00009B49            vbe_biosfn_return_current_mode:
38483 9B49           1E                           push ds
38484 9B4A           B8                   0040    mov ax, # 0x40
38485 9B4D           8ED8                         mov ds, ax
38486 9B4F           E8         F7E9              call dispi_get_enable
38487 9B52           25                   0001    and ax, # 0x01
38488 9B55           74           09              jz no_vbe_mode
38489 9B57           BB                   00BA    mov bx, # 0xBA
38490 9B5A           8B07                         mov ax, [bx]
38491 9B5C           89C3                         mov bx, ax
38492 9B5E           75           09              jnz vbe_03_ok
38493                       00009B60            no_vbe_mode:
38494 9B60           BB                   0049    mov bx, # 0x49
38495 9B63           8A07                         mov al, [bx]
38496 9B65           88C3                         mov bl, al
38497 9B67           30FF                         xor bh, bh
38498                       00009B69            vbe_03_ok:
38499 9B69           B8                   004F    mov ax, #0x004f
38500 9B6C           1F                           pop ds
38501 9B6D           C3                           ret
38502                                           ! 8180 endasm
38503                                           !BCC_ENDASM
38504                                           ! 8181 Bit16u vbe_biosfn_read_video_state_size()
38505                                           ! Register BX used in function vbe_biosfn_set_mode
38506                                           ! 8182 {
38507                                           export	_vbe_biosfn_read_video_state_size
38508                       00009B6E            _vbe_biosfn_read_video_state_size:
38509                                           ! 8183     return 9 * 2;
38510 9B6E           55                         push	bp
38511 9B6F           89E5                       mov	bp,sp
38512 9B71           B8                   0012  mov	ax,*$12
38513 9B74           5D                         pop	bp
38514 9B75           C3                         ret
38515                                           !BCC_EOS
38516                                           ! 8184 }
38517                                           ! 8185 void vbe_biosfn_save_video_state(ES, BX)
38518                                           ! 8186      Bit16u ES; Bit16u BX;
38519                                           export	_vbe_biosfn_save_video_state
38520                       00009B76            _vbe_biosfn_save_video_state:
38521                                           !BCC_EOS
38522                                           !BCC_EOS
38523                                           ! 8187 {
38524                                           ! 8188     Bit16u enable, i;
38525                                           !BCC_EOS
38526                                           ! 8189     outw(0x01CE,0x4);
38527 9B76           55                         push	bp
38528 9B77           89E5                       mov	bp,sp
38529 9B79           83C4                   FC  add	sp,*-4
38530                                           ! Debug: list int = const 4 (used reg = )
38531 9B7C           B8                   0004  mov	ax,*4
38532 9B7F           50                         push	ax
38533                                           ! Debug: list int = const $1CE (used reg = )
38534 9B80           B8                   01CE  mov	ax,#$1CE
38535 9B83           50                         push	ax
38536                                           ! Debug: func () void = outw+0 (used reg = )
38537 9B84           E8         E261            call	_outw
38538 9B87           83C4                   04  add	sp,*4
38539                                           !BCC_EOS
38540                                           ! 8190     enable = inw(0x01CF);
38541                                           ! Debug: list int = const $1CF (used reg = )
38542 9B8A           B8                   01CF  mov	ax,#$1CF
38543 9B8D           50                         push	ax
38544                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38545 9B8E           E8         E23C            call	_inw
38546 9B91           44                         inc	sp
38547 9B92           44                         inc	sp
38548                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38549 9B93           8946         FE            mov	-2[bp],ax
38550                                           !BCC_EOS
38551                                           ! 8191     write_word(ES, BX, enable);
38552                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38553 9B96           FF76         FE            push	-2[bp]
38554                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38555 9B99           FF76         06            push	6[bp]
38556                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38557 9B9C           FF76         04            push	4[bp]
38558                                           ! Debug: func () void = write_word+0 (used reg = )
38559 9B9F           E8         E208            call	_write_word
38560 9BA2           83C4                   06  add	sp,*6
38561                                           !BCC_EOS
38562                                           ! 8192     BX += 2;
38563                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38564 9BA5           8B46         06            mov	ax,6[bp]
38565 9BA8           40                         inc	ax
38566 9BA9           40                         inc	ax
38567 9BAA           8946         06            mov	6[bp],ax
38568                                           !BCC_EOS
38569                                           ! 8193     if (!(enable & 0x01))
38570                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38571 9BAD           8A46         FE            mov	al,-2[bp]
38572 9BB0           24                     01  and	al,*1
38573 9BB2           84C0                       test	al,al
38574 9BB4           75           04            jne 	.315
38575                       00009BB6            .316:
38576                                           ! 8194         return;
38577 9BB6           89EC                       mov	sp,bp
38578 9BB8           5D                         pop	bp
38579 9BB9           C3                         ret
38580                                           !BCC_EOS
38581                                           ! 8195     for(i = 0x1; i <= 0x9; i++) {
38582                       00009BBA            .315:
38583                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
38584 9BBA           B8                   0001  mov	ax,*1
38585 9BBD           8946         FC            mov	-4[bp],ax
38586                                           !BCC_EOS
38587                                           !BCC_EOS
38588 9BC0           EB           3A            jmp .319
38589                       00009BC2            .31A:
38590                                           ! 8196         if (i != 0x4) {
38591                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
38592 9BC2           8B46         FC            mov	ax,-4[bp]
38593 9BC5           3D                   0004  cmp	ax,*4
38594 9BC8           74           2B            je  	.31B
38595                       00009BCA            .31C:
38596                                           ! 8197             outw(0x01CE, i);
38597                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38598 9BCA           FF76         FC            push	-4[bp]
38599                                           ! Debug: list int = const $1CE (used reg = )
38600 9BCD           B8                   01CE  mov	ax,#$1CE
38601 9BD0           50                         push	ax
38602                                           ! Debug: func () void = outw+0 (used reg = )
38603 9BD1           E8         E214            call	_outw
38604 9BD4           83C4                   04  add	sp,*4
38605                                           !BCC_EOS
38606                                           ! 8198             write_word(E
38607                                           ! 8198 S, BX, inw(0x01CF));
38608                                           ! Debug: list int = const $1CF (used reg = )
38609 9BD7           B8                   01CF  mov	ax,#$1CF
38610 9BDA           50                         push	ax
38611                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38612 9BDB           E8         E1EF            call	_inw
38613 9BDE           44                         inc	sp
38614 9BDF           44                         inc	sp
38615                                           ! Debug: list unsigned short = ax+0 (used reg = )
38616 9BE0           50                         push	ax
38617                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38618 9BE1           FF76         06            push	6[bp]
38619                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38620 9BE4           FF76         04            push	4[bp]
38621                                           ! Debug: func () void = write_word+0 (used reg = )
38622 9BE7           E8         E1C0            call	_write_word
38623 9BEA           83C4                   06  add	sp,*6
38624                                           !BCC_EOS
38625                                           ! 8199             BX += 2;
38626                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38627 9BED           8B46         06            mov	ax,6[bp]
38628 9BF0           40                         inc	ax
38629 9BF1           40                         inc	ax
38630 9BF2           8946         06            mov	6[bp],ax
38631                                           !BCC_EOS
38632                                           ! 8200         }
38633                                           ! 8201     }
38634                       00009BF5            .31B:
38635                                           ! 8202 }
38636                       00009BF5            .318:
38637                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38638 9BF5           8B46         FC            mov	ax,-4[bp]
38639 9BF8           40                         inc	ax
38640 9BF9           8946         FC            mov	-4[bp],ax
38641                       00009BFC            .319:
38642                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38643 9BFC           8B46         FC            mov	ax,-4[bp]
38644 9BFF           3D                   0009  cmp	ax,*9
38645 9C02           76           BE            jbe	.31A
38646                       00009C04            .31D:
38647                       00009C04            .317:
38648 9C04           89EC                       mov	sp,bp
38649 9C06           5D                         pop	bp
38650 9C07           C3                         ret
38651                                           ! 8203 void vbe_biosfn_restore_video_state(ES, BX)
38652                                           ! 8204      Bit16u ES; Bit16u BX;
38653                                           export	_vbe_biosfn_restore_video_state
38654                       00009C08            _vbe_biosfn_restore_video_state:
38655                                           !BCC_EOS
38656                                           !BCC_EOS
38657                                           ! 8205 {
38658                                           ! 8206     Bit16u enable, i;
38659                                           !BCC_EOS
38660                                           ! 8207     enable = read_word(ES, BX);
38661 9C08           55                         push	bp
38662 9C09           89E5                       mov	bp,sp
38663 9C0B           83C4                   FC  add	sp,*-4
38664                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38665 9C0E           FF76         06            push	6[bp]
38666                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38667 9C11           FF76         04            push	4[bp]
38668                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38669 9C14           E8         E168            call	_read_word
38670 9C17           83C4                   04  add	sp,*4
38671                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38672 9C1A           8946         FE            mov	-2[bp],ax
38673                                           !BCC_EOS
38674                                           ! 8208     BX += 2;
38675                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38676 9C1D           8B46         06            mov	ax,6[bp]
38677 9C20           40                         inc	ax
38678 9C21           40                         inc	ax
38679 9C22           8946         06            mov	6[bp],ax
38680                                           !BCC_EOS
38681                                           ! 8209     if (!(enable & 0x01)) {
38682                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38683 9C25           8A46         FE            mov	al,-2[bp]
38684 9C28           24                     01  and	al,*1
38685 9C2A           84C0                       test	al,al
38686 9C2C           75           1E            jne 	.31E
38687                       00009C2E            .31F:
38688                                           ! 8210         outw(0x01CE,0x4);
38689                                           ! Debug: list int = const 4 (used reg = )
38690 9C2E           B8                   0004  mov	ax,*4
38691 9C31           50                         push	ax
38692                                           ! Debug: list int = const $1CE (used reg = )
38693 9C32           B8                   01CE  mov	ax,#$1CE
38694 9C35           50                         push	ax
38695                                           ! Debug: func () void = outw+0 (used reg = )
38696 9C36           E8         E1AF            call	_outw
38697 9C39           83C4                   04  add	sp,*4
38698                                           !BCC_EOS
38699                                           ! 8211         outw(0x01CF, enable);
38700                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38701 9C3C           FF76         FE            push	-2[bp]
38702                                           ! Debug: list int = const $1CF (used reg = )
38703 9C3F           B8                   01CF  mov	ax,#$1CF
38704 9C42           50                         push	ax
38705                                           ! Debug: func () void = outw+0 (used reg = )
38706 9C43           E8         E1A2            call	_outw
38707 9C46           83C4                   04  add	sp,*4
38708                                           !BCC_EOS
38709                                           ! 8212     } else {
38710 9C49           E9         00E5            br 	.320
38711                       00009C4C            .31E:
38712                                           ! 8213         outw(0x01CE, 0x1);
38713                                           ! Debug: list int = const 1 (used reg = )
38714 9C4C           B8                   0001  mov	ax,*1
38715 9C4F           50                         push	ax
38716                                           ! Debug: list int = const $1CE (used reg = )
38717 9C50           B8                   01CE  mov	ax,#$1CE
38718 9C53           50                         push	ax
38719                                           ! Debug: func () void = outw+0 (used reg = )
38720 9C54           E8         E191            call	_outw
38721 9C57           83C4                   04  add	sp,*4
38722                                           !BCC_EOS
38723                                           ! 8214         outw(0x01CF, read_word(ES, BX));
38724                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38725 9C5A           FF76         06            push	6[bp]
38726                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38727 9C5D           FF76         04            push	4[bp]
38728                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38729 9C60           E8         E11C            call	_read_word
38730 9C63           83C4                   04  add	sp,*4
38731                                           ! Debug: list unsigned short = ax+0 (used reg = )
38732 9C66           50                         push	ax
38733                                           ! Debug: list int = const $1CF (used reg = )
38734 9C67           B8                   01CF  mov	ax,#$1CF
38735 9C6A           50                         push	ax
38736                                           ! Debug: func () void = outw+0 (used reg = )
38737 9C6B           E8         E17A            call	_outw
38738 9C6E           83C4                   04  add	sp,*4
38739                                           !BCC_EOS
38740                                           ! 8215         BX += 2;
38741                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38742 9C71           8B46         06            mov	ax,6[bp]
38743 9C74           40                         inc	ax
38744 9C75           40                         inc	ax
38745 9C76           8946         06            mov	6[bp],ax
38746                                           !BCC_EOS
38747                                           ! 8216         outw(0x01CE, 0x2);
38748                                           ! Debug: list int = const 2 (used reg = )
38749 9C79           B8                   0002  mov	ax,*2
38750 9C7C           50                         push	ax
38751                                           ! Debug: list int = const $1CE (used reg = )
38752 9C7D           B8                   01CE  mov	ax,#$1CE
38753 9C80           50                         push	ax
38754                                           ! Debug: func () void = outw+0 (used reg = )
38755 9C81           E8         E164            call	_outw
38756 9C84           83C4                   04  add	sp,*4
38757                                           !BCC_EOS
38758                                           ! 8217         outw(0x01CF, read_word(ES, BX));
38759                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38760 9C87           FF76         06            push	6[bp]
38761                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38762 9C8A           FF76         04            push	4[bp]
38763                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38764 9C8D           E8         E0EF            call	_read_word
38765 9C90           83C4                   04  add	sp,*4
38766                                           ! Debug: list unsigned short = ax+0 (used reg = )
38767 9C93           50                         push	ax
38768                                           ! Debug: list int = const $1CF (used reg = )
38769 9C94           B8                   01CF  mov	ax,#$1CF
38770 9C97           50                         push	ax
38771                                           ! Debug: func () void = outw+0 (used reg = )
38772 9C98           E8         E14D            call	_outw
38773 9C9B           83C4                   04  add	sp,*4
38774                                           !BCC_EOS
38775                                           ! 8218         BX += 2;
38776                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38777 9C9E           8B46         06            mov	ax,6[bp]
38778 9CA1           40                         inc	ax
38779 9CA2           40                         inc	ax
38780 9CA3           8946         06            mov	6[bp],ax
38781                                           !BCC_EOS
38782                                           ! 8219         outw(0x01CE, 0x3);
38783                                           ! Debug: list int = const 3 (used reg = )
38784 9CA6           B8                   0003  mov	ax,*3
38785 9CA9           50                         push	ax
38786                                           ! Debug: list int = const $1CE (used reg = )
38787 9CAA           B8                   01CE  mov	ax,#$1CE
38788 9CAD           50                         push	ax
38789                                           ! Debug: func () void = outw+0 (used reg = )
38790 9CAE           E8         E137            call	_outw
38791 9CB1           83C4                   04  add	sp,*4
38792                                           !BCC_EOS
38793                                           ! 8220         outw(0x01CF, read_word(ES, BX));
38794                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38795 9CB4           FF76         06            push	6[bp]
38796                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38797 9CB7           FF76         04            push	4[bp]
38798                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38799 9CBA           E8         E0C2            call	_read_word
38800 9CBD           83C4                   04  add	sp,*4
38801                                           ! Debug: list unsigned short = ax+0 (used reg = )
38802 9CC0           50                         push	ax
38803                                           ! Debug: list int = const $1CF (used reg = )
38804 9CC1           B8                   01CF  mov	ax,#$1CF
38805 9CC4           50                         push	ax
38806                                           ! Debug: func () void = outw+0 (used reg = )
38807 9CC5           E8         E120            call	_outw
38808 9CC8           83C4                   04  add	sp,*4
38809                                           !BCC_EOS
38810                                           ! 8221         BX += 2;
38811                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38812 9CCB           8B46         06            mov	ax,6[bp]
38813 9CCE           40                         inc	ax
38814 9CCF           40                         inc	ax
38815 9CD0           8946         06            mov	6[bp],ax
38816                                           !BCC_EOS
38817                                           ! 8222         outw(0x01CE,0x4);
38818                                           ! Debug: list int = const 4 (used reg = )
38819 9CD3           B8                   0004  mov	ax,*4
38820 9CD6           50                         push	ax
38821                                           ! Debug: list int = const $1CE (used reg = )
38822 9CD7           B8                   01CE  mov	ax,#$1CE
38823 9CDA           50                         push	ax
38824                                           ! Debug: func () void = outw+0 (used reg = )
38825 9CDB           E8         E10A            call	_outw
38826 9CDE           83C4                   04  add	sp,*4
38827                                           !BCC_EOS
38828                                           ! 8223         outw(0x01CF, enable);
38829                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38830 9CE1           FF76         FE            push	-2[bp]
38831                                           ! Debug: list int = const $1CF (used reg = )
38832 9CE4           B8                   01CF  mov	ax,#$1CF
38833 9CE7           50                         push	ax
38834                                           ! Debug: func () void = outw+0 (used reg = )
38835 9CE8           E8         E0FD            call	_outw
38836 9CEB           83C4                   04  add	sp,*4
38837                                           !BCC_EOS
38838                                           ! 8224         for(i = 0x5; i <= 0x9; i++) {
38839                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
38840 9CEE           B8                   0005  mov	ax,*5
38841 9CF1           8946         FC            mov	-4[bp],ax
38842                                           !BCC_EOS
38843                                           !BCC_EOS
38844 9CF4           EB           33            jmp .323
38845                       00009CF6            .324:
38846                                           ! 8225             outw(0x01CE, i);
38847                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38848 9CF6           FF76         FC            push	-4[bp]
38849                                           ! Debug: list int = const $1CE (used reg = )
38850 9CF9           B8                   01CE  mov	ax,#$1CE
38851 9CFC           50                         push	ax
38852                                           ! Debug: func () void = outw+0 (used reg = )
38853 9CFD           E8         E0E8            call	_outw
38854 9D00           83C4                   04  add	sp,*4
38855                                           !BCC_EOS
38856                                           ! 8226             outw(0x01CF, read_word(ES, BX));
38857                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38858 9D03           FF76         06            push	6[bp]
38859                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38860 9D06           FF76         04            push	4[bp]
38861                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38862 9D09           E8         E073            call	_read_word
38863 9D0C           83C4                   04  add	sp,*4
38864                                           ! Debug: list unsigned short = ax+0 (used reg = )
38865 9D0F           50                         push	ax
38866                                           ! Debug: list int = const $1CF (used reg = )
38867 9D10           B8                   01CF  mov	ax,#$1CF
38868 9D13           50                         push	ax
38869                                           ! Debug: func () void = outw+0 (used reg = )
38870 9D14           E8         E0D1            call	_outw
38871 9D17           83C4                   04  add	sp,*4
38872                                           !BCC_EOS
38873                                           ! 8227             BX += 2;
38874                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38875 9D1A           8B46         06            mov	ax,6[bp]
38876 9D1D           40                         inc	ax
38877 9D1E           40                         inc	ax
38878 9D1F           8946         06            mov	6[bp],ax
38879                                           !BCC_EOS
38880                                           ! 8228         }
38881                                           ! 8229     }
38882                       00009D22            .322:
38883                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38884 9D22           8B46         FC            mov	ax,-4[bp]
38885 9D25           40                         inc	ax
38886 9D26           8946         FC            mov	-4[bp],ax
38887                       00009D29            .323:
38888                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38889 9D29           8B46         FC            mov	ax,-4[bp]
38890 9D2C           3D                   0009  cmp	ax,*9
38891 9D2F           76           C5            jbe	.324
38892                       00009D31            .325:
38893                       00009D31            .321:
38894                                           ! 8230 }
38895                       00009D31            .320:
38896 9D31           89EC                       mov	sp,bp
38897 9D33           5D                         pop	bp
38898 9D34           C3                         ret
38899                                           ! 8231 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
38900                                           ! 8232 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
38901                                           export	_vbe_biosfn_save_restore_state
38902                       00009D35            _vbe_biosfn_save_restore_state:
38903                                           !BCC_EOS
38904                                           !BCC_EOS
38905                                           !BCC_EOS
38906                                           !BCC_EOS
38907                                           !BCC_EOS
38908                                           ! 8233 {
38909                                           ! 8234     Bit16u ss=get_SS();
38910 9D35           55                         push	bp
38911 9D36           89E5                       mov	bp,sp
38912 9D38           4C                         dec	sp
38913 9D39           4C                         dec	sp
38914                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38915 9D3A           E8         E0BB            call	_get_SS
38916                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38917 9D3D           8946         FE            mov	-2[bp],ax
38918                                           !BCC_EOS
38919                                           ! 8235     Bit16u result, val;
38920                                           !BCC_EOS
38921                                           ! 8236     result = 0x4f;
38922 9D40           83C4                   FC  add	sp,*-4
38923                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
38924 9D43           B8                   004F  mov	ax,*$4F
38925 9D46           8946         FC            mov	-4[bp],ax
38926                                           !BCC_EOS
38927                                           ! 8237     switch(( DX & 0x00ff )) {
38928                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
38929 9D49           8A46         08            mov	al,8[bp]
38930 9D4C           E9         00D0            br 	.328
38931                                           ! 8238     case 0x00:
38932                                           ! 8239         val = biosfn_read_video_state_size2(CX);
38933                       00009D4F            .329:
38934                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
38935 9D4F           FF76         06            push	6[bp]
38936                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
38937 9D52           E8         D318            call	_biosfn_read_video_state_size2
38938 9D55           44                         inc	sp
38939 9D56           44                         inc	sp
38940                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38941 9D57           8946         FA            mov	-6[bp],ax
38942                                           !BCC_EOS
38943                                           ! 8240         printf("VGA state size=%x\n", val);
38944                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38945 9D5A           FF76         FA            push	-6[bp]
38946                                           ! Debug: list * char = .32A+0 (used reg = )
38947 9D5D           BB                   9F87  mov	bx,#.32A
38948 9D60           53                         push	bx
38949                                           ! Debug: func () void = printf+0 (used reg = )
38950 9D61           E8         E0B3            call	_printf
38951 9D64           83C4                   04  add	sp,*4
38952                                           !BCC_EOS
38953                                           ! 8241         if (CX & 8)
38954                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38955 9D67           8A46         06            mov	al,6[bp]
38956 9D6A           24                     08  and	al,*8
38957 9D6C           84C0                       test	al,al
38958 9D6E           74           09            je  	.32B
38959                       00009D70            .32C:
38960                                           ! 8242             val += vbe_biosfn_read_video_state_size();
38961                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
38962 9D70           E8         FDFB            call	_vbe_biosfn_read_video_state_size
38963                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38964 9D73           0346         FA            add	ax,-6[bp]
38965 9D76           8946         FA            mov	-6[bp],ax
38966                                           !BCC_EOS
38967                                           ! 8243         write_word(ss, BX, val);
38968                       00009D79            .32B:
38969                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38970 9D79           FF76         FA            push	-6[bp]
38971                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
38972 9D7C           FF76         0C            push	$C[bp]
38973                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38974 9D7F           FF76         FE            push	-2[bp]
38975                                           ! Debug: func () void = write_word+0 (used reg = )
38976 9D82           E8         E025            call	_write_word
38977 9D85           83C4                   06  add	sp,*6
38978                                           !BCC_EOS
38979                                           ! 8244         break;
38980 9D88           E9         00A6            br 	.326
38981                                           !BCC_EOS
38982                                           ! 8245     case 0x01:
38983                                           ! 8246         val = read_word(ss, BX);
38984                       00009D8B            .32D:
38985                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38986 9D8B           FF76         0C            push	$C[bp]
38987                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38988 9D8E           FF76         FE            push	-2[bp]
38989                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38990 9D91           E8         DFEB            call	_read_word
38991 9D94           83C4                   04  add	sp,*4
38992                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38993 9D97           8946         FA            mov	-6[bp],ax
38994                                           !BCC_EOS
38995                                           ! 8247         val = biosfn_save_video_state(CX, ES, val);
38996                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38997 9D9A           FF76         FA            push	-6[bp]
38998                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38999 9D9D           FF76         0A            push	$A[bp]
39000                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
39001 9DA0           FF76         06            push	6[bp]
39002                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
39003 9DA3           E8         D332            call	_biosfn_save_video_state
39004 9DA6           83C4                   06  add	sp,*6
39005                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
39006 9DA9           8946         FA            mov	-6[bp],ax
39007                                           !BCC_EOS
39008                                           ! 8248         printf("VGA save_state offset=%x\n", val);
39009                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39010 9DAC           FF76         FA            push	-6[bp]
39011                                           ! Debug: list * char = .32E+0 (used reg = )
39012 9DAF           BB                   9F6D  mov	bx,#.32E
39013 9DB2           53                         push	bx
39014                                           ! Debug: func () void = printf+0 (used reg = )
39015 9DB3           E8         E061            call	_printf
39016 9DB6           83C4                   04  add	sp,*4
39017                                           !BCC_EOS
39018                                           ! 8249         if (CX & 8)
39019                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
39020 9DB9           8A46         06            mov	al,6[bp]
39021 9DBC           24                     08  and	al,*8
39022 9DBE           84C0                       test	al,al
39023 9DC0           74           0C            je  	.32F
39024                       00009DC2            .330:
39025                                           ! 8250             vbe_biosfn_save_video_state(ES, val);
39026                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39027 9DC2           FF76         FA            push	-6[bp]
39028                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
39029 9DC5           FF76         0A            push	$A[bp]
39030                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
39031 9DC8           E8         FDAB            call	_vbe_biosfn_save_video_state
39032 9DCB           83C4                   04  add	sp,*4
39033                                           !BCC_EOS
39034                                           ! 8251         break;
39035                       00009DCE            .32F:
39036 9DCE           EB           61            jmp .326
39037                                           !BCC_EOS
39038                                           ! 8252     case 0x02:
39039                                           ! 8253         val = read_word(ss, BX);
39040                       00009DD0            .331:
39041                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
39042 9DD0           FF76         0C            push	$C[bp]
39043                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
39044 9DD3           FF76         FE            push	-2[bp]
39045                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39046 9DD6           E8         DFA6            call	_read_word
39047 9DD9           83C4                   04  add	sp,*4
39048                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
39049 9DDC           8946         FA            mov	-6[bp],ax
39050                                           !BCC_EOS
39051                                           ! 8254         val = biosfn_restore_video_state(CX, ES, val);
39052                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39053 9DDF           FF76         FA            push	-6[bp]
39054                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
39055 9DE2           FF76         0A            push	$A[bp]
39056                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
39057 9DE5           FF76         06            push	6[bp]
39058                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
39059 9DE8           E8         D8B7            call	_biosfn_restore_video_state
39060 9DEB           83C4                   06  add	sp,*6
39061                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
39062 9DEE           8946         FA            mov	-6[bp],ax
39063                                           !BCC_EOS
39064                                           ! 8255         printf("VGA restore_state offset=%x\n", val);
39065                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39066 9DF1           FF76         FA            push	-6[bp]
39067                                           ! Debug: list * char = .332+0 (used reg = )
39068 9DF4           BB                   9F50  mov	bx,#.332
39069 9DF7           53                         push	bx
39070                                           ! Debug: func () void = printf+0 (used reg = )
39071 9DF8           E8         E01C            call	_printf
39072 9DFB           83C4                   04  add	sp,*4
39073                                           !BCC_EOS
39074                                           ! 8256         if (CX & 8)
39075                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
39076 9DFE           8A46         06            mov	al,6[bp]
39077 9E01           24                     08  and	al,*8
39078 9E03           84C0                       test	al,al
39079 9E05           74           0C            je  	.333
39080                       00009E07            .334:
39081                                           ! 8257             vbe_biosfn_restore_video_state(ES, val);
39082                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39083 9E07           FF76         FA            push	-6[bp]
39084                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
39085 9E0A           FF76         0A            push	$A[bp]
39086                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
39087 9E0D           E8         FDF8            call	_vbe_biosfn_restore_video_state
39088 9E10           83C4                   04  add	sp,*4
39089                                           !BCC_EOS
39090                                           ! 8258         break;
39091                       00009E13            .333:
39092 9E13           EB           1C            jmp .326
39093                                           !BCC_EOS
39094                                           ! 8259     default:
39095                                           ! 8260         result = 0x100;
39096                       00009E15            .335:
39097                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
39098 9E15           B8                   0100  mov	ax,#$100
39099 9E18           8946         FC            mov	-4[bp],ax
39100                                           !BCC_EOS
39101                                           ! 8261         break;
39102 9E1B           EB           14            jmp .326
39103                                           !BCC_EOS
39104                                           ! 8262     }
39105                                           ! 8263     write_word(ss, AX, result);
39106 9E1D           EB           12            jmp .326
39107                       00009E1F            .328:
39108 9E1F           2C                     00  sub	al,*0
39109 9E21         0F84         FF2A            beq 	.329
39110 9E25           2C                     01  sub	al,*1
39111 9E27         0F84         FF60            beq 	.32D
39112 9E2B           2C                     01  sub	al,*1
39113 9E2D           74           A1            je 	.331
39114 9E2F           EB           E4            jmp	.335
39115                       00009E31            .326:
39116                       FFFFFFF8            ..FFF4	=	-8
39117                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
39118 9E31           FF76         FC            push	-4[bp]
39119                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
39120 9E34           FF76         04            push	4[bp]
39121                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
39122 9E37           FF76         FE            push	-2[bp]
39123                                           ! Debug: func () void = write_word+0 (used reg = )
39124 9E3A           E8         DF6D            call	_write_word
39125 9E3D           83C4                   06  add	sp,*6
39126                                           !BCC_EOS
39127                                           ! 8264 }
39128 9E40           89EC                       mov	sp,bp
39129 9E42           5D                         pop	bp
39130 9E43           C3                         ret
39131                                           ! 8265 #asm
39132                                           !BCC_ASM
39133                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39134                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39135                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39136                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39137                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39138                       00009E44            vbe_biosfn_display_window_control:
39139 9E44           80FB                   00    cmp bl, #0x00
39140 9E47           75           24              jne vbe_05_failed
39141 9E49           80FF                   01    cmp bh, #0x01
39142 9E4C           74           16              je get_display_window
39143 9E4E           72           04              jb set_display_window
39144 9E50           B8                   0100    mov ax, #0x0100
39145 9E53           C3                           ret
39146                       00009E54            set_display_window:
39147 9E54           89D0                         mov ax, dx
39148 9E56           E8         F4F0              call _dispi_set_bank
39149 9E59           E8         F4FD              call dispi_get_bank
39150 9E5C           39D0                         cmp ax, dx
39151 9E5E           75           0D              jne vbe_05_failed
39152 9E60           B8                   004F    mov ax, #0x004f
39153 9E63           C3                           ret
39154                       00009E64            get_display_window:
39155 9E64           E8         F4F2              call dispi_get_bank
39156 9E67           89C2                         mov dx, ax
39157 9E69           B8                   004F    mov ax, #0x004f
39158 9E6C           C3                           ret
39159                       00009E6D            vbe_05_failed:
39160 9E6D           B8                   014F    mov ax, #0x014f
39161 9E70           C3                           ret
39162                                           ! 8290 endasm
39163                                           !BCC_ENDASM
39164                                           ! 8291 #asm
39165                                           !BCC_ASM
39166                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39167                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39168                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39169                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39170                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39171                       00009E71            vbe_biosfn_set_get_logical_scan_line_length:
39172 9E71           89C8                         mov ax, cx
39173 9E73           80FB                   01    cmp bl, #0x01
39174 9E76           74           24              je get_logical_scan_line_length
39175 9E78           80FB                   02    cmp bl, #0x02
39176 9E7B           74           06              je set_logical_scan_line_bytes
39177 9E7D           72           1A              jb set_logical_scan_line_pixels
39178 9E7F           B8                   0100    mov ax, #0x0100
39179 9E82           C3                           ret
39180                       00009E83            set_logical_scan_line_bytes:
39181 9E83           50                           push ax
39182 9E84           E8         F447              call dispi_get_bpp
39183 9E87           30FF                         xor bh, bh
39184 9E89           88E3                         mov bl, ah
39185 9E8B           08DB                         or bl, bl
39186 9E8D           75           05              jnz no_4bpp_1
39187 9E8F           C1E0                   03    shl ax, #3
39188 9E92           B3                     01    mov bl, #1
39189                       00009E94            no_4bpp_1:
39190 9E94           31D2                         xor dx, dx
39191 9E96           58                           pop ax
39192 9E97           F7F3                         div bx
39193                       00009E99            set_logical_scan_line_pixels:
39194 9E99           E8         F55B              call dispi_set_virt_width
39195                       00009E9C            get_logical_scan_line_length:
39196 9E9C           E8         F42F              call dispi_get_bpp
39197 9E9F           30FF                         xor bh, bh
39198 9EA1           88E3                         mov bl, ah
39199 9EA3           E8         F564              call dispi_get_virt_width
39200 9EA6           89C1                         mov cx, ax
39201 9EA8           08DB                         or bl, bl
39202 9EAA           75           05              jnz no_4bpp_2
39203 9EAC           C1E8                   03    shr ax, #3
39204 9EAF           B3                     01    mov bl, #1
39205                       00009EB1            no_4bpp_2:
39206 9EB1           F7E3                         mul bx
39207 9EB3           89C3                         mov bx, ax
39208 9EB5           E8         F560              call dispi_get_virt_height
39209 9EB8           89C2                         mov dx, ax
39210 9EBA           B8                   004F    mov ax, #0x004f
39211 9EBD           C3                           ret
39212                                           ! 8333 endasm
39213                                           !BCC_ENDASM
39214                                           ! 8334 #asm
39215                                           !BCC_ASM
39216                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39217                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39218                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39219                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39220                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39221                       00009EBE            vbe_biosfn_set_get_display_start:
39222 9EBE           80FB                   80    cmp bl, #0x80
39223 9EC1           74           0B              je set_display_start
39224 9EC3           80FB                   01    cmp bl, #0x01
39225 9EC6           74           14              je get_display_start
39226 9EC8           72           04              jb set_display_start
39227 9ECA           B8                   0100    mov ax, #0x0100
39228 9ECD           C3                           ret
39229                       00009ECE            set_display_start:
39230 9ECE           89C8                         mov ax, cx
39231 9ED0           E8         F4CB              call dispi_set_x_offset
39232 9ED3           89D0                         mov ax, dx
39233 9ED5           E8         F4E4              call dispi_set_y_offset
39234 9ED8           B8                   004F    mov ax, #0x004f
39235 9EDB           C3                           ret
39236                       00009EDC            get_display_start:
39237 9EDC           E8         F4CF              call dispi_get_x_offset
39238 9EDF           89C1                         mov cx, ax
39239 9EE1           E8         F4E8              call dispi_get_y_offset
39240 9EE4           89C2                         mov dx, ax
39241 9EE6           30FF                         xor bh, bh
39242 9EE8           B8                   004F    mov ax, #0x004f
39243 9EEB           C3                           ret
39244                                           ! 8358 endasm
39245                                           !BCC_ENDASM
39246                                           ! 8359 #asm
39247                                           !BCC_ASM
39248                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39249                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39250                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39251                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39252                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39253                       00009EEC            vbe_biosfn_set_get_dac_palette_format:
39254 9EEC           80FB                   01    cmp bl, #0x01
39255 9EEF           74           1E              je get_dac_palette_format
39256 9EF1           72           04              jb set_dac_palette_format
39257 9EF3           B8                   0100    mov ax, #0x0100
39258 9EF6           C3                           ret
39259                       00009EF7            set_dac_palette_format:
39260 9EF7           E8         F441              call dispi_get_enable
39261 9EFA           80FF                   06    cmp bh, #0x06
39262 9EFD           74           0A              je set_normal_dac
39263 9EFF           80FF                   08    cmp bh, #0x08
39264 9F02           75           1B              jne vbe_08_unsupported
39265 9F04           0D                   0020    or ax, # 0x20
39266 9F07           75           03              jnz set_dac_mode
39267                       00009F09            set_normal_dac:
39268 9F09           25                   FFDF    and ax, #~ 0x20
39269                       00009F0C            set_dac_mode:
39270 9F0C           E8         F41C              call _dispi_set_enable
39271                       00009F0F            get_dac_palette_format:
39272 9F0F           B7                     06    mov bh, #0x06
39273 9F11           E8         F427              call dispi_get_enable
39274 9F14           25                   0020    and ax, # 0x20
39275 9F17           74           02              jz vbe_08_ok
39276 9F19           B7                     08    mov bh, #0x08
39277                       00009F1B            vbe_08_ok:
39278 9F1B           B8                   004F    mov ax, #0x004f
39279 9F1E           C3                           ret
39280                       00009F1F            vbe_08_unsupported:
39281 9F1F           B8                   014F    mov ax, #0x014f
39282 9F22           C3                           ret
39283                                           ! 8390 endasm
39284                                           !BCC_ENDASM
39285                                           ! 8391 void vbe_biosfn_set_get_palette_data(AX)
39286                                           ! Register BX used in function vbe_biosfn_save_restore_state
39287                                           ! 8392 {
39288                                           export	_vbe_biosfn_set_get_palette_data
39289                       00009F23            _vbe_biosfn_set_get_palette_data:
39290                                           ! 8393 }
39291 9F23           C3                         ret
39292                                           ! 8394 #asm
39293                                           !BCC_ASM
39294                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39295                       00009F24            vbe_biosfn_return_protected_mode_interface:
39296 9F24           84DB                         test bl, bl
39297 9F26           75           11              jnz _fail
39298 9F28           BF                   C000    mov di, #0xc000
39299 9F2B           8EC7                         mov es, di
39300 9F2D           BF                   915C    mov di, # vesa_pm_start
39301 9F30           B9                   925D    mov cx, # vesa_pm_end
39302 9F33           29F9                         sub cx, di
39303 9F35           B8                   004F    mov ax, #0x004f
39304 9F38           C3                           ret
39305                       00009F39            _fail:
39306 9F39           B8                   014F    mov ax, #0x014f
39307 9F3C           C3                           ret
39308                                           ! 8408 endasm
39309                                           !BCC_ENDASM
39310                                           ! 8409 #asm
39311                                           !BCC_ASM
39312                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39313                                           ;; DATA_SEG_DEFS_HERE
39314                                           ! 8411 endasm
39315                                           !BCC_ENDASM
39316                                           ! 8412 #asm
39317                                           !BCC_ASM
39318                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39319 9F3D                        76            .ascii "vgabios ends here"
39320 9F4E                        00            .byte 0x00
39321                       00009F4F            vgabios_end:
39322 9F4F                        CB            .byte 0xCB
39323                                           ;; BLOCK_STRINGS_BEGIN
39324                                           ! 8418 endasm
39325                                           !BCC_ENDASM
39326                                           ! 8419 
39327                                           
39328                       00009F50            .332:
39329                       00009F50            .336:
39330 9F50                        56            .ascii	"VGA restore_state offset=%x"
39331 9F6B                        0A            .byte	$A
39332 9F6C                        00            .byte	0
39333                       00009F6D            .32E:
39334                       00009F6D            .337:
39335 9F6D                        56            .ascii	"VGA save_state offset=%x"
39336 9F85                        0A            .byte	$A
39337 9F86                        00            .byte	0
39338                       00009F87            .32A:
39339                       00009F87            .338:
39340 9F87                        56            .ascii	"VGA state size=%x"
39341 9F98                        0A            .byte	$A
39342 9F99                        00            .byte	0
39343                       00009F9A            .312:
39344                       00009F9A            .339:
39345 9F9A                        56            .ascii	"VBE *NOT* found mode %x"
39346 9FB1                        0A            .byte	$A
39347 9FB2                        00            .byte	0
39348                       00009FB3            .30E:
39349                       00009FB3            .33A:
39350 9FB3                        09            .byte	9
39351 9FB4                        78            .ascii	"xres%x yres%x bpp%x"
39352 9FC7                        0A            .byte	$A
39353 9FC8                        00            .byte	0
39354                       00009FC9            .30D:
39355                       00009FC9            .33B:
39356 9FC9                        56            .ascii	"VBE found mode %x, setting:"
39357 9FE4                        0A            .byte	$A
39358 9FE5                        00            .byte	0
39359                       00009FE6            .2FE:
39360                       00009FE6            .33C:
39361 9FE6                        56            .ascii	"VBE *NOT* found mode %x"
39362 9FFD                        0A            .byte	$A
39363 9FFE                        00            .byte	0
39364                       00009FFF            .2F6:
39365                       00009FFF            .33D:
39366 9FFF                        56            .ascii	"VBE found mode %x"
39367 A010                        0A            .byte	$A
39368 A011                        00            .byte	0
39369                       0000A012            .2F1:
39370                       0000A012            .33E:
39371 A012                        56            .ascii	"VBE vbe_biosfn_return_mode_information E"
39372 A03A                        53            .ascii	"S%x DI%x CX%x"
39373 A047                        0A            .byte	$A
39374 A048                        00            .byte	0
39375                       0000A049            .2EF:
39376                       0000A049            .33F:
39377 A049                        56            .ascii	"VBE mode %x (xres=%x / bpp=%02x) not sup"
39378 A071                        70            .ascii	"ported "
39379 A078                        0A            .byte	$A
39380 A079                        00            .byte	0
39381                       0000A07A            .2ED:
39382                       0000A07A            .340:
39383 A07A                        56            .ascii	"VBE found mode %x => %x"
39384 A091                        0A            .byte	$A
39385 A092                        00            .byte	0
39386                       0000A093            .2E2:
39387                       0000A093            .341:
39388 A093                        56            .ascii	"VBE correct VESA/VBE2 signature found"
39389 A0B8                        0A            .byte	$A
39390 A0B9                        00            .byte	0
39391                       0000A0BA            .2D8:
39392                       0000A0BA            .342:
39393 A0BA                        56            .ascii	"VBE vbe_biosfn_return_vbe_info ES%x DI%x"
39394 A0E2                        20            .ascii	" AX%x"
39395 A0E7                        0A            .byte	$A
39396 A0E8                        00            .byte	0
39397                       0000A0E9            .2B0:
39398                       0000A0E9            .343:
39399 A0E9                        2D            .ascii	"--> Unknown int10"
39400 A0FA                        0A            .byte	$A
39401 A0FB                        00            .byte	0
39402                       0000A0FC            .2AF:
39403                       0000A0FC            .344:
39404 A0FC                        2D            .ascii	"--> Unimplemented"
39405 A10D                        0A            .byte	$A
39406 A10E                        00            .byte	0
39407                       0000A10F            .249:
39408                       0000A10F            .345:
39409 A10F                        47            .ascii	"Get font info BH(%02x) was discarded"
39410 A133                        0A            .byte	$A
39411 A134                        00            .byte	0
39412                       0000A135            .147:
39413                       0000A135            .346:
39414 A135                        53            .ascii	"Scroll in graphics mode "
39415 A14D                        00            .byte	0
39416                       0000A14E            .E2:
39417                       0000A14E            .347:
39418 A14E                        53            .ascii	"Scroll, address %04x (%04x %04x %02x)"
39419 A173                        0A            .byte	$A
39420 A174                        00            .byte	0
39421                       0000A175            .B7:
39422                       0000A175            .348:
39423 A175                        53            .ascii	"Set active page %02x address %04x"
39424 A196                        0A            .byte	$A
39425 A197                        00            .byte	0
39426                       0000A198            .5E:
39427                       0000A198            .349:
39428 A198                        6D            .ascii	"mode search %02x found line %02x"
39429 A1B8                        0A            .byte	$A
39430 A1B9                        00            .byte	0
39431                       0000A1BA            .3:
39432                       0000A1BA            .34A:
39433 A1BA                        76            .ascii	"vgabios call ah%02x al%02x bx%04x cx%04x"
39434 A1E2                        20            .ascii	" dx%04x"
39435 A1E9                        0A            .byte	$A
39436 A1EA                        00            .byte	0
39437 A1EB                                      .bss
39438                                           
39439                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3692 A   .10                         0 36BF A   
.100                        0 4D04 A   .101                        0 50EB A   
.102                        0 50EB A   .104                        0 50D7 A   
.105                        0 4D39 A   .106                        0 4D39 A   
.107                        0 4DCB A   .108                        0 4D76 A   
.109                        0 4D64 A   .10A                        0 4D52 A   
.10B                        0 4D4B A   .10C                        0 4D42 A   
.10D                        0 4EED A   .10E                        0 4E5E A   
.10F                        0 4DD4 A   .11                         0 36BF A   
.110                        0 4E5B A   .111                        0 4E4A A   
.112                        0 4E51 A   .113                        0 4DDE A   
.114                        0 4E22 A   .115                        0 4DFC A   
.116                        0 4DF5 A   .117                        0 4E4A A   
.118                        0 4E5B A   .119                        0 4EED A   
.11A                        0 4EED A   .11B                        0 4EDA A   
.11C                        0 4EE1 A   .11D                        0 4E69 A   
.11E                        0 4EA6 A   .11F                        0 4E80 A   
.12                         0 36BF A   .120                        0 4E79 A   
.121                        0 4ECE A   .122                        0 4EDA A   
.123                        0 4ED8 A   .124                        0 4EED A   
.125                        0 4EF0 A   .126                        0 4F83 A   
.127                        0 4F3E A   .128                        0 4F2C A   
.129                        0 4F1A A   .12A                        0 4F13 A   
.12B                        0 4F0C A   .12C                        0 50C7 A   
.12D                        0 4FA6 A   .12E                        0 4F8A A   
.12F                        0 5039 A   .13                         0 36CB A   
.130                        0 4FAF A   .131                        0 5036 A   
.132                        0 5025 A   .133                        0 502C A   
.134                        0 4FB9 A   .135                        0 4FFD A   
.136                        0 4FD7 A   .137                        0 4FD0 A   
.138                        0 5025 A   .139                        0 5036 A   
.13A                        0 50C7 A   .13B                        0 50C7 A   
.13C                        0 50B4 A   .13D                        0 50BB A   
.13E                        0 5043 A   .13F                        0 5080 A   
.14                         0 36FA A   .140                        0 505A A   
.141                        0 5053 A   .142                        0 50A8 A   
.143                        0 50B4 A   .144                        0 50B2 A   
.145                        0 50C7 A   .146                        0 50C9 A   
.147                        0 A135 A   .148                        0 5127 A   
.149                        0 5123 A   .14A                        0 51E6 A   
.14B                        0 5188 A   .14C                        0 51E9 A   
.14D                        0 521A A   .14F                        0 5210 A   
.15                         0 36EA A   .150                        0 51F8 A   
.151                        0 5200 A   .152                        0 5208 A   
.153                        0 5287 A   .154                        0 5277 A   
.155                        0 5295 A   .156                        0 534D A   
.157                        0 533C A   .158                        0 5343 A   
.159                        0 529D A   .15A                        0 533C A   
.15B                        0 532C A   .15C                        0 5333 A   
.15D                        0 52BA A   .15E                        0 531C A   
.15F                        0 5305 A   .16                         0 36FF A   
.160                        0 532C A   .161                        0 533C A   
.162                        0 534D A   .163                        0 555F A   
.164                        0 554F A   .165                        0 5556 A   
.166                        0 53A3 A   .167                        0 53C7 A   
.168                        0 53BE A   .169                        0 5488 A   
.16A                        0 53D5 A   .16B                        0 53F0 A   
.16C                        0 53DE A   .16D                        0 53F5 A   
.16E                        0 5472 A   .16F                        0 5464 A   
.17                         0 3716 A   .170                        0 546B A   
.171                        0 53FC A   .172                        0 545A A   
.173                        0 5413 A   .174                        0 543C A   
.175                        0 541C A   .176                        0 545A A   
.177                        0 5472 A   .178                        0 554F A   
.179                        0 554F A   .17A                        0 5546 A   
.17B                        0 548B A   .17C                        0 54A6 A   
.17D                        0 5494 A   .17E                        0 54AB A   
.17F                        0 552C A   .18                         0 372A A   
.180                        0 551E A   .181                        0 5525 A   
.182                        0 54B2 A   .183                        0 5514 A   
.184                        0 54C9 A   .185                        0 54F4 A   
.186                        0 54D2 A   .187                        0 5514 A   
.188                        0 552C A   .189                        0 554F A   
.18A                        0 555F A   .18B                        0 5633 A   
.18C                        0 5623 A   .18D                        0 562A A   
.18E                        0 55A9 A   .18F                        0 5623 A   
.19                         0 3743 A   .190                        0 5615 A   
.191                        0 561C A   .192                        0 55CF A   
.193                        0 55F1 A   .194                        0 55EB A   
.195                        0 5623 A   .196                        0 5633 A   
.197                        0 5667 A   .198                        0 5663 A   
.199                        0 5732 A   .19A                        0 56C8 A   
.19B                        0 582A A   .19C                        0 582A A   
.19D                        0 5812 A   .19E                        0 5767 A   
.19F                        0 580B A   .1A                         0 375D A   
.1A1                        0 57F5 A   .1A2                        0 577B A   
.1A3                        0 577B A   .1A4                        0 57A4 A   
.1A5                        0 57CD A   .1A6                        0 57F0 A   
.1A7                        0 582A A   .1A8                        0 581E A   
.1A9                        0 585E A   .1AA                        0 585A A   
.1AB                        0 592D A   .1AC                        0 58BF A   
.1AD                        0 592A A   .1AE                        0 591E A   
.1AF                        0 58F5 A   .1B                         0 376B A   
.1B0                        0 592A A   .1B1                        0 5A25 A   
.1B2                        0 5A25 A   .1B3                        0 5A0D A   
.1B4                        0 5962 A   .1B5                        0 5A06 A   
.1B7                        0 59F0 A   .1B8                        0 5976 A   
.1B9                        0 5976 A   .1BA                        0 599F A   
.1BB                        0 59C8 A   .1BC                        0 59EB A   
.1BD                        0 5A25 A   .1BE                        0 5A19 A   
.1BF                        0 5AD4 A   .1C                         0 37A6 A   
.1C0                        0 5AD0 A   .1C1                        0 5AEE A   
.1C2                        0 5AEA A   .1C3                        0 5D41 A   
.1C5                        0 5D29 A   .1C6                        0 5B03 A   
.1C7                        0 5B03 A   .1C8                        0 5B84 A   
.1C9                        0 5B76 A   .1CA                        0 5BA9 A   
.1CB                        0 5BDB A   .1CC                        0 5BBF A   
.1CD                        0 5BF5 A   .1CE                        0 5C07 A   
.1CF                        0 5BFE A   .1D                         0 37E0 A   
.1D0                        0 5C73 A   .1D1                        0 5C2D A   
.1D2                        0 5CB3 A   .1D3                        0 5CC7 A   
.1D4                        0 5CBC A   .1D5                        0 5CDD A   
.1D6                        0 5CF2 A   .1D7                        0 5D24 A   
.1D8                        0 5D7B A   .1D9                        0 5D77 A   
.1DA                        0 5D95 A   .1DB                        0 5D91 A   
.1DC                        0 5F2C A   .1DE                        0 5F14 A   
.1DF                        0 5DAA A   .1E                         0 37F5 A   
.1E0                        0 5DAA A   .1E1                        0 5E3E A   
.1E2                        0 5E30 A   .1E3                        0 5E37 A   
.1E4                        0 5DEC A   .1E5                        0 5E30 A   
.1E6                        0 5E1C A   .1E7                        0 5E3E A   
.1E8                        0 5E41 A   .1E9                        0 5E6D A   
.1EA                        0 5E64 A   .1EB                        0 5EB8 A   
.1EC                        0 5E93 A   .1ED                        0 5ED9 A   
.1EE                        0 5EDB A   .1EF                        0 5F0A A   
.1F                         0 3815 A   .1F0                        0 5F6C A   
.1F1                        0 5F5B A   .1F2                        0 5F96 A   
.1F3                        0 5F92 A   .1F4                        0 61F7 A   
.1F6                        0 61D6 A   .1F7                        0 5FE7 A   
.1F8                        0 5FEA A   .1F9                        0 5FF8 A   
.1FA                        0 5FF1 A   .1FB                        0 5FFB A   
.1FC                        0 6003 A   .1FD                        0 600D A   
.1FE                        0 605A A   .1FF                        0 604F A   
.2                          0 3672 A   .20                         0 3835 A   
.200                        0 600D A   .201                        0 605A A   
.202                        0 605D A   .203                        0 60F7 A   
.204                        0 6075 A   .205                        0 60F4 A   
.206                        0 60D1 A   .207                        0 61CD A   
.208                        0 61CD A   .20A                        0 61B7 A   
.20B                        0 613D A   .20C                        0 613D A   
.20D                        0 6166 A   .20E                        0 618F A   
.20F                        0 61B2 A   .21                         0 3852 A   
.210                        0 620D A   .211                        0 6201 A   
.212                        0 62E2 A   .213                        0 6219 A   
.214                        0 62B2 A   .215                        0 6231 A   
.216                        0 62D9 A   .217                        0 6692 A   
.218                        0 6681 A   .219                        0 6688 A   
.21A                        0 65CA A   .21B                        0 663D A   
.21C                        0 6637 A   .21D                        0 6692 A   
.21E                        0 6773 A   .21F                        0 6763 A   
.22                         0 386D A   .220                        0 678B A   
.221                        0 68D0 A   .222                        0 68C1 A   
.223                        0 68C8 A   .224                        0 6884 A   
.225                        0 68D0 A   .226                        0 68E5 A   
.227                        0 68DA A   .228                        0 6969 A   
.229                        0 695A A   .22A                        0 6961 A   
.22B                        0 6920 A   .22C                        0 6969 A   
.22D                        0 697C A   .22E                        0 6973 A   
.22F                        0 69FA A   .23                         0 388A A   
.230                        0 69EB A   .231                        0 69F2 A   
.232                        0 69B7 A   .233                        0 69FA A   
.234                        0 6A0D A   .235                        0 6A04 A   
.236                        0 6A98 A   .237                        0 6A89 A   
.238                        0 6A90 A   .239                        0 6A55 A   
.23A                        0 6A98 A   .23B                        0 6AAB A   
.23C                        0 6AA2 A   .23D                        0 6C61 A   
.23F                        0 6C3C A   .24                         0 3899 A   
.240                        0 6AE8 A   .241                        0 6B1F A   
.242                        0 6B56 A   .243                        0 6B79 A   
.244                        0 6B9C A   .245                        0 6BBF A   
.246                        0 6BE2 A   .247                        0 6C04 A   
.248                        0 6C26 A   .249                        0 A10F A   
.24A                        0 6C5F A   .24B                        0 6C4F A   
.24C                        0 6E1C A   .24D                        0 6E0A A   
.24E                        0 6EA6 A   .24F                        0 6E9A A   
.25                         0 39D9 A   .250                        0 6E4B A   
.251                        0 6E7E A   .252                        0 6E69 A   
.253                        0 6EA6 A   .254                        0 6EBE A   
.255                        0 6EAF A   .256                        0 7089 A   
.257                        0 7080 A   .258                        0 709B A   
.259                        0 7092 A   .25A                        0 70AD A   
.25B                        0 70A4 A   .25C                        0 7360 A   
.25D                        0 70FA A   .25E                        0 71E5 A   
.25F                        0 71D6 A   .260                        0 71DD A   
.261                        0 71AA A   .262                        0 71E5 A   
.263                        0 7253 A   .264                        0 7244 A   
.265                        0 724B A   .266                        0 7218 A   
.267                        0 7253 A   .268                        0 72A6 A   
.269                        0 7297 A   .26A                        0 729E A   
.26B                        0 725A A   .26C                        0 72A6 A   
.26D                        0 72F1 A   .26E                        0 72E2 A   
.26F                        0 72E9 A   .27                         0 3983 A   
.270                        0 72B6 A   .271                        0 72F1 A   
.272                        0 75DB A   .273                        0 736B A   
.274                        0 750C A   .275                        0 74FD A   
.276                        0 7504 A   .277                        0 74D5 A   
.278                        0 750C A   .279                        0 769B A   
.27A                        0 75E6 A   .27B                        0 7685 A   
.27C                        0 7676 A   .27D                        0 767D A   
.27E                        0 7657 A   .27F                        0 7685 A   
.28                         0 389F A   .280                        0 795D A   
.281                        0 76B3 A   .282                        0 7722 A   
.283                        0 7713 A   .284                        0 771A A   
.285                        0 76E6 A   .286                        0 7722 A   
.287                        0 77A7 A   .288                        0 7798 A   
.289                        0 779F A   .28A                        0 7763 A   
.28B                        0 7791 A   .28C                        0 776B A   
.28D                        0 77A7 A   .28E                        0 77C9 A   
.28F                        0 77C1 A   .29                         0 389F A   
.290                        0 786A A   .291                        0 785B A   
.292                        0 7862 A   .293                        0 7826 A   
.294                        0 786A A   .295                        0 78C3 A   
.296                        0 78B4 A   .297                        0 78BB A   
.298                        0 7887 A   .299                        0 78C3 A   
.29A                        0 7BD8 A   .29B                        0 7968 A   
.29C                        0 7B09 A   .29D                        0 7AFA A   
.29E                        0 7B01 A   .29F                        0 7AD2 A   
.2A                         0 38C8 A   .2A0                        0 7B09 A   
.2A1                        0 7C79 A   .2A2                        0 7BE3 A   
.2A3                        0 7C65 A   .2A4                        0 7C56 A   
.2A5                        0 7C5D A   .2A6                        0 7C36 A   
.2A7                        0 7C65 A   .2A8                        0 7CBB A   
.2A9                        0 7CAD A   .2AA                        0 7CB4 A   
.2AB                        0 7C91 A   .2AC                        0 7CAD A   
.2AD                        0 7CA5 A   .2AE                        0 7CBB A   
.2AF                        0 A0FC A   .2B                         0 38C8 A   
.2B0                        0 A0E9 A   .2B1                        0 7F50 A   
.2B2                        0 7F3A A   .2B3                        0 7E36 A   
.2B4                        0 7E4B A   .2B5                        0 7E3D A   
.2B6                        0 7F33 A   .2B7                        0 7F23 A   
.2B8                        0 7E54 A   .2B9                        0 7E83 A   
.2BA                        0 7E62 A   .2BB                        0 7E5B A   
.2BC                        0 7F21 A   .2BD                        0 7F21 A   
.2BE                        0 7E8C A   .2BF                        0 7EB0 A   
.2C                         0 38DD A   .2C0                        0 7EAA A   
.2C1                        0 7F1C A   .2C2                        0 7F0D A   
.2C3                        0 7F14 A   .2C4                        0 7EC3 A   
.2C5                        0 7EF5 A   .2C6                        0 7EE2 A   
.2C7                        0 7F06 A   .2C8                        0 7F1C A   
.2C9                        0 7F33 A   .2CA                        0 7F50 A   
.2CB                        0 9558 A   .2CC                        0 954D A   
.2CD                        0 950A A   .2CE                        0 9544 A   
.2CF                        0 9514 A   .2D                         0 38DD A   
.2D0                        0 9524 A   .2D1                        0 951B A   
.2D2                        0 9542 A   .2D3                        0 9539 A   
.2D4                        0 9530 A   .2D5                        0 9542 A   
.2D6                        0 954D A   .2D7                        0 9558 A   
.2D8                        0 A0BA A   .2D9                        0 968F A   
.2DA                        0 967F A   .2DB                        0 965F A   
.2DC                        0 9657 A   .2DD                        0 964F A   
.2DE                        0 9647 A   .2DF                        0 9677 A   
.2E                         0 38F2 A   .2E0                        0 966F A   
.2E1                        0 9667 A   .2E2                        0 A093 A   
.2E3                        0 9753 A   .2E4                        0 9708 A   
.2E5                        0 976B A   .2E6                        0 984D A   
.2E7                        0 983F A   .2E8                        0 976B A   
.2E9                        0 9813 A   .2EA                        0 97D3 A   
.2EB                        0 97C9 A   .2EC                        0 97B2 A   
.2ED                        0 A07A A   .2EE                        0 9834 A   
.2EF                        0 A049 A   .2F                         0 38F2 A   
.2F0                        0 984D A   .2F1                        0 A012 A   
.2F2                        0 98B8 A   .2F3                        0 98BA A   
.2F4                        0 9982 A   .2F5                        0 98E9 A   
.2F6                        0 9FFF A   .2F7                        0 9936 A   
.2F8                        0 9930 A   .2F9                        0 995C A   
.2FA                        0 994B A   .2FB                        0 997A A   
.2FC                        0 9966 A   .2FD                        0 9995 A   
.2FE                        0 9FE6 A   .2FF                        0 99B5 A   
.3                          0 A1BA A   .30                         0 3907 A   
.300                        0 999D A   .301                        0 99E5 A   
.302                        0 99E7 A   .303                        0 99F7 A   
.304                        0 99F3 A   .305                        0 99F9 A   
.306                        0 9A0B A   .307                        0 9A07 A   
.308                        0 9A0D A   .309                        0 9A44 A   
.30A                        0 9A21 A   .30B                        0 9B15 A   
.30C                        0 9A60 A   .30D                        0 9FC9 A   
.30E                        0 9FB3 A   .30F                        0 9AA7 A   
.31                         0 3916 A   .310                        0 9A9E A   
.311                        0 9B36 A   .312                        0 9F9A A   
.313                        0 9B36 A   .314                        0 9B30 A   
.315                        0 9BBA A   .316                        0 9BB6 A   
.317                        0 9C04 A   .318                        0 9BF5 A   
.319                        0 9BFC A   .31A                        0 9BC2 A   
.31B                        0 9BF5 A   .31C                        0 9BCA A   
.31D                        0 9C04 A   .31E                        0 9C4C A   
.31F                        0 9C2E A   .32                         0 3934 A   
.320                        0 9D31 A   .321                        0 9D31 A   
.322                        0 9D22 A   .323                        0 9D29 A   
.324                        0 9CF6 A   .325                        0 9D31 A   
.326                        0 9E31 A   .328                        0 9E1F A   
.329                        0 9D4F A   .32A                        0 9F87 A   
.32B                        0 9D79 A   .32C                        0 9D70 A   
.32D                        0 9D8B A   .32E                        0 9F6D A   
.32F                        0 9DCE A   .33                         0 3942 A   
.330                        0 9DC2 A   .331                        0 9DD0 A   
.332                        0 9F50 A   .333                        0 9E13 A   
.334                        0 9E07 A   .335                        0 9E15 A   
.336                        0 9F50 A   .337                        0 9F6D A   
.338                        0 9F87 A   .339                        0 9F9A A   
.33A                        0 9FB3 A   .33B                        0 9FC9 A   
.33C                        0 9FE6 A   .33D                        0 9FFF A   
.33E                        0 A012 A   .33F                        0 A049 A   
.34                         0 3950 A   .340                        0 A07A A   
.341                        0 A093 A   .342                        0 A0BA A   
.343                        0 A0E9 A   .344                        0 A0FC A   
.345                        0 A10F A   .346                        0 A135 A   
.347                        0 A14E A   .348                        0 A175 A   
.349                        0 A198 A   .34A                        0 A1BA A   
.35                         0 395E A   .36                         0 397E A   
.37                         0 39DC A   .38                         0 3A2E A   
.3A                         0 3A20 A   .3B                         0 39E1 A   
.3C                         0 39E6 A   .3D                         0 3A04 A   
.3E                         0 3A1B A   .3F                         0 3A31 A   
.4                          0 3BEC A   .40                         0 3A65 A   
.41                         0 3A81 A   .42                         0 3ACA A   
.44                         0 3ABC A   .45                         0 3A86 A   
.46                         0 3A95 A   .47                         0 3AA6 A   
.48                         0 3AB7 A   .49                         0 3AD7 A   
.4A                         0 3B89 A   .4B                         0 3AE0 A   
.4C                         0 3B87 A   .4E                         0 3B5C A   
.4F                         0 3AE5 A   .50                         0 3AF8 A   
.51                         0 3B0D A   .52                         0 3B22 A   
.53                         0 3B3B A   .54                         0 3B46 A   
.55                         0 3B51 A   .56                         0 3B85 A   
.57                         0 3B6F A   .58                         0 3B8F A   
.59                         0 3B91 A   .5A                         0 3BE3 A   
.5B                         0 3BA9 A   .5C                         0 3C0C A   
.5D                         0 3C04 A   .5E                         0 A198 A   
.5F                         0 3C43 A   .6                          0 3B96 A   
.60                         0 3C3F A   .61                         0 3E16 A   
.62                         0 3CD1 A   .63                         0 3D43 A   
.65                         0 3D33 A   .66                         0 3D11 A   
.67                         0 3D19 A   .68                         0 3D21 A   
.69                         0 3D29 A   .6A                         0 3E00 A   
.6B                         0 3DEF A   .6C                         0 3DF6 A   
.6D                         0 3D4B A   .6E                         0 3DC8 A   
.6F                         0 3D6C A   .7                          0 36A1 A   
.70                         0 3DEF A   .71                         0 3E00 A   
.72                         0 3E16 A   .73                         0 3E09 A   
.74                         0 3E66 A   .75                         0 3E57 A   
.76                         0 3E5E A   .77                         0 3E26 A   
.78                         0 3E66 A   .79                         0 3EEB A   
.7A                         0 3EDC A   .7B                         0 3EE3 A   
.7C                         0 3EA4 A   .7D                         0 3EEB A   
.7E                         0 3F32 A   .7F                         0 3F23 A   
.8                          0 36FC A   .80                         0 3F2A A   
.81                         0 3EF2 A   .82                         0 3F32 A   
.83                         0 3F4D A   .84                         0 3F48 A   
.85                         0 3F50 A   .86                         0 3FA7 A   
.87                         0 3F98 A   .88                         0 3F9F A   
.89                         0 3F67 A   .8A                         0 3FA7 A   
.8B                         0 40A7 A   .8C                         0 3FE6 A   
.8D                         0 4022 A   .8E                         0 3FFC A   
.8F                         0 40A7 A   .90                         0 404D A   
.91                         0 4029 A   .92                         0 40A7 A   
.93                         0 41E4 A   .94                         0 41D6 A   
.95                         0 4206 A   .96                         0 41F7 A   
.97                         0 41FE A   .98                         0 41EB A   
.99                         0 4206 A   .9A                         0 4232 A   
.9B                         0 4224 A   .9C                         0 4297 A   
.9E                         0 4288 A   .9F                         0 424A A   
.A                          0 36D7 A   .A0                         0 425E A   
.A1                         0 4272 A   .A2                         0 4365 A   
.A3                         0 4315 A   .A4                         0 430E A   
.A5                         0 4307 A   .A6                         0 42FF A   
.A7                         0 433E A   .A8                         0 4329 A   
.A9                         0 4352 A   .AA                         0 43C7 A   
.AB                         0 43C3 A   .AC                         0 44B2 A   
.AD                         0 43FA A   .AE                         0 44EA A   
.AF                         0 44E6 A   .B                          0 36B3 A   
.B0                         0 453C A   .B1                         0 4538 A   
.B2                         0 4566 A   .B3                         0 4562 A   
.B4                         0 45FE A   .B5                         0 4590 A   
.B6                         0 4622 A   .B7                         0 A175 A   
.B8                         0 475D A   .B9                         0 474E A   
.BA                         0 4755 A   .BB                         0 4712 A   
.BC                         0 475D A   .BD                         0 47E8 A   
.BE                         0 47D9 A   .BF                         0 47E0 A   
.C                          0 36BF A   .C0                         0 47AF A   
.C1                         0 47E8 A   .C2                         0 4908 A   
.C3                         0 48F7 A   .C4                         0 48FE A   
.C5                         0 4856 A   .C6                         0 48B5 A   
.C7                         0 485F A   .C8                         0 48F7 A   
.C9                         0 4908 A   .CA                         0 49BD A   
.CB                         0 49AE A   .CC                         0 49B5 A   
.CD                         0 4940 A   .CE                         0 4981 A   
.CF                         0 4949 A   .D                          0 36BF A   
.D0                         0 49AE A   .D1                         0 49BD A   
.D2                         0 49D3 A   .D3                         0 49CF A   
.D4                         0 49DF A   .D5                         0 49DB A   
.D6                         0 4A09 A   .D7                         0 4A05 A   
.D8                         0 4A46 A   .D9                         0 4A35 A   
.DA                         0 4A57 A   .DB                         0 4A50 A   
.DC                         0 4A68 A   .DD                         0 4A61 A   
.DE                         0 4A77 A   .DF                         0 4A72 A   
.E                          0 36BF A   .E0                         0 4D07 A   
.E1                         0 4A9E A   .E2                         0 A14E A   
.E3                         0 4B41 A   .E4                         0 4B0C A   
.E5                         0 4AFA A   .E6                         0 4AE8 A   
.E7                         0 4AE1 A   .E8                         0 4ADA A   
.E9                         0 4D04 A   .EA                         0 4C26 A   
.EB                         0 4B4A A   .EC                         0 4C23 A   
.ED                         0 4C10 A   .EE                         0 4C17 A   
.EF                         0 4B55 A   .F                          0 36BF A   
.F0                         0 4BB5 A   .F1                         0 4B73 A   
.F2                         0 4B6C A   .F3                         0 4C10 A   
.F4                         0 4C23 A   .F5                         0 4D04 A   
.F6                         0 4D04 A   .F7                         0 4CF1 A   
.F8                         0 4CF8 A   .F9                         0 4C31 A   
.FA                         0 4C8A A   .FB                         0 4C48 A   
.FC                         0 4C41 A   .FD                         0 4CE5 A   
.FE                         0 4CF1 A   .FF                         0 4CEF A   
_biosfn_alternate_prtsc     0 6CC2 A   _biosfn_enable_video_refre+ 0 6DE1 A   
_biosfn_get_cursor_pos      0 44B6 A   _biosfn_get_font_info       0 6AD7 A   
_biosfn_load_gfx_8_14_char+ 0 6ABF A   _biosfn_load_gfx_8_16_char+ 0 6ACF A   
_biosfn_load_gfx_8_8_chars  0 6AAF A   _biosfn_load_gfx_8_8_dd_ch+ 0 6AC7 A   
_biosfn_load_gfx_user_char+ 0 6AB7 A   _biosfn_load_text_8_14_pat  0 68E9 A   
_biosfn_load_text_8_16_pat  0 6A1E A   _biosfn_load_text_8_8_pat   0 6980 A   
_biosfn_load_text_user_pat  0 684D A   _biosfn_perform_gray_scale+ 0 65A6 A   
_biosfn_read_char_attr      0 50EF A   _biosfn_read_pixel          0 5D45 A   
_biosfn_read_state_info     0 6F35 A   _biosfn_read_video_state_s+ 0 70B4 A   
_biosfn_read_video_state_s+ 0 706D A   _biosfn_restore_video_stat+ 0 76A2 A   
_biosfn_save_video_state    0 70D8 A   _biosfn_scroll              0 49C1 A   
_biosfn_set_active_page     0 452B A   _biosfn_set_cursor_pos      0 43B6 A   
_biosfn_set_cursor_shape    0 429B A   _biosfn_set_video_mode      0 3BEE A   
_biosfn_switch_video_inter+ 0 6DD9 A   _biosfn_write_char_attr     0 5637 A   
_biosfn_write_char_only     0 582E A   _biosfn_write_pixel         0 5AA4 A   
_biosfn_write_string        0 6DE9 A   _biosfn_write_teletype      0 5F4E A   
_dac_regs                   0 0294 A   _dispi_get_max_bpp          0 9309 A   
_dispi_get_max_xres         0 92E7 A   _dispi_set_bank             0 9349 A   
_dispi_set_bank_farcall     0 9367 A   _dispi_set_bpp              0 92B0 A   
_dispi_set_enable           0 932B A   _dispi_set_xres             0 927B A   
_dispi_set_yres             0 9292 A   _display_info               0 361E A   
_display_splash_screen      0 361D A   _display_string             0 363C A   
_fail                       0 9F39 A   _find_vga_entry             0 7C80 A   
_get_SS                     0 7DF8 A E _get_font_access            0 66AD A   
_inb                        0 7DC2 A E _int10_debugmsg             0 3663 A   
_int10_func                 0 3694 A   _inw                        0 7DCD A E 
_line_to_vpti               0 0284 A   _memcpyb                    0 7D0C A   
_memcpyw                    0 7D3C A   _memsetb                    0 7CC2 A   
_memsetw                    0 7CE7 A   _mode_info_find_mode        0 94FD A   
_mode_info_list             0 7FAE A   _no_vbebios_info_string     0 90F8 A   
_outb                       0 7DD8 A E _outw                       0 7DE8 A E 
_palette0                   0 0A18 A   _palette1                   0 0AD8 A   
_palette2                   0 0B98 A   _palette3                   0 0C58 A   
_pci_get_lfb_addr           0 7F54 A   _printf                     0 7E17 A E 
_read_byte                  0 7D6C A   _read_word                  0 7D7F A   
_release_font_access        0 66D0 A   _set_scan_lines             0 6704 A   
_static_functionality       0 0F58 A   _unimplemented              0 7DFB A E 
_unknown                    0 7E09 A E _vbe_biosfn_read_video_sta+ 0 9B6E A E 
_vbe_biosfn_restore_video_+ 0 9C08 A E _vbe_biosfn_return_control+ 0 95D5 A E 
_vbe_biosfn_return_mode_in+ 0 987F A E _vbe_biosfn_save_restore_s+ 0 9D35 A E 
_vbe_biosfn_save_video_sta+ 0 9B76 A E _vbe_biosfn_set_get_palett+ 0 9F23 A E 
_vbe_biosfn_set_mode        0 99C8 A E _vbe_has_vbe_display        0 955E A   
_vbebios_copyright          0 9026 A   _vbebios_info_string        0 90D2 A   
_vbebios_product_name       0 9084 A   _vbebios_product_revision   0 909D A   
_vbebios_vendor_name        0 906C A   _vga_compat_setup           0 9426 A   
_vga_modes                  0 0204 A   _vgafont14                  0 1768 A   
_vgafont14alt               0 3568 A   _vgafont16                  0 2568 A   
_vgafont16alt               0 3569 A   _vgafont8                   0 0F68 A   
_vgamem_copy_cga            0 47FA A   _vgamem_copy_pl4            0 46AD A   
_vgamem_fill_cga            0 490C A   _vgamem_fill_pl4            0 476F A   
_video_param_table          0 0298 A   _video_save_pointer_table   0 3601 A   
_write_byte                 0 7D92 A   _write_gfx_char_cga         0 5360 A   
_write_gfx_char_lin         0 5563 A   _write_gfx_char_pl4         0 51ED A   
_write_word                 0 7DAA A   biosfn_enable_cursor_emula+ 0 6DB7 A   
biosfn_enable_default_pale+ 0 6D53 A   biosfn_enable_grayscale_su+ 0 6D93 A   
biosfn_enable_video_addres+ 0 6D75 A   biosfn_get_all_palette_reg  0 644B A   
biosfn_get_ega_info         0 6C9F A   biosfn_get_single_palette_+ 0 6419 A   
biosfn_get_video_mode       0 6313 A   biosfn_group_0B             0 5A29 A   
biosfn_group_10             0 633A A   biosfn_group_1A             0 6EC2 A   
biosfn_read_all_dac_reg     0 652B A   biosfn_read_display_code    0 6ECE A   
biosfn_read_overscan_borde+ 0 643D A   biosfn_read_pel_mask        0 655E A   
biosfn_read_single_dac_reg  0 6510 A   biosfn_read_video_dac_stat+ 0 6569 A   
biosfn_select_vert_res      0 6CCA A   biosfn_select_video_dac_co+ 0 64CD A   
biosfn_set_all_dac_reg      0 64A5 A   biosfn_set_all_palette_reg  0 63C6 A   
biosfn_set_border_color     0 5A37 A   biosfn_set_display_code     0 6EE3 A   
biosfn_set_overscan_border+ 0 63BE A   biosfn_set_palette          0 5A76 A   
biosfn_set_pel_mask         0 6553 A   biosfn_set_single_dac_reg   0 648C A   
biosfn_set_single_palette_+ 0 63A4 A   biosfn_set_text_block_spec+ 0 6A11 A   
biosfn_toggle_intensity     0 63F3 A   bit8_clear                  0 946E A   
bit9_clear                  0 9475 A   bpp4_mode                   0 920F A   
dispi_get_bank              0 9359 A   dispi_get_bpp               0 92CE A   
dispi_get_enable            0 933B A   dispi_get_id                0 925D A   
dispi_get_virt_height       0 9418 A   dispi_get_virt_width        0 940A A   
dispi_get_x_offset          0 93AE A   dispi_get_y_offset          0 93CC A   
dispi_set_bank_farcall_err+ 0 9399 A   dispi_set_bank_farcall_get  0 938B A   
dispi_set_id                0 926B A   dispi_set_virt_width        0 93F7 A   
dispi_set_x_offset          0 939E A   dispi_set_y_offset          0 93BC A   
get_bpp_noinc               0 92E5 A   get_dac_16_page             0 6599 A   
get_dac_palette_format      0 9F0F A   get_display_start           0 9EDC A   
get_display_window          0 9E64 A   get_logical_scan_line_leng+ 0 9E9C A   
get_palette_loop            0 6453 A   idiv_u                      0 66FF A   
illegal_window              0 91A2 A   init_bios_area              0 35C9 A   
init_vga_card               0 356A A   int10_end                   0 0202 A   
int10_group_10_unknown      0 63A0 A   int10_normal                0 01F4 A   
int10_test_0B               0 0151 A   int10_test_1001             0 6340 A   
int10_test_1002             0 6346 A   int10_test_1003             0 634C A   
int10_test_1007             0 6353 A   int10_test_1008             0 635A A   
int10_test_1009             0 6361 A   int10_test_1010             0 6368 A   
int10_test_1012             0 636F A   int10_test_1013             0 6376 A   
int10_test_1015             0 637D A   int10_test_1017             0 6384 A   
int10_test_1018             0 638B A   int10_test_1019             0 6392 A   
int10_test_101A             0 6399 A   int10_test_101B             0 01AA A   
int10_test_1103             0 015C A   int10_test_12               0 0167 A   
int10_test_1A               0 0146 A   int10_test_4F               0 01B9 A   
int10_test_BL30             0 0177 A   int10_test_BL31             0 0182 A   
int10_test_BL32             0 018C A   int10_test_BL33             0 0196 A   
int10_test_BL34             0 01A0 A   int10_test_vbe_05           0 01C7 A   
int10_test_vbe_06           0 01D0 A   int10_test_vbe_07           0 01D9 A   
int10_test_vbe_08           0 01E2 A   int10_test_vbe_0A           0 01EB A   
lmulul                      0 95BC A   memcpyb_end                 0 7D34 A   
memcpyw_end                 0 7D64 A   memsetb_end                 0 7CE1 A   
memsetw_end                 0 7D06 A   mode_ega_color              0 6CBF A   
msg_alt_dcc                 0 6F07 A   msg_vbe_init                0 911C A   
msg_vert_res                0 6D2C A   msg_vga_init                0 3586 A   
no_4bpp_1                   0 9E94 A   no_4bpp_2                   0 9EB1 A   
no_actl_reg1                0 63BD A   no_actl_reg2                0 643C A   
no_vbe_flag                 0 95B1 A   no_vbe_interface            0 9595 A   
no_vbe_mode                 0 9B60 A   pci_get_lfb_addr_3          0 7F67 A   
pci_get_lfb_addr_4          0 7F7D A   pci_get_lfb_addr_5          0 7F79 A   
pci_get_lfb_addr_6          0 7F8D A   pci_read_reg                0 7F95 A   
read_dac_loop               0 653C A   set_actl_normal             0 6509 A   
set_cga_palette_loop        0 5A83 A   set_dac_16_page             0 6503 A   
set_dac_loop                0 64B6 A   set_dac_mode                0 9F0C A   
set_dac_page                0 64F0 A   set_dac_palette_format      0 9EF7 A   
set_display_start           0 9ECE A   set_display_window          0 9E54 A   
set_intensity_loop          0 5A55 A   set_logical_scan_line_byte+ 0 9E83 A   
set_logical_scan_line_pixe+ 0 9E99 A   set_low_border              0 5A4F A   
set_normal_dac              0 9F09 A   set_palette_loop            0 63D5 A   
set_retcode                 0 6D25 A   set_vert_res                0 6D1B A   
set_width_svga              0 93E8 A   set_xy_regs                 0 921B A   
vbe_03_ok                   0 9B69 A   vbe_05_failed               0 9E6D A   
vbe_08_ok                   0 9F1B A   vbe_08_unsupported          0 9F1F A   
vbe_biosfn_display_window_+ 0 9E44 A   vbe_biosfn_return_current_+ 0 9B49 A   
vbe_biosfn_return_protecte+ 0 9F24 A   vbe_biosfn_set_get_dac_pal+ 0 9EEC A   
vbe_biosfn_set_get_display+ 0 9EBE A   vbe_biosfn_set_get_logical+ 0 9E71 A   
vbe_display_info            0 959F A   vbe_init                    0 9571 A   
vert_res_200                0 6D11 A   vert_res_350                0 6D07 A   
vert_res_400                0 6CFB A   vesa_pm_end                 0 925D A   
vesa_pm_io_ports_table      0 9164 A   vesa_pm_set_display_start   0 91A7 A   
vesa_pm_set_display_start1  0 91B6 A   vesa_pm_set_display_window+ 0 917B A   
vesa_pm_set_window          0 9170 A   vesa_pm_start               0 915C A   
vesa_pm_unimplemented       0 9258 A   vga_compat_end              0 94FB A   
vga_set_virt_width          0 93DA A   vgabios_copyright           0 004B A   
vgabios_date                0 003D A   vgabios_end                 0 9F4F A   
vgabios_entry_point         0 0003 A   vgabios_init_func           0 0102 A   
vgabios_int10_handler       0 012C A   vgabios_license             0 0077 A   
vgabios_name                0 0022 A   vgabios_start               0 0000 A   
vgabios_version             0 0038 A   vgabios_website             0 00AC A   

00000 errors
00000 warnings
